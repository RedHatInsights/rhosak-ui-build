{"version":3,"file":"js/6957.9907d830db8a777dfb17.js","mappings":"2eAmBMA,EAN6B,uBAA7BC,OAAOC,SAASC,SACX,4BAEF,kCAKHC,EAAQ,eAAK,EACsC,IACvDC,WAwCF,SAtCiB,IAAAC,OAAK,WACZ,IAAAC,GAAS,SAAW,KACtBC,GAAkB,UAWxB,OATA,IAAAC,kBAAgB,WACd,IAAMC,EAAKC,SAASC,cAClB,8BAEEF,IACFA,EAAGG,MAAgB,SAAI,OAE3B,GAAG,KAGD,SAAC,EAAAC,SAAQ,GAACV,MAAOA,GAAK,WACpB,UAAC,KAAW,GACVW,YAAa,kB,OAAA,E,OAAA,E,EAAA,W,gnCACG,SAAMR,EAAKS,Y,OACzB,KADMC,EAAQ,UAEZ,MAAMC,MAAM,WAEd,MAAO,CAAP,EAAOD,G,iBALI,K,+QAObE,SAAUnB,EACVoB,gBAAiB,KAAI,YAErB,SAAC,gBAAM,GAACC,UAAU,QAAYpB,OAAOC,SAASoB,WAAS,WACrD,UAAC,KAAY,GAACC,IAAK,MAAI,YACrB,SAACf,EAAe,KAChB,SAAC,IAAG,YAGR,SAAC,IAAgB,UAIzB,G","sources":["webpack:///./src/AppEntry.tsx"],"sourcesContent":["import { getBaseName } from \"@redhat-cloud-services/frontend-components-utilities/helpers\";\nimport { useChrome } from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport { ApiProvider } from \"consoledot-api\";\nimport { memo, useLayoutEffect } from \"react\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport logger from \"redux-logger\";\nimport { I18nProvider, useXStateInspector } from \"ui\";\nimport App from \"./App\";\nimport { QuickstartLoader } from \"./QuickstartLoader\";\nimport { init } from \"./store\";\n\nfunction apiUrlFromHostname() {\n  if (window.location.hostname === \"console.redhat.com\") {\n    return \"https://api.openshift.com\";\n  }\n  return \"https://api.stage.openshift.com\";\n}\n\nconst apiUrl = process.env.API_URL || apiUrlFromHostname();\n\nconst store = init(\n  ...(process.env.NODE_ENV !== \"production\" ? [logger] : [])\n).getStore();\n\nconst AppEntry = memo(() => {\n  const { auth } = useChrome();\n  const XStateInspector = useXStateInspector();\n\n  useLayoutEffect(() => {\n    const el = document.querySelector<HTMLDivElement>(\n      \".chr-scope__default-layout\"\n    );\n    if (el) {\n      el.style[\"overflow\"] = \"auto\";\n    }\n  }, []);\n\n  return (\n    <Provider store={store}>\n      <ApiProvider\n        accessToken={async () => {\n          const token = await auth.getToken();\n          if (!token) {\n            throw Error(\"No auth\");\n          }\n          return token;\n        }}\n        basePath={apiUrl}\n        refetchInterval={5000}\n      >\n        <Router basename={getBaseName(window.location.pathname)}>\n          <I18nProvider lng={\"en\"}>\n            <XStateInspector />\n            <App />\n          </I18nProvider>\n        </Router>\n        <QuickstartLoader />\n      </ApiProvider>\n    </Provider>\n  );\n});\n\nexport default AppEntry;\n"],"names":["apiUrl","window","location","hostname","store","getStore","memo","auth","XStateInspector","useLayoutEffect","el","document","querySelector","style","Provider","accessToken","getToken","token","Error","basePath","refetchInterval","basename","pathname","lng"],"sourceRoot":""}