{"version":3,"file":"js/524.1670935874363.32f7eb8f74bf7d0c8895.js","mappings":"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","sources":["webpack:///./src/routes/streams/routes.ts","webpack:///./src/DrawerProvider.tsx","webpack:///./src/routes/overview/OverviewRoute.tsx","webpack:///./src/routes/streams/detail/UseDataPlaneRouteMatch.tsx","webpack:///./src/routes/streams/detail/DataPlaneHeaderConnected.tsx","webpack:///./src/routes/streams/detail/AclsRoute.tsx","webpack:///./src/routes/streams/detail/ConsumerGroupsRoute.tsx","webpack:///./src/routes/streams/detail/DashboardRoute.tsx","webpack:///./src/routes/streams/detail/SettingsRoute.tsx","webpack:///./src/routes/streams/detail/TopicsRoute.tsx","webpack:///./src/routes/streams/kafka-instances/KafkaInstancesRoute.tsx","webpack:///./src/routes/StreamsRoutes.tsx","webpack:///./src/App.tsx","webpack:///./src/store/index.ts","webpack:///../../packages/consoledot-api/src/ApiProvider.tsx","webpack:///../../packages/consoledot-api/src/useApi.ts","webpack:///../../packages/consoledot-api/src/useCreateInstance.ts","webpack:///../../packages/consoledot-api/src/queryKeys.ts","webpack:///../../packages/consoledot-api/src/fetchProviderRegionSizes.ts","webpack:///../../packages/consoledot-api/src/fetchProvidersWithRegions.ts","webpack:///../../packages/consoledot-api/src/utilsAndConstants.ts","webpack:///../../packages/consoledot-api/src/kafkaRequestToKafkaInstanceEnhanched.ts","webpack:///../../packages/consoledot-api/src/useKafkaInstanceTransformer.ts","webpack:///../../packages/consoledot-api/src/fetchOrganization.ts","webpack:///../../packages/consoledot-api/src/fetchStandardQuota.ts","webpack:///../../packages/consoledot-api/src/useKafkaInstance.ts","webpack:///../../packages/consoledot-api/src/fetchKafkaKpiMetrics.ts","webpack:///../../packages/consoledot-api/src/useKafkaInstanceKpiMetricsQuery.ts","webpack:///../../packages/consoledot-api/src/fetchKafkaInstanceMetrics.ts","webpack:///../../packages/consoledot-api/src/useKafkaInstanceMetricsQuery.ts","webpack:///../../packages/consoledot-api/src/fetchKafkaTopicMetrics.ts","webpack:///../../packages/consoledot-api/src/useKafkaInstanceTopicMetricsQuery.ts","webpack:///../../packages/consoledot-api/src/fetchKafkaTopics.ts","webpack:///../../packages/consoledot-api/src/useKafkaInstanceTopics.ts","webpack:///../../packages/consoledot-api/src/useKafkaInstanceTopicsQuery.ts","webpack:///../../packages/consoledot-api/src/fetchKafkaConsumerGroups.ts","webpack:///../../packages/consoledot-api/src/useKafkaInstanceConsumerGroups.ts","webpack:///../../packages/consoledot-api/src/valuesToQuery.ts","webpack:///../../packages/consoledot-api/src/fetchKafkaInstances.ts","webpack:///../../packages/consoledot-api/src/useKafkaInstances.ts","webpack:///../../packages/consoledot-api/src/types.ts","webpack:///../../packages/local-storage-helpers/index.ts","webpack:///../../packages/ui/src/components/CreateKafkaInstance/machines/shared.ts","webpack:///../../packages/ui/src/components/CreateKafkaInstance/machines/StandardPlanMachine.ts","webpack:///../../packages/ui/src/components/CreateKafkaInstance/machines/TrialPlanMachine.ts","webpack:///../../packages/ui/src/components/CreateKafkaInstance/machines/CreateKafkaInstanceMachine.ts","webpack:///../../packages/ui/src/components/CreateKafkaInstance/machines/CreateKafkaInstanceProvider.tsx","webpack:///../../packages/ui/src/components/Logos/images.ts","webpack:///../../packages/ui/src/components/Logos/AWSLogo.tsx","webpack:///../../packages/ui/src/components/Logos/AzureLogo.tsx","webpack:///../../packages/ui/src/components/Logos/GCPLogo.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/components/BillingTiles.tsx","webpack:///../../packages/ui/src/components/Logos/RedhatLogo.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/components/CloudProviderTiles.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/StandardInstanceForm.tsx","webpack:///../../packages/ui/src/hooks/useKafkaLabels.ts","webpack:///../../packages/ui/src/types.ts","webpack:///../../packages/ui/src/components/KafkaInstanceDrawer/components/DetailsTabAlert.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceDrawer/components/KafkaDetailsTab.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceDrawer/components/SuspendedConnection.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceDrawer/components/KafkaConnectionTabP2.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceDrawer/KafkaInstanceDrawer.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/components/StatusLabel.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/types.ts","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/components/StatusProgressStepper.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/components/StatusPopoverContent.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/components/StatusPopover.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/components/SuspendedPopover.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/KafkaInstanceStatus.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/MessageBrowserMachine.ts","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/utils.ts","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/types.ts","webpack:///../../packages/ui/src/components/KafkaInstanceActions.tsx","webpack:///../../packages/ui/src/components/KafkaInstances/components/EmptyStateNoInstances.tsx","webpack:///../../packages/ui/src/components/KafkaInstances/components/EmptyStateNoResults.tsx","webpack:///../../packages/ui/src/components/KafkaInstances/KafkaInstances.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceCapacityTable.tsx","webpack:///../../packages/ui/src/components/MarketingPage.tsx","webpack:///../../packages/ui/src/components/KafkaPageV3.tsx","webpack:///../../packages/ui/src/components/KafkaTopics/components/EmptyStateNoTopic.tsx","webpack:///../../packages/ui/src/components/KafkaTopics/types.ts","webpack:///../../packages/ui/src/components/KafkaTopics/KafkaTopics.tsx","webpack:///../../packages/ui/src/components/DataPlaneHeader.tsx","webpack:///../../packages/ui/src/components/ControlPlaneHeader.tsx","webpack:///../../packages/ui/src/components/I18nProvider.tsx","webpack:///../../packages/ui/src/components/Metrics/types.ts","webpack:///../../packages/ui/src/components/Metrics/components/EmptyStateInitialLoading.tsx","webpack:///../../packages/ui/src/components/Metrics/components/EmptyStateMetricsUnavailable.tsx","webpack:///../../packages/ui/src/components/Metrics/components/MetricsLayout.tsx","webpack:///../../packages/ui/src/components/Metrics/components/CardBodyLoading.tsx","webpack:///../../packages/ui/src/components/Metrics/consts.ts","webpack:///../../packages/ui/src/components/Metrics/components/ChartSkeletonLoader.tsx","webpack:///../../packages/ui/src/components/Metrics/components/useChartWidth.tsx","webpack:///../../packages/ui/src/components/Metrics/components/utils.ts","webpack:///../../packages/ui/src/components/Metrics/components/ChartLinearWithOptionalLimit.tsx","webpack:///../../packages/ui/src/components/Metrics/components/ChartLogSizePerPartition.tsx","webpack:///../../packages/ui/src/components/Metrics/components/ChartPopover.tsx","webpack:///../../packages/ui/src/components/Metrics/components/ChartTotalBytes.tsx","webpack:///../../packages/ui/src/components/Metrics/components/EmptyStateNoMetricsData.tsx","webpack:///../../packages/ui/src/components/Metrics/components/EmptyStateNoMetricsDataForSelection.tsx","webpack:///../../packages/ui/src/components/Metrics/components/EmptyStateNoTopics.tsx","webpack:///../../packages/ui/src/components/Metrics/components/EmptyStateNoTopicSelected.tsx","webpack:///../../packages/ui/src/components/Metrics/components/FilterByTime.tsx","webpack:///../../packages/ui/src/components/Metrics/components/FilterByTopic.tsx","webpack:///../../packages/ui/src/components/Metrics/components/ToolbarRefresh.tsx","webpack:///../../packages/ui/src/components/Metrics/components/ToolbarTopicsMetrics.tsx","webpack:///../../packages/ui/src/components/Metrics/components/CardTopicsMetrics.tsx","webpack:///../../packages/ui/src/components/Metrics/components/ToolbarKafkaInstanceMetric.tsx","webpack:///../../packages/ui/src/components/Metrics/components/CardKafkaInstanceMetrics.tsx","webpack:///../../packages/ui/src/components/Metrics/components/CardKpi.tsx","webpack:///../../packages/ui/src/components/Metrics/components/MetricsLagAlert.tsx","webpack:///../../packages/ui/src/components/Metrics/components/PartitionCard.tsx","webpack:///../../packages/ui/src/components/Metrics/machines/KafkaInstanceMetricsMachine.ts","webpack:///../../packages/ui/src/components/Metrics/machines/TopicsMetricsMachine.ts","webpack:///../../packages/ui/src/components/Metrics/machines/MetricsKpiMachine.ts","webpack:///../../packages/ui/src/components/Metrics/KafkaInstanceMetricsProvider.tsx","webpack:///../../packages/ui/src/components/Metrics/MetricsKpiProvider.tsx","webpack:///../../packages/ui/src/components/Metrics/TopicsMetricsProvider.tsx","webpack:///../../packages/ui/src/components/Metrics/useKafkaInstanceMetrics.tsx","webpack:///../../packages/ui/src/components/Metrics/useTopicsMetrics.tsx","webpack:///../../packages/ui/src/components/Metrics/Metrics.tsx","webpack:///../../packages/ui/src/components/Metrics/useMetricsKpi.tsx","webpack:///../../packages/ui/src/components/ConsumerGroups/components/ConsumerGroupState.tsx","webpack:///../../packages/ui/src/components/ConsumerGroups/components/ConsumerGroupEmptyState.tsx","webpack:///../../packages/ui/src/components/ConsumerGroups/ConsumerGroups.tsx","webpack:///../../packages/ui/src/components/Settings/Settings.tsx"],"sourcesContent":["import type { DataPlaneHeaderProps } from \"ui\";\n\nexport const ControlPlaneRouteRoot = \"/kafkas\" as const;\nexport const ControlPlaneRoutePath = `${ControlPlaneRouteRoot}/:id?` as const;\nexport type ControlPlaneRouteParams = { id?: string };\n\nexport const DataPlaneRoutePath =\n  `${ControlPlaneRouteRoot}/:id/details/:name` as const;\nexport type DataPlaneRouteParams = { id: string; name: string };\nexport type DataPlaneRouteProps = {\n  instancesHref: DataPlaneHeaderProps[\"instancesHref\"];\n};\n","import type { FunctionComponent, MutableRefObject } from \"react\";\nimport {\n  createContext,\n  useCallback,\n  useContext,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport type { KafkaInstanceDrawerTab } from \"ui\";\nimport type { ControlPlaneRouteParams } from \"./routes/streams/routes\";\nimport { ControlPlaneRoutePath } from \"./routes/streams/routes\";\n\ntype DrawerContextProps = {\n  selectedInstance: string | undefined;\n  activeTab: KafkaInstanceDrawerTab;\n  setActiveTab: (tab: KafkaInstanceDrawerTab) => void;\n  isExpanded: boolean;\n  toggleExpanded: (newState?: boolean) => void;\n  onClose: MutableRefObject<(() => void) | undefined>;\n};\nconst DrawerContext = createContext<DrawerContextProps>(null!);\n\nexport const DrawerProvider: FunctionComponent = ({ children }) => {\n  const match = useRouteMatch<ControlPlaneRouteParams>(ControlPlaneRoutePath);\n  if (!match) {\n    throw Error(\"DrawerProvider used outside the expected route\");\n  }\n  const selectedInstance = match.params.id;\n  const [isExpanded, setIsExpanded] = useState(selectedInstance !== undefined);\n  const [activeTab, setActiveTab] = useState<KafkaInstanceDrawerTab>(\"details\");\n  const onClose = useRef<() => void | undefined>();\n\n  const toggleExpanded = useCallback((newValue: boolean | undefined) => {\n    setIsExpanded((prev) => {\n      const isExpanded = newValue !== undefined ? newValue : !prev;\n      if (isExpanded === false && onClose.current) {\n        onClose.current();\n      }\n      return isExpanded;\n    });\n  }, []);\n\n  const value = useMemo(() => {\n    const shouldBeExpanded = selectedInstance !== undefined && isExpanded;\n\n    return {\n      selectedInstance: selectedInstance,\n      activeTab,\n      setActiveTab,\n      isExpanded: shouldBeExpanded,\n      toggleExpanded,\n      onClose,\n    };\n  }, [activeTab, isExpanded, selectedInstance, toggleExpanded]);\n\n  return (\n    <DrawerContext.Provider value={value}>{children}</DrawerContext.Provider>\n  );\n};\n\nexport function useDrawer(onClose?: () => void) {\n  const context = useContext(DrawerContext);\n  context.onClose.current = onClose;\n  return context;\n}\n","import type { VoidFunctionComponent } from \"react\";\nimport { KafkaPageV3 } from \"ui\";\n\nexport const OverviewRoute: VoidFunctionComponent = () => {\n  return <KafkaPageV3 />;\n};\n","import { useRouteMatch } from \"react-router-dom\";\nimport type { DataPlaneRouteParams } from \"../routes\";\nimport { DataPlaneRoutePath } from \"../routes\";\n\nexport function useDataPlaneRouteMatch() {\n  const match = useRouteMatch<DataPlaneRouteParams>(DataPlaneRoutePath);\n  if (!match) {\n    throw Error(\"useDataPlaneRouteMatch used outside the expected route\");\n  }\n\n  return match;\n}\n","import { useKafkaInstance } from \"consoledot-api\";\nimport type { VoidFunctionComponent } from \"react\";\nimport type { DataPlaneHeaderProps } from \"ui\";\nimport { DataPlaneHeader, ReadyStatuses } from \"ui\";\nimport { useDrawer } from \"../../../DrawerProvider\";\nimport type { DataPlaneRouteProps } from \"../routes\";\nimport { useDataPlaneRouteMatch } from \"./UseDataPlaneRouteMatch\";\n\nexport const DataPlaneHeaderConnected: VoidFunctionComponent<\n  DataPlaneRouteProps & Pick<DataPlaneHeaderProps, \"activeSection\">\n> = ({ instancesHref, activeSection }) => {\n  const { setActiveTab, toggleExpanded } = useDrawer();\n\n  const { url, params } = useDataPlaneRouteMatch();\n  const { data: instance } = useKafkaInstance(params.id);\n\n  const sectionsHref = {\n    dashboard: `${url}/dashboard`,\n    topics: `${url}/topics`,\n    consumer: `${url}/consumer-groups`,\n    permissions: `${url}/acls`,\n    settings: `${url}/settings`,\n  };\n\n  return (\n    <DataPlaneHeader\n      instancesHref={instancesHref}\n      instanceName={params.name}\n      activeSection={activeSection}\n      sectionsHref={sectionsHref}\n      onDetails={() => {\n        setActiveTab(\"details\");\n        toggleExpanded(true);\n      }}\n      onConnection={() => {\n        setActiveTab(\"connections\");\n        toggleExpanded(true);\n      }}\n      canOpenConnection={\n        instance ? ReadyStatuses.includes(instance?.status) : false\n      }\n      canChangeOwner={true /* TODO */}\n      onChangeOwner={() => false /* TODO */}\n      canDelete={true /* TODO */}\n      onDelete={() => false /* TODO */}\n    />\n  );\n};\n","import { PageSection } from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport type { DataPlaneRouteProps } from \"../routes\";\nimport { DataPlaneHeaderConnected } from \"./DataPlaneHeaderConnected\";\n\nexport const AclsRoute: VoidFunctionComponent<DataPlaneRouteProps> = ({\n  instancesHref,\n}) => {\n  return (\n    <>\n      <DataPlaneHeaderConnected\n        instancesHref={instancesHref}\n        activeSection={\"permissions\"}\n      />\n      <PageSection>TODO</PageSection>\n    </>\n  );\n};\n","import {\n  usePaginationSearchParams,\n  useSortableSearchParams,\n  useURLSearchParamsChips\n} from \"@rhoas/app-services-ui-components\";\nimport { KafkaConsumerGroupSortableColumns, useKafkaInstance, useKafkaInstanceConsumerGroups } from \"consoledot-api\";\nimport { useCallback } from \"react\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { ConsumerGroups } from \"ui\";\nimport type { DataPlaneRouteProps } from \"../routes\";\nimport { DataPlaneHeaderConnected } from \"./DataPlaneHeaderConnected\";\nimport { useDataPlaneRouteMatch } from \"./UseDataPlaneRouteMatch\";\n\nexport const ConsumerGroupsRoute: VoidFunctionComponent<\n  DataPlaneRouteProps\n> = ({ instancesHref }) => {\n  const { params } = useDataPlaneRouteMatch();\n  const { data: instance } = useKafkaInstance(params.id);\n  const { page, perPage, setPagination, setPaginationQuery } =\n    usePaginationSearchParams();\n  const resetPaginationQuery = useCallback(\n    () => setPaginationQuery(1, perPage),\n    [perPage, setPaginationQuery]\n  );\n\n  const consumerName = useURLSearchParamsChips(\"consumer\", resetPaginationQuery);\n  const [isColumnSortable, sort, sortDirection] = useSortableSearchParams(\n    KafkaConsumerGroupSortableColumns,\n    {\n      name: \"TODO name\"\n    },\n    \"name\",\n    \"desc\"\n  );\n  const { data } = useKafkaInstanceConsumerGroups({\n    id: instance?.id,\n    adminUrl: instance?.adminUrl,\n    page,\n    perPage,\n    sort: sort!,\n    direction: sortDirection,\n    groupId: consumerName.chips[0],\n  });\n  return (\n    <>\n      <DataPlaneHeaderConnected\n        instancesHref={instancesHref}\n        activeSection={\"consumer\"}\n      />\n      <ConsumerGroups\n        consumers={data?.groups}\n        itemCount={data?.count}\n        page={page}\n        perPage={perPage}\n        consumerName={consumerName.chips}\n        isRowSelected={() => false}\n        isColumnSortable={isColumnSortable}\n        onDelete={() => {}}\n        onSearchConsumer={(value) => {\n          consumerName.clear();\n          consumerName.toggle(value);\n        }}\n        onClearAllFilters={consumerName.clear}\n        onPageChange={setPagination}\n        onRemoveConsumerChip={consumerName.clear}\n        onRemoveConsumerChips={consumerName.clear}\n        onViewPartition={() => {}}\n        onViewResetOffset={()=>{}}\n      />\n    </>\n  )\n};\n","import {\n  useKafkaInstanceKpiMetricsQuery,\n  useKafkaInstanceMetricsQuery,\n  useKafkaInstanceQuery,\n  useKafkaInstanceTopicMetricsQuery,\n  useKafkaInstanceTopicsQuery,\n} from \"consoledot-api\";\nimport {\n  metricsDismissLagAlerts,\n  metricsIsLagAlertsDismissed,\n} from \"local-storage-helpers\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback, useState } from \"react\";\nimport type { MetricsProps } from \"ui\";\nimport { Metrics } from \"ui\";\nimport type { DataPlaneRouteProps } from \"../routes\";\nimport { DataPlaneHeaderConnected } from \"./DataPlaneHeaderConnected\";\nimport { useDataPlaneRouteMatch } from \"./UseDataPlaneRouteMatch\";\n\nexport const DashboardRoute: VoidFunctionComponent<DataPlaneRouteProps> = ({\n  instancesHref,\n}) => {\n  const { params } = useDataPlaneRouteMatch();\n  const [hasUserAlreadyClosedAlert, setHasUserAlreadyClosedAlert] = useState(\n    metricsIsLagAlertsDismissed()\n  );\n\n  const onAlertClose = useCallback(() => {\n    setHasUserAlreadyClosedAlert(true);\n    metricsDismissLagAlerts();\n  }, []);\n\n  const queryInstance = useKafkaInstanceQuery();\n  const queryKpisMetrics = useKafkaInstanceKpiMetricsQuery();\n  const queryInstanceMetrics = useKafkaInstanceMetricsQuery();\n  const queryTopicMetrics = useKafkaInstanceTopicMetricsQuery();\n  const queryTopics = useKafkaInstanceTopicsQuery();\n\n  const getMetricsKpi: MetricsProps[\"getMetricsKpi\"] = useCallback(async () => {\n    const [instance, kpis] = await Promise.all([\n      queryInstance(params.id),\n      queryKpisMetrics(params.id),\n    ]);\n    return {\n      ...kpis,\n      topicPartitionsLimit: instance.maxPartitions || 0,\n    };\n  }, [params.id, queryInstance, queryKpisMetrics]);\n\n  const getKafkaInstanceMetrics: MetricsProps[\"getKafkaInstanceMetrics\"] =\n    useCallback(\n      async ({ interval, duration }) => {\n        const [instance, metrics] = await Promise.all([\n          queryInstance(params.id),\n          queryInstanceMetrics({id:params.id, duration, interval}),\n        ]);\n        if (!instance) {\n          return Promise.reject(\"Can't retrieve instance\");\n        }\n        return {\n          ...metrics,\n          diskSpaceLimit:\n            (instance.request.max_data_retention_size?.bytes || 0) / 1073741824,\n          connectionsLimit: instance.connections || 0,\n          connectionRateLimit: instance.connectionRate || 0,\n        };\n      },\n      [params.id, queryInstance, queryInstanceMetrics]\n    );\n\n  const getTopicsMetrics: MetricsProps[\"getTopicsMetrics\"] = useCallback(\n    async ({ interval, duration, selectedTopic }) => {\n      const [instance, metrics] = await Promise.all([\n        queryInstance(params.id),\n        queryTopicMetrics({id: params.id, duration, interval, selectedTopic}),\n      ]);\n      if (!instance || !instance.adminUrl) {\n        return Promise.reject(\"Can't retrieve instance\");\n      }\n      const kafkaTopics = (\n        await queryTopics({\n          id: instance.id,\n          adminUrl: instance.adminUrl,\n          page: 1,\n          perPage: 1000,\n        })\n      ).topics.map((t) => t.topic_name);\n      return {\n        ...metrics,\n        kafkaTopics,\n      };\n    },\n    [params.id, queryInstance, queryTopicMetrics, queryTopics]\n  );\n\n  return (\n    <>\n      <DataPlaneHeaderConnected\n        instancesHref={instancesHref}\n        activeSection={\"dashboard\"}\n      />\n      <Metrics\n        onCreateTopic={() => {}}\n        onAlertClose={onAlertClose}\n        hasUserAlreadyClosedAlert={hasUserAlreadyClosedAlert}\n        getKafkaInstanceMetrics={getKafkaInstanceMetrics}\n        getTopicsMetrics={getTopicsMetrics}\n        getMetricsKpi={getMetricsKpi}\n      />\n    </>\n  );\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { Settings as SettingsComp } from \"ui\";\nimport type { DataPlaneRouteProps } from \"../routes\";\nimport { DataPlaneHeaderConnected } from \"./DataPlaneHeaderConnected\";\n\nexport const SettingsRoute: VoidFunctionComponent<DataPlaneRouteProps> = ({\n  instancesHref,\n}) => {\n  return (\n    <>\n      <DataPlaneHeaderConnected\n        instancesHref={instancesHref}\n        activeSection={\"settings\"}\n      />\n      <SettingsComp\n        onSubmitReAuthentication={() => Promise.resolve(true)}\n        reauthenticationEnabled={false}\n      />\n    </>\n  );\n};\n","import {\n  usePaginationSearchParams,\n  useSortableSearchParams,\n  useURLSearchParamsChips,\n} from \"@rhoas/app-services-ui-components\";\nimport {\n  KafkaTopicsSortableColumns,\n  useKafkaInstance,\n  useKafkaInstanceTopics,\n} from \"consoledot-api\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { KafkaTopics } from \"ui\";\nimport type { DataPlaneRouteProps } from \"../routes\";\nimport { DataPlaneHeaderConnected } from \"./DataPlaneHeaderConnected\";\nimport { useDataPlaneRouteMatch } from \"./UseDataPlaneRouteMatch\";\n\nexport const TopicsRoute: VoidFunctionComponent<DataPlaneRouteProps> = ({\n  instancesHref,\n}) => {\n  const { params } = useDataPlaneRouteMatch();\n  const { data: instance } = useKafkaInstance(params.id);\n  const { page, perPage, setPagination, setPaginationQuery } =\n    usePaginationSearchParams();\n  const resetPaginationQuery = useCallback(\n    () => setPaginationQuery(1, perPage),\n    [perPage, setPaginationQuery]\n  );\n\n  const topicChips = useURLSearchParamsChips(\"topic\", resetPaginationQuery);\n  const [isColumnSortable, sort, sortDirection] = useSortableSearchParams(\n    KafkaTopicsSortableColumns,\n    {\n      name: \"TODO name\",\n      partitions: \"TODO partitions\",\n      \"retention.bytes\": \"TODO retention bytes\",\n      \"retention.ms\": \"TODO retention ms\",\n    },\n    \"name\",\n    \"desc\"\n  );\n  const { data } = useKafkaInstanceTopics({\n    id: instance?.id,\n    adminUrl: instance?.adminUrl,\n    page,\n    perPage,\n    sort: sort!,\n    direction: sortDirection,\n    filter: topicChips.chips[0],\n  });\n  return (\n    <>\n      <DataPlaneHeaderConnected\n        instancesHref={instancesHref}\n        activeSection={\"topics\"}\n      />\n      <KafkaTopics\n        topics={data?.topics}\n        itemCount={data?.count}\n        page={page}\n        perPage={perPage}\n        topicName={topicChips.chips}\n        getUrlFortopic={(row) => `./topic/${row.topic_name}`}\n        isColumnSortable={isColumnSortable}\n        onDelete={() => {}}\n        onEdit={() => {}}\n        onSearchTopic={(value) => {\n          topicChips.clear();\n          topicChips.toggle(value);\n        }}\n        onClearAllFilters={topicChips.clear}\n        onCreateTopic={() => {}}\n        onPageChange={setPagination}\n        onRemoveTopicChip={topicChips.clear}\n        onRemoveTopicChips={topicChips.clear}\n        onTopicLinkClick={() => {}}\n      />\n    </>\n  );\n};\n","import {\n  usePaginationSearchParams,\n  useSortableSearchParams,\n  useURLSearchParamsChips,\n} from \"@rhoas/app-services-ui-components\";\nimport {\n  KafkaInstancesSortableColumns,\n  useKafkaInstances,\n} from \"consoledot-api\";\nimport type { FunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport type {\n  KafkaInstance,\n  KafkaInstanceDrawerTab,\n  KafkaInstancesProps,\n  SimplifiedStatus,\n} from \"ui\";\nimport {\n  ControlPlaneHeader,\n  KafkaInstances,\n  ReadyStatuses,\n  useKafkaLabels,\n} from \"ui\";\nimport { useDrawer } from \"../../../DrawerProvider\";\nimport { ControlPlaneRouteRoot } from \"../routes\";\n\nexport type StreamsRouteProps = Pick<\n  KafkaInstancesProps<KafkaInstance>,\n  \"getUrlForInstance\"\n>;\n\nexport const KafkaInstancesRoute: FunctionComponent<StreamsRouteProps> = ({\n  getUrlForInstance,\n}) => {\n  const history = useHistory();\n\n  const { selectedInstance, toggleExpanded, setActiveTab, isExpanded } =\n    useDrawer(\n      useCallback(() => history.replace(`${ControlPlaneRouteRoot}`), [history])\n    );\n\n  const labels = useKafkaLabels();\n\n  const { page, perPage, setPagination, setPaginationQuery } =\n    usePaginationSearchParams();\n  const resetPaginationQuery = useCallback(\n    () => setPaginationQuery(1, perPage),\n    [perPage, setPaginationQuery]\n  );\n\n  const namesChips = useURLSearchParamsChips(\"names\", resetPaginationQuery);\n  const ownersChips = useURLSearchParamsChips(\"owners\", resetPaginationQuery);\n  const statusesChips = useURLSearchParamsChips<SimplifiedStatus>(\n    \"statuses\",\n    resetPaginationQuery\n  );\n\n  const [isColumnSortable, sort, sortDirection] = useSortableSearchParams(\n    KafkaInstancesSortableColumns,\n    labels.fields,\n    \"createdAt\",\n    \"desc\"\n  );\n\n  const { data } = useKafkaInstances({\n    page,\n    perPage,\n    name: namesChips.chips,\n    owner: ownersChips.chips,\n    status: statusesChips.chips,\n    sort: sort!,\n    direction: sortDirection,\n  });\n\n  const onClearAllFilters = useCallback(() => {\n    namesChips.clearChained(\n      ownersChips.clearChained(\n        statusesChips.clearChained(setPaginationQuery(1, perPage))\n      ),\n      true\n    );\n  }, [namesChips, ownersChips, perPage, setPaginationQuery, statusesChips]);\n\n  const openDrawer = useCallback(\n    (id: string, tab: KafkaInstanceDrawerTab) => {\n      if (selectedInstance === id && isExpanded) {\n        toggleExpanded(false);\n      } else {\n        history.replace(`${ControlPlaneRouteRoot}/${id}`);\n        toggleExpanded(true);\n        setActiveTab(tab);\n      }\n    },\n    [history, isExpanded, selectedInstance, setActiveTab, toggleExpanded]\n  );\n\n  const handleDetailsClick: KafkaInstancesProps<KafkaInstance>[\"onDetails\"] =\n    useCallback(\n      (instance) => {\n        openDrawer(instance.id, \"details\");\n      },\n      [openDrawer]\n    );\n\n  const handleConnectionsClick: KafkaInstancesProps<KafkaInstance>[\"onDetails\"] =\n    useCallback(\n      (instance) => {\n        openDrawer(instance.id, \"connections\");\n      },\n      [openDrawer]\n    );\n\n  return (\n    <>\n      <ControlPlaneHeader />\n      <KafkaInstances\n        instances={data?.instances}\n        itemCount={data?.count}\n        page={page}\n        perPage={perPage}\n        names={namesChips.chips}\n        owners={ownersChips.chips}\n        statuses={statusesChips.chips}\n        isColumnSortable={isColumnSortable}\n        onPageChange={setPagination}\n        onSearchName={namesChips.add}\n        onRemoveNameChip={namesChips.remove}\n        onRemoveNameChips={namesChips.clear}\n        onSearchOwner={ownersChips.add}\n        onRemoveOwnerChip={ownersChips.remove}\n        onRemoveOwnerChips={ownersChips.clear}\n        onSearchStatus={statusesChips.toggle}\n        onRemoveStatusChip={statusesChips.remove}\n        onRemoveStatusChips={statusesChips.clear}\n        onClearAllFilters={onClearAllFilters}\n        onChangeOwner={(row) => {}}\n        onDelete={(row) => {}}\n        onCreate={() => {}}\n        isRowSelected={({ row }) => row.id === selectedInstance}\n        getUrlForInstance={getUrlForInstance}\n        onDetails={handleDetailsClick}\n        onConnection={handleConnectionsClick}\n        onClickConnectionTabLink={() => {}}\n        onClickSupportLink={() => {}}\n        onInstanceLinkClick={() => {}}\n        onQuickstartGuide={() => {}}\n        canHaveInstanceLink={({ status }) => ReadyStatuses.includes(status)}\n        canOpenConnection={({ status }) => ReadyStatuses.includes(status)}\n        canChangeOwner={() => true}\n        canDelete={() => true}\n      />\n    </>\n  );\n};\n","import { useKafkaInstance } from \"consoledot-api\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { Suspense } from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport { KafkaInstanceDrawer } from \"ui\";\nimport { useDrawer } from \"../DrawerProvider\";\nimport { AclsRoute } from \"./streams/detail/AclsRoute\";\nimport { ConsumerGroupsRoute } from \"./streams/detail/ConsumerGroupsRoute\";\nimport { DashboardRoute } from \"./streams/detail/DashboardRoute\";\nimport { SettingsRoute } from \"./streams/detail/SettingsRoute\";\nimport { TopicsRoute } from \"./streams/detail/TopicsRoute\";\nimport { KafkaInstancesRoute } from \"./streams/kafka-instances/KafkaInstancesRoute\";\nimport { ControlPlaneRoutePath, DataPlaneRoutePath } from \"./streams/routes\";\n\nexport const StreamsRoutes: VoidFunctionComponent = () => {\n  const {\n    selectedInstance,\n    activeTab,\n    setActiveTab,\n    isExpanded,\n    toggleExpanded,\n  } = useDrawer();\n  const { data: drawerInstance } = useKafkaInstance(selectedInstance);\n\n  return (\n    <KafkaInstanceDrawer\n      instance={drawerInstance}\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      isExpanded={isExpanded}\n      onClose={() => toggleExpanded(false)}\n    >\n      <Suspense fallback={Fallback}>\n        <Switch>\n          <Route path={ControlPlaneRoutePath} exact>\n            <KafkaInstancesRoute\n              getUrlForInstance={(instance) =>\n                `/kafkas/${instance.id}/details/${instance.name}`\n              }\n            />\n          </Route>\n          <Route path={`${DataPlaneRoutePath}/dashboard`} exact>\n            <DashboardRoute instancesHref={\"/kafkas\"} />\n          </Route>\n          <Route path={`${DataPlaneRoutePath}/topics`} exact>\n            <TopicsRoute instancesHref={\"/kafkas\"} />\n          </Route>\n\n          <Route path={`${DataPlaneRoutePath}/consumer-groups`} exact>\n            <ConsumerGroupsRoute instancesHref={\"/kafkas\"} />\n          </Route>\n          <Route path={`${DataPlaneRoutePath}/acls`} exact>\n            <AclsRoute instancesHref={\"/kafkas\"} />\n          </Route>\n          <Route path={`${DataPlaneRoutePath}/settings`} exact>\n            <SettingsRoute instancesHref={\"/kafkas\"} />\n          </Route>\n          <Route path={`${DataPlaneRoutePath}/topics/:topicName`} exact>\n            <TopicsRoute instancesHref={\"/kafkas\"} />\n          </Route>\n\n          <Redirect\n            from={`${DataPlaneRoutePath}`}\n            to={`${DataPlaneRoutePath}/dashboard`}\n            exact\n          />\n          <Route>404</Route>\n        </Switch>\n      </Suspense>\n    </KafkaInstanceDrawer>\n  );\n};\n\nconst Fallback = () => {\n  return \"⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️\";\n};\n","import NotificationsPortal from \"@redhat-cloud-services/frontend-components-notifications/NotificationPortal\";\nimport { notificationsReducer } from \"@redhat-cloud-services/frontend-components-notifications/redux\";\nimport { getRegistry } from \"@redhat-cloud-services/frontend-components-utilities/Registry\";\nimport { useChrome } from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { memo, useEffect } from \"react\";\nimport { Redirect, Route, Switch, useHistory } from \"react-router-dom\";\nimport type { Reducer } from \"redux\";\n\nimport \"./App.scss\";\nimport { DrawerProvider } from \"./DrawerProvider\";\nimport { OverviewRoute } from \"./routes/overview/OverviewRoute\";\n\nimport { StreamsRoutes } from \"./routes/StreamsRoutes\";\n\nconst App = memo(() => {\n  const history = useHistory();\n  const { updateDocumentTitle, on } = useChrome();\n\n  const { t } = useTranslation();\n  const title = t(\"kafka:rhosakTitle\");\n\n  useEffect(() => {\n    const registry = getRegistry();\n    registry.register({ notifications: notificationsReducer as Reducer });\n\n    updateDocumentTitle(title);\n\n    const unregister = on(\"APP_NAVIGATION\", (event) => {\n      console.dir(event);\n      event.navId && history.push(\"/\" + event.navId === \"/\" ? \"\" : event.navId);\n    });\n    return () => {\n      if (unregister) {\n        unregister();\n      }\n    };\n  }, [history, on, title, updateDocumentTitle]);\n\n  return (\n    <>\n      <NotificationsPortal />\n      <Switch>\n        <Route path={\"/overview\"} exact>\n          <OverviewRoute />\n        </Route>\n        <Redirect from={\"/\"} to={\"/kafkas\"} exact />\n        <Route path={\"/kafkas\"}>\n          <DrawerProvider>\n            <StreamsRoutes />\n          </DrawerProvider>\n        </Route>\n        <Route path={\"\"} exact></Route>\n      </Switch>\n    </>\n  );\n});\n\nexport default App;\n","import { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { Middleware } from 'redux';\n\nexport let registry: ReducerRegistry<any>;\n\nexport function init(...middleware: Middleware[]) {\n  registry = getRegistry({}, [\n    promiseMiddleware,\n    notificationsMiddleware({ errorDescriptionKey: ['detail', 'stack'] }),\n    ...middleware,\n  ]);\n  return registry;\n}\n","import type { ConfigurationParameters } from \"@rhoas/kafka-management-sdk\";\nimport { isReactQueryDevToolsEanbled } from \"local-storage-helpers\";\nimport type { FunctionComponent } from \"react\";\nimport { createContext, useContext } from \"react\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { ReactQueryDevtools } from \"react-query/devtools\";\n\ntype ApiContextProps = Pick<\n  ConfigurationParameters,\n  \"accessToken\" | \"basePath\"\n> & {\n  refetchInterval: number\n};\n\nconst ApiContext = createContext<ApiContextProps>(null!);\n\nconst queryClient = new QueryClient();\n\nexport const ApiProvider: FunctionComponent<ApiContextProps> = ({\n  children,\n  ...context\n}) => {\n  const showDevTools = isReactQueryDevToolsEanbled();\n  return (\n    <QueryClientProvider client={queryClient}>\n      {showDevTools ? <ReactQueryDevtools initialIsOpen={false} /> : undefined}\n      <ApiContext.Provider value={context}>{children}</ApiContext.Provider>\n    </QueryClientProvider>\n  );\n};\n\nexport function useApi() {\n  return useContext(ApiContext);\n}\n","import { AppServicesApi } from \"@rhoas/account-management-sdk\";\nimport { GroupsApi, TopicsApi } from \"@rhoas/kafka-instance-sdk\";\nimport { Configuration, DefaultApi } from \"@rhoas/kafka-management-sdk\";\nimport { useCallback } from \"react\";\nimport { useApi } from \"./ApiProvider\";\n\nexport const useKms = () => {\n  const { accessToken, basePath } = useApi();\n  return useCallback(() => {\n    const kmsApi = new DefaultApi(\n      new Configuration({\n        accessToken,\n        basePath,\n      })\n    );\n\n    return kmsApi;\n  }, [accessToken, basePath]);\n};\n\nexport const useAms = () => {\n  const { accessToken, basePath } = useApi();\n  return useCallback(() => {\n    const amsApi = new AppServicesApi(\n      new Configuration({\n        accessToken,\n        basePath,\n      })\n    );\n\n    return amsApi;\n  }, [accessToken, basePath]);\n};\n\nexport const useTopics = () => {\n  const { accessToken } = useApi();\n  return useCallback(\n    (adminUrl: string) => {\n      const topicsApi = new TopicsApi(\n        new Configuration({\n          accessToken,\n          basePath: adminUrl,\n        })\n      );\n\n      return topicsApi;\n    },\n    [accessToken]\n  );\n};\n\nexport const useConsumerGroups = () => {\n  const { accessToken } = useApi();\n  return useCallback(\n    (adminUrl: string) => {\n      const groupsApi = new GroupsApi(\n        new Configuration({\n          accessToken,\n          basePath: adminUrl,\n        })\n      );\n\n      return groupsApi;\n    },\n    [accessToken]\n  );\n};\n","import type { KafkaRequestPayload } from \"@rhoas/kafka-management-sdk\";\nimport { APIErrorCodes, isServiceApiError } from \"@rhoas/kafka-management-sdk\";\nimport type { CreateKafkaInstanceServices } from \"ui\";\nimport { useKms } from \"./useApi\";\n\nconst ErrorCodes = {\n  /** Forbidden to perform this action*/\n  UNAUTHORIZED_USER: APIErrorCodes.ERROR_4,\n  /** Kafka cluster name is already used*/\n  DUPLICATE_INSTANCE_NAME: APIErrorCodes.ERROR_36,\n  /** The maximum number of allowed kafka instances has been reached*/\n  INTERNAL_CAPACITY_ERROR: APIErrorCodes.ERROR_24,\n  /** Insufficient quota*/\n  INSUFFICIENT_QUOTA: APIErrorCodes.ERROR_120,\n  /** Forbidden to create more instances than the maximum allowed*/\n  TRIAL_USED: APIErrorCodes.ERROR_5,\n  /** Failed to check quota*/\n  FAILED_TO_CHECK_QUOTA: APIErrorCodes.ERROR_121,\n  /** Bad request*/\n  OWNER_DOES_NOT_EXIST: APIErrorCodes.ERROR_21,\n};\n\n/**\n * Create Kafka instance hook that creates kafka instance\n * @param currentAMSPlan\n * @returns\n */\nexport const useCreateInstance =\n  (): CreateKafkaInstanceServices[\"onCreate\"] => {\n    const getApi = useKms();\n\n    return async (data, onSuccess, onError) => {\n      const apisService = getApi();\n\n      try {\n        const kafkaRequest = {} as KafkaRequestPayload;\n        kafkaRequest.name = data.name;\n        kafkaRequest.cloud_provider = data.provider;\n        kafkaRequest.region = data.region;\n        kafkaRequest.plan = data.plan + \".\" + data.sizeId;\n        kafkaRequest.billing_model =\n          data.billing === \"prepaid\"\n            ? \"standard\"\n            : data.billing !== undefined\n            ? \"marketplace\"\n            : null;\n        kafkaRequest.billing_cloud_account_id =\n          data.billing && data.billing !== \"prepaid\"\n            ? data.billing.subscription\n            : null;\n        await apisService.createKafka(true, kafkaRequest);\n        onSuccess();\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const { code } = error?.response?.data || {};\n\n          switch (data.plan) {\n            case \"developer\":\n              switch (code) {\n                case ErrorCodes.DUPLICATE_INSTANCE_NAME:\n                  onError(\"name-taken\");\n                  break;\n\n                // regardless of the error, let's not give too many details to trial users\n                default:\n                  onError(\"developer-unavailable\");\n                  break;\n              }\n              break;\n\n            case \"standard\":\n              switch (code) {\n                case ErrorCodes.DUPLICATE_INSTANCE_NAME:\n                  onError(\"name-taken\");\n                  break;\n\n                case ErrorCodes.INTERNAL_CAPACITY_ERROR:\n                  onError(\"region-unavailable\");\n                  break;\n\n                case ErrorCodes.INSUFFICIENT_QUOTA:\n                  onError(\"insufficient-quota\");\n                  break;\n\n                default:\n                  console.error(\n                    \"useAvailableProvidersAndDefault\",\n                    \"createKafka unknown error\",\n                    error\n                  );\n                  onError(\"unknown\");\n              }\n              break;\n          }\n        } else {\n          console.error(\n            \"useAvailableProvidersAndDefault\",\n            \"createKafka unexpected error\",\n            error\n          );\n        }\n      }\n    };\n  };\n","import { FetchKafkaConsumerGroupsParams } from \"./fetchKafkaConsumerGroups\";\nimport type { FetchKafkaInstanceMetricsProps } from \"./fetchKafkaInstanceMetrics\";\nimport type { FetchKafkaInstancesParams } from \"./fetchKafkaInstances\";\nimport type { FetchTopicsMetricsProps } from \"./fetchKafkaTopicMetrics\";\nimport type { FetchKafkaTopicsParams } from \"./fetchKafkaTopics\";\n\nexport const masQueries = {\n  _root: () => ({ scope: \"mas\" } as const),\n  organization: () =>\n    [{ ...masQueries._root(), entity: \"organization\" }] as const,\n  quota: (params: { organization?: string }) =>\n    [{ ...masQueries._root, entity: \"quota\", ...params }] as const,\n} as const;\n\nexport const kafkaQueries = {\n  _root: () => ({ scope: \"kafka\" } as const),\n  list: (params: Omit<FetchKafkaInstancesParams, \"dataMapper\" | \"getKafkas\">) =>\n    [\n      {\n        ...kafkaQueries._root(),\n        entity: \"list\",\n      },\n      params,\n    ] as const,\n  instance: {\n    _root: ({ id }: { id?: string }) =>\n      ({ ...kafkaQueries._root(), entity: \"instance\", id } as const),\n    details: (params: { id?: string }) =>\n      [\n        { ...kafkaQueries.instance._root(params), subentity: \"details\" },\n      ] as const,\n    topics: (\n      params: { id?: string; adminUrl?: string } & Omit<\n        FetchKafkaTopicsParams,\n        \"getTopics\"\n      >\n    ) =>\n      [\n        {\n          ...kafkaQueries.instance._root(params),\n          subentity: \"topics\",\n        },\n        params,\n      ] as const,\n    consumerGroups: (\n      params: { id?: string; adminUrl?: string } & Omit<\n        FetchKafkaConsumerGroupsParams,\n        \"getConsumerGroups\"\n      >\n    ) =>\n      [\n        {\n          ...kafkaQueries.instance._root(params),\n          subentity: \"consumer-groups\",\n        },\n        params,\n      ] as const,\n    metrics: {\n      _root: ({ id }: { id: string }) =>\n        ({\n          ...kafkaQueries.instance._root({ id }),\n          subentity: \"metrics\",\n          id,\n        } as const),\n      kpi: (params: { id: string }) =>\n        [{ ...kafkaQueries.instance._root(params), type: \"kpi\" }] as const,\n      instance: ({\n        id,\n        ...params\n      }: Omit<FetchKafkaInstanceMetricsProps, \"getMetricsByRangeQuery\">) =>\n        [\n          {\n            ...kafkaQueries.instance._root({ id }),\n            type: \"instance\",\n          },\n          params,\n        ] as const,\n      topic: ({\n        id,\n        ...params\n      }: Omit<FetchTopicsMetricsProps, \"getMetricsByRangeQuery\">) =>\n        [\n          {\n            ...kafkaQueries.instance._root({ id }),\n            type: \"topic\",\n          },\n          params,\n        ] as const,\n    },\n  },\n} as const;\n\nexport const providerQueries = {\n  _root: () => ({ scope: \"providers\" }),\n  list: (params: { plan?: string }) =>\n    [{ ...providerQueries._root(), entity: \"list\", ...params }] as const,\n  limits: {\n    _root: ({ provider }: { provider?: string }) =>\n      ({\n        ...providerQueries._root(),\n        entity: \"limits\",\n        provider,\n      } as const),\n    standard: (params: { provider?: string }) => [\n      { ...providerQueries.limits._root({ ...params }), plan: \"standard\" },\n    ],\n    developer: (params: { provider?: string }) => [\n      {\n        ...providerQueries.limits._root({ ...params }),\n        plan: \"developer\",\n      },\n    ],\n  },\n} as const;\n","import type { Size } from \"@rhoas/app-services-ui-components\";\nimport type {\n  DefaultApi,\n  SupportedKafkaSize,\n} from \"@rhoas/kafka-management-sdk\";\nimport type { Plan } from \"ui\";\nimport type { CloudProviderInfoWithRegionsCapacity } from \"./fetchProvidersWithRegions\";\n\nexport type SizeWithLimits = Size & { trialDurationHours: number };\n\nexport async function fetchProviderRegionSizes(\n  api: DefaultApi[\"getInstanceTypesByCloudProviderAndRegion\"],\n  providerInfo: CloudProviderInfoWithRegionsCapacity,\n  region: string,\n  instanceType: Plan\n) {\n  const regions = providerInfo.regions;\n  const regionInfo = regions.find((r) => r.id === region);\n  const availableSizes =\n    regionInfo?.capacity.flatMap((c) =>\n      c.available_sizes.map((s) => `${c.instance_type}.${s}`)\n    ) || [];\n  const sizes = await api(providerInfo.id, region);\n  if (!sizes?.data?.instance_types) {\n    throw new Error(`No instance_types from backend`);\n  }\n\n  const standardSizes =\n    sizes?.data?.instance_types.find((i) => i.id === instanceType)?.sizes || [];\n\n  return standardSizes.map(\n    apiSizeToComponentSize.bind(\n      undefined,\n      (id) => !availableSizes.includes(`${instanceType}.${id}`)\n    )\n  );\n}\n\n//\n// export async function fetchProviderRegionSizesForPlanStandard (\n//   api: DefaultApi['getInstanceTypesByCloudProviderAndRegion'], providerInfo: CloudProviderInfoWithRegionsCapacity, region: string\n// )  {\n//   return fetchProviderRegionSizes(api, providerInfo, region, \"standard\");\n// };\n//\n// export const fetchProviderRegionSizesForPlanDeveloper = (\n//   api: DefaultApi['getInstanceTypesByCloudProviderAndRegion'], providerInfo: CloudProviderInfoWithRegionsCapacity, region: string\n//\n// ) => {\n//   const { data: standardSizes, isError } = await fetchProviderRegionSizes(\n//     provider,\n//     region,\n//     \"standard\"\n//   );\n//   const { data: developerSizes } = fetchProviderRegionSizes(\n//     provider,\n//     region,\n//     \"developer\"\n//   );\n//   return useQuery({\n//     queryKey: [],\n//     queryFn: () => {\n//       return {\n//         standard:\n//           standardSizes ||\n//           ([\n//             { id: \"1\", displayName: \"1\" },\n//             { id: \"2\", displayName: \"2\" },\n//           ] as StandardSizes),\n//         trial: developerSizes![0],\n//       };\n//     },\n//     enabled: (!!standardSizes || isError) && !!developerSizes,\n//   });\n// };\n\nfunction apiSizeToComponentSize(\n  isDisabled: (id: string) => boolean,\n  apiSize: SupportedKafkaSize\n): SizeWithLimits {\n  const s = apiSize as Required<SupportedKafkaSize>;\n  return {\n    id: s.id,\n    displayName: s.display_name,\n    quota: s.quota_consumed,\n    ingress: (s.ingress_throughput_per_sec.bytes || 0) / 1048576,\n    egress: (s.egress_throughput_per_sec.bytes || 0) / 1048576,\n    storage: Math.round((s.max_data_retention_size.bytes || 0) / 1073741824),\n    connections: s.total_max_connections,\n    connectionRate: s.max_connection_attempts_per_sec,\n    maxPartitions: s.max_partitions,\n    messageSize: (s.max_message_size.bytes || 0) / 1048576,\n    status: s.maturity_status === \"stable\" ? \"stable\" : \"preview\",\n    trialDurationHours: s.lifespan_seconds ? s.lifespan_seconds / 60 / 60 : 0,\n    isDisabled: isDisabled(s.id),\n  };\n}\n","import type {\n  CloudProvider,\n  CloudProviderInfo,\n} from \"@rhoas/app-services-ui-components\";\nimport type { DefaultApi } from \"@rhoas/kafka-management-sdk\";\nimport type { Plan } from \"ui\";\n\nexport type CloudProviderInfoWithRegionsCapacity = Omit<\n  CloudProviderInfo,\n  \"regions\"\n> & {\n  regions: Awaited<ReturnType<typeof fetchProviderRegions>>;\n};\n\nexport async function fetchProvidersWithRegions(\n  getCloudProviders: DefaultApi[\"getCloudProviders\"],\n  getCloudProviderRegions: DefaultApi[\"getCloudProviderRegions\"],\n  plan: Plan\n) {\n  const res = await getCloudProviders();\n  const allProviders = res?.data?.items || [];\n\n  const providers = await Promise.all(\n    allProviders\n      .filter((p) => p.enabled)\n      .map(async (provider) => {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const regions = await fetchProviderRegions(\n          getCloudProviderRegions,\n          provider.id!,\n          plan\n        );\n        const providerInfo: CloudProviderInfoWithRegionsCapacity = {\n          id: provider.id as CloudProvider,\n          displayName: provider.display_name!,\n          regions,\n        };\n        return providerInfo;\n      })\n  );\n  const firstProvider = providers[0];\n  return { providers, defaultProvider: firstProvider?.id };\n}\n\nexport async function fetchProviderRegions(\n  getCloudProviderRegions: DefaultApi[\"getCloudProviderRegions\"],\n  provider: string,\n  instanceType: Plan\n) {\n  const res = await getCloudProviderRegions(provider);\n\n  if (!res?.data?.items) {\n    return Promise.reject(\"Invalid provider\");\n  }\n\n  const regionsForInstance = res.data.items.filter(\n    (region) =>\n      region.enabled &&\n      region.capacity.some((c) => c.instance_type === instanceType)\n  );\n\n  return regionsForInstance.map((r) => {\n    const max_capacity_reached = r.capacity?.some(\n      (c) => c.instance_type === instanceType && c.available_sizes?.length === 0\n    );\n\n    return {\n      id: r.id as CloudProvider,\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      displayName: r.display_name!,\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      isDisabled: max_capacity_reached,\n      capacity: r.capacity,\n    };\n  });\n}\n","import type { QuotaCost } from \"@rhoas/account-management-sdk\";\n\nexport const standardId = \"RHOSAK\" as const;\nexport const developerId = \"RHOSAKTrial\" as const;\nexport const resourceName = \"rhosak\" as const;\n\nexport function isStandardQuota(q: QuotaCost) {\n  return q.related_resources?.find((r) => r.billing_model === \"standard\");\n}\n\nexport function isMarketplaceQuota(q: QuotaCost) {\n  return q.related_resources?.find((r) => r.billing_model === \"marketplace\");\n}\n","import type { KafkaRequest } from \"@rhoas/kafka-management-sdk\";\nimport type {\n  CloudProvider,\n  KafkaInstance,\n  MarketPlaceSubscriptions,\n  Plan,\n  Status,\n} from \"ui\";\nimport type { SizeWithLimits } from \"./fetchProviderRegionSizes\";\n\nexport type KafkaInstanceEnhanced = Required<KafkaInstance> & {\n  request: KafkaRequest;\n};\n\nexport function kafkaRequestToKafkaInstanceEnhanched(\n  instance: KafkaRequest,\n  marketplaceSubscriptions: MarketPlaceSubscriptions[],\n  developerPlanInstanceLimits: SizeWithLimits[],\n  standardPlanInstanceLimits: SizeWithLimits[]\n): KafkaInstanceEnhanced {\n  const enhancedInstance: KafkaInstanceEnhanced = {\n    billing: undefined,\n    connectionRate: 0,\n    connections: 0,\n    createdAt: instance.created_at || new Date().toISOString(),\n    egress: 0,\n    expiryDate: instance.expires_at as string | undefined,\n    id: instance.id,\n    ingress: 0,\n    maxPartitions: 0,\n    messageSize: 0,\n    name: instance.name || \"\",\n    owner: instance.owner || \"\",\n    plan: instance.billing_model as Plan,\n    provider: instance.cloud_provider as CloudProvider,\n    region: instance.region || \"\",\n    size: \"1\",\n    status: apiStatusToUIStatus(instance.status || \"\"),\n    storage: 0,\n    updatedAt: instance.updated_at || new Date().toISOString(),\n    request: instance,\n    version: instance.version || \"\",\n    bootstrapUrl: instance.bootstrap_server_host,\n    adminUrl: instance.admin_api_server_url,\n  };\n\n  // update the billing info\n  try {\n    const marketplaceForBilling = marketplaceSubscriptions.find((ms) =>\n      ms.subscriptions.find((s) => s === instance.billing_cloud_account_id)\n    )?.marketplace;\n\n    const billing: KafkaInstanceEnhanced[\"billing\"] =\n      instance.billing_model === \"standard\"\n        ? \"prepaid\"\n        : marketplaceForBilling && instance.billing_cloud_account_id\n        ? {\n            marketplace: marketplaceForBilling,\n            subscription: instance.billing_cloud_account_id,\n          }\n        : undefined;\n    enhancedInstance.billing = billing;\n  } catch (e) {\n    console.warn(\n      \"kafkaRequestToKafkaInstance\",\n      `couldn't retrieve the billing info for`,\n      instance\n    );\n  }\n\n  // update the limits\n  try {\n    const limits =\n      instance.instance_type === \"developer\"\n        ? developerPlanInstanceLimits\n        : standardPlanInstanceLimits;\n    const thisInstanceLimits = limits.find((l) => l.id === instance.size_id);\n    if (thisInstanceLimits) {\n      enhancedInstance.size = thisInstanceLimits.displayName;\n      enhancedInstance.ingress = thisInstanceLimits.ingress;\n      enhancedInstance.egress = thisInstanceLimits.egress;\n      enhancedInstance.storage = instance.max_data_retention_size?.bytes;\n      enhancedInstance.connections = thisInstanceLimits.connections;\n      enhancedInstance.connectionRate = thisInstanceLimits.connectionRate;\n      enhancedInstance.maxPartitions = thisInstanceLimits.maxPartitions;\n      enhancedInstance.messageSize = thisInstanceLimits.messageSize;\n    }\n  } catch (e) {\n    console.warn(\n      \"kafkaRequestToKafkaInstance\",\n      `couldn't retrieve the limits info for`,\n      instance\n    );\n  }\n\n  return enhancedInstance;\n}\n\nfunction apiStatusToUIStatus(status: string): Status {\n  const mapping: { [key: string]: Status } = {\n    accepted: \"accepted\",\n    preparing: \"preparing\",\n    provisioning: \"provisioning\",\n    ready: \"ready\",\n    failed: \"degraded\",\n    deprovision: \"deprovision\",\n    deleting: \"deleting\",\n  };\n  return mapping[status] || \"degraded\";\n}\n","import type { KafkaRequest } from \"@rhoas/kafka-management-sdk\";\nimport { useQueryClient } from \"react-query\";\nimport { fetchOrganization } from \"./fetchOrganization\";\nimport { fetchProviderRegionSizes } from \"./fetchProviderRegionSizes\";\nimport { fetchProvidersWithRegions } from \"./fetchProvidersWithRegions\";\nimport { fetchStandardQuota } from \"./fetchStandardQuota\";\nimport { kafkaRequestToKafkaInstanceEnhanched } from \"./kafkaRequestToKafkaInstanceEnhanched\";\nimport { masQueries, providerQueries } from \"./queryKeys\";\nimport { useAms, useKms } from \"./useApi\";\n\nexport function useKafkaInstanceTransformer() {\n  const queryClient = useQueryClient();\n  const getKms = useKms();\n  const getAms = useAms();\n\n  const kms = getKms();\n  const ams = getAms();\n  return async function kafkaInstanceTransformer(instance: KafkaRequest) {\n    const organization = await queryClient.fetchQuery({\n      queryKey: masQueries.organization(),\n      queryFn: () =>\n        fetchOrganization((...args) =>\n          ams.apiAccountsMgmtV1CurrentAccountGet(...args)\n        ),\n      staleTime: Infinity\n    });\n    if (!organization) {\n      return Promise.reject(\"Missing organization id\");\n    }\n    const standardQuota = await queryClient.fetchQuery({\n      queryKey: masQueries.quota({ organization }),\n      queryFn: () =>\n        fetchStandardQuota(\n          (...args) =>\n            ams.apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(...args),\n          organization\n        ),\n      staleTime: Infinity\n    });\n\n    const providersInfo = await queryClient.fetchQuery({\n      queryKey: providerQueries.list({ plan: instance.billing_model }),\n      queryFn: () =>\n        fetchProvidersWithRegions(\n          (...args) => kms.getCloudProviders(...args),\n          (...args) => kms.getCloudProviderRegions(...args),\n          instance.billing_model !== \"standard\" ? \"developer\" : \"standard\"\n        ),\n      staleTime: Infinity\n    });\n    const providerInfo = providersInfo.providers.find(\n      (p) => p.id === instance.cloud_provider\n    );\n    if (!providerInfo) {\n      return Promise.reject(\"Invalid cloud provider\");\n    }\n    const standardPlanLimitsQuery = queryClient.fetchQuery({\n      queryKey: providerQueries.limits.standard({ provider: providerInfo.id }),\n      queryFn: () =>\n        fetchProviderRegionSizes(\n          (...args) => kms.getInstanceTypesByCloudProviderAndRegion(...args),\n          providerInfo,\n          instance.region!,\n          \"standard\"\n        ),\n      staleTime: Infinity\n    });\n    const developerPlanLimitsQuery = queryClient.fetchQuery({\n      queryKey: providerQueries.limits.developer({ provider: providerInfo.id }),\n      queryFn: () =>\n        fetchProviderRegionSizes(\n          (...args) => kms.getInstanceTypesByCloudProviderAndRegion(...args),\n          providerInfo,\n          instance.region!,\n          \"standard\"\n        ),\n      staleTime: Infinity\n    });\n    const [standardPlanLimits, developerPlanLimits] = await Promise.all([\n      standardPlanLimitsQuery,\n      developerPlanLimitsQuery\n    ]);\n    return kafkaRequestToKafkaInstanceEnhanched(\n      instance,\n      standardQuota.marketplaceSubscriptions,\n      developerPlanLimits,\n      standardPlanLimits\n    );\n  };\n}","import type { AppServicesApi } from \"@rhoas/account-management-sdk\";\n\nexport async function fetchOrganization(\n  api: AppServicesApi[\"apiAccountsMgmtV1CurrentAccountGet\"]\n) {\n  const account = await api();\n  const orgId = account?.data?.organization?.id;\n  return orgId;\n}\n","import type { AppServicesApi } from \"@rhoas/account-management-sdk\";\nimport type {\n  MarketPlace,\n  MarketPlaceSubscriptions,\n} from \"@rhoas/app-services-ui-components\";\nimport {\n  developerId,\n  isMarketplaceQuota,\n  isStandardQuota,\n  resourceName,\n  standardId,\n} from \"./utilsAndConstants\";\n\nexport type StandardQuota = {\n  hasTrialQuota: boolean;\n  remainingPrepaidQuota: number | undefined;\n  remainingMarketplaceQuota: number | undefined;\n  marketplaceSubscriptions: MarketPlaceSubscriptions[];\n};\nexport const fetchStandardQuota = async (\n  api: AppServicesApi[\"apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet\"],\n  organizationId: string\n) => {\n  const quotaResponse = await api(\n    organizationId,\n    undefined,\n    true,\n    undefined,\n    true\n  );\n  if (quotaResponse.status !== 200) {\n    throw new Error(quotaResponse.statusText);\n  }\n  const standardQuotas = quotaResponse.data.items?.filter((q) =>\n    q.related_resources?.find(\n      (r) => r.resource_name === resourceName && r.product === standardId\n    )\n  );\n\n  const prepaidQuota = standardQuotas?.find(isStandardQuota);\n\n  const marketplaceQuotas = standardQuotas?.some(isMarketplaceQuota)\n    ? standardQuotas?.filter(isMarketplaceQuota)\n    : undefined;\n\n  const hasTrialQuota =\n    (prepaidQuota === undefined &&\n      marketplaceQuotas === undefined &&\n      quotaResponse.data.items?.some((q) =>\n        q.related_resources?.find(\n          (r) => r.resource_name === resourceName && r.product === developerId\n        )\n      )) ||\n    false;\n\n  const remainingPrepaidQuota = prepaidQuota\n    ? prepaidQuota.allowed - prepaidQuota.consumed\n    : undefined;\n  const remainingMarketplaceQuota = marketplaceQuotas\n    ? marketplaceQuotas.reduce((agg, q) => q.allowed - q.consumed + agg, 0)\n    : undefined;\n  const unaggregatedSubscriptions = marketplaceQuotas\n    ?.filter((q) => q.cloud_accounts !== undefined)\n    .flatMap((q) => q.cloud_accounts!);\n  const subscriptionMarketplaces = Array.from(\n    new Set(\n      unaggregatedSubscriptions?.map((s) => s.cloud_provider_id as MarketPlace)\n    )\n  );\n  const marketplaceSubscriptions: MarketPlaceSubscriptions[] =\n    unaggregatedSubscriptions\n      ? subscriptionMarketplaces.map((marketplace) => ({\n          marketplace,\n          subscriptions: unaggregatedSubscriptions\n            .filter((s) => s.cloud_provider_id === marketplace)\n            .map((s) => s.cloud_account_id!),\n        }))\n      : [];\n\n  return {\n    hasTrialQuota,\n    remainingPrepaidQuota,\n    remainingMarketplaceQuota,\n    marketplaceSubscriptions,\n  };\n};\n","import { useQuery, useQueryClient } from \"react-query\";\nimport { useApi } from \"./ApiProvider\";\nimport { kafkaQueries } from \"./queryKeys\";\nimport { useKms } from \"./useApi\";\nimport { useKafkaInstanceTransformer } from \"./useKafkaInstanceTransformer\";\n\nexport function useKafkaInstance(id: string | undefined) {\n  const { refetchInterval } = useApi();\n  const dataMapper = useKafkaInstanceTransformer();\n  const getKms = useKms();\n  const api = getKms();\n\n  return useQuery({\n    enabled: Boolean(id),\n    queryKey: kafkaQueries.instance.details({ id }),\n    queryFn: async () => {\n      if (!id) {\n        return Promise.reject(\"Invalid Kafka instance id\");\n      }\n      const instance = await api.getKafkaById(id);\n      return dataMapper(instance.data);\n    },\n    refetchInterval\n  });\n}\n\nexport function useKafkaInstanceQuery() {\n  const queryClient = useQueryClient();\n  const dataMapper = useKafkaInstanceTransformer();\n  const getKms = useKms();\n  return async (id: string) => {\n    const api = getKms();\n    return queryClient.fetchQuery({\n      queryKey: kafkaQueries.instance.details({ id }),\n      queryFn: async () => {\n        const instance = await api.getKafkaById(id);\n        return dataMapper(instance.data);\n      },\n    });\n  };\n}\n\n","import type { DefaultApi, InstantQuery } from \"@rhoas/kafka-management-sdk\";\nimport type { NoUndefinedField } from \"./types\";\n\nexport async function fetchKafkaKpiMetrics(\n  getMetricsByInstantQuery: DefaultApi[\"getMetricsByInstantQuery\"],\n  id: string\n) {\n  let topics = 0,\n    topicPartitions = 0,\n    consumerGroups = 0;\n\n  const response = await getMetricsByInstantQuery(id, [\n    \"kafka_topic:kafka_topic_partitions:sum\", // (Number of topic partitions)\n    \"kafka_topic:kafka_topic_partitions:count\", // (Number of topics)\n    \"consumergroup:kafka_consumergroup_members:count\", // (number of consumer groups - note that this metric will appear after a consumer group is created. There should be handled by the UI in a way that the metric isn't visible if no consumer groups are created)\n  ]);\n\n  const safeMetrics: NoUndefinedField<InstantQuery[]> = (response.data.items ||\n    []) as NoUndefinedField<InstantQuery[]>;\n\n  safeMetrics.forEach(({ metric, value }) => {\n    const { __name__: name } = metric;\n\n    switch (name) {\n      case \"kafka_topic:kafka_topic_partitions:sum\":\n        topicPartitions = value;\n        break;\n      case \"kafka_topic:kafka_topic_partitions:count\":\n        topics = value;\n        break;\n      case \"consumergroup:kafka_consumergroup_members:count\":\n        consumerGroups = value;\n        break;\n    }\n  });\n  return {\n    consumerGroups,\n    topicPartitions,\n    topics,\n  };\n}\n","import { useQueryClient } from \"react-query\";\nimport { fetchKafkaKpiMetrics } from \"./fetchKafkaKpiMetrics\";\nimport { kafkaQueries } from \"./queryKeys\";\nimport { useKms } from \"./useApi\";\n\nexport function useKafkaInstanceKpiMetricsQuery() {\n  const getKms = useKms();\n  const queryClient = useQueryClient();\n\n  return (id: string) => {\n    const api = getKms();\n\n    return queryClient.fetchQuery({\n      queryKey: kafkaQueries.instance.metrics.kpi({ id }),\n      queryFn: async () => {\n        return fetchKafkaKpiMetrics(\n          (...args) => api.getMetricsByInstantQuery(...args),\n          id\n        );\n      },\n    });\n  };\n}\n","import type { DefaultApi } from \"@rhoas/kafka-management-sdk\";\nimport type { GetKafkaInstanceMetricsResponse, TimeSeriesMetrics } from \"ui\";\nimport type { SafeRangeQuery } from \"./types\";\n\nexport type FetchKafkaInstanceMetricsProps = {\n  getMetricsByRangeQuery: DefaultApi[\"getMetricsByRangeQuery\"];\n  id: string;\n  duration: number;\n  interval: number;\n};\n\nexport async function fetchKafkaInstanceMetrics({\n  getMetricsByRangeQuery,\n  id,\n  duration,\n  interval,\n}: FetchKafkaInstanceMetricsProps): Promise<GetKafkaInstanceMetricsResponse> {\n  const response = await getMetricsByRangeQuery(id, duration, interval, [\n    \"kubelet_volume_stats_used_bytes\",\n    \"kafka_namespace:kafka_server_socket_server_metrics_connection_creation_rate:sum\",\n    \"kafka_namespace:kafka_server_socket_server_metrics_connection_count:sum\",\n  ]);\n\n  // Remove all results with no data. Not sure this can really  happen but since\n  // the types allow for undefined we need to do a bit of defensive programming.\n  const safeMetrics: SafeRangeQuery[] = (response.data.items || []).filter(\n    (m) =>\n      // defensive programming\n      !(\n        m.values &&\n        m.metric &&\n        m.metric.topic &&\n        m.metric.name &&\n        m.metric.persistentvolumeclaim &&\n        m.metric.persistentvolumeclaim.includes(\"zookeeper\")\n      )\n  ) as SafeRangeQuery[];\n\n  const usedDiskSpaceMetrics: TimeSeriesMetrics = {};\n  const connectionAttemptRateMetrics: TimeSeriesMetrics = {};\n  const clientConnectionsMetrics: TimeSeriesMetrics = {};\n\n  const connectionRateLimit = 0,\n    connectionsLimit = 0,\n    diskSpaceLimit = 0;\n\n  safeMetrics.forEach((m) => {\n    const { __name__: name } = m.metric;\n\n    function addAggregatedValuesTo(metric: TimeSeriesMetrics) {\n      m.values.forEach(\n        ({ value, timestamp }) =>\n          (metric[timestamp] = value + (metric[timestamp] || 0))\n      );\n    }\n\n    switch (name) {\n      case \"kubelet_volume_stats_used_bytes\":\n        addAggregatedValuesTo(usedDiskSpaceMetrics);\n        break;\n      case \"kafka_namespace:kafka_server_socket_server_metrics_connection_creation_rate:sum\":\n        addAggregatedValuesTo(connectionAttemptRateMetrics);\n        break;\n      case \"kafka_namespace:kafka_server_socket_server_metrics_connection_count:sum\":\n        addAggregatedValuesTo(clientConnectionsMetrics);\n        break;\n    }\n  });\n\n  return {\n    usedDiskSpaceMetrics,\n    clientConnectionsMetrics,\n    connectionAttemptRateMetrics,\n    diskSpaceLimit,\n    connectionRateLimit,\n    connectionsLimit,\n  };\n}\n","import { useQueryClient } from \"react-query\";\nimport type { FetchKafkaInstanceMetricsProps } from \"./fetchKafkaInstanceMetrics\";\nimport { fetchKafkaInstanceMetrics } from \"./fetchKafkaInstanceMetrics\";\nimport { kafkaQueries } from \"./queryKeys\";\nimport { useKms } from \"./useApi\";\n\nexport function useKafkaInstanceMetricsQuery() {\n  const getKms = useKms();\n  const queryClient = useQueryClient();\n\n  return (params: Omit<FetchKafkaInstanceMetricsProps, 'getMetricsByRangeQuery'>) => {\n    const api = getKms();\n\n    return queryClient.fetchQuery({\n      queryKey: kafkaQueries.instance.metrics.instance(params),\n      queryFn: async () => {\n        return fetchKafkaInstanceMetrics({\n          getMetricsByRangeQuery: (...args) =>\n            api.getMetricsByRangeQuery(...args),\n          ...params\n        });\n      },\n    });\n  };\n}\n","import type {\n  GetTopicsMetricsResponse,\n  PartitionBytesMetric,\n  TimeSeriesMetrics,\n} from \"@rhoas/app-services-ui-components\";\nimport type { DefaultApi } from \"@rhoas/kafka-management-sdk\";\nimport type { SafeRangeQuery } from \"./types\";\n\nexport type FetchTopicsMetricsProps = {\n  getMetricsByRangeQuery: DefaultApi[\"getMetricsByRangeQuery\"];\n  id: string;\n  duration: number;\n  interval: number;\n  selectedTopic: string | undefined;\n};\n\nexport async function fetchKafkaTopicMetrics({\n  getMetricsByRangeQuery,\n  id,\n  duration,\n  interval,\n  selectedTopic,\n}: FetchTopicsMetricsProps): Promise<\n  Omit<GetTopicsMetricsResponse, \"kafkaTopics\">\n> {\n  const response = await getMetricsByRangeQuery(id, duration, interval, [\n    \"kafka_topic:kafka_server_brokertopicmetrics_bytes_in_total:rate5m\",\n    \"kafka_topic:kafka_server_brokertopicmetrics_bytes_out_total:rate5m\",\n    \"kafka_topic:kafka_log_log_size:sum\",\n    \"kafka_topic:kafka_server_brokertopicmetrics_messages_in_total:rate5m\",\n  ]);\n\n  // Remove all results with no data. Not sure this can really  happen but since\n  // the types allow for undefined we need to do a bit of defensive programming.\n  const safeMetrics: SafeRangeQuery[] = (response.data.items || []).filter(\n    (m) =>\n      // defensive programming\n      !(m.values && m.metric && m.metric.topic && m.metric.name)\n  ) as SafeRangeQuery[];\n\n  // Also filter for metrics about the selectedTopic, if specified\n  const filteredMetrics = safeMetrics.filter((m) =>\n    // filter for metrics for the selectedTopic, if needed\n    selectedTopic !== undefined ? m.metric?.topic === selectedTopic : true\n  );\n\n  // get the unique topics we have metrics for in the selected time range\n  const topics = Array.from(new Set(safeMetrics.map((m) => m.metric.topic)));\n\n  const bytesIncoming: TimeSeriesMetrics = {};\n  const bytesOutgoing: TimeSeriesMetrics = {};\n  const bytesPerPartition: PartitionBytesMetric = {};\n  const incomingMessageRate: TimeSeriesMetrics = {};\n\n  filteredMetrics.forEach((m) => {\n    const { __name__: name, topic } = m.metric;\n\n    function addAggregatedTotalBytesTo(metric: TimeSeriesMetrics) {\n      m.values.forEach(\n        ({ value, timestamp }) =>\n          (metric[timestamp] = value + (metric[timestamp] || 0))\n      );\n    }\n\n    function addAggregatePartitionBytes() {\n      const partition = bytesPerPartition[topic] || {};\n      m.values.forEach(\n        ({ value, timestamp }) =>\n          (partition[timestamp] = value + (partition[timestamp] || 0))\n      );\n      bytesPerPartition[topic] = partition;\n    }\n\n    switch (name) {\n      case \"kafka_topic:kafka_server_brokertopicmetrics_bytes_in_total:rate5m\":\n        addAggregatedTotalBytesTo(bytesIncoming);\n        break;\n      case \"kafka_topic:kafka_server_brokertopicmetrics_bytes_out_total:rate5m\":\n        addAggregatedTotalBytesTo(bytesOutgoing);\n        break;\n      case \"kafka_topic:kafka_log_log_size:sum\":\n        addAggregatePartitionBytes();\n        break;\n      case \"kafka_topic:kafka_server_brokertopicmetrics_messages_in_total:rate5m\":\n        addAggregatedTotalBytesTo(incomingMessageRate);\n        break;\n    }\n  });\n\n  return {\n    metricsTopics: topics,\n    bytesOutgoing,\n    bytesIncoming,\n    bytesPerPartition,\n    incomingMessageRate,\n  };\n}\n","import { useQueryClient } from \"react-query\";\nimport type { FetchTopicsMetricsProps } from \"./fetchKafkaTopicMetrics\";\nimport { fetchKafkaTopicMetrics } from \"./fetchKafkaTopicMetrics\";\nimport { kafkaQueries } from \"./queryKeys\";\nimport { useKms } from \"./useApi\";\n\nexport function useKafkaInstanceTopicMetricsQuery() {\n  const getKms = useKms();\n  const queryClient = useQueryClient();\n\n  return (\n    params: Omit<FetchTopicsMetricsProps, 'getMetricsByRangeQuery'>\n  ) => {\n    const api = getKms();\n\n    return queryClient.fetchQuery({\n      queryKey: kafkaQueries.instance.metrics.topic(params),\n      queryFn: async () => {\n        return fetchKafkaTopicMetrics({\n          getMetricsByRangeQuery: (...args) =>\n            api.getMetricsByRangeQuery(...args),\n          ...params\n        });\n      },\n    });\n  };\n}\n","import type {\n  SortDirection,\n  Topic,\n  TopicsApi,\n} from \"@rhoas/kafka-instance-sdk\";\nimport type { KafkaTopic } from \"ui\";\nimport type { KafkaTopicsSortableColumn } from \"./types\";\n\nexport type FetchKafkaTopicsParams = {\n  getTopics: TopicsApi[\"getTopics\"];\n  page?: number;\n  perPage?: number;\n  sort?: KafkaTopicsSortableColumn;\n  direction?: SortDirection;\n  filter?: string;\n};\n\nexport async function fetchKafkaTopics({\n  getTopics,\n  page,\n  perPage,\n  filter,\n  sort,\n  direction,\n}: FetchKafkaTopicsParams): Promise<{ topics: KafkaTopic[]; count: number }> {\n  const response = await getTopics(\n    undefined,\n    undefined,\n    perPage,\n    filter,\n    page,\n    direction,\n    sort\n  );\n  const topics = (response.data.items || []).map((t: Topic) => ({\n    topic_name: t.name!,\n    partitions: t.partitions?.length || 0,\n    retention_size:\n      t.config?.find(({ key }) => key === \"retention.bytes\")?.value || \"\",\n    retention_time:\n      t.config?.find(({ key }) => key === \"retention.ms\")?.value || \"\",\n  }));\n  const count = response.data.total;\n  return { count, topics };\n}\n","import { useQuery } from \"react-query\";\nimport { useApi } from \"./ApiProvider\";\nimport type { FetchKafkaTopicsParams } from \"./fetchKafkaTopics\";\nimport { fetchKafkaTopics } from \"./fetchKafkaTopics\";\nimport { kafkaQueries } from \"./queryKeys\";\nimport { useTopics } from \"./useApi\";\n\nexport function useKafkaInstanceTopics(params: {id?: string, adminUrl?: string}&Omit<FetchKafkaTopicsParams, \"getTopics\">) {\n  const { refetchInterval } = useApi();\n  const getTopics = useTopics();\n\n  return useQuery({\n    queryKey: kafkaQueries.instance.topics(params),\n    queryFn: () => {\n      if (!params.id) {\n        return Promise.reject(\"Invalid id\");\n      }     if (!params.adminUrl) {\n        return Promise.reject(\"Invalid adminUrl\");\n      }\n      const api = getTopics(params.adminUrl);\n\n      return fetchKafkaTopics({\n        getTopics: (...args) => api.getTopics(...args),\n        ...params,\n      });\n    },\n    enabled: Boolean(params.adminUrl) && Boolean(params.id),\n    refetchInterval,\n  });\n}\n","import { useQueryClient } from \"react-query\";\nimport type { FetchKafkaTopicsParams } from \"./fetchKafkaTopics\";\nimport { fetchKafkaTopics } from \"./fetchKafkaTopics\";\nimport { kafkaQueries } from \"./queryKeys\";\nimport { useTopics } from \"./useApi\";\n\nexport function useKafkaInstanceTopicsQuery() {\n  const getTopics = useTopics();\n  const queryClient = useQueryClient();\n\n  return (params: Omit<FetchKafkaTopicsParams, \"getTopics\"> & { id: string, adminUrl: string }) => {\n    const api = getTopics(params.adminUrl);\n\n    return queryClient.fetchQuery({\n      queryKey: kafkaQueries.instance.topics(params),\n      queryFn: async () => {\n        return fetchKafkaTopics({\n          getTopics: (...args) => api.getTopics(...args),\n          ...params,\n        });\n      },\n    });\n  };\n}\n","import type { ConsumerGroupState } from \"@rhoas/kafka-instance-sdk\";\nimport type { SortDirection, GroupsApi } from \"@rhoas/kafka-instance-sdk\";\nimport type { ConsumerGroup } from \"ui\";\nimport type { KafkaConsumerGroupSortableColumn } from \"./types\";\n\nexport type FetchKafkaConsumerGroupsParams = {\n  getConsumerGroups: GroupsApi[\"getConsumerGroups\"];\n  page?: number;\n  perPage?: number;\n  sort?: KafkaConsumerGroupSortableColumn;\n  direction?: SortDirection;\n  topic?: string;\n  groupId?: string;\n};\n\nexport async function fetchKafkaConsumerGroups({\n  getConsumerGroups,\n  page,\n  perPage,\n  topic,\n  groupId,\n  sort,\n  direction,\n}: FetchKafkaConsumerGroupsParams): Promise<{\n  groups: ConsumerGroup[];\n  count: number;\n}> {\n  const response = await getConsumerGroups(\n    undefined,\n    undefined,\n    perPage,\n    page,\n    topic,\n    groupId,\n    direction,\n    sort\n  );\n  const groups = (response.data.items || []).map<ConsumerGroup>((t) => ({\n    consumerGroupId: t.groupId || \"\",\n    activeMembers: t.metrics?.activeConsumers || 0,\n    partitionsWithLag: t.metrics?.laggingPartitions || 0,\n    state: stateMapping[t.state as ConsumerGroupState],\n  }));\n  const count = response.data.total;\n  return { count, groups };\n}\n\nconst stateMapping: {[state in ConsumerGroupState]: ConsumerGroup['state']} = {\n  DEAD: \"Dead\",\n  EMPTY: \"Empty\",\n  STABLE: \"Stable\",\n  UNKNOWN: \"Unknown\",\n  COMPLETING_REBALANCE: \"CompletingRebalance\",\n  PREPARING_REBALANCE: \"PreparingRebalance\"\n}","import { useQuery } from \"react-query\";\nimport { useApi } from \"./ApiProvider\";\nimport type { FetchKafkaConsumerGroupsParams } from \"./fetchKafkaConsumerGroups\";\nimport { fetchKafkaConsumerGroups } from \"./fetchKafkaConsumerGroups\";\nimport { kafkaQueries } from \"./queryKeys\";\nimport { useConsumerGroups } from \"./useApi\";\n\nexport function useKafkaInstanceConsumerGroups(params: {id?: string, adminUrl?: string}&Omit<FetchKafkaConsumerGroupsParams, \"getConsumerGroups\">) {\n  const { refetchInterval } = useApi();\n  const getConsumerGroups = useConsumerGroups();\n\n  return useQuery({\n    queryKey: kafkaQueries.instance.consumerGroups(params),\n    queryFn: () => {\n      if (!params.id) {\n        return Promise.reject(\"Invalid id\");\n      }     if (!params.adminUrl) {\n        return Promise.reject(\"Invalid adminUrl\");\n      }\n      const api = getConsumerGroups(params.adminUrl);\n\n      return fetchKafkaConsumerGroups({\n        getConsumerGroups: (...args) => api.getConsumerGroups(...args),\n        ...params,\n      });\n    },\n    enabled: Boolean(params.adminUrl) && Boolean(params.id),\n    refetchInterval,\n  });\n}\n","export function valuesToQuery(\n  field: string,\n  values: string[],\n  comparison: \"%\" | \"=\"\n): string | undefined {\n  return values\n    .map((v) =>\n      comparison === \"%\"\n        ? `${field} like %${v.trim()}%`\n        : `${field} = ${v.trim()}`\n    )\n    .join(\" or \");\n}\n","import type { DefaultApi, KafkaRequest } from \"@rhoas/kafka-management-sdk\";\nimport type { SimplifiedStatus } from \"ui\";\nimport { SimplifiedStatuses } from \"ui\";\nimport type { KafkaInstanceEnhanced } from \"./kafkaRequestToKafkaInstanceEnhanched\";\nimport type { KafkaInstancesSortableColumn } from \"./types\";\nimport { valuesToQuery } from \"./valuesToQuery\";\n\nconst uiColumnMapping: {\n  [key in KafkaInstancesSortableColumn]: keyof KafkaRequest;\n} = {\n  name: \"name\",\n  owner: \"owner\",\n  provider: \"cloud_provider\",\n  region: \"region\",\n  createdAt: \"created_at\",\n};\nexport type FetchKafkaInstancesParams = {\n  getKafkas: DefaultApi[\"getKafkas\"];\n  dataMapper: (data: KafkaRequest) => Promise<KafkaInstanceEnhanced>;\n  page: number;\n  perPage: number;\n  name: string[];\n  owner: string[];\n  status: SimplifiedStatus[];\n  sort: KafkaInstancesSortableColumn;\n  direction: \"asc\" | \"desc\";\n};\n\nexport async function fetchKafkaInstances(\n  params: FetchKafkaInstancesParams\n): Promise<{\n  instances: KafkaInstanceEnhanced[];\n  count: number;\n}> {\n  const {\n    name,\n    status,\n    owner,\n    sort,\n    direction,\n    page,\n    perPage,\n    dataMapper,\n    getKafkas,\n  } = params;\n  const search = filtersToSearch(name, owner, status);\n\n  const res = await getKafkas(\n    page.toString(10),\n    perPage.toString(10),\n    sort ? `${uiColumnMapping[sort]} ${direction}` : undefined,\n    search\n  );\n  const rawInstances = res.data.items;\n  const count = res.data.total;\n  const instances = await Promise.all(rawInstances.map(dataMapper));\n  return {\n    instances,\n    count,\n  };\n}\n\nexport function filtersToSearch(\n  name: string[],\n  owner: string[],\n  status: SimplifiedStatus[]\n): string {\n  const querystring = [\n    valuesToQuery(\"name\", name, \"%\"),\n    valuesToQuery(\"owner\", owner, \"%\"),\n    valuesToQuery(\n      \"status\",\n      status.flatMap((s) => SimplifiedStatuses[s]),\n      \"=\"\n    ),\n  ]\n    .filter(Boolean)\n    .map((q) => `(${q!})`)\n    .join(\" and \");\n  return querystring;\n}\n","import { useQuery, useQueryClient } from \"react-query\";\nimport { useApi } from \"./ApiProvider\";\nimport type { FetchKafkaInstancesParams } from \"./fetchKafkaInstances\";\nimport { fetchKafkaInstances } from \"./fetchKafkaInstances\";\nimport { kafkaQueries } from \"./queryKeys\";\nimport { useKms } from \"./useApi\";\nimport { useKafkaInstanceTransformer } from \"./useKafkaInstanceTransformer\";\n\nexport function useKafkaInstances(\n  params: Omit<FetchKafkaInstancesParams, \"dataMapper\" | \"getKafkas\">\n) {\n  const { refetchInterval } = useApi();\n  const queryClient = useQueryClient();\n  const dataMapper = useKafkaInstanceTransformer();\n  const getKms = useKms();\n  const api = getKms();\n\n  return useQuery({\n    queryKey: kafkaQueries.list(params),\n    queryFn: async () => {\n      const res = await fetchKafkaInstances({\n        getKafkas: (...args) => api.getKafkas(...args),\n        dataMapper,\n        ...params,\n      });\n      res.instances.forEach((i) =>\n        queryClient.setQueryData(\n          kafkaQueries.instance.details({ id: i.id }),\n          i\n        )\n      );\n      return res;\n    },\n    refetchInterval\n  });\n}\n","import { TopicOrderKey, ConsumerGroupOrderKey } from \"@rhoas/kafka-instance-sdk\";\nimport type { RangeQuery } from \"@rhoas/kafka-management-sdk\";\n\nexport type NoUndefinedField<T> = {\n  [P in keyof T]-?: NoUndefinedField<NonNullable<T[P]>>;\n};\n\nexport type SafeRangeQuery = NoUndefinedField<RangeQuery>;\n\nexport const KafkaInstancesSortableColumns = [\n  \"name\",\n  \"owner\",\n  \"createdAt\",\n  \"provider\",\n  \"region\",\n] as const;\n\nexport type KafkaInstancesSortableColumn =\n  typeof KafkaInstancesSortableColumns[number];\n\nexport const KafkaTopicsSortableColumns = [\n  ...Object.values(TopicOrderKey),\n] as const;\n\nexport type KafkaTopicsSortableColumn =\n  typeof KafkaTopicsSortableColumns[number];\n\nexport const KafkaConsumerGroupSortableColumns = [\n  ...Object.values(ConsumerGroupOrderKey),\n] as const;\n\nexport type KafkaConsumerGroupSortableColumn =\n  typeof KafkaConsumerGroupSortableColumns[number];\n","const REACT_QUERY_DEVTOOLS = \"mas.devtools\";\nconst METRICS_LAG_ALERT = \"mas.rhosak.metrics.lag-alert-closed\";\n\nexport function isReactQueryDevToolsEanbled() {\n  return localStorage.getItem(REACT_QUERY_DEVTOOLS) === \"true\";\n}\n\nexport function metricsIsLagAlertsDismissed() {\n  return localStorage.getItem(METRICS_LAG_ALERT) === \"true\";\n}\n\nexport function metricsDismissLagAlerts() {\n  return localStorage.setItem(METRICS_LAG_ALERT, \"true\");\n}\n","import type { CloudProvider, CloudRegion } from \"../../../types\";\nimport type { CloudProviderInfo } from \"../types\";\n\nexport function onProviderChange(\n  providers: CloudProviderInfo[],\n  provider: CloudProvider\n): { provider: CloudProvider; region: CloudRegion | undefined } {\n  const selectedProvider = providers.find((p) => p.id === provider);\n  const region =\n    selectedProvider?.defaultRegion ||\n    selectedProvider?.regions.filter((r) => !!r.isDisabled === false)[0]?.id;\n  return { provider, region };\n}\n","import { assign, createMachine, send, sendParent } from \"xstate\";\nimport {\n  CloudProvider,\n  CloudRegion,\n  MarketplaceSubscription,\n  Size,\n} from \"../../../types\";\nimport {\n  CreateKafkaFormData,\n  CreateKafkaInstanceError,\n  StandardPlanInitializationData,\n  StandardSizes,\n} from \"../types\";\nimport { onProviderChange } from \"./shared\";\n\nexport type StandardPlanMachineContext = {\n  // initial data coming from the APIs\n  capabilities: StandardPlanInitializationData;\n\n  // what the user is selecting\n  form: {\n    name?: string;\n    provider?: CloudProvider;\n    region?: CloudRegion;\n    size?: Size;\n    billing?: MarketplaceSubscription | \"prepaid\";\n  };\n\n  // based on the form.provider selection\n\n  // based on the form.provider and form.region selection\n  sizes: StandardSizes | undefined;\n\n  creationError: CreateKafkaInstanceError | undefined;\n};\n\nexport const StandardPlanMachine =\n  /** @xstate-layout N4IgpgJg5mDOIC5SwC4EMB2E0CcIAUAbTAWTQGMALASwzADoA3MHagMwE8BBRta4gEb9qKDgGJEoAA4B7WCOoyMkkAA9EAZgAcARnoBOfQAYdOrQHYArABYNAJnMAaEB0Q6j++reuXL5k3bWWpY65gC+Yc6omNh4RKQUNHT05Eps1FAArqwYUPTRKJmwYuQ4YGgoYCqy8iiKykhqmjp29OYW5hpGQYG+zq4Ilvoa9KZGlh4a5joAbPqBEVHoWLgExBhkVLQMqRjpWTl5bDI4ALZMaITUEGLpYIQQAJIYvFcQ1XIKSirqCKGG9Ds+ksU1m5n0M2s1n0-UQdgmllGdjsOj8QJm7ihixA0RWcXWmySOzSGWytCOJ3Or2uYlgmQEpxEH1q9R+bmMnnMnRR9n8di0RjssIQ-MFo2sgQ81lCGjm2NxsTWCS2yV2+zJuXoxzO+TQjHJJTKFTAAGVMuRyHB4I0al8GqBfoEZlp6FpISYdBp7PprFZhaK9JDAuDproQfLlor4htEtsUiSDuStZTdfrcobypUAKI4HAnZl2tkinn0WVTFFQrS+mb+jEzehzMz84btazjCMxVbRwlxtWkw7Js63aj3J4vS7XAt1b6NR0+etaWXzPmQmsuOGmRGWfmWRchbctGYdvFKmMq4l7ftJu4PWD0DBoU4ManYSoSG2faf2poIIL15GmDo+iLkBdhGOYa4DLMUKjKCljOkYbrDFox5RgSsaqgmGpHCOt73o+YAZsaU6srObj2F45gSn4UIaDY7QaMKMouohVgzNuHhgRoOioV26HnvGl6JpqN4QHeD5PmIElgAAwpQmAwCRM4OuRrS+tRVG2PRi5MexrSojM9iIW2VgSrx+LKkSgnqgOol3lIeb6hALAXG8xrvtIn6kSpgxAm00IosiEEzDMTjriKHj1hMEIoqE1iGeYdjmaePaYUJ2FarhYn0A5MhOSwRGVEp36-J6alUfCml0b6Onhci8UGJxnoSuBGj6Ml3YYReNnXll9mOdcBW5flOByQpVQfiyyk-mVlEabR2mMXVUr0EYgo+qGQHtJYHX8VZfbCTho53mUUD1K51zucVRYHl4hg6EEPisdYTHwkYgLDNKRjsSF0I7ZEOKRnxlm9lhtl9fQp31IVE2eVNJWqXNlULTVS1QXR5iAqidgzCYApui0u0g2lPUiRDUNKGIw2DaN8m5LDIC2l+RazepyNaajTFdJ4OM8hBnRejxAMKsDZ77WDvXHZDYBnZTFMYGN9PXWRfwUWzNEcwxTEGaWvgWA9Gg+P41hE2LoPpeDUvyAAXs+E6voRys+b6gbcW7czQu4tUDA44KrZCsogfyXqm6l3VXmTVvULb9CEDIaAQAaEBKAwtCMDIADWDAixZZskxHR14TbDBxwn5IIGnMjkBU9QANpGAAuk7P6gvQNi6HY2gPVCwr2HRbS6PoVG7lYQyh111kF5lUcx6XifpiweY4DlxAoNq5w5ylE8HRldn5NHJfx-PUAVy8Vc10o9dN5NhYq9uLqBMiwEWBKneWL3vKrSEiHDOBILDOPASO9LZFwPjDZujpQq6wAuxYwoEpj+n-qMT0254KG3ig9QB4sLaS1AbbKmA1nK03GhAtwi4sYeisPMQw9hay4wML6RKhhvrgiFksTsucw6T0OtPPBhF5aK0UjfZmKtcYuh9GBQwGIUS1kNgYT6Ewfqd26Fg82pNC7ZWLrSA+giGZM28j+KiLopjbkhPrcCuhaweGgT4Ux-hZj-XYSeTqQCJaRz4WIIQhAri5F0aQ388E26NnYuCZcEEXp1VxpjAmVYqKsOBEeYWQNOHbzcRou8XifF5BfFdYRBjfjbhGFoAUZjZjLj8L3YpmM1pWHCZVGYONVH5x4XvTJSYlCEA4GaAQsBSjUCkF+YosB7hgHICgbpvTWADIMfo6apU1rWDaO6EKa0goNMqfoPQ-gbC4x9MBQUGgmnhxaRDNpmoHJgCkHwCAXAsATL6dMpQQyRljPuVMkRcNb4+UPIiYpQI9y7ngsBYU3hFlrU9GYjwIRwhJI4VvVxOD3HZTOXkC5Vzri3IgG8-pgzaQvJQPgMo6L3h5LmW4IwUxXS7i9L4KwswtAgr7m3FEQxEq6EhEc7hu9Tn8CyQQvKNM-GkoRqres3FURxPsMiIEvdAUD0XIhHG8VEKOMBnClx2D1G8LEmIZOyQCjZ2SfCzVU87L+NmOMNo7hxjlgaYbd+kT+6aWCG-XcSrOXAKTinfI6BKg+vVXtNRBd-H8hxq6aUxtfQmCkf6WU9YWhgUqiETEEQAYYBkM5a0yAjUarjMwVgnAeB8EEMIUQ-iQjhtCm1WUEofTjGFFYAw3oQj2p9NRTleUWAAEVMgyHQP4gUIxOLQh8FoX2DLwoJtLI9cFWg63TESU4tCxNU4YFxJaAAqg+Xg-A0ACEIHoryZKEBcnep0NtwQuTSIdT7ClrpQoonmC0XQa1F1qucYG5I8tYBbr1MWvdB7-FckWdCYpD1+RujHTCOqVZSwB3GMiRcwxZgerSf6wod5MhrvpIyFAlQSWfI+TNRCpY2pVhCI+jmwohg8zilRA2Y7fSocRXkAoRR8g4ZEPh-x84DBmGlPjLko8IkDAXatLoi54Sd3hPBZjWq2NZsZkekVsGvTAR8C0ICVHwoTBdKYUKLbkSsQhHJ01KY0723NeCRZnpNkmFCqEMdsaUSrWYd0LkgcTOwo-SurltkUwvis8BUY4EMQ-3cA9G9cJcYjFCmtYIQRhhzEOd55dedjm7xTLAPU5IQ0oIbBYDw4x5wojCj7Kw+lZScV8PCT0pmWlZb1JAENCUDDhOs8CYI-pwSIgabFHGHtMGpdFlwz1IlKRWf8LBOzYJHNCmWl0Nura51uu+vV7lUtpL0DAKcAZAxCP5MQEw0YhS2xoJqhOqCiUh3OmleMCEKWl0jdSSx7V4kCL0As28c1asKoa2qlrSd4J6zdG+h0MEXoTbDZSQirVe8tuBeFSzKiDYfT0UMqYkETFNkg4Mu0aY4xFxQ6ezDk1JzNsfZyUVJHKtDYjDavMKTc6vSdyYtd-2Y6jNDEMutkB2VpLmpI+rKqi0mK+E8AbX0QJWXGCStD41Qbyd4WpkQi6Dt-HaHrMubiHmTJukghuaEXhdzPo8BCFbvPcHZRVy5L7k4affJsICbQSrDBAiHlFkUXRFluk7nReYY7nQwpJwr5pG3leEJcojg7x6Kv+yCBYEEtWuT+gep4UdpupEW-l7msPfP+oCqIYLl0wuUaA9vdYta8xDJei6EYy3SKToy3OlTw98MixTBdKFAWLQbBlTK+RO9gR+NfW4vFFCOfP0Zfz9LWWGBPvjm+w7maExkG8lCCCQUtimLSkRPSl3zokNDZD7n6fVum9z7V0BxbDnBQNOdEBSEXMh8CahO4MfzoG-pNnzM5TLMhd-Yi6cyTrgR6CygoiJ7BAhQhRf5vb7wxyt4a7tANidD6bDwPrzY+wOYNiBCc4hTNiPbvppajZoZ7zFyfYQCAbL6lQUQgiGygFuztDwjdYQjiZQiigZ5vqbyn5+bn7wEMCJzZb7rNbUGIAdBeC6DcRVheiSGYFwjAh6DAgmCKJWDaA+CwFkEHz0AADufAdQuQAAYicD2n2mgD9q0HQVMLyNMDjAguFDSnoOMF7L-KoQApPr5mNt-uQZ2jgCYf2qIarBYZDgwZ6EwZ7l0HeozoqkEBYhPiflPrwY3vwVfgEZspyPZohuxN6HIQgBJmAdIdtA5tCMHkQc9rDqahDOQYvPmAEbNJYdyFyIeHYQMM2qtG2GVDaozhoZUVoXPLlgERBLFtoPfAKFCEMCJs0MMG0IlNuCGIuJ-u4elokV4QfMXktl6A0TYQlP6D4DZkBH3uBMPKqtwQkZ4XASimrsRLUdoI1J0IZBSn4HAuEZIf5C1O4EMJ3GwqUaToruHsirykmOmiaPivUAAEpgAACOmQ1AZQBGSm7eKs+WEw6+OuVe4RChro1mI6iE0a3RUsFxHSXS9IkyOK9Qd4ducJsyKmKOFiEq0wPQNglSwQowwQ0EYE-GcR3xoeZ+SRBJGAnS2Kjya6KRMeIqkWmMf4-IwOdqD0vcGJ0IkObq7Q4wXBOapxpBPK3i7S-JRJPSDygyA6q+tJfg9JY6jJ9hFUWMkIoQDEDSnJJxHhGp+JAJ5yRK1ymKgpgy22u2ZaARFgIw8IxgGmFKDgoQjKoQq0AQ9qjmwIeJeEFxaK7pdyxJ+pZJHGep7yv+CJ3yfIXgtmfeW0Y6l2iAb+Yq7QAo2y7g8IcZ-xWprplySZWKKZmZTyOUbp9uopRYzCroHgi4i4dKesIKtg6egoxSJSbU0wNZGSLpqK7ZNyyZGZpJTyA6RugZ3Q386+A+v4qIQ6r8hsVZvIU59AKK5qpgbcIZ0wqJUKsqa0bQPo7EFiEoKGixJBr2ZqfpIGgBZe3siAhgxizoY+-Ib+xSX+-i9Cam5GmmPo1UjKe+iGypYEVYJgnK2WzAlJf+Ks-yUUmyJp9Bl5saQwDYJgTCa0Y+boRyIa0S8U56NaQIZ2ORrQwwaR3oNewEz5EQQAA */\n  createMachine(\n    {\n      context: {\n        capabilities: {} as StandardPlanInitializationData,\n        sizes: undefined,\n        form: {},\n        creationError: undefined,\n      },\n      tsTypes: {} as import(\"./StandardPlanMachine.typegen\").Typegen0,\n      schema: {\n        context: {} as StandardPlanMachineContext,\n        events: {} as\n          | { type: \"fieldInvalid\" }\n          | { type: \"nameChange\"; name: string }\n          | { type: \"providerChange\"; provider: CloudProvider }\n          | { type: \"regionChange\"; region: CloudRegion }\n          | { type: \"sizeChange\"; size: Size }\n          | {\n              type: \"selectSubscription\";\n              subscription: MarketplaceSubscription;\n            }\n          | { type: \"selectPrepaid\" }\n          | { type: \"billingChange\" }\n          | { type: \"nameIsValid\" }\n          | { type: \"nameIsInvalid\" }\n          | { type: \"nameIsTaken\" }\n          | { type: \"submit\" }\n          | { type: \"create\" }\n          | { type: \"createSuccess\" }\n          | { type: \"createError\"; error: CreateKafkaInstanceError },\n        services: {} as {\n          getSizes: {\n            data: StandardSizes;\n          };\n        },\n      },\n      initial: \"verifyAvailability\",\n      id: \"standardPlanMachine\",\n      states: {\n        verifyAvailability: {\n          entry: \"setInitialContext\",\n          always: [\n            {\n              cond: \"isOverQuota\",\n              target: \"overQuota\",\n            },\n            {\n              cond: \"isInstanceUnavailable\",\n              target: \"instanceUnavailable\",\n            },\n            {\n              cond: \"isRegionsUnavailable\",\n              target: \"regionsUnavailable\",\n            },\n            {\n              target: \"configuring\",\n            },\n          ],\n        },\n        overQuota: {\n          tags: \"blocked\",\n        },\n        instanceUnavailable: {\n          tags: \"blocked\",\n        },\n        regionsUnavailable: {\n          tags: \"blocked\",\n        },\n        configuring: {\n          type: \"parallel\",\n          states: {\n            status: {\n              initial: \"unsubmitted\",\n              states: {\n                unsubmitted: {\n                  tags: \"unsubmitted\",\n                },\n                submitted: {\n                  entry: \"triggerSubmit\",\n                  tags: \"submitted\",\n                },\n              },\n              on: {\n                create: {\n                  description:\n                    \"Save is enabled all the time, if it's clicked before the form is completely filled out we should show the validation for all errored fields\",\n                  target: \".submitted\",\n                },\n              },\n            },\n            form: {\n              initial: \"invalid\",\n              states: {\n                invalid: {\n                  tags: \"formInvalid\",\n                },\n                valid: {\n                  entry: \"resetCreationErrorMessage\",\n                  tags: \"creatable\",\n                  on: {\n                    fieldInvalid: {\n                      target: \"invalid\",\n                    },\n                    submit: {\n                      target: \"saving\",\n                    },\n                  },\n                },\n                saving: {\n                  entry: [\"resetCreationErrorMessage\", \"triggerSave\"],\n                  tags: \"formSaving\",\n                  on: {\n                    createSuccess: {\n                      target: \"saved\",\n                    },\n                    createError: {\n                      actions: \"setCreationError\",\n                      target: \"invalid\",\n                    },\n                  },\n                },\n                saved: {\n                  type: \"final\",\n                },\n              },\n              on: {\n                fieldInvalid: {\n                  description:\n                    \"sent by the fields when their value change to an invalid value. This will transition the form to the invalid state, to then eventually transition to the valid state if the field state is marked as done (which means that all fields have a valid value selected)\",\n                  target: \".invalid\",\n                },\n              },\n            },\n            fields: {\n              tags: \"configurable\",\n              type: \"parallel\",\n              states: {\n                name: {\n                  initial: \"validate\",\n                  states: {\n                    empty: {\n                      tags: \"nameEmpty\",\n                    },\n                    invalid: {\n                      entry: \"fieldInvalid\",\n                      tags: \"nameInvalid\",\n                    },\n                    valid: {\n                      tags: \"nameValid\",\n                      type: \"final\",\n                    },\n                    validate: {\n                      always: [\n                        {\n                          cond: \"nameIsEmpty\",\n                          target: \"empty\",\n                        },\n                        {\n                          cond: \"nameIsValid\",\n                          target: \"valid\",\n                        },\n                        {\n                          target: \"invalid\",\n                        },\n                      ],\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    nameChange: {\n                      actions: \"setName\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n                provider: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"providerIsValid\",\n                          target: \"valid\",\n                        },\n                        {\n                          target: \"invalid\",\n                        },\n                      ],\n                    },\n                    invalid: {\n                      entry: \"fieldInvalid\",\n                      tags: \"providerInvalid\",\n                    },\n                    valid: {\n                      tags: \"providerValid\",\n                      type: \"final\",\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    providerChange: {\n                      actions: \"setProvider\",\n                      cond: \"didProviderChange\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n                region: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"regionIsValid\",\n                          target: \"valid\",\n                        },\n                        {\n                          target: \"invalid\",\n                        },\n                      ],\n                    },\n                    invalid: {\n                      entry: \"fieldInvalid\",\n                      tags: \"regionInvalid\",\n                    },\n                    valid: {\n                      tags: \"regionValid\",\n                      type: \"final\",\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    providerChange: {\n                      target: \".validate\",\n                    },\n                    regionChange: {\n                      actions: \"setRegion\",\n                      cond: \"didRegionChange\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n                size: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"noProviderOrRegion\",\n                          target: \"idle\",\n                        },\n                        {\n                          cond: \"noSizes\",\n                          target: \"loading\",\n                        },\n                        {\n                          cond: \"emptySizes\",\n                          target: \"error\",\n                        },\n                        {\n                          cond: \"sizeIsDisabled\",\n                          target: \"disabled\",\n                        },\n                        {\n                          cond: \"billingRequiredButNotSelected\",\n                          target: \"waitingForQuota\",\n                        },\n                        {\n                          cond: \"sizeIsOverQuota\",\n                          target: \"overQuota\",\n                        },\n                        {\n                          target: \"valid\",\n                        },\n                      ],\n                    },\n                    idle: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeIdle\",\n                    },\n                    disabled: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeDisabled\",\n                    },\n                    waitingForQuota: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeWaitingForQuota\",\n                    },\n                    overQuota: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeOverQuota\",\n                    },\n                    valid: {\n                      tags: \"sizeValid\",\n                      type: \"final\",\n                    },\n                    error: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeError\",\n                    },\n                    loading: {\n                      description:\n                        \"Fetch the data required to show the available sizes and limits\",\n                      invoke: {\n                        src: \"getSizes\",\n                        onDone: [\n                          {\n                            actions: \"setSizes\",\n                            target: \"validate\",\n                          },\n                        ],\n                        onError: [\n                          {\n                            target: \"error\",\n                          },\n                        ],\n                      },\n                      tags: \"sizeLoading\",\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    providerChange: {\n                      target: \".validate\",\n                    },\n                    regionChange: {\n                      target: \".validate\",\n                    },\n                    sizeChange: {\n                      actions: \"setSize\",\n                      cond: \"didSizeChange\",\n                      target: \".validate\",\n                    },\n                    billingChange: {\n                      target: \".validate\",\n                    },\n                  },\n                },\n                billing: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"onlyPrepaid\",\n                          target: \"prepaidOnly\",\n                        },\n                        {\n                          cond: \"singleSubscription\",\n                          target: \"singleSubscription\",\n                        },\n                        {\n                          cond: \"onlySubscriptions\",\n                          target: \"onlySubscriptions\",\n                        },\n                        {\n                          description:\n                            \"user has both prepaid and marketplace subscriptions\",\n                          target: \"prepaidAndSubscriptions\",\n                        },\n                      ],\n                    },\n                    prepaidOnly: {\n                      description:\n                        \"The user doesn't need to specify any option about the billing. The API will automatically figure out the right thing to do without giving it any information.\",\n                      tags: [\"noBilling\", \"billingValid\"],\n                      entry: \"setBillingToPrepaid\",\n                      type: \"final\",\n                    },\n                    singleSubscription: {\n                      description:\n                        \"The user doesn't need to specify any option about the billing. The API will automatically figure out the right thing to do without giving it any information.\",\n                      tags: [\"noBilling\", \"billingValid\", \"singleSubscription\"],\n                      entry: \"setBillingToSubscription\",\n                      type: \"final\",\n                    },\n                    onlySubscriptions: {\n                      description:\n                        \"More than one subscription exist. The user needs to select one to procede.\",\n                      initial: \"invalid\",\n                      type: \"final\",\n                      states: {\n                        invalid: {},\n                        valid: {\n                          entry: \"triggerBillingChange\",\n                          tags: \"billingValid\",\n                          type: \"final\",\n                        },\n                      },\n                      on: {\n                        selectSubscription: [\n                          {\n                            actions: \"setBillingToSubscription\",\n                            cond: \"matchesSelectedProviderOrRHMarketplaceAndHasQuota\",\n                            target: \".valid\",\n                          },\n                          {\n                            cond: \"noSelectedProvider\",\n                            target: \".valid\",\n                          },\n                        ],\n                      },\n                    },\n                    prepaidAndSubscriptions: {\n                      description:\n                        \"The user has both prepaid quota and one or more subscription to a marketplace. The user needs to select one to procede.\",\n                      initial: \"empty\",\n                      type: \"final\",\n                      states: {\n                        empty: {},\n                        subscription: {\n                          entry: \"triggerBillingChange\",\n                          tags: \"billingValid\",\n                          type: \"final\",\n                        },\n                        prepaid: {\n                          entry: \"triggerBillingChange\",\n                          tags: \"billingValid\",\n                          type: \"final\",\n                        },\n                      },\n                      on: {\n                        selectSubscription: [\n                          {\n                            actions: \"setBillingToSubscription\",\n                            cond: \"matchesSelectedProviderOrRHMarketplaceAndHasQuota\",\n                            target: \".subscription\",\n                          },\n                          {\n                            cond: \"noSelectedProvider\",\n                            target: \".subscription\",\n                          },\n                        ],\n                        selectPrepaid: {\n                          actions: \"setBillingToPrepaid\",\n                          cond: \"hasPrepaidQuota\",\n                          target: \".prepaid\",\n                        },\n                      },\n                    },\n                  },\n                  on: {\n                    providerChange: {\n                      actions: \"unsetSubscription\",\n                      description:\n                        \"If a new provider is selected, deselect any previously selected billing option.\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n              },\n              onDone: {\n                target: \"#standardPlanMachine.configuring.form.valid\",\n              },\n            },\n          },\n          onDone: {\n            target: \"saved\",\n          },\n        },\n        saved: {\n          type: \"final\",\n        },\n      },\n    },\n    {\n      actions: {\n        setInitialContext: assign((context) => {\n          return {\n            form: {\n              ...(context.capabilities.defaultProvider\n                ? onProviderChange(\n                    context.capabilities.availableProviders,\n                    context.capabilities.defaultProvider\n                  )\n                : {}),\n            },\n          };\n        }),\n        fieldInvalid: send(\"fieldInvalid\"),\n        setName: assign((context, { name }) => {\n          if (context.creationError === \"name-taken\") {\n            return {\n              form: { ...context.form, name },\n              creationError: undefined,\n            };\n          }\n          return { form: { ...context.form, name } };\n        }),\n        setProvider: assign((context, { provider }) => {\n          return {\n            form: {\n              ...context.form,\n              ...onProviderChange(\n                context.capabilities.availableProviders,\n                provider\n              ),\n            },\n            sizes: undefined,\n          };\n        }),\n        setRegion: assign((context, { region }) => {\n          if (context.creationError === \"region-unavailable\") {\n            return {\n              form: { ...context.form, region },\n              sizes: undefined,\n              creationError: undefined,\n            };\n          }\n          return {\n            form: {\n              ...context.form,\n              region,\n            },\n            sizes: undefined,\n          };\n        }),\n        setSize: assign((context, { size }) => ({\n          form: {\n            ...context.form,\n            size,\n          },\n        })),\n        setSizes: assign((context, event) => {\n          const sizes = event.data;\n          const smallestSize = sizes.sort((a, b) => a.quota - b.quota)[0];\n          return {\n            sizes,\n            form: {\n              ...context.form,\n              size: smallestSize,\n            },\n          };\n        }),\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        resetCreationErrorMessage: assign((_context) => ({\n          creationError: undefined,\n        })),\n        setCreationError: assign((_context, { error }) => {\n          return {\n            creationError: error,\n          };\n        }),\n        triggerSave: sendParent((context) => {\n          const form = context.form as Required<typeof context.form> &\n            Pick<typeof context.form, \"billing\">;\n          const data: CreateKafkaFormData = {\n            plan: \"standard\",\n            name: form.name,\n            provider: form.provider,\n            region: form.region,\n            sizeId: form.size.id,\n            billing: form.billing,\n          };\n          return {\n            type: \"save\",\n            data,\n          };\n        }),\n        triggerSubmit: send(\"submit\"),\n        triggerBillingChange: send(\"billingChange\"),\n        setBillingToPrepaid: assign((context) => {\n          const form = { ...context.form };\n          form.billing = \"prepaid\";\n          return { form };\n        }),\n        setBillingToSubscription: assign((context, event) => {\n          const form = { ...context.form };\n          if (event.type === \"selectSubscription\") {\n            form.billing = event.subscription;\n          } else {\n            // single subscription, take it from the context\n            const ms = context.capabilities.marketplaceSubscriptions[0];\n            form.billing = {\n              marketplace: ms.marketplace,\n              subscription: ms.subscriptions[0],\n            };\n          }\n          return { form };\n        }),\n        unsetSubscription: assign((context) => {\n          const form = { ...context.form };\n          form.billing = undefined;\n          return { form };\n        }),\n      },\n      guards: {\n        isOverQuota: ({ capabilities }) =>\n          capabilities === undefined ||\n          capabilities.instanceAvailability === \"out-of-quota\",\n        isInstanceUnavailable: ({ capabilities }) =>\n          capabilities === undefined ||\n          capabilities.instanceAvailability === \"instance-unavailable\",\n        isRegionsUnavailable: ({ capabilities }) =>\n          capabilities === undefined ||\n          capabilities.instanceAvailability === \"regions-unavailable\",\n        nameIsEmpty: ({ form }) =>\n          form.name === undefined || form.name.length === 0,\n        nameIsValid: ({ form }) =>\n          /^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(form.name || \"\"),\n        providerIsValid: ({ form, capabilities }) => {\n          const selectedProviderInfo = capabilities?.availableProviders.find(\n            (p) => p.id === form.provider\n          );\n          return (\n            // must have loaded a list of providers\n            (capabilities?.availableProviders || []).length > 0 &&\n            // must have selected a provider\n            selectedProviderInfo !== undefined\n          );\n        },\n        regionIsValid: ({ form, capabilities }) => {\n          const selectedProviderInfo = capabilities?.availableProviders.find(\n            (p) => p.id === form.provider\n          );\n          return (\n            // must have selected a region\n            form.region !== undefined &&\n            // the region must be included in the capabilities for the provider\n            selectedProviderInfo?.regions.find((r) => r.id === form.region) !==\n              undefined\n          );\n        },\n        noProviderOrRegion: ({ form }) =>\n          form.provider === undefined || form.region === undefined,\n        noSizes: ({ sizes }) => sizes === undefined,\n        emptySizes: ({ sizes }) => sizes !== undefined && sizes.length === 0,\n        sizeIsDisabled: ({ form, capabilities }) => {\n          if (capabilities === undefined) return true;\n          return form.size?.isDisabled === true;\n        },\n        billingRequiredButNotSelected: ({ form }, _, meta) => {\n          if (meta.state.hasTag(\"noBilling\")) {\n            return false;\n          }\n          return form.billing === undefined;\n        },\n        sizeIsOverQuota: ({ form, capabilities }) => {\n          if (capabilities === undefined || !form.size) return true;\n          const availableQuota =\n            form.billing === \"prepaid\" || form.billing === undefined\n              ? capabilities.remainingPrepaidQuota\n              : capabilities.remainingMarketplaceQuota;\n          if (!availableQuota) return true;\n          return form.size.quota > availableQuota;\n        },\n        didProviderChange: (context, event) =>\n          context.form.provider !== event.provider,\n        didRegionChange: (context, event) =>\n          context.form.region !== event.region,\n        didSizeChange: (context, event) =>\n          context.form.size?.id !== event.size.id,\n        onlyPrepaid: (context) =>\n          context.capabilities.marketplaceSubscriptions.length === 0,\n        singleSubscription: (context) =>\n          context.capabilities.remainingPrepaidQuota === undefined &&\n          context.capabilities.marketplaceSubscriptions.flatMap(\n            (m) => m.subscriptions\n          ).length === 1,\n        onlySubscriptions: (context) =>\n          context.capabilities.remainingPrepaidQuota === undefined &&\n          context.capabilities.marketplaceSubscriptions.length > 0,\n        matchesSelectedProviderOrRHMarketplaceAndHasQuota: (\n          { form, capabilities },\n          { subscription }\n        ) =>\n          capabilities.remainingMarketplaceQuota !== undefined &&\n          capabilities.remainingMarketplaceQuota > 0 &&\n          (subscription.marketplace === \"rhm\" ||\n            form.provider === subscription.marketplace),\n        hasPrepaidQuota: (context) =>\n          context.capabilities.remainingPrepaidQuota !== undefined &&\n          context.capabilities.remainingPrepaidQuota > 0,\n        noSelectedProvider: ({ form }) => form.provider === undefined,\n      },\n    }\n  );\n","import { assign, createMachine, send, sendParent } from \"xstate\";\nimport { CloudProvider, CloudRegion } from \"../../../types\";\nimport {\n  CreateKafkaFormData,\n  CreateKafkaInstanceError,\n  TrialPlanInitializationData,\n  TrialSizes,\n} from \"../types\";\nimport { onProviderChange } from \"./shared\";\n\nexport type TrialPlanMachineContext = {\n  // initial data coming from the APIs\n  capabilities: TrialPlanInitializationData;\n\n  // what the user is selecting\n  form: {\n    name?: string;\n    provider?: CloudProvider;\n    region?: CloudRegion;\n  };\n\n  // based on the form.provider and form.region selection\n  sizes: TrialSizes | undefined;\n\n  creationError: CreateKafkaInstanceError | undefined;\n};\n\nexport const TrialPlanMachine =\n  /** @xstate-layout N4IgpgJg5mDOIC5QBUBOBLAhgGwArcwDsBZTAYwAt1CwA6ANzAwDMBPAQXs3QICMf0AF1YBiRKAAOAe1hD0UwuJAAPRACYAbAA4AnLQ0AGNQBYArBo0BmHQHYNNywBoQrRDoO1bARjWmv54y8DY18AX1DnNCw8AhJyKhpaMgVmdCgAVwxCKFpYQUxBdNgRMlQwArAlaVlBeUUkFUQgtWdXBFNLY1o7LRDTG1NTLVNjG3DIjBx8IlJKajpkwlSMrJzmKVQAWwYcdAgRVLBsCABJQi5sPaqZOQUlVQQvLRs9NR1TI1Mdey0tNS1Wk1nqZaJodIEbEYTAZ7OMQFEprFZgkFik0plqGsNtsLnsSmUKtcanV7kCXqD3p9vjZfv9AQg1AYhrQDF4fH9jJ0aVo4QiYjN4vMkmiVpjaOstrlMPRMfjyoIwABldJkMhweANaq3eqgB5qSxqGwsgwmgzPHRBGxeemMrQeCwfAY6NT6s2mXmTflxOaJRbLDHZcXYqUy7JyioAUVQqA2RO1pIZBqNppN5st1pcTR04O6gX+9hMefdEXhnum3pRwqW6NWQa2B3QR1O512EDjtTuDQe-i+tD+Jpdxm0NhdpnpXlGXTNnIt-RCnOLE2i5eRQr9NbFh2OsFohEwmzouIgFTEmpuHZ1jQQxmG3VHfjUE7Zb3HGlGoK8Vo0-ksli0Vh0D1lyRQVfRFAM1kbbdd33MADmxZVeE2IR2xJLsmgNccbECWgvAsGwBkhBwb0sIDEQFH1UWrUVAy3CAdz3A8REYsAAGEKCIGBUM7XUMJaTNHg0QZQU5Axf0MYxRmwsivVXMDqIg8UoPo2gJBjGUICYHZLmPBVT0kc80N49o3lBQxgnBLkmQBATH20Wghy8WxnS0IJLA0GSV1Aqj-VrOidzUqQNKYeCtkQ5DBG4y9u0w2zLCePs33cxkmW0IdPJAyiq18zdlIC9S9hCwLgtQdjOMqM9iR4q8vFito7JBd4XhpGF-FGDKKMrdcaMgpsdzKKA6m0vYTyihNTEfY0TH-aFzGCccni6G8DGzf9WSE9KSz5Lysu6xT-NoAa6lCzZwpQyr43Qx46qaN4vFoawR1HT8Jv6DqKzXcC-Lyw6wEGhQRGKwrSo47IKoMqror48cTEsByOhItlLD8P93rknyN1on6joBnHCDKsGxqu2r+LaIJ3FoEYRytYYkZCNHvOyzHeug2QAC9D1bUaLovBNnjh2xnn-A1hgmmz6rtLRugMZrhhvJzF1LYDOs+hTvr63J0A52hsCkTAIFlCAFDoah6CkABrOhtsyrqvtyjX2boXX9cxBBTakMgCjqABtAwAF0ieM4x3k8O0jCc2qNDum0Bg0bpKXihxvmsYwGd2u2sYdrWnb1g2wyYGNUFUghBAlbZrZV+Scsz1ns513PXfdz2L19gOeaMq9g8asPHwtZKLRjs0+xRv5DHJzQ09ttX7drjmTrOyL2+qmLSfUC0uhMDRsysbRNH8SfVerlmVMdwGCs0kHysDmqboQSxgnuvD9THq1szCLayxtw-maUrO57xgmXEl5Q2uqvO+Zo9BBCsJCSwI5rA8g-srD6Vcf7+REEbRIeQKi0ArsgjGPVf7bmvt2QI90-BCx0PFWBXcbQPweoMLeidHyfAPignq6Dja5HyAqHBn9K74IgsQ9Q2g9CGBMOYACdgHBYU5KHay2FkbOhdOEEshApCaQ1CgPheCGBMHQGwTg3A+ACGEEI68YC8J6AtBHew35-wWDUKwugghPQAFVYCQDMW8ewuE+hsjZIMXwr4rFsgtLYp4Fgo5ONoC46Iri9xcB4JgXg2BwYgC1LzK6IQbR-j7FoJMYkhIRxpNEvGsB4nSiMck1JZjskCSCB4cEMtOQiNGDLLw0S9q1iwYUHc6RCCwHSEhIQCo2zAITM0ekQ4QTNSfhCbM9NEHkR0V0sUPSii5CGRFUZXj8mUwaayP4eFkb9HpNoOGkIVodBePYMSitcHoyZgQ9Zmj0mGWXogGk9I-weD+EMbMZpWTiVTks2SjNVm0WDKbVsXjg5xxlv+Zyj4CIWMRaCBhgwmQjD+KRUFO0p5HzrDiGF4ziaDD0P2KEQ5nijloStRKMIvjDmGMjTpGcsSSlgNKTEXiTRGleiaCaFprF0qlhNBWLomTHI8nir+bD9rBi5YwMZENLrGRMN8FkNIt4vGRSOWh2F9Ao1qu8Do+SZVLmWY8iFHLNhmJ-CCSlg5hy0vqX+SBtV2TPz-G8Nl08a4qRYrQfpggpAqgoJ40lxl-BqFBLoWBFhYEwn1E4epLwPVYr+K5dN9ztHWvZYQwNsFaBgE2BIUxUarwjilkJAYmh7DIxTVhTQuF+gcjsJQ38YxZX8KeftH6QboU6XtbfJysCWQdGnE1CaMs-WEoOkGo89rDUumZdmfof48Ljn-FLM0Tw7JOQsHO1BA7i1HkJJWh4nRY0WgGHhXQxhpzGGbXHfwNITAdt-LA49BCF2wXtWacc5hY3iPBEK5ovQf39o1kDC+wbCChvDZG1VmTo2Gusj4OcDghh2ByXYPse6wl3u-N2y1YL07+uPvlIKwNhq6TSRkjuV7-zww+P4NkQ4CKpvqi6e6IRmm6EZOu0jSsrXgoLQdWDWkh1XEvU0Do3RhzBzZEYb4ZgbSSRmS8MwbH77KJ7SsiTP0pNFyXXJhAd7KYOA5OSnQdowEukmvx7CgmVpNSg+raCJmAPi3UIC0O2gLK6HYx5meKk8bwcQ5QZDbzIYTK3p4N4nRAgfHzDCccQ5XjYW0AreKPxQsBv6n9Ia56FRmNgVLJy2E-DOiZPFHQMNx0zhHBxoSD6CtUd+v9QgtAZMqti2qmqwd9DWGpCjF0sCxxuuG50Fa35nQ-mkgZ-NlHC1Fe63RsxDgPB4Q+H+ecjIXz1P1EaGctigXDBEw88Tq2Dp4x8+OQVVnzK0yTO5Dra3Nba1Kwx95ID7CiPyXYL4wdDTfBtH3EbFlvxfsZLisj+Lv6-p+o7XrEAanmY4yCMehoTCHqEjaX4lXQeb38NvD7B1UdmZQ0x9QCnfCuXih8QYQQOgQ5HLhC0JohLaHwrmpBK350o7rgXWM5mLC7u-GCTkkltBTfqvYI0yMALzmnVdvNN2hd-xzi7bII6HP2C6GlTk+S-k+Ap8LjmD3bL-O6J6gYwRpn72W5rk9fUzG9HpJQ2NElqsvUCPD0T5GCXMzMSMb5Mth5Dn1N8Wm2holKpi4xj5DJ7OeEKbobT2ExJYXHd8XeIwRG2HVwL7y9rfOPAQeEIAA */\n  createMachine(\n    {\n      context: {\n        capabilities: {} as TrialPlanInitializationData,\n        sizes: undefined,\n        form: {},\n        creationError: undefined,\n      },\n      tsTypes: {} as import(\"./TrialPlanMachine.typegen\").Typegen0,\n      schema: {\n        context: {} as TrialPlanMachineContext,\n        events: {} as\n          | { type: \"fieldInvalid\" }\n          | { type: \"nameChange\"; name: string }\n          | { type: \"providerChange\"; provider: CloudProvider }\n          | { type: \"regionChange\"; region: CloudRegion }\n          | { type: \"nameIsValid\" }\n          | { type: \"nameIsInvalid\" }\n          | { type: \"nameIsTaken\" }\n          | { type: \"submit\" }\n          | { type: \"create\" }\n          | { type: \"createSuccess\" }\n          | { type: \"createError\"; error: CreateKafkaInstanceError },\n        services: {} as {\n          getSizes: {\n            data: TrialSizes;\n          };\n        },\n      },\n      initial: \"verifyAvailability\",\n      id: \"TrialPlanMachine\",\n      states: {\n        verifyAvailability: {\n          entry: \"setInitialContext\",\n          always: [\n            {\n              cond: \"isTrialUsed\",\n              target: \"trialUsed\",\n            },\n            {\n              cond: \"isTrialUnavailable\",\n              target: \"trialUnavailable\",\n            },\n            {\n              target: \"configuring\",\n            },\n          ],\n        },\n        trialUsed: {\n          tags: \"blocked\",\n        },\n        trialUnavailable: {\n          tags: \"blocked\",\n        },\n        regionsUnavailable: {\n          tags: \"blocked\",\n        },\n        configuring: {\n          type: \"parallel\",\n          states: {\n            status: {\n              initial: \"unsubmitted\",\n              states: {\n                unsubmitted: {\n                  tags: \"unsubmitted\",\n                },\n                submitted: {\n                  entry: \"triggerSubmit\",\n                  tags: \"submitted\",\n                },\n              },\n              on: {\n                create: {\n                  description:\n                    \"Save is enabled all the time, if it's clicked before the form is completely filled out we should show the validation for all errored fields\",\n                  target: \".submitted\",\n                },\n              },\n            },\n            form: {\n              initial: \"invalid\",\n              states: {\n                invalid: {\n                  tags: \"formInvalid\",\n                },\n                valid: {\n                  entry: \"resetCreationErrorMessage\",\n                  on: {\n                    fieldInvalid: {\n                      target: \"invalid\",\n                    },\n                    submit: {\n                      target: \"saving\",\n                    },\n                  },\n                },\n                saving: {\n                  entry: [\"resetCreationErrorMessage\", \"triggerSave\"],\n                  tags: \"formSaving\",\n                  on: {\n                    createSuccess: {\n                      target: \"saved\",\n                    },\n                    createError: {\n                      actions: \"setCreationError\",\n                      target: \"invalid\",\n                    },\n                  },\n                },\n                saved: {\n                  type: \"final\",\n                },\n              },\n              on: {\n                fieldInvalid: {\n                  description:\n                    \"sent by the fields when their value change to an invalid value. This will transition the form to the invalid state, to then eventually transition to the valid state if the field state is marked as done (which means that all fields have a valid value selected)\",\n                  target: \".invalid\",\n                },\n              },\n            },\n            fields: {\n              tags: \"configurable\",\n              type: \"parallel\",\n              states: {\n                name: {\n                  initial: \"validate\",\n                  states: {\n                    empty: {\n                      tags: \"nameEmpty\",\n                    },\n                    invalid: {\n                      entry: \"fieldInvalid\",\n                      tags: \"nameInvalid\",\n                    },\n                    valid: {\n                      tags: \"nameValid\",\n                      type: \"final\",\n                    },\n                    validate: {\n                      always: [\n                        {\n                          cond: \"nameIsEmpty\",\n                          target: \"empty\",\n                        },\n                        {\n                          cond: \"nameIsValid\",\n                          target: \"valid\",\n                        },\n                        {\n                          target: \"invalid\",\n                        },\n                      ],\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    nameChange: {\n                      actions: \"setName\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n                provider: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"providerIsValid\",\n                          target: \"valid\",\n                        },\n                        {\n                          target: \"invalid\",\n                        },\n                      ],\n                    },\n                    invalid: {\n                      entry: \"fieldInvalid\",\n                      tags: \"providerInvalid\",\n                    },\n                    valid: {\n                      tags: \"providerValid\",\n                      type: \"final\",\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    providerChange: {\n                      actions: \"setProvider\",\n                      cond: \"didProviderChange\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n                region: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"regionIsValid\",\n                          target: \"valid\",\n                        },\n                        {\n                          target: \"invalid\",\n                        },\n                      ],\n                    },\n                    invalid: {\n                      entry: \"fieldInvalid\",\n                      tags: \"regionInvalid\",\n                    },\n                    valid: {\n                      tags: \"regionValid\",\n                      type: \"final\",\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    providerChange: {\n                      target: \".validate\",\n                    },\n                    regionChange: {\n                      actions: \"setRegion\",\n                      cond: \"didRegionChange\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n                size: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"noProviderAndRegion\",\n                          target: \"idle\",\n                        },\n                        {\n                          cond: \"noSizes\",\n                          target: \"loading\",\n                        },\n                        {\n                          cond: \"emptySizes\",\n                          target: \"error\",\n                        },\n                        {\n                          target: \"valid\",\n                        },\n                      ],\n                    },\n                    idle: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeIdle\",\n                    },\n                    valid: {\n                      tags: \"sizeValid\",\n                      type: \"final\",\n                    },\n                    error: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeError\",\n                    },\n                    loading: {\n                      description:\n                        \"Fetch the data required to show the available sizes and limits\",\n                      invoke: {\n                        src: \"getSizes\",\n                        onDone: [\n                          {\n                            actions: \"setSizes\",\n                            target: \"validate\",\n                          },\n                        ],\n                        onError: [\n                          {\n                            target: \"error\",\n                          },\n                        ],\n                      },\n                      tags: \"sizeLoading\",\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    providerChange: {\n                      target: \".validate\",\n                    },\n                    regionChange: {\n                      target: \".validate\",\n                    },\n                  },\n                },\n              },\n              onDone: {\n                target: \"#TrialPlanMachine.configuring.form.valid\",\n              },\n            },\n          },\n          onDone: {\n            target: \"saved\",\n          },\n        },\n        saved: {\n          type: \"final\",\n        },\n      },\n    },\n    {\n      actions: {\n        setInitialContext: assign((context) => {\n          return {\n            form: {\n              ...(context.capabilities.defaultProvider\n                ? onProviderChange(\n                    context.capabilities.availableProviders,\n                    context.capabilities.defaultProvider\n                  )\n                : {}),\n            },\n          };\n        }),\n        fieldInvalid: send(\"fieldInvalid\"),\n        setName: assign((context, { name }) => {\n          if (context.creationError === \"name-taken\") {\n            return {\n              form: { ...context.form, name },\n              creationError: undefined,\n            };\n          }\n          return { form: { ...context.form, name } };\n        }),\n        setProvider: assign((context, { provider }) => {\n          return {\n            form: {\n              ...context.form,\n              ...onProviderChange(\n                context.capabilities.availableProviders,\n                provider\n              ),\n            },\n            sizes: undefined,\n          };\n        }),\n        setRegion: assign((context, { region }) => {\n          if (context.creationError === \"region-unavailable\") {\n            return {\n              form: { ...context.form, region },\n              sizes: undefined,\n              creationError: undefined,\n            };\n          }\n          return {\n            form: {\n              ...context.form,\n              region,\n            },\n            sizes: undefined,\n          };\n        }),\n        setSizes: assign((_context, event) => {\n          const sizes = event.data;\n          return {\n            sizes,\n          };\n        }),\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        resetCreationErrorMessage: assign((_context) => ({\n          creationError: undefined,\n        })),\n        setCreationError: assign((_context, { error }) => ({\n          creationError: error,\n        })),\n        triggerSave: sendParent((context) => {\n          const form = context.form as Required<typeof context.form>;\n          const data: CreateKafkaFormData = {\n            plan: \"developer\",\n            name: form.name,\n            provider: form.provider,\n            region: form.region,\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            sizeId: context.sizes!.trial.id,\n            billing: undefined,\n          };\n          return {\n            type: \"save\",\n            data,\n          };\n        }),\n        triggerSubmit: send(\"submit\"),\n      },\n      guards: {\n        isTrialUsed: ({ capabilities }) =>\n          capabilities === undefined ||\n          capabilities.instanceAvailability === \"used\",\n        isTrialUnavailable: ({ capabilities }) =>\n          capabilities === undefined ||\n          capabilities.instanceAvailability === \"unavailable\",\n        nameIsEmpty: ({ form }) =>\n          form.name === undefined || form.name.length === 0,\n        nameIsValid: ({ form }) =>\n          /^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(form.name || \"\"),\n        providerIsValid: ({ form, capabilities }) => {\n          const selectedProviderInfo = capabilities?.availableProviders.find(\n            (p) => p.id === form.provider\n          );\n          return (\n            // must have loaded a list of providers\n            (capabilities?.availableProviders || []).length > 0 &&\n            // must have selected a provider\n            selectedProviderInfo !== undefined\n          );\n        },\n        regionIsValid: ({ form, capabilities }) => {\n          const selectedProviderInfo = capabilities?.availableProviders.find(\n            (p) => p.id === form.provider\n          );\n          return (\n            // must have selected a region\n            form.region !== undefined &&\n            // the region must be included in the capabilities for the provider\n            selectedProviderInfo?.regions.find((r) => r.id === form.region) !==\n              undefined\n          );\n        },\n        noProviderAndRegion: ({ form }) =>\n          form.provider === undefined || form.region === undefined,\n        noSizes: ({ sizes }) => sizes === undefined,\n        emptySizes: ({ sizes }) =>\n          sizes !== undefined && sizes.standard.length === 0,\n        didProviderChange: (context, event) =>\n          context.form.provider !== event.provider,\n        didRegionChange: (context, event) =>\n          context.form.region !== event.region,\n      },\n    }\n  );\n","import { assign, createMachine, EventFrom, forwardTo, send } from \"xstate\";\nimport { CloudProvider, CloudRegion } from \"../../../types\";\nimport type {\n  CloudProviders,\n  CreateKafkaFormData,\n  CreateKafkaInitializationData,\n  CreateKafkaInstanceError,\n  StandardPlanInitializationData,\n  StandardSizes,\n  TrialPlanInitializationData,\n  TrialSizes,\n} from \"../types\";\nimport {\n  StandardPlanMachine,\n  StandardPlanMachineContext,\n} from \"./StandardPlanMachine\";\nimport { TrialPlanMachine, TrialPlanMachineContext } from \"./TrialPlanMachine\";\n\ntype Quota =\n  | Pick<\n      StandardPlanInitializationData,\n      | \"plan\"\n      | \"remainingPrepaidQuota\"\n      | \"marketplaceSubscriptions\"\n      | \"remainingMarketplaceQuota\"\n      | \"instanceAvailability\"\n    >\n  | Pick<TrialPlanInitializationData, \"plan\" | \"instanceAvailability\">;\n\nexport type CreateKafkaInstanceMachineContext = {\n  quota: Quota | undefined;\n  providers: CloudProviders | undefined;\n  defaultProvider: CloudProvider | undefined;\n  capabilities: CreateKafkaInitializationData | undefined;\n};\n\nconst CreateKafkaInstanceMachine =\n  /** @xstate-layout N4IgpgJg5mDOIC5QGMBOYCGAXMBpDAZgNYYCSAdrFhucmAHQA2A9hhAJblT0COArs2r1kACzDIinKAAIqNCBlQRp-QRgDEYVKmap6AB0bYCugLbD02PIRIU5tBizZTeAoaPGSus6uQVKVNwwETgA3ZmRsdmZyAG0ABgBdRFB9Zlh2LGjyFJAAD0QAFniAJnp4gGYAdkKATgAOeqr4qvrCgFYAGhAAT0QANir++n769tqq2sKARhKKjsKAX0XutEwcfGIySl86JlYOLlc1YTEJKR95RWVVanV7fxug6QxQjHYjACNGMFy0jKyMVyBQQxTKlRqDSaLTaXV6iHG8XoVXahX6UyqJVqJX6-WWq0sGxs23seych24twwp08Fwe10CanUzD4WGkzAIlz8DKpf3SmWywKKpXK1TqjWarQ63T6CHa8UK9Hqcw6JUK6palXxIDWVk2th2NDJBxcVJp5289ICVPU5GYXMejOoLzeHww31+SBA-wFQK9ILBoshEph0vhoPaw2hFRKasKbQa0yWKx1hOsWzsu0cJqOZqtEHUfIBgv9iCTU2RkZj03RYsjMoGyvo0yG40KJSq0wq02m9W1uqJGcNDn2zlzQXoEDAoTALH0WkLXp9gJypYQ5cVKP61drNXr4faFSRJVmdUmasjvf7af1JKzo4px3cZy8MinM7nWhd7y+H0yPU0bRdAMIwsBMVBzAHdMDVJbMx0pCcPAtN9p1nZh51Qb83U+P8sB6EJyHCSIVwSZIl35FchQQWpanaeh4y7JN5gqbFZgbOU1WRE96m3Bp+lRKoKmvdZoLvI04MfM0kNfaR3zQjCsN-Rh-3UOTP0wvhYEgItfVXUAQRouiGO7QpmNYkp2NMqolXqWZcSPCpRn6NFhL1YlM3Eh9TUQl8LjU9Cv1eH93VwgD-IUoLsJ+HTKLXQz6NskyzJPCzwwqdppnoWj4niaZ2kPepaiTaZXMHGD73JFwCDALBRAufQdFCdgp1QWB1Aa5gmpa2AXj8aR0CgbIesir5ovI4s-X0staNqegjzGcZ+hKHjeyqdj2jGcplu4moFSqKpStEjyR0qo5qtqkR6sa5qtDarQdD0QxjDMCwRNvY7jXg+hzrq7wOq626CKIqIYlImKSym9cMRsiY0RmaYFXiOFZUKfa5rqRy5mmWp4kGdpDve4dPsfH7Lr+67uvainbvZTCBqG6Q+HIEb3TG1IKIh-Jpsjeh2k7XHOw7QqWnY0Z6mbapakGNVqgR-GUygwnYK8rhVJiBg5BwV63KHZXTqgcHJq5hASlROj+lKCp6kqdUVvYq3Mr3ds0UaPLZgJ9yiY13xHSe8h6Gan57leT12YmvTjaxbd6NM+NDIVdLCkskUFmxyZt2cwYPd1+982kP36FgV4pHUKCAGU+GQOhYHgcbdKoxOjKR0p6nmYXlvt1Fyn6Lt1W7E9Jkc7Pys8vOC6LprVaggBRIDUENiOQSjioY7b+PTNRe2a152NbLy03M7y4exJHcKvwLwOwGDmcF6orFWl5i2Nt7toEYqUWpayrt5SW+z4ls4+H0GBn0wuPYuU80wVyrnAWuYd65rkbvRBUtQ6x9zaKLeMO8WhDB7PEKEtRAFe0nKhdS+cjD+wniXGec9b5rnvuLSMSNErxhmJUUWCMsrKmWngsEuJ5YpjtFOWBqY3qez1jmBCJxpJ0h9jyIItDIYI1SrKSM4tW6dmVB0TsaISoKxvGIiqEinzUnzAo42zRxYojmD3FEtk+bTFFkMZskYcS9mfiwwh4ivpmhAWYkEswGg2RwSxJosxSjrU4tjAePcEY8SKp4wx3ifK0m8CAxSIVlJ4T8QMfic1lrFVaMqeYDjwztjojxHhsYOxW1ssmAkoic6eX1sY7JCBWjsQ7LNKWjRKiLRxmieW9SdYjxOkY0mV1Oo3Vaq0msCoY7FCGOlWMsxkYIkxMiHh7RYyMPjEJPRDSRnExcJYCAso4GxUhrGQY5QMpjCSpedaExkRND5jorEFQ9lDLKifI5XBWmb3DC2TKlRGLVCxBeDoCTR49CoGAUwjNmaulGqHb0HMjYgkciiLK+UUFWRxt2VZbT1mt1GK0Fo-EOx4n2cMn53srgBAvhANmqLw53yaIqfi4xsQdnyu2d+aVqjONbmna2OJuxQpHGPchhdwEGzrhc42MZBXYwmD3CE-F+j21jCMZy8Ytxdlom0CVewpU0FacteUIwcXcpRKiOY7FsYrzBdbeMhUWJt2NcAkhAVQHSsvuaxos19rzUxelFsyiBjdhGC2UYLY4k9l0V8o6RC0lgMnnK85nMMVVPKJo2GbiirsOsrMd1uU1SWzqSImlQDiEfh9WQs18qs2IGWrk4N-9Q0ZUxJZJoSolWVBylYwqnrhDMFMIYGqKLlzNoQNUf+SomFoP2p2Ht1lcZ5Roj2IW4rqXfKAa0o87EaI3JyhtQS2Ntyo2WMsIAA */\n  createMachine(\n    {\n      context: {\n        providers: undefined,\n        defaultProvider: undefined,\n        quota: undefined,\n        capabilities: undefined,\n      },\n      tsTypes: {} as import(\"./CreateKafkaInstanceMachine.typegen\").Typegen0,\n      schema: {\n        context: {} as CreateKafkaInstanceMachineContext,\n        events: {} as\n          | {\n              type: \"standard quota available\";\n              quota: Pick<\n                StandardPlanInitializationData,\n                | \"remainingPrepaidQuota\"\n                | \"remainingMarketplaceQuota\"\n                | \"marketplaceSubscriptions\"\n              >;\n            }\n          | {\n              type: \"out of standard quota\";\n              quota: Pick<\n                StandardPlanInitializationData,\n                \"marketplaceSubscriptions\"\n              >;\n            }\n          | {\n              type: \"no standard quota available\";\n              hasTrialQuota: boolean;\n            }\n          | {\n              type: \"trial available\";\n              capabilities: TrialPlanInitializationData;\n            }\n          | { type: \"trial used\" }\n          | { type: \"developer available\" }\n          | { type: \"developer used\" }\n          | { type: \"developer unavailable\" }\n          | {\n              type: \"providers and regions available\";\n              providers: CloudProviders;\n              defaultProvider: CloudProvider | undefined;\n            }\n          | { type: \"providers or regions unavailable\" }\n          | { type: \"save\"; data: CreateKafkaFormData }\n          | { type: \"createSuccess\" }\n          | { type: \"createError\"; error: CreateKafkaInstanceError },\n        services: {} as {\n          checkStandardQuota: {\n            data: never;\n          };\n          checkDeveloperAvailability: {\n            data: never;\n          };\n          fetchProvidersWithRegions: {\n            data: never;\n          };\n          standardPlan: {\n            data: StandardPlanMachineContext;\n          };\n          trialPlan: {\n            data: TrialPlanMachineContext;\n          };\n        },\n      },\n      id: \"createKafkaInstance\",\n      initial: \"loading\",\n      states: {\n        loading: {\n          description: \"Fetch the data required to drive the creation flow\",\n          tags: \"loading\",\n          initial: \"quota\",\n          states: {\n            quota: {\n              initial: \"checking standard quota\",\n              states: {\n                \"checking standard quota\": {\n                  invoke: {\n                    src: \"checkStandardQuota\",\n                    onError: [\n                      {\n                        actions: \"setStandardUnavailable\",\n                        target: \"standard\",\n                      },\n                    ],\n                  },\n                  on: {\n                    \"standard quota available\": {\n                      actions: \"setStandardAvailable\",\n                      target: \"standard\",\n                    },\n                    \"out of standard quota\": {\n                      actions: \"setStandardOutOfQuota\",\n                      target: \"standard\",\n                    },\n                    \"no standard quota available\": {\n                      target: \"checking developer availability\",\n                    },\n                  },\n                },\n                standard: {\n                  type: \"final\",\n                  always: {\n                    target: \"#createKafkaInstance.loading.fetching providers\",\n                  },\n                },\n                developer: {\n                  type: \"final\",\n                  always: {\n                    target: \"#createKafkaInstance.loading.fetching providers\",\n                  },\n                },\n                \"checking developer availability\": {\n                  invoke: {\n                    src: \"checkDeveloperAvailability\",\n                    onError: [\n                      {\n                        actions: \"setDeveloperUnavailable\",\n                        target: \"developer\",\n                      },\n                    ],\n                  },\n                  on: {\n                    \"developer used\": {\n                      actions: \"setDeveloperUsed\",\n                      target: \"developer\",\n                    },\n                    \"developer available\": {\n                      actions: \"setDeveloperAvailable\",\n                      target: \"developer\",\n                    },\n                    \"developer unavailable\": {\n                      actions: \"setDeveloperUnavailable\",\n                      target: \"developer\",\n                    },\n                  },\n                },\n              },\n            },\n            \"fetching providers\": {\n              invoke: {\n                src: \"fetchProvidersWithRegions\",\n                onError: [\n                  {\n                    actions: \"setProvidersOrRegionsUnavailable\",\n                    target: \"ready\",\n                  },\n                ],\n              },\n              on: {\n                \"providers and regions available\": {\n                  actions: \"setProviders\",\n                  target: \"ready\",\n                },\n                \"providers or regions unavailable\": {\n                  actions: \"setProvidersOrRegionsUnavailable\",\n                  target: \"ready\",\n                },\n              },\n            },\n            ready: {\n              type: \"final\",\n              entry: \"setCapabilities\",\n            },\n          },\n          onDone: [\n            {\n              cond: \"standard plan\",\n              target: \"standard plan\",\n            },\n            {\n              cond: \"developer plan\",\n              target: \"developer plan\",\n            },\n            {\n              target: \"system unavailable\",\n            },\n          ],\n        },\n        \"system unavailable\": {\n          tags: \"systemUnavailable\",\n          type: \"final\",\n        },\n        \"standard plan\": {\n          invoke: {\n            src: \"standardPlan\",\n            id: \"standardPlanService\",\n          },\n          tags: \"standardPlan\",\n          initial: \"idle\",\n          states: {\n            idle: {\n              on: {\n                save: {\n                  target: \"saving\",\n                },\n              },\n            },\n            saving: {\n              invoke: {\n                src: \"createInstance\",\n              },\n              tags: \"saving\",\n              on: {\n                createSuccess: {\n                  target: \"#createKafkaInstance.complete\",\n                },\n                createError: {\n                  actions: \"notifyCreateErrorToStandardPlan\",\n                  target: \"idle\",\n                },\n              },\n            },\n          },\n        },\n        \"developer plan\": {\n          invoke: {\n            src: \"trialPlan\",\n            id: \"trialPlanService\",\n          },\n          tags: \"trialPlan\",\n          initial: \"idle\",\n          states: {\n            idle: {\n              on: {\n                save: {\n                  target: \"saving\",\n                },\n              },\n            },\n            saving: {\n              invoke: {\n                src: \"createInstance\",\n              },\n              tags: \"saving\",\n              on: {\n                createSuccess: {\n                  target: \"#createKafkaInstance.complete\",\n                },\n                createError: {\n                  actions: \"notifyCreateErrorToTrialPlan\",\n                  target: \"idle\",\n                },\n              },\n            },\n          },\n        },\n        complete: {\n          type: \"final\",\n        },\n      },\n    },\n    {\n      actions: {\n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        setDeveloperAvailable: assign((_) => ({\n          quota: {\n            plan: \"developer\" as const,\n            instanceAvailability: \"available\" as const,\n          },\n        })),\n        setDeveloperUnavailable: assign((_) => ({\n          quota: {\n            plan: \"developer\" as const,\n            instanceAvailability: \"unavailable\" as const,\n          },\n        })),\n        setDeveloperUsed: assign((_) => ({\n          quota: {\n            plan: \"developer\" as const,\n            instanceAvailability: \"used\" as const,\n          },\n        })),\n        setStandardAvailable: assign((_, event) => ({\n          quota: {\n            plan: \"standard\" as const,\n            instanceAvailability: \"available\" as const,\n            remainingPrepaidQuota: event.quota.remainingPrepaidQuota,\n            marketplaceSubscriptions: event.quota.marketplaceSubscriptions,\n            remainingMarketplaceQuota: event.quota.remainingMarketplaceQuota,\n          },\n        })),\n        setStandardOutOfQuota: assign((_, event) => ({\n          quota: {\n            plan: \"standard\" as const,\n            instanceAvailability: \"out-of-quota\" as const,\n            marketplaceSubscriptions: event.quota.marketplaceSubscriptions,\n            remainingMarketplaceQuota: 0,\n            remainingPrepaidQuota: 0,\n          },\n        })),\n        setStandardUnavailable: assign((_) => ({\n          quota: {\n            plan: \"standard\" as const,\n            instanceAvailability: \"instance-unavailable\" as const,\n            marketplaceSubscriptions: [],\n            remainingMarketplaceQuota: 0,\n            remainingPrepaidQuota: 0,\n          },\n        })),\n        setProviders: assign((_, event) => {\n          return {\n            providers: event.providers,\n            defaultProvider: event.defaultProvider,\n          };\n        }),\n        setProvidersOrRegionsUnavailable: assign((context) => {\n          const quota = context.quota!;\n          if (quota.plan === \"standard\") {\n            quota.instanceAvailability = \"regions-unavailable\";\n          } else {\n            quota.instanceAvailability = \"unavailable\";\n          }\n          return {\n            providers: [],\n            quota,\n          };\n        }),\n        setCapabilities: assign((context) => {\n          const { providers, defaultProvider, quota } = context;\n          if (!providers || !quota) {\n            throw new Error(\"unexpected condition, no providers or quota\");\n          }\n          if (quota.plan === \"standard\") {\n            const capabilities: StandardPlanInitializationData = {\n              plan: \"standard\",\n              availableProviders: providers,\n              defaultProvider,\n              instanceAvailability: quota.instanceAvailability,\n              marketplaceSubscriptions: quota.marketplaceSubscriptions,\n              remainingMarketplaceQuota: quota.remainingMarketplaceQuota,\n              remainingPrepaidQuota: quota.remainingPrepaidQuota,\n            };\n            return { capabilities };\n          } else {\n            const capabilities: TrialPlanInitializationData = {\n              plan: \"developer\",\n              availableProviders: providers,\n              defaultProvider,\n              instanceAvailability: quota.instanceAvailability,\n            };\n            return { capabilities };\n          }\n        }),\n        notifyCreateErrorToStandardPlan: forwardTo(\"standardPlanService\"),\n        notifyCreateErrorToTrialPlan: send(\n          (_, event) => {\n            return { type: \"createError\", error: event.error };\n          },\n          { to: \"trialPlanService\" }\n        ),\n        /* eslint-enable @typescript-eslint/no-unused-vars */\n      },\n      guards: {\n        \"standard plan\": (context) => context.quota?.plan === \"standard\",\n        \"developer plan\": (context) => context.quota?.plan === \"developer\",\n      },\n    }\n  );\n\ntype EventTypes = Pick<\n  EventFrom<typeof CreateKafkaInstanceMachine>,\n  \"type\"\n>[\"type\"];\n\ntype EventOptions<E extends EventTypes> = Omit<\n  EventFrom<typeof CreateKafkaInstanceMachine, E>,\n  \"type\"\n>;\n\nexport type CreateKafkaInstanceServices = {\n  checkStandardQuota: (events: {\n    onOutOfQuota: (p: EventOptions<\"out of standard quota\">) => void;\n    onQuotaAvailable: (p: EventOptions<\"standard quota available\">) => void;\n    onNoQuotaAvailable: (\n      p: EventOptions<\"no standard quota available\">\n    ) => void;\n  }) => void;\n  checkDeveloperAvailability: (events: {\n    onUsed: () => void;\n    onAvailable: () => void;\n    onUnavailable: () => void;\n  }) => void;\n  fetchProvidersWithRegions: (\n    plan: \"standard\" | \"developer\",\n    events: {\n      onAvailable: (p: EventOptions<\"providers and regions available\">) => void;\n      onUnavailable: () => void;\n    }\n  ) => void;\n  getStandardSizes: (\n    provider: CloudProvider,\n    region: CloudRegion\n  ) => Promise<StandardSizes>;\n  getTrialSizes: (\n    provider: CloudProvider,\n    region: CloudRegion\n  ) => Promise<TrialSizes>;\n  onCreate: (\n    data: CreateKafkaFormData,\n    onSuccess: () => void,\n    onError: (error: CreateKafkaInstanceError) => void\n  ) => void;\n};\n\nexport function makeCreateKafkaInstanceMachine({\n  checkStandardQuota: checkStandardQuotaCb,\n  checkDeveloperAvailability: checkDeveloperAvailabilityCb,\n  fetchProvidersWithRegions: fetchProvidersWithRegionsCb,\n  getStandardSizes: getStandardSizesCb,\n  getTrialSizes: getTrialSizesCb,\n  onCreate,\n}: CreateKafkaInstanceServices) {\n  return CreateKafkaInstanceMachine.withConfig({\n    services: {\n      checkStandardQuota: () => {\n        return (send) =>\n          checkStandardQuotaCb({\n            onNoQuotaAvailable: ({ hasTrialQuota }) => {\n              send({ type: \"no standard quota available\", hasTrialQuota });\n            },\n            onOutOfQuota: ({ quota }) => {\n              send({ type: \"out of standard quota\", quota });\n            },\n            onQuotaAvailable: ({ quota }) => {\n              send({ type: \"standard quota available\", quota });\n            },\n          });\n      },\n      checkDeveloperAvailability: () => {\n        return (send) => {\n          checkDeveloperAvailabilityCb({\n            onAvailable: () => send(\"developer available\"),\n            onUsed: () => send(\"developer used\"),\n            onUnavailable: () => send(\"developer unavailable\"),\n          });\n        };\n      },\n      fetchProvidersWithRegions: (context) => {\n        const instanceType = context.quota!.plan;\n        return (send) => {\n          fetchProvidersWithRegionsCb(instanceType, {\n            onAvailable: ({ providers, defaultProvider }) =>\n              send({\n                type: \"providers and regions available\",\n                providers,\n                defaultProvider,\n              }),\n            onUnavailable: () => send(\"providers or regions unavailable\"),\n          });\n        };\n      },\n      createInstance: (_context, event) => {\n        const form = event.data;\n\n        return (send) => {\n          function onSuccess() {\n            send(\"createSuccess\");\n          }\n\n          function onError(error: CreateKafkaInstanceError) {\n            send({ type: \"createError\", error });\n          }\n\n          onCreate(\n            {\n              plan: form.plan,\n              name: form.name,\n              provider: form.provider,\n              region: form.region,\n              sizeId: form.sizeId,\n              billing: form.billing,\n            },\n            onSuccess,\n            onError\n          );\n        };\n      },\n      standardPlan: (context) => {\n        return StandardPlanMachine.withContext({\n          capabilities: context.capabilities as StandardPlanInitializationData,\n          sizes: undefined,\n          form: {},\n          creationError: undefined,\n        }).withConfig({\n          services: {\n            getSizes: (context) => {\n              const form = context.form as Required<typeof context.form>;\n              return getStandardSizesCb(form.provider, form.region);\n            },\n          },\n        });\n      },\n      trialPlan: (context) => {\n        return TrialPlanMachine.withContext({\n          capabilities: context.capabilities as TrialPlanInitializationData,\n          sizes: undefined,\n          form: {},\n          creationError: undefined,\n        }).withConfig({\n          services: {\n            getSizes: (context) => {\n              const form = context.form as Required<typeof context.form>;\n              return getTrialSizesCb(form.provider, form.region);\n            },\n          },\n        });\n      },\n    },\n  });\n}\n","import { useInterpret } from \"@xstate/react\";\nimport type { FunctionComponent } from \"react\";\nimport { createContext } from \"react\";\nimport type { ActorRefFrom } from \"xstate\";\nimport type { CreateKafkaInstanceServices } from \"./CreateKafkaInstanceMachine\";\nimport { makeCreateKafkaInstanceMachine } from \"./CreateKafkaInstanceMachine\";\n\nexport const CreateKafkaInstanceContext = createContext<{\n  service: ActorRefFrom<ReturnType<typeof makeCreateKafkaInstanceMachine>>;\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n}>(null!);\n\nexport const CreateKafkaInstanceProvider: FunctionComponent<\n  CreateKafkaInstanceServices\n> = ({\n  onCreate,\n  checkStandardQuota,\n  checkDeveloperAvailability,\n  fetchProvidersWithRegions,\n  getStandardSizes,\n  getTrialSizes,\n  children,\n}) => {\n  const service = useInterpret(\n    () =>\n      makeCreateKafkaInstanceMachine({\n        checkStandardQuota,\n        checkDeveloperAvailability,\n        fetchProvidersWithRegions,\n        getStandardSizes,\n        getTrialSizes,\n        onCreate,\n      }),\n    { devTools: true }\n  );\n  return (\n    <CreateKafkaInstanceContext.Provider value={{ service }}>\n      {children}\n    </CreateKafkaInstanceContext.Provider>\n  );\n};\n","export const LogoAWS = new URL(\"./Logo-AWS.svg\", import.meta.url)\n  .href;\nexport const LogoAzure = new URL(\n  \"./Logo-Azure.svg\",\n  import.meta.url\n).href;\nexport const LogoGCP = new URL(\"./Logo-GCP.svg\", import.meta.url)\n  .href;\nexport const LogoRedhat = new URL(\n  \"./Logo-Redhat.svg\",\n  import.meta.url\n).href;","import type { FunctionComponent } from \"react\";\nimport { LogoAWS } from \"./images\";\n\nexport const AWSLogo: FunctionComponent = () => {\n  return (\n    <>\n      <img src={LogoAWS} alt={\"\"} style={{ height: \"60px\" }} />\n    </>\n  );\n};\n","import type { FunctionComponent } from \"react\";\nimport { LogoAzure } from \"./images\";\n\nexport const AzureLogo: FunctionComponent = () => {\n  return (\n    <>\n      <img src={LogoAzure} alt={\"\"} style={{ height: \"60px\" }} />\n    </>\n  );\n};\n","import type { FunctionComponent } from \"react\";\nimport { LogoGCP } from \"./images\";\n\nexport const GCPLogo: FunctionComponent = () => {\n  return (\n    <>\n      <img src={LogoGCP} alt={\"\"} style={{ height: \"60px\" }} />\n    </>\n  );\n};\n","import type { SelectProps } from \"@patternfly/react-core\";\nimport {\n  Flex,\n  FlexItem,\n  FormSelect,\n  FormSelectOption,\n  Gallery,\n  GalleryItem,\n  HelperText,\n  HelperTextItem,\n  Tile,\n} from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { AWSLogo, AzureLogo, GCPLogo, RedhatLogo } from \"../../Logos\";\nimport type { MarketPlace } from \"../../../types\";\n\nexport type BillingTilesProps = {\n  value: \"prepaid\" | string | undefined;\n  hasPrepaid: boolean;\n  subscriptions: {\n    marketplace: MarketPlace;\n    subscription: string;\n    isDisabled: boolean;\n  }[];\n  isPrepaidOverQuota: boolean;\n  prepaidQuota: number;\n  isMarketplaceOverQuota: boolean;\n  marketplaceQuota: number;\n  onPrepaid: () => void;\n  onSubscription: (marketplace: MarketPlace, subscription: string) => void;\n  validated?: SelectProps[\"validated\"];\n};\nexport const BillingTiles: VoidFunctionComponent<BillingTilesProps> = ({\n  value,\n  hasPrepaid,\n  subscriptions,\n  isPrepaidOverQuota,\n  prepaidQuota,\n  isMarketplaceOverQuota,\n  marketplaceQuota,\n  onPrepaid,\n  onSubscription,\n  validated,\n}) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n  const marketplaces: { [key in MarketPlace]: string } = {\n    aws: t(\"billing.marketplace_aws\"),\n    azure: t(\"billing.marketplace_azure\"),\n    gcp: t(\"billing.marketplace_gcp\"),\n    rhm: t(\"billing.marketplace_rh\"),\n  };\n  return (\n    <>\n      <Flex\n        role=\"listbox\"\n        aria-label={t(\"select_billing\")}\n        direction={{ default: \"column\", md: \"row\" }}\n      >\n        {hasPrepaid && (\n          <Flex\n            flex={{ default: \"flex_1\" }}\n            direction={{ default: \"column\" }}\n            spaceItems={{ default: \"spaceItemsSm\" }}\n          >\n            <span className=\"pf-c-form__label\">\n              <span className=\"pf-c-form__label-text\">\n                {t(\"billing.prepaid\")}\n              </span>\n            </span>\n            <FlexItem flex={{ default: \"flex_1\" }}>\n              <Tile\n                className={\"pf-u-w-100\"}\n                title={t(\"billing.prepaid_option\")}\n                icon={tiles[\"rhm\"]}\n                isDisabled={isPrepaidOverQuota}\n                isStacked={true}\n                isSelected={value === \"prepaid\"}\n                onClick={onPrepaid}\n              >\n                &nbsp;\n              </Tile>\n            </FlexItem>\n            {isPrepaidOverQuota && prepaidQuota > 0 && (\n              <HelperText className={\"pf-c-form__helper-text\"}>\n                <HelperTextItem variant={\"error\"}>\n                  {t(\"billing.prepaid_out_of_quota\")}\n                </HelperTextItem>\n              </HelperText>\n            )}\n            {isPrepaidOverQuota && prepaidQuota === 0 && (\n              <HelperText className={\"pf-c-form__helper-text\"}>\n                <HelperTextItem variant={\"error\"}>\n                  {t(\"billing.prepaid_out_of_quota\")}\n                </HelperTextItem>\n              </HelperText>\n            )}\n          </Flex>\n        )}\n        {subscriptions.length > 0 && (\n          <Flex\n            flex={{ default: \"flex_1\" }}\n            direction={{ default: \"column\" }}\n            spaceItems={{ default: \"spaceItemsSm\" }}\n          >\n            {hasPrepaid && (\n              <span className=\"pf-c-form__label\">\n                <span className=\"pf-c-form__label-text\">\n                  {t(\"billing.marketplace\")}\n                </span>\n              </span>\n            )}\n            <Gallery hasGutter={true}>\n              {subscriptions.map(\n                ({ marketplace, subscription, isDisabled }) => (\n                  <GalleryItem key={`tile-${subscription}`}>\n                    <Tile\n                      className={\"pf-u-w-100\"}\n                      title={marketplaces[marketplace]}\n                      icon={tiles[marketplace]}\n                      isStacked={true}\n                      isSelected={value === subscription}\n                      isDisabled={isDisabled || isMarketplaceOverQuota}\n                      onClick={() => onSubscription(marketplace, subscription)}\n                    >\n                      {subscription}\n                    </Tile>\n                  </GalleryItem>\n                )\n              )}\n            </Gallery>\n            {isMarketplaceOverQuota && marketplaceQuota > 0 && (\n              <HelperText className={\"pf-c-form__helper-text\"}>\n                <HelperTextItem variant={\"error\"}>\n                  {t(\"billing.marketplace_out_of_quota\")}\n                </HelperTextItem>\n              </HelperText>\n            )}\n            {isMarketplaceOverQuota && marketplaceQuota === 0 && (\n              <HelperText className={\"pf-c-form__helper-text\"}>\n                <HelperTextItem variant={\"error\"}>\n                  {t(\"billing.marketplace_out_of_quota\")}\n                </HelperTextItem>\n              </HelperText>\n            )}\n          </Flex>\n        )}\n      </Flex>\n      <FormSelect\n        className={\"pf-u-display-none\"}\n        value={value}\n        id=\"form-billing-option\"\n        name=\"billing\"\n        validated={validated}\n        onChange={(value) => {\n          if (value === \"prepaid\") {\n            onPrepaid();\n          } else {\n            const s = subscriptions.find((s) => s.marketplace === value);\n            if (s) {\n              onSubscription(s.marketplace, s.subscription);\n            }\n          }\n        }}\n      >\n        {[\n          <FormSelectOption\n            value=\"\"\n            key=\"placeholder\"\n            label={t(\"select_billing\")}\n          />,\n          hasPrepaid ? (\n            <FormSelectOption\n              key={\"prepaid\"}\n              value={\"prepaid\"}\n              label={`prepaid`}\n            />\n          ) : null,\n          subscriptions.map(({ marketplace, subscription, isDisabled }) => {\n            return (\n              <FormSelectOption\n                key={`select-option-${subscription}`}\n                value={subscription}\n                label={`${marketplace} - ${subscription}`}\n                isDisabled={isDisabled}\n              />\n            );\n          }),\n        ]}\n      </FormSelect>\n    </>\n  );\n};\n\nconst tiles: { [id in MarketPlace]: JSX.Element } = {\n  aws: <AWSLogo />,\n  gcp: <GCPLogo />,\n  azure: <AzureLogo />,\n  rhm: <RedhatLogo />,\n};\n","import type { FunctionComponent } from \"react\";\nimport { LogoRedhat } from \"./images\";\n\nexport const RedhatLogo: FunctionComponent = () => {\n  return (\n    <>\n      <img src={LogoRedhat} alt={\"\"} style={{ height: \"60px\" }} />\n    </>\n  );\n};\n","import type { SelectProps } from \"@patternfly/react-core\";\nimport {\n  Flex,\n  FlexItem,\n  FormSelect,\n  FormSelectOption,\n  Skeleton,\n  Tile,\n} from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { AWSLogo, AzureLogo, GCPLogo } from \"../../Logos\";\nimport type { CloudProvider } from \"../../../types\";\nimport type { CloudProviderInfo } from \"../types\";\n\nexport type CloudProvidersTilesProps = {\n  providers: (CloudProviderInfo & { isDisabled?: boolean })[];\n  value: CloudProvider | undefined;\n  onChange: (provider: CloudProvider) => void;\n  isDisabled: boolean;\n  validated?: SelectProps[\"validated\"];\n};\nexport const CloudProvidersTiles: VoidFunctionComponent<\n  CloudProvidersTilesProps\n> = ({ providers, value, onChange, isDisabled, validated }) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n  return (\n    <>\n      {providers.length === 0 && (\n        <Skeleton\n          className=\"pf-m-text-4xl\"\n          screenreaderText=\"Loading contents\"\n        />\n      )}\n      <div role=\"listbox\" aria-label={t(\"select_cloud_provider\")}>\n        <Flex\n          justifyContent={{ default: \"justifyContentSpaceBetween\" }}\n          spacer={{ default: \"spacerNone\" }}\n          spaceItems={{ default: \"spaceItemsXs\" }}\n        >\n          {providers.map(\n            ({ id, displayName, isDisabled: providerDisabled }) => (\n              <FlexItem grow={{ default: \"grow\" }} key={id}>\n                <Tile\n                  className={\"pf-u-w-100\"}\n                  title={displayName}\n                  icon={tiles[id]}\n                  isStacked={true}\n                  isSelected={value === id}\n                  isDisabled={providerDisabled || isDisabled}\n                  onClick={() => onChange(id)}\n                >\n                  {(providerDisabled || isDisabled) &&\n                    t(\"billing.provider_incompatible_with_current_billing\")}\n                  &nbsp;\n                </Tile>\n              </FlexItem>\n            )\n          )}\n        </Flex>\n      </div>\n      <FormSelect\n        className={\"pf-u-display-none\"}\n        value={value}\n        id=\"form-cloud-provider-option\"\n        name=\"cloud-provider\"\n        isDisabled={isDisabled}\n        validated={validated}\n        onChange={(value) => onChange(value as CloudProvider)}\n      >\n        {[\n          <FormSelectOption\n            value=\"\"\n            key=\"placeholder\"\n            label={t(\"select_cloud_provider\")}\n          />,\n          providers.map(({ id, displayName }, index) => {\n            return (\n              <FormSelectOption key={index} value={id} label={displayName} />\n            );\n          }),\n        ]}\n      </FormSelect>\n    </>\n  );\n};\n\nconst tiles: { [id in CloudProvider]: JSX.Element } = {\n  aws: <AWSLogo />,\n  gcp: <GCPLogo />,\n  azure: <AzureLogo />,\n};\n","import { Flex, FlexItem, Form } from \"@patternfly/react-core\";\nimport type { FormEvent, VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport type { CloudProvider, MarketPlace } from \"../../types\";\nimport type {\n  FieldInstanceNameProps,\n  FieldSizeProps,\n  InstanceInfoProps,\n} from \"./components\";\nimport {\n  FieldAZ,\n  FieldBillingTiles,\n  FieldCloudProvider,\n  FieldCloudRegion,\n  FieldInstanceName,\n  FieldSize,\n  FormAlerts,\n  InstanceInfo,\n  InstanceInfoSkeleton,\n  ModalAlertsStandardPlan,\n} from \"./components\";\nimport { useStandardPlanMachine } from \"./machines\";\n\nexport type StandardInstanceFormProps = {\n  formId: string;\n  onClickContactUs: () => void;\n  onLearnHowToAddStreamingUnits: () => void;\n  onLearnMoreAboutSizes: () => void;\n  onClickQuickStart: () => void;\n  subscriptionOptionsHref: string;\n};\n\nexport const StandardInstanceForm: VoidFunctionComponent<\n  StandardInstanceFormProps\n> = ({\n  formId,\n  onClickContactUs,\n  onLearnHowToAddStreamingUnits,\n  onLearnMoreAboutSizes,\n  onClickQuickStart,\n  subscriptionOptionsHref,\n}) => {\n  const {\n    isBillingSelectionRequired,\n    isBillingSingleMarketplace,\n    capabilities,\n    selectedSize,\n    billingType,\n    error,\n    onCreate,\n  } = useStandardPlanMachine();\n\n  const onSubmit = useCallback(\n    (event: FormEvent<HTMLFormElement>) => {\n      event.preventDefault();\n      onCreate();\n    },\n    [onCreate]\n  );\n\n  const instanceInfoBilling: InstanceInfoProps[\"billing\"] = (() => {\n    if (!isBillingSelectionRequired) {\n      if (isBillingSingleMarketplace === false) {\n        return {\n          value: \"prepaid\",\n          subscriptionOptionsHref,\n          type: billingType,\n        };\n      } else {\n        return {\n          value: isBillingSingleMarketplace,\n          subscriptionOptionsHref,\n          type: billingType,\n        };\n      }\n    }\n    return undefined;\n  })();\n\n  return (\n    <>\n      <ModalAlertsStandardPlan\n        instanceAvailability={capabilities.instanceAvailability}\n        onClickContactUs={onClickContactUs}\n      />\n\n      <Flex\n        direction={{ default: \"column\", lg: \"row\" }}\n        alignItems={{ lg: \"alignItemsFlexStart\" }}\n      >\n        <FlexItem flex={{ default: \"flex_2\" }}>\n          <FormAlerts error={error} onClickContactUS={onClickContactUs} />\n          <Form onSubmit={onSubmit} id={formId}>\n            <ConnectedFieldInstanceName />\n            <ConnectedFieldCloudProvider />\n            <ConnectedFieldCloudRegion />\n            <ConnectedFieldAZ />\n            <ConnectedFieldSize\n              onLearnHowToAddStreamingUnits={onLearnHowToAddStreamingUnits}\n              onLearnMoreAboutSizes={onLearnMoreAboutSizes}\n            />\n            {isBillingSelectionRequired && (\n              <ConnectedBillingTiles\n                subscriptionOptionsHref={subscriptionOptionsHref}\n              />\n            )}\n          </Form>\n        </FlexItem>\n        <FlexItem\n          flex={{ default: \"flex_1\" }}\n          className=\"mas--CreateKafkaInstance__sidebar\"\n        >\n          {selectedSize === undefined ? (\n            <InstanceInfoSkeleton\n              isTrial={false}\n              onClickQuickStart={onClickQuickStart}\n            />\n          ) : (\n            <InstanceInfo\n              isTrial={false}\n              trialDurationInHours={undefined}\n              ingress={selectedSize.ingress}\n              egress={selectedSize.egress}\n              storage={selectedSize.storage}\n              maxPartitions={selectedSize.maxPartitions}\n              connections={selectedSize.connections}\n              connectionRate={selectedSize.connectionRate}\n              messageSize={selectedSize.messageSize}\n              onClickQuickStart={onClickQuickStart}\n              streamingUnits={selectedSize.displayName}\n              billing={instanceInfoBilling}\n            />\n          )}\n        </FlexItem>\n      </Flex>\n    </>\n  );\n};\n\nexport const ConnectedFieldInstanceName: VoidFunctionComponent = () => {\n  const {\n    form,\n    isNameTaken,\n    isNameInvalid,\n    isNameEmpty,\n    isNameError,\n    isFormEnabled,\n    setName,\n  } = useStandardPlanMachine();\n\n  const validity: FieldInstanceNameProps[\"validity\"] = (() => {\n    if (isNameTaken) {\n      return \"taken\";\n    } else if (isNameInvalid) {\n      return \"invalid\";\n    } else if (isNameEmpty && isNameError) {\n      return \"required\";\n    }\n    return \"valid\";\n  })();\n\n  return (\n    <FieldInstanceName\n      value={form.name || \"\"}\n      validity={validity}\n      isDisabled={!isFormEnabled}\n      onChange={setName}\n    />\n  );\n};\n\nexport const ConnectedFieldCloudProvider: VoidFunctionComponent = () => {\n  const {\n    form,\n    capabilities,\n    isProviderError,\n    isFormEnabled,\n    isBillingSingleMarketplace,\n    setProvider,\n  } = useStandardPlanMachine();\n\n  const providers =\n    isBillingSingleMarketplace &&\n    isBillingSingleMarketplace.marketplace !== \"rhm\"\n      ? capabilities.availableProviders.map((p) => ({\n          ...p,\n          isDisabled: p.id !== isBillingSingleMarketplace.marketplace,\n        }))\n      : capabilities.availableProviders;\n\n  return (\n    <FieldCloudProvider\n      isValid={!isProviderError}\n      providers={providers}\n      value={form.provider}\n      isDisabled={!isFormEnabled}\n      onChange={setProvider}\n    />\n  );\n};\n\nexport const ConnectedFieldCloudRegion: VoidFunctionComponent = () => {\n  const {\n    form,\n    selectedProvider,\n    selectedSize,\n    isRegionError,\n    isFormEnabled,\n    capabilities,\n    error,\n    setRegion,\n  } = useStandardPlanMachine();\n\n  return (\n    <FieldCloudRegion\n      validity={\n        isRegionError\n          ? \"required\"\n          : error === \"region-unavailable\" ||\n            capabilities.instanceAvailability === \"regions-unavailable\"\n          ? \"region-unavailable\"\n          : \"valid\"\n      }\n      regions={selectedProvider?.regions}\n      value={form.region}\n      isDisabled={!isFormEnabled}\n      isSizeUnavailable={selectedSize?.isDisabled || false}\n      onChange={setRegion}\n    />\n  );\n};\n\nexport const ConnectedFieldAZ: VoidFunctionComponent = () => {\n  const { isFormEnabled } = useStandardPlanMachine();\n\n  return (\n    <FieldAZ\n      validity={\"valid\"}\n      options={\"multi\"}\n      value={\"multi\"}\n      isDisabled={!isFormEnabled}\n      onChange={() => false} // AZ is defined by the backend, we just visualize the value here\n    />\n  );\n};\n\nexport const ConnectedFieldSize: VoidFunctionComponent<\n  Pick<\n    FieldSizeProps,\n    \"onLearnHowToAddStreamingUnits\" | \"onLearnMoreAboutSizes\"\n  >\n> = ({ onLearnHowToAddStreamingUnits, onLearnMoreAboutSizes }) => {\n  const {\n    form,\n    sizes,\n    isSizeOverQuota,\n    isSizeDisabled,\n    isSizeError,\n    isSizeLoadingError,\n    isBillingSelectionRequired,\n    isFormEnabled,\n    isLoadingSizes,\n    isLoading,\n    setSize,\n    remainingQuota,\n  } = useStandardPlanMachine();\n\n  return (\n    <FieldSize\n      value={form.size?.quota}\n      sizes={sizes}\n      remainingQuota={isBillingSelectionRequired ? undefined : remainingQuota}\n      isDisabled={!isFormEnabled || sizes === undefined}\n      isLoading={isLoading || isLoadingSizes}\n      isError={isSizeError}\n      isLoadingError={isSizeLoadingError}\n      validity={\n        isSizeOverQuota ? \"out-of-quota\" : isSizeDisabled ? \"required\" : \"valid\"\n      }\n      onChange={setSize}\n      onLearnHowToAddStreamingUnits={onLearnHowToAddStreamingUnits}\n      onLearnMoreAboutSizes={onLearnMoreAboutSizes}\n    />\n  );\n};\n\nfunction isMarketplaceDisabled(\n  marketplace: MarketPlace,\n  selectedProvider: CloudProvider | undefined\n) {\n  if (marketplace === \"rhm\") {\n    return false;\n  } else if (selectedProvider) {\n    return marketplace !== selectedProvider;\n  }\n  return false;\n}\n\nexport const ConnectedBillingTiles: VoidFunctionComponent<{\n  subscriptionOptionsHref: string;\n}> = ({ subscriptionOptionsHref }) => {\n  const {\n    form,\n    capabilities,\n    selectedBilling,\n    billingType,\n    isBillingPrepaidAvailable,\n    isSizeOverQuota,\n    isBillingError,\n    isBillingPrepaidOverQuota,\n    isBillingMarketplaceOverQuota,\n    setBillingPrepaid,\n    setBillingSubscription,\n  } = useStandardPlanMachine();\n\n  return (\n    <FieldBillingTiles\n      value={\n        selectedBilling === \"prepaid\"\n          ? \"prepaid\"\n          : selectedBilling?.subscription\n      }\n      hasPrepaid={isBillingPrepaidAvailable}\n      subscriptions={capabilities.marketplaceSubscriptions.flatMap((mq) =>\n        mq.subscriptions.map((subscription) => ({\n          marketplace: mq.marketplace,\n          subscription,\n          isDisabled: isMarketplaceDisabled(mq.marketplace, form.provider),\n        }))\n      )}\n      isPrepaidOverQuota={isBillingPrepaidOverQuota}\n      prepaidQuota={capabilities.remainingPrepaidQuota || 0} // we can default to 0 here just to make TS happy, we will have the info here\n      isMarketplaceOverQuota={isBillingMarketplaceOverQuota}\n      marketplaceQuota={capabilities.remainingMarketplaceQuota || 0} // we can default to 0 here just to make TS happy, we will have the info here\n      onPrepaid={setBillingPrepaid}\n      onSubscription={setBillingSubscription}\n      isValid={!isSizeOverQuota && !isBillingError}\n      billingType={billingType}\n      subscriptionOptionsHref={subscriptionOptionsHref}\n    />\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport type {\n  CloudProvider,\n  KafkaInstanceField,\n  SimplifiedStatus,\n  Status,\n} from \"../types\";\n\nexport function useKafkaLabels() {\n  const { t } = useTranslation(\"kafka\");\n\n  const statuses: { [status in Status]: string } = {\n    ready: t(\"statuses.ready\"),\n    degraded: t(\"statuses.degraded\"),\n    accepted: t(\"statuses.accepted\"),\n    provisioning: t(\"statuses.provisioning\"),\n    preparing: t(\"statuses.preparing\"),\n    deprovision: t(\"statuses.deprovision\"),\n    deleting: t(\"statuses.deleting\"),\n    suspended: t(\"statuses.suspended\"),\n    suspending: t(\"statuses.suspending\"),\n    resuming: t(\"statuses.resuming\"),\n  };\n  const statusesSimplified: { [status in SimplifiedStatus]: string } = {\n    creating: t(\"statusesSimplified.creating\"),\n    ready: t(\"statusesSimplified.ready\"),\n    degraded: t(\"statusesSimplified.degraded\"),\n    deleting: t(\"statusesSimplified.deleting\"),\n    suspended: t(\"statusesSimplified.suspended\"),\n    suspending: t(\"statusesSimplified.suspending\"),\n    resuming: t(\"statusesSimplified.resuming\"),\n  };\n  const providers: { [provider in CloudProvider]: string } = {\n    aws: t(\"common:cloudProviders.aws\"),\n    gcp: t(\"common:cloudProviders.gcp\"),\n    azure: t(\"common:cloudProviders.azure\"),\n  };\n  const providerRegions: { [provider in CloudProvider]: { [region: string]: string }} = {\n    aws: {},\n    gcp: {},\n    azure: {},\n  }\n  const fields: {\n    [field in KafkaInstanceField]: string;\n  } = {\n    id: t(\"fields.id\"),\n    name: t(\"fields.name\"),\n    createdAt: t(\"fields.createdAt\"),\n    updatedAt: t(\"fields.updatedAt\"),\n    expiryDate: t(\"fields.expiryDate\"),\n    owner: t(\"fields.owner\"),\n    provider: t(\"fields.provider\"),\n    region: t(\"fields.region\"),\n    status: t(\"fields.status\"),\n    plan: t(\"fields.plan\"),\n    size: t(\"fields.size\"),\n    ingress: t(\"fields.ingress\"),\n    egress: t(\"fields.egress\"),\n    storage: t(\"fields.storage\"),\n    maxPartitions: t(\"fields.maxPartitions\"),\n    connections: t(\"fields.connections\"),\n    connectionRate: t(\"fields.connectionRate\"),\n    messageSize: t(\"fields.messageSize\"),\n    billing: t(\"fields.billing\"),\n    adminUrl: t(\"fields.adminUrl\"),\n    bootstrapUrl: t(\"fields.bootstrapUrl\"),\n    version: t(\"fields.version\"),\n  };\n  return {\n    fields,\n    statuses,\n    statusesSimplified,\n    providers,\n    providerRegions\n  };\n}\n","/**\n * A date in the ISO format YYYY-MM-DDTHH:mm:ss.sssZ\n */\nexport type DateIsoString = string;\n\n/**\n * Supported Cloud Providers. Extend this to add a new provider, then follow\n * Typescript errors to find where extra information need to be added (images,\n * translations).\n */\nexport type CloudProvider = \"aws\" | \"gcp\" | \"azure\";\n\n/**\n * A Cloud Region. Since this varies between Cloud Providers and has no extra\n * visual attached, we take its name from the API and do no further\n * transformation.\n */\nexport type CloudRegion = string;\n/**\n * Cloud provider multi availability zone\n */\nexport type AZ = \"single\" | \"multi\";\n/**\n * A number that describes how much does an instance cost to create\n */\nexport type Quota = number;\n/**\n * The capabilities of an instance, and its quota cost. Some sizes might not be\n * enabled, eg. because temporarily out of capacity\n */\nexport type Size = {\n  id: string;\n  displayName: string;\n  status: \"stable\" | \"preview\";\n  quota: Quota;\n  ingress: number;\n  egress: number;\n  storage: number;\n  connections: number;\n  connectionRate: number;\n  maxPartitions: number;\n  messageSize: number;\n  isDisabled: boolean;\n};\n/**\n * Paid for instances are `standard`, evaluation instances are `developer`.\n * `standard` instances have a `Quota` associated, and bigger sizes.\n * `developer` instances are free to be created (up to 1 per user), have a\n * single, smaller size option than `standard` ones, and they expire after a\n * few hours.\n *\n * Note: a new kind of evaluation instance is being studied. They will have a\n * long expiration period and bigger sizes.\n */\nexport type Plan = \"standard\" | \"developer\";\n/**\n * All the statuses an instance can be. If new statuses are added, ensure to\n * add them to the relevant status group (`ReadyStatuses` etc.).\n */\nexport const Statuses = [\n  \"ready\",\n  \"degraded\",\n  \"accepted\",\n  \"provisioning\",\n  \"preparing\",\n  \"deprovision\",\n  \"deleting\",\n  \"suspended\",\n  \"suspending\",\n  \"resuming\",\n] as const;\n\nexport type Status = typeof Statuses[number];\n\nexport const CreatingStatuses: readonly Status[] = [\n  \"accepted\",\n  \"provisioning\",\n  \"preparing\",\n];\nexport const ReadyStatuses: readonly Status[] = [\"ready\"];\nexport const DegradedStatuses: readonly Status[] = [\"degraded\"];\nexport const SuspendingStatuses: readonly Status[] = [\"suspending\"];\nexport const SuspendedStatuses: readonly Status[] = [\"suspended\"];\nexport const DeletingStatuses: readonly Status[] = [\"deleting\", \"deprovision\"];\nexport const ResumingStatuses: readonly Status[] = [\"resuming\"];\n\nexport const SimplifiedStatuses = {\n  creating: CreatingStatuses,\n  ready: ReadyStatuses,\n  degraded: DegradedStatuses,\n  suspended: SuspendedStatuses,\n  deleting: DeletingStatuses,\n  resuming: ResumingStatuses,\n  suspending: SuspendingStatuses,\n} as const;\nexport type SimplifiedStatus = keyof typeof SimplifiedStatuses;\n\n/**\n * A list of marketplaces where an instance can be billed to\n */\nexport type MarketPlace = CloudProvider | \"rhm\";\n/**\n * List of marketplaces where a user has some subscription\n */\nexport type MarketPlaceSubscriptions = {\n  marketplace: MarketPlace;\n  subscriptions: string[];\n};\n/**\n * A specific marketplace's subscription, assigned as billing option to an\n * instance.\n *\n * Note: the API will provide only the `subscription`; the `MarketPlace` will\n * have to be fetched querying for the `subscription`.\n */\nexport type MarketplaceSubscription = {\n  marketplace: MarketPlace;\n  subscription: string;\n};\n\n/**\n * All the details abut a Kafka instance.\n *\n * Unless differently specified, the values marked as accepting `undefined`\n * will come from extra API calls.\n */\nexport type KafkaInstance = {\n  id: string;\n  name: string;\n  createdAt: DateIsoString;\n  updatedAt: DateIsoString;\n  expiryDate: DateIsoString | undefined;\n  owner: string;\n  provider: CloudProvider;\n  region: CloudRegion;\n  status: Status;\n  plan: Plan;\n  size: string | undefined;\n  ingress: number | undefined;\n  egress: number | undefined;\n  storage: number | undefined;\n  maxPartitions: number | undefined;\n  connections: number | undefined;\n  connectionRate: number | undefined;\n  messageSize: number | undefined;\n  billing: \"prepaid\" | MarketplaceSubscription | undefined;\n\n  version: string;\n\n  bootstrapUrl: string | undefined;\n  adminUrl: string | undefined;\n};\nexport type KafkaInstanceField = keyof KafkaInstance;\n\nexport enum RetentionTimeUnits {\n  MILLISECOND = \"milliseconds\",\n  SECOND = \"seconds\",\n  MINUTE = \"minutes\",\n  HOUR = \"hours\",\n  DAY = \"days\",\n  WEEK = \"weeks\",\n  CUSTOM = \"custom\",\n  UNLIMITED = \"unlimited\",\n}\n\nexport enum RetentionSizeUnits {\n  BYTE = \"bytes\",\n  KIBIBYTE = \"kibibytes\",\n  MEBIBYTE = \"mebibytes\",\n  GIBIBYTE = \"gibibytes\",\n  TEBIBYTE = \"tebibytes\",\n  CUSTOM = \"custom\",\n  UNLIMITED = \"unlimited\",\n}\n\nexport type KafkaTopic = {\n  topic_name: string;\n  partitions: number;\n  retention_time: string;\n  retention_size: string;\n};\n\nexport type KafkaTopicField = keyof KafkaTopic;\n\nexport type {ConsumerGroup} from \"./components/ConsumerGroups/types\"","import { Alert } from \"@patternfly/react-core\";\nimport { differenceInHours } from \"date-fns\";\nimport type { FunctionComponent } from \"react\";\nimport { Trans } from \"@rhoas/app-services-ui-components\";\nimport { FormatDate } from \"@rhoas/app-services-ui-components\";\n\ntype DetailsTabAlertProps = {\n  expiryDate: Date;\n};\n\nexport const DetailsTabAlert: FunctionComponent<DetailsTabAlertProps> = ({\n  expiryDate,\n}) => {\n  const hoursLeft = expiryDate ? differenceInHours(expiryDate, Date.now()) : 0;\n  return (\n    <Alert\n      variant={\n        hoursLeft > 24\n          ? \"info\"\n          : hoursLeft < 24 && hoursLeft > 5\n          ? \"warning\"\n          : \"danger\"\n      }\n      title={\n        <Trans\n          i18nKey=\"kafka:will_expire\"\n          components={{\n            time: <FormatDate date={expiryDate} format=\"expiration\" />,\n          }}\n        />\n      }\n      aria-live=\"polite\"\n      isInline\n      className=\"pf-u-mb-lg\"\n    />\n  );\n};\n","import {\n  Skeleton,\n  TextContent,\n  TextList,\n  TextListItem,\n  TextListItemVariants,\n  TextListVariants,\n} from \"@patternfly/react-core\";\nimport { FormatDate, useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { ReactChild, VoidFunctionComponent } from \"react\";\nimport type { MarketplaceSubscription, Plan } from \"../../../types\";\nimport { DetailsTabAlert } from \"./DetailsTabAlert\";\n\n/**\n * All fields marked as accepting undefined will show a skeleton loader until the value is available.\n * This is to support fetching the data from different APIs.\n */\nexport type KafkaDetailsTabProps = {\n  id: string;\n  createdAt: Date;\n  updatedAt: Date;\n  expiryDate: Date | undefined;\n  owner: string;\n  region: string;\n  instanceType: Plan;\n  size: string | undefined;\n  ingress: number | undefined;\n  egress: number | undefined;\n  storage: number | undefined;\n  maxPartitions: number | undefined;\n  connections: number | undefined;\n  connectionRate: number | undefined;\n  messageSize: number | undefined;\n  billing: \"prepaid\" | MarketplaceSubscription | undefined;\n  kafkaVersion: string;\n};\n\nexport const KafkaDetailsTab: VoidFunctionComponent<KafkaDetailsTabProps> = ({\n  id,\n  createdAt,\n  updatedAt,\n  owner,\n  region,\n  expiryDate,\n  instanceType,\n  size,\n  ingress,\n  egress,\n  storage,\n  maxPartitions,\n  connections,\n  connectionRate,\n  messageSize,\n  billing,\n  kafkaVersion,\n}) => {\n  const { t } = useTranslation(\"kafka\");\n\n  const renderTextListItem = (title: string, value: ReactChild | undefined) => (\n    <>\n      <TextListItem component={TextListItemVariants.dt}>{title}</TextListItem>\n      {value ? (\n        <TextListItem component={TextListItemVariants.dd}>{value}</TextListItem>\n      ) : (\n        <Skeleton\n          width=\"50%\"\n          screenreaderText={t(\"common:skeleton_loader_screenreader_text\", {\n            contentName: title,\n          })}\n        />\n      )}\n    </>\n  );\n  return (\n    <div className=\"mas--details__drawer--tab-content\">\n      {instanceType !== \"standard\" && expiryDate && (\n        <DetailsTabAlert expiryDate={expiryDate} />\n      )}\n      <TextContent>\n        <TextList component={TextListVariants.dl}>\n          {instanceType === \"standard\" &&\n            renderTextListItem(\n              t(\"common:size\"),\n              size\n                ? t(\"create-kafka-instance:streaming_size_value\", {\n                    value: size,\n                  })\n                : undefined\n            )}\n          {renderTextListItem(\n            t(\"ingress\"),\n            ingress\n              ? t(\"create-kafka-instance:ingress_value\", {\n                  value: ingress,\n                })\n              : undefined\n          )}\n          {renderTextListItem(\n            t(\"egress\"),\n            egress\n              ? t(\"create-kafka-instance:egress_value\", {\n                  value: egress,\n                })\n              : undefined\n          )}\n          {renderTextListItem(\n            t(\"storage\"),\n            storage\n              ? t(\"create-kafka-instance:storage_value\", {\n                  value: storage,\n                })\n              : undefined\n          )}\n          {renderTextListItem(\n            t(\"partitions\"),\n            maxPartitions\n              ? t(\"create-kafka-instance:partitions_value\", {\n                  value: maxPartitions,\n                })\n              : undefined\n          )}\n          {renderTextListItem(\n            t(\"client_connections\"),\n            connections\n              ? t(\"create-kafka-instance:client_connections_value\", {\n                  value: connections,\n                })\n              : undefined\n          )}\n          {renderTextListItem(\n            t(\"connection_rate\"),\n            connectionRate\n              ? t(\"create-kafka-instance:connection_rate_value\", {\n                  value: connectionRate,\n                })\n              : undefined\n          )}\n          {renderTextListItem(\n            t(\"message_size\"),\n            messageSize\n              ? t(\"create-kafka-instance:message_size_value\", {\n                  value: messageSize,\n                })\n              : undefined\n          )}\n\n          {renderTextListItem(t(\"common:id\"), id)}\n          {renderTextListItem(t(\"common:kafka_version\"), kafkaVersion)}\n          {renderTextListItem(t(\"common:owner\"), owner)}\n          {renderTextListItem(\n            t(\"common:time_created\"),\n            <FormatDate date={createdAt} format={\"long\"} />\n          )}\n          {renderTextListItem(\n            t(\"common:time_updated\"),\n            <FormatDate date={updatedAt} format={\"long\"} />\n          )}\n          {renderTextListItem(\n            t(\"common:cloud_provider\"),\n            t(\"common:cloudProviders.aws\")\n          )}\n          {renderTextListItem(t(\"common:region\"), region)}\n          {renderTextListItem(\n            t(\"create-kafka-instance:billing.field_label\"),\n            (() => {\n              if (billing === undefined) {\n                return undefined;\n              } else if (billing === \"prepaid\") {\n                return t(\"create-kafka-instance:billing.prepaid_option\");\n              } else {\n                switch (billing.marketplace) {\n                  case \"aws\":\n                    return (\n                      <>\n                        {t(\"create-kafka-instance:billing.marketplace_aws\")}\n                        <br />\n                        {billing.subscription}\n                      </>\n                    );\n                  case \"azure\":\n                    return (\n                      <>\n                        {t(\"create-kafka-instance:billing.marketplace_azure\")}\n                        <br />\n                        {billing.subscription}\n                      </>\n                    );\n                  case \"gcp\":\n                    return (\n                      <>\n                        {t(\"create-kafka-instance:billing.marketplace_gcp\")}\n                        <br />\n                        {billing.subscription}\n                      </>\n                    );\n                  case \"rhm\":\n                    return (\n                      <>\n                        {t(\"create-kafka-instance:billing.marketplace_rh\")}\n                        <br />\n                        {billing.subscription}\n                      </>\n                    );\n                }\n              }\n            })()\n          )}\n        </TextList>\n      </TextContent>\n    </div>\n  );\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from \"@patternfly/react-core\";\nimport { ExclamationTriangleIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const SuspendedConnection: VoidFunctionComponent = () => {\n  const { t } = useTranslation(\"kafka\");\n  return (\n    <EmptyState variant={EmptyStateVariant.small}>\n      <EmptyStateIcon icon={ExclamationTriangleIcon} color={\"#f0ab00\"} />\n      <Title headingLevel={\"h1\"} size={TitleSizes.lg}>\n        {t(\"suspend_empty_state_title\")}\n      </Title>\n      <EmptyStateBody>{t(\"suspend_empty_state_body\")}</EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import {\n  Button,\n  ButtonVariant,\n  ClipboardCopy,\n  ExpandableSection,\n  Label,\n  Popover,\n  Skeleton,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { HelpIcon } from \"@patternfly/react-icons\";\nimport {\n  ExternalLink,\n  Trans,\n  useTranslation,\n} from \"@rhoas/app-services-ui-components\";\nimport type { FunctionComponent } from \"react\";\nimport { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { SuspendedConnection } from \"./SuspendedConnection\";\n\nexport type KafkaConnectionTabP2Props = {\n  isKafkaSuspended?: boolean;\n  isKafkaPending?: boolean;\n  externalServer?: string;\n  tokenEndPointUrl: string;\n  linkToServiceAccount: string;\n  linkToAccessTab: string;\n  adminAPIUrl: string | undefined;\n  showCreateServiceAccountModal: () => void;\n  kafkaFleetManagerUrl: string;\n};\n\nexport const KafkaConnectionTabP2: FunctionComponent<\n  KafkaConnectionTabP2Props\n> = ({\n  isKafkaSuspended,\n  isKafkaPending,\n  externalServer,\n  tokenEndPointUrl,\n  linkToServiceAccount,\n  linkToAccessTab,\n  adminAPIUrl,\n  kafkaFleetManagerUrl,\n  showCreateServiceAccountModal,\n}) => {\n  const { t } = useTranslation();\n\n  const [isExpanded, setIsExpanded] = useState<boolean>(false);\n\n  const onChangeExpandedSection = () => {\n    setIsExpanded(!isExpanded);\n  };\n\n  return isKafkaSuspended ? (\n    <SuspendedConnection />\n  ) : (\n    <div className=\"mas--details__drawer--tab-content\">\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.small}>\n          {t(\"connection-tab:drawer_resource_tab_body_description_1\")}\n        </Text>\n        <Text component={TextVariants.h3} className=\"pf-u-mt-xl\">\n          {t(\"connection-tab:bootstrap_server\")}\n        </Text>\n        <Text component={TextVariants.small}>\n          {t(\"connection-tab:bootstrap_server_description\")}\n        </Text>\n        {isKafkaPending ? (\n          <Skeleton fontSize=\"2xl\" />\n        ) : (\n          <ClipboardCopy\n            data-testid=\"drawerStreams-copyBootstrapURL\"\n            textAriaLabel={t(\"connection-tab:bootstrap_server\")}\n            isReadOnly\n          >\n            {externalServer}\n          </ClipboardCopy>\n        )}\n      </TextContent>\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.h3} className=\"pf-u-mt-xl\">\n          {t(\"connection-tab:service_accounts_small\")}\n        </Text>\n        <Text component={TextVariants.small}>\n          {\n            <Trans\n              i18nKey={\n                \"connection-tab:create_service_account_to_generate_credentials\"\n              }\n              components={{\n                value: (\n                  <Link\n                    to={linkToServiceAccount}\n                    data-testid=\"tableStreams-linkKafka\"\n                  ></Link>\n                ),\n              }}\n            />\n          }\n        </Text>\n      </TextContent>\n      <Button\n        variant={ButtonVariant.secondary}\n        isInline\n        onClick={showCreateServiceAccountModal}\n        data-testid=\"drawerStreams-buttonCreateServiceAccount\"\n      >\n        {t(\"connection-tab:create_service_account\")}\n      </Button>\n      <TextContent className=\"pf-u-pt-sm\">\n        <Text component={TextVariants.small}>\n          {\n            <Trans\n              i18nKey={\"connection-tab:current_instance\"}\n              components={{\n                value: <Link to={linkToAccessTab}></Link>,\n              }}\n            />\n          }\n        </Text>\n      </TextContent>\n      <TextContent className=\"pf-u-pb-sm\">\n        <ExpandableSection\n          toggleContent={\n            <div className=\"pf-c-content\">\n              <Text component={TextVariants.h3} className={\"pf-c-content\"}>\n                {t(\"connection-tab:rest_api_header\")}\n              </Text>\n            </div>\n          }\n          isExpanded={isExpanded}\n          onToggle={onChangeExpandedSection}\n          className=\"pf-u-mt-lg\"\n        >\n          <TextContent className=\"pf-u-pb-sm\">\n            <Text component={TextVariants.small}>\n              {t(\"connection-tab:rest_api_description\")}\n            </Text>\n          </TextContent>\n          <TextContent>\n            <strong>\n              {t(\"connection-tab:kafka_instance_url_label\")}\n              <Popover\n                headerContent={\n                  <div>\n                    {t(\"connection-tab:kafka_instance_url_popover_label\")}\n                  </div>\n                }\n                bodyContent={\n                  <TextContent>\n                    <p>{t(\"connection-tab:kafka_instance_url_popover_body\")}</p>\n                    <p>\n                      <Trans\n                        ns={\"connection-tab\"}\n                        i18nKey={\"popover_helper_text\"}\n                        components={[\n                          <Button\n                            isInline\n                            variant={ButtonVariant.link}\n                            component=\"a\"\n                            href=\"https://console.redhat.com/docs/api/kafkainstance?github-owner=redhat-developer&github-repo=app-services-sdk-core&github-content=kafka-admin-rest.yaml%3Fref%3Ddoc-portal&readonly=true\"\n                          />,\n                          <ExternalLink\n                            testId={\"customerPortal-link\"}\n                            href=\"https://access.redhat.com/documentation/en-us/red_hat_openshift_application_services/1/guide/2409253a-45ee-470e-bdc9-5db4bfcf9d0f\"\n                            className={\"pf-u-ml-xs\"}\n                          />,\n                        ]}\n                      />\n                    </p>\n                  </TextContent>\n                }\n              >\n                <Button\n                  variant={ButtonVariant.plain}\n                  aria-label={t(\n                    \"connection-tab:kafka_instance_url_button_aria_label\"\n                  )}\n                >\n                  <HelpIcon />\n                </Button>\n              </Popover>\n            </strong>\n            {adminAPIUrl ? (\n              <ClipboardCopy\n                textAriaLabel={t(\"connection-tab:kafka_instance_url_label\")}\n                isReadOnly\n              >\n                {adminAPIUrl}\n              </ClipboardCopy>\n            ) : (\n              <Skeleton fontSize=\"2xl\" />\n            )}\n            <TextContent className=\"pf-u-pt-sm\">\n              <Text component={TextVariants.small}>\n                {t(\"connection-tab:kafka_instance_url_description\")}\n              </Text>\n            </TextContent>\n          </TextContent>\n          <TextContent className=\"pf-u-mt-md\">\n            <strong>\n              {t(\"connection-tab:kafka_management_url\")}\n              <Popover\n                headerContent={\n                  <div>\n                    {t(\"connection-tab:kafka_management_popover_header\")}\n                  </div>\n                }\n                bodyContent={\n                  <TextContent>\n                    <p>{t(\"connection-tab:kafka_management_popover_body\")}</p>\n                    <p>\n                      <Trans\n                        ns={\"connection-tab\"}\n                        i18nKey={\"popover_helper_text\"}\n                        components={[\n                          <Button\n                            isInline\n                            variant={ButtonVariant.link}\n                            component=\"a\"\n                            href=\"https://console.redhat.com/docs/api/kafkamgmt?github-owner=redhat-developer&github-repo=app-services-sdk-core&github-content=kas-fleet-manager.yaml%3Fref%3Ddoc-portal\"\n                          />,\n                          <ExternalLink\n                            testId={\"customerPortal-link\"}\n                            href=\"https://access.redhat.com/documentation/en-us/red_hat_openshift_application_services/1/guide/2409253a-45ee-470e-bdc9-5db4bfcf9d0f\"\n                            className={\"pf-u-ml-xs\"}\n                          />,\n                        ]}\n                      />\n                    </p>\n                  </TextContent>\n                }\n              >\n                <Button\n                  variant={ButtonVariant.plain}\n                  aria-label={t(\n                    \"connection-tab:kafka_management_button_aria_label\"\n                  )}\n                >\n                  <HelpIcon />\n                </Button>\n              </Popover>\n            </strong>\n            {isKafkaPending ? (\n              <Skeleton fontSize=\"2xl\" />\n            ) : (\n              <ClipboardCopy\n                textAriaLabel={t(\"connection-tab:kafka_management_url\")}\n                isReadOnly\n              >\n                {kafkaFleetManagerUrl}\n              </ClipboardCopy>\n            )}\n            <TextContent className=\"pf-u-pt-sm\">\n              <Text component={TextVariants.small}>\n                {t(\"connection-tab:kafka_management_description\")}\n              </Text>\n            </TextContent>\n          </TextContent>\n        </ExpandableSection>\n      </TextContent>\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.h3} className=\"pf-u-mt-xl\">\n          {t(\"connection-tab:authentication_method\")}\n        </Text>\n        <Text component={TextVariants.h4} className=\"pf-u-mt-md\">\n          {t(\"connection-tab:sasl_oauthbearer\")}{\" \"}\n          <Label color=\"green\">{t(\"connection-tab:recommended\")}</Label>\n          <Popover\n            aria-label={t(\"connection-tab:sasl_oauthbearer\")}\n            bodyContent={\n              <div>{t(\"connection-tab:sasl_oauthbearer_popover_content\")}</div>\n            }\n          >\n            <Button\n              variant={ButtonVariant.plain}\n              aria-label={t(\"connection-tab:more_info_about_sasl_oauthbearer\")}\n            >\n              <HelpIcon />\n            </Button>\n          </Popover>\n        </Text>\n        <Text component={TextVariants.small}>\n          {t(\"connection-tab:sasl_oauthbearer_description\")}\n        </Text>\n        <strong>{t(\"connection-tab:token_endpoint_url\")}</strong>\n        {isKafkaPending ? (\n          <Skeleton fontSize=\"2xl\" />\n        ) : (\n          <ClipboardCopy\n            textAriaLabel={t(\"connection-tab:token_endpoint_url\")}\n            isReadOnly\n          >\n            {tokenEndPointUrl}\n          </ClipboardCopy>\n        )}\n      </TextContent>\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.h4} className=\"pf-u-mt-md\">\n          {t(\"connection-tab:sasl_plain\")}\n        </Text>\n        <Text component={TextVariants.small}>\n          {t(\"connection-tab:sasl_plain_description\")}\n        </Text>\n      </TextContent>\n    </div>\n  );\n};\n","import type { TabsProps } from \"@patternfly/react-core\";\nimport {\n  Drawer,\n  DrawerActions,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerContentBody,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerPanelContent,\n  Tab,\n  Tabs,\n  TabTitleText,\n  Text,\n  TextContent,\n  TextVariants,\n  Title,\n  TitleSizes,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { parseISO } from \"date-fns\";\nimport type { FunctionComponent, VoidFunctionComponent } from \"react\";\nimport { useCallback, useMemo } from \"react\";\nimport { useKafkaLabels } from \"../../hooks\";\nimport type { KafkaInstance } from \"../../types\";\nimport { CreatingStatuses } from \"../../types\";\nimport { KafkaConnectionTabP2, KafkaDetailsTab } from \"./components\";\n\nexport type KafkaInstanceDrawerProps = {\n  instance?: KafkaInstance;\n  isExpanded: boolean;\n  activeTab: KafkaInstanceDrawerTab;\n  onTabChange: (tab: KafkaInstanceDrawerTab) => void;\n\n  onClose: () => void;\n};\n\nexport const KafkaInstanceDrawer: FunctionComponent<\n  KafkaInstanceDrawerProps\n> = ({ instance, activeTab, isExpanded, onTabChange, onClose, children }) => {\n  const content = useMemo(() => {\n    return (\n      <DrawerPanelContent>\n        {instance ? (\n          <KafkaInstanceDrawerPanel\n            instance={instance}\n            activeTab={activeTab}\n            onTabChange={onTabChange}\n            onClose={onClose}\n          />\n        ) : null}\n      </DrawerPanelContent>\n    );\n  }, [activeTab, instance, onClose, onTabChange]);\n  return (\n    <Drawer isExpanded={isExpanded} isInline={true}>\n      <DrawerContent panelContent={content}>\n        <DrawerContentBody\n          className={\"pf-u-display-flex pf-u-flex-direction-column\"}\n        >\n          {children}\n        </DrawerContentBody>\n      </DrawerContent>\n    </Drawer>\n  );\n};\n\nexport type KafkaInstanceDrawerTab = \"details\" | \"connections\";\n\nexport const KafkaInstanceDrawerPanel: VoidFunctionComponent<\n  Required<Omit<KafkaInstanceDrawerProps, \"isExpanded\">> & {\n    activeTab: KafkaInstanceDrawerTab;\n  }\n> = ({ instance, activeTab, onTabChange, onClose }) => {\n  const { t } = useTranslation([\"kafka\"]);\n  const labels = useKafkaLabels();\n\n  const handleSelect: TabsProps[\"onSelect\"] = useCallback(\n    (_, tab) => {\n      const t = tab as KafkaInstanceDrawerTab;\n      onTabChange(t);\n    },\n    [onTabChange]\n  );\n\n  const isKafkaPending = CreatingStatuses.includes(instance.status);\n\n  return (\n    <>\n      <DrawerHead>\n        <TextContent>\n          <Text component={TextVariants.small} className={\"pf-u-mb-0\"}>\n            {t(\"common:name\")}\n          </Text>\n          <Title\n            headingLevel={\"h1\"}\n            size={TitleSizes[\"xl\"]}\n            className={\"pf-u-mt-0\"}\n          >\n            {instance.name}\n          </Title>\n        </TextContent>\n        <DrawerActions>\n          <DrawerCloseButton onClick={onClose} />\n        </DrawerActions>\n      </DrawerHead>\n      <DrawerPanelBody>\n        <Tabs activeKey={activeTab} onSelect={handleSelect}>\n          <Tab\n            eventKey={\"details\"}\n            title={<TabTitleText>{t(\"drawer-tabs.details\")}</TabTitleText>}\n          >\n            <div className={\"pf-u-pt-md pf-u-pb-md\"}>\n              <KafkaDetailsTab\n                id={instance.id}\n                owner={instance.owner}\n                createdAt={parseISO(instance.createdAt)}\n                updatedAt={parseISO(instance.updatedAt)}\n                expiryDate={\n                  instance.expiryDate\n                    ? parseISO(instance.expiryDate)\n                    : undefined\n                }\n                size={instance.size}\n                ingress={instance.ingress}\n                egress={instance.egress}\n                storage={instance.storage}\n                maxPartitions={instance.maxPartitions}\n                connections={instance.connections}\n                connectionRate={instance.connectionRate}\n                messageSize={instance.messageSize}\n                region={\n                  labels.providerRegions[instance.provider][instance.region] ||\n                  instance.region\n                }\n                instanceType={instance.plan}\n                billing={instance.billing}\n                kafkaVersion={instance.version}\n              />\n            </div>\n          </Tab>\n          <Tab\n            eventKey={\"connections\"}\n            title={<TabTitleText>{t(\"drawer-tabs.connections\")}</TabTitleText>}\n            data-testid=\"drawerStreams-tabConnect\"\n          >\n            <div className={\"pf-u-pt-md pf-u-pb-md\"}>\n              <KafkaConnectionTabP2\n                isKafkaPending={isKafkaPending}\n                externalServer={getExternalServer(instance.bootstrapUrl)}\n                tokenEndPointUrl={\"TODO\"}\n                linkToServiceAccount={\"service-accounts\"}\n                linkToAccessTab={`TODO/acls`}\n                adminAPIUrl={getAdminServerUrl(instance.adminUrl)}\n                showCreateServiceAccountModal={() => {\n                  /* TODO */\n                }}\n                kafkaFleetManagerUrl={\n                  \"https://api.openshift.com/api/kafkas_mgmt/v1/openapi\"\n                }\n              />\n            </div>\n          </Tab>\n        </Tabs>\n      </DrawerPanelBody>\n    </>\n  );\n};\n\nconst getExternalServer = (bootstrapUrl: string | undefined) => {\n  if (!bootstrapUrl) {\n    return undefined;\n  }\n  return bootstrapUrl?.endsWith(\":443\") ? bootstrapUrl : `${bootstrapUrl}:443`;\n};\n\nconst getAdminServerUrl = (adminUrl: string | undefined) => {\n  return adminUrl ? `${adminUrl}/openapi` : undefined;\n};\n","import {\n  Alert,\n  Button,\n  Flex,\n  FlexItem,\n  HelperText,\n  HelperTextItem,\n  Spinner,\n  Split,\n  SplitItem,\n} from \"@patternfly/react-core\";\nimport {\n  CheckCircleIcon,\n  ExclamationTriangleIcon,\n} from \"@patternfly/react-icons\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { forwardRef } from \"react\";\nimport type { Status } from \"../../../types\";\nimport {\n  CreatingStatuses,\n  DegradedStatuses,\n  DeletingStatuses,\n  ReadyStatuses,\n  ResumingStatuses,\n  SuspendedStatuses,\n  SuspendingStatuses,\n} from \"../../../types\";\nimport \"./StatusLabel.css\";\n\ntype StatusLabelProps = {\n  value: Status;\n  showWarning?: boolean;\n  showError?: boolean;\n  withPopover?: boolean;\n};\n\n/**\n *<strong> Introduction </strong>\n *These are the various statuses that can show in the Kafka instances table under the \"Status\" header.\n */\nexport const StatusLabel = forwardRef<HTMLButtonElement, StatusLabelProps>(\n  (\n    { value, showWarning = false, showError = false, withPopover = false },\n    ref\n  ) => {\n    const { t } = useTranslation(\"kafka\");\n\n    const buttonVariant = withPopover ? \"link\" : \"plain\";\n\n    switch (true) {\n      case ReadyStatuses.includes(value):\n        return (\n          <div>\n            <Split hasGutter className=\"mas-c-status\">\n              <SplitItem>\n                <CheckCircleIcon className=\"mas-m-ready\" />\n              </SplitItem>\n              <SplitItem>{t(\"statuses.ready\")}</SplitItem>\n            </Split>\n          </div>\n        );\n\n      case CreatingStatuses.includes(value):\n        switch (true) {\n          case showWarning:\n            return (\n              <div>\n                <Split hasGutter className=\"mas-c-status\">\n                  <SplitItem>\n                    <Spinner size=\"md\" />\n                  </SplitItem>\n                  <SplitItem>\n                    <Button ref={ref} variant={buttonVariant} isInline>\n                      {t(\"statuses.creating\")}\n                    </Button>\n                  </SplitItem>\n                </Split>\n                <Alert\n                  variant=\"warning\"\n                  isInline\n                  isPlain\n                  title=\"This is taking longer than expected.\"\n                />\n              </div>\n            );\n          case showError:\n            return (\n              <div>\n                <Split hasGutter className=\"mas-c-status\">\n                  <SplitItem>\n                    <Spinner size=\"md\" />\n                  </SplitItem>\n                  <SplitItem>\n                    <Button ref={ref} variant={buttonVariant} isInline>\n                      {t(\"statuses.creating\")}\n                    </Button>\n                  </SplitItem>\n                </Split>\n                <Alert\n                  variant=\"danger\"\n                  isInline\n                  isPlain\n                  title={t(\"status_warning_or_error_title\")}\n                />\n              </div>\n            );\n          default:\n            return (\n              <div>\n                <Split hasGutter className=\"mas-c-status\">\n                  <SplitItem>\n                    <Spinner size=\"md\" />\n                  </SplitItem>\n                  <SplitItem>\n                    <Button ref={ref} variant={buttonVariant} isInline>\n                      {t(\"statuses.creating\")}\n                    </Button>\n                    <Flex>\n                      <FlexItem>\n                        <HelperText>\n                          <HelperTextItem variant=\"indeterminate\">\n                            {t(\"status_created_shortly_help\")}\n                          </HelperTextItem>\n                        </HelperText>\n                      </FlexItem>\n                    </Flex>\n                  </SplitItem>\n                </Split>\n              </div>\n            );\n        }\n\n      case DegradedStatuses.includes(value):\n        return (\n          <div>\n            <Split hasGutter className=\"mas-c-status\">\n              <SplitItem>\n                <ExclamationTriangleIcon className=\"mas-m-degraded\" />\n              </SplitItem>\n              <SplitItem>{t(\"statuses.degraded\")}</SplitItem>\n            </Split>\n          </div>\n        );\n\n      case SuspendingStatuses.includes(value):\n        return (\n          <div>\n            <p className=\"mas-m-deleting\"> {t(\"statuses.suspending\")}</p>\n          </div>\n        );\n      case SuspendedStatuses.includes(value):\n        return (\n          <div>\n            <Split hasGutter className=\"mas-c-status\">\n              <SplitItem>\n                <ExclamationTriangleIcon className=\"mas-m-degraded\" />\n              </SplitItem>\n              <SplitItem>\n                <Button ref={ref} variant={buttonVariant} isInline>\n                  {t(\"statuses.suspended\")}\n                </Button>\n              </SplitItem>\n            </Split>\n          </div>\n        );\n      case ResumingStatuses.includes(value):\n        return (\n          <div>\n            <Split hasGutter className=\"mas-c-status\">\n              <SplitItem>\n                <Spinner size=\"md\" />\n              </SplitItem>\n              <SplitItem>{t(\"statuses.resuming\")}</SplitItem>\n            </Split>\n          </div>\n        );\n      case DeletingStatuses.includes(value):\n        return (\n          <div>\n            <p className=\"mas-m-deleting\"> {t(\"statuses.deleting\")}</p>\n          </div>\n        );\n      default:\n        return null;\n    }\n  }\n);\n","export type KafkaStatus =\n  | \"ready\"\n  | \"degraded\"\n  | \"accepted\"\n  | \"provisioning\"\n  | \"preparing\"\n  | \"deprovision\"\n  | \"deleting\"\n  | \"suspended\"\n  | \"suspending\"\n  | \"resuming\";\n\nexport type PopoverStatus =\n  | \"pending\"\n  | \"provisioning\"\n  | \"preparing\"\n  | \"ready\"\n  | \"suspended\";\n\nexport const PopoverStatusOrder: PopoverStatus[] = [\n  \"pending\",\n  \"preparing\",\n  \"provisioning\",\n];\n\nexport const KafkaToPopoverMapping: {\n  [status in KafkaStatus]: PopoverStatus | null;\n} = {\n  ready: null,\n  degraded: null,\n  accepted: \"pending\",\n  provisioning: \"provisioning\",\n  preparing: \"preparing\",\n  deprovision: null,\n  deleting: null,\n  suspended: \"suspended\",\n  suspending: null,\n  resuming: null,\n};\n","import { ProgressStep, ProgressStepper } from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { PopoverStatus } from \"../types\";\nimport { PopoverStatusOrder } from \"../types\";\n\ntype StatusProgressStepperProps = {\n  currentStatus: PopoverStatus;\n};\n\nexport const StatusProgressStepper: VoidFunctionComponent<\n  StatusProgressStepperProps\n> = ({ currentStatus }) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n\n  const currentStep = PopoverStatusOrder.findIndex((s) => s === currentStatus);\n\n  const getVariant = (index: number) =>\n    (currentStep === index && \"info\") ||\n    (currentStep > index && \"success\") ||\n    \"default\";\n\n  return (\n    <ProgressStepper isVertical={true}>\n      <ProgressStep\n        id={\"pending\"}\n        titleId={\"pending\"}\n        isCurrent={currentStatus === \"pending\"}\n        description={t(\"kafka_status_popover.pending.description\")}\n        aria-label={t(\"kafka_status_popover.pending.description\")}\n        variant={getVariant(0)}\n      >\n        {t(\"kafka_status_popover.pending.title\")}\n      </ProgressStep>\n\n      <ProgressStep\n        id={\"provisioning\"}\n        titleId={\"provisioning\"}\n        isCurrent={currentStatus === \"provisioning\"}\n        description={t(\"kafka_status_popover.provisioning.description\")}\n        aria-label={t(\"kafka_status_popover.provisioning.description\")}\n        variant={getVariant(1)}\n      >\n        {t(\"kafka_status_popover.provisioning.title\")}\n      </ProgressStep>\n      <ProgressStep\n        id={\"preparing\"}\n        titleId={\"preparing\"}\n        isCurrent={currentStatus === \"preparing\"}\n        description={t(\"kafka_status_popover.preparing.description\")}\n        aria-label={t(\"kafka_status_popover.preparing.description\")}\n        variant={getVariant(2)}\n      >\n        {t(\"kafka_status_popover.preparing.title\")}\n      </ProgressStep>\n    </ProgressStepper>\n  );\n};\n","import {\n  Alert,\n  Button,\n  ButtonVariant,\n  Stack,\n  StackItem,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { Trans, useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { PopoverStatus } from \"../types\";\nimport { PopoverStatusOrder } from \"../types\";\nimport { StatusProgressStepper } from \"./StatusProgressStepper\";\n\nexport type StatusPopoverContentProps = {\n  currentStatus: PopoverStatus;\n  showWarning?: boolean;\n  showError?: boolean;\n  onClickConnectionTabLink: () => void;\n  onClickSupportLink: () => void;\n};\n\nexport const StatusPopoverContent: VoidFunctionComponent<\n  StatusPopoverContentProps\n> = ({\n  currentStatus,\n  showWarning = false,\n  showError = false,\n  onClickConnectionTabLink,\n  onClickSupportLink,\n}) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n\n  const currentStep = PopoverStatusOrder.findIndex((s) => s === currentStatus);\n\n  return (\n    <div>\n      <Stack hasGutter>\n        <StackItem>\n          {showWarning && (\n            <Alert\n              variant=\"warning\"\n              isInline\n              isPlain\n              title={t(\"kafka_status_popover.warning_or_error_title\")}\n            >\n              <TextContent>\n                <Text component={TextVariants.small}>\n                  <Trans\n                    ns={[\"create-kafka-instance\"]}\n                    i18nKey=\"kafka_status_popover.header_content_with_warning\"\n                    components={[\n                      <Button\n                        key=\"btn-connetcion-tab\"\n                        variant={ButtonVariant.link}\n                        onClick={onClickConnectionTabLink}\n                        isInline\n                      />,\n                    ]}\n                  />\n                </Text>\n              </TextContent>\n            </Alert>\n          )}\n          {showError && (\n            <Alert\n              variant=\"danger\"\n              isInline\n              isPlain\n              title={t(\"kafka_status_popover.warning_or_error_title\")}\n            >\n              <TextContent>\n                <Text component={TextVariants.small}>\n                  <Trans\n                    ns={[\"create-kafka-instance\"]}\n                    i18nKey=\"kafka_status_popover.header_content_with_error\"\n                    components={[\n                      <Button\n                        key=\"btn-connetcion-tab\"\n                        variant={ButtonVariant.link}\n                        onClick={onClickConnectionTabLink}\n                        isInline\n                      />,\n                      <Button\n                        key=\"btn-support-case\"\n                        variant={ButtonVariant.link}\n                        onClick={onClickSupportLink}\n                        isInline\n                      />,\n                    ]}\n                  />\n                </Text>\n              </TextContent>\n            </Alert>\n          )}\n          {!showError && !showWarning && (\n            <TextContent>\n              <Text component={TextVariants.small}>\n                <Trans\n                  ns={[\"create-kafka-instance\"]}\n                  i18nKey=\"kafka_status_popover.header_content\"\n                  components={[\n                    <Button\n                      key=\"btn-connetcion-tab\"\n                      variant={ButtonVariant.link}\n                      onClick={onClickConnectionTabLink}\n                      isInline\n                    />,\n                  ]}\n                />\n              </Text>\n            </TextContent>\n          )}\n        </StackItem>\n        <StackItem>\n          {t(\"common:progress_stepper_current_step\", {\n            currentStep,\n            total: PopoverStatusOrder.length,\n          })}\n        </StackItem>\n        <StackItem>\n          <StatusProgressStepper currentStatus={currentStatus} />\n        </StackItem>\n      </Stack>\n    </div>\n  );\n};\n","import type { PopoverProps } from \"@patternfly/react-core\";\nimport { Popover } from \"@patternfly/react-core\";\nimport type { RefObject, VoidFunctionComponent } from \"react\";\nimport { useCallback, useState } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { PopoverStatus } from \"../types\";\nimport type { StatusPopoverContentProps } from \"./StatusPopoverContent\";\nimport { StatusPopoverContent } from \"./StatusPopoverContent\";\n\nexport type StatusPopoverProps = {\n  status: PopoverStatus;\n  initialOpen?: boolean;\n  showWarning?: boolean;\n  showError?: boolean;\n  children?: PopoverProps[\"children\"];\n  onClickConnectionTabLink: StatusPopoverContentProps[\"onClickConnectionTabLink\"];\n  onClickSupportLink: StatusPopoverContentProps[\"onClickSupportLink\"];\n  reference?: RefObject<HTMLButtonElement>;\n};\n\n/**\n * ## Introduction\n *\n * This is a popover that can be reached from the Kafka Instance table while the status of the instance in question is “Creating”.\n * A Kafka instance usually takes a few minutes to create. The purpose of this popover is to give the user some insights into\n * the creation process of their instance while they wait for it to be available to use.\n *\n * - The text at the top explains that the instance will be ready shortly & suggests that the user creates a service account while they wait.\n *  (Provides a link to the “Connections tab\" where this is done).\n *\n * - The steps shown in the progress stepper are statuses that show in the api. They have been grouped together under the one overall\n * “Creating status” in the table.There is some descriptive text accompanying each step too. When these steps are complete the instance will be ready for use\n *\n * - The popover is only available while instance creation is in progress.\n * - After creation is complete the table displays the ready status and the popover is no longer available.\n *\n */\nexport const StatusPopover: VoidFunctionComponent<StatusPopoverProps> = ({\n  initialOpen = false,\n  status,\n  showWarning = false,\n  showError = false,\n  onClickConnectionTabLink,\n  onClickSupportLink,\n  reference,\n  children,\n}) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n\n  const [isVisible, setIsVisible] = useState(initialOpen);\n  const onClose = () => setIsVisible(false);\n\n  const handleClickConnectionTabLink = useCallback(() => {\n    onClose();\n    onClickConnectionTabLink();\n  }, [onClickConnectionTabLink]);\n\n  const handleClickSupportLink = useCallback(() => {\n    onClose();\n    onClickSupportLink();\n  }, [onClickSupportLink]);\n\n  return (\n    <Popover\n      headerContent={t(\"kafka_status_popover.title\")}\n      bodyContent={\n        <StatusPopoverContent\n          currentStatus={status}\n          showWarning={showWarning}\n          showError={showError}\n          onClickConnectionTabLink={handleClickConnectionTabLink}\n          onClickSupportLink={handleClickSupportLink}\n        />\n      }\n      isVisible={isVisible}\n      shouldOpen={() => setIsVisible(true)}\n      shouldClose={() => setIsVisible(false)}\n      position={\"right\"}\n      enableFlip={true}\n      reference={reference}\n    >\n      {children}\n    </Popover>\n  );\n};\n","import type { PopoverProps } from \"@patternfly/react-core\";\nimport { Popover, TextContent } from \"@patternfly/react-core\";\nimport { ExclamationTriangleIcon } from \"@patternfly/react-icons\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { RefObject, VoidFunctionComponent } from \"react\";\n\nexport type SuspendedPopoverProps = {\n  children?: PopoverProps[\"children\"];\n  reference?: RefObject<HTMLButtonElement>;\n};\n\nexport const SuspendedPopover: VoidFunctionComponent<SuspendedPopoverProps> = ({\n  children,\n  reference,\n}) => {\n  const { t } = useTranslation(\"kafka\");\n  return (\n    <Popover\n      alertSeverityVariant={\"warning\"}\n      headerIcon={<ExclamationTriangleIcon />}\n      headerContent={t(\"suspend_popover_title\")}\n      bodyContent={\n        <TextContent>\n          <p>{t(\"suspend_popover_body_1\")}</p>\n        </TextContent>\n      }\n      position={\"right\"}\n      reference={reference}\n    >\n      {children}\n    </Popover>\n  );\n};\n","import { differenceInMinutes } from \"date-fns\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback, useRef, useState } from \"react\";\nimport { useInterval } from \"@rhoas/app-services-ui-components\";\nimport type { Status } from \"../../types\";\nimport type { StatusPopoverProps } from \"./components\";\nimport { StatusLabel, StatusPopover, SuspendedPopover } from \"./components\";\nimport { KafkaToPopoverMapping } from \"./types\";\n\nexport type KafkaInstanceStatusProps = {\n  status: Status;\n  createdAt: Date;\n  warningAfterMinutes?: number;\n  errorAfterMinutes?: number;\n} & Pick<StatusPopoverProps, \"onClickConnectionTabLink\" | \"onClickSupportLink\">;\n\n/**\n * A component to show the status of a Kafka instance combining the\n * `StatusPopover` with the `StatusLabel`, with automatic handling of which\n * statuses should have a companion popover.\n */\nexport const KafkaInstanceStatus: VoidFunctionComponent<\n  KafkaInstanceStatusProps\n> = ({\n  status,\n  createdAt,\n  warningAfterMinutes = 15,\n  errorAfterMinutes = 30,\n  onClickConnectionTabLink,\n  onClickSupportLink,\n}) => {\n  const popoverStatus = KafkaToPopoverMapping[status];\n  const [alert, setAlert] = useState<\"warning\" | \"error\" | false>(false);\n  const labelRef = useRef<HTMLButtonElement>(null);\n\n  const checkCreatedAt = useCallback(() => {\n    const elapsed = differenceInMinutes(new Date(), createdAt);\n    if (elapsed > errorAfterMinutes) {\n      setAlert(\"error\");\n    } else if (elapsed > warningAfterMinutes) {\n      setAlert(\"warning\");\n    } else {\n      setAlert(false);\n    }\n  }, [createdAt, errorAfterMinutes, warningAfterMinutes]);\n\n  useInterval(checkCreatedAt, 5000);\n  const showWarning = alert === \"warning\";\n  const showError = alert === \"error\";\n  return (\n    <>\n      {popoverStatus === \"suspended\" ? (\n        <SuspendedPopover reference={labelRef} />\n      ) : (\n        popoverStatus && (\n          <StatusPopover\n            status={popoverStatus}\n            showWarning={showWarning}\n            showError={showError}\n            onClickConnectionTabLink={onClickConnectionTabLink}\n            onClickSupportLink={onClickSupportLink}\n            reference={labelRef}\n          />\n        )\n      )}\n      <StatusLabel\n        value={status}\n        showWarning={showWarning}\n        showError={showError}\n        withPopover={popoverStatus !== undefined}\n        ref={labelRef}\n      />\n    </>\n  );\n};\n","import { assign, createMachine } from \"xstate\";\nimport { DateIsoString } from \"../../types\";\nimport type { Message } from \"./types\";\nimport { isSameMessage } from \"./utils\";\n\nexport type MessageApiResponse = {\n  lastUpdated: Date;\n  messages: Message[];\n  partitions: number;\n  offsetMin: number;\n  offsetMax: number;\n\n  filter: {\n    partition: number | undefined;\n    offset: number | undefined;\n    timestamp: DateIsoString | undefined;\n    limit: number | undefined;\n    epoch: number | undefined;\n  };\n};\n\nexport const MessageBrowserMachine = createMachine(\n  {\n    id: \"message-browser\",\n    tsTypes: {} as import(\"./MessageBrowserMachine.typegen\").Typegen0,\n    schema: {\n      context: {} as {\n        // response\n        response: MessageApiResponse | undefined;\n\n        limit: number;\n        // optional input\n        partition: number | undefined;\n        offset: number | undefined;\n        epoch: number | undefined;\n        timestamp: DateIsoString | undefined;\n        selectedMessage: Message | undefined;\n      },\n      events: {} as\n        | {\n            type: \"fetchSuccess\";\n            messages: Message[];\n            partitions: number;\n            offsetMin: number;\n            offsetMax: number;\n          }\n        | { type: \"fetchFail\" }\n        | { type: \"refresh\" }\n        | { type: \"setPartition\"; value: number | undefined }\n        | { type: \"setOffset\"; value: number | undefined }\n        | { type: \"setTimestamp\"; value: DateIsoString | undefined }\n        | { type: \"setEpoch\"; value: number | undefined }\n        | { type: \"setLatest\" }\n        | { type: \"setLimit\"; value: number }\n        | { type: \"selectMessage\"; message: Message }\n        | { type: \"deselectMessage\" },\n    },\n    initial: \"initialLoading\",\n    context: {\n      // response\n      response: undefined,\n\n      limit: 10,\n      // optional input\n      partition: undefined,\n      offset: undefined,\n      timestamp: undefined,\n      selectedMessage: undefined,\n      epoch: undefined,\n    },\n    states: {\n      initialLoading: {\n        invoke: {\n          src: \"api\",\n        },\n        on: {\n          fetchSuccess: {\n            actions: \"setMessages\",\n            target: \"verifyMessages\",\n          },\n          fetchFail: \"error\",\n        },\n      },\n      verifyMessages: {\n        always: [{ cond: \"noMessages\", target: \"noData\" }, { target: \"ready\" }],\n      },\n      noData: {\n        on: {\n          refresh: \"initialLoading\",\n        },\n      },\n      error: {\n        on: {\n          refresh: \"initialLoading\",\n        },\n      },\n      ready: {\n        initial: \"pristine\",\n        states: {\n          pristine: {},\n          dirty: {\n            tags: \"dirty\",\n          },\n          shouldSearch: {\n            always: [\n              {\n                cond: \"areFiltersChanged\",\n                target: \"dirty\",\n              },\n              { target: \"pristine\" },\n            ],\n          },\n        },\n        always: [\n          {\n            cond: \"selectedMessageNotAvailable\",\n            actions: \"deselectMessage\",\n          },\n        ],\n        on: {\n          refresh: \"refreshing\",\n          setPartition: {\n            target: \".shouldSearch\",\n            actions: \"setPartition\",\n          },\n          setEpoch: {\n            actions: \"setEpoch\",\n            target: \".shouldSearch\",\n          },\n          setTimestamp: {\n            target: \".shouldSearch\",\n            actions: \"setTimestamp\",\n          },\n          setOffset: {\n            target: \".shouldSearch\",\n            actions: \"setOffset\",\n          },\n          setLatest: {\n            target: \".shouldSearch\",\n            actions: \"setLatest\",\n          },\n          setLimit: {\n            target: \".shouldSearch\",\n            actions: \"setLimit\",\n          },\n          selectMessage: {\n            actions: \"selectMessage\",\n          },\n          deselectMessage: {\n            actions: \"deselectMessage\",\n          },\n        },\n      },\n      refreshing: {\n        invoke: {\n          src: \"api\",\n        },\n        on: {\n          fetchSuccess: {\n            actions: \"setMessages\",\n            target: \"ready\",\n          },\n          fetchFail: {\n            target: \"ready\",\n          },\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      setMessages: assign(\n        (context, { messages, partitions, offsetMin, offsetMax }) => ({\n          response: {\n            lastUpdated: new Date(),\n            messages,\n            partitions,\n            offsetMin,\n            offsetMax,\n            filter: {\n              partition: context.partition,\n              timestamp: context.timestamp,\n              offset: context.offset,\n              limit: context.limit,\n              epoch: context.epoch,\n            },\n          },\n        })\n      ),\n      setPartition: assign((_, { value }) => ({ partition: value })),\n      setEpoch: assign((_, { value }) => ({\n        epoch: value,\n      })),\n      setTimestamp: assign((_, { value }) => ({\n        timestamp: value,\n      })),\n      setOffset: assign((_, { value }) => ({\n        offset: value,\n      })),\n      setLimit: assign((_, { value }) => ({\n        limit: value,\n      })),\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      setLatest: assign((_) => ({\n        timestamp: undefined,\n        offset: undefined,\n      })),\n      selectMessage: assign((_, { message }) => ({ selectedMessage: message })),\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      deselectMessage: assign((_) => ({ selectedMessage: undefined })),\n    },\n    guards: {\n      noMessages: ({ response }) =>\n        response === undefined || response.messages.length === 0,\n      selectedMessageNotAvailable: ({ response, selectedMessage }) =>\n        selectedMessage !== undefined &&\n        response?.messages.find((m) => isSameMessage(m, selectedMessage)) ===\n          undefined,\n      areFiltersChanged: (context) =>\n        context.response?.filter.limit !== context.limit ||\n        context.response?.filter.offset !== context.offset ||\n        context.response?.filter.partition !== context.partition ||\n        context.response?.filter.timestamp !== context.timestamp ||\n        context.response?.filter.epoch !== context.epoch,\n    },\n  }\n);\n","import type { Message } from \"./types\";\n\nexport function isSameMessage(m1: Message, m2: Message) {\n  return JSON.stringify(m1) === JSON.stringify(m2);\n}\n\nexport function beautifyUnknownValue(value: string): string {\n  try {\n    return JSON.stringify(JSON.parse(value), null, 2);\n  } catch (e) {\n    // noop\n  }\n  return value;\n}\n\nexport function truncate(value: string, length: number): [string, boolean] {\n  const shouldTruncate = value.length > length;\n  return [\n    shouldTruncate ? `${value.substring(0, length)}...` : value,\n    shouldTruncate,\n  ];\n}\n","import type { ResourceOperationValue } from \"./components/ResourceOperation\";\nimport type { ResourcePermissionValue } from \"./components/ResourcePermission\";\nimport type { ResourcePrefixRuleValue } from \"./components/ResourcePrefixRule\";\nimport type { ResourceTypeValue } from \"./components/ResourceType\";\n\nexport type AclOperation =\n  | \"ALL\"\n  | \"READ\"\n  | \"WRITE\"\n  | \"CREATE\"\n  | \"DELETE\"\n  | \"ALTER\"\n  | \"DESCRIBE\"\n  | \"DESCRIBE_CONFIGS\"\n  | \"ALTER_CONFIGS\";\n\nexport type AclResourceType =\n  | \"GROUP\"\n  | \"TOPIC\"\n  | \"CLUSTER\"\n  | \"TRANSACTIONAL_ID\";\n\nexport type AclPatternType = \"LITERAL\" | \"PREFIXED\";\n\nexport type AclPermissionType = \"ALLOW\" | \"DENY\";\n\nexport interface AclBinding {\n  /**\n   *\n   * @type {AclResourceType}\n   * @memberof AclBinding\n   */\n  resourceType: AclResourceType;\n  /**\n   *\n   * @type {string}\n   * @memberof AclBinding\n   */\n  resourceName: string;\n  /**\n   *\n   * @type {AclPatternType}\n   * @memberof AclBinding\n   */\n  patternType: AclPatternType;\n  /**\n   * Identifies the user or service account to which an ACL entry is bound. The literal prefix value of `User:` is required. May be used to specify all users with value `User:*`.\n   * @type {string}\n   * @memberof AclBinding\n   */\n  principal: string;\n  /**\n   *\n   * @type {AclOperation}\n   * @memberof AclBinding\n   */\n  operation: AclOperation;\n  /**\n   *\n   * @type {AclPermissionType}\n   * @memberof AclBinding\n   */\n  permission: AclPermissionType;\n}\nexport enum PrincipalType {\n  UserAccount = \"USER_ACCOUNT\",\n  ServiceAccount = \"SERVICE_ACCOUNT\",\n}\n\nexport type Account = {\n  id: string;\n  principalType: PrincipalType;\n  displayName: string;\n};\n\ntype ManualAcl = {\n  resourceType: ResourceTypeValue | undefined;\n  resourcePrefix: ResourcePrefixRuleValue;\n  resourceName: string | undefined;\n  resourcePermission: ResourcePermissionValue;\n  resourceOperation: ResourceOperationValue | undefined;\n};\n\ntype ProduceTopicTemplate = {\n  prefixRuleValue: ResourcePrefixRuleValue;\n  resourceNameValue: string | undefined;\n};\n\ntype ConsumeTopicTemplate = {\n  consumerResourceName: string | undefined;\n  consumerResourcePrefixRule: ResourcePrefixRuleValue;\n  topicResourceName: string | undefined;\n  topicResourcePrefixRule: ResourcePrefixRuleValue;\n};\n\ntype ManageAccessTemplate = {\n  instanceName: string;\n};\nexport type AddAclType =\n  | ({ type: \"manual\" } & ManualAcl)\n  | ({ type: \"consume-topic\" } & ConsumeTopicTemplate)\n  | ({ type: \"produce-topic\" } & ProduceTopicTemplate)\n  | ({ type: \"manage-access\" } & ManageAccessTemplate);\n\nexport const createEmptyManualAcl = (): AddAclType => {\n  return {\n    type: \"manual\",\n    resourceName: undefined,\n    resourceType: undefined,\n    resourceOperation: undefined,\n    resourcePrefix: \"Is\",\n    resourcePermission: \"allow\",\n  };\n};\nexport const createEmptyProduceTopicAcl = (): AddAclType => {\n  return {\n    type: \"produce-topic\",\n    prefixRuleValue: \"Is\",\n    resourceNameValue: undefined,\n  };\n};\nexport const createEmptyConsumeTopicAcl = (): AddAclType => {\n  return {\n    type: \"consume-topic\",\n    consumerResourceName: undefined,\n    consumerResourcePrefixRule: \"Is\",\n    topicResourceName: undefined,\n    topicResourcePrefixRule: \"Is\",\n  };\n};\nexport const createEmptyManageAccessAcl = (kafkaName: string): AddAclType => {\n  return {\n    type: \"manage-access\",\n    instanceName: kafkaName,\n  };\n};\n","import { DropdownGroup } from \"@patternfly/react-core\";\nimport { ActionsColumn } from \"@patternfly/react-table\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\n\nexport type KafkaInstanceActionsProps = {\n  onDetails: () => void;\n  onConnection: () => void;\n  canOpenConnection: boolean;\n  canChangeOwner: boolean;\n  onChangeOwner: () => void;\n  canDelete: boolean;\n  onDelete: () => void;\n};\n\nexport const KafkaInstanceActions: VoidFunctionComponent<\n  KafkaInstanceActionsProps\n> = ({\n  onDetails,\n  onConnection,\n  canOpenConnection,\n  canChangeOwner,\n  onChangeOwner,\n  canDelete,\n  onDelete,\n}) => {\n  const { t } = useTranslation(\"kafka\");\n  return (\n    <ActionsColumn\n      items={[\n        {\n          customChild: (\n            <DropdownGroup\n              label={t(\"table.actions.view-instance-information\")}\n            />\n          ),\n        },\n        {\n          title: t(\"table.actions.details\"),\n          onClick: onDetails,\n        },\n        {\n          title: t(\"table.actions.connection\"),\n          ...(!canOpenConnection\n            ? {\n                isDisabled: true,\n                tooltipProps: {\n                  position: \"left\",\n                  content: t(\"kafka:no_permission_to_see_connections\"),\n                },\n                tooltip: true,\n                style: {\n                  pointerEvents: \"auto\",\n                  cursor: \"default\",\n                },\n              }\n            : {\n                onClick: onConnection,\n              }),\n        },\n        {\n          isSeparator: true,\n        },\n        {\n          title: t(\"table.actions.change-owner\"),\n          ...(!canChangeOwner\n            ? {\n                isDisabled: true,\n                tooltipProps: {\n                  position: \"left\",\n                  content: t(\"kafka:no_permission_to_change_owner\"),\n                },\n                tooltip: true,\n                style: {\n                  pointerEvents: \"auto\",\n                  cursor: \"default\",\n                },\n              }\n            : {\n                onClick: onChangeOwner,\n              }),\n        },\n        {\n          title: t(\"table.actions.delete\"),\n          ...(!canDelete\n            ? {\n                isDisabled: true,\n                tooltipProps: {\n                  position: \"left\",\n                  content: t(\"kafka:no_permission_to_delete_kafka\"),\n                },\n                tooltip: true,\n                style: {\n                  pointerEvents: \"auto\",\n                  cursor: \"default\",\n                },\n              }\n            : {\n                onClick: onDelete,\n              }),\n        },\n      ]}\n    />\n  );\n};\n","import {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { PlusCircleIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { Trans, useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport type EmptyStateNoInstancesProps = {\n  onCreate: () => void;\n  onQuickstartGuide: () => void;\n};\n\nexport const EmptyStateNoInstances: VoidFunctionComponent<\n  EmptyStateNoInstancesProps\n> = ({ onCreate, onQuickstartGuide }) => {\n  const { t } = useTranslation(\"kafka\");\n  return (\n    <EmptyState variant={EmptyStateVariant.xs}>\n      <EmptyStateIcon icon={PlusCircleIcon} />\n      <Title headingLevel=\"h2\" size=\"lg\">\n        {t(\"empty_state_no_instances_title\")}\n      </Title>\n      <EmptyStateBody>\n        <Trans\n          ns={\"kafka\"}\n          i18nKey={\"empty_state_no_instances_body\"}\n          components={[<a onClick={onQuickstartGuide} />]}\n        />\n      </EmptyStateBody>\n      <Button ouiaId=\"button-create\" variant=\"primary\" onClick={onCreate}>\n        {t(\"empty_state_no_instances_create_instance\")}\n      </Button>\n    </EmptyState>\n  );\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { SearchIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { Trans, useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport type EmptyStateNoResultsProps = {\n  onClearAllFilters: () => void;\n};\n\nexport const EmptyStateNoResults: VoidFunctionComponent<\n  EmptyStateNoResultsProps\n> = ({ onClearAllFilters }) => {\n  const { t } = useTranslation(\"kafka\");\n  return (\n    <EmptyState variant={EmptyStateVariant.xs}>\n      <EmptyStateIcon icon={SearchIcon} />\n      <Title headingLevel=\"h2\" size=\"lg\">\n        {t(\"empty_state_no_results_found_title\")}\n      </Title>\n      <EmptyStateBody>\n        <Trans\n          ns={\"kafka\"}\n          i18nKey={\"empty_state_no_results_found_body\"}\n          components={[<a onClick={onClearAllFilters} />]}\n        />\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import { Button, PageSection, Stack, StackItem } from \"@patternfly/react-core\";\nimport type { TableViewProps } from \"@rhoas/app-services-ui-components\";\nimport {\n  FormatDate,\n  TableView,\n  Trans,\n  useTranslation,\n} from \"@rhoas/app-services-ui-components\";\nimport { parseISO } from \"date-fns\";\nimport { Link } from \"react-router-dom\";\nimport { useKafkaLabels } from \"../../hooks\";\nimport type { KafkaInstance, SimplifiedStatus } from \"../../types\";\nimport { DeletingStatuses } from \"../../types\";\nimport { KafkaInstanceActions } from \"../KafkaInstanceActions\";\nimport { KafkaInstanceStatus } from \"../KafkaInstanceStatus\";\nimport type {\n  EmptyStateNoInstancesProps,\n  EmptyStateNoResultsProps,\n} from \"./components\";\nimport { EmptyStateNoInstances, EmptyStateNoResults } from \"./components\";\n\nconst Columns = [\n  \"name\",\n  \"owner\",\n  \"createdAt\",\n  \"provider\",\n  \"region\",\n  \"status\",\n] as const;\n\nexport type KafkaInstancesProps<T extends KafkaInstance> = {\n  instances: Array<T> | undefined | null;\n  getUrlForInstance: (row: T) => string;\n  names: string[];\n  owners: string[];\n  statuses: string[];\n  onCreate: () => void;\n  onSearchName: (value: string) => void;\n  onRemoveNameChip: (value: string) => void;\n  onRemoveNameChips: () => void;\n  onSearchOwner: (value: string) => void;\n  onRemoveOwnerChip: (value: string) => void;\n  onRemoveOwnerChips: () => void;\n  onSearchStatus: (value: SimplifiedStatus) => void;\n  onRemoveStatusChip: (value: SimplifiedStatus) => void;\n  onRemoveStatusChips: () => void;\n  onDetails: (row: T) => void;\n  onConnection: (row: T) => void;\n  canChangeOwner: (row: T) => boolean;\n  onChangeOwner: (row: T) => void;\n  canDelete: (row: T) => boolean;\n  onDelete: (row: T) => void;\n  onClickConnectionTabLink: (row: T) => void;\n  onClickSupportLink: () => void;\n  onInstanceLinkClick: (row: T) => void;\n  canHaveInstanceLink: (row: T) => boolean;\n  canOpenConnection: (row: T) => boolean;\n} & Pick<\n  TableViewProps<T, typeof Columns[number]>,\n  | \"itemCount\"\n  | \"page\"\n  | \"perPage\"\n  | \"onPageChange\"\n  | \"isRowSelected\"\n  | \"isColumnSortable\"\n  | \"onClearAllFilters\"\n> &\n  EmptyStateNoInstancesProps &\n  EmptyStateNoResultsProps;\n\nexport const KafkaInstances = <T extends KafkaInstance>({\n  instances,\n  itemCount,\n  page,\n  perPage,\n  names,\n  owners,\n  statuses,\n  getUrlForInstance,\n  isRowSelected,\n  isColumnSortable,\n  onPageChange,\n  onDetails,\n  onConnection,\n  canChangeOwner,\n  onChangeOwner,\n  canDelete,\n  onDelete,\n  onCreate,\n  onQuickstartGuide,\n  onClickConnectionTabLink,\n  onClickSupportLink,\n  onInstanceLinkClick,\n  onSearchName,\n  onRemoveNameChip,\n  onRemoveNameChips,\n  onSearchOwner,\n  onRemoveOwnerChip,\n  onRemoveOwnerChips,\n  onSearchStatus,\n  onRemoveStatusChip,\n  onRemoveStatusChips,\n  onClearAllFilters,\n\n  canHaveInstanceLink,\n  canOpenConnection,\n}: KafkaInstancesProps<T>) => {\n  const { t } = useTranslation(\"kafka\");\n  const labels = useKafkaLabels();\n  const breakpoint = \"lg\";\n\n  const isFiltered =\n    names.length > 0 || owners.length > 0 || statuses.length > 0;\n\n  return (\n    <PageSection isFilled={true}>\n      <TableView\n        data={instances}\n        columns={Columns}\n        renderHeader={({ column, Th, key }) => (\n          <Th key={key}>{labels.fields[column]}</Th>\n        )}\n        renderCell={({ column, row, Td, key }) => {\n          const timeCreatedDate = parseISO(row.createdAt);\n          const instanceLinkEnable = canHaveInstanceLink(row);\n          return (\n            <Td key={key} dataLabel={labels.fields[column]}>\n              {(() => {\n                switch (column) {\n                  case \"name\":\n                    return (\n                      <Button\n                        variant=\"link\"\n                        component={(props) => (\n                          <Link to={getUrlForInstance(row)} {...props}>\n                            {row.name}\n                          </Link>\n                        )}\n                        isInline={true}\n                        isAriaDisabled={!instanceLinkEnable}\n                        isDisabled={!instanceLinkEnable}\n                        onClick={() => onInstanceLinkClick(row)}\n                      />\n                    );\n                  case \"provider\":\n                    return labels.providers[row.provider];\n                  case \"createdAt\":\n                    return (\n                      <Stack>\n                        <StackItem>\n                          <FormatDate\n                            date={timeCreatedDate}\n                            format={\"distanceToNowWithAgo\"}\n                          />\n                        </StackItem>\n                        {row.expiryDate && (\n                          <StackItem>\n                            <Trans\n                              i18nKey=\"will_expire_short\"\n                              ns={[\"kafka\"]}\n                              components={{\n                                time: (\n                                  <FormatDate\n                                    date={parseISO(row.expiryDate)}\n                                    format=\"expiration\"\n                                  />\n                                ),\n                              }}\n                            />\n                          </StackItem>\n                        )}\n                      </Stack>\n                    );\n                  case \"status\":\n                    return (\n                      <KafkaInstanceStatus\n                        status={row[\"status\"]}\n                        createdAt={timeCreatedDate}\n                        onClickConnectionTabLink={() =>\n                          onClickConnectionTabLink(row)\n                        }\n                        onClickSupportLink={onClickSupportLink}\n                      />\n                    );\n                  default:\n                    return row[column];\n                }\n              })()}\n            </Td>\n          );\n        }}\n        renderActions={({ row }) => {\n          const changeOwnerEnabled = canChangeOwner(row);\n          const deleteEnabled = canDelete(row);\n          const openConnectionEnabled = canOpenConnection(row);\n          return (\n            <KafkaInstanceActions\n              onDetails={() => onDetails(row)}\n              onConnection={() => onConnection(row)}\n              canOpenConnection={openConnectionEnabled}\n              canChangeOwner={changeOwnerEnabled}\n              onChangeOwner={() => onChangeOwner(row)}\n              canDelete={deleteEnabled}\n              onDelete={() => onDelete(row)}\n            />\n          );\n        }}\n        onRowClick={({ row }) => onDetails(row)}\n        isColumnSortable={isColumnSortable}\n        isRowSelected={isRowSelected}\n        isRowDeleted={({ row }) => DeletingStatuses.includes(row[\"status\"])}\n        toolbarBreakpoint={breakpoint}\n        filters={{\n          [labels.fields.name]: {\n            type: \"search\",\n            chips: names,\n            onSearch: onSearchName,\n            onRemoveChip: onRemoveNameChip,\n            onRemoveGroup: onRemoveNameChips,\n            validate: (value) => /^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(value),\n            errorMessage: t(\"kafka:input_field_invalid_message\"),\n          },\n          [labels.fields.owner]: {\n            type: \"search\",\n            chips: owners,\n            onSearch: onSearchOwner,\n            onRemoveChip: onRemoveOwnerChip,\n            onRemoveGroup: onRemoveOwnerChips,\n            validate: (value: string) => !/[\"$^<>|+%/;:,\\s*=~#()]/.test(value),\n            errorMessage: t(\"kafka:input_field_invalid_message\"),\n          },\n          [labels.fields.status]: {\n            type: \"checkbox\",\n            chips: statuses,\n            options: labels.statusesSimplified,\n            onToggle: onSearchStatus,\n            onRemoveChip: onRemoveStatusChip,\n            onRemoveGroup: onRemoveStatusChips,\n          },\n        }}\n        actions={[\n          {\n            label: t(\"create_instance\"),\n            onClick: onCreate,\n            isPrimary: true,\n          },\n        ]}\n        itemCount={itemCount}\n        page={page}\n        perPage={perPage}\n        onPageChange={onPageChange}\n        onClearAllFilters={onClearAllFilters}\n        ariaLabel={t(\"table.title\")}\n        isFiltered={isFiltered}\n        emptyStateNoData={\n          <EmptyStateNoInstances\n            onCreate={onCreate}\n            onQuickstartGuide={onQuickstartGuide}\n          />\n        }\n        emptyStateNoResults={\n          <EmptyStateNoResults onClearAllFilters={onClearAllFilters} />\n        }\n      />\n    </PageSection>\n  );\n};\n","import {\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface CapacityTable {\n  name: string;\n  firstStreamingUnit: string;\n  secondStreamingUnit: string;\n}\n\nexport const KafkaInstanceCapacityTable: FunctionComponent = () => {\n  const { t } = useTranslation(\"kafkaoverview-v2\");\n\n  const capacityTable: CapacityTable[] = [\n    {\n      name: \"Ingress (MB/second)\",\n      firstStreamingUnit: \"up to 50\",\n      secondStreamingUnit: \"up to 100\",\n    },\n    {\n      name: \"Egress (MB/second)\",\n      firstStreamingUnit: \"up to 100\",\n      secondStreamingUnit: \"up to 200\",\n    },\n    {\n      name: \"Storage* (GB)\",\n      firstStreamingUnit: \"up to 1000\",\n      secondStreamingUnit: \"up to 2000\",\n    },\n    {\n      name: \"Topic partitions\",\n      firstStreamingUnit: \"up to 1500\",\n      secondStreamingUnit: \"up to 3000\",\n    },\n    {\n      name: \"Client connections\",\n      firstStreamingUnit: \"up to 3000\",\n      secondStreamingUnit: \"up to 6000\",\n    },\n    {\n      name: \"Connection rate (connections/second)\",\n      firstStreamingUnit: \"up to 100\",\n      secondStreamingUnit: \"up to 200\",\n    },\n    {\n      name: \"Message size (MB)\",\n      firstStreamingUnit: \"up to 1\",\n      secondStreamingUnit: \"up to 1\",\n    },\n  ];\n\n  const columnNames = {\n    name: \"\",\n    firstStreamingUnit: t(\"firstStreamingUnit\"),\n    secondStreamingUnit: t(\"secondStreamingUnit\"),\n  };\n\n  return (\n    <TableComposable>\n      <Thead>\n        <Tr>\n          <Th>{columnNames.name}</Th>\n          <Th>{columnNames.firstStreamingUnit}</Th>\n          <Th>{columnNames.secondStreamingUnit}</Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        {capacityTable.map((table) => {\n          return (\n            <Tr key={table.name}>\n              <Td dataLabel={columnNames.name}>{table.name}</Td>\n              <Td dataLabel={columnNames.firstStreamingUnit}>\n                {table.firstStreamingUnit}\n              </Td>\n              <Td dataLabel={columnNames.secondStreamingUnit}>\n                {table.secondStreamingUnit}\n              </Td>\n            </Tr>\n          );\n        })}\n      </Tbody>\n    </TableComposable>\n  );\n};\n","import {\n  Bullseye,\n  Card,\n  PageSection,\n  PageSectionVariants,\n  Stack,\n  StackItem,\n  Text,\n  TextVariants,\n  Title,\n} from \"@patternfly/react-core\";\nimport classNames from \"classnames\";\nimport type {\n  CSSProperties,\n  FunctionComponent,\n  ReactNode,\n  VoidFunctionComponent,\n} from \"react\";\nimport \"./MarketingPage.css\";\n\nexport type MarketingPageHeroProps = {\n  title: string;\n  tagLine: string;\n  description: string;\n  description2?: string;\n  heroImage: string;\n  heroImageSize: number;\n  heroImageCanRepeat?: boolean;\n  heroImagePositionY?: number;\n  cta?: ReactNode;\n  variant?: \"light\" | \"dark\";\n};\n\nexport const MarketingPageHero: VoidFunctionComponent<\n  MarketingPageHeroProps\n> = ({\n  title,\n  tagLine,\n  description,\n  description2,\n  heroImage,\n  heroImageSize,\n  heroImageCanRepeat = true,\n  heroImagePositionY = 0,\n  cta,\n  variant = \"light\",\n}) => {\n  const style = {\n    \"--appsrv-marketing--banner--before--BackgroundImage\": `url(${heroImage})`,\n    \"--appsrv-marketing--banner--before--BackgroundSize\": `${heroImageSize}px`,\n    \"--appsrv-marketing--banner--before--BackgroundRepeat\": heroImageCanRepeat\n      ? \"repeat\"\n      : \"no-repeat\",\n    \"--appsrv-marketing--banner--before--BackgroundPositionY\": `${heroImagePositionY}px`,\n  } as CSSProperties;\n  return (\n    <PageSection\n      className={classNames(\"appsrv-marketing--banner\", {\n        \"pf-u-background-color-dark-100\": variant === \"dark\",\n        \"pf-u-background-color-100\": variant === \"light\",\n      })}\n      variant={\n        variant === \"dark\"\n          ? PageSectionVariants.dark\n          : PageSectionVariants.light\n      }\n      style={style}\n    >\n      <Stack hasGutter>\n        <Title headingLevel=\"h1\" size=\"2xl\">\n          {title}\n        </Title>\n        <Text\n          className={`appsrv-marketing--banner__tagline ${\n            variant === \"dark\" ? \"\" : \"pf-u-color-200\"\n          }`}\n        >\n          {tagLine}\n        </Text>\n        <Text component={TextVariants.p}>{description}</Text>\n        {description2 && (\n          <Text component={TextVariants.p} className=\"pf-u-mt-md\">\n            {description2}\n          </Text>\n        )}\n        {cta && <StackItem>{cta}</StackItem>}\n      </Stack>\n    </PageSection>\n  );\n};\n\nexport const MarketingPageBanner: FunctionComponent = ({ children }) => {\n  return (\n    <PageSection\n      variant={PageSectionVariants.light}\n      className=\"appsrv-marketing--page-section--marketing pf-u-background-color-100\"\n    >\n      <Bullseye>\n        <Text\n          component={TextVariants.p}\n          className=\"appsrv-marketing--banner--text-only\"\n        >\n          {children}\n        </Text>\n      </Bullseye>\n    </PageSection>\n  );\n};\n\nexport type MarketingPageSectionProps = {\n  className?: string;\n};\n\nexport const MarketingPageSection: FunctionComponent<\n  MarketingPageSectionProps & {\n    variant?: \"dark\" | \"light\" | \"default\";\n  }\n> = ({\n  className = \"appsrv-marketing--page-section--marketing\",\n  variant = \"default\",\n  children,\n}) => (\n  <PageSection\n    isWidthLimited\n    className={classNames(className, {\n      \"pf-u-background-color-dark-100\": variant === \"dark\",\n      \"pf-u-background-color-100\": variant === \"light\",\n    })}\n    variant={\n      variant === \"dark\"\n        ? PageSectionVariants.dark\n        : variant === \"light\"\n        ? PageSectionVariants.light\n        : PageSectionVariants.default\n    }\n  >\n    {children}\n  </PageSection>\n);\n\nexport const MarketingPageVideoCard: VoidFunctionComponent<{\n  src: string;\n  title: string;\n}> = ({ src, title }) => (\n  <Card className=\"appsrv-marketing--video\">\n    <div className=\"appsrv-marketing--video__wrapper\">\n      <iframe\n        src={src}\n        title={title}\n        frameBorder=\"0\"\n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n        allowFullScreen\n      ></iframe>\n    </div>\n  </Card>\n);\n","import {\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n  CardHeaderMain,\n  CardTitle,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Divider,\n  Flex,\n  FlexItem,\n  Grid,\n  Split,\n  SplitItem,\n  Stack,\n  Text,\n  TextContent,\n  TextVariants,\n  Title,\n} from \"@patternfly/react-core\";\nimport {\n  AppSpeedKeyArt,\n  ExternalLink,\n} from \"@rhoas/app-services-ui-components\";\nimport type { FunctionComponent } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { KafkaInstanceCapacityTable } from \"./KafkaInstanceCapacityTable\";\nimport { LogoAWS, LogoAzure, LogoGCP } from \"./Logos/images\";\nimport { MarketingPageHero, MarketingPageSection } from \"./MarketingPage\";\n\nexport const KafkaPageV3: FunctionComponent = () => {\n  const { t } = useTranslation([\"kafkaoverview-v3\"]);\n  return (\n    <>\n      <MarketingPageHero\n        title={t(\"heroTitle\")}\n        tagLine={t(\"heroTagline\")}\n        description={t(\"heroDescription\")}\n        heroImage={AppSpeedKeyArt}\n        heroImageSize={478}\n        heroImageCanRepeat={false}\n        heroImagePositionY={-99}\n      />\n      <MarketingPageSection>\n        <Grid hasGutter lg={6}>\n          <Card\n            ouiaId=\"card-overview-purchase-now\"\n            aria-label={t(\"kafkaoverview:purchaseCardTitle\")}\n          >\n            <CardHeader>\n              <CardHeaderMain>\n                <CardTitle>\n                  <Title headingLevel=\"h2\">\n                    <Trans\n                      ns={\"kafkaoverview-v3\"}\n                      i18nKey={\"purchaseCardTitle\"}\n                    >\n                      <span className=\"pf-u-color-200 pf-u-font-size-sm\"></span>\n                    </Trans>\n                  </Title>\n                </CardTitle>\n              </CardHeaderMain>\n            </CardHeader>\n            <CardBody>{t(\"purchaseCardMainText\")}</CardBody>\n            <CardFooter>\n              <Flex spaceItems={{ default: \"spaceItems2xl\" }}>\n                <FlexItem>\n                  <ExternalLink\n                    href={\n                      \"https://marketplace.redhat.com/en-us/products/red-hat-openshift-streams-for-apache-kafka\"\n                    }\n                    testId={\"cardPurchase-buttonRH\"}\n                    className={\"pf-u-ml-md \"}\n                  >\n                    <Trans\n                      ns={\"kafkaoverview-v3\"}\n                      i18nKey={\"purchaseCardCallToActionButtonRedHat\"}\n                      components={{\n                        bold: <strong />,\n                        size: <span className=\"pf-u-font-size-lg\" />,\n                      }}\n                    />\n                  </ExternalLink>\n                </FlexItem>\n\n                <FlexItem>\n                  <ExternalLink\n                    href={\n                      \"https://aws.amazon.com/marketplace/pp/prodview-3xohcoyuwkumc\"\n                    }\n                    testId={\"cardPurchase-buttonAWS\"}\n                    className={\"pf-u-ml-md\"}\n                  >\n                    <Trans\n                      ns={\"kafkaoverview-v3\"}\n                      i18nKey={\"purchaseCardCallToActionButtonAWS\"}\n                      components={{\n                        bold: <strong />,\n                        size: <span className=\"pf-u-font-size-lg\" />,\n                      }}\n                    />\n                  </ExternalLink>\n                </FlexItem>\n              </Flex>\n            </CardFooter>\n          </Card>\n          <Card\n            ouiaId=\"card-overview-contact-sales\"\n            aria-label={t(\"kafkaoverview:contactSalesCardTitle\")}\n          >\n            <CardHeader>\n              <CardTitle>\n                <Title headingLevel=\"h2\">\n                  <Trans\n                    ns={\"kafkaoverview-v3\"}\n                    i18nKey={\"contactSalesCardTitle\"}\n                  >\n                    <span className=\"pf-u-color-200 pf-u-font-size-sm\"></span>\n                  </Trans>\n                </Title>\n              </CardTitle>\n            </CardHeader>\n            <CardBody>{t(\"contactSalesCardMainText\")}</CardBody>\n            <CardFooter>\n              <ExternalLink\n                href={\n                  \"https://www.redhat.com/en/technologies/cloud-computing/openshift/openshift-streams-for-apache-kafka#contact-us\"\n                }\n                testId={\"cardContactSales-buttonCTA\"}\n                className={\"pf-u-ml-md\"}\n              >\n                <Trans\n                  ns={\"kafkaoverview-v3\"}\n                  i18nKey={\"contactSalesCardCallToActionButton\"}\n                  components={{\n                    bold: <strong />,\n                    size: <span className=\"pf-u-font-size-lg\" />,\n                  }}\n                />\n              </ExternalLink>\n            </CardFooter>\n          </Card>\n        </Grid>\n      </MarketingPageSection>\n      <MarketingPageSection\n        className={\"kafka-overview--page-section--marketing\"}\n      >\n        <Card>\n          <CardTitle>\n            <Title headingLevel=\"h2\">{t(\"pricingModalTitle\")}</Title>\n          </CardTitle>\n          <CardBody>\n            <Flex spaceItems={{ default: \"spaceItemsXl\" }}>\n              <Flex\n                alignSelf={{ default: \"alignSelfCenter\" }}\n                justifyContent={{ default: \"justifyContentCenter\" }}\n                flex={{ default: \"flex_1\" }}\n              >\n                <FlexItem>\n                  <DescriptionList isHorizontal>\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>\n                        {t(\"steamingUnit\")}\n                      </DescriptionListTerm>\n                      <DescriptionListDescription>\n                        {t(\"streamingUnit_price\")}\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>\n                        {t(\"dataTransfer\")}\n                      </DescriptionListTerm>\n                      <DescriptionListDescription>\n                        {t(\"dataTransfer_price\")}\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>{t(\"storage\")}</DescriptionListTerm>\n                      <DescriptionListDescription>\n                        {t(\"storage_price\")}\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                  </DescriptionList>\n                </FlexItem>\n              </Flex>\n              <Divider isVertical />\n              <FlexItem flex={{ default: \"flex_1\" }}>\n                <TextContent>\n                  <Text component={TextVariants.p}>\n                    <Trans\n                      ns={\"kafkaoverview-v3\"}\n                      i18nKey={\"streamingUnitText\"}\n                      components={{ bold: <strong /> }}\n                    />\n                  </Text>\n                </TextContent>\n              </FlexItem>\n            </Flex>\n          </CardBody>\n        </Card>\n      </MarketingPageSection>\n      <MarketingPageSection\n        className={\"kafka-overview--page-section--marketing\"}\n      >\n        <Card>\n          <CardTitle>\n            <Title headingLevel=\"h2\">{t(\"kafkaInstanceCapacityTitle\")}</Title>\n          </CardTitle>\n          <CardBody>\n            <Stack hasGutter>\n              <Text component={TextVariants.p}>\n                {t(\"kafkaInstanceCapacityDescription\")}\n              </Text>\n              <KafkaInstanceCapacityTable />\n            </Stack>\n          </CardBody>\n          <CardFooter>\n            <TextContent className={\"pf-u-font-size-sm\"}>\n              <Trans\n                ns={\"kafkaoverview-v3\"}\n                i18nKey={\"kafkaInstanceCapacityfooter\"}\n                components={[\n                  <ExternalLink\n                    href={\"https://access.redhat.com/support\"}\n                    testId={\"SupportLink\"}\n                    className={\"pf-u-ml-xs\"}\n                  />,\n                  <ExternalLink\n                    href={\n                      \"https://access.redhat.com/documentation/en-us/red_hat_openshift_streams_for_apache_kafka/1/guide/aced8e5e-8229-4cb2-82f9-87a8caa24bb3\"\n                    }\n                    testId={\"MonitoringDiskSpaceLink\"}\n                    className={\"pf-u-ml-xs\"}\n                  />,\n                ]}\n              />\n            </TextContent>\n          </CardFooter>\n        </Card>\n      </MarketingPageSection>\n      <MarketingPageSection\n        className={\"kafka-overview--page-section--marketing\"}\n      >\n        <Card>\n          <CardTitle>\n            <Title headingLevel=\"h2\">{t(\"cloudProvidersTitle\")}</Title>\n          </CardTitle>\n          <CardBody>\n            <Flex\n              spaceItems={{ default: \"spaceItemsXl\" }}\n              direction={{ default: \"column\", xl: \"row\" }}\n            >\n              <Flex\n                justifyContent={{ default: \"justifyContentCenter\" }}\n                flex={{ default: \"flex_1\" }}\n              >\n                <FlexItem>\n                  <Split hasGutter>\n                    <SplitItem>\n                      <img src={LogoAWS} alt={\"\"} style={{ height: \"60px\" }} />\n                    </SplitItem>\n                    <SplitItem>\n                      <Title headingLevel=\"h2\" className={\"pf-u-pt-sm\"}>\n                        {t(\"awsWebServiceTitle\")}\n                      </Title>\n                    </SplitItem>\n                  </Split>\n                </FlexItem>\n              </Flex>\n              <Divider\n                orientation={{ default: \"horizontal\", xl: \"vertical\" }}\n              />\n              <Flex\n                justifyContent={{ default: \"justifyContentCenter\" }}\n                flex={{ default: \"flex_1\" }}\n              >\n                <FlexItem>\n                  <Split hasGutter>\n                    <SplitItem>\n                      <img src={LogoGCP} alt={\"\"} style={{ height: \"60px\" }} />\n                    </SplitItem>\n                    <SplitItem>\n                      <Title headingLevel=\"h2\" className={\"pf-u-pt-sm\"}>\n                        {t(\"googleCloudProviderTitle\")}\n                      </Title>\n                      <Text\n                        component={TextVariants.p}\n                        className={\"pf-u-color-200\"}\n                      >\n                        {t(\"googleCloudProviderDescription\")}\n                      </Text>\n                    </SplitItem>\n                  </Split>\n                </FlexItem>\n              </Flex>\n              <Divider\n                orientation={{ default: \"horizontal\", xl: \"vertical\" }}\n              />\n              <Flex\n                justifyContent={{ default: \"justifyContentCenter\" }}\n                flex={{ default: \"flex_1\" }}\n              >\n                <FlexItem>\n                  <Split hasGutter>\n                    <SplitItem>\n                      <img\n                        src={LogoAzure}\n                        alt={\"\"}\n                        style={{ height: \"60px\" }}\n                      />\n                    </SplitItem>\n                    <SplitItem>\n                      <Title headingLevel=\"h2\" className={\"pf-u-pt-sm\"}>\n                        {t(\"microsoftAzureTitle\")}\n                      </Title>\n                      <Text\n                        component={TextVariants.p}\n                        className={\"pf-u-color-200\"}\n                      >\n                        {t(\"microsoftAzureDescription\")}\n                      </Text>\n                    </SplitItem>\n                  </Split>\n                </FlexItem>\n              </Flex>\n            </Flex>\n          </CardBody>\n        </Card>\n      </MarketingPageSection>\n    </>\n  );\n};\n","import {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { PlusCircleIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nexport type EmptyStateNoTopicProps = {\n  onCreateTopic: () => void;\n};\n\nexport const EmptyStateNoTopic: VoidFunctionComponent<\n  EmptyStateNoTopicProps\n> = ({ onCreateTopic }) => {\n  const { t } = useTranslation(\"topic\");\n\n  return (\n    <EmptyState\n      data-ouia-page-id=\"emptyStateTopics\"\n      variant={EmptyStateVariant.large}\n    >\n      <EmptyStateIcon icon={PlusCircleIcon} />\n      <Title headingLevel=\"h2\" size=\"lg\">\n        {t(\"empty_topics_title\")}\n      </Title>\n      <EmptyStateBody>{t(\"empty_topics_body\")}</EmptyStateBody>\n      <Button\n        data-testid=\"actionCreateTopic\"\n        ouiaId=\"button-create\"\n        variant=\"primary\"\n        onClick={onCreateTopic}\n      >\n        {t(\"create_topic\")}\n      </Button>\n    </EmptyState>\n  );\n};\n","import { RetentionSizeUnits, RetentionTimeUnits } from \"../../types\";\n\nexport const unitsToBytes = {\n  [RetentionSizeUnits.BYTE]: 1,\n  [RetentionSizeUnits.KIBIBYTE]: 1024,\n  [RetentionSizeUnits.MEBIBYTE]: 1048576,\n  [RetentionSizeUnits.GIBIBYTE]: 1073741824,\n  [RetentionSizeUnits.TEBIBYTE]: 1.0995116e12,\n};\n\nexport const unitsToMilliSecond = {\n  [RetentionTimeUnits.MILLISECOND]: 1,\n  [RetentionTimeUnits.SECOND]: 1000,\n  [RetentionTimeUnits.MINUTE]: 60000,\n  [RetentionTimeUnits.HOUR]: 3600000,\n  [RetentionTimeUnits.DAY]: 86400000,\n};\n\ntype ConversionUnit = {\n  value: number;\n  unit: string;\n};\n\nexport const millisecondsToTime = (value: number): ConversionUnit => {\n  if (value) {\n    if (value % unitsToMilliSecond.days == 0)\n      return { value: value / unitsToMilliSecond.days, unit: \"days\" };\n    if (value % unitsToMilliSecond.hours == 0)\n      return { value: value / unitsToMilliSecond.hours, unit: \"hours\" };\n    if (value % unitsToMilliSecond.minutes == 0)\n      return { value: value / unitsToMilliSecond.minutes, unit: \"minutes\" };\n    if (value % unitsToMilliSecond.seconds == 0)\n      return { value: value / unitsToMilliSecond.seconds, unit: \"seconds\" };\n  }\n\n  return { value, unit: \"milliseconds\" };\n};\n\nexport const formattedRetentionTime = (time: number): string => {\n  const { unit, value } = millisecondsToTime(time);\n  return Number(value) === -1 ? \"Unlimited\" : `${time} ms (${value} ${unit})`;\n};\n\nexport const formattedRetentionSize = (size: number): string => {\n  const { unit, value } = bytesToMemorySize(size);\n  return Number(value) === -1\n    ? \"Unlimited\"\n    : `${size} bytes (${value} ${unit})`;\n};\n\nexport const bytesToMemorySize = (value: number): ConversionUnit => {\n  if (value) {\n    if (value % unitsToBytes.tebibytes == 0)\n      return { value: value / unitsToBytes.tebibytes, unit: \"tebibytes\" };\n    if (value % unitsToBytes.gibibytes == 0)\n      return { value: value / unitsToBytes.gibibytes, unit: \"gibibytes\" };\n    if (value % unitsToBytes.mebibytes == 0)\n      return { value: value / unitsToBytes.mebibytes, unit: \"mebibytes\" };\n    if (value % unitsToBytes.kibibytes == 0)\n      return { value: value / unitsToBytes.kibibytes, unit: \"kibibytes\" };\n  }\n\n  return { value, unit: \"bytes\" };\n};\n","import { Button } from \"@patternfly/react-core\";\nimport { TableVariant } from \"@patternfly/react-table\";\nimport type { TableViewProps } from \"@rhoas/app-services-ui-components\";\nimport {\n  EmptyStateNoResults,\n  TableView,\n} from \"@rhoas/app-services-ui-components\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport type { KafkaTopic, KafkaTopicField } from \"../../types\";\nimport type { EmptyStateNoTopicProps } from \"./components\";\nimport { EmptyStateNoTopic } from \"./components\";\nimport { formattedRetentionSize, formattedRetentionTime } from \"./types\";\n\nconst Columns: KafkaTopicField[] = [\n  \"topic_name\",\n  \"partitions\",\n  \"retention_time\",\n  \"retention_size\",\n];\n\nexport type KafkaTopicsProps<T extends KafkaTopic> = {\n  topics: Array<T> | undefined;\n  getUrlFortopic: (row: T) => string;\n  onDelete: (row: T) => void;\n  onEdit: (row: T) => void;\n  topicName: string[];\n  onSearchTopic: (value: string) => void;\n  onRemoveTopicChip: (value: string) => void;\n  onRemoveTopicChips: () => void;\n  onTopicLinkClick: (row: T) => void;\n} & Pick<\n  TableViewProps<T, typeof Columns[number]>,\n  | \"itemCount\"\n  | \"page\"\n  | \"perPage\"\n  | \"onPageChange\"\n  | \"isRowSelected\"\n  | \"isColumnSortable\"\n  | \"onClearAllFilters\"\n> &\n  EmptyStateNoTopicProps;\n\nexport const KafkaTopics = <T extends KafkaTopic>({\n  topics,\n  onDelete,\n  onEdit,\n  isColumnSortable,\n  itemCount,\n  onSearchTopic,\n  topicName,\n  onClearAllFilters,\n  onCreateTopic,\n  page,\n  perPage,\n  onPageChange,\n  onRemoveTopicChip,\n  onRemoveTopicChips,\n  getUrlFortopic,\n  onTopicLinkClick,\n}: KafkaTopicsProps<T>) => {\n  const { t } = useTranslation(\"topic\");\n\n  const labels: { [field in KafkaTopicField]: string } = {\n    topic_name: t(\"topic_name\"),\n    partitions: t(\"partitions\"),\n    retention_time: t(\"retention_time\"),\n    retention_size: t(\"retention_size\"),\n  };\n\n  const isFiltered = topicName.length > 0;\n  return (\n    <TableView\n      variant={TableVariant.compact}\n      tableOuiaId={\"card-table\"}\n      ariaLabel={t(\"topic_list_table\")}\n      data={topics}\n      columns={Columns}\n      renderHeader={({ column, Th, key }) => (\n        <Th key={key}>{labels[column]}</Th>\n      )}\n      renderCell={({ column, row, Td, key }) => {\n        return (\n          <Td key={key} dataLabel={labels[column]}>\n            {(() => {\n              switch (column) {\n                case \"topic_name\":\n                  return (\n                    <Button\n                      variant=\"link\"\n                      component={(props) => (\n                        <Link\n                          to={getUrlFortopic(row)}\n                          {...props}\n                          data-testid=\"tableTopics-linkTopic\"\n                          data-ouia-component-id=\"table-link\"\n                        >\n                          {row.topic_name}\n                        </Link>\n                      )}\n                      onClick={() => onTopicLinkClick(row)}\n                      isInline\n                    />\n                  );\n                case \"partitions\":\n                  return row.partitions;\n                case \"retention_time\":\n                  return formattedRetentionTime(\n                    row.retention_time ? parseInt(row.retention_time, 10) : 0\n                  );\n                case \"retention_size\":\n                  return formattedRetentionSize(\n                    row.retention_size ? parseInt(row.retention_size, 10) : 0\n                  );\n                default:\n                  return row[column];\n              }\n            })()}\n          </Td>\n        );\n      }}\n      renderActions={({ row, ActionsColumn }) => (\n        <ActionsColumn\n          items={[\n            {\n              title: t(\"table.actions.edit\"),\n              onClick: () => onEdit(row),\n            },\n            {\n              title: t(\"table.actions.delete\"),\n              onClick: () => onDelete(row),\n            },\n          ]}\n        />\n      )}\n      isColumnSortable={isColumnSortable}\n      filters={{\n        [labels.topic_name]: {\n          type: \"search\",\n          chips: topicName,\n          onSearch: onSearchTopic,\n          onRemoveChip: onRemoveTopicChip,\n          onRemoveGroup: onRemoveTopicChips,\n          validate: (value: string) => !/[\"$^<>|+%/;:,\\s*=~#()]/.test(value),\n          errorMessage: t(\"input_field_invalid_message\"),\n        },\n      }}\n      actions={[\n        {\n          label: t(\"create_topic\"),\n          onClick: onCreateTopic,\n          isPrimary: true,\n        },\n      ]}\n      itemCount={itemCount}\n      page={page}\n      onPageChange={onPageChange}\n      perPage={perPage}\n      isFiltered={isFiltered}\n      onClearAllFilters={onClearAllFilters}\n      emptyStateNoData={<EmptyStateNoTopic onCreateTopic={onCreateTopic} />}\n      emptyStateNoResults={<EmptyStateNoResults />}\n    ></TableView>\n  );\n};\n","import {\n  Breadcrumb,\n  BreadcrumbItem,\n  Level,\n  LevelItem,\n  Nav,\n  NavItem,\n  NavList,\n  PageSection,\n  PageSectionVariants,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport type { KafkaInstanceActionsProps } from \"./KafkaInstanceActions\";\nimport { KafkaInstanceActions } from \"./KafkaInstanceActions\";\n\ntype Sections =\n  | \"dashboard\"\n  | \"topics\"\n  | \"consumer\"\n  | \"permissions\"\n  | \"settings\";\n\nexport type DataPlaneHeaderProps = {\n  instancesHref: string;\n  instanceName: string;\n  activeSection: Sections;\n  sectionsHref: { [key in Sections]: string };\n} & KafkaInstanceActionsProps;\n\nexport const DataPlaneHeader: VoidFunctionComponent<DataPlaneHeaderProps> = ({\n  instancesHref,\n  instanceName,\n  activeSection,\n  sectionsHref,\n  ...actionsProps\n}) => {\n  const { t } = useTranslation(\"kafka\");\n\n  return (\n    <>\n      <section className=\"pf-c-page__main-breadcrumb\">\n        <Breadcrumb ouiaId={\"breadcrumb\"}>\n          <BreadcrumbItem\n            render={() => (\n              <Link to={instancesHref}>{t(\"common:kafka_instance\")}</Link>\n            )}\n          />\n          <BreadcrumbItem isActive={true}>{instanceName}</BreadcrumbItem>\n        </Breadcrumb>\n      </section>\n      <PageSection variant={PageSectionVariants.light}>\n        <Level>\n          <LevelItem>\n            <TextContent>\n              <Text component=\"h1\">{instanceName}</Text>\n            </TextContent>\n          </LevelItem>\n          <LevelItem>\n            <KafkaInstanceActions {...actionsProps} />\n          </LevelItem>\n        </Level>\n      </PageSection>\n      <PageSection\n        variant={PageSectionVariants.light}\n        padding={{ default: \"noPadding\" }}\n        className=\"pf-c-page__main-tabs\"\n        hasShadowBottom={true}\n      >\n        <Nav\n          variant=\"tertiary\"\n          data-testid=\"pageKafka-tabProperties\"\n          className=\"pf-m-page-insets\"\n        >\n          <NavList>\n            <NavItem\n              style={{ borderTop: 0 }}\n              data-testid=\"pageKafka-tabDashboard\"\n              id=\"dashboard-tab-section\"\n              aria-label={t(\"dataPlaneNavigation.dashboard\")}\n              ouiaId={\"tab-Dashboard\"}\n              isActive={activeSection === \"dashboard\"}\n            >\n              <Link to={sectionsHref[\"dashboard\"]}>\n                {t(\"dataPlaneNavigation.dashboard\")}\n              </Link>\n            </NavItem>\n            <NavItem\n              style={{ borderTop: 0 }}\n              data-testid=\"pageKafka-tabTopics\"\n              id=\"topics-tab-section\"\n              aria-label={t(\"dataPlaneNavigation.topics\")}\n              ouiaId={\"tab-Topics\"}\n              isActive={activeSection === \"topics\"}\n            >\n              <Link to={sectionsHref[\"topics\"]}>\n                {t(\"dataPlaneNavigation.topics\")}\n              </Link>\n            </NavItem>\n            <NavItem\n              style={{ borderTop: 0 }}\n              data-testid=\"pageKafka-tabConsumers\"\n              id=\"consumer-groups-tab-section\"\n              aria-label={t(\"dataPlaneNavigation.consumer_groups\")}\n              ouiaId={\"tab-Consumers\"}\n              isActive={activeSection === \"consumer\"}\n            >\n              <Link to={sectionsHref[\"consumer\"]}>\n                {t(\"dataPlaneNavigation.consumer_groups\")}\n              </Link>\n            </NavItem>\n            <NavItem\n              style={{ borderTop: 0 }}\n              data-testid=\"pageKafka-tabPermissions\"\n              id=\"permissions-tab-section\"\n              aria-label={t(\"dataPlaneNavigation.permissions\")}\n              ouiaId={\"tab-Permissions\"}\n              isActive={activeSection === \"permissions\"}\n            >\n              <Link to={sectionsHref[\"permissions\"]}>\n                {t(\"dataPlaneNavigation.permissions\")}\n              </Link>\n            </NavItem>\n            <NavItem\n              style={{ borderTop: 0 }}\n              data-testid=\"pageKafka-tabSettings\"\n              id=\"settings-tab-section\"\n              aria-label={t(\"dataPlaneNavigation.settings\")}\n              ouiaId={\"tab-Settings\"}\n              isActive={activeSection === \"settings\"}\n            >\n              <Link to={sectionsHref[\"settings\"]}>\n                {t(\"dataPlaneNavigation.settings\")}\n              </Link>\n            </NavItem>\n          </NavList>\n        </Nav>\n      </PageSection>\n    </>\n  );\n};\n","import {\n  Level,\n  LevelItem,\n  PageSection,\n  PageSectionVariants,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\n\nexport const ControlPlaneHeader: VoidFunctionComponent = () => {\n  const { t } = useTranslation();\n\n  return (\n    <PageSection\n      variant={PageSectionVariants.light}\n      hasShadowBottom={true}\n      stickyOnBreakpoint={{ default: \"top\" }}\n    >\n      <Level>\n        <LevelItem>\n          <TextContent>\n            <Text component=\"h1\">{t(\"kafka:table.title\")}</Text>\n          </TextContent>\n        </LevelItem>\n      </Level>\n    </PageSection>\n  );\n};\n","import type { I18nProviderProps } from \"@rhoas/app-services-ui-components\";\nimport { I18nProvider as UiComponentsI18nProvider } from \"@rhoas/app-services-ui-components\";\nimport type { FunctionComponent } from \"react\";\n\nexport const I18nProvider: FunctionComponent<\n  Omit<I18nProviderProps, \"resources\">\n> = ({ lng, debug, children }) => {\n  return (\n    <UiComponentsI18nProvider\n      lng={lng}\n      resources={{\n        en: {\n          common: () =>\n            import(\"@rhoas/app-services-ui-components/locales/en/common.json\"),\n          \"create-kafka-instance\": () =>\n            import(\"locales/en/create-kafka-instance.json\"),\n          kafka: () => import(\"locales/en/kafka.json\"),\n          \"kafkaoverview-v3\": () => import(\"locales/en/kafkaoverview-v3.json\"),\n          metrics: () => import(\"locales/en/metrics.json\"),\n          topic: () => import(\"locales/en/topic.json\"),\n          \"manage-kafka-permissions\": () =>\n            import(\"locales/en/manage-kafka-permissions.json\"),\n          \"create-topic\": () => import(\"locales/en/create-topic.json\"),\n          \"message-browser\": () => import(\"locales/en/message-browser.json\"),\n          \"connection-tab\": () => import(\"locales/en/connection-tab.json\"),\n          \"connection-tab-p1\": () =>\n            import(\"locales/en/connection-tab-p1.json\"),\n        },\n        it: {\n          common: () => Promise.resolve({ delete: \"Elimina\" }),\n        },\n      }}\n      debug={debug}\n    >\n      {children}\n    </UiComponentsI18nProvider>\n  );\n};\n","import type { CardKafkaInstanceMetricsLimits } from \"./components\";\n\nexport type TimeSeriesMetrics = { [timestamp: number]: number };\nexport type PartitionBytesMetric = { [partition: string]: TimeSeriesMetrics };\n\nexport enum DurationOptions {\n  Last5minutes = 5,\n  Last15minutes = 15,\n  Last30minutes = 30,\n  Last1hour = 60,\n  Last3hours = 3 * 60,\n  Last6hours = 6 * 60,\n  Last12hours = 12 * 60,\n  Last24hours = 24 * 60,\n  Last2days = 2 * 24 * 60,\n  Last7days = 7 * 24 * 60,\n}\n\nexport type GetTopicsMetricsResponse = {\n  kafkaTopics: string[];\n  metricsTopics: string[];\n  bytesOutgoing: TimeSeriesMetrics;\n  bytesIncoming: TimeSeriesMetrics;\n  bytesPerPartition: PartitionBytesMetric;\n  incomingMessageRate: TimeSeriesMetrics;\n};\n\nexport type GetKafkaInstanceMetricsResponse = {\n  usedDiskSpaceMetrics: TimeSeriesMetrics;\n  clientConnectionsMetrics: TimeSeriesMetrics;\n  connectionAttemptRateMetrics: TimeSeriesMetrics;\n} & CardKafkaInstanceMetricsLimits;\n\nexport type GetMetricsKpiResponse = {\n  topics: number;\n  topicPartitions: number;\n  consumerGroups: number;\n  topicPartitionsLimit: number;\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateVariant,\n} from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\n\nexport const EmptyStateInitialLoading: VoidFunctionComponent = () => {\n  return (\n    <EmptyState variant={EmptyStateVariant.xs}>\n      <EmptyStateBody data-chromatic=\"ignore\">\n        <AppServicesLoading />\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { TachometerAltIcon } from \"@patternfly/react-icons\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const EmptyStateMetricsUnavailable: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState variant={EmptyStateVariant.xs}>\n      <EmptyStateIcon icon={TachometerAltIcon} />\n      <Title headingLevel=\"h3\" size=\"lg\">\n        {t(\"metrics:empty_state_no_data_title\")}\n      </Title>\n      <EmptyStateBody>{t(\"metrics:empty_state_no_data_body\")}</EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import { Grid, GridItem, PageSection } from \"@patternfly/react-core\";\nimport type { FunctionComponent, ReactElement } from \"react\";\n\ntype MetricsLayoutProps = {\n  metricsLagAlert: ReactElement;\n  topicsKpi: ReactElement;\n  topicPartitionsKpi: ReactElement;\n  consumerGroupKpi: ReactElement;\n  diskSpaceMetrics: ReactElement;\n  topicMetrics: ReactElement;\n};\nexport const MetricsLayout: FunctionComponent<MetricsLayoutProps> = ({\n  metricsLagAlert,\n  topicsKpi,\n  topicPartitionsKpi,\n  consumerGroupKpi,\n  diskSpaceMetrics,\n  topicMetrics,\n}) => {\n  return (\n    <PageSection hasOverflowScroll={true} aria-label={\"TODO\"}>\n      <Grid hasGutter>\n        <GridItem>{metricsLagAlert}</GridItem>\n        <GridItem sm={4}>{topicsKpi}</GridItem>\n        <GridItem sm={4}>{topicPartitionsKpi}</GridItem>\n        <GridItem sm={4}>{consumerGroupKpi}</GridItem>\n        <GridItem lg={6}>{diskSpaceMetrics}</GridItem>\n        <GridItem lg={6}>{topicMetrics}</GridItem>\n      </Grid>\n    </PageSection>\n  );\n};\n","import { CardBody, Bullseye, Spinner } from \"@patternfly/react-core\";\nimport type { FunctionComponent } from \"react\";\n\nexport const CardBodyLoading: FunctionComponent = () => (\n  <CardBody>\n    <Bullseye>\n      <Spinner isSVG data-chromatic=\"ignore\" />\n    </Bullseye>\n  </CardBody>\n);\n","import { DurationOptions } from \"./types\";\n\nexport const timeIntervalsMapping = {\n  [DurationOptions.Last5minutes]: {\n    interval: 1 * 60,\n    ticks: 6,\n    showDate: false,\n  },\n  [DurationOptions.Last15minutes]: {\n    interval: 3 * 60,\n    ticks: 6,\n    showDate: false,\n  },\n  [DurationOptions.Last30minutes]: {\n    interval: 5 * 60,\n    ticks: 7,\n    showDate: false,\n  },\n  [DurationOptions.Last1hour]: { interval: 10 * 60, ticks: 6, showDate: false },\n  [DurationOptions.Last3hours]: {\n    interval: 30 * 60,\n    ticks: 7,\n    showDate: false,\n  },\n  [DurationOptions.Last6hours]: {\n    interval: 1 * 60 * 60,\n    ticks: 7,\n    showDate: false,\n  },\n  [DurationOptions.Last12hours]: {\n    interval: 2 * 60 * 60,\n    ticks: 7,\n    showDate: false,\n  },\n  [DurationOptions.Last24hours]: {\n    interval: 4 * 60 * 60,\n    ticks: 7,\n    showDate: true,\n  },\n  [DurationOptions.Last2days]: {\n    interval: 8 * 60 * 60,\n    ticks: 7,\n    showDate: true,\n  },\n  [DurationOptions.Last7days]: {\n    interval: 24 * 60 * 60,\n    ticks: 8,\n    showDate: true,\n  },\n} as const;\n\nexport const chartHeight = 350;\nexport const chartPadding = {\n  bottom: 110, // Adjusted to accomodate legend\n  left: 120,\n  right: 40,\n  top: 10,\n};\n","import { Flex, FlexItem, Skeleton } from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { chartHeight, chartPadding } from \"../consts\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const ChartSkeletonLoader: VoidFunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <Flex direction={{ default: \"column\" }} data-chromatic=\"ignore\">\n      <FlexItem>\n        <Skeleton\n          height={`${chartHeight - chartPadding.bottom}px`}\n          screenreaderText={t(\"common:skeleton_loader_screenreader_text\")}\n        />\n      </FlexItem>\n      <FlexItem>\n        <Skeleton height={`${chartPadding.bottom / 2 - 12.5}px`} width=\"20%\" />\n      </FlexItem>\n      <FlexItem>\n        <Skeleton height={`${chartPadding.bottom / 2 - 12.5}px`} width=\"40%\" />\n      </FlexItem>\n    </Flex>\n  );\n};\n","import type { RefObject } from \"react\";\nimport { useEffect, useLayoutEffect, useRef, useState } from \"react\";\n\nexport function useChartWidth(): [RefObject<HTMLDivElement>, number] {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [width, setWidth] = useState<number>(0);\n\n  const handleResize = () =>\n    containerRef.current && setWidth(containerRef.current.clientWidth);\n\n  useLayoutEffect(() => {\n    handleResize();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n  return [containerRef, width];\n}\n","import byteSize from \"byte-size\";\nimport { fromUnixTime, sub } from \"date-fns\";\nimport { formatInTimeZone } from \"date-fns-tz\";\nimport { timeIntervalsMapping } from \"../consts\";\nimport type { DurationOptions } from \"../types\";\n\nexport function formatBytes(bytes: number): string {\n  return byteSize(bytes, { units: \"iec\" }).toString();\n}\n\nexport const shouldShowDate = (timeDuration: DurationOptions): boolean => {\n  return timeIntervalsMapping[timeDuration].showDate;\n};\n\nexport const dateToChartValue = (\n  timestamp: number,\n  { showDate }: { showDate: boolean } = { showDate: false }\n): string => {\n  const date = fromUnixTime(timestamp / 1000);\n  return formatInTimeZone(date, \"utc\", showDate ? \"HH:mm'\\n'MMM dd\" : \"HH:mm\");\n};\n\nexport function timestampsToTicks(\n  timestamps: string[],\n  duration: DurationOptions\n): number[] {\n  const allTimestamps = [...timestamps];\n  allTimestamps.sort();\n  const mostRecentTs =\n    parseInt(allTimestamps[allTimestamps.length - 1]) || Date.now();\n  return new Array(\n    Math.max(timeIntervalsMapping[duration].ticks, allTimestamps.length)\n  )\n    .fill(mostRecentTs)\n    .map((d: number, index) =>\n      sub(new Date(d), {\n        seconds: timeIntervalsMapping[duration].interval * index,\n      }).getTime()\n    );\n}\n","import type { ChartVoronoiContainerProps } from \"@patternfly/react-charts\";\nimport {\n  Chart,\n  ChartArea,\n  ChartAxis,\n  ChartGroup,\n  ChartLegend,\n  ChartThemeColor,\n  ChartThreshold,\n  ChartVoronoiContainer,\n} from \"@patternfly/react-charts\";\nimport {\n  chart_color_black_500,\n  chart_color_blue_300,\n} from \"@patternfly/react-tokens\";\nimport type { ReactElement, VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { chartHeight, chartPadding } from \"../consts\";\nimport type { DurationOptions, TimeSeriesMetrics } from \"../types\";\nimport { ChartSkeletonLoader } from \"./ChartSkeletonLoader\";\nimport { useChartWidth } from \"./useChartWidth\";\nimport { dateToChartValue, shouldShowDate, timestampsToTicks } from \"./utils\";\n\ntype ChartData = {\n  areaColor: string;\n  softLimitColor: string;\n  area: BrokerChartData[];\n  softLimit: BrokerChartData[];\n};\n\ntype BrokerChartData = {\n  name: string;\n  x: number;\n  y: number;\n};\n\ntype LegendData = {\n  name: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n};\n\ntype ChartLinearWithOptionalLimitProps = {\n  metrics: TimeSeriesMetrics;\n  duration: DurationOptions;\n  chartName: string;\n  xLabel?: string;\n  yLabel?: string;\n  usageLimit?: number;\n  formatValue?: (d: number) => string;\n  isLoading: boolean;\n  emptyState: ReactElement;\n};\n\nexport const ChartLinearWithOptionalLimit: VoidFunctionComponent<\n  ChartLinearWithOptionalLimitProps\n> = ({\n  metrics,\n  duration,\n  chartName,\n  xLabel,\n  yLabel,\n  usageLimit,\n  formatValue = (d) => `${d}`,\n  isLoading,\n  emptyState,\n}) => {\n  const { t } = useTranslation();\n  const [containerRef, width] = useChartWidth();\n\n  const itemsPerRow = width && width > 650 ? 6 : 3;\n\n  const { chartData, legendData, tickValues } = getChartData(\n    metrics,\n    duration,\n    chartName,\n    t(\"metrics:limit\"),\n    usageLimit\n  );\n\n  const hasMetrics = Object.keys(metrics).length > 0;\n  const showDate = shouldShowDate(duration);\n\n  switch (true) {\n    case isLoading:\n      return <ChartSkeletonLoader />;\n    case !hasMetrics:\n      return emptyState;\n    default: {\n      const labels: ChartVoronoiContainerProps[\"labels\"] = ({ datum }) =>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/restrict-template-expressions,@typescript-eslint/no-unsafe-argument\n        `${datum.name}: ${formatValue(datum.y)}`;\n      return (\n        <div ref={containerRef}>\n          <Chart\n            ariaTitle={chartName}\n            containerComponent={\n              <ChartVoronoiContainer labels={labels} constrainToVisibleArea />\n            }\n            legendPosition=\"bottom-left\"\n            legendComponent={\n              <ChartLegend\n                orientation={\"horizontal\"}\n                data={legendData}\n                itemsPerRow={itemsPerRow}\n              />\n            }\n            height={chartHeight}\n            padding={chartPadding}\n            themeColor={ChartThemeColor.multiUnordered}\n            width={width}\n            legendAllowWrap={true}\n          >\n            <ChartAxis\n              label={\"\\n\" + (xLabel || t(\"metrics:axis-label-time\") || \"\")}\n              tickValues={tickValues}\n              tickFormat={(d: number) =>\n                dateToChartValue(d, {\n                  showDate,\n                })\n              }\n            />\n            <ChartAxis\n              label={\"\\n\\n\\n\\n\\n\" + (yLabel || chartName)}\n              dependentAxis\n              tickFormat={formatValue}\n            />\n            <ChartGroup>\n              {chartData.map((value, index) => (\n                <ChartArea\n                  key={`chart-area-${index}`}\n                  data={value.area}\n                  style={{\n                    data: {\n                      // TODO: check if this is needed\n                      // stroke: value.color,\n                    },\n                  }}\n                />\n              ))}\n            </ChartGroup>\n            <ChartThreshold\n              key={`chart-softlimit`}\n              data={chartData[0].softLimit}\n              style={{\n                data: {\n                  stroke: chartData[0].softLimitColor,\n                },\n              }}\n            />\n          </Chart>\n        </div>\n      );\n    }\n  }\n};\n\nfunction getChartData(\n  metrics: TimeSeriesMetrics,\n  duration: number,\n  lineLabel: string,\n  limitLabel: string,\n  usageLimit?: number\n): {\n  legendData: Array<LegendData>;\n  chartData: Array<ChartData>;\n  tickValues: number[];\n} {\n  const legendData = [\n    usageLimit\n      ? {\n          name: limitLabel,\n          symbol: { fill: chart_color_black_500.value, type: \"threshold\" },\n        }\n      : undefined,\n    { name: lineLabel, symbol: { fill: chart_color_blue_300.value } },\n  ].filter((d) => !!d) as Array<LegendData>;\n\n  const areaColor = chart_color_blue_300.value;\n  const softLimitColor = chart_color_black_500.value;\n  const chartData: Array<ChartData> = [];\n  const area: Array<BrokerChartData> = [];\n  const softLimit: Array<BrokerChartData> = [];\n\n  Object.entries(metrics).map(([timestamp, bytes]) => {\n    area.push({ name: lineLabel, x: parseInt(timestamp, 10), y: bytes });\n  });\n  chartData.push({ areaColor, softLimitColor, area, softLimit });\n\n  const tickValues = timestampsToTicks(Object.keys(metrics), duration);\n\n  if (usageLimit) {\n    tickValues.forEach((timestamp) =>\n      softLimit.push({\n        name: limitLabel,\n        x: timestamp,\n        y: usageLimit,\n      })\n    );\n  }\n\n  return {\n    legendData,\n    chartData,\n    tickValues,\n  };\n}\n","import type { ChartVoronoiContainerProps } from \"@patternfly/react-charts\";\nimport {\n  Chart,\n  ChartArea,\n  ChartAxis,\n  ChartGroup,\n  ChartLegend,\n  ChartThemeColor,\n  ChartVoronoiContainer,\n} from \"@patternfly/react-charts\";\nimport {\n  chart_color_blue_300,\n  chart_color_cyan_300,\n} from \"@patternfly/react-tokens\";\nimport type { FunctionComponent, ReactElement } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { chartHeight, chartPadding } from \"../consts\";\nimport type { PartitionBytesMetric } from \"../types\";\nimport { ChartSkeletonLoader } from \"./ChartSkeletonLoader\";\nimport { useChartWidth } from \"./useChartWidth\";\nimport {\n  dateToChartValue,\n  formatBytes,\n  shouldShowDate,\n  timestampsToTicks,\n} from \"./utils\";\n\nconst colors = [chart_color_cyan_300.value, chart_color_blue_300.value];\n\ntype ChartData = {\n  color: string;\n  area: PartitionChartData[];\n};\n\ntype PartitionChartData = {\n  name: string;\n  x: number;\n  y: number;\n};\n\ntype LegendData = {\n  name: string;\n};\n\nexport type ChartLogSizePerPartitionProps = {\n  partitions: PartitionBytesMetric;\n  topic: string | undefined;\n  duration: number;\n  isLoading: boolean;\n  emptyState: ReactElement;\n};\nexport const ChartLogSizePerPartition: FunctionComponent<\n  ChartLogSizePerPartitionProps\n> = ({ partitions, topic, duration, isLoading, emptyState }) => {\n  const { t } = useTranslation();\n  const [containerRef, width] = useChartWidth();\n\n  const itemsPerRow = width && width > 650 ? 6 : 3;\n\n  const { chartData, legendData, tickValues } = getChartData(\n    partitions,\n    topic,\n    duration\n  );\n\n  const hasMetrics = Object.keys(partitions).length > 0;\n\n  const showDate = shouldShowDate(duration);\n\n  return (\n    <div ref={containerRef}>\n      {(() => {\n        switch (true) {\n          case isLoading:\n            return <ChartSkeletonLoader />;\n          case !hasMetrics:\n            return emptyState;\n          default: {\n            const labels: ChartVoronoiContainerProps[\"labels\"] = ({ datum }) =>\n              // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/restrict-template-expressions,@typescript-eslint/no-unsafe-argument\n              `${datum.name}: ${formatBytes(datum.y)}`;\n\n            return (\n              <Chart\n                ariaTitle={t(\"metrics:log_size_per_partition\")}\n                containerComponent={\n                  <ChartVoronoiContainer\n                    labels={labels}\n                    constrainToVisibleArea\n                  />\n                }\n                legendPosition=\"bottom-left\"\n                legendComponent={\n                  <ChartLegend data={legendData} itemsPerRow={itemsPerRow} />\n                }\n                height={chartHeight}\n                padding={chartPadding}\n                themeColor={ChartThemeColor.multiOrdered}\n                width={width}\n                legendAllowWrap={true}\n              >\n                <ChartAxis\n                  label={\"\\n\" + t(\"metrics:axis-label-time\")}\n                  tickValues={tickValues}\n                  tickFormat={(d: number) =>\n                    dateToChartValue(d, {\n                      showDate,\n                    })\n                  }\n                />\n                <ChartAxis\n                  label={\"\\n\\n\\n\\n\\n\" + t(\"metrics:axis-label-bytes\")}\n                  dependentAxis\n                  tickFormat={formatBytes}\n                />\n                <ChartGroup>\n                  {chartData.map((value, index) => (\n                    <ChartArea key={`chart-area-${index}`} data={value.area} />\n                  ))}\n                </ChartGroup>\n              </Chart>\n            );\n          }\n        }\n      })()}\n    </div>\n  );\n};\n\nexport function getChartData(\n  partitions: PartitionBytesMetric,\n  topic: string | undefined,\n  duration: number\n): {\n  legendData: Array<LegendData>;\n  chartData: Array<ChartData>;\n  tickValues: number[];\n} {\n  const legendData: Array<LegendData> = [];\n  const chartData: Array<ChartData> = [];\n  Object.entries(partitions).map(([partition, dataMap], index) => {\n    const name = topic ? `${topic}: ${partition}` : partition;\n    const color = colors[index];\n    legendData.push({\n      name,\n    });\n    const area: Array<PartitionChartData> = [];\n\n    Object.entries(dataMap).map(([timestamp, value]) => {\n      area.push({ name, x: parseInt(timestamp, 10), y: value });\n    });\n    chartData.push({ color, area });\n  });\n\n  const allTimestamps = Array.from(\n    new Set(Object.values(partitions).flatMap((m) => Object.keys(m)))\n  );\n  const tickValues = timestampsToTicks(allTimestamps, duration);\n\n  return {\n    legendData,\n    chartData,\n    tickValues,\n  };\n}\n","import { Popover } from \"@patternfly/react-core\";\nimport { OutlinedQuestionCircleIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\ntype ChartPopoverProps = {\n  title: string;\n  description: string;\n};\n\nexport const ChartPopover: VoidFunctionComponent<ChartPopoverProps> = ({\n  title,\n  description,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <Popover\n      aria-label={title}\n      headerContent={<div>{title}</div>}\n      bodyContent={<div>{description}</div>}\n    >\n      <OutlinedQuestionCircleIcon\n        aria-label={t(\"metrics:chart-popover-icon-screenreader-text\", {\n          title,\n        })}\n      />\n    </Popover>\n  );\n};\n","import type { ChartVoronoiContainerProps } from \"@patternfly/react-charts\";\nimport {\n  Chart,\n  ChartAxis,\n  ChartGroup,\n  ChartLegend,\n  ChartLine,\n  ChartThemeColor,\n  ChartVoronoiContainer,\n} from \"@patternfly/react-charts\";\nimport {\n  chart_color_blue_300,\n  chart_color_green_300,\n} from \"@patternfly/react-tokens\";\nimport type { FunctionComponent, ReactElement } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { chartHeight, chartPadding, timeIntervalsMapping } from \"../consts\";\nimport type { TimeSeriesMetrics } from \"../types\";\nimport { ChartSkeletonLoader } from \"./ChartSkeletonLoader\";\nimport { useChartWidth } from \"./useChartWidth\";\nimport {\n  dateToChartValue,\n  formatBytes,\n  shouldShowDate,\n  timestampsToTicks,\n} from \"./utils\";\n\ntype ChartData = {\n  color: string;\n  line: TopicChartData[];\n};\n\ntype TopicChartData = {\n  name: string;\n  x: number;\n  y: number;\n};\n\ntype LegendData = {\n  name: string;\n  symbol: {\n    fill: string;\n    type?: string;\n  };\n};\n\ntype ChartTotalBytesProps = {\n  incomingTopicsData: TimeSeriesMetrics;\n  outgoingTopicsData: TimeSeriesMetrics;\n  selectedTopic: string | undefined;\n  duration: number;\n  isLoading: boolean;\n  emptyState: ReactElement;\n};\nexport const ChartTotalBytes: FunctionComponent<ChartTotalBytesProps> = ({\n  incomingTopicsData,\n  outgoingTopicsData,\n  selectedTopic,\n  duration,\n  isLoading,\n  emptyState,\n}) => {\n  const { t } = useTranslation();\n  const [containerRef, width] = useChartWidth();\n\n  const itemsPerRow = width && width > 650 ? 6 : 3;\n\n  const { chartData, legendData, tickValues } = getBytesChartData(\n    incomingTopicsData,\n    outgoingTopicsData,\n    duration,\n    selectedTopic\n      ? t(\"metrics:incoming_bytes\", {\n          topic: selectedTopic,\n        })\n      : t(\"metrics:incoming_bytes_all_topics\"),\n    selectedTopic\n      ? t(\"metrics:outgoing_bytes\", {\n          topic: selectedTopic,\n        })\n      : t(\"metrics:outgoing_bytes_all_topics\")\n  );\n\n  const hasMetrics =\n    Object.keys(incomingTopicsData).length > 0 ||\n    Object.keys(outgoingTopicsData).length > 0;\n\n  const showDate = shouldShowDate(duration);\n\n  switch (true) {\n    case isLoading:\n      return <ChartSkeletonLoader />;\n    case !hasMetrics:\n      return emptyState;\n    default: {\n      const labels: ChartVoronoiContainerProps[\"labels\"] =\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/restrict-template-expressions,@typescript-eslint/no-unsafe-argument\n        ({ datum }) => `${datum.name}: ${formatBytes(datum.y)}`;\n      return (\n        <div ref={containerRef}>\n          <Chart\n            ariaTitle={t(\"metrics:total_bytes\")}\n            containerComponent={\n              <ChartVoronoiContainer labels={labels} constrainToVisibleArea />\n            }\n            legendAllowWrap={true}\n            legendPosition=\"bottom-left\"\n            legendComponent={\n              <ChartLegend data={legendData} itemsPerRow={itemsPerRow} />\n            }\n            height={chartHeight}\n            padding={chartPadding}\n            themeColor={ChartThemeColor.multiUnordered}\n            width={width}\n          >\n            <ChartAxis\n              label={\"\\n\" + t(\"metrics:axis-label-time\")}\n              tickValues={tickValues}\n              tickCount={timeIntervalsMapping[duration].ticks}\n              tickFormat={(d: number) =>\n                dateToChartValue(d, {\n                  showDate,\n                })\n              }\n            />\n            <ChartAxis\n              label={\"\\n\\n\\n\\n\\n\" + t(\"metrics:axis-label-bytes\")}\n              dependentAxis\n              tickFormat={formatBytes}\n            />\n            <ChartGroup>\n              {chartData.map((value, index) => (\n                <ChartLine\n                  key={`chart-line-${index}`}\n                  data={value.line}\n                  style={{\n                    data: {\n                      stroke: value.color,\n                    },\n                  }}\n                />\n              ))}\n            </ChartGroup>\n          </Chart>\n        </div>\n      );\n    }\n  }\n};\n\nexport function getBytesChartData(\n  incomingTopic: TimeSeriesMetrics,\n  outgoingTopic: TimeSeriesMetrics,\n  duration: number,\n  incomingTopicName: string,\n  outgoingTopicName: string\n): {\n  legendData: Array<LegendData>;\n  chartData: Array<ChartData>;\n  tickValues: number[];\n} {\n  const legendData: Array<LegendData> = [];\n  const chartData: Array<ChartData> = [];\n\n  const incomingLine = metricsToLine(incomingTopic, incomingTopicName);\n  if (incomingLine.length > 0) {\n    const color = chart_color_blue_300.value;\n    chartData.push({ color, line: incomingLine });\n    legendData.push({\n      name: incomingTopicName,\n      symbol: {\n        fill: color,\n      },\n    });\n  }\n\n  const outgoingLine = metricsToLine(outgoingTopic, outgoingTopicName);\n  if (outgoingLine.length > 0) {\n    const color = chart_color_green_300.value;\n    chartData.push({ color, line: outgoingLine });\n    legendData.push({\n      name: outgoingTopicName,\n      symbol: {\n        fill: color,\n      },\n    });\n  }\n  const allTimestamps = Array.from(\n    new Set([...Object.keys(incomingTopic), ...Object.keys(outgoingTopic)])\n  );\n  const tickValues = timestampsToTicks(allTimestamps, duration);\n\n  return {\n    legendData,\n    chartData,\n    tickValues,\n  };\n}\n\nexport function metricsToLine(\n  metrics: TimeSeriesMetrics,\n  name: string\n): Array<TopicChartData> {\n  const line: Array<TopicChartData> = [];\n\n  Object.entries(metrics).map(([timestamp, bytes]) => {\n    line.push({ name, x: parseInt(timestamp, 10), y: bytes });\n  });\n  return line;\n}\n","import {\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { ExclamationTriangleIcon } from \"@patternfly/react-icons\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const EmptyStateNoMetricsData: FunctionComponent = () => {\n  const { t } = useTranslation([\"metrics\"]);\n  return (\n    <EmptyState variant={EmptyStateVariant.xs}>\n      <EmptyStateIcon\n        icon={ExclamationTriangleIcon}\n        color=\"var(--pf-global--warning-color--100)\"\n      />\n      <Title headingLevel=\"h3\" size=\"md\">\n        {t(\"metric_not_available\")}\n      </Title>\n    </EmptyState>\n  );\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { SearchIcon } from \"@patternfly/react-icons\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const EmptyStateNoMetricsDataForSelection: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState variant={EmptyStateVariant.xs}>\n      <EmptyStateIcon icon={SearchIcon} />\n      <Title headingLevel=\"h3\" size=\"lg\">\n        {t(\"metrics:empty_state_no_metrics_data_title\")}\n      </Title>\n      <EmptyStateBody>\n        {t(\"metrics:empty_state_no_metrics_data_body\")}\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { WrenchIcon } from \"@patternfly/react-icons\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\ntype EmptyStateNoTopicsProps = {\n  onCreateTopic?: () => void;\n};\nexport const EmptyStateNoTopics: FunctionComponent<EmptyStateNoTopicsProps> = ({\n  onCreateTopic,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState variant={EmptyStateVariant.xs}>\n      <EmptyStateIcon icon={WrenchIcon} />\n      <Title headingLevel=\"h3\" size=\"lg\">\n        {t(\"metrics:empty_state_no_topics_title\")}\n      </Title>\n      <EmptyStateBody>{t(\"metrics:empty_state_no_topics_body\")}</EmptyStateBody>\n      {onCreateTopic && (\n        <Button\n          ouiaId=\"button-create\"\n          variant=\"primary\"\n          onClick={onCreateTopic}\n        >\n          {t(\"metrics:empty_state_no_topics_create_topic\")}\n        </Button>\n      )}\n    </EmptyState>\n  );\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { FilterIcon } from \"@patternfly/react-icons\";\nimport { Trans, useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\n\nexport const EmptyStateNoTopicSelected: VoidFunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState variant={EmptyStateVariant.xs}>\n      <EmptyStateIcon icon={FilterIcon} />\n      <Title headingLevel=\"h3\" size=\"lg\">\n        {t(\"metrics:empty_state_no_filter_title\")}\n      </Title>\n      <EmptyStateBody>\n        <Trans\n          ns={\"metrics\"}\n          i18nKey={\"empty_state_no_filter_body\"}\n          components={{ bold: <strong /> }}\n        />\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { useState } from \"react\";\nimport type { SelectProps } from \"@patternfly/react-core\";\nimport {\n  ToolbarItem,\n  Select,\n  SelectVariant,\n  SelectGroup,\n  SelectOption,\n} from \"@patternfly/react-core\";\nimport { DurationOptions } from \"../types\";\n\nexport const DurationOptionsMap = {\n  [DurationOptions.Last5minutes]: \"Last 5 minutes\",\n  [DurationOptions.Last15minutes]: \"Last 15 minutes\",\n  [DurationOptions.Last30minutes]: \"Last 30 minutes\",\n  [DurationOptions.Last1hour]: \"Last 1 hour\",\n  [DurationOptions.Last3hours]: \"Last 3 hours\",\n  [DurationOptions.Last6hours]: \"Last 6 hours\",\n  [DurationOptions.Last12hours]: \"Last 12 hours\",\n  [DurationOptions.Last24hours]: \"Last 24 hours\",\n  [DurationOptions.Last2days]: \"Last 2 days\",\n  [DurationOptions.Last7days]: \"Last 7 days\",\n} as const;\n\ntype FilterByTimeProps = {\n  duration: DurationOptions;\n  onDurationChange: (value: DurationOptions) => void;\n  keyText: string;\n  ariaLabel: string;\n  disableToolbar: boolean;\n};\n\nexport const FilterByTime: VoidFunctionComponent<FilterByTimeProps> = ({\n  duration,\n  keyText,\n  ariaLabel,\n  disableToolbar,\n  onDurationChange,\n}) => {\n  const [isTimeSelectOpen, setIsTimeSelectOpen] = useState<boolean>(false);\n\n  const onTimeToggle = (isTimeSelectOpen: boolean) => {\n    setIsTimeSelectOpen(isTimeSelectOpen);\n  };\n\n  const onTimeSelect: SelectProps[\"onSelect\"] = (_, selection) => {\n    const mapping = Object.entries(DurationOptionsMap).find(\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      ([_, value]) => value === selection\n    );\n    if (mapping) {\n      onDurationChange(parseInt(mapping[0], 10) as DurationOptions);\n    }\n    setIsTimeSelectOpen(false);\n  };\n\n  const timeOptions = (keyText: string) => [\n    <SelectGroup label=\"Relative time ranges\" key={`${keyText}-group`}>\n      {Object.values(DurationOptionsMap).map((label, idx) => (\n        <SelectOption key={`${keyText}-${idx}`} value={label} />\n      ))}\n    </SelectGroup>,\n  ];\n  const ariaId = `filter-by-time-${Date.now()}`;\n  return (\n    <ToolbarItem>\n      <label hidden id={ariaId}>\n        {ariaLabel}\n      </label>\n      <Select\n        variant={SelectVariant.single}\n        aria-labelledby={ariaId}\n        onToggle={onTimeToggle}\n        onSelect={onTimeSelect}\n        selections={DurationOptionsMap[duration]}\n        isOpen={isTimeSelectOpen}\n        isDisabled={disableToolbar}\n      >\n        {timeOptions(keyText)}\n      </Select>\n    </ToolbarItem>\n  );\n};\n","import type { SelectProps } from \"@patternfly/react-core\";\nimport {\n  Select,\n  SelectGroup,\n  SelectOption,\n  SelectVariant,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { FilterIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport \"./FilterByTopic.css\";\n\nconst widths = {\n  default: \"150px\",\n  sm: \"150px\",\n  md: \"150px\",\n  lg: \"200px\",\n  xl: \"200px\",\n  \"2xl\": \"200px\",\n};\n\ntype FilterByTopicProps = {\n  selectedTopic: string | undefined;\n  topicList: string[];\n  disableToolbar: boolean;\n  ariaLabel: string;\n  onSetSelectedTopic: (value: string | undefined) => void;\n};\n\nexport const FilterByTopic: VoidFunctionComponent<FilterByTopicProps> = ({\n  selectedTopic,\n  topicList = [],\n  disableToolbar,\n  ariaLabel,\n  onSetSelectedTopic,\n}) => {\n  const { t } = useTranslation();\n  const [isTopicSelectOpen, setIsTopicSelectOpen] = useState<boolean>(false);\n  const [selectKey, setSelectKey] = useState(Math.random());\n\n  useEffect(() => setSelectKey(Math.random()), [topicList]);\n\n  const allTopicsLabel = t(\"metrics:all_topics\");\n\n  const onTopicToggle = (isTopicSelectOpen: boolean) => {\n    setIsTopicSelectOpen(isTopicSelectOpen);\n  };\n\n  const onTopicSelect: SelectProps[\"onSelect\"] = (_, selection) => {\n    selection !== allTopicsLabel\n      ? onSetSelectedTopic(selection as string)\n      : onSetSelectedTopic(undefined);\n    setIsTopicSelectOpen(false);\n  };\n\n  const onTopicFilter = (_: unknown, textInput: string) => {\n    const filteredTopics =\n      topicList.filter((topic) => topic.indexOf(textInput) != -1) || [];\n    return topicOptions(filteredTopics);\n  };\n\n  const topicOptions = (topicList: string[]) => [\n    <SelectOption key={\"topic-filter-0\"} value={allTopicsLabel} />,\n    <SelectGroup label=\"Filter by topic\" key=\"topic-filter-group\">\n      {topicList.map((topic, index) => (\n        <SelectOption\n          key={`topic-filter-${index + 1}`}\n          value={topic}\n          title={topic}\n        />\n      ))}\n    </SelectGroup>,\n  ];\n\n  const isDisabled = disableToolbar || topicList.length === 0;\n  const ariaId = `filter-by-topic-${Date.now()}`;\n\n  return (\n    <ToolbarItem widths={widths}>\n      <label hidden id={ariaId}>\n        {ariaLabel}\n      </label>\n      <Select\n        key={selectKey}\n        variant={SelectVariant.single}\n        onToggle={onTopicToggle}\n        onSelect={onTopicSelect}\n        selections={selectedTopic || allTopicsLabel}\n        isOpen={isTopicSelectOpen}\n        placeholderText={\n          <>\n            <FilterIcon /> {allTopicsLabel}\n          </>\n        }\n        aria-labelledby={ariaId}\n        onFilter={onTopicFilter}\n        isGrouped\n        hasInlineFilter\n        isDisabled={isDisabled}\n        position=\"left\"\n        className={\"appserv-metrics-filterbytopic\"}\n      >\n        {topicOptions(topicList)}\n      </Select>\n    </ToolbarItem>\n  );\n};\n","import { ToolbarItem } from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { FormatDate, RefreshButton } from \"@rhoas/app-services-ui-components\";\n\nexport type ToolbarRefreshProps = {\n  isRefreshing: boolean;\n  lastUpdated: Date | undefined;\n  ariaLabel: string;\n  onRefresh: () => void;\n};\n\nexport const ToolbarRefresh: VoidFunctionComponent<ToolbarRefreshProps> = ({\n  isRefreshing,\n  lastUpdated = new Date(),\n  ariaLabel,\n  onRefresh,\n}) => {\n  const { t } = useTranslation([\"metrics\"]);\n\n  return (\n    <>\n      <ToolbarItem>\n        <RefreshButton\n          ariaLabel={ariaLabel}\n          onClick={onRefresh}\n          isRefreshing={isRefreshing}\n        />\n      </ToolbarItem>\n      <ToolbarItem\n        alignment={{ default: \"alignRight\" }}\n        style={{ color: \"var(--pf-global--Color--200)\" }}\n      >\n        <div className=\"pf-u-font-size-xs\">\n          {isRefreshing ? (\n            t(\"metrics:refreshing\")\n          ) : (\n            <>\n              {t(\"metrics:last-refresh\")}\n              <br />\n              <FormatDate date={lastUpdated} format=\"distanceToNow\" />\n              {t(\"metrics:last-refresh-distance\")}\n            </>\n          )}\n        </div>\n      </ToolbarItem>\n    </>\n  );\n};\n","import {\n  CardHeader,\n  CardTitle,\n  Divider,\n  Toolbar,\n  ToolbarContent,\n} from \"@patternfly/react-core\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { DurationOptions } from \"../types\";\nimport { FilterByTime } from \"./FilterByTime\";\nimport { FilterByTopic } from \"./FilterByTopic\";\nimport type { ToolbarRefreshProps } from \"./ToolbarRefresh\";\nimport { ToolbarRefresh } from \"./ToolbarRefresh\";\n\ntype ToolbarTopicsMetricsProps = {\n  title: string;\n  selectedTopic: string | undefined;\n  topicList: string[];\n  duration: DurationOptions;\n  isDisabled: boolean;\n  onSetTimeDuration: (value: DurationOptions) => void;\n  onSetSelectedTopic: (value: string | undefined) => void;\n} & Omit<ToolbarRefreshProps, \"ariaLabel\">;\nexport const ToolbarTopicsMetrics: FunctionComponent<\n  ToolbarTopicsMetricsProps\n> = ({\n  title,\n  selectedTopic,\n  topicList,\n  duration,\n  isDisabled,\n  isRefreshing,\n  lastUpdated,\n  onSetTimeDuration,\n  onRefresh,\n  onSetSelectedTopic,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <CardHeader>\n        <CardTitle component=\"h2\">{title}</CardTitle>\n      </CardHeader>\n      <Divider />\n      <Toolbar>\n        <ToolbarContent>\n          <FilterByTopic\n            ariaLabel={t(\"metrics:topics_filter_by_topic\")}\n            selectedTopic={selectedTopic}\n            onSetSelectedTopic={onSetSelectedTopic}\n            topicList={topicList}\n            disableToolbar={isDisabled}\n          />\n          <FilterByTime\n            ariaLabel={t(\"metrics:topics_filter_by_time\")}\n            duration={duration}\n            onDurationChange={onSetTimeDuration}\n            disableToolbar={isDisabled}\n            keyText={\"topic-metrics-time-filter\"}\n          />\n          <ToolbarRefresh\n            isRefreshing={isRefreshing}\n            lastUpdated={lastUpdated}\n            onRefresh={onRefresh}\n            ariaLabel={t(\"metrics:topics_refresh\")}\n          />\n        </ToolbarContent>\n      </Toolbar>\n      <Divider />\n    </>\n  );\n};\n","import { Card, CardBody, CardTitle, Divider } from \"@patternfly/react-core\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type {\n  DurationOptions,\n  PartitionBytesMetric,\n  TimeSeriesMetrics,\n} from \"../types\";\nimport { CardBodyLoading } from \"./CardBodyLoading\";\nimport { ChartLinearWithOptionalLimit } from \"./ChartLinearWithOptionalLimit\";\nimport { ChartLogSizePerPartition } from \"./ChartLogSizePerPartition\";\nimport { ChartPopover } from \"./ChartPopover\";\nimport { ChartTotalBytes } from \"./ChartTotalBytes\";\nimport { EmptyStateNoMetricsData } from \"./EmptyStateNoMetricsData\";\nimport { EmptyStateNoMetricsDataForSelection } from \"./EmptyStateNoMetricsDataForSelection\";\nimport { EmptyStateNoTopics } from \"./EmptyStateNoTopics\";\nimport { EmptyStateNoTopicSelected } from \"./EmptyStateNoTopicSelected\";\nimport type { ToolbarRefreshProps } from \"./ToolbarRefresh\";\nimport { ToolbarTopicsMetrics } from \"./ToolbarTopicsMetrics\";\n\ntype CardTopicsMetricsProps = {\n  topics: string[];\n  incomingTopicsData: TimeSeriesMetrics;\n  outgoingTopicsData: TimeSeriesMetrics;\n  partitions: PartitionBytesMetric;\n  incomingMessageRate: TimeSeriesMetrics;\n  duration: DurationOptions;\n  backendUnavailable: boolean;\n  isInitialLoading: boolean;\n  isLoading: boolean;\n  isJustCreated: boolean;\n  selectedTopic: string | undefined;\n  onCreateTopic: () => void;\n  onSelectedTopic: (topic: string | undefined) => void;\n  onDurationChange: (duration: DurationOptions) => void;\n} & Omit<ToolbarRefreshProps, \"ariaLabel\">;\n\nexport const CardTopicsMetrics: FunctionComponent<CardTopicsMetricsProps> = ({\n  topics,\n  incomingTopicsData,\n  outgoingTopicsData,\n  incomingMessageRate,\n  selectedTopic,\n  duration,\n  partitions,\n  backendUnavailable,\n  isInitialLoading,\n  isLoading,\n  isRefreshing,\n  isJustCreated,\n  lastUpdated,\n  onCreateTopic,\n  onRefresh,\n  onSelectedTopic,\n  onDurationChange,\n}) => {\n  const { t } = useTranslation();\n  const noTopics = topics.length === 0;\n  const selectedTopicNotInList =\n    selectedTopic !== undefined &&\n    topics.find((t) => t === selectedTopic) === undefined;\n  const chartEmptyState = selectedTopicNotInList ? (\n    <EmptyStateNoMetricsDataForSelection />\n  ) : (\n    <EmptyStateNoMetricsData />\n  );\n  return (\n    <Card data-testid={\"metrics-topics\"}>\n      <ToolbarTopicsMetrics\n        title={t(\"metrics:topic_metrics\")}\n        duration={duration}\n        onSetTimeDuration={onDurationChange}\n        isDisabled={\n          backendUnavailable || isJustCreated || noTopics || isLoading\n        }\n        isRefreshing={isRefreshing}\n        selectedTopic={selectedTopic}\n        onSetSelectedTopic={onSelectedTopic}\n        onRefresh={onRefresh}\n        topicList={topics}\n        lastUpdated={lastUpdated}\n      />\n      {(() => {\n        switch (true) {\n          case isInitialLoading:\n            return <CardBodyLoading />;\n\n          case backendUnavailable:\n            return (\n              <CardBody>\n                <EmptyStateNoMetricsData />\n              </CardBody>\n            );\n\n          case isJustCreated && !noTopics:\n            return (\n              <CardBody>\n                <EmptyStateNoTopics />\n              </CardBody>\n            );\n\n          case isJustCreated && noTopics:\n            return (\n              <CardBody>\n                <EmptyStateNoTopics onCreateTopic={onCreateTopic} />\n              </CardBody>\n            );\n\n          case selectedTopic !== undefined:\n            return (\n              <>\n                <TotalBytesTitle />\n                <CardBody>\n                  <ChartTotalBytes\n                    incomingTopicsData={incomingTopicsData}\n                    outgoingTopicsData={outgoingTopicsData}\n                    selectedTopic={selectedTopic}\n                    duration={duration}\n                    isLoading={isLoading}\n                    emptyState={chartEmptyState}\n                  />\n                </CardBody>\n                <Divider />\n                <IncomingMessageRate />\n                <CardBody>\n                  <ChartLinearWithOptionalLimit\n                    chartName={t(\"metrics:topic_incoming_message_rate\")}\n                    yLabel={t(\"metrics:topic_incoming_message_rate_y_axis\")}\n                    metrics={incomingMessageRate}\n                    duration={duration}\n                    isLoading={isLoading}\n                    emptyState={chartEmptyState}\n                  />\n                </CardBody>\n                <Divider />\n                <PartitionSizeTitle />\n                <CardBody>\n                  <ChartLogSizePerPartition\n                    partitions={partitions}\n                    topic={selectedTopic}\n                    duration={duration}\n                    isLoading={isLoading}\n                    emptyState={chartEmptyState}\n                  />\n                </CardBody>\n              </>\n            );\n\n          default:\n            return (\n              <>\n                <TotalBytesTitle />\n                <CardBody>\n                  <ChartTotalBytes\n                    incomingTopicsData={incomingTopicsData}\n                    outgoingTopicsData={outgoingTopicsData}\n                    selectedTopic={selectedTopic}\n                    duration={duration}\n                    isLoading={isLoading}\n                    emptyState={chartEmptyState}\n                  />\n                </CardBody>\n                <Divider />\n                <IncomingMessageRate />\n                <CardBody>\n                  <ChartLinearWithOptionalLimit\n                    chartName={t(\"metrics:topic_incoming_message_rate\")}\n                    yLabel={t(\"metrics:topic_incoming_message_rate_y_axis\")}\n                    metrics={incomingMessageRate}\n                    duration={duration}\n                    isLoading={isLoading}\n                    emptyState={chartEmptyState}\n                  />\n                </CardBody>\n                <Divider />\n                <PartitionSizeTitle />\n                <CardBody>\n                  <EmptyStateNoTopicSelected />\n                </CardBody>\n              </>\n            );\n        }\n      })()}\n    </Card>\n  );\n};\n\nconst TotalBytesTitle: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <CardTitle component=\"h3\">\n      {t(\"metrics:total_bytes\")}{\" \"}\n      <ChartPopover\n        title={t(\"metrics:total_bytes_popover_header\")}\n        description={t(\"metrics:topic_metrics_help_text\")}\n      />\n    </CardTitle>\n  );\n};\n\nconst PartitionSizeTitle: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <CardTitle component=\"h3\">\n      {t(\"metrics:topic_partition_size\")}{\" \"}\n      <ChartPopover\n        title={t(\"metrics:topic_partition_size_popover_header\")}\n        description={t(\"metrics:topic_partition_size_help_text\")}\n      />\n    </CardTitle>\n  );\n};\n\nconst IncomingMessageRate: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <CardTitle component=\"h3\">\n      {t(\"metrics:topic_incoming_message_rate\")}{\" \"}\n      <ChartPopover\n        title={t(\"metrics:topic_incoming_message_rate_popover_header\")}\n        description={t(\"metrics:topic_incoming_message_rate_help_text\")}\n      />\n    </CardTitle>\n  );\n};\n","import type { FunctionComponent } from \"react\";\nimport {\n  CardHeader,\n  CardTitle,\n  Divider,\n  Toolbar,\n  ToolbarContent,\n} from \"@patternfly/react-core\";\nimport { FilterByTime } from \"./FilterByTime\";\nimport type { DurationOptions } from \"../types\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { ToolbarRefreshProps } from \"./ToolbarRefresh\";\nimport { ToolbarRefresh } from \"./ToolbarRefresh\";\n\ntype ToolbarKafkaInstanceMetricProps = {\n  title: string;\n  isDisabled: boolean;\n  duration: DurationOptions;\n  onSetTimeDuration: (value: DurationOptions) => void;\n} & Omit<ToolbarRefreshProps, \"ariaLabel\">;\nexport const ToolbarKafkaInstanceMetric: FunctionComponent<\n  ToolbarKafkaInstanceMetricProps\n> = ({\n  title,\n  isDisabled,\n  isRefreshing,\n  lastUpdated,\n  duration,\n  onSetTimeDuration,\n  onRefresh,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <CardHeader>\n        <CardTitle component=\"h2\">{title}</CardTitle>\n      </CardHeader>\n      <Divider />\n      <Toolbar>\n        <ToolbarContent>\n          <FilterByTime\n            ariaLabel={t(\"metrics:kafka_instance_filter_by_time\")}\n            duration={duration}\n            onDurationChange={onSetTimeDuration}\n            keyText={\"kafka-metrics-time-filter\"}\n            disableToolbar={isDisabled}\n          />\n          <ToolbarRefresh\n            isRefreshing={isRefreshing}\n            lastUpdated={lastUpdated}\n            onRefresh={onRefresh}\n            ariaLabel={t(\"metrics:kafka_instance_refresh\")}\n          />\n        </ToolbarContent>\n      </Toolbar>\n      <Divider />\n    </>\n  );\n};\n","import { Card, CardBody, CardTitle, Divider } from \"@patternfly/react-core\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { DurationOptions, TimeSeriesMetrics } from \"../types\";\nimport { CardBodyLoading } from \"./CardBodyLoading\";\nimport { ChartPopover } from \"./ChartPopover\";\nimport { ChartLinearWithOptionalLimit } from \"./ChartLinearWithOptionalLimit\";\nimport { EmptyStateMetricsUnavailable } from \"./EmptyStateMetricsUnavailable\";\nimport { ToolbarKafkaInstanceMetric } from \"./ToolbarKafkaInstanceMetric\";\nimport { formatBytes } from \"./utils\";\nimport { EmptyStateNoMetricsData } from \"./EmptyStateNoMetricsData\";\nimport type { ToolbarRefreshProps } from \"./ToolbarRefresh\";\n\nexport type CardKafkaInstanceMetricsLimits = {\n  diskSpaceLimit: number;\n  connectionsLimit: number;\n  connectionRateLimit: number;\n};\n\nexport type CardKafkaInstanceMetricsProps = {\n  usedDiskMetrics: TimeSeriesMetrics;\n  clientConnectionsMetrics: TimeSeriesMetrics;\n  connectionAttemptRateMetrics: TimeSeriesMetrics;\n  duration: DurationOptions;\n  lastUpdated: Date | undefined;\n  backendUnavailable: boolean;\n  isInitialLoading: boolean;\n  isLoading: boolean;\n  isJustCreated: boolean;\n  onDurationChange: (duration: DurationOptions) => void;\n} & Omit<ToolbarRefreshProps, \"ariaLabel\"> &\n  CardKafkaInstanceMetricsLimits;\n\ntype ChartTitleProps = {\n  title: string;\n  helperText: string;\n};\n\nexport const CardKafkaInstanceMetrics: FunctionComponent<\n  CardKafkaInstanceMetricsProps\n> = ({\n  usedDiskMetrics,\n  clientConnectionsMetrics,\n  connectionAttemptRateMetrics,\n  duration,\n  lastUpdated,\n  backendUnavailable,\n  isInitialLoading,\n  isLoading,\n  isRefreshing,\n  isJustCreated,\n  diskSpaceLimit,\n  connectionsLimit,\n  connectionRateLimit,\n  onRefresh,\n  onDurationChange,\n}) => {\n  const { t } = useTranslation(\"metrics\");\n\n  return (\n    <Card data-testid={\"metrics-kafka-instance\"}>\n      <ToolbarKafkaInstanceMetric\n        title={t(\"kafka_instance_metrics\")}\n        duration={duration}\n        lastUpdated={lastUpdated}\n        onSetTimeDuration={onDurationChange}\n        isDisabled={backendUnavailable || isJustCreated || isLoading}\n        isRefreshing={isRefreshing}\n        onRefresh={onRefresh}\n      />\n      {(() => {\n        switch (true) {\n          case isInitialLoading:\n            return <CardBodyLoading />;\n\n          case backendUnavailable:\n            return (\n              <CardBody>\n                <EmptyStateNoMetricsData />\n              </CardBody>\n            );\n\n          case isJustCreated:\n            return (\n              <CardBody>\n                <EmptyStateMetricsUnavailable />\n              </CardBody>\n            );\n\n          default:\n            return (\n              <>\n                <ChartTitle\n                  title={t(\"used_disk_space\")}\n                  helperText={t(\"used_disk_space_help_text\")}\n                />\n                <CardBody>\n                  <ChartLinearWithOptionalLimit\n                    chartName={t(\"used_disk_space\")}\n                    yLabel={t(\"axis-label-bytes\")}\n                    metrics={usedDiskMetrics}\n                    duration={duration}\n                    formatValue={formatBytes}\n                    usageLimit={diskSpaceLimit}\n                    isLoading={isLoading}\n                    emptyState={<EmptyStateNoMetricsData />}\n                  />\n                </CardBody>\n                <Divider />\n                <ChartTitle\n                  title={t(\"client_connections\")}\n                  helperText={t(\"client_connections_helper_text\")}\n                />\n                <CardBody>\n                  <ChartLinearWithOptionalLimit\n                    chartName={t(\"client_connections\")}\n                    yLabel={t(\"client_connections_y_axis\")}\n                    metrics={clientConnectionsMetrics}\n                    duration={duration}\n                    usageLimit={connectionsLimit}\n                    isLoading={isLoading}\n                    emptyState={<EmptyStateNoMetricsData />}\n                  />\n                </CardBody>\n                <Divider />\n                <ChartTitle\n                  title={t(\"connection_attempt_rate\")}\n                  helperText={t(\"connection_attempt_rate_help_text\")}\n                />\n                <CardBody>\n                  <ChartLinearWithOptionalLimit\n                    chartName={t(\"connection_attempt_rate\")}\n                    yLabel={t(\"connection_attempt_rate_yaxis\")}\n                    metrics={connectionAttemptRateMetrics}\n                    duration={duration}\n                    usageLimit={connectionRateLimit}\n                    isLoading={isLoading}\n                    emptyState={<EmptyStateNoMetricsData />}\n                  />\n                </CardBody>\n              </>\n            );\n        }\n      })()}\n    </Card>\n  );\n};\n\nexport const ChartTitle: FunctionComponent<ChartTitleProps> = ({\n  title,\n  helperText,\n}) => {\n  return (\n    <CardTitle component=\"h3\">\n      {title} <ChartPopover title={title} description={helperText} />\n    </CardTitle>\n  );\n};\n","import {\n  Bullseye,\n  Card,\n  CardBody,\n  CardTitle,\n  Skeleton,\n  Title,\n} from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { ChartPopover } from \"./ChartPopover\";\nimport { EmptyStateNoMetricsData } from \"./EmptyStateNoMetricsData\";\n\ntype CardKpiProps = {\n  metric: string | number | undefined;\n  name: string;\n  popover: string;\n  isLoading: boolean;\n};\n\nexport const CardKpi: VoidFunctionComponent<CardKpiProps> = ({\n  metric,\n  name,\n  popover,\n  isLoading,\n}) => {\n  return (\n    <Card isFullHeight data-testid={name}>\n      <CardTitle component=\"h3\">\n        {name} <ChartPopover title={name} description={popover} />\n      </CardTitle>\n      <CardBody>\n        {!isLoading &&\n          (metric === undefined ? (\n            <Bullseye>\n              <EmptyStateNoMetricsData />\n            </Bullseye>\n          ) : (\n            <Title\n              headingLevel=\"h3\"\n              size=\"4xl\"\n              aria-valuetext={`${metric} ${name}`}\n            >\n              {metric}\n            </Title>\n          ))}\n        {isLoading && <Skeleton width=\"50px\" shape=\"square\" />}\n      </CardBody>\n    </Card>\n  );\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { Alert, AlertActionCloseButton } from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport type MetricsLagAlertProps = {\n  isClosed: boolean;\n  onClickClose: () => void;\n};\n\nexport const MetricsLagAlert: VoidFunctionComponent<MetricsLagAlertProps> = ({\n  isClosed,\n  onClickClose,\n}) => {\n  const { t } = useTranslation(\"metrics\");\n\n  if (!isClosed) {\n    return (\n      <Alert\n        isInline\n        variant=\"info\"\n        title={t(\"metrics_lag_title\")}\n        actionClose={<AlertActionCloseButton onClose={onClickClose} />}\n      >\n        <p>{t(\"metrics_lag_description\")}</p>\n      </Alert>\n    );\n  } else {\n    return <> </>;\n  }\n};\n","import {\n  Alert,\n  AlertVariant,\n  Bullseye,\n  Card,\n  CardBody,\n  CardFooter,\n  CardTitle,\n  Skeleton,\n  Text,\n  TextContent,\n  Title,\n} from \"@patternfly/react-core\";\nimport {\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n} from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { ChartPopover } from \"./ChartPopover\";\nimport { EmptyStateNoMetricsData } from \"./EmptyStateNoMetricsData\";\n\ntype PartitionCardProps = {\n  metric: number | undefined;\n  isLoading: boolean;\n  topicPartitionsLimit: number | undefined;\n};\n\nexport const PartitionCard: VoidFunctionComponent<PartitionCardProps> = ({\n  metric,\n  isLoading,\n  topicPartitionsLimit = 0,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <Card\n      isFullHeight\n      data-testid={t(\"metrics:metric_kpi_topicPartitions_name\")}\n    >\n      <CardTitle component=\"h3\">\n        {t(\"metrics:metric_kpi_topicPartitions_name\")}{\" \"}\n        <ChartPopover\n          title={t(\"metrics:metric_kpi_topicPartitions_name\")}\n          description={t(\"metrics:metric_kpi_topicPartitions_description\")}\n        />\n      </CardTitle>\n      <CardBody>\n        {!isLoading &&\n          (metric === undefined ? (\n            <Bullseye>\n              <EmptyStateNoMetricsData />\n            </Bullseye>\n          ) : (\n            <>\n              <Title\n                headingLevel=\"h3\"\n                size=\"4xl\"\n                aria-valuetext={`${metric} ${t(\n                  \"metrics:metric_kpi_topicPartitions_name\"\n                )}`}\n              >\n                {metric}{\" \"}\n                {(() => {\n                  if (metric >= topicPartitionsLimit) {\n                    return (\n                      <ExclamationCircleIcon color=\"var(--pf-global--danger-color--100)\" />\n                    );\n                  } else if (metric >= topicPartitionsLimit * 0.95) {\n                    return (\n                      <ExclamationTriangleIcon color=\"var(--pf-global--warning-color--100)\" />\n                    );\n                  } else {\n                    return \"\";\n                  }\n                })()}\n              </Title>\n              <TextContent>\n                <Text>\n                  {t(\"metrics:partition_limit\", {\n                    topic: topicPartitionsLimit,\n                  })}\n                </Text>\n              </TextContent>\n            </>\n          ))}\n        {isLoading && <Skeleton width=\"50px\" shape=\"square\" />}\n      </CardBody>\n      {(() => {\n        if (metric && metric >= topicPartitionsLimit) {\n          return (\n            <CardFooter>\n              <Alert\n                isExpandable\n                isInline\n                variant={AlertVariant.danger}\n                title={t(\"metrics:partition_limit_reached_title\")}\n              >\n                <p>{t(\"metrics:partition_limit_reached_description_1\")}</p>\n                <p>{t(\"metrics:partition_limit_reached_description_2\")}</p>\n              </Alert>\n            </CardFooter>\n          );\n        } else if (metric && metric >= topicPartitionsLimit * 0.95) {\n          return (\n            <CardFooter>\n              <Alert\n                role={\"alert\"}\n                isExpandable\n                isInline\n                variant={AlertVariant.warning}\n                title={t(\"metrics:partition_limit_approaching_title\")}\n              >\n                <p>\n                  {t(\"metrics:partition_limit_approaching_description_1\", {\n                    limit: topicPartitionsLimit,\n                  })}\n                </p>\n                <p>{t(\"metrics:partition_limit_approaching_description_2\")}</p>\n              </Alert>\n            </CardFooter>\n          );\n        } else {\n          return \" \";\n        }\n      })()}\n    </Card>\n  );\n};\n","import { assign, createMachine } from \"xstate\";\nimport type {\n  GetKafkaInstanceMetricsResponse,\n  TimeSeriesMetrics,\n} from \"../types\";\nimport { DurationOptions } from \"../types\";\n\nconst MAX_RETRIES = 3;\n\nconst apiState = {\n  initial: \"loading\",\n  states: {\n    loading: {\n      invoke: {\n        src: \"api\",\n      },\n      on: {\n        fetchFail: {\n          actions: \"incrementRetries\",\n          target: \"failure\",\n        },\n      },\n    },\n    failure: {\n      after: {\n        1000: [\n          { cond: \"canRetryFetching\", target: \"loading\" },\n          { target: \"#kafkaInstanceMetrics.criticalFail\" },\n        ],\n      },\n    },\n  },\n};\n\nexport type KafkaInstanceMetricsMachineContext = {\n  lastUpdated: Date | undefined;\n\n  // from the UI elements\n  duration: DurationOptions;\n\n  // from the api\n  usedDiskSpaceMetrics: TimeSeriesMetrics;\n  clientConnectionsMetrics: TimeSeriesMetrics;\n  connectionAttemptRateMetrics: TimeSeriesMetrics;\n  diskSpaceLimit: number | undefined;\n  connectionsLimit: number | undefined;\n  connectionRateLimit: number | undefined;\n  // how many time did we try a fetch (that combines more api)\n  fetchFailures: number;\n};\n\nexport const KafkaInstanceMetricsMachine = createMachine(\n  {\n    tsTypes: {} as import(\"./KafkaInstanceMetricsMachine.typegen\").Typegen0,\n    schema: {\n      context: {} as KafkaInstanceMetricsMachineContext,\n      events: {} as\n        | ({ type: \"fetchSuccess\" } & GetKafkaInstanceMetricsResponse)\n        | { type: \"fetchFail\" }\n        // to refresh the data\n        | { type: \"refresh\" }\n        // from the UI elements\n        | { type: \"selectTopic\"; topic: string | undefined }\n        | { type: \"selectDuration\"; duration: DurationOptions },\n    },\n    id: \"kafkaInstanceMetrics\",\n    context: {\n      lastUpdated: undefined,\n      duration: DurationOptions.Last1hour,\n      usedDiskSpaceMetrics: {},\n      clientConnectionsMetrics: {},\n      connectionAttemptRateMetrics: {},\n      diskSpaceLimit: undefined,\n      connectionsLimit: undefined,\n      connectionRateLimit: undefined,\n      fetchFailures: 0,\n    },\n    initial: \"initialLoading\",\n    states: {\n      initialLoading: {\n        ...apiState,\n        tags: \"initialLoading\",\n        entry: \"setFetchTimestamp\",\n        on: {\n          fetchSuccess: [\n            {\n              cond: \"isJustCreated\",\n              actions: \"setMetrics\",\n              target: \"#kafkaInstanceMetrics.withResponse\",\n            },\n            { actions: \"setMetrics\", target: \"justCreated\" },\n          ],\n        },\n      },\n      callApi: {\n        ...apiState,\n        tags: \"loading\",\n        entry: \"setFetchTimestamp\",\n        on: {\n          fetchSuccess: {\n            actions: \"setMetrics\",\n            target: \"#kafkaInstanceMetrics.withResponse\",\n          },\n        },\n      },\n      criticalFail: {\n        tags: \"failed\",\n        on: {\n          refresh: {\n            actions: \"resetRetries\",\n            target: \"callApi\",\n          },\n        },\n      },\n      justCreated: {\n        tags: \"justCreated\",\n        on: {\n          refresh: {\n            target: \"initialLoading\",\n          },\n        },\n      },\n      withResponse: {\n        tags: \"withResponse\",\n        on: {\n          refresh: {\n            target: \"refreshing\",\n          },\n          selectDuration: {\n            actions: \"setDuration\",\n            target: \"callApi\",\n          },\n        },\n      },\n      refreshing: {\n        tags: \"refreshing\",\n        entry: \"setFetchTimestamp\",\n        invoke: {\n          src: \"api\",\n        },\n        on: {\n          fetchSuccess: {\n            actions: \"setMetrics\",\n            target: \"withResponse\",\n          },\n          fetchFail: {\n            // 👀 we silently ignore this happened and go back to the right\n            // state depending on the previous data\n            target: \"withResponse\",\n          },\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      setFetchTimestamp: assign({\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        lastUpdated: (_context) => new Date(),\n      }),\n      setMetrics: assign((_, event) => {\n        const {\n          usedDiskSpaceMetrics,\n          clientConnectionsMetrics,\n          connectionAttemptRateMetrics,\n          diskSpaceLimit,\n          connectionsLimit,\n          connectionRateLimit,\n        } = event;\n        return {\n          usedDiskSpaceMetrics,\n          clientConnectionsMetrics,\n          connectionAttemptRateMetrics,\n          diskSpaceLimit: diskSpaceLimit * 1024 ** 3, // convert it to GiB\n          connectionsLimit,\n          connectionRateLimit,\n        };\n      }),\n      incrementRetries: assign({\n        fetchFailures: (context) => context.fetchFailures + 1,\n      }),\n      resetRetries: assign({\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        fetchFailures: (_context) => 0,\n      }),\n      setDuration: assign((_context, event) => ({\n        duration: event.duration,\n        usedDiskSpaceMetrics: {},\n        clientConnectionsMetrics: {},\n        connectionAttemptRateMetrics: {},\n      })),\n    },\n    guards: {\n      canRetryFetching: (context) => context.fetchFailures < MAX_RETRIES,\n      isJustCreated: (_, event) => {\n        if (event.type === \"fetchSuccess\") {\n          return (\n            Object.keys(event.clientConnectionsMetrics).length > 0 ||\n            Object.keys(event.connectionAttemptRateMetrics).length > 0 ||\n            Object.keys(event.usedDiskSpaceMetrics).length > 0\n          );\n        }\n        return false;\n      },\n    },\n  }\n);\n\nexport type KafkaInstanceMetricsMachineType =\n  typeof KafkaInstanceMetricsMachine;\n","import { assign, createMachine } from \"xstate\";\nimport type {\n  GetTopicsMetricsResponse,\n  PartitionBytesMetric,\n  TimeSeriesMetrics,\n} from \"../types\";\nimport { DurationOptions } from \"../types\";\n\nconst MAX_RETRIES = 3;\n\nconst apiState = {\n  initial: \"loading\",\n  states: {\n    loading: {\n      invoke: {\n        src: \"api\",\n      },\n      on: {\n        fetchFail: {\n          actions: \"incrementRetries\",\n          target: \"failure\",\n        },\n      },\n    },\n    failure: {\n      after: {\n        1000: [\n          { cond: \"canRetryFetching\", target: \"loading\" },\n          { target: \"#topicsMetrics.criticalFail\" },\n        ],\n      },\n    },\n  },\n};\n\nexport type TopicsMetricsMachineContext = {\n  lastUpdated: Date | undefined;\n\n  // from the UI elements\n  selectedTopic: string | undefined;\n  duration: DurationOptions;\n\n  // from the api\n  kafkaTopics: string[];\n  metricsTopics: string[];\n  bytesOutgoing: TimeSeriesMetrics;\n  bytesIncoming: TimeSeriesMetrics;\n  bytesPerPartition: PartitionBytesMetric;\n  incomingMessageRate: TimeSeriesMetrics;\n\n  // how many time did we try a fetch (that combines more api)\n  fetchFailures: number;\n};\n\nexport const TopicsMetricsMachine = createMachine(\n  {\n    tsTypes: {} as import(\"./TopicsMetricsMachine.typegen\").Typegen0,\n    schema: {\n      context: {} as TopicsMetricsMachineContext,\n      events: {} as  // called when a new kafka id has been specified\n        | ({ type: \"fetchSuccess\" } & GetTopicsMetricsResponse)\n        | { type: \"fetchFail\" }\n\n        // to refresh the data\n        | { type: \"refresh\" }\n\n        // from the UI elements\n        | { type: \"selectTopic\"; topic: string | undefined }\n        | { type: \"selectDuration\"; duration: DurationOptions },\n    },\n    id: \"topicsMetrics\",\n    context: {\n      lastUpdated: undefined,\n\n      // from the UI elements\n      selectedTopic: undefined,\n      duration: DurationOptions.Last1hour,\n\n      // from the api\n      kafkaTopics: [],\n      metricsTopics: [],\n      bytesOutgoing: {},\n      bytesIncoming: {},\n      bytesPerPartition: {},\n      incomingMessageRate: {},\n\n      // how many time did we try a fetch (that combines more api)\n      fetchFailures: 0,\n    },\n    initial: \"initialLoading\",\n    states: {\n      initialLoading: {\n        ...apiState,\n        tags: \"initialLoading\",\n        entry: \"setFetchTimestamp\",\n        on: {\n          fetchSuccess: [\n            {\n              cond: \"isJustCreated\",\n              actions: \"setMetrics\",\n              target: \"#topicsMetrics.withResponse\",\n            },\n            { actions: \"setMetrics\", target: \"justCreated\" },\n          ],\n        },\n      },\n      callApi: {\n        ...apiState,\n        tags: \"loading\",\n        entry: \"setFetchTimestamp\",\n        on: {\n          fetchSuccess: {\n            actions: \"setMetrics\",\n            target: \"#topicsMetrics.withResponse\",\n          },\n        },\n      },\n      criticalFail: {\n        tags: \"failed\",\n        on: {\n          refresh: {\n            actions: \"resetRetries\",\n            target: \"callApi\",\n          },\n        },\n      },\n      justCreated: {\n        tags: \"justCreated\",\n        on: {\n          refresh: {\n            target: \"initialLoading\",\n          },\n        },\n      },\n      withResponse: {\n        tags: \"withResponse\",\n        initial: \"idle\",\n        states: {\n          idle: {},\n          refreshing: {\n            tags: \"refreshing\",\n            entry: \"setFetchTimestamp\",\n            invoke: {\n              src: \"api\",\n            },\n            on: {\n              fetchSuccess: {\n                actions: \"setMetrics\",\n                target: \"#topicsMetrics.withResponse\",\n              },\n              fetchFail: {\n                // 👀 we silently ignore this happened\n                target: \"#topicsMetrics.withResponse\",\n              },\n            },\n          },\n        },\n        on: {\n          refresh: {\n            target: \"#topicsMetrics.withResponse.refreshing\",\n          },\n          selectTopic: {\n            actions: \"setTopic\",\n            target: \"callApi\",\n          },\n          selectDuration: {\n            actions: \"setDuration\",\n            target: \"callApi\",\n          },\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      setFetchTimestamp: assign({\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        lastUpdated: (_context) => new Date(),\n      }),\n      setMetrics: assign((_context, event) => {\n        const {\n          kafkaTopics,\n          metricsTopics,\n          bytesPerPartition,\n          bytesIncoming,\n          bytesOutgoing,\n          incomingMessageRate,\n        } = event;\n        return {\n          kafkaTopics,\n          metricsTopics,\n          bytesPerPartition,\n          bytesIncoming,\n          bytesOutgoing,\n          incomingMessageRate,\n        };\n      }),\n      incrementRetries: assign({\n        fetchFailures: (context) => context.fetchFailures + 1,\n      }),\n      resetRetries: assign({\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        fetchFailures: (_context) => 0,\n      }),\n      setTopic: assign({\n        selectedTopic: (_context, event) => event.topic,\n      }),\n      setDuration: assign({\n        duration: (_, event) => event.duration,\n      }),\n    },\n    guards: {\n      canRetryFetching: (context) => context.fetchFailures < MAX_RETRIES,\n      isJustCreated: (_, event) => {\n        if (event.type === \"fetchSuccess\") {\n          return (\n            Object.keys(event.bytesIncoming).length > 0 ||\n            Object.keys(event.bytesOutgoing).length > 0 ||\n            Object.keys(event.bytesPerPartition).length > 0 ||\n            Object.keys(event.incomingMessageRate).length > 0\n          );\n        }\n        return false;\n      },\n    },\n  }\n);\n\nexport type TopicsMetricsMachineType = typeof TopicsMetricsMachine;\n","import { assign, createMachine } from \"xstate\";\nimport type { GetMetricsKpiResponse } from \"../types\";\n\nconst MAX_RETRIES = 3;\n\nconst apiState = {\n  initial: \"loading\",\n  states: {\n    loading: {\n      invoke: {\n        src: \"api\",\n      },\n      on: {\n        fetchFail: {\n          actions: \"incrementRetries\",\n          target: \"failure\",\n        },\n      },\n    },\n    failure: {\n      after: {\n        1000: [\n          { cond: \"canRetryFetching\", target: \"loading\" },\n          { target: \"#kpis.criticalFail\" },\n        ],\n      },\n    },\n  },\n};\n\nexport type MetricsKpiMachineContext = {\n  // from the api\n  topics: number | undefined;\n  topicPartitions: number | undefined;\n  consumerGroups: number | undefined;\n  topicPartitionsLimit: number | undefined;\n\n  // how many time did we try a fetch (that combines more api)\n  fetchFailures: number;\n};\n\nexport const MetricsKpiMachine = createMachine(\n  {\n    tsTypes: {} as import(\"./MetricsKpiMachine.typegen\").Typegen0,\n    schema: {\n      context: {} as MetricsKpiMachineContext,\n      events: {} as\n        | { type: \"fetch\" }\n        | ({ type: \"fetchSuccess\" } & GetMetricsKpiResponse)\n        | { type: \"fetchFail\" }\n        | { type: \"refresh\" },\n    },\n    id: \"kpis\",\n    context: {\n      topics: undefined,\n      topicPartitions: undefined,\n      consumerGroups: undefined,\n      topicPartitionsLimit: undefined,\n      fetchFailures: 0,\n    },\n    initial: \"initialLoading\",\n    states: {\n      initialLoading: {\n        ...apiState,\n        tags: \"initialLoading\",\n        on: {\n          fetchSuccess: [\n            {\n              cond: \"isJustCreated\",\n              actions: \"setMetrics\",\n              target: \"#kpis.withResponse\",\n            },\n            { actions: \"setMetrics\", target: \"justCreated\" },\n          ],\n        },\n      },\n      callApi: {\n        ...apiState,\n        tags: \"loading\",\n        on: {\n          fetchSuccess: {\n            actions: \"setMetrics\",\n            target: \"#kpis.withResponse\",\n          },\n        },\n      },\n      criticalFail: {\n        tags: \"failed\",\n        on: {\n          refresh: {\n            actions: \"resetRetries\",\n            target: \"callApi\",\n          },\n        },\n      },\n      justCreated: {\n        tags: \"justCreated\",\n        on: {\n          refresh: {\n            target: \"initialLoading\",\n          },\n        },\n      },\n      withResponse: {\n        tags: \"withResponse\",\n        initial: \"idle\",\n        states: {\n          idle: {},\n          refreshing: {\n            tags: \"refreshing\",\n            invoke: {\n              src: \"api\",\n            },\n            on: {\n              fetchSuccess: {\n                actions: \"setMetrics\",\n                target: \"#kpis.withResponse\",\n              },\n              fetchFail: {\n                // 👀 we silently ignore this happened\n                target: \"#kpis.withResponse\",\n              },\n            },\n          },\n        },\n        on: {\n          refresh: {\n            target: \"#kpis.withResponse.refreshing\",\n          },\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      setMetrics: assign((_, event) => {\n        const {\n          topics,\n          topicPartitions,\n          consumerGroups,\n          topicPartitionsLimit,\n        } = event;\n        return {\n          topics,\n          topicPartitions,\n          consumerGroups,\n          topicPartitionsLimit,\n        };\n      }),\n\n      incrementRetries: assign({\n        fetchFailures: (context) => context.fetchFailures + 1,\n      }),\n\n      resetRetries: assign({\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        fetchFailures: (_context) => 0,\n      }),\n    },\n    guards: {\n      canRetryFetching: (context) => context.fetchFailures < MAX_RETRIES,\n      isJustCreated: (_, event) => {\n        if (event.type === \"fetchSuccess\") {\n          return (\n            event.topics !== undefined ||\n            event.topicPartitions !== undefined ||\n            event.consumerGroups !== undefined ||\n            event.topicPartitionsLimit !== undefined\n          );\n        }\n        return false;\n      },\n    },\n  }\n);\n\nexport type MetricsKpiMachineType = typeof MetricsKpiMachine;\n","import { useInterpret } from \"@xstate/react\";\nimport type { FunctionComponent } from \"react\";\nimport { createContext } from \"react\";\nimport type { ActorRefFrom } from \"xstate\";\nimport { timeIntervalsMapping } from \"./consts\";\nimport type { KafkaInstanceMetricsMachineType } from \"./machines\";\nimport { KafkaInstanceMetricsMachine } from \"./machines\";\nimport type { DurationOptions, GetKafkaInstanceMetricsResponse } from \"./types\";\n\nexport const KafkaInstanceMetricsContext = createContext<{\n  service: ActorRefFrom<KafkaInstanceMetricsMachineType>;\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n}>(null!);\n\nexport type KafkaInstanceMetricsProviderProps = {\n  getKafkaInstanceMetrics: (options: {\n    duration: DurationOptions;\n    interval: number;\n  }) => Promise<GetKafkaInstanceMetricsResponse>;\n};\nexport const KafkaInstanceMetricsProvider: FunctionComponent<\n  KafkaInstanceMetricsProviderProps\n> = ({ children, getKafkaInstanceMetrics }) => {\n  const service = useInterpret(\n    () =>\n      KafkaInstanceMetricsMachine.withConfig({\n        services: {\n          api: (context) => {\n            return (callback) => {\n              getKafkaInstanceMetrics({\n                duration: context.duration,\n                interval: timeIntervalsMapping[context.duration].interval,\n              })\n                .then((results) =>\n                  callback({ type: \"fetchSuccess\", ...results })\n                )\n                .catch((e) => {\n                  console.error(\"Failed fetching data\", e);\n                  callback(\"fetchFail\");\n                });\n            };\n          },\n        },\n      }),\n    {\n      devTools: true,\n    }\n  );\n  return (\n    <KafkaInstanceMetricsContext.Provider\n      value={{\n        service,\n      }}\n    >\n      {children}\n    </KafkaInstanceMetricsContext.Provider>\n  );\n};\n","import { useInterpret } from \"@xstate/react\";\nimport type { FunctionComponent } from \"react\";\nimport { createContext } from \"react\";\nimport type { ActorRefFrom } from \"xstate\";\nimport type { MetricsKpiMachineType } from \"./machines\";\nimport { MetricsKpiMachine } from \"./machines\";\nimport type { GetMetricsKpiResponse } from \"./types\";\n\nexport const MetricsKpiContext = createContext<{\n  service: ActorRefFrom<MetricsKpiMachineType>;\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n}>(null!);\n\nexport type MetricsKpiProviderProps = {\n  getMetricsKpi: () => Promise<GetMetricsKpiResponse>;\n};\nexport const MetricsKpiProvider: FunctionComponent<MetricsKpiProviderProps> = ({\n  children,\n  getMetricsKpi,\n}) => {\n  const service = useInterpret(\n    () =>\n      MetricsKpiMachine.withConfig({\n        services: {\n          api: () => {\n            return (callback) => {\n              getMetricsKpi()\n                .then((results) =>\n                  callback({ type: \"fetchSuccess\", ...results })\n                )\n                .catch((e) => {\n                  console.error(\"Failed fetching data\", e);\n                  callback(\"fetchFail\");\n                });\n            };\n          },\n        },\n      }),\n    {\n      devTools: true,\n    }\n  );\n  return (\n    <MetricsKpiContext.Provider\n      value={{\n        service,\n      }}\n    >\n      {children}\n    </MetricsKpiContext.Provider>\n  );\n};\n","import { useInterpret } from \"@xstate/react\";\nimport type { FunctionComponent } from \"react\";\nimport { createContext } from \"react\";\nimport type { ActorRefFrom } from \"xstate\";\nimport { timeIntervalsMapping } from \"./consts\";\nimport type { TopicsMetricsMachineType } from \"./machines\";\nimport { TopicsMetricsMachine } from \"./machines\";\nimport type { DurationOptions, GetTopicsMetricsResponse } from \"./types\";\n\nexport const TopicsMetricsContext = createContext<{\n  service: ActorRefFrom<TopicsMetricsMachineType>;\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n}>(null!);\n\nexport type TopicsMetricsProviderProps = {\n  getTopicsMetrics: (options: {\n    duration: DurationOptions;\n    interval: number;\n    selectedTopic: string | undefined;\n  }) => Promise<GetTopicsMetricsResponse>;\n};\nexport const TopicsMetricsProvider: FunctionComponent<\n  TopicsMetricsProviderProps\n> = ({ children, getTopicsMetrics }) => {\n  const service = useInterpret(\n    () =>\n      TopicsMetricsMachine.withConfig({\n        services: {\n          api: (context) => {\n            return (callback) => {\n              getTopicsMetrics({\n                selectedTopic: context.selectedTopic,\n                duration: context.duration,\n                interval: timeIntervalsMapping[context.duration].interval,\n              })\n                .then((results) =>\n                  callback({ type: \"fetchSuccess\", ...results })\n                )\n                .catch((e) => {\n                  console.error(\"Failed fetching data\", e);\n                  callback(\"fetchFail\");\n                });\n            };\n          },\n        },\n      }),\n    {\n      devTools: true,\n    }\n  );\n  return (\n    <TopicsMetricsContext.Provider\n      value={{\n        service,\n      }}\n    >\n      {children}\n    </TopicsMetricsContext.Provider>\n  );\n};\n","import { useSelector } from \"@xstate/react\";\nimport { useCallback, useContext } from \"react\";\nimport { KafkaInstanceMetricsContext } from \"./KafkaInstanceMetricsProvider\";\nimport type { KafkaInstanceMetricsMachineContext } from \"./machines\";\nimport type { DurationOptions } from \"./types\";\n\ntype SeletorReturn = KafkaInstanceMetricsMachineContext & {\n  isInitialLoading: boolean;\n  isRefreshing: boolean;\n  isLoading: boolean;\n  isFailed: boolean;\n  isJustCreated: boolean;\n};\n\nexport function useKafkaInstanceMetrics() {\n  const { service } = useContext(KafkaInstanceMetricsContext);\n\n  const {\n    usedDiskSpaceMetrics,\n    clientConnectionsMetrics,\n    connectionAttemptRateMetrics,\n    diskSpaceLimit,\n    connectionsLimit,\n    connectionRateLimit,\n    duration,\n    lastUpdated,\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n  } = useSelector<typeof service, SeletorReturn>(\n    service,\n    useCallback(\n      (state) => ({\n        ...state.context,\n        isInitialLoading: state.hasTag(\"initialLoading\"),\n        isRefreshing: state.hasTag(\"refreshing\"),\n        isLoading: state.hasTag(\"loading\"),\n        isFailed: state.hasTag(\"failed\"),\n        isJustCreated: state.hasTag(\"justCreated\"),\n      }),\n      []\n    )\n  );\n\n  const onDurationChange = useCallback(\n    (duration: DurationOptions) =>\n      service.send({ type: \"selectDuration\", duration }),\n    [service]\n  );\n\n  const onRefresh = useCallback(() => service.send(\"refresh\"), [service]);\n\n  return {\n    usedDiskSpaceMetrics,\n    clientConnectionsMetrics,\n    connectionAttemptRateMetrics,\n    diskSpaceLimit,\n    connectionsLimit,\n    connectionRateLimit,\n    lastUpdated,\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n    duration,\n    onDurationChange,\n    onRefresh,\n  };\n}\n","import { useSelector } from \"@xstate/react\";\nimport { useCallback, useContext, useMemo } from \"react\";\nimport type { TopicsMetricsMachineContext } from \"./machines\";\nimport { TopicsMetricsContext } from \"./TopicsMetricsProvider\";\nimport type { DurationOptions } from \"./types\";\n\ntype SelectorReturn = TopicsMetricsMachineContext & {\n  isInitialLoading: boolean;\n  isRefreshing: boolean;\n  isLoading: boolean;\n  isFailed: boolean;\n  isJustCreated: boolean;\n};\n\nexport function useTopicsMetrics() {\n  const { service } = useContext(TopicsMetricsContext);\n\n  const {\n    selectedTopic,\n    duration,\n    kafkaTopics,\n    metricsTopics,\n    bytesIncoming,\n    bytesOutgoing,\n    bytesPerPartition,\n    incomingMessageRate,\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n    lastUpdated,\n  } = useSelector<typeof service, SelectorReturn>(\n    service,\n    useCallback(\n      (state) => ({\n        ...state.context,\n        isInitialLoading: state.hasTag(\"initialLoading\"),\n        isRefreshing: state.hasTag(\"refreshing\"),\n        isLoading: state.hasTag(\"loading\"),\n        isFailed: state.hasTag(\"failed\"),\n        isJustCreated: state.hasTag(\"justCreated\"),\n      }),\n      []\n    )\n  );\n\n  const onTopicChange = useCallback(\n    (topic: string | undefined) => service.send({ type: \"selectTopic\", topic }),\n    [service]\n  );\n\n  const onDurationChange = useCallback(\n    (duration: DurationOptions) =>\n      service.send({ type: \"selectDuration\", duration }),\n    [service]\n  );\n\n  const onRefresh = useCallback(() => service.send(\"refresh\"), [service]);\n\n  const mergedTopics = useMemo((): string[] => {\n    const topics = Array.from(\n      new Set<string>([...kafkaTopics, ...metricsTopics])\n    );\n    topics.sort((a, b) => a.localeCompare(b));\n    return topics;\n  }, [kafkaTopics, metricsTopics]);\n\n  return {\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n    lastUpdated,\n    topics: mergedTopics,\n    selectedTopic,\n    duration,\n    bytesIncoming,\n    bytesOutgoing,\n    bytesPerPartition,\n    incomingMessageRate,\n    onTopicChange,\n    onDurationChange,\n    onRefresh,\n  };\n}\n","import { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport {\n  CardKafkaInstanceMetrics,\n  CardTopicsMetrics,\n  EmptyStateInitialLoading,\n  EmptyStateMetricsUnavailable,\n  MetricsLayout,\n} from \"./components\";\nimport { CardKpi } from \"./components/CardKpi\";\nimport { MetricsLagAlert } from \"./components/MetricsLagAlert\";\nimport { PartitionCard } from \"./components/PartitionCard\";\nimport type { KafkaInstanceMetricsProviderProps } from \"./KafkaInstanceMetricsProvider\";\nimport { KafkaInstanceMetricsProvider } from \"./KafkaInstanceMetricsProvider\";\nimport type { MetricsKpiProviderProps } from \"./MetricsKpiProvider\";\nimport { MetricsKpiProvider } from \"./MetricsKpiProvider\";\nimport type { TopicsMetricsProviderProps } from \"./TopicsMetricsProvider\";\nimport { TopicsMetricsProvider } from \"./TopicsMetricsProvider\";\nimport { useKafkaInstanceMetrics } from \"./useKafkaInstanceMetrics\";\nimport { useMetricsKpi } from \"./useMetricsKpi\";\nimport { useTopicsMetrics } from \"./useTopicsMetrics\";\n\nexport type MetricsProps = {\n  onCreateTopic: () => void;\n  onAlertClose: () => void;\n  hasUserAlreadyClosedAlert: boolean;\n} & KafkaInstanceMetricsProviderProps &\n  TopicsMetricsProviderProps &\n  MetricsKpiProviderProps;\n\nexport const Metrics: VoidFunctionComponent<MetricsProps> = ({\n  getKafkaInstanceMetrics,\n  getTopicsMetrics,\n  getMetricsKpi,\n  onCreateTopic,\n  onAlertClose,\n  hasUserAlreadyClosedAlert,\n}) => {\n  return (\n    <TopicsMetricsProvider getTopicsMetrics={getTopicsMetrics}>\n      <KafkaInstanceMetricsProvider\n        getKafkaInstanceMetrics={getKafkaInstanceMetrics}\n      >\n        <MetricsKpiProvider getMetricsKpi={getMetricsKpi}>\n          <ConnectedMetrics\n            onCreateTopic={onCreateTopic}\n            onClickClose={onAlertClose}\n            isClosed={hasUserAlreadyClosedAlert}\n          />\n        </MetricsKpiProvider>\n      </KafkaInstanceMetricsProvider>\n    </TopicsMetricsProvider>\n  );\n};\n\ntype ConnectedMetricsProps = {\n  onCreateTopic: () => void;\n  onClickClose: () => void;\n  isClosed: boolean;\n};\nconst ConnectedMetrics: VoidFunctionComponent<ConnectedMetricsProps> = ({\n  onCreateTopic,\n  onClickClose,\n  isClosed,\n}) => {\n  const { t } = useTranslation();\n  const kafkaInstanceMetrics = useKafkaInstanceMetrics();\n  const topicsMetrics = useTopicsMetrics();\n  const metricsKpi = useMetricsKpi();\n\n  switch (true) {\n    case kafkaInstanceMetrics.isInitialLoading ||\n      topicsMetrics.isInitialLoading ||\n      metricsKpi.isInitialLoading:\n      return <EmptyStateInitialLoading />;\n    case kafkaInstanceMetrics.isFailed &&\n      topicsMetrics.isFailed &&\n      topicsMetrics.isFailed:\n    case kafkaInstanceMetrics.isJustCreated &&\n      topicsMetrics.isJustCreated &&\n      metricsKpi.isJustCreated:\n      return <EmptyStateMetricsUnavailable />;\n    default:\n      return (\n        <MetricsLayout\n          metricsLagAlert={\n            <MetricsLagAlert onClickClose={onClickClose} isClosed={isClosed} />\n          }\n          topicsKpi={\n            <CardKpi\n              metric={metricsKpi.topics}\n              isLoading={metricsKpi.isInitialLoading || metricsKpi.isLoading}\n              name={t(\"metrics:metric_kpi_topics_name\")}\n              popover={t(\"metrics:metric_kpi_topics_description\")}\n            />\n          }\n          topicPartitionsKpi={\n            <PartitionCard\n              metric={metricsKpi.topicPartitions}\n              isLoading={metricsKpi.isInitialLoading || metricsKpi.isLoading}\n              topicPartitionsLimit={metricsKpi.topicPartitionsLimit}\n            />\n          }\n          consumerGroupKpi={\n            <CardKpi\n              metric={metricsKpi.consumerGroups}\n              isLoading={metricsKpi.isInitialLoading || metricsKpi.isLoading}\n              name={t(\"metrics:metric_kpi_consumerGroup_name\")}\n              popover={t(\"metrics:metric_kpi_consumerGroup_description\")}\n            />\n          }\n          diskSpaceMetrics={<ConnectedKafkaInstanceMetrics />}\n          topicMetrics={\n            <ConnectedTopicsMetrics onCreateTopic={onCreateTopic} />\n          }\n        />\n      );\n  }\n};\n\nconst ConnectedKafkaInstanceMetrics: VoidFunctionComponent = () => {\n  const {\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n    duration,\n    lastUpdated,\n    usedDiskSpaceMetrics,\n    clientConnectionsMetrics,\n    connectionAttemptRateMetrics,\n    diskSpaceLimit,\n    connectionsLimit,\n    connectionRateLimit,\n    onDurationChange,\n    onRefresh,\n  } = useKafkaInstanceMetrics();\n\n  return (\n    <CardKafkaInstanceMetrics\n      usedDiskMetrics={usedDiskSpaceMetrics}\n      clientConnectionsMetrics={clientConnectionsMetrics}\n      connectionAttemptRateMetrics={connectionAttemptRateMetrics}\n      duration={duration}\n      backendUnavailable={isFailed}\n      isInitialLoading={isInitialLoading}\n      isLoading={isLoading}\n      isRefreshing={isRefreshing}\n      isJustCreated={isJustCreated}\n      lastUpdated={lastUpdated}\n      onRefresh={onRefresh}\n      onDurationChange={onDurationChange}\n      diskSpaceLimit={diskSpaceLimit || 0}\n      connectionsLimit={connectionsLimit || 0}\n      connectionRateLimit={connectionRateLimit || 0}\n    />\n  );\n};\n\ntype ConnectedTopicsMetricsProps = {\n  onCreateTopic: () => void;\n};\nconst ConnectedTopicsMetrics: VoidFunctionComponent<\n  ConnectedTopicsMetricsProps\n> = ({ onCreateTopic }) => {\n  const {\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n    lastUpdated,\n    selectedTopic,\n    duration,\n    topics,\n    bytesIncoming,\n    bytesOutgoing,\n    bytesPerPartition,\n    incomingMessageRate,\n    onDurationChange,\n    onTopicChange,\n    onRefresh,\n  } = useTopicsMetrics();\n\n  return (\n    <CardTopicsMetrics\n      backendUnavailable={isFailed}\n      topics={topics}\n      incomingTopicsData={bytesIncoming}\n      outgoingTopicsData={bytesOutgoing}\n      partitions={bytesPerPartition}\n      incomingMessageRate={incomingMessageRate}\n      duration={duration}\n      isInitialLoading={isInitialLoading}\n      isLoading={isLoading}\n      isRefreshing={isRefreshing}\n      isJustCreated={isJustCreated}\n      lastUpdated={lastUpdated}\n      selectedTopic={selectedTopic}\n      onRefresh={onRefresh}\n      onSelectedTopic={onTopicChange}\n      onDurationChange={onDurationChange}\n      onCreateTopic={onCreateTopic}\n    />\n  );\n};\n","import { useSelector } from \"@xstate/react\";\nimport { useCallback, useContext } from \"react\";\nimport type { MetricsKpiMachineContext } from \"./machines\";\nimport { MetricsKpiContext } from \"./MetricsKpiProvider\";\n\ntype SelectorReturn = MetricsKpiMachineContext & {\n  isInitialLoading: boolean;\n  isRefreshing: boolean;\n  isLoading: boolean;\n  isFailed: boolean;\n  isJustCreated: boolean;\n};\n\nexport function useMetricsKpi() {\n  const { service } = useContext(MetricsKpiContext);\n\n  const {\n    topics,\n    topicPartitions,\n    topicPartitionsLimit,\n    consumerGroups,\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n  } = useSelector<typeof service, SelectorReturn>(\n    service,\n    useCallback(\n      (state) => ({\n        ...state.context,\n        isInitialLoading: state.hasTag(\"initialLoading\"),\n        isRefreshing: state.hasTag(\"refreshing\"),\n        isLoading: state.hasTag(\"loading\"),\n        isFailed: state.hasTag(\"failed\"),\n        isJustCreated: state.hasTag(\"justCreated\"),\n      }),\n      []\n    )\n  );\n\n  const onRefresh = useCallback(() => service.send(\"refresh\"), [service]);\n\n  return {\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n    topics,\n    topicPartitions,\n    consumerGroups,\n    topicPartitionsLimit,\n    onRefresh,\n  };\n}\n","import type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport type { ConsumerGroupState } from \"../types\";\n\nexport type ConsumerGroupStateLabelProps = {\n  state: ConsumerGroupState;\n};\n\nexport const ConsumerGroupStateLabel: FunctionComponent<\n  ConsumerGroupStateLabelProps\n> = ({ state }) => {\n  const { t } = useTranslation([\"kafka\"]);\n\n  switch (state) {\n    case \"Stable\":\n      return t(\"consumerGroup.state.stable\");\n    case \"Empty\":\n      return t(\"consumerGroup.state.empty\");\n    case \"Dead\":\n      return t(\"consumerGroup.state.dead\");\n    case \"CompletingRebalance\":\n      return t(\"consumerGroup.state.completing_rebalance\");\n    case \"PreparingRebalance\":\n      return t(\"consumerGroup.state.preparing_rebalance\");\n    case \"Unknown\":\n      return t(\"consumerGroup.state.unknown\");\n    default:\n      return null;\n  }\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from \"@patternfly/react-core\";\nimport { CubesIcon } from \"@patternfly/react-icons\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nexport const ConsumerGroupEmptyState: FunctionComponent = () => {\n  const { t } = useTranslation([\"kafka\"]);\n  return (\n    <EmptyState variant={EmptyStateVariant.large}>\n      <EmptyStateIcon icon={CubesIcon} />\n      <Title headingLevel={\"h1\"} size={TitleSizes.lg}>\n        {t(\"consumerGroup.empty_consumer_title\")}\n      </Title>\n      <EmptyStateBody>{t(\"consumerGroup.empty_consumer_body\")}</EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import type { TableViewProps } from \"@rhoas/app-services-ui-components\";\nimport { EmptyStateNoResults, TableView } from \"@rhoas/app-services-ui-components\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { ConsumerGroupEmptyState, ConsumerGroupStateLabel } from \"./components\";\nimport { TableVariant } from \"@patternfly/react-table\";\nimport type { ConsumerGroup, ConsumerGroupField } from \"./types\";\n\nconst Columns: ConsumerGroupField[] = [\n  \"consumerGroupId\",\n  \"activeMembers\",\n  \"partitionsWithLag\",\n  \"state\",\n];\n\nexport type ConsumerGroupsProps<T extends ConsumerGroup> = {\n  consumers: Array<T> | undefined;\n  onDelete: (row: T) => void;\n  onViewPartition: (row: T) => void;\n  onViewResetOffset: (row: T) => void;\n  consumerName: string[];\n  onSearchConsumer: (value: string) => void;\n  onRemoveConsumerChip: (value: string) => void;\n  onRemoveConsumerChips: () => void;\n} & Pick<\n  TableViewProps<T, typeof Columns[number]>,\n  | \"itemCount\"\n  | \"page\"\n  | \"perPage\"\n  | \"onPageChange\"\n  | \"isRowSelected\"\n  | \"isColumnSortable\"\n  | \"onClearAllFilters\"\n>;\n\nexport const ConsumerGroups = <T extends ConsumerGroup>({\n  consumers,\n  onDelete,\n  onViewPartition,\n  isColumnSortable,\n  itemCount,\n  onViewResetOffset,\n  onClearAllFilters,\n  page,\n  perPage,\n  onPageChange,\n  consumerName,\n  onSearchConsumer,\n  onRemoveConsumerChip,\n  onRemoveConsumerChips,\n}: ConsumerGroupsProps<T>) => {\n  const { t } = useTranslation(\"kafka\");\n\n  const labels: { [field in ConsumerGroupField]: string } = {\n    consumerGroupId: t(\"consumerGroup.consumer_group_id\"),\n    activeMembers: t(\"consumerGroup.active_members\"),\n    partitionsWithLag: t(\"consumerGroup.partitions_with_lag\"),\n    state: t(\"consumerGroup.state_header\"),\n  };\n\n  const isFiltered = consumerName.length > 0;\n  return (\n    <TableView\n      variant={TableVariant.compact}\n      tableOuiaId={\"card-table\"}\n      ariaLabel={t(\"consumerGroup.consumer_group_list\")}\n      data={consumers}\n      columns={Columns}\n      renderHeader={({ column, Th, key }) => (\n        <Th\n          key={key}\n          info={\n            column === \"partitionsWithLag\"\n              ? {\n                  popover: (\n                    <div>\n                      {t(\"consumerGroup.partitions_with_lag_description\")}\n                    </div>\n                  ),\n                  ariaLabel: \"partitions with lag\",\n                  popoverProps: {\n                    headerContent: t(\"consumerGroup.partitions_with_lag_name\"),\n                  },\n                }\n              : undefined\n          }\n        >\n          {labels[column]}\n        </Th>\n      )}\n      renderCell={({ column, row, Td, key }) => {\n        return (\n          <Td key={key} dataLabel={labels[column]}>\n            {(() => {\n              switch (column) {\n                case \"consumerGroupId\":\n                  return row.consumerGroupId;\n                case \"activeMembers\":\n                  return row.activeMembers;\n                case \"partitionsWithLag\":\n                  return row.partitionsWithLag;\n                case \"state\":\n                  return <ConsumerGroupStateLabel state={row.state} />;\n                default:\n                  return row[column];\n              }\n            })()}\n          </Td>\n        );\n      }}\n      renderActions={({ row, ActionsColumn }) => (\n        <ActionsColumn\n          items={[\n            {\n              title: t(\"consumerGroup.view_partitions_offsets\"),\n              onClick: () => onViewPartition(row),\n            },\n            {\n              title: t(\"consumerGroup.reset_offset\"),\n              onClick: () => onViewResetOffset(row),\n            },\n            {\n              title: t(\"common:delete\"),\n              onClick: () => onDelete(row),\n            },\n          ]}\n        />\n      )}\n      isColumnSortable={isColumnSortable}\n      filters={{\n        [labels.consumerGroupId]: {\n          type: \"search\",\n          chips: consumerName,\n          onSearch: onSearchConsumer,\n          onRemoveChip: onRemoveConsumerChip,\n          onRemoveGroup: onRemoveConsumerChips,\n          validate: (value: string) => !/[\"$^<>|+%/;:,\\s*=~#()]/.test(value),\n          errorMessage: t(\"input_field_invalid_message\"),\n        },\n      }}\n      itemCount={itemCount}\n      page={page}\n      onPageChange={onPageChange}\n      perPage={perPage}\n      isFiltered={isFiltered}\n      onClearAllFilters={onClearAllFilters}\n      emptyStateNoData={<ConsumerGroupEmptyState />}\n      emptyStateNoResults={<EmptyStateNoResults />}\n    />\n  );\n};\n","import {\n  Button,\n  Card,\n  CardBody,\n  Flex,\n  FlexItem,\n  Modal,\n  ModalVariant,\n  PageSection,\n  Spinner,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { FunctionComponent } from \"react\";\nimport { useState } from \"react\";\nimport \"./Settings.css\";\n// import { useAlert, AlertVariant } from \"@rhoas/app-services-ui-components\";\nimport type { SettingsStatus } from \"./types\";\n\nexport type SettingsProps = {\n  onSubmitReAuthentication: (\n    reauthenticationEnabled: boolean\n  ) => Promise<boolean>;\n  reauthenticationEnabled: boolean;\n};\n\nexport const Settings: FunctionComponent<SettingsProps> = ({\n  onSubmitReAuthentication,\n  reauthenticationEnabled,\n}) => {\n  const { t } = useTranslation(\"kafka\");\n  const { addAlert } = {\n    //TODO\n    addAlert: (args: { [key: string]: any }) => {\n      // TODO\n    },\n  };\n  //states\n  const [connectionStatus, setConnectionStatus] = useState<SettingsStatus>(\n    reauthenticationEnabled ? \"On\" : \"Off\"\n  );\n  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n\n  const onClose = () => {\n    setIsModalOpen(false);\n  };\n\n  const onChangeSwitch = (checked: boolean) => {\n    if (connectionStatus === \"On\") {\n      setIsModalOpen(true);\n    } else {\n      handleReAuthentication(checked);\n    }\n  };\n\n  const handleReAuthentication = (reAuthValue: boolean) => {\n    setConnectionStatus(reAuthValue ? \"TurningOn\" : \"TurningOff\");\n\n    onSubmitReAuthentication(reAuthValue)\n      .then((reauthentication) => {\n        setConnectionStatus(reauthentication ? \"On\" : \"Off\");\n\n        addAlert({\n          variant: \"success\",\n          title: t(\"settings.success_alert\", {\n            status: reauthentication ? \"on\" : \"off\",\n          }),\n        });\n      })\n      .catch(() => {\n        setConnectionStatus(!reAuthValue ? \"On\" : \"Off\");\n\n        addAlert({\n          variant: \"danger\",\n          title: t(\"settings.error_alert_title\"),\n          description: t(\"settings.error_alert_title_description\"),\n        });\n      });\n  };\n\n  const onTurnOff = () => {\n    setIsModalOpen(false);\n    handleReAuthentication(false);\n  };\n\n  return (\n    <>\n      <PageSection>\n        <Card>\n          <CardBody>{t(\"settings.kafka_instance_settings_label\")}</CardBody>\n        </Card>\n      </PageSection>\n      <PageSection>\n        <Card className={\"mas--settings__card\"}>\n          <CardBody>\n            <Flex flexWrap={{ default: \"nowrap\" }}>\n              <FlexItem grow={{ default: \"grow\" }}>\n                <Flex>\n                  <FlexItem component={\"span\"} spacer={{ default: \"spacerSm\" }}>\n                    <strong>\n                      {t(\"settings.connection_re_authentication_label\")}\n                      {\":\"}\n                    </strong>\n                  </FlexItem>\n                  <FlexItem>\n                    {(() => {\n                      switch (connectionStatus) {\n                        case \"On\":\n                          return t(\n                            \"settings.Connection_re_authentication_states.on\"\n                          );\n                        case \"TurningOff\":\n                          return (\n                            <>\n                              <Spinner\n                                size=\"md\"\n                                aria-valuetext={t(\n                                  \"settings.Connection_re_authentication_states.turning_off\"\n                                )}\n                                aria-label={t(\n                                  \"settings.connection_re_authentication_label\"\n                                )}\n                              />{\" \"}\n                              {t(\n                                \"settings.Connection_re_authentication_states.turning_off\"\n                              )}\n                            </>\n                          );\n                        case \"Off\":\n                          return t(\n                            \"settings.Connection_re_authentication_states.off\"\n                          );\n                        case \"TurningOn\":\n                          return (\n                            <>\n                              <Spinner\n                                size=\"md\"\n                                aria-valuetext={\n                                  \"settings.Connection_re_authentication_states.turning_on\"\n                                }\n                                aria-label={t(\n                                  \"settings.connection_re_authentication_label\"\n                                )}\n                              />{\" \"}\n                              {t(\n                                \"settings.Connection_re_authentication_states.turning_on\"\n                              )}\n                            </>\n                          );\n                        default:\n                          return null;\n                      }\n                    })()}\n                  </FlexItem>\n                </Flex>\n              </FlexItem>\n              <FlexItem>\n                <Switch\n                  id=\"Connection-re-authentication-switch\"\n                  aria-label={t(\"settings.connection_re_authentication_label\")}\n                  isChecked={\n                    connectionStatus === \"On\" ||\n                    connectionStatus === \"TurningOff\"\n                  }\n                  isDisabled={\n                    connectionStatus === \"TurningOff\" ||\n                    connectionStatus === \"TurningOn\"\n                  }\n                  onChange={onChangeSwitch}\n                />\n              </FlexItem>\n              <Modal\n                variant={ModalVariant.small}\n                isOpen={isModalOpen}\n                title={t(\"settings.warning_title\")}\n                titleIconVariant={\"warning\"}\n                actions={[\n                  <Button key={\"confirm\"} variant=\"primary\" onClick={onTurnOff}>\n                    {t(\"settings.turn_off_button_label\")}\n                  </Button>,\n                  <Button key={\"cancel\"} variant=\"link\" onClick={onClose}>\n                    {t(\"common:cancel\")}\n                  </Button>,\n                ]}\n                onClose={onClose}\n              >\n                {t(\"settings.warning_description\")}\n              </Modal>\n            </Flex>\n          </CardBody>\n        </Card>\n      </PageSection>\n    </>\n  );\n};\n"],"names":["ControlPlaneRouteRoot","ControlPlaneRoutePath","DataPlaneRoutePath","DrawerContext","createContext","DrawerProvider","children","match","useRouteMatch","Error","selectedInstance","params","id","useState","undefined","isExpanded","setIsExpanded","activeTab","setActiveTab","onClose","useRef","toggleExpanded","useCallback","newValue","prev","current","value","useMemo","Provider","useDrawer","context","useContext","OverviewRoute","useDataPlaneRouteMatch","DataPlaneHeaderConnected","instancesHref","activeSection","url","instance","sectionsHref","dashboard","topics","consumer","permissions","settings","instanceName","name","onDetails","onConnection","canOpenConnection","status","canChangeOwner","onChangeOwner","canDelete","onDelete","AclsRoute","PageSection","ConsumerGroupsRoute","usePaginationSearchParams","page","perPage","setPagination","setPaginationQuery","resetPaginationQuery","consumerName","useURLSearchParamsChips","useSortableSearchParams","isColumnSortable","sort","sortDirection","data","adminUrl","direction","groupId","chips","consumers","groups","itemCount","count","isRowSelected","onSearchConsumer","clear","toggle","onClearAllFilters","onPageChange","onRemoveConsumerChip","onRemoveConsumerChips","onViewPartition","onViewResetOffset","DashboardRoute","hasUserAlreadyClosedAlert","setHasUserAlreadyClosedAlert","onAlertClose","queryInstance","queryKpisMetrics","queryInstanceMetrics","queryTopicMetrics","queryTopics","getMetricsKpi","Promise","all","kpis","topicPartitionsLimit","maxPartitions","getKafkaInstanceMetrics","interval","duration","metrics","diskSpaceLimit","request","max_data_retention_size","bytes","connectionsLimit","connections","connectionRateLimit","connectionRate","reject","getTopicsMetrics","selectedTopic","kafkaTopics","map","t","topic_name","onCreateTopic","SettingsRoute","onSubmitReAuthentication","resolve","reauthenticationEnabled","TopicsRoute","topicChips","partitions","filter","topicName","getUrlFortopic","row","onEdit","onSearchTopic","onRemoveTopicChip","onRemoveTopicChips","onTopicLinkClick","KafkaInstancesRoute","getUrlForInstance","history","useHistory","replace","labels","namesChips","ownersChips","statusesChips","fields","owner","clearChained","openDrawer","tab","handleDetailsClick","handleConnectionsClick","instances","names","owners","statuses","onSearchName","add","onRemoveNameChip","remove","onRemoveNameChips","onSearchOwner","onRemoveOwnerChip","onRemoveOwnerChips","onSearchStatus","onRemoveStatusChip","onRemoveStatusChips","onCreate","onClickConnectionTabLink","onClickSupportLink","onInstanceLinkClick","onQuickstartGuide","canHaveInstanceLink","StreamsRoutes","drawerInstance","onTabChange","Suspense","fallback","Fallback","Switch","Route","path","exact","Redirect","from","to","memo","useChrome","updateDocumentTitle","on","title","useTranslation","useEffect","register","notifications","unregister","event","console","dir","navId","push","init","errorDescriptionKey","middleware","ApiContext","queryClient","QueryClient","ApiProvider","showDevTools","QueryClientProvider","client","ReactQueryDevtools","initialIsOpen","useApi","accessToken","basePath","DefaultApi","Configuration","useTopics","TopicsApi","APIErrorCodes","masQueries","_root","scope","organization","entity","quota","kafkaQueries","list","details","subentity","consumerGroups","kpi","type","topic","providerQueries","limits","provider","standard","plan","developer","fetchProviderRegionSizes","api","providerInfo","region","instanceType","regions","regionInfo","find","r","availableSizes","capacity","flatMap","c","available_sizes","s","instance_type","sizes","instance_types","i","apiSizeToComponentSize","bind","includes","isDisabled","apiSize","displayName","display_name","quota_consumed","ingress","ingress_throughput_per_sec","egress","egress_throughput_per_sec","storage","Math","round","total_max_connections","max_connection_attempts_per_sec","max_partitions","messageSize","max_message_size","maturity_status","trialDurationHours","lifespan_seconds","fetchProviderRegions","getCloudProviderRegions","res","items","enabled","some","max_capacity_reached","length","resourceName","isStandardQuota","q","related_resources","billing_model","isMarketplaceQuota","kafkaRequestToKafkaInstanceEnhanched","marketplaceSubscriptions","developerPlanInstanceLimits","standardPlanInstanceLimits","enhancedInstance","billing","createdAt","created_at","Date","toISOString","expiryDate","expires_at","cloud_provider","size","accepted","preparing","provisioning","ready","failed","deprovision","deleting","updatedAt","updated_at","version","bootstrapUrl","bootstrap_server_host","admin_api_server_url","marketplaceForBilling","ms","subscriptions","billing_cloud_account_id","marketplace","subscription","e","warn","thisInstanceLimits","l","size_id","useKafkaInstanceTransformer","useQueryClient","getKms","getAms","AppServicesApi","kms","ams","fetchQuery","queryKey","queryFn","account","fetchOrganization","apiAccountsMgmtV1CurrentAccountGet","args","staleTime","Infinity","apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet","organizationId","quotaResponse","statusText","standardQuotas","resource_name","product","prepaidQuota","marketplaceQuotas","hasTrialQuota","remainingPrepaidQuota","allowed","consumed","remainingMarketplaceQuota","reduce","agg","unaggregatedSubscriptions","cloud_accounts","subscriptionMarketplaces","Array","Set","cloud_provider_id","cloud_account_id","standardQuota","getCloudProviders","allProviders","p","providers","firstProvider","defaultProvider","fetchProvidersWithRegions","providersInfo","standardPlanLimitsQuery","getInstanceTypesByCloudProviderAndRegion","developerPlanLimitsQuery","standardPlanLimits","developerPlanLimits","useKafkaInstance","refetchInterval","dataMapper","useQuery","Boolean","getKafkaById","useKafkaInstanceQuery","fetchKafkaKpiMetrics","getMetricsByInstantQuery","topicPartitions","forEach","metric","useKafkaInstanceKpiMetricsQuery","fetchKafkaInstanceMetrics","getMetricsByRangeQuery","response","safeMetrics","m","values","persistentvolumeclaim","usedDiskSpaceMetrics","connectionAttemptRateMetrics","clientConnectionsMetrics","addAggregatedValuesTo","timestamp","useKafkaInstanceMetricsQuery","fetchKafkaTopicMetrics","filteredMetrics","bytesIncoming","bytesOutgoing","bytesPerPartition","incomingMessageRate","partition","addAggregatedTotalBytesTo","metricsTopics","useKafkaInstanceTopicMetricsQuery","fetchKafkaTopics","getTopics","retention_size","config","retention_time","total","useKafkaInstanceTopics","useKafkaInstanceTopicsQuery","stateMapping","DEAD","EMPTY","STABLE","UNKNOWN","COMPLETING_REBALANCE","PREPARING_REBALANCE","useKafkaInstanceConsumerGroups","getConsumerGroups","GroupsApi","consumerGroupId","activeMembers","activeConsumers","partitionsWithLag","laggingPartitions","state","fetchKafkaConsumerGroups","valuesToQuery","field","comparison","v","trim","join","uiColumnMapping","fetchKafkaInstances","getKafkas","search","filtersToSearch","toString","rawInstances","useKafkaInstances","setQueryData","KafkaInstancesSortableColumns","KafkaTopicsSortableColumns","Object","TopicOrderKey","KafkaConsumerGroupSortableColumns","ConsumerGroupOrderKey","METRICS_LAG_ALERT","isReactQueryDevToolsEanbled","localStorage","getItem","metricsIsLagAlertsDismissed","metricsDismissLagAlerts","setItem","onProviderChange","selectedProvider","defaultRegion","capabilities","form","creationError","tsTypes","schema","events","services","initial","states","verifyAvailability","entry","always","cond","target","overQuota","tags","instanceUnavailable","regionsUnavailable","configuring","unsubmitted","submitted","create","description","invalid","valid","fieldInvalid","submit","saving","createSuccess","createError","actions","saved","empty","validate","nameChange","providerChange","regionChange","idle","disabled","waitingForQuota","error","loading","invoke","src","onDone","onError","sizeChange","billingChange","prepaidOnly","singleSubscription","onlySubscriptions","selectSubscription","prepaidAndSubscriptions","prepaid","selectPrepaid","setInitialContext","availableProviders","setName","setProvider","setRegion","setSize","setSizes","smallestSize","a","b","resetCreationErrorMessage","_context","setCreationError","triggerSave","sizeId","triggerSubmit","triggerBillingChange","setBillingToPrepaid","setBillingToSubscription","unsetSubscription","guards","isOverQuota","instanceAvailability","isInstanceUnavailable","isRegionsUnavailable","nameIsEmpty","nameIsValid","test","providerIsValid","selectedProviderInfo","regionIsValid","noProviderOrRegion","noSizes","emptySizes","sizeIsDisabled","billingRequiredButNotSelected","_","meta","hasTag","sizeIsOverQuota","availableQuota","didProviderChange","didRegionChange","didSizeChange","onlyPrepaid","matchesSelectedProviderOrRHMarketplaceAndHasQuota","hasPrepaidQuota","noSelectedProvider","trialUsed","trialUnavailable","trial","isTrialUsed","isTrialUnavailable","noProviderAndRegion","save","complete","setDeveloperAvailable","setDeveloperUnavailable","setDeveloperUsed","setStandardAvailable","setStandardOutOfQuota","setStandardUnavailable","setProviders","setProvidersOrRegionsUnavailable","setCapabilities","notifyCreateErrorToStandardPlan","notifyCreateErrorToTrialPlan","LogoAWS","URL","href","LogoAzure","LogoGCP","LogoRedhat","AWSLogo","alt","style","height","AzureLogo","GCPLogo","useKafkaLabels","degraded","suspended","suspending","resuming","statusesSimplified","creating","aws","gcp","azure","providerRegions","RetentionTimeUnits","RetentionSizeUnits","CreatingStatuses","ReadyStatuses","DegradedStatuses","SuspendingStatuses","SuspendedStatuses","DeletingStatuses","ResumingStatuses","SimplifiedStatuses","DetailsTabAlert","hoursLeft","differenceInHours","now","Alert","variant","i18nKey","components","time","date","format","isInline","className","KafkaDetailsTab","kafkaVersion","renderTextListItem","TextListItem","component","TextListItemVariants","Skeleton","width","screenreaderText","contentName","TextContent","TextList","TextListVariants","SuspendedConnection","EmptyState","EmptyStateVariant","EmptyStateIcon","icon","color","Title","headingLevel","TitleSizes","EmptyStateBody","KafkaConnectionTabP2","isKafkaSuspended","isKafkaPending","externalServer","tokenEndPointUrl","linkToServiceAccount","linkToAccessTab","adminAPIUrl","kafkaFleetManagerUrl","showCreateServiceAccountModal","Text","TextVariants","fontSize","ClipboardCopy","textAriaLabel","isReadOnly","Link","Button","ButtonVariant","onClick","ExpandableSection","toggleContent","onToggle","Popover","headerContent","bodyContent","ns","testId","Label","KafkaInstanceDrawer","content","DrawerPanelContent","KafkaInstanceDrawerPanel","Drawer","DrawerContent","panelContent","DrawerContentBody","handleSelect","DrawerHead","DrawerActions","DrawerCloseButton","DrawerPanelBody","Tabs","activeKey","onSelect","Tab","eventKey","TabTitleText","getExternalServer","getAdminServerUrl","endsWith","StatusLabel","forwardRef","ref","showWarning","showError","withPopover","buttonVariant","Split","hasGutter","SplitItem","Spinner","isPlain","Flex","FlexItem","HelperText","HelperTextItem","PopoverStatusOrder","KafkaToPopoverMapping","StatusProgressStepper","currentStatus","currentStep","findIndex","getVariant","index","ProgressStepper","isVertical","ProgressStep","titleId","isCurrent","StatusPopoverContent","Stack","StackItem","StatusPopover","initialOpen","reference","isVisible","setIsVisible","handleClickConnectionTabLink","handleClickSupportLink","shouldOpen","shouldClose","position","enableFlip","SuspendedPopover","alertSeverityVariant","headerIcon","KafkaInstanceStatus","warningAfterMinutes","errorAfterMinutes","popoverStatus","alert","setAlert","labelRef","checkCreatedAt","elapsed","differenceInMinutes","useInterval","limit","offset","selectedMessage","epoch","initialLoading","fetchSuccess","fetchFail","verifyMessages","noData","refresh","pristine","dirty","shouldSearch","setPartition","setEpoch","setTimestamp","setOffset","setLatest","setLimit","selectMessage","deselectMessage","refreshing","setMessages","messages","offsetMin","offsetMax","lastUpdated","noMessages","selectedMessageNotAvailable","m1","m2","JSON","stringify","areFiltersChanged","PrincipalType","KafkaInstanceActions","ActionsColumn","customChild","DropdownGroup","label","tooltipProps","tooltip","pointerEvents","cursor","isSeparator","EmptyStateNoInstances","ouiaId","EmptyStateNoResults","Columns","KafkaInstances","isFiltered","isFilled","TableView","columns","renderHeader","column","Th","key","renderCell","Td","timeCreatedDate","instanceLinkEnable","dataLabel","props","isAriaDisabled","renderActions","changeOwnerEnabled","deleteEnabled","openConnectionEnabled","onRowClick","isRowDeleted","toolbarBreakpoint","filters","onSearch","onRemoveChip","onRemoveGroup","errorMessage","options","isPrimary","ariaLabel","emptyStateNoData","emptyStateNoResults","KafkaInstanceCapacityTable","columnNames","firstStreamingUnit","secondStreamingUnit","TableComposable","Thead","Tr","Tbody","table","MarketingPageHero","tagLine","description2","heroImage","heroImageSize","heroImageCanRepeat","heroImagePositionY","cta","PageSectionVariants","MarketingPageSection","isWidthLimited","KafkaPageV3","Grid","lg","Card","CardHeader","CardHeaderMain","CardTitle","CardBody","CardFooter","spaceItems","default","bold","alignSelf","justifyContent","flex","DescriptionList","isHorizontal","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","Divider","xl","orientation","EmptyStateNoTopic","unitsToBytes","BYTE","KIBIBYTE","MEBIBYTE","GIBIBYTE","TEBIBYTE","unitsToMilliSecond","MILLISECOND","SECOND","MINUTE","HOUR","DAY","KafkaTopics","TableVariant","tableOuiaId","days","unit","hours","minutes","seconds","millisecondsToTime","Number","formattedRetentionTime","parseInt","tebibytes","gibibytes","mebibytes","kibibytes","bytesToMemorySize","formattedRetentionSize","DataPlaneHeader","actionsProps","Breadcrumb","BreadcrumbItem","render","isActive","Level","LevelItem","padding","hasShadowBottom","Nav","NavList","NavItem","borderTop","ControlPlaneHeader","stickyOnBreakpoint","lng","debug","resources","en","common","kafka","it","delete","DurationOptions","EmptyStateInitialLoading","EmptyStateMetricsUnavailable","MetricsLayout","metricsLagAlert","topicsKpi","topicPartitionsKpi","consumerGroupKpi","diskSpaceMetrics","topicMetrics","hasOverflowScroll","GridItem","sm","CardBodyLoading","Bullseye","isSVG","timeIntervalsMapping","Last5minutes","ticks","showDate","Last15minutes","Last30minutes","Last1hour","Last3hours","Last6hours","Last12hours","Last24hours","Last2days","Last7days","chartHeight","chartPadding","bottom","left","right","top","ChartSkeletonLoader","useChartWidth","containerRef","setWidth","handleResize","clientWidth","useLayoutEffect","window","addEventListener","removeEventListener","formatBytes","units","shouldShowDate","timeDuration","dateToChartValue","fromUnixTime","formatInTimeZone","timestampsToTicks","timestamps","allTimestamps","mostRecentTs","max","fill","d","sub","getTime","ChartLinearWithOptionalLimit","chartName","xLabel","yLabel","usageLimit","formatValue","isLoading","emptyState","itemsPerRow","lineLabel","limitLabel","legendData","symbol","chart_color_black_500","chart_color_blue_300","areaColor","softLimitColor","chartData","area","softLimit","entries","x","y","tickValues","keys","getChartData","hasMetrics","Chart","ariaTitle","containerComponent","ChartVoronoiContainer","datum","constrainToVisibleArea","legendPosition","legendComponent","ChartLegend","themeColor","ChartTheme","legendAllowWrap","ChartAxis","C","tickFormat","dependentAxis","ChartGroup","ChartArea","ChartThreshold","stroke","colors","chart_color_cyan_300","ChartLogSizePerPartition","dataMap","ChartPopover","ChartTotalBytes","incomingTopicsData","outgoingTopicsData","incomingTopic","outgoingTopic","incomingTopicName","outgoingTopicName","incomingLine","metricsToLine","line","outgoingLine","chart_color_green_300","getBytesChartData","tickCount","ChartLine","EmptyStateNoMetricsData","EmptyStateNoMetricsDataForSelection","EmptyStateNoTopics","EmptyStateNoTopicSelected","DurationOptionsMap","FilterByTime","keyText","disableToolbar","onDurationChange","isTimeSelectOpen","setIsTimeSelectOpen","ariaId","ToolbarItem","hidden","Select","SelectVariant","selection","mapping","selections","isOpen","SelectGroup","idx","SelectOption","timeOptions","widths","md","FilterByTopic","topicList","onSetSelectedTopic","isTopicSelectOpen","setIsTopicSelectOpen","random","selectKey","setSelectKey","allTopicsLabel","topicOptions","placeholderText","onFilter","textInput","filteredTopics","indexOf","isGrouped","hasInlineFilter","ToolbarRefresh","isRefreshing","onRefresh","alignment","ToolbarTopicsMetrics","onSetTimeDuration","Toolbar","ToolbarContent","CardTopicsMetrics","backendUnavailable","isInitialLoading","isJustCreated","onSelectedTopic","noTopics","selectedTopicNotInList","chartEmptyState","TotalBytesTitle","IncomingMessageRate","PartitionSizeTitle","ToolbarKafkaInstanceMetric","CardKafkaInstanceMetrics","usedDiskMetrics","ChartTitle","helperText","CardKpi","popover","isFullHeight","shape","MetricsLagAlert","isClosed","onClickClose","actionClose","AlertActionCloseButton","PartitionCard","isExpandable","AlertVariant","role","apiState","failure","after","KafkaInstanceMetricsMachine","fetchFailures","callApi","criticalFail","justCreated","withResponse","selectDuration","setFetchTimestamp","setMetrics","incrementRetries","resetRetries","setDuration","canRetryFetching","TopicsMetricsMachine","selectTopic","setTopic","MetricsKpiMachine","KafkaInstanceMetricsContext","KafkaInstanceMetricsProvider","service","callback","then","results","catch","devTools","MetricsKpiContext","MetricsKpiProvider","TopicsMetricsContext","TopicsMetricsProvider","useKafkaInstanceMetrics","isFailed","send","useTopicsMetrics","onTopicChange","localeCompare","Metrics","ConnectedMetrics","kafkaInstanceMetrics","topicsMetrics","metricsKpi","useMetricsKpi","ConnectedKafkaInstanceMetrics","ConnectedTopicsMetrics","ConsumerGroupEmptyState","ConsumerGroups","info","popoverProps","Settings","connectionStatus","setConnectionStatus","isModalOpen","setIsModalOpen","handleReAuthentication","reAuthValue","reauthentication","flexWrap","grow","spacer","isChecked","onChange","checked","Modal","ModalVariant","titleIconVariant"],"sourceRoot":""}