{"version":3,"file":"js/3285.f8aa4902031283103bb6.js","mappings":"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","sources":["webpack:///./src/routes/control-plane/routesConsts.ts","webpack:///./src/routes/control-plane/DrawerProvider.tsx","webpack:///./src/routes/RedirectOnGateError.tsx","webpack:///./src/routes/control-plane/routes/KafkaInstancesRoute.tsx","webpack:///./src/routes/control-plane/routes/CreateKafkaInstanceRoute.tsx","webpack:///./src/routes/control-plane/routes/useCreateKafkaCallbacks.ts","webpack:///./src/routes/control-plane/useControlPlaneGate.tsx","webpack:///./src/routes/control-plane/routes/DeleteKafkaInstanceRoute.tsx","webpack:///./src/routes/control-plane/routes/ChangeOwnerRoute.tsx","webpack:///./src/routes/control-plane/ControlPlaneRoutes.tsx","webpack:///./src/routes/data-plane/routesConsts.ts","webpack:///./src/routes/data-plane/useDataPlaneGate.tsx","webpack:///./src/routes/data-plane/routes/DataPlaneHeaderConnected.tsx","webpack:///./src/routes/data-plane/routes/PermissionsRoute.tsx","webpack:///./src/routes/data-plane/routes/TopicsRoute.tsx","webpack:///./src/routes/data-plane/routes/SettingsRoute.tsx","webpack:///./src/routes/data-plane/routes/DashboardRoute.tsx","webpack:///./src/routes/data-plane/routes/ConsumerGroupsRoute.tsx","webpack:///./src/routes/data-plane/useTopicGate.tsx","webpack:///./src/routes/data-plane/routes/DataPlaneTopicHeaderConnected.tsx","webpack:///./src/routes/data-plane/routes/TopicConsumerGroupsRoute.tsx","webpack:///./src/routes/data-plane/routes/TopicMessagesRoute.tsx","webpack:///./src/routes/data-plane/routes/TopicPropertiesRoute.tsx","webpack:///./src/routes/data-plane/routes/TopicSchemasRoute.tsx","webpack:///./src/routes/data-plane/useConsumerGroupGate.tsx","webpack:///./src/routes/data-plane/routes/ConsumerGroupDeleteRoute.tsx","webpack:///./src/routes/data-plane/routes/ConsumerGroupResetOffsetRoute.tsx","webpack:///./src/routes/data-plane/routes/ConsumerGroupViewPartitionRoute.tsx","webpack:///./src/routes/data-plane/useTopicConsumerGroupGate.tsx","webpack:///./src/routes/data-plane/routes/TopicConsumerGroupDeleteRoute.tsx","webpack:///./src/routes/data-plane/routes/TopicConsumerGroupResetOffsetRoute.tsx","webpack:///./src/routes/data-plane/routes/TopicConsumerGroupViewPartitionRoute.tsx","webpack:///../../packages/ui/src/components/DeleteKafkaTopic/DeleteKafkaTopic.tsx","webpack:///./src/routes/data-plane/routes/TopicDeleteRoute.tsx","webpack:///./src/routes/data-plane/routes/TopicEditPropertiesRoute.tsx","webpack:///./src/routes/data-plane/routes/PermissionsEditRoute.tsx","webpack:///./src/routes/data-plane/routes/PermissionsSelectAccountRoute.tsx","webpack:///./src/routes/data-plane/DataPlaneRoutes.tsx","webpack:///./src/routes/overview/OverviewRoute.tsx","webpack:///./src/routes/Routes.tsx","webpack:///./src/App.tsx","webpack:///./src/QuickstartLoader.tsx","webpack:///./src/store/index.ts","webpack:///../../packages/consoledot-api/src/transformers/ConsumerGroupTransformer.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchKafkaKpis.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchKafkaMetrics.ts","webpack:///../../packages/consoledot-api/src/fetchers/valuesToQuery.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchKafkas.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchProviderRegionSizes.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchProvidersWithRegions.ts","webpack:///../../packages/consoledot-api/src/utilsAndConstants.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchStandardQuota.ts","webpack:///../../packages/consoledot-api/src/transformers/topicTransformer.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchTopics.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchTopicsMetrics.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchUserAccounts.ts","webpack:///../../packages/consoledot-api/src/ApiProvider.tsx","webpack:///../../packages/consoledot-api/src/queryKeys.ts","webpack:///../../packages/consoledot-api/src/useApi.ts","webpack:///../../packages/consoledot-api/src/queries/useConsumerGroups.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchConsumerGroups.ts","webpack:///../../packages/consoledot-api/src/transformers/kafkaRequestToKafkaInstanceEnhanched.ts","webpack:///../../packages/consoledot-api/src/queries/useCreateInstance.ts","webpack:///../../packages/consoledot-api/src/queries/useKafkaInstanceTransformer.ts","webpack:///../../packages/consoledot-api/src/queries/useKafka.ts","webpack:///../../packages/consoledot-api/src/queries/useKafkas.ts","webpack:///../../packages/consoledot-api/src/queries/useTopic.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchTopic.ts","webpack:///../../packages/consoledot-api/src/queries/useTopics.ts","webpack:///../../packages/consoledot-api/src/queries/useUserAccounts.ts","webpack:///../../packages/consoledot-api/src/queries/useConsumerGroup.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchConsumerGroup.ts","webpack:///../../packages/consoledot-api/src/queries/useAcls.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchPermissions.ts","webpack:///../../packages/consoledot-api/src/queries/useServiceAccounts.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchServiceAccounts.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useDeveloperInstanceAvailabilityFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useKafkaFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useKafkaKpisFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useKafkaMetricsFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useTopicsMetricsFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useTopicsFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useMessagesFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchMessages.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useProviderRegionSizesFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useProvidersWithRegionsFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useStandardQuotaFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchOrganization.ts","webpack:///../../packages/consoledot-api/src/mutations/useCreateKafkaMutation.ts","webpack:///../../packages/consoledot-api/src/mutations/useDeleteKafkaMutation.ts","webpack:///../../packages/consoledot-api/src/mutations/useDeleteTopicMutation.ts","webpack:///../../packages/consoledot-api/src/mutations/useUpdateKafkaMutation.ts","webpack:///../../packages/consoledot-api/src/mutations/useDeleteConsumerGroupMutation.ts","webpack:///../../packages/consoledot-api/src/mutations/useResetConsumerGroupMutation.ts","webpack:///../../packages/consoledot-api/src/mutations/useDeletePermissionsMutation.ts","webpack:///../../packages/consoledot-api/src/mutations/useUpdatePermissionsMutation.ts","webpack:///../../packages/consoledot-api/src/types.ts","webpack:///../../packages/local-storage-helpers/index.ts","webpack:///../../packages/ui-models/src/models/kafka.ts","webpack:///../../packages/ui/src/components/ConsumerGroups/components/ConsumerGroupPopover.tsx","webpack:///../../packages/ui/src/components/ConsumerGroups/components/ConsumerGroupState.tsx","webpack:///../../packages/ui/src/components/ConsumerGroups/components/ConsumerGroupByKafka.tsx","webpack:///../../packages/ui/src/components/ConsumerGroups/components/ConsumerGroupByTopic.tsx","webpack:///../../packages/ui/src/components/ConsumerGroups/components/ConsumerGroupDetails.tsx","webpack:///../../packages/ui/src/components/ConsumerGroups/components/ConsumerGroupEmptyState.tsx","webpack:///../../packages/ui/src/components/ConsumerGroups/components/OffsetSelect.tsx","webpack:///../../packages/ui/src/components/ConsumerGroups/components/TopicSelect.tsx","webpack:///../../packages/ui/src/components/ConsumerGroups/components/ConsumerGroupResetOffset.tsx","webpack:///../../packages/ui/src/components/ConsumerGroups/components/DeleteConsumerGroup.tsx","webpack:///../../packages/ui/src/components/ConsumerGroups/components/ConsumerGroupDrawer.tsx","webpack:///../../packages/ui/src/hooks/useKafkaLabels.ts","webpack:///../../packages/ui/src/hooks/useTopicLabels.ts","webpack:///../../packages/ui/src/hooks/useConsumerGroupLabels.ts","webpack:///../../packages/ui/src/components/ConsumerGroups/ConsumerGroups.tsx","webpack:///../../packages/ui/src/components/ControlPlaneHeader.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/machines/shared.ts","webpack:///../../packages/ui/src/components/CreateKafkaInstance/machines/StandardPlanMachine.ts","webpack:///../../packages/ui/src/components/CreateKafkaInstance/machines/TrialPlanMachine.ts","webpack:///../../packages/ui/src/components/CreateKafkaInstance/machines/CreateKafkaInstanceMachine.ts","webpack:///../../packages/ui/src/components/CreateKafkaInstance/machines/CreateKafkaInstanceProvider.tsx","webpack:///../../packages/ui/src/components/Logos/images.ts","webpack:///../../packages/ui/src/components/Logos/AWSLogo.tsx","webpack:///../../packages/ui/src/components/Logos/AzureLogo.tsx","webpack:///../../packages/ui/src/components/Logos/GCPLogo.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/components/BillingTiles.tsx","webpack:///../../packages/ui/src/components/Logos/RedhatLogo.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/components/CloudProviderTiles.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/StandardInstanceForm.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceActions.tsx","webpack:///../../packages/ui/src/components/DataPlaneHeader.tsx","webpack:///../../packages/ui/src/components/DataPlaneTopicHeader.tsx","webpack:///../../packages/ui/src/components/DeleteKafKaInstance/DeleteKafkaInstance.tsx","webpack:///../../packages/ui/src/components/I18nProvider.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceDrawer/components/DetailsTabAlert.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceDrawer/components/KafkaDetailsTab.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceDrawer/components/SuspendedConnection.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceDrawer/components/KafkaConnectionTabP2.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceDrawer/components/SampleCodeSnippet.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceDrawer/components/CodeSnippets.ts","webpack:///../../packages/ui/src/components/KafkaInstanceDrawer/components/KafkaSampleCode.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceDrawer/KafkaInstanceDrawer.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/components/StatusLabel.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/types.ts","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/components/StatusProgressStepper.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/components/StatusPopoverContent.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/components/StatusPopover.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/components/SuspendedPopover.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/KafkaInstanceStatus.tsx","webpack:///../../packages/ui/src/components/KafkaInstances/components/EmptyStateNoInstances.tsx","webpack:///../../packages/ui/src/components/KafkaInstances/components/EmptyStateNoResults.tsx","webpack:///../../packages/ui/src/components/KafkaInstances/KafkaInstances.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/DateTimePicker.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/FilterGroup.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/LimitSelector.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/utils.ts","webpack:///../../packages/ui/src/components/KafkaTopics/types.ts","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/NoDataCell.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/MessageDetails.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/NoDataEmptyState.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/NoResultsEmptyState.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/OffsetRange.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/PartitionSelector.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/UnknownValuePreview.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/MessageBrowserMachine.ts","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/KafkaMessageBrowser.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceCapacityTable.tsx","webpack:///../../packages/ui/src/components/MarketingPage.tsx","webpack:///../../packages/ui/src/components/KafkaPageV3.tsx","webpack:///../../packages/ui/src/components/KafkaTopics/components/EmptyStateNoTopic.tsx","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/types.ts","webpack:///../../packages/ui/src/components/KafkaTopics/KafkaTopics.tsx","webpack:///../../packages/ui/src/components/Metrics/types.ts","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/components/PermissionsDropdown.tsx","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/components/ResourceTypeLabel.tsx","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/components/Cells.tsx","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/components/EmptyPermissionsTable.tsx","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/components/PermissionsTable.tsx","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/components/SelectAccount.tsx","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/components/ResourceName.tsx","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/components/ResourceOperation.tsx","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/components/ResourcePermission.tsx","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/components/ResourcePrefixRule.tsx","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/components/ResourceType.tsx","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/components/ShortcutsTableHead.tsx","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/components/KafkaInstanceManualPermissions.tsx","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/components/AssignPermissionsManual.tsx","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/components/ProduceTopicRow.tsx","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/components/ConsumeTopicShortcut.tsx","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/components/ManageAccessShortcut.tsx","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/components/ProduceTopicShortcut.tsx","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/components/AssignPermissions.tsx","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/components/PreCancelModal.tsx","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/components/ReviewPermissionsTable.tsx","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/components/ViewAccountDetails.tsx","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/utils.ts","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/components/EditPermissions.tsx","webpack:///../../packages/ui/src/components/Metrics/components/EmptyStateInitialLoading.tsx","webpack:///../../packages/ui/src/components/Metrics/components/EmptyStateMetricsUnavailable.tsx","webpack:///../../packages/ui/src/components/Metrics/components/MetricsLayout.tsx","webpack:///../../packages/ui/src/components/Metrics/components/CardBodyLoading.tsx","webpack:///../../packages/ui/src/components/Metrics/consts.ts","webpack:///../../packages/ui/src/components/Metrics/components/ChartSkeletonLoader.tsx","webpack:///../../packages/ui/src/components/Metrics/components/useChartWidth.tsx","webpack:///../../packages/ui/src/components/Metrics/components/utils.ts","webpack:///../../packages/ui/src/components/Metrics/components/ChartLinearWithOptionalLimit.tsx","webpack:///../../packages/ui/src/components/Metrics/components/ChartLogSizePerPartition.tsx","webpack:///../../packages/ui/src/components/Metrics/components/ChartPopover.tsx","webpack:///../../packages/ui/src/components/Metrics/components/ChartTotalBytes.tsx","webpack:///../../packages/ui/src/components/Metrics/components/EmptyStateNoMetricsData.tsx","webpack:///../../packages/ui/src/components/Metrics/components/EmptyStateNoMetricsDataForSelection.tsx","webpack:///../../packages/ui/src/components/Metrics/components/EmptyStateNoTopics.tsx","webpack:///../../packages/ui/src/components/Metrics/components/EmptyStateNoTopicSelected.tsx","webpack:///../../packages/ui/src/components/Metrics/components/FilterByTime.tsx","webpack:///../../packages/ui/src/components/Metrics/components/FilterByTopic.tsx","webpack:///../../packages/ui/src/components/Metrics/components/ToolbarRefresh.tsx","webpack:///../../packages/ui/src/components/Metrics/components/ToolbarTopicsMetrics.tsx","webpack:///../../packages/ui/src/components/Metrics/components/CardTopicsMetrics.tsx","webpack:///../../packages/ui/src/components/Metrics/components/ToolbarKafkaInstanceMetric.tsx","webpack:///../../packages/ui/src/components/Metrics/components/CardKafkaInstanceMetrics.tsx","webpack:///../../packages/ui/src/components/Metrics/components/CardKpi.tsx","webpack:///../../packages/ui/src/components/Metrics/components/MetricsLagAlert.tsx","webpack:///../../packages/ui/src/components/Metrics/components/PartitionCard.tsx","webpack:///../../packages/ui/src/components/Metrics/machines/KafkaInstanceMetricsMachine.ts","webpack:///../../packages/ui/src/components/Metrics/machines/TopicsMetricsMachine.ts","webpack:///../../packages/ui/src/components/Metrics/machines/MetricsKpiMachine.ts","webpack:///../../packages/ui/src/components/Metrics/KafkaInstanceMetricsProvider.tsx","webpack:///../../packages/ui/src/components/Metrics/MetricsKpiProvider.tsx","webpack:///../../packages/ui/src/components/Metrics/TopicsMetricsProvider.tsx","webpack:///../../packages/ui/src/components/Metrics/useKafkaInstanceMetrics.tsx","webpack:///../../packages/ui/src/components/Metrics/useTopicsMetrics.tsx","webpack:///../../packages/ui/src/components/Metrics/Metrics.tsx","webpack:///../../packages/ui/src/components/Metrics/useMetricsKpi.tsx","webpack:///../../packages/ui/src/components/Settings/Settings.tsx","webpack:///../../packages/ui/src/components/Topic/components/types.ts","webpack:///../../packages/ui/src/components/Topic/components/TextWithLabelPopover.tsx","webpack:///../../packages/ui/src/components/Topic/components/Cleanup.tsx","webpack:///../../packages/ui/src/components/Topic/components/CustomRetentionMessage.tsx","webpack:///../../packages/ui/src/components/Topic/components/CustomRetentionSize.tsx","webpack:///../../packages/ui/src/components/Topic/components/CoreConfiguration.tsx","webpack:///../../packages/ui/src/components/Topic/components/useValidateTopic.ts","webpack:///../../packages/ui/src/components/Topic/components/Flush.tsx","webpack:///../../packages/ui/src/components/Topic/components/Log.tsx","webpack:///../../packages/ui/src/components/Topic/components/Message.tsx","webpack:///../../packages/ui/src/components/Topic/components/Replication.tsx","webpack:///../../packages/ui/src/components/Topic/components/TopicAdvanceIndex.tsx","webpack:///../../packages/ui/src/components/Topic/components/TopicAdvanceJumpLinks.tsx","webpack:///../../packages/ui/src/components/Topic/components/TopicAdvancePage.tsx","webpack:///../../packages/ui/src/components/Topic/EditTopicProperties/EditTopicProperties.tsx","webpack:///../../packages/ui/src/components/Topic/TopicProperties/TopicProperties.tsx","webpack:///../../packages/ui/src/components/ChangeKafkaOwner/SelectOwner.tsx","webpack:///../../packages/ui/src/components/ChangeKafkaOwner/ChangeKafkaOwner.tsx"],"sourcesContent":["export const ControlPlaneRouteRoot = \"/kafkas\" as const;\nconst NewInstanceSegment = \"create\";\nexport const ControlPlaneSpecialSegments = [NewInstanceSegment];\n\nexport const ControlPlaneRoutePath =\n  `${ControlPlaneRouteRoot}/:id?/:section(delete|change-owner)?` as const;\nexport const ControlPlaneNewInstancePath = `${ControlPlaneRouteRoot}/${NewInstanceSegment}`;\nexport const ControlPlaneDeleteInstancePath = `${ControlPlaneRouteRoot}/:id/delete`;\nexport const ControlPlaneChangeOwnerPath = `${ControlPlaneRouteRoot}/:id/change-owner`;\nexport type ControlPlaneRouteParams = {\n  id?: string;\n  section?: \"delete\" | \"change-owner\";\n};\n\nexport type ControlPlaneNavigationProps = {\n  instancesHref: string;\n};\n","import { useKafka } from \"consoledot-api\";\nimport type { FunctionComponent, MutableRefObject } from \"react\";\nimport {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport type { KafkaInstanceDrawerTab } from \"ui\";\nimport { KafkaInstanceDrawer } from \"ui\";\nimport type { ControlPlaneRouteParams } from \"./routesConsts\";\nimport {\n  ControlPlaneRoutePath,\n  ControlPlaneSpecialSegments,\n} from \"./routesConsts\";\n\ntype DrawerContextProps = {\n  selectedInstance: string | undefined;\n  activeTab: KafkaInstanceDrawerTab;\n  setActiveTab: (tab: KafkaInstanceDrawerTab) => void;\n  isExpanded: boolean;\n  toggleExpanded: (newState?: boolean) => void;\n  onClose: MutableRefObject<(() => void) | undefined>;\n};\n// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\nconst DrawerContext = createContext<DrawerContextProps>(null!);\n\nexport const DrawerProvider: FunctionComponent = ({ children }) => {\n  const match = useRouteMatch<ControlPlaneRouteParams>(ControlPlaneRoutePath);\n  if (!match) {\n    throw Error(\"DrawerProvider used outside the expected route\");\n  }\n  const selectedInstance =\n    (match.params.id &&\n      ControlPlaneSpecialSegments.includes(match.params.id)) ||\n    match.params.section !== undefined\n      ? undefined\n      : match.params.id;\n  const { data: instance } = useKafka(selectedInstance);\n  const [isExpanded, setIsExpanded] = useState(\n    selectedInstance !== undefined && match.isExact\n  );\n  const [activeTab, setActiveTab] = useState<KafkaInstanceDrawerTab>(\"details\");\n  const onClose = useRef<() => void | undefined>();\n\n  const toggleExpanded = useCallback((newValue: boolean | undefined) => {\n    setIsExpanded((prev) => {\n      const isExpanded = newValue !== undefined ? newValue : !prev;\n      if (isExpanded === false && onClose.current) {\n        onClose.current();\n      }\n      return isExpanded;\n    });\n  }, []);\n\n  useEffect(() => {\n    if (!instance) {\n      setIsExpanded(false);\n    }\n  }, [instance]);\n\n  const value = useMemo(() => {\n    const shouldBeExpanded = selectedInstance !== undefined && isExpanded;\n\n    return {\n      selectedInstance,\n      activeTab,\n      setActiveTab,\n      isExpanded: shouldBeExpanded,\n      toggleExpanded,\n      onClose,\n    };\n  }, [activeTab, isExpanded, selectedInstance, toggleExpanded]);\n\n  return (\n    <DrawerContext.Provider value={value}>\n      <KafkaInstanceDrawer\n        instance={instance}\n        activeTab={activeTab}\n        onTabChange={setActiveTab}\n        isExpanded={isExpanded}\n        onClose={() => toggleExpanded(false)}\n      >\n        {children}\n      </KafkaInstanceDrawer>\n    </DrawerContext.Provider>\n  );\n};\n\nexport function useDrawer(onClose?: () => void) {\n  const context = useContext(DrawerContext);\n  context.onClose.current = onClose;\n  return context;\n}\n","import { useQueryErrorResetBoundary } from \"consoledot-api\";\nimport type { FunctionComponent, VoidFunctionComponent } from \"react\";\nimport { useEffect } from \"react\";\nimport { ErrorBoundary } from \"react-error-boundary\";\nimport { Redirect, useLocation } from \"react-router-dom\";\n\nexport const RedirectOnGateError: FunctionComponent<{\n  redirectUrl: string;\n}> = ({ children, redirectUrl }) => {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const { key } = useLocation();\n\n  return (\n    <ErrorBoundary\n      resetKeys={[key]}\n      fallbackRender={() => <RedirectAndResetError redirectUrl={redirectUrl} />}\n    >\n      {children}\n    </ErrorBoundary>\n  );\n};\n\nconst RedirectAndResetError: VoidFunctionComponent<{ redirectUrl: string }> = ({\n  redirectUrl,\n}) => {\n  const { reset } = useQueryErrorResetBoundary();\n  useEffect(() => reset, [reset]);\n  return <Redirect to={redirectUrl} />;\n};\n","import { QuickStartContext } from \"@patternfly/quickstarts\";\nimport {\n  usePaginationSearchParams,\n  useSortableSearchParams,\n  useURLSearchParamsChips,\n} from \"@rhoas/app-services-ui-components\";\nimport { KafkaInstancesSortableColumns, useKafkas } from \"consoledot-api\";\nimport type { FunctionComponent } from \"react\";\nimport { useCallback, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport type { KafkaInstanceDrawerTab, KafkaInstancesProps } from \"ui\";\nimport { ControlPlaneHeader, KafkaInstances, useKafkaLabels } from \"ui\";\nimport type { Kafka, SimplifiedStatus } from \"ui-models/src/models/kafka\";\nimport { ReadyStatuses } from \"ui-models/src/models/kafka\";\nimport { useDrawer } from \"../DrawerProvider\";\nimport {\n  ControlPlaneNewInstancePath,\n  ControlPlaneRouteRoot,\n} from \"../routesConsts\";\n\nexport type KafkaInstancesRoute = Pick<\n  KafkaInstancesProps<Kafka>,\n  \"getUrlForInstance\"\n>;\n\nexport const KafkaInstancesRoute: FunctionComponent<KafkaInstancesRoute> = ({\n  getUrlForInstance,\n}) => {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const history = useHistory();\n  const { setActiveQuickStart } = useContext(QuickStartContext);\n\n  const { selectedInstance, toggleExpanded, setActiveTab, isExpanded } =\n    useDrawer(\n      useCallback(() => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n        history.replace(`${ControlPlaneRouteRoot}`);\n      }, [history])\n    );\n\n  const labels = useKafkaLabels();\n\n  const { page, perPage, setPagination, setPaginationQuery } =\n    usePaginationSearchParams();\n  const resetPaginationQuery = useCallback(\n    () => setPaginationQuery(1, perPage),\n    [perPage, setPaginationQuery]\n  );\n\n  const namesChips = useURLSearchParamsChips(\"names\", resetPaginationQuery);\n  const ownersChips = useURLSearchParamsChips(\"owners\", resetPaginationQuery);\n  const statusesChips = useURLSearchParamsChips<SimplifiedStatus>(\n    \"statuses\",\n    resetPaginationQuery\n  );\n\n  const [isColumnSortable, sort, sortDirection] = useSortableSearchParams(\n    KafkaInstancesSortableColumns,\n    labels.fields,\n    \"createdAt\",\n    \"desc\"\n  );\n\n  const { data } = useKafkas({\n    page,\n    perPage,\n    name: namesChips.chips,\n    owner: ownersChips.chips,\n    status: statusesChips.chips,\n    sort: sort || \"createdAt\",\n    direction: sortDirection,\n  });\n\n  const onClearAllFilters = useCallback(() => {\n    namesChips.clearChained(\n      ownersChips.clearChained(\n        statusesChips.clearChained(setPaginationQuery(1, perPage))\n      ),\n      true\n    );\n  }, [namesChips, ownersChips, perPage, setPaginationQuery, statusesChips]);\n\n  const openDrawer = useCallback(\n    (id: string, tab: KafkaInstanceDrawerTab) => {\n      if (selectedInstance === id && isExpanded) {\n        toggleExpanded(false);\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n        history.replace(`${ControlPlaneRouteRoot}/${id}`);\n        toggleExpanded(true);\n        setActiveTab(tab);\n      }\n    },\n    [history, isExpanded, selectedInstance, setActiveTab, toggleExpanded]\n  );\n\n  const onDetailsClick: KafkaInstancesProps[\"onDetails\"] = useCallback(\n    (instance) => {\n      openDrawer(instance.id, \"details\");\n    },\n    [openDrawer]\n  );\n\n  const onConnectionsClick: KafkaInstancesProps[\"onDetails\"] = useCallback(\n    (instance) => {\n      openDrawer(instance.id, \"connections\");\n    },\n    [openDrawer]\n  );\n\n  const onCreate = useCallback(() => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    history.push(`${ControlPlaneNewInstancePath}`);\n  }, [history]);\n\n  const onDelete = useCallback<KafkaInstancesProps[\"onDelete\"]>(\n    ({ id }) => {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n      history.push(`${ControlPlaneRouteRoot}/${id}/delete`);\n    },\n    [history]\n  );\n  const onChangeOwner = useCallback<KafkaInstancesProps[\"onChangeOwner\"]>(\n    ({ id }) => {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n      history.push(`${ControlPlaneRouteRoot}/${id}/change-owner`);\n    },\n    [history]\n  );\n\n  const onQuickstartGuide = useCallback(\n    () => setActiveQuickStart && setActiveQuickStart(\"getting-started\"),\n    [setActiveQuickStart]\n  );\n\n  return (\n    <>\n      <ControlPlaneHeader />\n      <KafkaInstances\n        instances={data?.instances}\n        itemCount={data?.count}\n        page={page}\n        perPage={perPage}\n        names={namesChips.chips}\n        owners={ownersChips.chips}\n        statuses={statusesChips.chips}\n        isColumnSortable={isColumnSortable}\n        onPageChange={setPagination}\n        onSearchName={namesChips.add}\n        onRemoveNameChip={namesChips.remove}\n        onRemoveNameChips={namesChips.clear}\n        onSearchOwner={ownersChips.add}\n        onRemoveOwnerChip={ownersChips.remove}\n        onRemoveOwnerChips={ownersChips.clear}\n        onSearchStatus={statusesChips.toggle}\n        onRemoveStatusChip={statusesChips.remove}\n        onRemoveStatusChips={statusesChips.clear}\n        onClearAllFilters={onClearAllFilters}\n        onChangeOwner={onChangeOwner}\n        onDelete={onDelete}\n        onCreate={onCreate}\n        isRowSelected={({ row }) => row.id === selectedInstance}\n        getUrlForInstance={getUrlForInstance}\n        onDetails={onDetailsClick}\n        onConnection={onConnectionsClick}\n        onClickConnectionTabLink={() => {\n          /* TODO */\n        }}\n        onClickSupportLink={() => {\n          /* TODO */\n        }}\n        onInstanceLinkClick={() => {\n          /* TODO */\n        }}\n        onQuickstartGuide={onQuickstartGuide}\n        canHaveInstanceLink={({ status }) => ReadyStatuses.includes(status)}\n        canOpenConnection={({ status }) => ReadyStatuses.includes(status)}\n        canChangeOwner={() => true}\n        canDelete={() => true}\n      />\n    </>\n  );\n};\n","import { QuickStartContext } from \"@patternfly/quickstarts\";\nimport type { CreateKafkaInstanceServices } from \"@rhoas/app-services-ui-components\";\nimport { CreateKafkaInstance } from \"@rhoas/app-services-ui-components\";\nimport { useCreateKafkaMutation } from \"consoledot-api\";\nimport type { FunctionComponent } from \"react\";\nimport { useCallback, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport type { ControlPlaneNavigationProps } from \"../routesConsts\";\nimport { ControlPlaneRouteRoot } from \"../routesConsts\";\nimport { useCreateKafkaCallbacks } from \"./useCreateKafkaCallbacks\";\n\nexport const CreateKafkaInstanceRoute: FunctionComponent<\n  ControlPlaneNavigationProps\n> = ({ instancesHref }) => {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const history = useHistory();\n  const callbacks = useCreateKafkaCallbacks();\n  const createKafkaInstance = useCreateKafkaMutation();\n  const qsContext = useContext(QuickStartContext);\n\n  const onClickKafkaOverview = () => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    history.push(`overview`);\n  };\n\n  const onClickQuickStart = useCallback(() => {\n    qsContext.setActiveQuickStart &&\n      qsContext.setActiveQuickStart(\"getting-started\");\n  }, [qsContext]);\n\n  const onCreate = useCallback<CreateKafkaInstanceServices[\"onCreate\"]>(\n    function (instance, onSuccess, onError) {\n      const onOnSuccess = () => {\n        onSuccess();\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n        history.push(ControlPlaneRouteRoot);\n      };\n      void createKafkaInstance.mutateAsync({\n        instance,\n        onSuccess: onOnSuccess,\n        onError,\n      });\n    },\n    [createKafkaInstance, history]\n  );\n\n  const onCancel = useCallback(() => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    history.push(instancesHref);\n  }, [history, instancesHref]);\n\n  return (\n    <CreateKafkaInstance\n      {...callbacks}\n      isModalOpen={true}\n      onCancel={onCancel}\n      onClickContactUs={onClickKafkaOverview}\n      onClickKafkaOverview={onClickKafkaOverview}\n      onClickQuickStart={onClickQuickStart}\n      onCreate={onCreate}\n      onLearnHowToAddStreamingUnits={onClickKafkaOverview}\n      onLearnMoreAboutSizes={onClickKafkaOverview}\n      subscriptionOptionsHref={document.location.href + \"/../overview\"}\n      appendTo={() =>\n        (document.getElementById(\"chrome-app-render-root\") as HTMLElement) ||\n        document.body\n      }\n    />\n  );\n};\n","import { useChrome } from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport {\n  useDeveloperInstanceAvailabilityFetchQuery,\n  useProviderRegionSizesFetchQuery,\n  useProvidersWithRegionsFetchQuery,\n  useStandardQuotaFetchQuery,\n} from \"consoledot-api\";\nimport { useCallback } from \"react\";\nimport type { CreateKafkaInstanceProps, StandardSizes } from \"ui\";\n\nexport function useCreateKafkaCallbacks() {\n  const { auth } = useChrome();\n\n  const getUsername = useCallback(async () => {\n    const username = (await auth.getUser())?.identity.user?.username;\n    if (!username) {\n      return Promise.reject(\"Invalid user\");\n    }\n    return username;\n  }, [auth]);\n\n  const checkDeveloperAvailabilityQuery =\n    useDeveloperInstanceAvailabilityFetchQuery();\n\n  const standardQuotaQuery = useStandardQuotaFetchQuery(true);\n  const providersWithRegionsQuery = useProvidersWithRegionsFetchQuery();\n  const getProvidersInfo = useProvidersWithRegionsFetchQuery();\n  const getProviderRegionsSizes = useProviderRegionSizesFetchQuery();\n\n  const checkDeveloperAvailability = useCallback<\n    CreateKafkaInstanceProps[\"checkDeveloperAvailability\"]\n  >(\n    async ({ onAvailable, onUsed, onUnavailable }) => {\n      try {\n        const available = await checkDeveloperAvailabilityQuery(getUsername);\n\n        if (available) {\n          onAvailable();\n        } else {\n          onUsed();\n        }\n      } catch {\n        onUnavailable();\n      }\n    },\n    [checkDeveloperAvailabilityQuery, getUsername]\n  );\n\n  const checkStandardQuota = useCallback<\n    CreateKafkaInstanceProps[\"checkStandardQuota\"]\n  >(\n    async ({ onQuotaAvailable, onNoQuotaAvailable, onOutOfQuota }) => {\n      try {\n        const {\n          hasTrialQuota,\n          remainingPrepaidQuota,\n          remainingMarketplaceQuota,\n          marketplaceSubscriptions,\n        } = await standardQuotaQuery();\n\n        if (\n          remainingMarketplaceQuota !== undefined ||\n          remainingPrepaidQuota !== undefined\n        ) {\n          if (\n            (remainingMarketplaceQuota || 0) === 0 &&\n            (remainingPrepaidQuota || 0) === 0\n          ) {\n            onOutOfQuota({\n              quota: {\n                marketplaceSubscriptions,\n              },\n            });\n          } else {\n            onQuotaAvailable({\n              quota: {\n                remainingPrepaidQuota,\n                remainingMarketplaceQuota,\n                marketplaceSubscriptions,\n              },\n            });\n          }\n        } else {\n          onNoQuotaAvailable({ hasTrialQuota });\n        }\n      } catch (e) {\n        onNoQuotaAvailable({ hasTrialQuota: false });\n      }\n    },\n    [standardQuotaQuery]\n  );\n\n  const fetchProvidersWithRegions = useCallback<\n    CreateKafkaInstanceProps[\"fetchProvidersWithRegions\"]\n  >(\n    async (plan, { onAvailable, onUnavailable }) => {\n      try {\n        const providers = await providersWithRegionsQuery(plan);\n        onAvailable(providers);\n      } catch {\n        onUnavailable();\n      }\n    },\n    [providersWithRegionsQuery]\n  );\n\n  const getStandardSizes = useCallback<\n    CreateKafkaInstanceProps[\"getStandardSizes\"]\n  >(\n    async (provider, region) => {\n      const providersInfo = await getProvidersInfo(\"standard\");\n      const providerInfo = providersInfo.providers.find(\n        (p) => p.id === provider\n      );\n      if (!providerInfo) {\n        return Promise.reject(\"Invalid cloud provider\");\n      }\n      return getProviderRegionsSizes(providerInfo, region, \"standard\");\n    },\n    [getProviderRegionsSizes, getProvidersInfo]\n  );\n\n  const getTrialSizes = useCallback<CreateKafkaInstanceProps[\"getTrialSizes\"]>(\n    async (provider, region) => {\n      let standardSizes: StandardSizes;\n\n      try {\n        standardSizes = await getStandardSizes(provider, region);\n        if (standardSizes.length === 0) {\n          throw new Error(\"No standard sizes found\");\n        }\n      } catch {\n        // It can happen that the selected provider doesn't support standard instances.\n        // In this case we provide a faux sample list of sizes just to make the slider happy.\n        standardSizes = [\n          { id: \"1\", displayName: \"1\", quota: 1 },\n          { id: \"2\", displayName: \"2\", quota: 2 },\n        ] as StandardSizes;\n      }\n      const providersInfo = await getProvidersInfo(\"developer\");\n      const providerInfo = providersInfo.providers.find(\n        (p) => p.id === provider\n      );\n      if (!providerInfo) {\n        return Promise.reject(\"Invalid cloud provider\");\n      }\n      const trialSizes = await getProviderRegionsSizes(\n        providerInfo,\n        region,\n        \"developer\"\n      );\n      return {\n        standard: standardSizes,\n        trial: trialSizes[0],\n      };\n    },\n    [getProviderRegionsSizes, getProvidersInfo, getStandardSizes]\n  );\n  return {\n    checkDeveloperAvailability,\n    checkStandardQuota,\n    fetchProvidersWithRegions,\n    getStandardSizes,\n    getTrialSizes,\n  };\n}\n","import { useKafka } from \"consoledot-api\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport type { ControlPlaneRouteParams } from \"./routesConsts\";\nimport { ControlPlaneRoutePath } from \"./routesConsts\";\n\nexport function useControlPlaneGate() {\n  const match = useRouteMatch<ControlPlaneRouteParams>(ControlPlaneRoutePath);\n  if (!match) {\n    throw Error(\"useControlPlaneGate used outside the expected route\");\n  }\n  const { data: instance } = useKafka(match.params.id, true);\n  return { instance: instance as NonNullable<typeof instance>, match };\n}\n","import { useDeleteKafkaMutation } from \"consoledot-api\";\nimport type { FunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { DeleteKafkaInstance } from \"ui\";\nimport { ReadyStatuses } from \"ui-models/src/models/kafka\";\nimport type { ControlPlaneNavigationProps } from \"../routesConsts\";\nimport { useControlPlaneGate } from \"../useControlPlaneGate\";\n\nexport const DeleteKafkaInstanceRoute: FunctionComponent<\n  ControlPlaneNavigationProps\n> = ({ instancesHref }) => {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const history = useHistory();\n\n  const { instance } = useControlPlaneGate();\n  const { mutateAsync, isLoading: isDeleting } = useDeleteKafkaMutation();\n\n  const onCancel = useCallback(() => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    history.push(instancesHref);\n  }, [history, instancesHref]);\n\n  const onDelete = useCallback(() => {\n    void mutateAsync({\n      id: instance.id,\n      onError: () => {\n        // TODO: alert\n      },\n      onSuccess: () => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n        history.replace(instancesHref);\n      },\n    });\n  }, [mutateAsync, history, instance?.id, instancesHref]);\n\n  return (\n    <DeleteKafkaInstance\n      isModalOpen={true}\n      isDeleting={isDeleting}\n      onCancel={onCancel}\n      onDelete={onDelete}\n      instanceName={\n        ReadyStatuses.includes(instance.status) ? instance.name : undefined\n      }\n      appendTo={() =>\n        (document.getElementById(\"chrome-app-render-root\") as HTMLElement) ||\n        document.body\n      }\n    />\n  );\n};\n","import { useUpdateKafkaMutation, useUserAccounts } from \"consoledot-api\";\nimport type { FunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport type { ChangeKafkaOwnerProps } from \"ui\";\nimport { ChangeKafkaOwner } from \"ui\";\n\nimport type { ControlPlaneNavigationProps } from \"../routesConsts\";\nimport { useControlPlaneGate } from \"../useControlPlaneGate\";\n\nexport const ChangeOwnerRoute: FunctionComponent<\n  ControlPlaneNavigationProps\n> = ({ instancesHref }) => {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const history = useHistory();\n\n  const { instance } = useControlPlaneGate();\n  const { data: accounts } = useUserAccounts({});\n  const updateInstance = useUpdateKafkaMutation();\n\n  const onCancel = useCallback(() => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    history.push(instancesHref);\n  }, [history, instancesHref]);\n\n  const onConfirm = useCallback(\n    (newOwner: string) => {\n      updateInstance.mutate(\n        {\n          id: instance.id,\n          updates: { owner: newOwner },\n        },\n        {\n          onSuccess: () => {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n            history.replace(instancesHref);\n          },\n        }\n      );\n    },\n    [history, instance.id, instancesHref, updateInstance]\n  );\n\n  const savingState = ((): ChangeKafkaOwnerProps[\"savingState\"] => {\n    if (updateInstance.isLoading) return \"saving\";\n    if (updateInstance.isError) {\n      return updateInstance.error.type === \"invalid-user\"\n        ? \"invalid-user\"\n        : \"unknown-error\";\n    }\n    return \"idle\";\n  })();\n\n  return (\n    <ChangeKafkaOwner\n      currentOwner={instance.owner}\n      accounts={accounts?.accounts.map((a) => ({\n        id: a.username,\n        displayName: a.displayName,\n      }))}\n      onConfirm={onConfirm}\n      onCancel={onCancel}\n      savingState={savingState}\n    />\n  );\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { RedirectOnGateError } from \"../RedirectOnGateError\";\nimport {\n  CreateKafkaInstanceRoute,\n  DeleteKafkaInstanceRoute,\n  KafkaInstancesRoute,\n} from \"./routes\";\nimport { ChangeOwnerRoute } from \"./routes/ChangeOwnerRoute\";\nimport {\n  ControlPlaneChangeOwnerPath,\n  ControlPlaneDeleteInstancePath,\n  ControlPlaneNewInstancePath,\n  ControlPlaneRoutePath,\n} from \"./routesConsts\";\n\nexport const ControlPlaneRoutes: VoidFunctionComponent = () => {\n  return (\n    <Route path={ControlPlaneRoutePath} exact>\n      <Route path={ControlPlaneNewInstancePath}>\n        <CreateKafkaInstanceRoute instancesHref={\"/kafkas\"} />\n      </Route>\n      <RedirectOnGateError redirectUrl={\"/kafkas\"}>\n        <Route path={ControlPlaneDeleteInstancePath}>\n          <DeleteKafkaInstanceRoute instancesHref={\"/kafkas\"} />\n        </Route>\n        <Route path={ControlPlaneChangeOwnerPath}>\n          <ChangeOwnerRoute instancesHref={\"/kafkas\"} />\n        </Route>\n      </RedirectOnGateError>\n      <KafkaInstancesRoute\n        getUrlForInstance={(instance) => `/kafkas/${instance.id}/details`}\n      />\n    </Route>\n  );\n};\n","import type { ControlPlaneNavigationProps } from \"../control-plane/routesConsts\";\nimport { ControlPlaneRouteRoot } from \"../control-plane/routesConsts\";\n\nexport const DataPlaneRoutePath =\n  `${ControlPlaneRouteRoot}/:id/details` as const;\nexport type DataPlaneRouteParams = { id: string };\nexport type DataPlaneTopicRouteParams = { id: string; topicName: string };\nexport type DataPlaneConsumerGroupRouteParams = {\n  id: string;\n  consumerGroupId: string;\n};\n\nexport type DataPlaneTopicConsumerRouteParams = {\n  id: string;\n  topicName: string;\n  consumerGroupId: string;\n};\nexport const DataPlaneTopicRoutePath =\n  `${ControlPlaneRouteRoot}/:id/details/topics/:topicName` as const;\n\nexport const DataPlaneConsumerGroupRoutePath =\n  `${ControlPlaneRouteRoot}/:id/details/consumer-groups/:consumerGroupId` as const;\n\nexport type DataPlanePermissionsRouteParams = {\n  selectedAccount: string;\n};\n\nexport const DataPlaneTopicConsumerGroupRoutePath =\n  `${ControlPlaneRouteRoot}/:id/details/topics/:topicName/consumer-groups/:consumerGroupId` as const;\n\nexport const DataPlanePermissionsRoutePath =\n  `${ControlPlaneRouteRoot}/:id/details/acls/select-account/:selectedAccount` as const;\n\nexport type DataPlaneNavigationProps = {\n  instanceDetailsHref: (instanceId: string) => string;\n  instanceTopicsHref: (instanceId: string) => string;\n} & ControlPlaneNavigationProps;\n\nexport type DataPlaneTopicNavigationProps = {\n  instanceDetailsHref: (instanceId: string) => string;\n  instanceTopicsHref: (instanceId: string) => string;\n  topicHref: (instanceId: string, topicName: string) => string;\n  deleteTopicHref: (instanceId: string, topicName: string) => string;\n  updateTopicHref: (instanceId: string, topicName: string) => string;\n} & ControlPlaneNavigationProps;\n\nexport type DataPlaneConsumerGroupNavigationsProps = {\n  instanceDetailsHref: (instanceId: string) => string;\n  instanceConsumerGroupsHref: (instanceId: string) => string;\n  viewPartitionConsumerGroupHref: (\n    instanceId: string,\n    consumerGroupId: string\n  ) => string;\n} & ControlPlaneNavigationProps;\n\nexport type DataPlaneTopicConsumerGroupNavigationsProps = {\n  instanceTopicConsumerGroupsHref: (\n    instanceId: string,\n    topicName: string\n  ) => string;\n  viewTopicPartitionConsumerGroupHref: (\n    instanceId: string,\n    consumerGroupId: string,\n    topicName: string\n  ) => string;\n  instanceDetailsHref: (instanceId: string) => string;\n  instanceTopicsHref: (instanceId: string) => string;\n} & ControlPlaneNavigationProps;\n\nexport type DataPlanePermissionsNavigationProps = {\n  managePermissionsHref: (instanceId: string) => string;\n  editPermissionsHref: (instanceId: string, selectedAccount: string) => string;\n} & ControlPlaneNavigationProps;\n","import { useKafka } from \"consoledot-api\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport type { DataPlaneRouteParams } from \"./routesConsts\";\nimport { DataPlaneRoutePath } from \"./routesConsts\";\n\nexport function useDataPlaneGate() {\n  const match = useRouteMatch<DataPlaneRouteParams>(DataPlaneRoutePath);\n  if (!match) {\n    throw Error(\"useDataPlaneGate used outside the expected route\");\n  }\n  const { data: instance } = useKafka(match.params.id, true);\n  return { instance: instance as NonNullable<typeof instance>, match };\n}\n","import type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport type { DataPlaneHeaderProps } from \"ui\";\nimport { DataPlaneHeader } from \"ui\";\nimport { ReadyStatuses } from \"ui-models/src/models/kafka\";\nimport { useDrawer } from \"../../control-plane\";\nimport type { ControlPlaneNavigationProps } from \"../../control-plane/routesConsts\";\nimport { useDataPlaneGate } from \"../useDataPlaneGate\";\n\nexport const DataPlaneHeaderConnected: VoidFunctionComponent<\n  ControlPlaneNavigationProps & Pick<DataPlaneHeaderProps, \"activeSection\">\n> = ({ instancesHref, activeSection }) => {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const history = useHistory();\n  const { setActiveTab, toggleExpanded } = useDrawer();\n\n  const {\n    instance,\n    match: { url },\n  } = useDataPlaneGate();\n\n  const sectionsHref = {\n    dashboard: `${url}/dashboard`,\n    topics: `${url}/topics`,\n    consumer: `${url}/consumer-groups`,\n    permissions: `${url}/acls`,\n    settings: `${url}/settings`,\n  };\n\n  const onDelete = useCallback(() => {\n    // TODO: unhardcode this url\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    history.push(`${instancesHref}/${instance.id}/delete`);\n  }, [history, instance, instancesHref]);\n\n  return (\n    <DataPlaneHeader\n      instancesHref={instancesHref}\n      instanceName={instance?.name || \"\"}\n      activeSection={activeSection}\n      sectionsHref={sectionsHref}\n      onDetails={() => {\n        setActiveTab(\"details\");\n        toggleExpanded(true);\n      }}\n      onConnection={() => {\n        setActiveTab(\"connections\");\n        toggleExpanded(true);\n      }}\n      canOpenConnection={\n        instance ? ReadyStatuses.includes(instance?.status) : false\n      }\n      canChangeOwner={true /* TODO */}\n      onChangeOwner={() => false /* TODO */}\n      canDelete={true /* TODO */}\n      onDelete={onDelete}\n    />\n  );\n};\n","import { usePaginationSearchParams } from \"@rhoas/app-services-ui-components\";\nimport { useCallback } from \"react\";\nimport type { VoidFunctionComponent } from \"react\";\nimport type { Account } from \"ui\";\nimport { PrincipalType } from \"ui\";\nimport { PermissionsTable } from \"ui\";\nimport { DataPlaneHeaderConnected } from \"./DataPlaneHeaderConnected\";\nimport {\n  useAcls,\n  useDeletePermissionsMutation,\n  useServiceAccounts,\n  useUserAccounts,\n} from \"consoledot-api\";\nimport { useHistory } from \"react-router-dom\";\nimport type { DataPlanePermissionsNavigationProps } from \"../routesConsts\";\nimport { addNotification } from \"@redhat-cloud-services/frontend-components-notifications\";\nimport { useDispatch } from \"react-redux\";\nimport { useDataPlaneGate } from \"../useDataPlaneGate\";\n\nexport const PermissionsRoute: VoidFunctionComponent<\n  DataPlanePermissionsNavigationProps\n> = ({ instancesHref, managePermissionsHref, editPermissionsHref }) => {\n  const { page, perPage, setPagination, setPaginationQuery } =\n    usePaginationSearchParams();\n  const { instance } = useDataPlaneGate();\n  const { mutateAsync } = useDeletePermissionsMutation();\n  const dispatch = useDispatch();\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const history = useHistory();\n\n  const { data: acls } = useAcls({\n    id: instance.id,\n    adminUrl: instance.adminUrl,\n    page,\n    perPage,\n  });\n\n  const { data: accounts } = useUserAccounts({\n    id: instance.id,\n    adminUrl: instance.adminUrl,\n  });\n\n  const { data: serviceAccounts } = useServiceAccounts({\n    id: instance.id,\n    adminUrl: instance.adminUrl,\n  });\n\n  const userAccounts: Account[] | undefined = accounts?.accounts.map(\n    (userAccount) => {\n      return {\n        id: userAccount.username,\n        displayName: userAccount.displayName,\n        email: userAccount.email,\n        principalType: PrincipalType.UserAccount,\n      };\n    }\n  );\n\n  const serviceAccountList: Account[] | undefined =\n    serviceAccounts?.serviceAccounts.map((serviceAccount) => {\n      return {\n        id: serviceAccount.id,\n        displayName: serviceAccount.displayName,\n        principalType: PrincipalType.ServiceAccount,\n      };\n    });\n\n  const allAccounts =\n    serviceAccountList != undefined && userAccounts != undefined\n      ? [...serviceAccountList, ...userAccounts]\n      : undefined;\n\n  const onDeleteSelected = useCallback(\n    (rowIndex: number[]) => {\n      rowIndex.map((value) => {\n        const rowToDelete = acls?.groups[value];\n        void mutateAsync({\n          instanceId: instance.id,\n          adminUrl: instance.adminUrl || \"\",\n          acl: {\n            patternType: rowToDelete?.resource.patternType,\n            permissionType: rowToDelete?.permission.permission,\n            principal: rowToDelete?.account,\n            resourceName: rowToDelete?.resource.resourceName,\n            operation: rowToDelete?.permission.operation,\n            resourceType: rowToDelete?.resource.resourceType,\n          },\n          onError: (_, message) => {\n            dispatch(\n              addNotification({\n                variant: \"danger\",\n                title: message,\n                dismissable: true,\n                id: \"delete-error\",\n              })\n            );\n          },\n          onSuccess: () => {\n            //We have no action yet to confirm if delete was successfull.\n          },\n        });\n      });\n    },\n    [acls?.groups, mutateAsync, instance.id, instance.adminUrl, dispatch]\n  );\n\n  const onDelete = useCallback(\n    (rowIndex: number) => {\n      const rowToDelete = acls?.groups[rowIndex];\n      void mutateAsync({\n        instanceId: instance.id,\n        adminUrl: instance.adminUrl || \"\",\n        acl: {\n          patternType: rowToDelete?.resource.patternType,\n          permissionType: rowToDelete?.permission.permission,\n          principal: rowToDelete?.account,\n          resourceName: rowToDelete?.resource.resourceName,\n          operation: rowToDelete?.permission.operation,\n          resourceType: rowToDelete?.resource.resourceType,\n        },\n        onError: (_, message) => {\n          dispatch(\n            addNotification({\n              variant: \"danger\",\n              title: message,\n              dismissable: true,\n              id: \"delete-error\",\n            })\n          );\n        },\n        onSuccess: () => {\n          // No action\n        },\n      });\n    },\n    [acls?.groups, mutateAsync, instance.id, instance.adminUrl, dispatch]\n  );\n\n  const onManagePermissionsActionItem = useCallback(\n    (account: string) => {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n      history.push(editPermissionsHref(instance.id, account));\n    },\n    [history, instance.id, editPermissionsHref]\n  );\n  const onManagePermission = useCallback(() => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    history.push(managePermissionsHref(instance.id));\n  }, [history, instance.id, managePermissionsHref]);\n\n  return (\n    <>\n      <DataPlaneHeaderConnected\n        instancesHref={instancesHref}\n        activeSection={\"permissions\"}\n      />\n\n      <PermissionsTable\n        allAccounts={allAccounts}\n        permissions={acls?.groups}\n        onDelete={onDelete}\n        onDeleteSelected={onDeleteSelected}\n        onManagePermissions={onManagePermission}\n        onPerPageChange={setPaginationQuery}\n        itemCount={acls?.count}\n        page={page}\n        perPage={perPage}\n        onPageChange={setPagination}\n        onManagePermissionsActionItem={onManagePermissionsActionItem}\n      />\n    </>\n  );\n};\n","import {\n  usePaginationSearchParams,\n  useSortableSearchParams,\n  useURLSearchParamsChips,\n} from \"@rhoas/app-services-ui-components\";\nimport { KafkaTopicsSortableColumns, useTopics } from \"consoledot-api\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { KafkaTopics, useTopicLabels } from \"ui\";\nimport type { ControlPlaneNavigationProps } from \"../../control-plane/routesConsts\";\nimport { useDataPlaneGate } from \"../useDataPlaneGate\";\nimport { DataPlaneHeaderConnected } from \"./DataPlaneHeaderConnected\";\n\nexport const TopicsRoute: VoidFunctionComponent<\n  ControlPlaneNavigationProps\n> = ({ instancesHref }) => {\n  const labels = useTopicLabels();\n\n  const { instance } = useDataPlaneGate();\n  const { page, perPage, setPagination, setPaginationQuery } =\n    usePaginationSearchParams();\n  const resetPaginationQuery = useCallback(\n    () => setPaginationQuery(1, perPage),\n    [perPage, setPaginationQuery]\n  );\n\n  const topicChips = useURLSearchParamsChips(\"topic\", resetPaginationQuery);\n  const [isColumnSortable, sort, sortDirection] = useSortableSearchParams(\n    KafkaTopicsSortableColumns,\n    labels.fields\n  );\n  const { data } = useTopics({\n    id: instance?.id,\n    adminUrl: instance?.adminUrl,\n    page,\n    perPage,\n    sort: sort || undefined,\n    direction: sortDirection,\n    filter: topicChips.chips[0],\n    plan: instance.plan,\n  });\n  return (\n    <>\n      <DataPlaneHeaderConnected\n        instancesHref={instancesHref}\n        activeSection={\"topics\"}\n      />\n      <KafkaTopics\n        topics={data?.topics}\n        itemCount={data?.count}\n        page={page}\n        perPage={perPage}\n        topicName={topicChips.chips}\n        getUrlFortopic={(row) => `./topics/${row.name}`}\n        isColumnSortable={isColumnSortable}\n        onDelete={() => {\n          /* TODO */\n        }}\n        onEdit={() => {\n          /* TODO */\n        }}\n        onSearchTopic={(value) => {\n          topicChips.clear();\n          topicChips.toggle(value);\n        }}\n        onClearAllFilters={topicChips.clear}\n        onCreateTopic={() => {\n          /* TODO */\n        }}\n        onPageChange={setPagination}\n        onRemoveTopicChip={topicChips.clear}\n        onRemoveTopicChips={topicChips.clear}\n        onTopicLinkClick={() => {\n          /* TODO */\n        }}\n      />\n    </>\n  );\n};\n","import { useUpdateKafkaMutation } from \"consoledot-api\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport type { SettingsProps } from \"ui\";\nimport { Settings as SettingsComp } from \"ui\";\nimport type { ControlPlaneNavigationProps } from \"../../control-plane/routesConsts\";\nimport { useDataPlaneGate } from \"../useDataPlaneGate\";\nimport { DataPlaneHeaderConnected } from \"./DataPlaneHeaderConnected\";\n\nexport const SettingsRoute: VoidFunctionComponent<\n  ControlPlaneNavigationProps\n> = ({ instancesHref }) => {\n  const { instance } = useDataPlaneGate();\n  const updateInstance = useUpdateKafkaMutation();\n\n  const onSubmitReAuthentication = useCallback<\n    SettingsProps[\"onSubmitReAuthentication\"]\n  >(\n    async (reauthenticationEnabled) => {\n      try {\n        await updateInstance.mutateAsync({\n          id: instance.id,\n          updates: { reauthentication_enabled: reauthenticationEnabled },\n        });\n        return reauthenticationEnabled;\n      } catch {\n        return instance.request.reauthentication_enabled;\n      }\n    },\n    [instance, updateInstance]\n  );\n  return (\n    <>\n      <DataPlaneHeaderConnected\n        instancesHref={instancesHref}\n        activeSection={\"settings\"}\n      />\n      <SettingsComp\n        onSubmitReAuthentication={onSubmitReAuthentication}\n        reauthenticationEnabled={instance.request.reauthentication_enabled}\n      />\n    </>\n  );\n};\n","import {\n  useKafkaFetchQuery,\n  useKafkaKpisFetchQuery,\n  useKafkaMetricsFetchQuery,\n  useTopicsFetchQuery,\n  useTopicsMetricsFetchQuery,\n} from \"consoledot-api\";\nimport {\n  metricsDismissLagAlerts,\n  metricsIsLagAlertsDismissed,\n} from \"local-storage-helpers\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback, useState } from \"react\";\nimport type { MetricsProps } from \"ui\";\nimport { Metrics } from \"ui\";\nimport type { ControlPlaneNavigationProps } from \"../../control-plane/routesConsts\";\nimport { useDataPlaneGate } from \"../useDataPlaneGate\";\nimport { DataPlaneHeaderConnected } from \"./DataPlaneHeaderConnected\";\n\nexport const DashboardRoute: VoidFunctionComponent<\n  ControlPlaneNavigationProps\n> = ({ instancesHref }) => {\n  const {\n    instance,\n    match: { params },\n  } = useDataPlaneGate();\n  const [hasUserAlreadyClosedAlert, setHasUserAlreadyClosedAlert] = useState(\n    metricsIsLagAlertsDismissed()\n  );\n\n  const onAlertClose = useCallback(() => {\n    setHasUserAlreadyClosedAlert(true);\n    metricsDismissLagAlerts();\n  }, []);\n\n  const queryInstance = useKafkaFetchQuery();\n  const queryKpisMetrics = useKafkaKpisFetchQuery();\n  const queryInstanceMetrics = useKafkaMetricsFetchQuery();\n  const queryTopicMetrics = useTopicsMetricsFetchQuery();\n  const queryTopics = useTopicsFetchQuery();\n\n  const getMetricsKpi: MetricsProps[\"getMetricsKpi\"] = useCallback(async () => {\n    const kpis = await queryKpisMetrics(params.id);\n    return {\n      ...kpis,\n      topicPartitionsLimit: instance.maxPartitions || 0,\n    };\n  }, [instance, params.id, queryKpisMetrics]);\n\n  const getKafkaInstanceMetrics: MetricsProps[\"getKafkaInstanceMetrics\"] =\n    useCallback(\n      async ({ interval, duration }) => {\n        const [instance, metrics] = await Promise.all([\n          queryInstance(params.id),\n          queryInstanceMetrics({ id: params.id, duration, interval }),\n        ]);\n        if (!instance) {\n          return Promise.reject(\"Can't retrieve instance\");\n        }\n        return {\n          ...metrics,\n          diskSpaceLimit:\n            (instance.request.max_data_retention_size?.bytes || 0) / 1073741824,\n          connectionsLimit: instance.connections || 0,\n          connectionRateLimit: instance.connectionRate || 0,\n        };\n      },\n      [params.id, queryInstance, queryInstanceMetrics]\n    );\n\n  const getTopicsMetrics: MetricsProps[\"getTopicsMetrics\"] = useCallback(\n    async ({ interval, duration, selectedTopic }) => {\n      const [instance, metrics] = await Promise.all([\n        queryInstance(params.id),\n        queryTopicMetrics({ id: params.id, duration, interval, selectedTopic }),\n      ]);\n      if (!instance || !instance.adminUrl) {\n        return Promise.reject(\"Can't retrieve instance\");\n      }\n      const kafkaTopics = (\n        await queryTopics({\n          id: instance.id,\n          adminUrl: instance.adminUrl,\n          page: 1,\n          perPage: 1000,\n          plan: instance.plan,\n        })\n      ).topics.map((t) => t.name);\n      return {\n        ...metrics,\n        kafkaTopics,\n      };\n    },\n    [params.id, queryInstance, queryTopicMetrics, queryTopics]\n  );\n\n  return (\n    <>\n      <DataPlaneHeaderConnected\n        instancesHref={instancesHref}\n        activeSection={\"dashboard\"}\n      />\n      <Metrics\n        onCreateTopic={() => {\n          /* TODO */\n        }}\n        onAlertClose={onAlertClose}\n        hasUserAlreadyClosedAlert={hasUserAlreadyClosedAlert}\n        getKafkaInstanceMetrics={getKafkaInstanceMetrics}\n        getTopicsMetrics={getTopicsMetrics}\n        getMetricsKpi={getMetricsKpi}\n      />\n    </>\n  );\n};\n","import {\n  usePaginationSearchParams,\n  useSortableSearchParams,\n  useURLSearchParamsChips,\n} from \"@rhoas/app-services-ui-components\";\nimport {\n  KafkaConsumerGroupSortableColumns,\n  useConsumerGroups,\n} from \"consoledot-api\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { ConsumerGroups, useConsumerGroupLabels } from \"ui\";\nimport type { ControlPlaneNavigationProps } from \"../../control-plane/routesConsts\";\nimport { useDataPlaneGate } from \"../useDataPlaneGate\";\nimport { DataPlaneHeaderConnected } from \"./DataPlaneHeaderConnected\";\nimport { useHistory } from \"react-router-dom\";\nimport { instanceConsumerGroupsHref } from \"../DataPlaneRoutes\";\n\nexport const ConsumerGroupsRoute: VoidFunctionComponent<\n  ControlPlaneNavigationProps\n> = ({ instancesHref }) => {\n  const { instance } = useDataPlaneGate();\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const history = useHistory();\n\n  const labels = useConsumerGroupLabels();\n\n  const { page, perPage, setPagination, setPaginationQuery } =\n    usePaginationSearchParams();\n  const resetPaginationQuery = useCallback(\n    () => setPaginationQuery(1, perPage),\n    [perPage, setPaginationQuery]\n  );\n\n  const name = labels.fields.groupId;\n\n  const consumerName = useURLSearchParamsChips(\n    \"consumer\",\n    resetPaginationQuery\n  );\n  const [isColumnSortable, sort, sortDirection] = useSortableSearchParams(\n    KafkaConsumerGroupSortableColumns,\n    { name }\n  );\n  const { data } = useConsumerGroups({\n    id: instance?.id,\n    adminUrl: instance?.adminUrl,\n    page,\n    perPage,\n    sort: sort || undefined,\n    direction: sortDirection,\n    groupId: consumerName.chips[0],\n  });\n\n  const onDeletConsumerGroup = useCallback(\n    (groupId: string) => {\n      //TODO: remove hardcode value\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n      history.push(\n        `${instanceConsumerGroupsHref(instance.id)}/${groupId}/delete`\n      );\n    },\n    [history, instance.id]\n  );\n\n  const onViewPartition = useCallback(\n    (groupId: string) => {\n      //TODO: remove hardcode value\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n      history.push(\n        `${instanceConsumerGroupsHref(instance.id)}/${groupId}/view-partition`\n      );\n    },\n    [history, instance.id]\n  );\n\n  const onClickResetOffset = useCallback(\n    (groupId: string) => {\n      //TODO: remove hardcode value\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n      history.push(\n        `${instanceConsumerGroupsHref(instance.id)}/${groupId}/reset-offset`\n      );\n    },\n    [history, instance.id]\n  );\n  return (\n    <>\n      <DataPlaneHeaderConnected\n        instancesHref={instancesHref}\n        activeSection={\"consumer\"}\n      />\n      <ConsumerGroups\n        consumers={data?.groups}\n        itemCount={data?.count}\n        page={page}\n        perPage={perPage}\n        consumerName={consumerName.chips}\n        isRowSelected={() => false}\n        isColumnSortable={isColumnSortable}\n        onDelete={(row) => onDeletConsumerGroup(row.groupId)}\n        onSearchConsumer={(value) => {\n          consumerName.clear();\n          consumerName.toggle(value);\n        }}\n        onClearAllFilters={consumerName.clear}\n        onPageChange={setPagination}\n        onRemoveConsumerChip={consumerName.clear}\n        onRemoveConsumerChips={consumerName.clear}\n        onViewPartition={(row) => onViewPartition(row.groupId)}\n        onViewResetOffset={(row) => onClickResetOffset(row.groupId)}\n      />\n    </>\n  );\n};\n","import { useTopic } from \"consoledot-api\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport type { DataPlaneTopicRouteParams } from \"./routesConsts\";\nimport { DataPlaneTopicRoutePath } from \"./routesConsts\";\nimport { useDataPlaneGate } from \"./useDataPlaneGate\";\n\nexport function useTopicGate() {\n  const { instance } = useDataPlaneGate();\n  const match = useRouteMatch<DataPlaneTopicRouteParams>(\n    DataPlaneTopicRoutePath\n  );\n  if (!match) {\n    throw Error(\"useDataPlaneGate used outside the expected route\");\n  }\n  const { data: topic } = useTopic(\n    {\n      id: instance.id,\n      adminUrl: instance.adminUrl,\n      topicName: match.params.topicName,\n      plan: instance.plan,\n    },\n    true\n  );\n\n  return {\n    instance,\n    topic: topic as NonNullable<typeof topic>,\n    match,\n  };\n}\n","import type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport type { DataPlaneTopicHeaderProps } from \"ui\";\nimport { DataPlaneTopicHeader } from \"ui\";\nimport { ReadyStatuses } from \"ui-models/src/models/kafka\";\nimport { useDrawer } from \"../../control-plane\";\nimport type { DataPlaneNavigationProps } from \"../routesConsts\";\nimport { useTopicGate } from \"../useTopicGate\";\n\nexport const DataPlaneTopicHeaderConnected: VoidFunctionComponent<\n  DataPlaneNavigationProps & Pick<DataPlaneTopicHeaderProps, \"activeSection\">\n> = ({\n  instanceDetailsHref,\n  instanceTopicsHref,\n  instancesHref,\n  activeSection,\n}) => {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const history = useHistory();\n  const { setActiveTab, toggleExpanded } = useDrawer();\n  const {\n    instance,\n    topic,\n    match: { url },\n  } = useTopicGate();\n\n  const tabsHref = {\n    consumer: `${url}/consumer-groups`,\n    messages: `${url}/messages`,\n    properties: `${url}/properties`,\n    schemas: `${url}/schemas`,\n  };\n\n  const onDelete = useCallback(() => {\n    // TODO: unhardcode this url\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    history.push(`${instancesHref}/${instance.id}/delete`);\n  }, [history, instance, instancesHref]);\n\n  return (\n    <DataPlaneTopicHeader\n      instancesHref={instancesHref}\n      instanceName={instance.name}\n      instanceDetailHref={instanceDetailsHref(instance.id)}\n      instanceTopicsHref={instanceTopicsHref(instance.id)}\n      activeSection={activeSection}\n      topicName={topic.name}\n      tabsHref={tabsHref}\n      onDetails={() => {\n        setActiveTab(\"details\");\n        toggleExpanded(true);\n      }}\n      onConnection={() => {\n        setActiveTab(\"connections\");\n        toggleExpanded(true);\n      }}\n      canOpenConnection={\n        instance ? ReadyStatuses.includes(instance?.status) : false\n      }\n      canChangeOwner={true /* TODO */}\n      onChangeOwner={() => false /* TODO */}\n      canDelete={true /* TODO */}\n      onDelete={onDelete}\n    />\n  );\n};\n","import {\n  usePaginationSearchParams,\n  useSortableSearchParams,\n  useURLSearchParamsChips,\n} from \"@rhoas/app-services-ui-components\";\nimport {\n  KafkaConsumerGroupSortableColumns,\n  useConsumerGroups,\n} from \"consoledot-api\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { ConsumerGroups, useConsumerGroupLabels } from \"ui\";\nimport type { DataPlaneNavigationProps } from \"../routesConsts\";\nimport { useTopicGate } from \"../useTopicGate\";\nimport { DataPlaneTopicHeaderConnected } from \"./DataPlaneTopicHeaderConnected\";\nimport { ControlPlaneRouteRoot } from \"../../control-plane/routesConsts\";\nimport { useHistory } from \"react-router-dom\";\n\nexport const TopicConsumerGroupsRoute: VoidFunctionComponent<\n  DataPlaneNavigationProps\n> = ({ instanceDetailsHref, instanceTopicsHref, instancesHref }) => {\n  const { instance, topic } = useTopicGate();\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const history = useHistory();\n\n  const labels = useConsumerGroupLabels();\n\n  const { page, perPage, setPagination, setPaginationQuery } =\n    usePaginationSearchParams();\n\n  const resetPaginationQuery = useCallback(\n    () => setPaginationQuery(1, perPage),\n    [perPage, setPaginationQuery]\n  );\n\n  const name = labels.fields.groupId;\n\n  const consumerName = useURLSearchParamsChips(\n    \"consumer\",\n    resetPaginationQuery\n  );\n  const [isColumnSortable, sort, sortDirection] = useSortableSearchParams(\n    KafkaConsumerGroupSortableColumns,\n    { name }\n  );\n\n  const { data } = useConsumerGroups({\n    id: instance?.id,\n    adminUrl: instance?.adminUrl,\n    page,\n    perPage,\n    sort: sort || undefined,\n    direction: sortDirection,\n    groupId: consumerName.chips[0],\n    topic: topic.name,\n  });\n\n  const onDeletConsumerGroup = useCallback(\n    (groupId: string) => {\n      //TODO: remove hardcode value\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n      history.push(\n        `${ControlPlaneRouteRoot}/${instance.id}/details/topics/${topic.name}/consumer-groups/${groupId}/delete`\n      );\n    },\n    [history, instance.id, topic.name]\n  );\n\n  const onViewPartition = useCallback(\n    (groupId: string) => {\n      //TODO: remove hardcode value\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n      history.push(\n        `${ControlPlaneRouteRoot}/${instance.id}/details/topics/${topic.name}/consumer-groups/${groupId}/view-partition`\n      );\n    },\n    [history, instance.id, topic.name]\n  );\n\n  const onClickResetOffset = useCallback(\n    (groupId: string) => {\n      //TODO: remove hardcode value\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n      history.push(\n        `${ControlPlaneRouteRoot}/${instance.id}/details/topics/${topic.name}/consumer-groups/${groupId}/reset-offset`\n      );\n    },\n    [history, instance.id, topic.name]\n  );\n\n  return (\n    <>\n      <DataPlaneTopicHeaderConnected\n        instancesHref={instancesHref}\n        instanceDetailsHref={instanceDetailsHref}\n        instanceTopicsHref={instanceTopicsHref}\n        activeSection={\"consumer\"}\n      />\n      <ConsumerGroups\n        consumers={data?.groups}\n        itemCount={data?.count}\n        page={page}\n        perPage={perPage}\n        consumerName={consumerName.chips}\n        isRowSelected={() => false}\n        isColumnSortable={isColumnSortable}\n        onDelete={(row) => onDeletConsumerGroup(row.groupId)}\n        onSearchConsumer={(value) => {\n          consumerName.clear();\n          consumerName.toggle(value);\n        }}\n        onClearAllFilters={consumerName.clear}\n        onPageChange={setPagination}\n        onRemoveConsumerChip={consumerName.clear}\n        onRemoveConsumerChips={consumerName.clear}\n        onViewPartition={(row) => onViewPartition(row.groupId)}\n        onViewResetOffset={(row) => onClickResetOffset(row.groupId)}\n      />\n    </>\n  );\n};\n","import { useMessagesFetchQuery } from \"consoledot-api\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport type { KafkaMessageBrowserProps } from \"ui\";\nimport { KafkaMessageBrowser } from \"ui\";\nimport type { DataPlaneNavigationProps } from \"../routesConsts\";\nimport { useTopicGate } from \"../useTopicGate\";\nimport { DataPlaneTopicHeaderConnected } from \"./DataPlaneTopicHeaderConnected\";\n\nexport const TopicMessagesGroupsRoute: VoidFunctionComponent<\n  DataPlaneNavigationProps\n> = ({ instanceDetailsHref, instanceTopicsHref, instancesHref }) => {\n  const { instance, topic } = useTopicGate();\n  const kafkaTopicMessagesFetchQuery = useMessagesFetchQuery();\n\n  const getMessages = useCallback<KafkaMessageBrowserProps[\"getMessages\"]>(\n    async (params) => {\n      if (!instance.adminUrl) {\n        throw Error(\"Invalid instance adminUrl\");\n      }\n      const messages = await kafkaTopicMessagesFetchQuery({\n        ...params,\n        id: instance.id,\n        adminUrl: instance.adminUrl,\n        topicName: topic.name,\n      });\n      return {\n        messages,\n        partitions: topic.partitions.length,\n      };\n    },\n    [\n      instance.adminUrl,\n      instance.id,\n      kafkaTopicMessagesFetchQuery,\n      topic.name,\n      topic.partitions.length,\n    ]\n  );\n\n  return (\n    <>\n      <DataPlaneTopicHeaderConnected\n        instancesHref={instancesHref}\n        instanceDetailsHref={instanceDetailsHref}\n        instanceTopicsHref={instanceTopicsHref}\n        activeSection={\"messages\"}\n      />\n      <KafkaMessageBrowser getMessages={getMessages} />\n    </>\n  );\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { TopicProperties } from \"ui\";\nimport type { DataPlaneTopicNavigationProps } from \"../routesConsts\";\nimport { useTopicGate } from \"../useTopicGate\";\nimport { DataPlaneTopicHeaderConnected } from \"./DataPlaneTopicHeaderConnected\";\n\nexport const TopicPropertiesRoute: VoidFunctionComponent<\n  DataPlaneTopicNavigationProps\n> = ({\n  instanceDetailsHref,\n  instanceTopicsHref,\n  instancesHref,\n  deleteTopicHref,\n  updateTopicHref,\n}) => {\n  const { instance, topic } = useTopicGate();\n\n  return (\n    <>\n      <DataPlaneTopicHeaderConnected\n        instancesHref={instancesHref}\n        instanceDetailsHref={instanceDetailsHref}\n        instanceTopicsHref={instanceTopicsHref}\n        activeSection={\"properties\"}\n      />\n      <TopicProperties\n        topic={topic}\n        deleteTopicHref={deleteTopicHref(instance.id, topic.name)}\n        updateTopicHref={updateTopicHref(instance.id, topic.name)}\n      />\n    </>\n  );\n};\n","/* eslint-disable */\n// @ts-nocheck\nimport { useChrome } from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport { I18nProvider } from \"@rhoas/app-services-ui-components\";\nimport type { Auth, Config } from \"@rhoas/app-services-ui-shared\";\nimport { AuthContext, ConfigContext } from \"@rhoas/app-services-ui-shared\";\n/* tslint:disable */\nimport type { Registry } from \"@rhoas/registry-management-sdk\";\nimport type { ScalprumComponentProps } from \"@scalprum/react-core\";\nimport { ScalprumComponent } from \"@scalprum/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport type { DataPlaneNavigationProps } from \"../routesConsts\";\nimport { useTopicGate } from \"../useTopicGate\";\nimport { DataPlaneTopicHeaderConnected } from \"./DataPlaneTopicHeaderConnected\";\n\nexport const TopicSchemasRoute: VoidFunctionComponent<\n  DataPlaneNavigationProps\n> = ({ instanceDetailsHref, instanceTopicsHref, instancesHref }) => {\n  const chrome = useChrome();\n  const { topic } = useTopicGate();\n  const processor = (([_, m]: [string, { entry: string[] }]) =>\n    m.entry.map(\n      (e) => `/beta/apps/srs-ui-build${e}`\n    )) as unknown as ScalprumComponentProps[\"processor\"];\n  const processor2 = (([_, m]: [string, { entry: string[] }]) =>\n    m.entry.map(\n      (e) => `/beta/apps/sr-ui-build${e}`\n    )) as unknown as ScalprumComponentProps[\"processor\"];\n  const basename = \"/service-registry\";\n  const auth: Auth = {\n    srs: { getToken: chrome.auth.getToken },\n  };\n  const config: Config = {\n    srs: { apiBasePath: process.env.API_URL },\n  };\n  return (\n    <>\n      <DataPlaneTopicHeaderConnected\n        instancesHref={instancesHref}\n        instanceDetailsHref={instanceDetailsHref}\n        instanceTopicsHref={instanceTopicsHref}\n        activeSection={\"schemas\"}\n      />\n      <AuthContext.Provider value={auth}>\n        <ConfigContext.Provider value={config}>\n          <I18nProvider\n            lng={\"en\"}\n            resources={{\n              en: {\n                common: () =>\n                  import(\n                    \"@rhoas/app-services-ui-components/locales/en/common.json\"\n                  ),\n                \"service-registry\": () =>\n                  import(\n                    \"@rhoas/app-services-ui-components/locales/en/service-registry.json\"\n                  ),\n                srsTemporaryFixMe: () => import(\"./srs-locales.json\"),\n              },\n            }}\n            debug={true}\n          >\n            <ScalprumComponent\n              appName=\"srs\"\n              module=\"./ServiceRegistryMapping\"\n              scope=\"srs\"\n              ErrorComponent={<div>opsie</div>}\n              processor={processor}\n              basename={basename}\n              topicName={topic.name}\n              renderSchema={(registry: Registry) => {\n                return (\n                  <ScalprumComponent\n                    appName=\"ar\"\n                    scope=\"ar\"\n                    ErrorComponent={<div>opsie</div>}\n                    processor={processor2}\n                    module=\"./FederatedSchemaMapping\"\n                    registry={registry}\n                    topicName={topic.name}\n                    groupId={null}\n                    version={\"latest\"}\n                    registryId={registry?.id}\n                    basename={basename}\n                  />\n                );\n              }}\n            />\n          </I18nProvider>\n        </ConfigContext.Provider>\n      </AuthContext.Provider>\n    </>\n  );\n};\n","import { useConsumerGroup } from \"consoledot-api\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport { DataPlaneConsumerGroupRoutePath } from \"./routesConsts\";\nimport type { DataPlaneConsumerGroupRouteParams } from \"./routesConsts\";\nimport { useDataPlaneGate } from \"./useDataPlaneGate\";\n\nexport function useConsumerGroupGate() {\n  const { instance } = useDataPlaneGate();\n  const match = useRouteMatch<DataPlaneConsumerGroupRouteParams>(\n    DataPlaneConsumerGroupRoutePath\n  );\n  if (!match) {\n    throw Error(\"useConsumerGroupGate used outside the expected route\");\n  }\n  const { data: consumerGroup } = useConsumerGroup(\n    {\n      id: instance.id,\n      adminUrl: instance.adminUrl,\n      consumerGroupId: match.params.consumerGroupId,\n    },\n    true\n  );\n\n  return {\n    instance,\n    consumerGroup: consumerGroup as NonNullable<typeof consumerGroup>,\n    match,\n  };\n}\n","import type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { DeleteConsumerGroup } from \"ui\";\nimport { useDeleteConsumerGroupMutation } from \"consoledot-api\";\nimport type { DataPlaneConsumerGroupNavigationsProps } from \"../routesConsts\";\nimport { useConsumerGroupGate } from \"../useConsumerGroupGate\";\n\nexport const ConsumerGroupDeleteRoute: VoidFunctionComponent<\n  DataPlaneConsumerGroupNavigationsProps\n> = ({ instanceConsumerGroupsHref }) => {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const history = useHistory();\n\n  const { instance, consumerGroup } = useConsumerGroupGate();\n\n  const { mutateAsync } = useDeleteConsumerGroupMutation();\n\n  const onCancel = useCallback(() => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    history.push(instanceConsumerGroupsHref(instance.id));\n  }, [history, instance.id, instanceConsumerGroupsHref]);\n\n  const onDelete = useCallback(() => {\n    void mutateAsync({\n      instanceId: instance.id,\n      adminUrl: instance.adminUrl!,\n      consumerGroupId: consumerGroup.groupId,\n      onError: () => {\n        // TODO: alert\n      },\n      onSuccess: () => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n        history.replace(instanceConsumerGroupsHref(instance.id));\n      },\n    });\n  }, [\n    mutateAsync,\n    history,\n    instance?.id,\n    instanceConsumerGroupsHref,\n    consumerGroup.groupId,\n    instance.adminUrl,\n  ]);\n\n  return (\n    <DeleteConsumerGroup\n      isModalOpen={true}\n      onClose={onCancel}\n      onDeleteConsumer={onDelete}\n      state={consumerGroup.state}\n      consumerName={consumerGroup.groupId}\n      appendTo={() =>\n        (document.getElementById(\"chrome-app-render-root\") as HTMLElement) ||\n        document.body\n      }\n    />\n  );\n};\n","import { useCallback } from \"react\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { ConsumerGroupResetOffset } from \"ui\";\nimport type { OffsetValue } from \"ui\";\nimport type { DataPlaneConsumerGroupNavigationsProps } from \"../routesConsts\";\nimport { useHistory } from \"react-router-dom\";\nimport { useResetConsumerGroupMutation } from \"consoledot-api\";\nimport { useConsumerGroupGate } from \"../useConsumerGroupGate\";\n\nexport const ConsumerGroupResetOffsetRoute: VoidFunctionComponent<\n  DataPlaneConsumerGroupNavigationsProps\n> = ({ instanceConsumerGroupsHref }) => {\n  const { instance, consumerGroup } = useConsumerGroupGate();\n\n  const { mutateAsync } = useResetConsumerGroupMutation();\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const history = useHistory();\n\n  const onCancel = useCallback(() => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    history.push(instanceConsumerGroupsHref(instance.id));\n  }, [history, instance.id, instanceConsumerGroupsHref]);\n\n  const getTopics = () => {\n    const topics = (consumerGroup.consumers || []).map(\n      (consumer) => consumer.topic\n    );\n    const distinctTopics = Array.from(new Set(topics));\n    return distinctTopics;\n  };\n\n  const onConfirmResetOffset = useCallback(\n    (\n      topic: string,\n      offset: OffsetValue,\n      partitions: number[],\n      customOffsetValue: string\n    ) => {\n      void mutateAsync({\n        instanceId: instance.id,\n        adminUrl: instance.adminUrl!,\n        consumerGroupId: consumerGroup.groupId,\n        topic: topic,\n        offset: offset,\n        partitions: partitions,\n        value: customOffsetValue,\n        onError: () => {\n          // TODO: alert\n        },\n        onSuccess: () => {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n          history.replace(instanceConsumerGroupsHref(instance.id));\n        },\n      });\n    },\n    [\n      mutateAsync,\n      history,\n      instance?.id,\n      instanceConsumerGroupsHref,\n      instance.adminUrl,\n      consumerGroup.groupId,\n    ]\n  );\n\n  return (\n    <ConsumerGroupResetOffset\n      isModalOpen={true}\n      state={consumerGroup.state}\n      groupId={consumerGroup.groupId}\n      topics={getTopics()}\n      consumers={consumerGroup.consumers}\n      onClickClose={onCancel}\n      onClickResetOffset={onConfirmResetOffset}\n    />\n  );\n};\n","import { useCallback } from \"react\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { ConsumerGroupDrawer } from \"ui\";\nimport type { DataPlaneConsumerGroupNavigationsProps } from \"../routesConsts\";\nimport { useHistory } from \"react-router-dom\";\nimport { ConsumerGroupsRoute } from \"./ConsumerGroupsRoute\";\nimport { useConsumerGroupGate } from \"../useConsumerGroupGate\";\n\nexport const ConsumerGroupViewPartitionRoute: VoidFunctionComponent<\n  DataPlaneConsumerGroupNavigationsProps\n> = ({\n  instanceConsumerGroupsHref,\n  viewPartitionConsumerGroupHref,\n  instancesHref,\n}) => {\n  const { instance, consumerGroup } = useConsumerGroupGate();\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const history = useHistory();\n\n  const onCancel = useCallback(() => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    history.push(instanceConsumerGroupsHref(instance.id));\n  }, [history, instance.id, instanceConsumerGroupsHref]);\n\n  const onDelete = useCallback(() => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    history.push(\n      `${viewPartitionConsumerGroupHref(\n        instance.id,\n        consumerGroup.groupId\n      )}/delete`\n    );\n  }, [\n    history,\n    instance.id,\n    consumerGroup.groupId,\n    viewPartitionConsumerGroupHref,\n  ]);\n\n  const onClickResetOffset = useCallback(() => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    history.push(\n      `${viewPartitionConsumerGroupHref(\n        instance.id,\n        consumerGroup.groupId\n      )}/reset-offset`\n    );\n  }, [\n    history,\n    instance.id,\n    consumerGroup.groupId,\n    viewPartitionConsumerGroupHref,\n  ]);\n\n  return (\n    <ConsumerGroupDrawer\n      consumerGroupByTopic={false}\n      state={consumerGroup.state}\n      activeMembers={consumerGroup.activeConsumers!}\n      partitionsWithLag={consumerGroup.laggingPartitions!}\n      consumers={consumerGroup.consumers}\n      groupId={consumerGroup.groupId}\n      onSelectDeleteConsumerGroup={onDelete}\n      onSelectResetOffsetConsumerGroup={onClickResetOffset}\n      isExpanded={true}\n      onClickClose={onCancel}\n    >\n      <ConsumerGroupsRoute instancesHref={instancesHref} />\n    </ConsumerGroupDrawer>\n  );\n};\n","import { useConsumerGroup } from \"consoledot-api\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport { DataPlaneTopicConsumerGroupRoutePath } from \"./routesConsts\";\nimport type { DataPlaneTopicConsumerRouteParams } from \"./routesConsts\";\nimport { useTopicGate } from \"./useTopicGate\";\n\nexport function useTopicConsumerGroupGate() {\n  const { instance, topic } = useTopicGate();\n  const match = useRouteMatch<DataPlaneTopicConsumerRouteParams>(\n    DataPlaneTopicConsumerGroupRoutePath\n  );\n  if (!match) {\n    throw Error(\"useTopicConsumerGroupGate used outside the expected route\");\n  }\n  const { data: consumerGroup } = useConsumerGroup(\n    {\n      id: instance.id,\n      adminUrl: instance.adminUrl,\n      consumerGroupId: match.params.consumerGroupId,\n    },\n    true\n  );\n\n  return {\n    instance,\n    consumerGroup: consumerGroup as NonNullable<typeof consumerGroup>,\n    match,\n    topic,\n  };\n}\n","import type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { DeleteConsumerGroup } from \"ui\";\nimport { useDeleteConsumerGroupMutation } from \"consoledot-api\";\nimport type { DataPlaneTopicConsumerGroupNavigationsProps } from \"../routesConsts\";\nimport { useTopicConsumerGroupGate } from \"../useTopicConsumerGroupGate\";\n\nexport const TopicConsumerGroupDeleteRoute: VoidFunctionComponent<\n  DataPlaneTopicConsumerGroupNavigationsProps\n> = ({ instanceTopicConsumerGroupsHref }) => {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const history = useHistory();\n\n  const { instance, consumerGroup, topic } = useTopicConsumerGroupGate();\n\n  const { mutateAsync } = useDeleteConsumerGroupMutation();\n\n  const onCancel = useCallback(() => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    history.push(instanceTopicConsumerGroupsHref(instance.id, topic.name));\n  }, [history, instance.id, topic.name, instanceTopicConsumerGroupsHref]);\n\n  const onDelete = useCallback(() => {\n    void mutateAsync({\n      instanceId: instance.id,\n      adminUrl: instance.adminUrl!,\n      consumerGroupId: consumerGroup.groupId,\n      onError: () => {\n        // TODO: alert\n      },\n      onSuccess: () => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n        history.replace(\n          instanceTopicConsumerGroupsHref(instance.id, topic.name)\n        );\n      },\n    });\n  }, [\n    mutateAsync,\n    history,\n    instance?.id,\n    instanceTopicConsumerGroupsHref,\n    topic.name,\n    consumerGroup.groupId,\n    instance?.adminUrl,\n  ]);\n\n  return (\n    <DeleteConsumerGroup\n      isModalOpen={true}\n      onClose={onCancel}\n      onDeleteConsumer={onDelete}\n      state={consumerGroup.state}\n      consumerName={consumerGroup.groupId}\n      appendTo={() =>\n        (document.getElementById(\"chrome-app-render-root\") as HTMLElement) ||\n        document.body\n      }\n    />\n  );\n};\n","import { useCallback } from \"react\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { ConsumerGroupResetOffset } from \"ui\";\nimport type { OffsetValue } from \"ui\";\nimport type { DataPlaneTopicConsumerGroupNavigationsProps } from \"../routesConsts\";\nimport { useHistory } from \"react-router-dom\";\nimport { useResetConsumerGroupMutation } from \"consoledot-api\";\nimport { useTopicConsumerGroupGate } from \"../useTopicConsumerGroupGate\";\n\nexport const TopicConsumerGroupResetOffsetRoute: VoidFunctionComponent<\n  DataPlaneTopicConsumerGroupNavigationsProps\n> = ({ instanceTopicConsumerGroupsHref }) => {\n  const { instance, topic, consumerGroup } = useTopicConsumerGroupGate();\n\n  const { mutateAsync } = useResetConsumerGroupMutation();\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const history = useHistory();\n\n  const onCancel = useCallback(() => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    history.push(instanceTopicConsumerGroupsHref(instance.id, topic.name));\n  }, [history, instance.id, topic.name, instanceTopicConsumerGroupsHref]);\n\n  const getTopics = () => {\n    const topics = (consumerGroup.consumers || []).map(\n      (consumer) => consumer.topic\n    );\n    const distinctTopics = Array.from(new Set(topics));\n    return distinctTopics;\n  };\n\n  const onConfirmResetOffset = useCallback(\n    (\n      topicName: string,\n      offset: OffsetValue,\n      partitions: number[],\n      customOffsetValue: string\n    ) => {\n      void mutateAsync({\n        instanceId: instance.id,\n        adminUrl: instance.adminUrl!,\n        consumerGroupId: consumerGroup.groupId,\n        topic: topicName,\n        offset: offset,\n        partitions: partitions,\n        value: customOffsetValue,\n        onError: () => {\n          // TODO: alert\n        },\n        onSuccess: () => {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n          history.replace(\n            instanceTopicConsumerGroupsHref(instance.id, topic.name)\n          );\n        },\n      });\n    },\n    [\n      mutateAsync,\n      history,\n      instance?.id,\n      topic.name,\n      instanceTopicConsumerGroupsHref,\n      instance.adminUrl,\n      consumerGroup.groupId,\n    ]\n  );\n\n  return (\n    <ConsumerGroupResetOffset\n      isModalOpen={true}\n      state={consumerGroup.state}\n      groupId={consumerGroup.groupId}\n      topics={getTopics()}\n      consumers={consumerGroup.consumers}\n      onClickClose={onCancel}\n      onClickResetOffset={onConfirmResetOffset}\n    />\n  );\n};\n","import { useCallback } from \"react\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { ConsumerGroupDrawer } from \"ui\";\nimport type { DataPlaneTopicConsumerGroupNavigationsProps } from \"../routesConsts\";\nimport { useHistory } from \"react-router-dom\";\nimport { useTopicConsumerGroupGate } from \"../useTopicConsumerGroupGate\";\nimport { TopicConsumerGroupsRoute } from \"./TopicConsumerGroupsRoute\";\n\nexport const TopicConsumerGroupViewPartitionRoute: VoidFunctionComponent<\n  DataPlaneTopicConsumerGroupNavigationsProps\n> = ({\n  instanceTopicConsumerGroupsHref,\n  instancesHref,\n  viewTopicPartitionConsumerGroupHref,\n  instanceDetailsHref,\n  instanceTopicsHref,\n}) => {\n    const { instance, topic, consumerGroup } = useTopicConsumerGroupGate();\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const history = useHistory();\n\n    const onCancel = useCallback(() => {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n      history.push(instanceTopicConsumerGroupsHref(instance.id, topic.name));\n    }, [history, instance.id, topic.name, instanceTopicConsumerGroupsHref]);\n\n    const onDelete = useCallback(() => {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n      history.push(\n        `${viewTopicPartitionConsumerGroupHref(\n          instance.id,\n          topic.name,\n          consumerGroup.groupId\n        )}/delete`\n      );\n    }, [\n      history,\n      instance.id,\n      consumerGroup.groupId,\n      topic.name,\n      viewTopicPartitionConsumerGroupHref,\n    ]);\n\n    const onClickResetOffset = useCallback(() => {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n      history.push(\n        `${viewTopicPartitionConsumerGroupHref(\n          instance.id,\n          topic.name,\n          consumerGroup.groupId\n        )}/reset-offset`\n      );\n    }, [\n      history,\n      instance.id,\n      topic.name,\n      consumerGroup.groupId,\n      viewTopicPartitionConsumerGroupHref,\n    ]);\n\n    return (\n      <ConsumerGroupDrawer\n        consumerGroupByTopic={false}\n        state={consumerGroup.state}\n        activeMembers={consumerGroup.activeConsumers!}\n        partitionsWithLag={consumerGroup.laggingPartitions!}\n        consumers={consumerGroup.consumers}\n        groupId={consumerGroup.groupId}\n        onSelectDeleteConsumerGroup={onDelete}\n        onSelectResetOffsetConsumerGroup={onClickResetOffset}\n        isExpanded={true}\n        onClickClose={onCancel}\n      >\n        <TopicConsumerGroupsRoute\n          instancesHref={instancesHref}\n          instanceDetailsHref={instanceDetailsHref}\n          instanceTopicsHref={instanceTopicsHref}\n        />\n      </ConsumerGroupDrawer>\n    );\n  };\n","import type { DeleteModalProps } from \"@rhoas/app-services-ui-components\";\nimport {\n  DeleteModal,\n  Trans,\n  useTranslation,\n} from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\n\nexport type DeleteKafkaTopicProps = {\n  topicName: string;\n} & Omit<\n  DeleteModalProps,\n  \"title\" | \"variant\" | \"confirmationValue\" | \"children\"\n>;\n\nexport const DeleteKafkaTopic: VoidFunctionComponent<DeleteKafkaTopicProps> = ({\n  topicName,\n  ...props\n}) => {\n  const { t } = useTranslation(\"kafka\");\n\n  return (\n    <DeleteModal\n      {...props}\n      variant={\"destructive\"}\n      title={t(\"delete_topic_title\")}\n      confirmationValue={topicName}\n    >\n      <Trans\n        ns={\"kafka\"}\n        i18nKey={\"delete_topic_message\"}\n        components={[<strong />]}\n        values={{\n          topicName,\n        }}\n      />\n    </DeleteModal>\n  );\n};\n","import { useDeleteTopicMutation } from \"consoledot-api\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { DeleteKafkaTopic } from \"ui/src/components/DeleteKafkaTopic\";\nimport type { DataPlaneTopicNavigationProps } from \"../routesConsts\";\nimport { useTopicGate } from \"../useTopicGate\";\n\nexport const TopicDeleteRoute: VoidFunctionComponent<\n  DataPlaneTopicNavigationProps\n> = ({ topicHref, instanceTopicsHref }) => {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const history = useHistory();\n\n  const { instance, topic } = useTopicGate();\n  const { mutateAsync, isLoading: isDeleting } = useDeleteTopicMutation();\n\n  const onCancel = useCallback(() => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    history.push(topicHref(instance.id, topic.name));\n  }, [history, instance.id, topic.name, topicHref]);\n\n  const onDelete = useCallback(() => {\n    if (!instance.adminUrl) {\n      throw Error(\"Invalid instance adminUrl\");\n    }\n    void mutateAsync({\n      instanceId: instance.id,\n      adminUrl: instance.adminUrl,\n      name: topic.name,\n      onError: () => {\n        // TODO: alert\n      },\n      onSuccess: () => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n        history.replace(instanceTopicsHref(instance.id));\n      },\n    });\n  }, [\n    instance.adminUrl,\n    instance.id,\n    mutateAsync,\n    topic.name,\n    history,\n    instanceTopicsHref,\n  ]);\n\n  return (\n    <DeleteKafkaTopic\n      topicName={topic.name}\n      isModalOpen={true}\n      isDeleting={isDeleting}\n      appendTo={() =>\n        (document.getElementById(\"chrome-app-render-root\") as HTMLElement) ||\n        document.body\n      }\n      onDelete={onDelete}\n      onCancel={onCancel}\n    />\n  );\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { EditTopicProperties } from \"ui\";\nimport type { DataPlaneNavigationProps } from \"../routesConsts\";\nimport { useTopicGate } from \"../useTopicGate\";\nimport { DataPlaneTopicHeaderConnected } from \"./DataPlaneTopicHeaderConnected\";\n\nexport const TopicEditPropertiesRoute: VoidFunctionComponent<\n  DataPlaneNavigationProps\n> = ({ instanceDetailsHref, instanceTopicsHref, instancesHref }) => {\n  const { topic } = useTopicGate();\n\n  return (\n    <>\n      <DataPlaneTopicHeaderConnected\n        instancesHref={instancesHref}\n        instanceDetailsHref={instanceDetailsHref}\n        instanceTopicsHref={instanceTopicsHref}\n        activeSection={\"properties\"}\n      />\n      <EditTopicProperties\n        topic={topic}\n        onCancel={() => {\n          /* TODO */\n        }}\n      />\n    </>\n  );\n};\n","import { useCallback } from \"react\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { EditPermissions } from \"ui\";\nimport { addNotification } from \"@redhat-cloud-services/frontend-components-notifications\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  useAcls,\n  useConsumerGroups,\n  useDeletePermissionsMutation,\n  useTopics,\n  useUpdatePermissionsMutation,\n} from \"consoledot-api\";\nimport { useHistory, useRouteMatch } from \"react-router-dom\";\nimport type { AclBinding } from \"@rhoas/kafka-instance-sdk\";\nimport type {\n  DataPlanePermissionsNavigationProps,\n  DataPlanePermissionsRouteParams,\n} from \"../routesConsts\";\nimport { DataPlanePermissionsRoutePath } from \"../routesConsts\";\nimport { useDataPlaneGate } from \"../useDataPlaneGate\";\n\nexport const PermissionsEditRoute: VoidFunctionComponent<\n  DataPlanePermissionsNavigationProps\n> = ({ managePermissionsHref }) => {\n  const { instance } = useDataPlaneGate();\n  const match = useRouteMatch<DataPlanePermissionsRouteParams>(\n    DataPlanePermissionsRoutePath\n  );\n  if (!match) {\n    throw Error(\"EditPermissions used outside the expected route\");\n  }\n\n  const { data: acls } = useAcls({\n    id: instance.id,\n    adminUrl: instance.adminUrl,\n  });\n\n  const { data: topics } = useTopics({\n    id: instance.id,\n    adminUrl: instance.adminUrl,\n    plan: instance.plan,\n  });\n\n  const { data: consumerGroups } = useConsumerGroups({\n    id: instance.id,\n    adminUrl: instance.adminUrl,\n  });\n\n  const dispatch = useDispatch();\n\n  const consumerGroupsList = consumerGroups?.groups.map(\n    (consumer) => consumer.groupId\n  );\n  const topicsList = topics?.topics.map((topic) => topic.name);\n  const { mutateAsync } = useDeletePermissionsMutation();\n  const updatePermissions = useUpdatePermissionsMutation();\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const history = useHistory();\n\n  const onSaveAcls = useCallback(\n    (\n      aclPermission: AclBinding[] | undefined,\n      deletedPermissions: AclBinding[] | undefined\n    ) => {\n      if (aclPermission != undefined && aclPermission.length > 0) {\n        aclPermission.map(\n          (aclData) =>\n            void updatePermissions.mutateAsync({\n              instanceId: instance.id,\n              adminUrl: instance?.adminUrl || \"\",\n              acl: {\n                patternType: aclData.patternType,\n                permission: aclData.permission,\n                principal: aclData.principal,\n                operation: aclData.operation,\n                resourceName: aclData.resourceName,\n                resourceType: aclData.resourceType,\n              },\n\n              onSuccess: () => {\n                //eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n                history.push(managePermissionsHref(instance.id));\n              },\n              onError: (_, message) => {\n                dispatch(\n                  addNotification({\n                    variant: \"danger\",\n                    title: message,\n                    dismissable: true,\n                    id: \"save-error\",\n                  })\n                );\n              },\n            })\n        );\n      }\n\n      if (deletedPermissions != undefined && deletedPermissions.length > 0) {\n        deletedPermissions.map((aclToDelete) => {\n          void mutateAsync({\n            instanceId: instance.id,\n            adminUrl: instance.adminUrl || \"\",\n            acl: {\n              patternType: aclToDelete.patternType,\n              permissionType: aclToDelete.permission,\n              principal: aclToDelete.principal,\n              resourceName: aclToDelete.resourceName,\n              operation: aclToDelete.operation,\n              resourceType: aclToDelete.resourceType,\n            },\n            onError: (_, message) => {\n              dispatch(\n                addNotification({\n                  variant: \"danger\",\n                  title: message,\n                  dismissable: true,\n                  id: \"delete-error\",\n                })\n              );\n            },\n            onSuccess: () => {\n              //eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n              history.push(managePermissionsHref(instance.id));\n            },\n          });\n        });\n      }\n    },\n    [\n      dispatch,\n      history,\n      instance.adminUrl,\n      instance.id,\n      managePermissionsHref,\n      mutateAsync,\n      updatePermissions,\n    ]\n  );\n\n  const existingAcls: AclBinding[] | undefined = acls?.groups.map((acl) => {\n    return {\n      resourceName: acl.resource.resourceName,\n      patternType: acl.resource.patternType,\n      permission: acl.permission.permission,\n      operation: acl.permission.operation,\n      principal: acl.account,\n      resourceType: acl.resource.resourceType,\n    };\n  });\n\n  const aclsForSelectedAccount = existingAcls?.filter(\n    (value) =>\n      value.principal == `User:${match.params.selectedAccount}` ||\n      value.principal == \"User:*\"\n  );\n\n  const onClose = useCallback(() => {\n    //eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    history.push(managePermissionsHref(instance.id));\n  }, [history, instance.id, managePermissionsHref]);\n\n  return (\n    <EditPermissions\n      onCancel={onClose}\n      kafkaName={instance.name}\n      onSave={onSaveAcls}\n      topicsList={topicsList || []}\n      consumerGroupsList={consumerGroupsList || []}\n      selectedAccount={\n        match.params.selectedAccount == \"all-accounts\"\n          ? \"All accounts\"\n          : match.params.selectedAccount\n      }\n      acls={aclsForSelectedAccount || []}\n    />\n  );\n};\n","import { useCallback, useEffect, useState } from \"react\";\nimport type { VoidFunctionComponent } from \"react\";\nimport type { Account } from \"ui\";\nimport { PrincipalType } from \"ui\";\nimport { useHistory } from \"react-router-dom\";\nimport type { DataPlanePermissionsNavigationProps } from \"../routesConsts\";\nimport { SelectAccount } from \"ui\";\nimport { useChrome } from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport { useServiceAccounts, useUserAccounts } from \"consoledot-api\";\nimport { useDataPlaneGate } from \"../useDataPlaneGate\";\n\nexport const PermissionsSelectAccountRoute: VoidFunctionComponent<\n  DataPlanePermissionsNavigationProps\n> = ({ managePermissionsHref, editPermissionsHref }) => {\n  const [loggedInUser, setCurrentlyLoggedInUser] = useState<\n    string | undefined\n  >();\n  const { auth } = useChrome();\n  const { instance } = useDataPlaneGate();\n  const { data: accounts } = useUserAccounts({\n    id: instance.id,\n    adminUrl: instance.adminUrl,\n  });\n\n  const { data: serviceAccounts } = useServiceAccounts({\n    id: instance.id,\n    adminUrl: instance.adminUrl,\n  });\n\n  useEffect(() => {\n    const getUsername = async () => {\n      const username = (await auth.getUser())?.identity.user?.username;\n      setCurrentlyLoggedInUser(username);\n    };\n    void getUsername();\n  }, [auth]);\n\n  const userAccounts: Account[] | undefined = accounts?.accounts.map(\n    (userAccount) => {\n      return {\n        displayName: userAccount.displayName,\n        id: userAccount.username,\n        principalType: PrincipalType.UserAccount,\n      };\n    }\n  );\n\n  const serviceAccountList: Account[] | undefined =\n    serviceAccounts?.serviceAccounts.map((userAccount) => {\n      return {\n        displayName: userAccount.displayName,\n        id: userAccount.id,\n        principalType: PrincipalType.ServiceAccount,\n      };\n    });\n\n  const allAccounts =\n    userAccounts != undefined && serviceAccountList != undefined\n      ? [...serviceAccountList, ...userAccounts]\n      : undefined;\n  const filteredAccounts = allAccounts?.filter(\n    (value) => value.id !== instance.owner && value.id !== loggedInUser\n  );\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const history = useHistory();\n\n  const onNext = useCallback(\n    (selectedAccount: string | undefined) => {\n      //eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n      history.push(\n        editPermissionsHref(\n          instance.id,\n          selectedAccount === \"All accounts\"\n            ? \"all-accounts\"\n            : selectedAccount || \"\"\n        )\n      );\n    },\n    [history, instance.id, editPermissionsHref]\n  );\n\n  const onClose = useCallback(() => {\n    //eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    history.push(managePermissionsHref(instance.id));\n  }, [history, instance.id, managePermissionsHref]);\n\n  return (\n    <SelectAccount\n      accounts={filteredAccounts}\n      kafkaName={instance.name}\n      onNext={onNext}\n      onClose={onClose}\n    />\n  );\n};\n","import { InvalidObject } from \"@redhat-cloud-services/frontend-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport { ControlPlaneRouteRoot } from \"../control-plane/routesConsts\";\nimport { RedirectOnGateError } from \"../RedirectOnGateError\";\nimport {\n  PermissionsRoute,\n  ConsumerGroupsRoute,\n  DashboardRoute,\n  SettingsRoute,\n  TopicConsumerGroupsRoute,\n  TopicMessagesGroupsRoute,\n  TopicPropertiesRoute,\n  TopicSchemasRoute,\n  TopicsRoute,\n  ConsumerGroupDeleteRoute,\n  ConsumerGroupResetOffsetRoute,\n  ConsumerGroupViewPartitionRoute,\n  TopicConsumerGroupDeleteRoute,\n  TopicConsumerGroupResetOffsetRoute,\n  TopicConsumerGroupViewPartitionRoute,\n  TopicDeleteRoute,\n  TopicEditPropertiesRoute,\n  PermissionsEditRoute,\n  PermissionsSelectAccountRoute,\n} from \"./routes\";\n\nimport { DataPlaneRoutePath, DataPlaneTopicRoutePath } from \"./routesConsts\";\n\nconst instanceDetailsHref = (id: string) =>\n  `${ControlPlaneRouteRoot}/${id}/details`;\n\nconst instanceTopicsHref = (id: string) =>\n  `${ControlPlaneRouteRoot}/${id}/details/topics`;\n\nconst topicHref = (id: string, topic: string) =>\n  `${instanceDetailsHref(id)}/topics/${topic}/properties`;\n\nconst updateTopicHref = (id: string, topic: string) =>\n  `${topicHref(id, topic)}/edit`;\n\nconst deleteTopicHref = (id: string, topic: string) =>\n  `${topicHref(id, topic)}/delete`;\n\nexport const instanceConsumerGroupsHref = (id: string) =>\n  `${instanceDetailsHref(id)}/consumer-groups`;\n\nconst viewPartitionConsumerGroupHref = (id: string, consumerGroupId: string) =>\n  `${instanceDetailsHref(\n    id\n  )}/consumer-groups/${consumerGroupId}/view-partition`;\n\nconst instanceTopicConsumerGroupHref = (id: string, topic: string) =>\n  `${instanceDetailsHref(id)}/topics/${topic}/consumer-groups`;\n\nconst viewTopicPartitionConsumerGroupHref = (\n  id: string,\n  topic: string,\n  consumerGroupId: string\n) =>\n  `${instanceDetailsHref(\n    id\n  )}/topics/${topic}/consumer-groups/${consumerGroupId}/view-partition`;\nexport const managePermissionsHref = (id: string) =>\n  `${instanceDetailsHref(id)}/acls/select-account`;\n\nconst editPermissionsHref = (id: string, selectedAccount: string) =>\n  `${instanceDetailsHref(\n    id\n  )}/acls/select-account/${selectedAccount}/edit-permissions`;\n\nexport const permissionsModalHref = (id: string) =>\n  `${instanceDetailsHref(id)}/acls`;\n\nexport const DataPlaneRoutes: VoidFunctionComponent = () => {\n  return (\n    <Route path={DataPlaneRoutePath}>\n      <RedirectOnGateError redirectUrl={\"/kafkas\"}>\n        <Switch>\n          <Route path={`${DataPlaneRoutePath}/dashboard`} exact>\n            <DashboardRoute instancesHref={\"/kafkas\"} />\n          </Route>\n\n          <Route path={`${DataPlaneRoutePath}/topics`} exact>\n            <TopicsRoute instancesHref={\"/kafkas\"} />\n          </Route>\n\n          <Route path={`${DataPlaneRoutePath}/consumer-groups`} exact>\n            <ConsumerGroupsRoute instancesHref={\"/kafkas\"} />\n          </Route>\n\n          <Route path={`${DataPlaneRoutePath}/acls`}>\n            <Route path={`${DataPlaneRoutePath}/acls/select-account`}>\n              <PermissionsSelectAccountRoute\n                editPermissionsHref={editPermissionsHref}\n                instancesHref={\"/kafkas\"}\n                managePermissionsHref={permissionsModalHref}\n              />\n            </Route>\n            <Route\n              path={`${DataPlaneRoutePath}/acls/select-account/:selectedAccount/edit-permissions`}\n            >\n              <PermissionsEditRoute\n                editPermissionsHref={editPermissionsHref}\n                instancesHref={\"/kafkas\"}\n                managePermissionsHref={permissionsModalHref}\n              />\n            </Route>\n            <PermissionsRoute\n              instancesHref={\"/kafkas\"}\n              managePermissionsHref={managePermissionsHref}\n              editPermissionsHref={editPermissionsHref}\n            />\n          </Route>\n\n          <Route path={`${DataPlaneRoutePath}/settings`} exact>\n            <SettingsRoute instancesHref={\"/kafkas\"} />\n          </Route>\n          <Route\n            path={`${DataPlaneRoutePath}/topics`}\n            render={({ match }) => (\n              <RedirectOnGateError\n                redirectUrl={instanceTopicsHref(match.params.id)}\n              >\n                <Switch>\n                  <Route\n                    path={`${DataPlaneRoutePath}/topics/:topicName/consumer-groups`}\n                  >\n                    <RedirectOnGateError\n                      redirectUrl={instanceTopicsHref(match.params.id)}\n                    >\n                      <Switch>\n                        <Route\n                          path={`${DataPlaneTopicRoutePath}/consumer-groups/:consumerGroupId/view-partition`}\n                        >\n                          <Route\n                            path={`${DataPlaneTopicRoutePath}/consumer-groups/:consumerGroupId/view-partition/delete`}\n                          >\n                            <TopicConsumerGroupDeleteRoute\n                              instancesHref={\"/kafkas\"}\n                              instanceTopicConsumerGroupsHref={\n                                instanceTopicConsumerGroupHref\n                              }\n                              viewTopicPartitionConsumerGroupHref={\n                                viewTopicPartitionConsumerGroupHref\n                              }\n                              instanceDetailsHref={instanceDetailsHref}\n                              instanceTopicsHref={instanceTopicsHref}\n                            />\n                          </Route>\n                          <Route\n                            path={`${DataPlaneTopicRoutePath}/consumer-groups/:consumerGroupId/view-partition/reset-offset`}\n                          >\n                            <TopicConsumerGroupResetOffsetRoute\n                              instancesHref={\"/kafkas\"}\n                              instanceTopicConsumerGroupsHref={\n                                instanceTopicConsumerGroupHref\n                              }\n                              viewTopicPartitionConsumerGroupHref={\n                                viewTopicPartitionConsumerGroupHref\n                              }\n                              instanceDetailsHref={instanceDetailsHref}\n                              instanceTopicsHref={instanceTopicsHref}\n                            />\n                          </Route>\n                          <TopicConsumerGroupViewPartitionRoute\n                            instancesHref={\"/kafkas\"}\n                            instanceTopicConsumerGroupsHref={\n                              instanceTopicConsumerGroupHref\n                            }\n                            viewTopicPartitionConsumerGroupHref={\n                              viewTopicPartitionConsumerGroupHref\n                            }\n                            instanceDetailsHref={instanceDetailsHref}\n                            instanceTopicsHref={instanceTopicsHref}\n                          />\n                        </Route>\n                        <Route\n                          path={`${DataPlaneTopicRoutePath}/consumer-groups/:consumerGroupId/reset-offset`}\n                        >\n                          <TopicConsumerGroupResetOffsetRoute\n                            instancesHref={\"/kafkas\"}\n                            instanceTopicConsumerGroupsHref={\n                              instanceTopicConsumerGroupHref\n                            }\n                            viewTopicPartitionConsumerGroupHref={\n                              viewTopicPartitionConsumerGroupHref\n                            }\n                            instanceDetailsHref={instanceDetailsHref}\n                            instanceTopicsHref={instanceTopicsHref}\n                          />\n                        </Route>\n                        <Route\n                          path={`${DataPlaneTopicRoutePath}/consumer-groups/:consumerGroupId/delete`}\n                        >\n                          <TopicConsumerGroupDeleteRoute\n                            instancesHref={\"/kafkas\"}\n                            instanceTopicConsumerGroupsHref={\n                              instanceTopicConsumerGroupHref\n                            }\n                            viewTopicPartitionConsumerGroupHref={\n                              viewTopicPartitionConsumerGroupHref\n                            }\n                            instanceDetailsHref={instanceDetailsHref}\n                            instanceTopicsHref={instanceTopicsHref}\n                          />\n                        </Route>\n                      </Switch>\n                    </RedirectOnGateError>\n                    <TopicConsumerGroupsRoute\n                      instancesHref={\"/kafkas\"}\n                      instanceDetailsHref={instanceDetailsHref}\n                      instanceTopicsHref={instanceTopicsHref}\n                    />\n                  </Route>\n                  <Route\n                    path={`${DataPlaneRoutePath}/topics/:topicName/messages`}\n                    exact\n                  >\n                    <TopicMessagesGroupsRoute\n                      instancesHref={\"/kafkas\"}\n                      instanceDetailsHref={instanceDetailsHref}\n                      instanceTopicsHref={instanceTopicsHref}\n                    />\n                  </Route>\n\n                  <Route\n                    path={`${DataPlaneRoutePath}/topics/:topicName/properties/edit`}\n                    exact\n                  >\n                    <TopicEditPropertiesRoute\n                      instancesHref={\"/kafkas\"}\n                      instanceDetailsHref={instanceDetailsHref}\n                      instanceTopicsHref={instanceTopicsHref}\n                    />\n                  </Route>\n                  <Route\n                    path={`${DataPlaneRoutePath}/topics/:topicName/properties`}\n                  >\n                    <Route\n                      path={`${DataPlaneRoutePath}/topics/:topicName/properties/delete`}\n                    >\n                      <TopicDeleteRoute\n                        instancesHref={\"/kafkas\"}\n                        instanceDetailsHref={instanceDetailsHref}\n                        instanceTopicsHref={instanceTopicsHref}\n                        topicHref={topicHref}\n                        updateTopicHref={updateTopicHref}\n                        deleteTopicHref={deleteTopicHref}\n                      />\n                    </Route>\n                    <TopicPropertiesRoute\n                      instancesHref={\"/kafkas\"}\n                      instanceDetailsHref={instanceDetailsHref}\n                      instanceTopicsHref={instanceTopicsHref}\n                      topicHref={topicHref}\n                      updateTopicHref={updateTopicHref}\n                      deleteTopicHref={deleteTopicHref}\n                    />\n                  </Route>\n                  <Route\n                    path={`${DataPlaneRoutePath}/topics/:topicName/schemas`}\n                    exact\n                  >\n                    <TopicSchemasRoute\n                      instancesHref={\"/kafkas\"}\n                      instanceDetailsHref={instanceDetailsHref}\n                      instanceTopicsHref={instanceTopicsHref}\n                    />\n                  </Route>\n                  <Redirect\n                    from={`${DataPlaneRoutePath}/topics/:topicName/`}\n                    to={`${DataPlaneRoutePath}/topics/:topicName/consumer-groups`}\n                    exact\n                  />\n                </Switch>\n              </RedirectOnGateError>\n            )}\n          />\n          <Route\n            path={`${DataPlaneRoutePath}/consumer-groups`}\n            render={({ match }) => (\n              <RedirectOnGateError\n                redirectUrl={instanceConsumerGroupsHref(match.params.id)}\n              >\n                <Switch>\n                  <Route\n                    path={`${DataPlaneRoutePath}/consumer-groups/:consumerGroupId/view-partition`}\n                  >\n                    <Route\n                      path={`${DataPlaneRoutePath}/consumer-groups/:consumerGroupId/view-partition/delete`}\n                    >\n                      <ConsumerGroupDeleteRoute\n                        instancesHref={\"/kafkas\"}\n                        instanceDetailsHref={instanceDetailsHref}\n                        instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n                        viewPartitionConsumerGroupHref={\n                          viewPartitionConsumerGroupHref\n                        }\n                      />\n                    </Route>\n                    <Route\n                      path={`${DataPlaneRoutePath}/consumer-groups/:consumerGroupId/view-partition/reset-offset`}\n                    >\n                      <ConsumerGroupResetOffsetRoute\n                        instancesHref={\"/kafkas\"}\n                        instanceDetailsHref={instanceDetailsHref}\n                        instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n                        viewPartitionConsumerGroupHref={\n                          viewPartitionConsumerGroupHref\n                        }\n                      />\n                    </Route>\n                    <ConsumerGroupViewPartitionRoute\n                      instancesHref={\"/kafkas\"}\n                      instanceDetailsHref={instanceDetailsHref}\n                      instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n                      viewPartitionConsumerGroupHref={\n                        viewPartitionConsumerGroupHref\n                      }\n                    />\n                  </Route>\n                  <Route\n                    path={`${DataPlaneRoutePath}/consumer-groups/:consumerGroupId/reset-offset`}\n                  >\n                    <ConsumerGroupResetOffsetRoute\n                      instancesHref={\"/kafkas\"}\n                      instanceDetailsHref={instanceDetailsHref}\n                      instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n                      viewPartitionConsumerGroupHref={\n                        viewPartitionConsumerGroupHref\n                      }\n                    />\n                  </Route>\n                  <Route\n                    path={`${DataPlaneRoutePath}/consumer-groups/:consumerGroupId/delete`}\n                  >\n                    <ConsumerGroupDeleteRoute\n                      instancesHref={\"/kafkas\"}\n                      instanceDetailsHref={instanceDetailsHref}\n                      instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n                      viewPartitionConsumerGroupHref={\n                        viewPartitionConsumerGroupHref\n                      }\n                    />\n                  </Route>\n                </Switch>\n              </RedirectOnGateError>\n            )}\n          />\n          <Redirect\n            from={`${DataPlaneRoutePath}`}\n            to={`${DataPlaneRoutePath}/dashboard`}\n            exact\n          />\n\n          <Route>\n            <InvalidObject />\n          </Route>\n        </Switch>\n      </RedirectOnGateError>\n    </Route>\n  );\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { KafkaPageV3 } from \"ui\";\n\nexport const OverviewRoute: VoidFunctionComponent = () => {\n  return <KafkaPageV3 />;\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport { ControlPlaneRoutes, DrawerProvider } from \"./control-plane\";\nimport { DataPlaneRoutes } from \"./data-plane\";\nimport { OverviewRoute } from \"./overview\";\n\nexport const Routes: VoidFunctionComponent = () => {\n  return (\n    <Switch>\n      <Route path={\"/overview\"} exact>\n        <OverviewRoute />\n      </Route>\n      <Redirect from={\"/\"} to={\"/kafkas\"} exact />\n      <Route path={\"/kafkas\"}>\n        <DrawerProvider>\n          {/* don't move these routes around! the order is important */}\n          <ControlPlaneRoutes />\n          <DataPlaneRoutes />\n        </DrawerProvider>\n      </Route>\n      <Route path={\"\"} exact></Route>\n    </Switch>\n  );\n};\n","import NotificationsPortal from \"@redhat-cloud-services/frontend-components-notifications/NotificationPortal\";\nimport { notificationsReducer } from \"@redhat-cloud-services/frontend-components-notifications/redux\";\nimport { getRegistry } from \"@redhat-cloud-services/frontend-components-utilities/Registry\";\nimport { useChrome } from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { memo, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport type { Reducer } from \"redux\";\n\nimport \"./App.scss\";\n\nimport { Routes } from \"./routes/Routes\";\n\nconst App = memo(() => {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const history = useHistory();\n  const { updateDocumentTitle, on } = useChrome();\n\n  const { t } = useTranslation();\n  const title = t(\"kafka:rhosakTitle\");\n\n  useEffect(() => {\n    const registry = getRegistry();\n    registry.register({ notifications: notificationsReducer as Reducer });\n\n    updateDocumentTitle(title);\n\n    const unregister = on(\"APP_NAVIGATION\", (event) => {\n      console.dir(event);\n      if (event.navId) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n        history.push(\"/\" + event.navId === \"/\" ? \"\" : event.navId);\n      }\n    });\n    return () => {\n      if (unregister) {\n        unregister();\n      }\n    };\n  }, [history, on, title, updateDocumentTitle]);\n\n  return (\n    <>\n      <NotificationsPortal />\n      <Routes />\n    </>\n  );\n});\n\nexport default App;\n","/* eslint-disable */\n// @ts-nocheck\nimport { useChrome } from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport { AssetsContext } from \"@rhoas/app-services-ui-shared\";\nimport type { ScalprumComponentProps } from \"@scalprum/react-core\";\nimport { ScalprumComponent } from \"@scalprum/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useState } from \"react\";\nimport { ErrorBoundary } from \"react-error-boundary\";\n\nexport const appIdentifier = \"applicationServices\";\n\nconst basePath = \"/apps/rhoas-guides-build\";\nconst getPath = () => {\n  return basePath;\n};\n\nexport const QuickstartLoader: VoidFunctionComponent = () => {\n  const [loaded, setLoaded] = useState(false);\n  const chrome = useChrome();\n  const { quickStarts } = chrome;\n\n  const onLoad = (qs: unknown) => {\n    if (quickStarts) {\n      setLoaded(true); // unload federated module\n      quickStarts.set(appIdentifier, qs);\n    }\n  };\n\n  const processor = (([_, m]: [string, { entry: string[] }]) =>\n    m.entry.map(\n      (e) => `${basePath}${e}`\n    )) as unknown as ScalprumComponentProps[\"processor\"];\n\n  return (\n    <ErrorBoundary fallbackRender={() => null}>\n      <AssetsContext.Provider value={{ getPath }}>\n        {!loaded ? (\n          <ScalprumComponent\n            appName=\"guides\"\n            scope=\"guides\"\n            module=\"./QuickStartLoader\"\n            ErrorComponent={<div>opsie</div>}\n            processor={processor}\n            showDrafts={false}\n            onLoad={onLoad}\n          />\n        ) : null}\n      </AssetsContext.Provider>\n    </ErrorBoundary>\n  );\n};\n","import notificationsMiddleware from \"@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware\";\nimport type ReducerRegistry from \"@redhat-cloud-services/frontend-components-utilities/ReducerRegistry\";\nimport { getRegistry } from \"@redhat-cloud-services/frontend-components-utilities/Registry\";\nimport type { Middleware } from \"redux\";\nimport promiseMiddleware from \"redux-promise-middleware\";\n\n// eslint-disable-next-line  @typescript-eslint/no-explicit-any\nexport let registry: ReducerRegistry<any>;\n\nexport function init(...middleware: Middleware[]) {\n  registry = getRegistry({}, [\n    promiseMiddleware,\n    notificationsMiddleware({ errorDescriptionKey: [\"detail\", \"stack\"] }),\n    ...middleware,\n  ]);\n  return registry;\n}\n","import type {\n  ConsumerGroup as ConsumerGroupApi,\n  ConsumerGroupState,\n} from \"@rhoas/kafka-instance-sdk\";\nimport type {\n  Consumer,\n  ConsumerGroup,\n} from \"ui-models/src/models/consumer-group\";\n\nexport function consumerGroupTransformer(t: ConsumerGroupApi): ConsumerGroup {\n  const state = stateMapping[t.state as ConsumerGroupState];\n  return {\n    groupId: t.groupId,\n    state: state,\n    consumers: t.consumers.map<Consumer>((consumer) => ({\n      groupId: consumer.groupId,\n      topic: consumer.topic,\n      lag: consumer.lag,\n      memberId: consumer.memberId,\n      partition: consumer.partition,\n      offset: consumer.offset,\n      logEndOffset: consumer.logEndOffset,\n    })),\n    activeConsumers: t.metrics?.activeConsumers,\n    laggingPartitions: t.metrics?.laggingPartitions,\n    unassignedPartitions: t.metrics?.unassignedPartitions,\n  };\n}\n\nexport const stateMapping: {\n  [state in ConsumerGroupState]: ConsumerGroup[\"state\"];\n} = {\n  DEAD: \"Dead\",\n  EMPTY: \"Empty\",\n  STABLE: \"Stable\",\n  UNKNOWN: \"Unknown\",\n  COMPLETING_REBALANCE: \"CompletingRebalance\",\n  PREPARING_REBALANCE: \"PreparingRebalance\",\n};\n","import type { DefaultApi, InstantQuery } from \"@rhoas/kafka-management-sdk\";\nimport type { NoUndefinedField } from \"../types\";\n\nexport async function fetchKafkaKpis(\n  getMetricsByInstantQuery: DefaultApi[\"getMetricsByInstantQuery\"],\n  id: string\n) {\n  let topics = 0,\n    topicPartitions = 0,\n    consumerGroups = 0;\n\n  const response = await getMetricsByInstantQuery(id, [\n    \"kafka_topic:kafka_topic_partitions:sum\", // (Number of topic partitions)\n    \"kafka_topic:kafka_topic_partitions:count\", // (Number of topics)\n    \"consumergroup:kafka_consumergroup_members:count\", // (number of consumer groups - note that this metric will appear after a consumer group is created. There should be handled by the UI in a way that the metric isn't visible if no consumer groups are created)\n  ]);\n\n  const safeMetrics: NoUndefinedField<InstantQuery[]> = (response.data.items ||\n    []) as NoUndefinedField<InstantQuery[]>;\n\n  safeMetrics.forEach(({ metric, value }) => {\n    const { __name__: name } = metric;\n\n    switch (name) {\n      case \"kafka_topic:kafka_topic_partitions:sum\":\n        topicPartitions = value;\n        break;\n      case \"kafka_topic:kafka_topic_partitions:count\":\n        topics = value;\n        break;\n      case \"consumergroup:kafka_consumergroup_members:count\":\n        consumerGroups = value;\n        break;\n    }\n  });\n  return {\n    consumerGroups,\n    topicPartitions,\n    topics,\n  };\n}\n","import type { DefaultApi } from \"@rhoas/kafka-management-sdk\";\nimport type { GetKafkaInstanceMetricsResponse, TimeSeriesMetrics } from \"ui\";\nimport type { SafeRangeQuery } from \"../types\";\n\nexport type FetchKafkaMetricsProps = {\n  getMetricsByRangeQuery: DefaultApi[\"getMetricsByRangeQuery\"];\n  id: string;\n  duration: number;\n  interval: number;\n};\n\nexport async function fetchKafkaMetrics({\n  getMetricsByRangeQuery,\n  id,\n  duration,\n  interval,\n}: FetchKafkaMetricsProps): Promise<GetKafkaInstanceMetricsResponse> {\n  const response = await getMetricsByRangeQuery(id, duration, interval, [\n    \"kubelet_volume_stats_used_bytes\",\n    \"kafka_namespace:kafka_server_socket_server_metrics_connection_creation_rate:sum\",\n    \"kafka_namespace:kafka_server_socket_server_metrics_connection_count:sum\",\n  ]);\n\n  // Remove all results with no data. Not sure this can really  happen but since\n  // the types allow for undefined we need to do a bit of defensive programming.\n  const safeMetrics: SafeRangeQuery[] = (response.data.items || []).filter(\n    (m) =>\n      // defensive programming\n      !(\n        m.values &&\n        m.metric &&\n        m.metric.topic &&\n        m.metric.name &&\n        m.metric.persistentvolumeclaim &&\n        m.metric.persistentvolumeclaim.includes(\"zookeeper\")\n      )\n  ) as SafeRangeQuery[];\n\n  const usedDiskSpaceMetrics: TimeSeriesMetrics = {};\n  const connectionAttemptRateMetrics: TimeSeriesMetrics = {};\n  const clientConnectionsMetrics: TimeSeriesMetrics = {};\n\n  const connectionRateLimit = 0,\n    connectionsLimit = 0,\n    diskSpaceLimit = 0;\n\n  safeMetrics.forEach((m) => {\n    const { __name__: name } = m.metric;\n\n    function addAggregatedValuesTo(metric: TimeSeriesMetrics) {\n      m.values.forEach(\n        ({ value, timestamp }) =>\n          (metric[timestamp] = value + (metric[timestamp] || 0))\n      );\n    }\n\n    switch (name) {\n      case \"kubelet_volume_stats_used_bytes\":\n        addAggregatedValuesTo(usedDiskSpaceMetrics);\n        break;\n      case \"kafka_namespace:kafka_server_socket_server_metrics_connection_creation_rate:sum\":\n        addAggregatedValuesTo(connectionAttemptRateMetrics);\n        break;\n      case \"kafka_namespace:kafka_server_socket_server_metrics_connection_count:sum\":\n        addAggregatedValuesTo(clientConnectionsMetrics);\n        break;\n    }\n  });\n\n  return {\n    usedDiskSpaceMetrics,\n    clientConnectionsMetrics,\n    connectionAttemptRateMetrics,\n    diskSpaceLimit,\n    connectionRateLimit,\n    connectionsLimit,\n  };\n}\n","export function valuesToQuery(\n  field: string,\n  values: string[],\n  comparison: \"%\" | \"=\"\n): string | undefined {\n  return values\n    .map((v) =>\n      comparison === \"%\"\n        ? `${field} like %${v.trim()}%`\n        : `${field} = ${v.trim()}`\n    )\n    .join(\" or \");\n}\n","import type { DefaultApi, KafkaRequest } from \"@rhoas/kafka-management-sdk\";\nimport type { SimplifiedStatus } from \"ui-models/src/models/kafka\";\nimport { SimplifiedStatuses } from \"ui-models/src/models/kafka\";\nimport type { KafkaInstanceEnhanced } from \"../transformers/kafkaRequestToKafkaInstanceEnhanched\";\nimport type { KafkaInstancesSortableColumn } from \"../types\";\nimport { valuesToQuery } from \"./valuesToQuery\";\n\nconst uiColumnMapping: {\n  [key in KafkaInstancesSortableColumn]: keyof KafkaRequest;\n} = {\n  name: \"name\",\n  owner: \"owner\",\n  provider: \"cloud_provider\",\n  region: \"region\",\n  createdAt: \"created_at\",\n};\nexport type FetchKafkasParams = {\n  getKafkas: DefaultApi[\"getKafkas\"];\n  dataMapper: (data: KafkaRequest) => Promise<KafkaInstanceEnhanced>;\n  page: number;\n  perPage: number;\n  name: string[];\n  owner: string[];\n  status: SimplifiedStatus[];\n  sort: KafkaInstancesSortableColumn;\n  direction: \"asc\" | \"desc\";\n};\n\nexport async function fetchKafkas(params: FetchKafkasParams): Promise<{\n  instances: KafkaInstanceEnhanced[];\n  count: number;\n}> {\n  const {\n    name,\n    status,\n    owner,\n    sort,\n    direction,\n    page,\n    perPage,\n    dataMapper,\n    getKafkas,\n  } = params;\n  const search = filtersToSearch(name, owner, status);\n\n  const res = await getKafkas(\n    page.toString(10),\n    perPage.toString(10),\n    sort ? `${uiColumnMapping[sort]} ${direction}` : undefined,\n    search\n  );\n  const rawInstances = res.data.items;\n  const count = res.data.total;\n  const instances = await Promise.all(rawInstances.map(dataMapper));\n  return {\n    instances,\n    count,\n  };\n}\n\nexport function filtersToSearch(\n  name: string[],\n  owner: string[],\n  status: SimplifiedStatus[]\n): string {\n  const querystring = [\n    valuesToQuery(\"name\", name, \"%\"),\n    valuesToQuery(\"owner\", owner, \"%\"),\n    valuesToQuery(\n      \"status\",\n      status.flatMap((s) => SimplifiedStatuses[s]),\n      \"=\"\n    ),\n  ]\n    .filter(Boolean)\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    .map((q) => `(${q!})`)\n    .join(\" and \");\n  return querystring;\n}\n","import type {\n  DefaultApi,\n  SupportedKafkaSize,\n} from \"@rhoas/kafka-management-sdk\";\nimport type { Plan, Size } from \"ui-models/src/models/kafka\";\nimport type { CloudProviderInfoWithRegionsCapacity } from \"./fetchProvidersWithRegions\";\n\nexport type SizeWithLimits = Size & { trialDurationHours: number };\n\nexport async function fetchProviderRegionSizes(\n  api: DefaultApi[\"getInstanceTypesByCloudProviderAndRegion\"],\n  providerInfo: CloudProviderInfoWithRegionsCapacity,\n  region: string,\n  instanceType: Plan\n) {\n  const regions = providerInfo.regions;\n  const regionInfo = regions.find((r) => r.id === region);\n  const availableSizes =\n    regionInfo?.capacity.flatMap((c) =>\n      c.available_sizes.map((s) => `${c.instance_type}.${s}`)\n    ) || [];\n  const sizes = await api(providerInfo.id, region);\n  if (!sizes?.data?.instance_types) {\n    throw new Error(`No instance_types from backend`);\n  }\n\n  const standardSizes =\n    sizes?.data?.instance_types.find((i) => i.id === instanceType)?.sizes || [];\n\n  return standardSizes.map(\n    apiSizeToComponentSize.bind(\n      undefined,\n      (id) => !availableSizes.includes(`${instanceType}.${id}`)\n    )\n  );\n}\n\n//\n// export async function fetchProviderRegionSizesForPlanStandard (\n//   api: DefaultApi['getInstanceTypesByCloudProviderAndRegion'], providerInfo: CloudProviderInfoWithRegionsCapacity, region: string\n// )  {\n//   return fetchProviderRegionSizes(api, providerInfo, region, \"standard\");\n// };\n//\n// export const fetchProviderRegionSizesForPlanDeveloper = (\n//   api: DefaultApi['getInstanceTypesByCloudProviderAndRegion'], providerInfo: CloudProviderInfoWithRegionsCapacity, region: string\n//\n// ) => {\n//   const { data: standardSizes, isError } = await fetchProviderRegionSizes(\n//     provider,\n//     region,\n//     \"standard\"\n//   );\n//   const { data: developerSizes } = fetchProviderRegionSizes(\n//     provider,\n//     region,\n//     \"developer\"\n//   );\n//   return useQuery({\n//     queryKey: [],\n//     queryFn: () => {\n//       return {\n//         standard:\n//           standardSizes ||\n//           ([\n//             { id: \"1\", displayName: \"1\" },\n//             { id: \"2\", displayName: \"2\" },\n//           ] as StandardSizes),\n//         trial: developerSizes![0],\n//       };\n//     },\n//     enabled: (!!standardSizes || isError) && !!developerSizes,\n//   });\n// };\n\nfunction apiSizeToComponentSize(\n  isDisabled: (id: string) => boolean,\n  apiSize: SupportedKafkaSize\n): SizeWithLimits {\n  const s = apiSize as Required<SupportedKafkaSize>;\n  return {\n    id: s.id,\n    displayName: s.display_name,\n    quota: s.quota_consumed,\n    ingress: (s.ingress_throughput_per_sec.bytes || 0) / 1048576,\n    egress: (s.egress_throughput_per_sec.bytes || 0) / 1048576,\n    storage: Math.round((s.max_data_retention_size.bytes || 0) / 1073741824),\n    connections: s.total_max_connections,\n    connectionRate: s.max_connection_attempts_per_sec,\n    maxPartitions: s.max_partitions,\n    messageSize: (s.max_message_size.bytes || 0) / 1048576,\n    status: s.maturity_status === \"stable\" ? \"stable\" : \"preview\",\n    trialDurationHours: s.lifespan_seconds ? s.lifespan_seconds / 60 / 60 : 0,\n    isDisabled: isDisabled(s.id),\n  };\n}\n","import type { DefaultApi } from \"@rhoas/kafka-management-sdk\";\nimport type { CloudProviderInfo } from \"ui\";\nimport type { CloudProvider, Plan } from \"ui-models/src/models/kafka\";\n\nexport type CloudProviderInfoWithRegionsCapacity = Omit<\n  CloudProviderInfo,\n  \"regions\"\n> & {\n  regions: Awaited<ReturnType<typeof fetchProviderRegions>>;\n};\n\nexport async function fetchProvidersWithRegions(\n  getCloudProviders: DefaultApi[\"getCloudProviders\"],\n  getCloudProviderRegions: DefaultApi[\"getCloudProviderRegions\"],\n  plan: Plan\n) {\n  const res = await getCloudProviders();\n  const allProviders = res?.data?.items || [];\n\n  const providers = (\n    await Promise.all(\n      allProviders\n        .filter((p) => p.enabled)\n        .map(async (provider) => {\n          const regions = await fetchProviderRegions(\n            getCloudProviderRegions,\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            provider.id!,\n            plan\n          );\n          const providerInfo: CloudProviderInfoWithRegionsCapacity = {\n            id: provider.id as CloudProvider,\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            displayName: provider.display_name!,\n            regions,\n          };\n          return regions.length > 0 ? providerInfo : null;\n        })\n    )\n  ).filter((p) => Boolean(p)) as CloudProviderInfoWithRegionsCapacity[];\n  if (providers.length === 0) {\n    throw new Error(\"No cloud providers with capacity found\");\n  }\n  const firstProvider = providers[0];\n  return { providers, defaultProvider: firstProvider?.id };\n}\n\nexport async function fetchProviderRegions(\n  getCloudProviderRegions: DefaultApi[\"getCloudProviderRegions\"],\n  provider: string,\n  instanceType: Plan\n) {\n  const res = await getCloudProviderRegions(provider);\n\n  if (!res?.data?.items) {\n    return Promise.reject(\"Invalid provider\");\n  }\n\n  const regionsForInstance = res.data.items.filter(\n    (region) =>\n      region.enabled &&\n      region.capacity.some((c) => c.instance_type === instanceType)\n  );\n\n  return regionsForInstance.map((r) => {\n    const max_capacity_reached = r.capacity?.some(\n      (c) => c.instance_type === instanceType && c.available_sizes?.length === 0\n    );\n\n    return {\n      id: r.id as CloudProvider,\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      displayName: r.display_name!,\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      isDisabled: max_capacity_reached,\n      capacity: r.capacity,\n    };\n  });\n}\n","import type { QuotaCost } from \"@rhoas/account-management-sdk\";\n\nexport const standardId = \"RHOSAK\" as const;\nexport const developerId = \"RHOSAKTrial\" as const;\nexport const resourceName = \"rhosak\" as const;\n\nexport function isStandardQuota(q: QuotaCost) {\n  return q.related_resources?.find((r) => r.billing_model === \"standard\");\n}\n\nexport function isMarketplaceQuota(q: QuotaCost) {\n  return q.related_resources?.find((r) => r.billing_model === \"marketplace\");\n}\n","import type { AppServicesApi } from \"@rhoas/account-management-sdk\";\nimport type {\n  MarketPlace,\n  MarketPlaceSubscriptions,\n} from \"ui-models/src/models/kafka\";\nimport {\n  developerId,\n  isMarketplaceQuota,\n  isStandardQuota,\n  resourceName,\n  standardId,\n} from \"../utilsAndConstants\";\n\nexport type StandardQuota = {\n  hasTrialQuota: boolean;\n  remainingPrepaidQuota: number | undefined;\n  remainingMarketplaceQuota: number | undefined;\n  marketplaceSubscriptions: MarketPlaceSubscriptions[];\n};\nexport const fetchStandardQuota = async (\n  api: AppServicesApi[\"apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet\"],\n  organizationId: string\n) => {\n  const quotaResponse = await api(\n    organizationId,\n    undefined,\n    true,\n    undefined,\n    true\n  );\n  if (quotaResponse.status !== 200) {\n    throw new Error(quotaResponse.statusText);\n  }\n  const standardQuotas = quotaResponse.data.items?.filter((q) =>\n    q.related_resources?.find(\n      (r) => r.resource_name === resourceName && r.product === standardId\n    )\n  );\n\n  const prepaidQuota = standardQuotas?.find(isStandardQuota);\n\n  const marketplaceQuotas = standardQuotas?.some(isMarketplaceQuota)\n    ? standardQuotas?.filter(isMarketplaceQuota)\n    : undefined;\n\n  const hasTrialQuota =\n    (prepaidQuota === undefined &&\n      marketplaceQuotas === undefined &&\n      quotaResponse.data.items?.some((q) =>\n        q.related_resources?.find(\n          (r) => r.resource_name === resourceName && r.product === developerId\n        )\n      )) ||\n    false;\n\n  const remainingPrepaidQuota = prepaidQuota\n    ? prepaidQuota.allowed - prepaidQuota.consumed\n    : undefined;\n  const remainingMarketplaceQuota = marketplaceQuotas\n    ? marketplaceQuotas.reduce((agg, q) => q.allowed - q.consumed + agg, 0)\n    : undefined;\n  const unaggregatedSubscriptions = marketplaceQuotas\n    ?.filter((q) => q.cloud_accounts !== undefined)\n    .flatMap((q) => q.cloud_accounts || []);\n  const subscriptionMarketplaces = Array.from(\n    new Set(\n      unaggregatedSubscriptions?.map((s) => s.cloud_provider_id as MarketPlace)\n    )\n  );\n  const marketplaceSubscriptions: MarketPlaceSubscriptions[] =\n    unaggregatedSubscriptions\n      ? subscriptionMarketplaces.map((marketplace) => ({\n          marketplace,\n          subscriptions: unaggregatedSubscriptions\n            .filter((s) => s.cloud_provider_id === marketplace)\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            .map((s) => s.cloud_account_id!),\n        }))\n      : [];\n\n  return {\n    hasTrialQuota,\n    remainingPrepaidQuota,\n    remainingMarketplaceQuota,\n    marketplaceSubscriptions,\n  };\n};\n","import type { Topic as ApiTopic } from \"@rhoas/kafka-instance-sdk/dist/generated/model/topic\";\nimport type { Plan } from \"ui-models/src/models/kafka\";\nimport type { Topic } from \"ui-models/src/models/topic\";\nimport type {\n  TopicConfig,\n  TopicConfigField,\n} from \"ui-models/src/models/topic-config\";\nimport type { Bytes, Milliseconds } from \"ui-models/src/types\";\n\nexport const developerDefaults: TopicConfig = {\n  \"cleanup.policy\": \"delete\",\n  \"delete.retention.ms\": { type: \"ms\", value: BigInt(\"86400000\") },\n  \"max.compaction.lag.ms\": { type: \"ms\", value: BigInt(\"9223372036854775807\") },\n  \"max.message.bytes\": { type: \"bytes\", value: BigInt(\"1048588\") },\n  \"message.downconversion.enable\": true,\n  \"message.timestamp.difference.max.ms\": {\n    type: \"ms\",\n    value: BigInt(\"9223372036854775807\"),\n  },\n  \"message.timestamp.type\": \"CreateTime\",\n  \"min.compaction.lag.ms\": { type: \"ms\", value: BigInt(\"0\") },\n  \"retention.bytes\": { type: \"bytes\", value: BigInt(\"-1\") },\n  \"retention.ms\": { type: \"ms\", value: BigInt(\"604800000\") },\n  \"segment.bytes\": { type: \"bytes\", value: BigInt(\"1073741824\") },\n  \"segment.ms\": { type: \"ms\", value: BigInt(\"604800000\") },\n  \"compression.type\": \"producer\",\n  \"file.delete.delay.ms\": { type: \"ms\", value: BigInt(\"60000\") },\n  \"flush.messages\": { type: \"ms\", value: BigInt(\"9223372036854775807\") },\n  \"flush.ms\": { type: \"ms\", value: BigInt(\"9223372036854775807\") },\n  \"index.interval.bytes\": { type: \"bytes\", value: BigInt(\"4096\") },\n  \"message.format.version\": \"3.0-IV1\",\n  \"min.cleanable.dirty.ratio\": 0.5,\n  \"min.insync.replicas\": 1,\n  \"segment.index.bytes\": { type: \"bytes\", value: BigInt(\"10485760\") },\n  \"segment.jitter.ms\": { type: \"ms\", value: BigInt(\"0\") },\n  \"unclean.leader.election.enable\": false,\n  preallocate: false,\n} as const;\n\nexport const standardDefaults: TopicConfig = {\n  \"cleanup.policy\": \"delete\",\n  \"delete.retention.ms\": { type: \"ms\", value: BigInt(\"86400000\") },\n  \"max.compaction.lag.ms\": { type: \"ms\", value: BigInt(\"9223372036854775807\") },\n  \"max.message.bytes\": { type: \"bytes\", value: BigInt(\"1048588\") },\n  \"message.downconversion.enable\": true,\n  \"message.timestamp.difference.max.ms\": {\n    type: \"ms\",\n    value: BigInt(\"9223372036854775807\"),\n  },\n  \"message.timestamp.type\": \"CreateTime\",\n  \"min.compaction.lag.ms\": { type: \"ms\", value: BigInt(\"0\") },\n  \"retention.bytes\": { type: \"bytes\", value: BigInt(\"-1\") },\n  \"retention.ms\": { type: \"ms\", value: BigInt(\"604800000\") },\n  \"segment.bytes\": { type: \"bytes\", value: BigInt(\"1073741824\") },\n  \"segment.ms\": { type: \"ms\", value: BigInt(\"604800000\") },\n  \"compression.type\": \"producer\",\n  \"file.delete.delay.ms\": { type: \"ms\", value: BigInt(\"60000\") },\n  \"flush.messages\": { type: \"ms\", value: BigInt(\"9223372036854775807\") },\n  \"flush.ms\": { type: \"ms\", value: BigInt(\"9223372036854775807\") },\n  \"index.interval.bytes\": { type: \"bytes\", value: BigInt(\"4096\") },\n  \"message.format.version\": \"3.0-IV1\",\n  \"min.cleanable.dirty.ratio\": 0.5,\n  \"min.insync.replicas\": 2,\n  \"segment.index.bytes\": { type: \"bytes\", value: BigInt(\"10485760\") },\n  \"segment.jitter.ms\": { type: \"ms\", value: BigInt(\"0\") },\n  \"unclean.leader.election.enable\": false,\n  preallocate: false,\n} as const;\n\nexport function topicTransformerFactory(plan: Plan) {\n  const d = plan === \"developer\" ? developerDefaults : standardDefaults;\n\n  return function topicTransformer(t: ApiTopic): Topic {\n    if (!t.name) {\n      throw new Error(`Invalid topic, name is empty: ${JSON.stringify(t)}`);\n    }\n    const cm = Object.fromEntries<string>(\n      t.config?.map((c) => [c.key as TopicConfigField, c.value]) || []\n    );\n    const config: TopicConfig = {\n      \"cleanup.policy\": cm[\"cleanup.policy\"] as TopicConfig[\"cleanup.policy\"],\n      \"delete.retention.ms\": configValueToMilliseconds(\n        cm[\"delete.retention.ms\"],\n        d[\"delete.retention.ms\"]\n      ),\n      \"max.compaction.lag.ms\": configValueToMilliseconds(\n        cm[\"max.compaction.lag.ms\"],\n        d[\"max.compaction.lag.ms\"]\n      ),\n      \"max.message.bytes\": configValueToBytes(\n        cm[\"max.message.bytes\"],\n        d[\"max.message.bytes\"]\n      ),\n      \"message.downconversion.enable\": configValueToBoolean(\n        cm[\"message.downconversion.enable\"],\n        d[\"message.downconversion.enable\"]\n      ),\n      \"message.timestamp.difference.max.ms\": configValueToMilliseconds(\n        cm[\"message.timestamp.difference.max.ms\"],\n        d[\"message.timestamp.difference.max.ms\"]\n      ),\n      \"message.timestamp.type\": cm[\n        \"message.timestamp.type\"\n      ] as TopicConfig[\"message.timestamp.type\"],\n      \"min.compaction.lag.ms\": configValueToMilliseconds(\n        cm[\"min.compaction.lag.ms\"],\n        d[\"min.compaction.lag.ms\"]\n      ),\n      \"retention.bytes\": configValueToBytes(\n        cm[\"retention.bytes\"],\n        d[\"retention.bytes\"]\n      ),\n      \"retention.ms\": configValueToMilliseconds(\n        cm[\"retention.ms\"],\n        d[\"retention.ms\"]\n      ),\n      \"segment.bytes\": configValueToBytes(\n        cm[\"segment.bytes\"],\n        d[\"segment.bytes\"]\n      ),\n      \"segment.ms\": configValueToMilliseconds(\n        cm[\"segment.ms\"],\n        d[\"segment.ms\"]\n      ),\n      \"compression.type\": cm[\n        \"compression.type\"\n      ] as TopicConfig[\"compression.type\"],\n      \"file.delete.delay.ms\": configValueToMilliseconds(\n        cm[\"file.delete.delay.ms\"],\n        d[\"file.delete.delay.ms\"]\n      ),\n      \"flush.messages\": configValueToMilliseconds(\n        cm[\"flush.messages\"],\n        d[\"flush.messages\"]\n      ),\n      \"flush.ms\": configValueToMilliseconds(cm[\"flush.ms\"], d[\"flush.ms\"]),\n      \"follower.replication.throttled.replicas\":\n        cm[\"follower.replication.throttled.replicas\"],\n      \"index.interval.bytes\": configValueToBytes(\n        cm[\"index.interval.bytes\"],\n        d[\"index.interval.bytes\"]\n      ),\n      \"leader.replication.throttled.replicas\":\n        cm[\"leader.replication.throttled.replicas\"],\n      \"message.format.version\": cm[\"message.format.version\"],\n      \"min.cleanable.dirty.ratio\": configValueToNumber(\n        cm[\"min.cleanable.dirty.ratio\"],\n        d[\"min.cleanable.dirty.ratio\"]\n      ),\n      \"min.insync.replicas\": configValueToNumber(\n        cm[\"min.insync.replicas\"],\n        d[\"min.insync.replicas\"]\n      ),\n      \"segment.index.bytes\": configValueToBytes(\n        cm[\"segment.index.bytes\"],\n        d[\"segment.index.bytes\"]\n      ),\n      \"segment.jitter.ms\": configValueToMilliseconds(\n        cm[\"segment.jitter.ms\"],\n        d[\"segment.jitter.ms\"]\n      ),\n      \"unclean.leader.election.enable\": configValueToBoolean(\n        cm[\"unclean.leader.election.enable\"],\n        d[\"unclean.leader.election.enable\"]\n      ),\n      preallocate: configValueToBoolean(cm[\"preallocate\"], d[\"preallocate\"]),\n    };\n    return {\n      name: t.name,\n      partitions: t.partitions || [],\n      ...config,\n    };\n  };\n}\n\nfunction configValueToMilliseconds(\n  value: string,\n  defaultIfEmpty: Milliseconds\n): Milliseconds {\n  return value && value.trim().length > 0\n    ? { type: \"ms\", value: BigInt(value.trim()) }\n    : defaultIfEmpty;\n}\n\nfunction configValueToBytes(value: string, defaultIfEmpty: Bytes): Bytes {\n  return value && value.trim().length > 0\n    ? { type: \"bytes\", value: BigInt(value.trim()) }\n    : defaultIfEmpty;\n}\n\nfunction configValueToNumber(value: string, defaultIfError: number): number {\n  return parseInt(value, 10) || defaultIfError;\n}\n\nfunction configValueToBoolean(value: string, defaultIfError: boolean): boolean {\n  try {\n    const v: unknown = JSON.parse(value);\n    if (typeof v === \"boolean\") {\n      return v;\n    }\n  } catch {\n    // not a boolean, fallback to the default\n  }\n  return defaultIfError;\n}\n","import type { SortDirection, TopicsApi } from \"@rhoas/kafka-instance-sdk\";\nimport type { Plan } from \"ui-models/src/models/kafka\";\nimport type { Topic } from \"ui-models/src/models/topic\";\nimport { topicTransformerFactory } from \"../transformers/topicTransformer\";\nimport type { KafkaTopicsSortableColumn } from \"../types\";\n\nexport type FetchTopicsParams = {\n  getTopics: TopicsApi[\"getTopics\"];\n  page?: number;\n  perPage?: number;\n  sort?: KafkaTopicsSortableColumn;\n  direction?: SortDirection;\n  filter?: string;\n  plan: Plan;\n};\n\nexport async function fetchTopics({\n  getTopics,\n  page,\n  perPage,\n  filter,\n  sort,\n  direction,\n  plan,\n}: FetchTopicsParams): Promise<{ topics: Topic[]; count: number }> {\n  const response = await getTopics(\n    undefined,\n    undefined,\n    perPage,\n    filter,\n    page,\n    direction,\n    sort\n  );\n  const topics = (response.data.items || []).map<Topic>(\n    topicTransformerFactory(plan)\n  );\n  const count = response.data.total;\n  return { count, topics };\n}\n","import type { DefaultApi } from \"@rhoas/kafka-management-sdk\";\nimport type {\n  GetTopicsMetricsResponse,\n  PartitionBytesMetric,\n  TimeSeriesMetrics,\n} from \"ui\";\nimport type { SafeRangeQuery } from \"../types\";\n\nexport type FetchTopicsMetricsProps = {\n  getMetricsByRangeQuery: DefaultApi[\"getMetricsByRangeQuery\"];\n  id: string;\n  duration: number;\n  interval: number;\n  selectedTopic: string | undefined;\n};\n\nexport async function fetchTopicsMetrics({\n  getMetricsByRangeQuery,\n  id,\n  duration,\n  interval,\n  selectedTopic,\n}: FetchTopicsMetricsProps): Promise<\n  Omit<GetTopicsMetricsResponse, \"kafkaTopics\">\n> {\n  const response = await getMetricsByRangeQuery(id, duration, interval, [\n    \"kafka_topic:kafka_server_brokertopicmetrics_bytes_in_total:rate5m\",\n    \"kafka_topic:kafka_server_brokertopicmetrics_bytes_out_total:rate5m\",\n    \"kafka_topic:kafka_log_log_size:sum\",\n    \"kafka_topic:kafka_server_brokertopicmetrics_messages_in_total:rate5m\",\n  ]);\n\n  // Remove all results with no data. Not sure this can really  happen but since\n  // the types allow for undefined we need to do a bit of defensive programming.\n  const safeMetrics: SafeRangeQuery[] = (response.data.items || []).filter(\n    (m) =>\n      // defensive programming\n      !(m.values && m.metric && m.metric.topic && m.metric.name)\n  ) as SafeRangeQuery[];\n\n  // Also filter for metrics about the selectedTopic, if specified\n  const filteredMetrics = safeMetrics.filter((m) =>\n    // filter for metrics for the selectedTopic, if needed\n    selectedTopic !== undefined ? m.metric?.topic === selectedTopic : true\n  );\n\n  // get the unique topics we have metrics for in the selected time range\n  const topics = Array.from(new Set(safeMetrics.map((m) => m.metric.topic)));\n\n  const bytesIncoming: TimeSeriesMetrics = {};\n  const bytesOutgoing: TimeSeriesMetrics = {};\n  const bytesPerPartition: PartitionBytesMetric = {};\n  const incomingMessageRate: TimeSeriesMetrics = {};\n\n  filteredMetrics.forEach((m) => {\n    const { __name__: name, topic } = m.metric;\n\n    function addAggregatedTotalBytesTo(metric: TimeSeriesMetrics) {\n      m.values.forEach(\n        ({ value, timestamp }) =>\n          (metric[timestamp] = value + (metric[timestamp] || 0))\n      );\n    }\n\n    function addAggregatePartitionBytes() {\n      const partition = bytesPerPartition[topic] || {};\n      m.values.forEach(\n        ({ value, timestamp }) =>\n          (partition[timestamp] = value + (partition[timestamp] || 0))\n      );\n      bytesPerPartition[topic] = partition;\n    }\n\n    switch (name) {\n      case \"kafka_topic:kafka_server_brokertopicmetrics_bytes_in_total:rate5m\":\n        addAggregatedTotalBytesTo(bytesIncoming);\n        break;\n      case \"kafka_topic:kafka_server_brokertopicmetrics_bytes_out_total:rate5m\":\n        addAggregatedTotalBytesTo(bytesOutgoing);\n        break;\n      case \"kafka_topic:kafka_log_log_size:sum\":\n        addAggregatePartitionBytes();\n        break;\n      case \"kafka_topic:kafka_server_brokertopicmetrics_messages_in_total:rate5m\":\n        addAggregatedTotalBytesTo(incomingMessageRate);\n        break;\n    }\n  });\n\n  return {\n    metricsTopics: topics,\n    bytesOutgoing,\n    bytesIncoming,\n    bytesPerPartition,\n    incomingMessageRate,\n  };\n}\n","import type {\n  Principal,\n  PrincipalApi,\n} from \"@redhat-cloud-services/rbac-client\";\nimport type { UserAccount } from \"ui-models/src/models/user-account\";\n\nexport type FetchUserAccountsParams = {\n  getUserAccounts: PrincipalApi[\"listPrincipals\"];\n};\n\nexport async function fetchUserAccounts({\n  getUserAccounts,\n}: FetchUserAccountsParams): Promise<{\n  accounts: UserAccount[];\n  count: number;\n}> {\n  const response = await getUserAccounts(-1);\n  const accounts = response.data.data.map<UserAccount>((p) => {\n    const fullObject = p as Principal;\n    return {\n      username: fullObject.username,\n      displayName: `${fullObject.first_name || \"\"} ${\n        fullObject.last_name || \"\"\n      }`.trim(),\n      email: fullObject.email,\n      isOrgAdmin: fullObject.is_org_admin || false,\n    };\n  });\n  const count = accounts.length;\n  return { count, accounts };\n}\n","import { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { ReactQueryDevtools } from \"@tanstack/react-query-devtools\";\nimport { isReactQueryDevToolsEanbled } from \"local-storage-helpers\";\nimport type { FunctionComponent } from \"react\";\nimport { createContext, lazy, Suspense, useContext } from \"react\";\n\nconst ReactQueryDevtoolsProduction = lazy(() =>\n  import(\"@tanstack/react-query-devtools/build/lib/index.prod.js\").then(\n    (d) => ({\n      default: d.ReactQueryDevtools,\n    })\n  )\n);\n\ntype ApiContextProps = {\n  accessToken: () => Promise<string>;\n  basePath: string;\n  refetchInterval: number;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\nconst ApiContext = createContext<ApiContextProps>(null!);\n\nconst queryClient = new QueryClient();\n\nexport const ApiProvider: FunctionComponent<ApiContextProps> = ({\n  children,\n  ...context\n}) => {\n  const showDevTools = isReactQueryDevToolsEanbled();\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ApiContext.Provider value={context}>\n        {children}\n        <ReactQueryDevtools initialIsOpen />\n        {showDevTools && (\n          <Suspense fallback={null}>\n            <ReactQueryDevtoolsProduction />\n          </Suspense>\n        )}\n      </ApiContext.Provider>\n    </QueryClientProvider>\n  );\n};\n\nexport function useApiConfiguration() {\n  return useContext(ApiContext);\n}\n\nexport { useQueryErrorResetBoundary } from \"@tanstack/react-query\";\n","import type {\n  FetchConsumerGroupParams,\n  FetchConsumerGroupsParams,\n  FetchKafkaMetricsProps,\n  FetchKafkasParams,\n  FetchMessagesParams,\n  FetchPermissionsParams,\n  FetchServiceAccountsParams,\n  FetchTopicParams,\n  FetchTopicsMetricsProps,\n  FetchTopicsParams,\n  FetchUserAccountsParams,\n} from \"./fetchers\";\n\nexport const masQueries = {\n  _root: () => ({ scope: \"mas\" } as const),\n  organization: () =>\n    [{ ...masQueries._root(), entity: \"organization\" }] as const,\n  userAccounts: (params: Omit<FetchUserAccountsParams, \"getUserAccounts\">) =>\n    [{ ...masQueries._root(), entity: \"userAccounts\" }, params] as const,\n\n  quota: {\n    _root: () => ({ ...masQueries._root(), entity: \"quota\" } as const),\n    available: (params: { organization?: string }) =>\n      [\n        { ...masQueries.quota._root(), subentity: \"available\", ...params },\n      ] as const,\n    developerAvailability: () =>\n      [\n        { ...masQueries.quota._root(), subentity: \"developerAvailability\" },\n      ] as const,\n    standardAvailability: () =>\n      [\n        { ...masQueries.quota._root(), subentity: \"standardAvailability\" },\n      ] as const,\n  },\n} as const;\n\nexport const kafkaQueries = {\n  _root: () => ({ scope: \"kafka\" } as const),\n  list: (params: Omit<FetchKafkasParams, \"dataMapper\" | \"getKafkas\">) =>\n    [\n      {\n        ...kafkaQueries._root(),\n        entity: \"list\",\n      },\n      params,\n    ] as const,\n  instance: {\n    _root: ({ id, adminUrl }: { id?: string; adminUrl?: string }) =>\n      ({ ...kafkaQueries._root(), entity: \"instance\", id, adminUrl } as const),\n    details: (params: { id?: string }) =>\n      [\n        { ...kafkaQueries.instance._root(params), subentity: \"details\" },\n      ] as const,\n    topics: ({\n      id,\n      adminUrl,\n      ...params\n    }: { id?: string; adminUrl?: string } & Omit<\n      FetchTopicsParams,\n      \"getTopics\"\n    >) =>\n      [\n        {\n          ...kafkaQueries.instance._root({ id, adminUrl }),\n          subentity: \"topics\",\n        },\n        params,\n      ] as const,\n    topic: ({\n      id,\n      adminUrl,\n      topicName,\n    }: { id?: string; adminUrl?: string } & Omit<\n      FetchTopicParams,\n      \"getTopic\"\n    >) =>\n      [\n        {\n          ...kafkaQueries.instance._root({ id, adminUrl }),\n          subentity: \"topic\",\n        },\n        { topicName },\n      ] as const,\n    topicMessages: ({\n      id,\n      adminUrl,\n      topicName,\n      ...params\n    }: { id?: string; adminUrl?: string } & Omit<\n      FetchMessagesParams,\n      \"consumeRecords\"\n    >) =>\n      [\n        {\n          ...kafkaQueries.instance._root({ id, adminUrl }),\n          subentity: \"topicMessages\",\n        },\n        { topicName, ...params },\n      ] as const,\n    consumerGroups: (\n      params: { id?: string; adminUrl?: string } & Omit<\n        FetchConsumerGroupsParams,\n        \"getConsumerGroups\"\n      >\n    ) =>\n      [\n        {\n          ...kafkaQueries.instance._root(params),\n          subentity: \"consumer-groups\",\n        },\n        params,\n      ] as const,\n    consumerGroup: ({\n      id,\n      adminUrl,\n      consumerGroupId,\n    }: { id?: string; adminUrl?: string } & Omit<\n      FetchConsumerGroupParams,\n      \"getConsumerGroupById\"\n    >) =>\n      [\n        {\n          ...kafkaQueries.instance._root({ id, adminUrl }),\n          subentity: \"consumerGroup\",\n        },\n        { consumerGroupId },] as const,\n    serviceAccounts: (\n      params: Omit<FetchServiceAccountsParams, \"getServiceAccounts\">\n    ) =>\n      [{ ...masQueries._root(), entity: \"serviceAccounts\" }, params] as const,\n    permissions: (\n      params: { id?: string; adminUrl?: string } & Omit<\n        FetchPermissionsParams,\n        \"getAcls\"\n      >\n    ) =>\n      [\n        {\n          ...kafkaQueries.instance._root(params),\n          subentity: \"acls\",\n        },\n        params,\n      ] as const,\n    metrics: {\n      _root: ({ id }: { id: string }) =>\n        ({\n          ...kafkaQueries.instance._root({ id }),\n          subentity: \"metrics\",\n          id,\n        } as const),\n      kpi: (params: { id: string }) =>\n        [{ ...kafkaQueries.instance._root(params), type: \"kpi\" }] as const,\n      instance: ({\n        id,\n        ...params\n      }: Omit<FetchKafkaMetricsProps, \"getMetricsByRangeQuery\">) =>\n        [\n          {\n            ...kafkaQueries.instance._root({ id }),\n            type: \"instance\",\n          },\n          params,\n        ] as const,\n      topic: ({\n        id,\n        ...params\n      }: Omit<FetchTopicsMetricsProps, \"getMetricsByRangeQuery\">) =>\n        [\n          {\n            ...kafkaQueries.instance._root({ id }),\n            type: \"topic\",\n          },\n          params,\n        ] as const,\n    },\n  },\n} as const;\n\nexport const providerQueries = {\n  _root: () => ({ scope: \"providers\" }),\n  list: (params: { plan?: string }) =>\n    [{ ...providerQueries._root(), entity: \"list\", ...params }] as const,\n  limits: {\n    _root: ({ provider }: { provider?: string }) =>\n      ({\n        ...providerQueries._root(),\n        entity: \"limits\",\n        provider,\n      } as const),\n    standard: ({ provider, region }: { provider?: string; region: string }) => [\n      {\n        ...providerQueries.limits._root({ provider }),\n        plan: \"standard\",\n        region,\n      },\n    ],\n    developer: ({\n      provider,\n      region,\n    }: {\n      provider?: string;\n      region: string;\n    }) => [\n      {\n        ...providerQueries.limits._root({ provider }),\n        plan: \"developer\",\n        region,\n      },\n    ],\n  },\n} as const;\n","import { PrincipalApi } from \"@redhat-cloud-services/rbac-client\";\nimport { AppServicesApi } from \"@rhoas/account-management-sdk\";\nimport {\n  Configuration,\n  DefaultApi,\n  SecurityApi,\n} from \"@rhoas/kafka-management-sdk\";\nimport {\n  GroupsApi,\n  RecordsApi,\n  TopicsApi,\n  AclsApi,\n} from \"@rhoas/kafka-instance-sdk\";\nimport { useCallback } from \"react\";\nimport { useApiConfiguration } from \"./ApiProvider\";\n\nexport const useApi = () => {\n  const { basePath, accessToken } = useApiConfiguration();\n\n  const kafkasFleet = useCallback(\n    () =>\n      new DefaultApi(\n        new Configuration({\n          accessToken,\n          basePath,\n        })\n      ),\n    [accessToken, basePath]\n  );\n\n  const userAccounts = useCallback(async () => {\n    const token = await accessToken();\n    return new PrincipalApi({\n      accessToken: token,\n      basePath: `/api/rbac/v1`,\n    });\n  }, [accessToken]);\n\n  const serviceAccount = useCallback(\n    () =>\n      new SecurityApi(\n        new Configuration({\n          accessToken,\n          basePath,\n        })\n      ),\n    [accessToken, basePath]\n  );\n\n  const account = useCallback(\n    () =>\n      new AppServicesApi(\n        new Configuration({\n          accessToken,\n          basePath,\n        })\n      ),\n    [accessToken, basePath]\n  );\n\n  const topics = useCallback(\n    (adminUrl: string) =>\n      new TopicsApi(\n        new Configuration({\n          accessToken,\n          basePath: adminUrl,\n        })\n      ),\n    [accessToken]\n  );\n\n  const consumerGroups = useCallback(\n    (adminUrl: string) =>\n      new GroupsApi(\n        new Configuration({\n          accessToken,\n          basePath: adminUrl,\n        })\n      ),\n    [accessToken]\n  );\n\n  const acls = useCallback(\n    (adminUrl: string) =>\n      new AclsApi(\n        new Configuration({\n          accessToken,\n          basePath: adminUrl,\n        })\n      ),\n    [accessToken]\n  );\n\n  const records = useCallback(\n    (adminUrl: string) =>\n      new RecordsApi(\n        new Configuration({\n          accessToken,\n          basePath: adminUrl,\n        })\n      ),\n    [accessToken]\n  );\n\n  return {\n    kafkasFleet,\n    account,\n    topics,\n    consumerGroups,\n    records,\n    userAccounts,\n    acls,\n    serviceAccount,\n  };\n};\n","import { useQuery } from \"@tanstack/react-query\";\nimport { useApiConfiguration } from \"../ApiProvider\";\nimport type { FetchConsumerGroupsParams } from \"../fetchers\";\nimport { fetchConsumerGroups } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useConsumerGroups(\n  params: { id?: string; adminUrl?: string } & Omit<\n    FetchConsumerGroupsParams,\n    \"getConsumerGroups\"\n  >,\n  suspense = false\n) {\n  const { refetchInterval } = useApiConfiguration();\n  const { consumerGroups } = useApi();\n\n  return useQuery({\n    queryKey: kafkaQueries.instance.consumerGroups(params),\n    queryFn: () => {\n      if (!params.id) {\n        return Promise.reject(\"Invalid id\");\n      }\n      if (!params.adminUrl) {\n        return Promise.reject(\"Invalid adminUrl\");\n      }\n      const api = consumerGroups(params.adminUrl);\n\n      return fetchConsumerGroups({\n        getConsumerGroups: (...args) => api.getConsumerGroups(...args),\n        ...params,\n      });\n    },\n    enabled: Boolean(params.adminUrl) && Boolean(params.id),\n    refetchInterval,\n    suspense,\n  });\n}\n","import type {\n  ConsumerGroupState,\n  GroupsApi,\n  SortDirection,\n} from \"@rhoas/kafka-instance-sdk\";\nimport type { ConsumerGroup } from \"ui-models/src/models/consumer-group\";\nimport type { KafkaConsumerGroupSortableColumn } from \"../types\";\nimport { stateMapping } from \"../transformers/ConsumerGroupTransformer\";\n\nexport type FetchConsumerGroupsParams = {\n  getConsumerGroups: GroupsApi[\"getConsumerGroups\"];\n  page?: number;\n  perPage?: number;\n  sort?: KafkaConsumerGroupSortableColumn;\n  direction?: SortDirection;\n  topic?: string;\n  groupId?: string;\n};\n\nexport async function fetchConsumerGroups({\n  getConsumerGroups,\n  page,\n  perPage,\n  topic,\n  groupId,\n  sort,\n  direction,\n}: FetchConsumerGroupsParams): Promise<{\n  groups: ConsumerGroup[];\n  count: number;\n}> {\n  const response = await getConsumerGroups(\n    undefined,\n    undefined,\n    perPage,\n    page,\n    topic,\n    groupId,\n    direction,\n    sort\n  );\n  const groups = (response.data.items || []).map<ConsumerGroup>((t) => ({\n    groupId: t.groupId || \"\",\n    state: stateMapping[t.state as ConsumerGroupState],\n    consumers: t.consumers,\n    activeConsumers: t.metrics?.activeConsumers,\n    laggingPartitions: t.metrics?.laggingPartitions,\n    unassignedPartitions: t.metrics?.unassignedPartitions,\n  }));\n  const count = response.data.total;\n\n  return { count, groups };\n}\n","import type { KafkaRequest } from \"@rhoas/kafka-management-sdk\";\nimport type {\n  CloudProvider,\n  Kafka,\n  MarketPlaceSubscriptions,\n  Plan,\n  Status,\n} from \"ui-models/src/models/kafka\";\nimport type { DateIsoString } from \"ui-models/src/types\";\n\nimport type { SizeWithLimits } from \"../fetchers\";\n\nexport type KafkaInstanceEnhanced = Required<Kafka> & {\n  request: KafkaRequest;\n};\n\nexport function kafkaRequestToKafkaInstanceEnhanched(\n  instance: KafkaRequest,\n  marketplaceSubscriptions: MarketPlaceSubscriptions[],\n  developerPlanInstanceLimits: SizeWithLimits[],\n  standardPlanInstanceLimits: SizeWithLimits[]\n): KafkaInstanceEnhanced {\n  const enhancedInstance: KafkaInstanceEnhanced = {\n    billing: undefined,\n    connectionRate: 0,\n    connections: 0,\n    createdAt: (instance.created_at ||\n      new Date().toISOString()) as DateIsoString,\n    egress: 0,\n    expiryDate: instance.expires_at as DateIsoString | undefined,\n    id: instance.id,\n    ingress: 0,\n    maxPartitions: 0,\n    messageSize: { type: \"bytes\", value: BigInt(0) },\n    name: instance.name || \"\",\n    owner: instance.owner || \"\",\n    plan: instance.instance_type as Plan,\n    provider: instance.cloud_provider as CloudProvider,\n    region: instance.region || \"\",\n    size: \"1\",\n    status: apiStatusToUIStatus(instance.status || \"\"),\n    storage: { type: \"bytes\", value: BigInt(0) },\n    updatedAt: (instance.updated_at ||\n      new Date().toISOString()) as DateIsoString,\n    request: instance,\n    version: instance.version || \"\",\n    bootstrapUrl: instance.bootstrap_server_host,\n    adminUrl: instance.admin_api_server_url,\n    az: instance.multi_az == true ? \"multi\" : \"single\",\n  };\n\n  // update the billing info\n  try {\n    const marketplaceForBilling = marketplaceSubscriptions.find((ms) =>\n      ms.subscriptions.find((s) => s === instance.billing_cloud_account_id)\n    )?.marketplace;\n\n    const billing: KafkaInstanceEnhanced[\"billing\"] =\n      instance.billing_model === \"standard\"\n        ? \"prepaid\"\n        : marketplaceForBilling && instance.billing_cloud_account_id\n        ? {\n            marketplace: marketplaceForBilling,\n            subscription: instance.billing_cloud_account_id,\n          }\n        : undefined;\n    enhancedInstance.billing = billing;\n  } catch (e) {\n    console.warn(\n      \"kafkaRequestToKafkaInstance\",\n      `couldn't retrieve the billing info for`,\n      instance\n    );\n  }\n\n  // update the limits\n  try {\n    const limits =\n      instance.instance_type === \"developer\"\n        ? developerPlanInstanceLimits\n        : standardPlanInstanceLimits;\n    const thisInstanceLimits = limits.find((l) => l.id === instance.size_id);\n    if (thisInstanceLimits) {\n      enhancedInstance.size = thisInstanceLimits.displayName;\n      enhancedInstance.ingress = thisInstanceLimits.ingress;\n      enhancedInstance.egress = thisInstanceLimits.egress;\n      enhancedInstance.storage = {\n        type: \"bytes\",\n        value: BigInt(instance.max_data_retention_size?.bytes || 0),\n      };\n      enhancedInstance.connections = thisInstanceLimits.connections;\n      enhancedInstance.connectionRate = thisInstanceLimits.connectionRate;\n      enhancedInstance.maxPartitions = thisInstanceLimits.maxPartitions;\n      enhancedInstance.messageSize = {\n        type: \"bytes\",\n        value: BigInt(thisInstanceLimits.messageSize),\n      };\n    }\n  } catch (e) {\n    console.warn(\n      \"kafkaRequestToKafkaInstance\",\n      `couldn't retrieve the limits info for`,\n      instance\n    );\n  }\n\n  return enhancedInstance;\n}\n\nfunction apiStatusToUIStatus(status: string): Status {\n  const mapping: { [key: string]: Status } = {\n    accepted: \"accepted\",\n    preparing: \"preparing\",\n    provisioning: \"provisioning\",\n    ready: \"ready\",\n    failed: \"degraded\",\n    deprovision: \"deprovision\",\n    deleting: \"deleting\",\n  };\n  return mapping[status] || \"degraded\";\n}\n","import type { KafkaRequestPayload } from \"@rhoas/kafka-management-sdk\";\nimport { APIErrorCodes, isServiceApiError } from \"@rhoas/kafka-management-sdk\";\nimport type { CreateKafkaInstanceServices } from \"ui\";\nimport { useApi } from \"../useApi\";\n\nconst ErrorCodes = {\n  /** Forbidden to perform this action*/\n  UNAUTHORIZED_USER: APIErrorCodes.ERROR_4,\n  /** Kafka cluster name is already used*/\n  DUPLICATE_INSTANCE_NAME: APIErrorCodes.ERROR_36,\n  /** The maximum number of allowed kafka instances has been reached*/\n  INTERNAL_CAPACITY_ERROR: APIErrorCodes.ERROR_24,\n  /** Insufficient quota*/\n  INSUFFICIENT_QUOTA: APIErrorCodes.ERROR_120,\n  /** Forbidden to create more instances than the maximum allowed*/\n  TRIAL_USED: APIErrorCodes.ERROR_5,\n  /** Failed to check quota*/\n  FAILED_TO_CHECK_QUOTA: APIErrorCodes.ERROR_121,\n  /** Bad request*/\n  OWNER_DOES_NOT_EXIST: APIErrorCodes.ERROR_21,\n};\n\n/**\n * Create Kafka instance hook that creates kafka instance\n */\nexport const useCreateInstance =\n  (): CreateKafkaInstanceServices[\"onCreate\"] => {\n    const { kafkasFleet } = useApi();\n\n    return (data, onSuccess, onError) => {\n      const runner = async () => {\n        const apisService = kafkasFleet();\n\n        try {\n          const kafkaRequest = {} as KafkaRequestPayload;\n          kafkaRequest.name = data.name;\n          kafkaRequest.cloud_provider = data.provider;\n          kafkaRequest.region = data.region;\n          kafkaRequest.plan = data.plan + \".\" + data.sizeId;\n          kafkaRequest.billing_model =\n            data.billing === \"prepaid\"\n              ? \"standard\"\n              : data.billing !== undefined\n              ? \"marketplace\"\n              : null;\n          kafkaRequest.billing_cloud_account_id =\n            data.billing && data.billing !== \"prepaid\"\n              ? data.billing.subscription\n              : null;\n          await apisService.createKafka(true, kafkaRequest);\n          onSuccess();\n        } catch (error) {\n          if (isServiceApiError(error)) {\n            const { code } = error?.response?.data || {};\n\n            switch (data.plan) {\n              case \"developer\":\n                switch (code) {\n                  case ErrorCodes.DUPLICATE_INSTANCE_NAME:\n                    onError(\"name-taken\");\n                    break;\n\n                  // regardless of the error, let's not give too many details to trial users\n                  default:\n                    onError(\"developer-unavailable\");\n                    break;\n                }\n                break;\n\n              case \"standard\":\n                switch (code) {\n                  case ErrorCodes.DUPLICATE_INSTANCE_NAME:\n                    onError(\"name-taken\");\n                    break;\n\n                  case ErrorCodes.INTERNAL_CAPACITY_ERROR:\n                    onError(\"region-unavailable\");\n                    break;\n\n                  case ErrorCodes.INSUFFICIENT_QUOTA:\n                    onError(\"insufficient-quota\");\n                    break;\n\n                  default:\n                    console.error(\n                      \"useAvailableProvidersAndDefault\",\n                      \"createKafka unknown error\",\n                      error\n                    );\n                    onError(\"unknown\");\n                }\n                break;\n            }\n          } else {\n            console.error(\n              \"useAvailableProvidersAndDefault\",\n              \"createKafka unexpected error\",\n              error\n            );\n          }\n        }\n      };\n      void runner();\n    };\n  };\n","import type { KafkaRequest } from \"@rhoas/kafka-management-sdk\";\nimport {\n  useProviderRegionSizesFetchQuery,\n  useProvidersWithRegionsFetchQuery,\n  useStandardQuotaFetchQuery,\n} from \"../fetchQueries\";\nimport { kafkaRequestToKafkaInstanceEnhanched } from \"../transformers/kafkaRequestToKafkaInstanceEnhanched\";\n\nexport function useKafkaInstanceTransformer() {\n  const getStandardQuotaQuery = useStandardQuotaFetchQuery();\n  const getProvidersInfo = useProvidersWithRegionsFetchQuery();\n  const getProviderRegionsSizes = useProviderRegionSizesFetchQuery();\n\n  return async function kafkaInstanceTransformer(instance: KafkaRequest) {\n    if (!instance.region) {\n      throw new Error(\n        `Invalid KafkaRequest, empty region: ${JSON.stringify(instance)}`\n      );\n    }\n    const standardQuota = await getStandardQuotaQuery();\n\n    const providersInfo = await getProvidersInfo(\n      instance.billing_model !== \"standard\" ? \"developer\" : \"standard\"\n    );\n    const providerInfo = providersInfo.providers.find(\n      (p) => p.id === instance.cloud_provider\n    );\n    if (!providerInfo) {\n      return Promise.reject(\"Invalid cloud provider\");\n    }\n    const standardPlanLimitsQuery = getProviderRegionsSizes(\n      providerInfo,\n      instance.region,\n      \"standard\"\n    );\n    const developerPlanLimitsQuery = getProviderRegionsSizes(\n      providerInfo,\n      instance.region,\n      \"developer\"\n    );\n    const [standardPlanLimits, developerPlanLimits] = await Promise.all([\n      standardPlanLimitsQuery,\n      developerPlanLimitsQuery,\n    ]);\n    return kafkaRequestToKafkaInstanceEnhanched(\n      instance,\n      standardQuota.marketplaceSubscriptions,\n      developerPlanLimits,\n      standardPlanLimits\n    );\n  };\n}\n","import { useQuery } from \"@tanstack/react-query\";\nimport { useApiConfiguration } from \"../ApiProvider\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\nimport { useKafkaInstanceTransformer } from \"./useKafkaInstanceTransformer\";\n\nexport function useKafka(id: string | undefined, suspense = false) {\n  const { refetchInterval } = useApiConfiguration();\n  const dataMapper = useKafkaInstanceTransformer();\n  const { kafkasFleet } = useApi();\n  const api = kafkasFleet();\n\n  return useQuery({\n    enabled: Boolean(id),\n    queryKey: kafkaQueries.instance.details({ id }),\n    queryFn: async () => {\n      if (!id) {\n        return Promise.reject(\"Invalid Kafka instance id\");\n      }\n      const instance = await api.getKafkaById(id);\n      return dataMapper(instance.data);\n    },\n    refetchInterval,\n    suspense,\n  });\n}\n","import { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useApiConfiguration } from \"../ApiProvider\";\nimport type { FetchKafkasParams } from \"../fetchers\";\nimport { fetchKafkas } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\nimport { useKafkaInstanceTransformer } from \"./useKafkaInstanceTransformer\";\n\nexport function useKafkas(\n  params: Omit<FetchKafkasParams, \"dataMapper\" | \"getKafkas\">\n) {\n  const { refetchInterval } = useApiConfiguration();\n  const queryClient = useQueryClient();\n  const dataMapper = useKafkaInstanceTransformer();\n  const { kafkasFleet } = useApi();\n  const api = kafkasFleet();\n\n  return useQuery({\n    queryKey: kafkaQueries.list(params),\n    queryFn: async () => {\n      const res = await fetchKafkas({\n        getKafkas: (...args) => api.getKafkas(...args),\n        dataMapper,\n        ...params,\n      });\n      res.instances.forEach((i) =>\n        queryClient.setQueryData(kafkaQueries.instance.details({ id: i.id }), i)\n      );\n      return res;\n    },\n    refetchInterval,\n  });\n}\n","import { useQuery } from \"@tanstack/react-query\";\nimport { useApiConfiguration } from \"../ApiProvider\";\nimport type { FetchTopicParams } from \"../fetchers\";\nimport { fetchTopic } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useTopic(\n  params: { id?: string; adminUrl?: string } & Omit<\n    FetchTopicParams,\n    \"getTopic\"\n  >,\n  suspense = false\n) {\n  const { refetchInterval } = useApiConfiguration();\n  const { topics } = useApi();\n\n  return useQuery({\n    queryKey: kafkaQueries.instance.topic(params),\n    queryFn: () => {\n      if (!params.id) {\n        return Promise.reject(\"Invalid id\");\n      }\n      if (!params.adminUrl) {\n        return Promise.reject(\"Invalid adminUrl\");\n      }\n      const api = topics(params.adminUrl);\n\n      return fetchTopic({\n        getTopic: (...args) => api.getTopic(...args),\n        ...params,\n      });\n    },\n    enabled:\n      Boolean(params.adminUrl) &&\n      Boolean(params.id) &&\n      Boolean(params.topicName),\n    refetchInterval,\n    suspense,\n  });\n}\n","import type { TopicsApi } from \"@rhoas/kafka-instance-sdk\";\nimport type { Plan } from \"ui-models/src/models/kafka\";\nimport type { Topic } from \"ui-models/src/models/topic\";\nimport { topicTransformerFactory } from \"../transformers/topicTransformer\";\n\nexport type FetchTopicParams = {\n  getTopic: TopicsApi[\"getTopic\"];\n  topicName: string;\n  plan: Plan;\n};\n\nexport async function fetchTopic({\n  getTopic,\n  topicName,\n  plan,\n}: FetchTopicParams): Promise<Topic> {\n  const response = await getTopic(topicName);\n  return topicTransformerFactory(plan)(response.data);\n}\n","import { useQuery } from \"@tanstack/react-query\";\nimport { useApiConfiguration } from \"../ApiProvider\";\nimport type { FetchTopicsParams } from \"../fetchers\";\nimport { fetchTopics } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useTopics(\n  params: { id?: string; adminUrl?: string } & Omit<\n    FetchTopicsParams,\n    \"getTopics\"\n  >,\n  suspense = false\n) {\n  const { refetchInterval } = useApiConfiguration();\n  const { topics } = useApi();\n\n  return useQuery({\n    queryKey: kafkaQueries.instance.topics(params),\n    queryFn: () => {\n      if (!params.id) {\n        return Promise.reject(\"Invalid id\");\n      }\n      if (!params.adminUrl) {\n        return Promise.reject(\"Invalid adminUrl\");\n      }\n      const api = topics(params.adminUrl);\n\n      return fetchTopics({\n        getTopics: (...args) => api.getTopics(...args),\n        ...params,\n      });\n    },\n    enabled: Boolean(params.adminUrl) && Boolean(params.id),\n    refetchInterval,\n    suspense,\n  });\n}\n","import { useQuery } from \"@tanstack/react-query\";\nimport { useApiConfiguration } from \"../ApiProvider\";\nimport type { FetchUserAccountsParams } from \"../fetchers\";\nimport { fetchUserAccounts } from \"../fetchers\";\nimport { masQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useUserAccounts(\n  params: Omit<FetchUserAccountsParams, \"getUserAccounts\">,\n  suspense = false\n) {\n  const { refetchInterval } = useApiConfiguration();\n  const { userAccounts } = useApi();\n\n  return useQuery({\n    queryKey: masQueries.userAccounts(params),\n    queryFn: async () => {\n      const api = await userAccounts();\n\n      return fetchUserAccounts({\n        getUserAccounts: (...args) => api.listPrincipals(...args),\n        ...params,\n      });\n    },\n    refetchInterval,\n    suspense,\n  });\n}\n","import { useQuery } from \"@tanstack/react-query\";\nimport { useApiConfiguration } from \"../ApiProvider\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\nimport type { FetchConsumerGroupParams } from \"../fetchers\";\nimport { fetchConsumerGroup } from \"../fetchers\";\n\nexport function useConsumerGroup(\n  params: { id?: string; adminUrl?: string } & Omit<\n    FetchConsumerGroupParams,\n    \"getConsumerGroupById\"\n  >,\n  suspense = false\n) {\n  const { refetchInterval } = useApiConfiguration();\n  const { consumerGroups } = useApi();\n\n  return useQuery({\n    queryKey: kafkaQueries.instance.consumerGroup(params),\n    queryFn: () => {\n      if (!params.id) {\n        return Promise.reject(\"Invalid id\");\n      }\n      if (!params.adminUrl) {\n        return Promise.reject(\"Invalid adminUrl\");\n      }\n      if (!params.consumerGroupId) {\n        return Promise.reject(\"Invalid consumerGroupId\");\n      }\n      const api = consumerGroups(params.adminUrl);\n\n      return fetchConsumerGroup({\n        getConsumerGroupById: (...args) => api.getConsumerGroupById(...args),\n        ...params,\n      });\n    },\n    enabled:\n      Boolean(params.adminUrl) &&\n      Boolean(params.id) &&\n      Boolean(params.consumerGroupId),\n    refetchInterval,\n    suspense,\n  });\n}\n","import type { GroupsApi } from \"@rhoas/kafka-instance-sdk\";\nimport type { ConsumerGroup } from \"ui-models/src/models/consumer-group\";\nimport { consumerGroupTransformer } from \"../transformers/ConsumerGroupTransformer\";\n\nexport type FetchConsumerGroupParams = {\n  getConsumerGroupById: GroupsApi[\"getConsumerGroupById\"];\n  consumerGroupId: string;\n};\n\nexport async function fetchConsumerGroup({\n  getConsumerGroupById,\n  consumerGroupId,\n}: FetchConsumerGroupParams): Promise<ConsumerGroup> {\n  const response = await getConsumerGroupById(consumerGroupId);\n  return consumerGroupTransformer(response.data);\n}\n","import { useQuery } from \"@tanstack/react-query\";\nimport { useApiConfiguration } from \"../ApiProvider\";\nimport type { FetchPermissionsParams } from \"../fetchers\";\nimport { fetchPermissions } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useAcls(\n  params: { id?: string; adminUrl?: string } & Omit<\n    FetchPermissionsParams,\n    \"getAcls\"\n  >,\n  suspense = false\n) {\n  const { refetchInterval } = useApiConfiguration();\n  const { acls } = useApi();\n\n  return useQuery({\n    queryKey: kafkaQueries.instance.permissions(params),\n    queryFn: () => {\n      if (!params.adminUrl) {\n        return Promise.reject(\"Invalid adminUrl\");\n      }\n      if (!params.id) {\n        return Promise.reject(\"Invalid id\");\n      }\n      const api = acls(params.adminUrl);\n\n      return fetchPermissions({\n        getAcls: (...args) => api.getAcls(...args),\n      });\n    },\n    enabled: Boolean(params.adminUrl),\n    refetchInterval,\n    suspense,\n  });\n}\n","import type { AclsApi } from \"@rhoas/kafka-instance-sdk\";\nimport type { Permissions } from \"../../../ui\";\n\nexport type FetchPermissionsParams = {\n  getAcls: AclsApi[\"getAcls\"];\n  page?: number;\n  perPage?: number;\n};\n\nexport async function fetchPermissions({\n  getAcls,\n  page,\n  perPage,\n}: FetchPermissionsParams): Promise<{\n  groups: Permissions[];\n  count: number;\n}> {\n  const response = await getAcls(\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    page,\n    perPage\n  );\n  const groups = (response.data.items || []).map<Permissions>((t) => ({\n    account: t.principal || \"\",\n    permission: { permission: t.permission, operation: t.operation },\n    resource: {\n      resourceName: t.resourceName,\n      patternType: t.patternType,\n      resourceType: t.resourceType,\n    },\n  }));\n  const count = response.data.total;\n  return { count, groups };\n}\n","import { useQuery } from \"@tanstack/react-query\";\nimport { useApiConfiguration } from \"../ApiProvider\";\nimport type { FetchServiceAccountsParams } from \"../fetchers\";\nimport { fetchServiceAccounts } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useServiceAccounts(\n  params: Omit<FetchServiceAccountsParams, \"getServiceAccounts\">,\n  suspense = false\n) {\n  const { refetchInterval } = useApiConfiguration();\n  const { serviceAccount } = useApi();\n\n  return useQuery({\n    queryKey: kafkaQueries.instance.serviceAccounts(params),\n    queryFn: () => {\n      const api = serviceAccount();\n\n      return fetchServiceAccounts({\n        getServiceAccounts: (...args) => api.getServiceAccounts(...args),\n        ...params,\n      });\n    },\n    refetchInterval,\n    suspense,\n  });\n}\n","import type { SecurityApi } from \"@rhoas/kafka-management-sdk\";\nimport type { Account } from \"ui\";\nimport { PrincipalType } from \"ui\";\n\nexport type FetchServiceAccountsParams = {\n  getServiceAccounts: SecurityApi[\"getServiceAccounts\"];\n};\n\nexport async function fetchServiceAccounts({\n  getServiceAccounts,\n}: FetchServiceAccountsParams): Promise<{\n  serviceAccounts: Account[];\n}> {\n  const response = await getServiceAccounts();\n  const data = response.data.items;\n  const serviceAccounts: Account[] = data.map((t) => {\n    return {\n      principalType: PrincipalType.ServiceAccount,\n      id: t.id || \"\",\n      displayName: t.name || \"\",\n    };\n  });\n  return { serviceAccounts };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport { fetchKafkas } from \"../fetchers\";\nimport { useKafkaInstanceTransformer } from \"../queries\";\nimport { kafkaQueries, masQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport const useDeveloperInstanceAvailabilityFetchQuery = () => {\n  const queryClient = useQueryClient();\n  const { kafkasFleet } = useApi();\n  const dataMapper = useKafkaInstanceTransformer();\n\n  return (getUsername: () => Promise<string>) => {\n    const api = kafkasFleet();\n    return queryClient.fetchQuery({\n      queryKey: masQueries.quota.developerAvailability(),\n      queryFn: async () => {\n        const username = await getUsername();\n        if (!username) {\n          return Promise.reject(new Error(\"Invalid username\"));\n        }\n\n        const { instances } = await queryClient.fetchQuery({\n          queryKey: kafkaQueries.list({\n            direction: \"desc\",\n            sort: \"createdAt\",\n            name: [],\n            status: [],\n            owner: [username],\n            perPage: 1000,\n            page: 1,\n          }),\n          queryFn: () =>\n            fetchKafkas({\n              getKafkas: (...args) => api.getKafkas(...args),\n              dataMapper,\n              direction: \"desc\",\n              sort: \"createdAt\",\n              name: [],\n              status: [],\n              owner: [username],\n              perPage: 1000,\n              page: 1,\n            }),\n          staleTime: Infinity,\n        });\n\n        return instances.some((k) => k?.plan !== \"standard\") !== true;\n      },\n    });\n  };\n};\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport { useKafkaInstanceTransformer } from \"../queries\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useKafkaFetchQuery() {\n  const queryClient = useQueryClient();\n  const dataMapper = useKafkaInstanceTransformer();\n  const { kafkasFleet } = useApi();\n  return async (id: string) => {\n    const api = kafkasFleet();\n    return queryClient.fetchQuery({\n      queryKey: kafkaQueries.instance.details({ id }),\n      queryFn: async () => {\n        const instance = await api.getKafkaById(id);\n        return dataMapper(instance.data);\n      },\n    });\n  };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport { fetchKafkaKpis } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useKafkaKpisFetchQuery() {\n  const { kafkasFleet } = useApi();\n  const queryClient = useQueryClient();\n\n  return (id: string) => {\n    const api = kafkasFleet();\n\n    return queryClient.fetchQuery({\n      queryKey: kafkaQueries.instance.metrics.kpi({ id }),\n      queryFn: async () => {\n        return fetchKafkaKpis(\n          (...args) => api.getMetricsByInstantQuery(...args),\n          id\n        );\n      },\n    });\n  };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport type { FetchKafkaMetricsProps } from \"../fetchers\";\nimport { fetchKafkaMetrics } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useKafkaMetricsFetchQuery() {\n  const { kafkasFleet } = useApi();\n  const queryClient = useQueryClient();\n\n  return (params: Omit<FetchKafkaMetricsProps, \"getMetricsByRangeQuery\">) => {\n    const api = kafkasFleet();\n\n    return queryClient.fetchQuery({\n      queryKey: kafkaQueries.instance.metrics.instance(params),\n      queryFn: async () => {\n        return fetchKafkaMetrics({\n          getMetricsByRangeQuery: (...args) =>\n            api.getMetricsByRangeQuery(...args),\n          ...params,\n        });\n      },\n    });\n  };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport type { FetchTopicsMetricsProps } from \"../fetchers\";\nimport { fetchTopicsMetrics } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useTopicsMetricsFetchQuery() {\n  const { kafkasFleet } = useApi();\n  const queryClient = useQueryClient();\n\n  return (params: Omit<FetchTopicsMetricsProps, \"getMetricsByRangeQuery\">) => {\n    const api = kafkasFleet();\n\n    return queryClient.fetchQuery({\n      queryKey: kafkaQueries.instance.metrics.topic(params),\n      queryFn: async () => {\n        return fetchTopicsMetrics({\n          getMetricsByRangeQuery: (...args) =>\n            api.getMetricsByRangeQuery(...args),\n          ...params,\n        });\n      },\n    });\n  };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport type { FetchTopicsParams } from \"../fetchers\";\nimport { fetchTopics } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useTopicsFetchQuery() {\n  const { topics } = useApi();\n  const queryClient = useQueryClient();\n\n  return (\n    params: Omit<FetchTopicsParams, \"getTopics\"> & {\n      id: string;\n      adminUrl: string;\n    }\n  ) => {\n    const api = topics(params.adminUrl);\n\n    return queryClient.fetchQuery({\n      queryKey: kafkaQueries.instance.topics(params),\n      queryFn: async () => {\n        return fetchTopics({\n          getTopics: (...args) => api.getTopics(...args),\n          ...params,\n        });\n      },\n    });\n  };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport type { FetchMessagesParams } from \"../fetchers\";\nimport { fetchMessages } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useMessagesFetchQuery() {\n  const { records } = useApi();\n  const queryClient = useQueryClient();\n\n  return (\n    params: { id: string; adminUrl: string } & Omit<\n      FetchMessagesParams,\n      \"consumeRecords\"\n    >\n  ) => {\n    const api = records(params.adminUrl);\n\n    return queryClient.fetchQuery({\n      queryKey: kafkaQueries.instance.topicMessages(params),\n      queryFn: () => {\n        if (!params.id) {\n          return Promise.reject(\"Invalid id\");\n        }\n        if (!params.adminUrl) {\n          return Promise.reject(\"Invalid adminUrl\");\n        }\n\n        return fetchMessages({\n          consumeRecords: (...args) => api.consumeRecords(...args),\n          ...params,\n        });\n      },\n    });\n  };\n}\n","import type { Record, RecordsApi } from \"@rhoas/kafka-instance-sdk\";\nimport type { Message } from \"ui-models/src/models/message\";\nimport type { DateIsoString } from \"../../../ui-models/src/types\";\n\nexport type FetchMessagesParams = {\n  consumeRecords: RecordsApi[\"consumeRecords\"];\n  topicName: string;\n  partition?: number;\n  offset?: number;\n  timestamp?: DateIsoString;\n  limit: number;\n};\n\nexport async function fetchMessages({\n  topicName,\n  consumeRecords,\n  partition,\n  offset,\n  timestamp,\n  limit,\n}: FetchMessagesParams): Promise<Message[]> {\n  const response = await consumeRecords(\n    topicName,\n    undefined,\n    limit,\n    undefined,\n    offset,\n    partition,\n    timestamp\n  );\n  return response.data.items.map((m: Record) => ({\n    partition: m.partition,\n    offset: m.offset,\n    timestamp: m.timestamp as DateIsoString,\n    key: m.key,\n    value: m.value,\n    headers: m.headers || {},\n  }));\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport type { Plan } from \"ui-models/src/models/kafka\";\nimport type { CloudProviderInfoWithRegionsCapacity } from \"../fetchers\";\nimport { fetchProviderRegionSizes } from \"../fetchers\";\nimport { providerQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useProviderRegionSizesFetchQuery() {\n  const queryClient = useQueryClient();\n  const { kafkasFleet } = useApi();\n\n  return (\n    provider: CloudProviderInfoWithRegionsCapacity,\n    region: string,\n    plan: Plan\n  ) => {\n    const kms = kafkasFleet();\n    return queryClient.fetchQuery({\n      queryKey: providerQueries.limits[\n        plan === \"standard\" ? \"standard\" : \"developer\"\n      ]({ provider: provider.id, region }),\n      queryFn: () =>\n        fetchProviderRegionSizes(\n          (...args) => kms.getInstanceTypesByCloudProviderAndRegion(...args),\n          provider,\n          region,\n          plan\n        ),\n      staleTime: Infinity,\n    });\n  };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport type { Plan } from \"ui-models/src/models/kafka\";\nimport { fetchProvidersWithRegions } from \"../fetchers\";\nimport { providerQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useProvidersWithRegionsFetchQuery() {\n  const queryClient = useQueryClient();\n  const { kafkasFleet } = useApi();\n\n  return (plan: Plan) => {\n    const kms = kafkasFleet();\n    return queryClient.fetchQuery({\n      queryKey: providerQueries.list({ plan }),\n      queryFn: () =>\n        fetchProvidersWithRegions(\n          (...args) => kms.getCloudProviders(...args),\n          (...args) => kms.getCloudProviderRegions(...args),\n          plan\n        ),\n      staleTime: Infinity,\n    });\n  };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport { fetchOrganization, fetchStandardQuota } from \"../fetchers\";\nimport { masQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useStandardQuotaFetchQuery(skipCache = false) {\n  const queryClient = useQueryClient();\n  const { account } = useApi();\n  const ams = account();\n\n  return async () => {\n    const organization = await queryClient.fetchQuery({\n      queryKey: masQueries.organization(),\n      queryFn: () =>\n        fetchOrganization((...args) =>\n          ams.apiAccountsMgmtV1CurrentAccountGet(...args)\n        ),\n      staleTime: Infinity,\n    });\n    if (!organization) {\n      return Promise.reject(\"Missing organization id\");\n    }\n    return queryClient.fetchQuery({\n      queryKey: masQueries.quota.available({ organization }),\n      queryFn: () =>\n        fetchStandardQuota(\n          (...args) =>\n            ams.apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(...args),\n          organization\n        ),\n      staleTime: skipCache ? undefined : Infinity,\n    });\n  };\n}\n","import type { AppServicesApi } from \"@rhoas/account-management-sdk\";\n\nexport async function fetchOrganization(\n  api: AppServicesApi[\"apiAccountsMgmtV1CurrentAccountGet\"]\n) {\n  const account = await api();\n  const orgId = account?.data?.organization?.id;\n  return orgId;\n}\n","import type { KafkaRequestPayload } from \"@rhoas/kafka-management-sdk\";\nimport { APIErrorCodes, isServiceApiError } from \"@rhoas/kafka-management-sdk\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport type { CreateKafkaFormData, CreateKafkaInstanceError } from \"ui\";\nimport { kafkaQueries, masQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useCreateKafkaMutation() {\n  const { kafkasFleet } = useApi();\n  const queryClient = useQueryClient();\n\n  return useMutation(\n    async function kafkaCreateInstance(props: {\n      instance: CreateKafkaFormData;\n      onSuccess: () => void;\n      onError: (error: CreateKafkaInstanceError) => void;\n    }) {\n      const { instance, onSuccess, onError } = props;\n      const api = kafkasFleet();\n      const kafkaRequest: KafkaRequestPayload = {\n        name: instance.name,\n        cloud_provider: instance.provider,\n        region: instance.region,\n      };\n      kafkaRequest.plan = instance.plan + \".\" + instance.sizeId;\n      kafkaRequest.billing_model =\n        instance.billing === \"prepaid\"\n          ? \"standard\"\n          : instance.billing !== undefined\n          ? \"marketplace\"\n          : null;\n      kafkaRequest.billing_cloud_account_id =\n        instance.billing && instance.billing !== \"prepaid\"\n          ? instance.billing.subscription\n          : null;\n      try {\n        await api.createKafka(true, kafkaRequest);\n        onSuccess();\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const { code } = error?.response?.data || {};\n\n          switch (instance.plan) {\n            case \"developer\":\n              switch (code) {\n                case ErrorCodes.DUPLICATE_INSTANCE_NAME:\n                  onError(\"name-taken\");\n                  break;\n\n                // regardless of the error, let's not give too many details to trial users\n                default:\n                  onError(\"developer-unavailable\");\n                  break;\n              }\n              break;\n\n            case \"standard\":\n              switch (code) {\n                case ErrorCodes.DUPLICATE_INSTANCE_NAME:\n                  onError(\"name-taken\");\n                  break;\n\n                case ErrorCodes.INTERNAL_CAPACITY_ERROR:\n                  onError(\"region-unavailable\");\n                  break;\n\n                case ErrorCodes.INSUFFICIENT_QUOTA:\n                  onError(\"insufficient-quota\");\n                  break;\n\n                default:\n                  console.error(\n                    \"useKafkaCreateInstanceMutation\",\n                    \"createKafka unknown error\",\n                    error\n                  );\n                  onError(\"unknown\");\n              }\n              break;\n          }\n        } else {\n          console.error(\n            \"useKafkaCreateInstanceMutation\",\n            \"createKafka unexpected error\",\n            error\n          );\n          onError(\"unknown\");\n        }\n      }\n    },\n    {\n      onSuccess: () => {\n        void queryClient.invalidateQueries([kafkaQueries._root()]);\n        void queryClient.invalidateQueries([masQueries.quota._root()]);\n      },\n    }\n  );\n}\n\nconst ErrorCodes = {\n  /** Forbidden to perform this action*/\n  UNAUTHORIZED_USER: APIErrorCodes.ERROR_4,\n  /** Kafka cluster name is already used*/\n  DUPLICATE_INSTANCE_NAME: APIErrorCodes.ERROR_36,\n  /** The maximum number of allowed kafka instances has been reached*/\n  INTERNAL_CAPACITY_ERROR: APIErrorCodes.ERROR_24,\n  /** Insufficient quota*/\n  INSUFFICIENT_QUOTA: APIErrorCodes.ERROR_120,\n  /** Forbidden to create more instances than the maximum allowed*/\n  TRIAL_USED: APIErrorCodes.ERROR_5,\n  /** Failed to check quota*/\n  FAILED_TO_CHECK_QUOTA: APIErrorCodes.ERROR_121,\n  /** Bad request*/\n  OWNER_DOES_NOT_EXIST: APIErrorCodes.ERROR_21,\n} as const;\n","import { isServiceApiError } from \"@rhoas/kafka-management-sdk\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { kafkaQueries, masQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useDeleteKafkaMutation() {\n  const { kafkasFleet } = useApi();\n  const queryClient = useQueryClient();\n\n  return useMutation(\n    async function kafkaCreateInstance(props: {\n      id: string;\n      onSuccess: () => void;\n      onError: (code: string, message: string) => void;\n    }) {\n      const { id, onSuccess, onError } = props;\n      const api = kafkasFleet();\n      try {\n        await api.deleteKafkaById(id, true);\n        onSuccess();\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const message = error?.message;\n          const { code } = error?.response?.data || {};\n\n          onError(code || \"?\", message);\n        }\n      }\n    },\n    {\n      onSuccess: () => {\n        void queryClient.invalidateQueries([kafkaQueries._root()]);\n        void queryClient.invalidateQueries([masQueries.quota._root()]);\n      },\n    }\n  );\n}\n","import { isServiceApiError } from \"@rhoas/kafka-management-sdk\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useDeleteTopicMutation() {\n  const { topics } = useApi();\n  const queryClient = useQueryClient();\n\n  return useMutation(\n    async function kafkaCreateInstance({\n      adminUrl,\n      name,\n      onSuccess,\n      onError,\n    }: {\n      instanceId: string;\n      adminUrl: string;\n      name: string;\n      onSuccess: () => void;\n      onError: (code: string, message: string) => void;\n    }) {\n      const api = topics(adminUrl);\n      try {\n        await api.deleteTopic(name);\n        onSuccess();\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const message = error?.message;\n          const { code } = error?.response?.data || {};\n\n          onError(code || \"?\", message);\n        }\n      }\n    },\n    {\n      onSuccess: (_, { adminUrl, instanceId }) => {\n        void queryClient.invalidateQueries([\n          kafkaQueries.instance._root({\n            id: instanceId,\n            adminUrl,\n          }),\n        ]);\n      },\n    }\n  );\n}\n","import type {\n  KafkaRequest,\n  KafkaUpdateRequest,\n} from \"@rhoas/kafka-management-sdk\";\nimport { getErrorCode, isServiceApiError } from \"@rhoas/kafka-management-sdk\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport type { AxiosResponse } from \"axios\";\nimport { AxiosError } from \"axios\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\ntype Errors = \"invalid-user\" | \"other\" | \"unknown\";\n\nexport function useUpdateKafkaMutation() {\n  const { kafkasFleet } = useApi();\n  const queryClient = useQueryClient();\n\n  return useMutation<\n    AxiosResponse<KafkaRequest>,\n    { type: Errors; message?: string },\n    { id: string; updates: KafkaUpdateRequest },\n    unknown\n  >(\n    async function kafkaCreateInstance({ id, updates }) {\n      const api = kafkasFleet();\n      try {\n        return await api.updateKafkaById(id, updates);\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const code = getErrorCode(error);\n\n          switch (code) {\n            case \"KAFKAS-MGMT-21\": {\n              return Promise.reject({\n                type: \"invalid-user\",\n                message: error.response?.data.reason,\n              });\n            }\n            default: {\n              return Promise.reject({\n                type: \"other\",\n                message: error.response?.data.reason,\n              });\n            }\n          }\n        } else if (error instanceof AxiosError) {\n          return Promise.reject({ type: \"unknown\", message: error.message });\n        } else {\n          return Promise.reject({ type: \"unknown\", message: \"unknown\" });\n        }\n      }\n    },\n    {\n      onSuccess: () => {\n        void queryClient.invalidateQueries([kafkaQueries._root()]);\n      },\n    }\n  );\n}\n","import { isServiceApiError } from \"@rhoas/kafka-management-sdk\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useDeleteConsumerGroupMutation() {\n  const { consumerGroups } = useApi();\n  const queryClient = useQueryClient();\n\n  return useMutation(\n    async function deleteConsumerGroup(props: {\n      instanceId: string;\n      adminUrl: string;\n      consumerGroupId: string;\n      onSuccess: () => void;\n      onError: (code: string, message: string) => void;\n    }) {\n      const { instanceId, adminUrl, consumerGroupId, onSuccess, onError } =\n        props;\n      const api = consumerGroups(adminUrl);\n      try {\n        await api.deleteConsumerGroupById(consumerGroupId);\n        onSuccess();\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const message = error?.message;\n          const { code } = error?.response?.data || {};\n\n          onError(code || \"?\", message);\n        }\n      }\n    },\n    {\n      onSuccess: (_, { adminUrl, instanceId }) => {\n        void queryClient.invalidateQueries([\n          kafkaQueries.instance._root({\n            id: instanceId,\n            adminUrl,\n          }),\n        ]);\n      },\n    }\n  );\n}\n","import { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useApi } from \"../useApi\";\nimport type { OffsetValue } from \"ui\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { isServiceApiError } from \"@rhoas/kafka-management-sdk\";\n\nexport function useResetConsumerGroupMutation() {\n  const { consumerGroups } = useApi();\n  const queryClient = useQueryClient();\n\n  return useMutation(\n    async function consumerGroupResetOffset(props: {\n      instanceId: string;\n      adminUrl: string;\n      consumerGroupId: string;\n      offset: OffsetValue;\n      topic: string;\n      partitions: number[];\n      value?: string;\n      onSuccess: () => void;\n      onError: (code: string, message: string) => void;\n    }) {\n      const {\n        instanceId,\n        adminUrl,\n        consumerGroupId,\n        offset,\n        topic,\n        partitions,\n        value,\n        onSuccess,\n        onError,\n      } = props;\n      const api = consumerGroups(adminUrl);\n      try {\n        await api.resetConsumerGroupOffset(consumerGroupId, {\n          value,\n          offset,\n          topics: [{ topic, partitions }],\n        });\n        onSuccess();\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const message = error?.message;\n          const { code } = error?.response?.data || {};\n\n          onError(code || \"?\", message);\n        }\n      }\n    },\n    {\n      onSuccess: (_, { adminUrl, instanceId }) => {\n        void queryClient.invalidateQueries([\n          kafkaQueries.instance._root({\n            id: instanceId,\n            adminUrl,\n          }),\n        ]);\n      },\n    }\n  );\n}\n","import { isServiceApiError } from \"@rhoas/kafka-management-sdk\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport type { AclFilter } from \"../types\";\nimport { useApi } from \"../useApi\";\n\nexport function useDeletePermissionsMutation() {\n  const { acls } = useApi();\n  const queryClient = useQueryClient();\n\n  return useMutation(\n    async function deletePermissions(props: {\n      instanceId: string;\n      adminUrl: string;\n      acl: AclFilter;\n      onSuccess: () => void;\n      onError: (code: string, message: string) => void;\n    }) {\n      const { adminUrl, acl, onSuccess, onError } = props;\n      const api = acls(adminUrl);\n      try {\n        await api.deleteAcls(\n          acl.resourceType,\n          acl.resourceName,\n          acl.patternType,\n          acl.principal,\n          acl.operation,\n          acl.permissionType\n        );\n        onSuccess();\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const message = error?.response?.data.reason || \"\";\n          const { code } = error?.response?.data || {};\n\n          onError(code || \"?\", message);\n        }\n      }\n    },\n    {\n      onSuccess: (_, { adminUrl, instanceId }) => {\n        void queryClient.invalidateQueries([\n          kafkaQueries.instance.permissions({\n            id: instanceId,\n            adminUrl,\n          }),\n        ]);\n      },\n    }\n  );\n}\n","import type { AclBinding } from \"@rhoas/kafka-instance-sdk\";\nimport { isServiceApiError } from \"@rhoas/kafka-management-sdk\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useUpdatePermissionsMutation() {\n  const { acls } = useApi();\n  const queryClient = useQueryClient();\n\n  return useMutation(\n    async function updatePermissionsPermissions(props: {\n      instanceId: string;\n      adminUrl: string;\n      acl: AclBinding;\n      onSuccess: () => void;\n      onError: (code: string, message: string) => void;\n    }) {\n      const { adminUrl, acl, onSuccess, onError } = props;\n      const api = acls(adminUrl);\n      try {\n        await api.createAcl({\n          resourceName: acl.resourceName,\n          resourceType: acl.resourceType,\n          patternType: acl.patternType,\n          permission: acl.permission,\n          principal: acl.principal,\n          operation: acl.operation,\n        });\n        onSuccess();\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const message = error?.message;\n          const { code } = error?.response?.data || {};\n\n          onError(code || \"?\", message);\n        }\n      }\n    },\n    {\n      onSuccess: (_, { adminUrl, instanceId }) => {\n        void queryClient.invalidateQueries([\n          kafkaQueries.instance._root({\n            id: instanceId,\n            adminUrl,\n          }),\n        ]);\n      },\n    }\n  );\n}\n","import type {\n  AclOperationFilter,\n  AclPatternTypeFilter,\n  AclPermissionTypeFilter,\n  AclResourceTypeFilter,\n} from \"@rhoas/kafka-instance-sdk\";\nimport {\n  ConsumerGroupOrderKey,\n  TopicOrderKey,\n} from \"@rhoas/kafka-instance-sdk\";\nimport type { RangeQuery } from \"@rhoas/kafka-management-sdk\";\n\nexport type NoUndefinedField<T> = {\n  [P in keyof T]-?: NoUndefinedField<NonNullable<T[P]>>;\n};\n\nexport type SafeRangeQuery = NoUndefinedField<RangeQuery>;\n\nexport const KafkaInstancesSortableColumns = [\n  \"name\",\n  \"owner\",\n  \"createdAt\",\n  \"provider\",\n  \"region\",\n] as const;\n\nexport type KafkaInstancesSortableColumn =\n  (typeof KafkaInstancesSortableColumns)[number];\n\nexport const KafkaTopicsSortableColumns = [\n  ...Object.values(TopicOrderKey),\n] as const;\n\nexport type KafkaTopicsSortableColumn =\n  (typeof KafkaTopicsSortableColumns)[number];\n\nexport const KafkaConsumerGroupSortableColumns = [\n  ...Object.values(ConsumerGroupOrderKey),\n] as const;\n\nexport type KafkaConsumerGroupSortableColumn =\n  (typeof KafkaConsumerGroupSortableColumns)[number];\n\nexport type AclFilter = {\n  resourceType?: AclResourceTypeFilter;\n  resourceName?: string;\n  patternType?: AclPatternTypeFilter;\n  principal?: string;\n  operation?: AclOperationFilter;\n  permissionType?: AclPermissionTypeFilter;\n};\n","const REACT_QUERY_DEVTOOLS = \"mas.devtools\";\nconst METRICS_LAG_ALERT = \"mas.rhosak.metrics.lag-alert-closed\";\n\nexport function isReactQueryDevToolsEanbled() {\n  return localStorage.getItem(REACT_QUERY_DEVTOOLS) === \"true\";\n}\n\nexport function metricsIsLagAlertsDismissed() {\n  return localStorage.getItem(METRICS_LAG_ALERT) === \"true\";\n}\n\nexport function metricsDismissLagAlerts() {\n  return localStorage.setItem(METRICS_LAG_ALERT, \"true\");\n}\n","import type { Bytes, DateIsoString } from \"../types\";\n\n/**\n * All the details abut a Kafka instance.\n *\n * Unless differently specified, the values marked as accepting `undefined`\n * will come from extra API calls.\n */\nexport type Kafka = {\n  id: string;\n  name: string;\n  createdAt: DateIsoString;\n  updatedAt: DateIsoString;\n  expiryDate: DateIsoString | undefined;\n  owner: string;\n  provider: CloudProvider;\n  region: CloudRegion;\n  status: Status;\n  plan: Plan;\n  size: string | undefined;\n  ingress: number | undefined;\n  egress: number | undefined;\n  storage: Bytes | undefined;\n  maxPartitions: number | undefined;\n  connections: number | undefined;\n  connectionRate: number | undefined;\n  messageSize: Bytes | undefined;\n  billing: \"prepaid\" | MarketplaceSubscription | undefined;\n  az: AZ;\n\n  version: string;\n\n  bootstrapUrl: string | undefined;\n  adminUrl: string | undefined;\n};\nexport type KafkaField = keyof Kafka;\n\n/**\n * Supported Cloud Providers. Extend this to add a new provider, then follow\n * Typescript errors to find where extra information need to be added (images,\n * translations).\n */\nexport type CloudProvider = \"aws\" | \"gcp\" | \"azure\";\n\n/**\n * A Cloud Region. Since this varies between Cloud Providers and has no extra\n * visual attached, we take its name from the API and do no further\n * transformation.\n */\nexport type CloudRegion = string;\n/**\n * Cloud provider multi availability zone\n */\nexport type AZ = \"single\" | \"multi\";\n/**\n * A number that describes how much does an instance cost to create\n */\nexport type Quota = number;\n/**\n * The capabilities of an instance, and its quota cost. Some sizes might not be\n * enabled, eg. because temporarily out of capacity\n */\nexport type Size = {\n  id: string;\n  displayName: string;\n  status: \"stable\" | \"preview\";\n  quota: Quota;\n  ingress: number;\n  egress: number;\n  storage: number;\n  connections: number;\n  connectionRate: number;\n  maxPartitions: number;\n  messageSize: number;\n  isDisabled: boolean;\n};\n/**\n * Paid for instances are `standard`, evaluation instances are `developer`.\n * `standard` instances have a `Quota` associated, and bigger sizes.\n * `developer` instances are free to be created (up to 1 per user), have a\n * single, smaller size option than `standard` ones, and they expire after a\n * few hours.\n *\n * Note: a new kind of evaluation instance is being studied. They will have a\n * long expiration period and bigger sizes.\n */\nexport type Plan = \"standard\" | \"developer\";\n/**\n * All the statuses an instance can be. If new statuses are added, ensure to\n * add them to the relevant status group (`ReadyStatuses` etc.).\n */\nexport const Statuses = [\n  \"ready\",\n  \"degraded\",\n  \"accepted\",\n  \"provisioning\",\n  \"preparing\",\n  \"deprovision\",\n  \"deleting\",\n  \"suspended\",\n  \"suspending\",\n  \"resuming\",\n] as const;\n\nexport type Status = (typeof Statuses)[number];\n\nexport const CreatingStatuses: readonly Status[] = [\n  \"accepted\",\n  \"provisioning\",\n  \"preparing\",\n];\nexport const ReadyStatuses: readonly Status[] = [\"ready\"];\nexport const DegradedStatuses: readonly Status[] = [\"degraded\"];\nexport const SuspendingStatuses: readonly Status[] = [\"suspending\"];\nexport const SuspendedStatuses: readonly Status[] = [\"suspended\"];\nexport const DeletingStatuses: readonly Status[] = [\"deleting\", \"deprovision\"];\nexport const ResumingStatuses: readonly Status[] = [\"resuming\"];\n\nexport const SimplifiedStatuses = {\n  creating: CreatingStatuses,\n  ready: ReadyStatuses,\n  degraded: DegradedStatuses,\n  suspended: SuspendedStatuses,\n  deleting: DeletingStatuses,\n  resuming: ResumingStatuses,\n  suspending: SuspendingStatuses,\n} as const;\nexport type SimplifiedStatus = keyof typeof SimplifiedStatuses;\n\n/**\n * A list of marketplaces where an instance can be billed to\n */\nexport type MarketPlace = CloudProvider | \"rhm\";\n/**\n * List of marketplaces where a user has some subscription\n */\nexport type MarketPlaceSubscriptions = {\n  marketplace: MarketPlace;\n  subscriptions: string[];\n};\n/**\n * A specific marketplace's subscription, assigned as billing option to an\n * instance.\n *\n * Note: the API will provide only the `subscription`; the `MarketPlace` will\n * have to be fetched querying for the `subscription`.\n */\nexport type MarketplaceSubscription = {\n  marketplace: MarketPlace;\n  subscription: string;\n};\n","import { Popover } from \"@patternfly/react-core\";\nimport { OutlinedQuestionCircleIcon } from \"@patternfly/react-icons\";\nimport type { FunctionComponent } from \"react\";\n\ntype ConsumerGroupPopoverProps = {\n  title: string;\n  description: string;\n};\n\nexport const ConsumerGroupPopover: FunctionComponent<\n  ConsumerGroupPopoverProps\n> = ({ title, description }) => {\n  return (\n    <Popover\n      aria-label=\"Consumer groups popover\"\n      headerContent={<div>{title}</div>}\n      bodyContent={<div>{description}</div>}\n    >\n      <OutlinedQuestionCircleIcon />\n    </Popover>\n  );\n};\n","import type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport type { State } from \"ui-models/src/models/consumer-group\";\n\nexport type ConsumerGroupStateLabelProps = {\n  state: State;\n};\n\nexport const ConsumerGroupStateLabel: FunctionComponent<\n  ConsumerGroupStateLabelProps\n> = ({ state }) => {\n  const { t } = useTranslation([\"kafka\"]);\n\n  switch (state) {\n    case \"Stable\":\n      return t(\"consumerGroup.state.stable\");\n    case \"Empty\":\n      return t(\"consumerGroup.state.empty\");\n    case \"Dead\":\n      return t(\"consumerGroup.state.dead\");\n    case \"CompletingRebalance\":\n      return t(\"consumerGroup.state.completing_rebalance\");\n    case \"PreparingRebalance\":\n      return t(\"consumerGroup.state.preparing_rebalance\");\n    case \"Unknown\":\n      return t(\"consumerGroup.state.unknown\");\n    default:\n      return null;\n  }\n};\n","import {\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Stack,\n} from \"@patternfly/react-core\";\nimport {\n  TableComposable,\n  TableVariant,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport type { Consumer, State } from \"ui-models/src/models/consumer-group\";\nimport { ConsumerGroupPopover } from \"./ConsumerGroupPopover\";\nimport { ConsumerGroupStateLabel } from \"./ConsumerGroupState\";\n\nexport type ConsumerGroupByKafkaProps = {\n  state: State;\n  consumers: Consumer[];\n  activeMembers: number;\n  partitionsWithLag: number;\n};\n\nexport const ConsumerGroupByKafka: FunctionComponent<\n  ConsumerGroupByKafkaProps\n> = ({ state, consumers, activeMembers, partitionsWithLag }) => {\n  const { t } = useTranslation([\"kafka\"]);\n\n  const columnNames = {\n    topic: t(\"topic.topic\"),\n    partition: t(\"consumerGroup.partition\"),\n    consumer_id: t(\"consumerGroup.consumer_id\"),\n    current_offset: t(\"consumerGroup.current_offset\"),\n    log_end_offset: t(\"consumerGroup.log_end_offset\"),\n    offset_lag: t(\"consumerGroup.offset_lag\"),\n  };\n\n  return (\n    <Stack hasGutter>\n      <DescriptionList\n        columnModifier={{ lg: \"3Col\" }}\n        className={\"pf-m-display-2xl\"}\n      >\n        <DescriptionListGroup>\n          <DescriptionListTerm>\n            {t(\"consumerGroup.active_members\")}\n          </DescriptionListTerm>\n          <DescriptionListDescription>\n            {activeMembers}\n          </DescriptionListDescription>\n        </DescriptionListGroup>\n        <DescriptionListGroup>\n          <DescriptionListTerm>\n            {t(\"consumerGroup.partitions_with_lag\")}{\" \"}\n            <ConsumerGroupPopover\n              title={t(\"consumerGroup.partitions_with_lag_name\")}\n              description={t(\"consumerGroup.partitions_with_lag_description\")}\n            />\n          </DescriptionListTerm>\n          <DescriptionListDescription>\n            {partitionsWithLag}\n          </DescriptionListDescription>\n        </DescriptionListGroup>\n        <DescriptionListGroup>\n          <DescriptionListTerm>\n            {t(\"consumerGroup.state_header\")}\n          </DescriptionListTerm>\n          <DescriptionListDescription>\n            <ConsumerGroupStateLabel state={state} />\n          </DescriptionListDescription>\n        </DescriptionListGroup>\n      </DescriptionList>\n      <TableComposable\n        aria-label={t(\"consumerGroup.consumer_group_info_table_aria\")}\n        variant={TableVariant.compact}\n      >\n        <Thead noWrap>\n          <Tr>\n            <Th width={20}>{columnNames.topic}</Th>\n            <Th width={20}>{columnNames.partition}</Th>\n            <Th width={20}>{columnNames.consumer_id}</Th>\n            <Th width={20}>{columnNames.current_offset}</Th>\n            <Th width={20}>{columnNames.log_end_offset}</Th>\n            <Th width={20}>{columnNames.offset_lag}</Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          {consumers.map(\n            ({\n              groupId,\n              partition,\n              topic,\n              memberId,\n              offset,\n              logEndOffset,\n              lag,\n            }) => {\n              return (\n                <Tr key={groupId}>\n                  <Td dataLabel={columnNames.topic}>{topic}</Td>\n                  <Td dataLabel={columnNames.partition}>{partition}</Td>\n                  <Td dataLabel={columnNames.consumer_id}>\n                    {memberId ? (\n                      `${groupId}\\n${memberId}`\n                    ) : (\n                      <i>{t(\"consumerGroup.unassigned\")}</i>\n                    )}\n                  </Td>\n                  <Td dataLabel={columnNames.current_offset}>{offset}</Td>\n                  <Td dataLabel={columnNames.log_end_offset}>{logEndOffset}</Td>\n                  <Td dataLabel={columnNames.offset_lag}>{lag}</Td>\n                </Tr>\n              );\n            }\n          )}\n        </Tbody>\n      </TableComposable>\n    </Stack>\n  );\n};\n","import {\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Stack,\n} from \"@patternfly/react-core\";\nimport {\n  TableComposable,\n  TableVariant,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport type { Consumer, State } from \"ui-models/src/models/consumer-group\";\nimport { ConsumerGroupPopover } from \"./ConsumerGroupPopover\";\nimport { ConsumerGroupStateLabel } from \"./ConsumerGroupState\";\n\nexport type ConsumerGroupByTopicProps = {\n  state: State;\n  consumers: Consumer[];\n  activeMembers: number;\n  partitionsWithLag: number;\n};\n\nexport const ConsumerGroupByTopic: FunctionComponent<\n  ConsumerGroupByTopicProps\n> = ({ state, consumers, activeMembers, partitionsWithLag }) => {\n  const { t } = useTranslation([\"kafka\"]);\n\n  const columnNames = {\n    partition: t(\"consumerGroup.partition\"),\n    consumer_id: t(\"consumerGroup.consumer_id\"),\n    current_offset: t(\"consumerGroup.current_offset\"),\n    log_end_offset: t(\"consumerGroup.log_end_offset\"),\n    offset_lag: t(\"consumerGroup.offset_lag\"),\n  };\n\n  return (\n    <Stack hasGutter>\n      <DescriptionList\n        columnModifier={{ lg: \"3Col\" }}\n        className={\"pf-m-display-2xl\"}\n      >\n        <DescriptionListGroup>\n          <DescriptionListTerm>\n            {t(\"consumerGroup.active_members_for_topic\")}\n          </DescriptionListTerm>\n          <DescriptionListDescription>\n            {activeMembers}\n          </DescriptionListDescription>\n        </DescriptionListGroup>\n        <DescriptionListGroup>\n          <DescriptionListTerm>\n            {t(\"consumerGroup.partitions_with_lag_for_topic\")}{\" \"}\n            <ConsumerGroupPopover\n              title={t(\"consumerGroup.partitions_with_lag_name\")}\n              description={t(\"consumerGroup.partitions_with_lag_description\")}\n            />\n          </DescriptionListTerm>\n          <DescriptionListDescription>\n            {partitionsWithLag}\n          </DescriptionListDescription>\n        </DescriptionListGroup>\n        <DescriptionListGroup>\n          <DescriptionListTerm>\n            {t(\"consumerGroup.state_header\")}\n          </DescriptionListTerm>\n          <DescriptionListDescription>\n            {<ConsumerGroupStateLabel state={state} />}\n          </DescriptionListDescription>\n        </DescriptionListGroup>\n      </DescriptionList>\n      <TableComposable\n        aria-label={t(\"consumerGroup.consumer_group_info_table_aria\")}\n        variant={TableVariant.compact}\n      >\n        <Thead noWrap>\n          <Tr>\n            <Th key={columnNames.partition} width={20}>\n              {columnNames.partition}\n            </Th>\n            <Th key={columnNames.consumer_id} width={20}>\n              {columnNames.consumer_id}\n            </Th>\n            <Th key={columnNames.current_offset} width={20}>\n              {columnNames.current_offset}\n            </Th>\n            <Th key={columnNames.log_end_offset} width={20}>\n              {columnNames.log_end_offset}\n            </Th>\n            <Th key={columnNames.offset_lag} width={20}>\n              {columnNames.offset_lag}\n            </Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          {consumers.map(\n            ({ groupId, partition, memberId, offset, logEndOffset, lag }) => {\n              return (\n                <Tr key={groupId}>\n                  <Td dataLabel={columnNames.partition}>{partition}</Td>\n                  <Td dataLabel={columnNames.consumer_id}>\n                    {memberId ? (\n                      `${groupId}\\n${memberId}`\n                    ) : (\n                      <i>{t(\"consumerGroup.unassigned\")}</i>\n                    )}{\" \"}\n                  </Td>\n                  <Td dataLabel={columnNames.current_offset}>{offset}</Td>\n                  <Td dataLabel={columnNames.log_end_offset}>{logEndOffset}</Td>\n                  <Td dataLabel={columnNames.offset_lag}>{lag}</Td>\n                </Tr>\n              );\n            }\n          )}\n        </Tbody>\n      </TableComposable>\n    </Stack>\n  );\n};\n","import type { FunctionComponent } from \"react\";\nimport type { Consumer, State } from \"ui-models/src/models/consumer-group\";\nimport { ConsumerGroupByKafka } from \"./ConsumerGroupByKafka\";\nimport { ConsumerGroupByTopic } from \"./ConsumerGroupByTopic\";\n\nexport type ConsumerGroupDetailsProps = {\n  consumerGroupByTopic: boolean;\n  state: State;\n  activeMembers: number;\n  partitionsWithLag: number;\n  consumers: Consumer[];\n};\n\nexport const ConsumerGroupDetails: FunctionComponent<\n  ConsumerGroupDetailsProps\n> = ({\n  consumerGroupByTopic,\n  state,\n  consumers,\n  activeMembers,\n  partitionsWithLag,\n}) => {\n  return (\n    <div>\n      {consumerGroupByTopic ? (\n        <ConsumerGroupByTopic\n          state={state}\n          consumers={consumers}\n          activeMembers={activeMembers}\n          partitionsWithLag={partitionsWithLag}\n        />\n      ) : (\n        <ConsumerGroupByKafka\n          state={state}\n          consumers={consumers}\n          activeMembers={activeMembers}\n          partitionsWithLag={partitionsWithLag}\n        />\n      )}\n    </div>\n  );\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from \"@patternfly/react-core\";\nimport { CubesIcon } from \"@patternfly/react-icons\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nexport const ConsumerGroupEmptyState: FunctionComponent = () => {\n  const { t } = useTranslation([\"kafka\"]);\n  return (\n    <EmptyState variant={EmptyStateVariant.large}>\n      <EmptyStateIcon icon={CubesIcon} />\n      <Title headingLevel={\"h1\"} size={TitleSizes.lg}>\n        {t(\"consumerGroup.empty_consumer_title\")}\n      </Title>\n      <EmptyStateBody>{t(\"consumerGroup.empty_consumer_body\")}</EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import { Select, SelectOption, SelectVariant } from \"@patternfly/react-core\";\nimport type { SelectProps } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport type { OffsetValue } from \"../types\";\n\nexport type OffsetSelectProps = {\n  value: OffsetValue;\n  onChange: (value: OffsetValue) => void;\n};\n\nexport const OffsetSelect: FunctionComponent<OffsetSelectProps> = ({\n  onChange,\n  value,\n}) => {\n  const { t } = useTranslation(\"kafka\");\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  const onToggle = (isOpen: boolean) => {\n    setIsOpen(isOpen);\n  };\n\n  const offsetValueOption: { [key in OffsetValue]: string } = {\n    absolute: t(\"consumerGroup.offset.absolute\"),\n    latest: t(\"consumerGroup.offset.latest\"),\n    earliest: t(\"consumerGroup.offset.earliest\"),\n  };\n\n  const onSelect: SelectProps[\"onSelect\"] = (_, selection) => {\n    onChange(selection as OffsetValue);\n    setIsOpen(false);\n  };\n\n  const makeOptions = () => {\n    return Object.entries(offsetValueOption).map(([value, label]) => (\n      <SelectOption key={value} value={value}>\n        {label}\n      </SelectOption>\n    ));\n  };\n\n  return (\n    <Select\n      aira-label={t(\"consumerGroup.reset_offset_new_offset_label\")}\n      toggleAriaLabel={t(\"consumerGroup.reset_offset_new_offset_label\")}\n      id={\"offset-select\"}\n      onToggle={onToggle}\n      onSelect={onSelect}\n      variant={SelectVariant.single}\n      isOpen={isOpen}\n      placeholderText={t(\"consumerGroup.select_offset\")}\n      selections={value}\n      menuAppendTo={\"parent\"}\n    >\n      {makeOptions()}\n    </Select>\n  );\n};\n","import { Select, SelectOption, SelectVariant } from \"@patternfly/react-core\";\nimport type { SelectProps } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nexport type TopicSelectProps = {\n  value: string;\n  topics: string[];\n  onChange: (topic: string) => void;\n};\n\nexport const TopicSelect: FunctionComponent<TopicSelectProps> = ({\n  topics,\n  onChange,\n  value,\n}) => {\n  const { t } = useTranslation(\"kafka\");\n\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  const onToggle = (isOpen: boolean) => {\n    setIsOpen(isOpen);\n  };\n\n  const onSelect: SelectProps[\"onSelect\"] = (_, topic) => {\n    onChange(topic as string);\n    setIsOpen(false);\n  };\n\n  return (\n    <Select\n      aira-label={t(\"consumerGroup.reset_offset_topic_label\")}\n      toggleAriaLabel={t(\"consumerGroup.reset_offset_topic_label\")}\n      id={\"topic-select\"}\n      variant={SelectVariant.single}\n      onToggle={onToggle}\n      onSelect={onSelect}\n      isOpen={isOpen}\n      selections={value}\n      placeholderText={t(\"consumerGroup.select_topic\")}\n      menuAppendTo={\"parent\"}\n      isDisabled={topics.length <= 0}\n    >\n      {topics.map((topic, index) => (\n        <SelectOption key={index} value={topic}>\n          {topic}\n        </SelectOption>\n      ))}\n    </Select>\n  );\n};\n","import {\n  Alert,\n  Button,\n  Checkbox,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  Stack,\n  StackItem,\n  TextInput,\n} from \"@patternfly/react-core\";\nimport {\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport { useCallback, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport type { Consumer } from \"ui-models/src/models/consumer-group\";\nimport \"../ConsumerGroup.css\";\nimport type { OffsetValue } from \"../types\";\nimport { OffsetSelect } from \"./OffsetSelect\";\nimport { TopicSelect } from \"./TopicSelect\";\nimport type { FunctionComponent } from \"react\";\nimport type { State } from \"ui-models/src/models/consumer-group\";\n\nexport type ConsumerGroupResetOffsetProps = {\n  isModalOpen: boolean;\n  state: State;\n  groupId: string;\n  topics: string[];\n  consumers: Consumer[];\n  onClickClose: () => void;\n  onClickResetOffset: (\n    topic: string,\n    offset: OffsetValue,\n    partitions: number[],\n    customOffset: string\n  ) => void;\n  disableFocusTrap?: boolean;\n  appendTo?: () => HTMLElement;\n};\n\nexport const ConsumerGroupResetOffset: FunctionComponent<\n  ConsumerGroupResetOffsetProps\n> = ({\n  groupId,\n  topics,\n  onClickClose,\n  isModalOpen,\n  onClickResetOffset,\n  disableFocusTrap,\n  appendTo,\n  consumers,\n  state,\n}) => {\n  const { t } = useTranslation([\"kafka\"]);\n\n  const [selectedTopic, setSelectedTopic] = useState<string>(\"\");\n  const [selectedOffset, setSelectedOffset] = useState<OffsetValue>(\"absolute\");\n  const [customOffsetValue, setcustomOffsetValue] = useState<string>();\n\n  const [isResetAccepted, setIsResetAccepted] = useState<boolean>(false);\n\n  const [selectedConsumer, setSelectedConsumer] = useState<Consumer[]>([]);\n\n  const isDisconnected = state !== \"Stable\";\n\n  const consumerList =\n    consumers.filter((consumer) => consumer.topic === selectedTopic) || [];\n\n  const isResetOffsetDisabled =\n    !selectedTopic ||\n    !selectedOffset ||\n    !isResetAccepted ||\n    !isDisconnected ||\n    selectedConsumer.length === 0;\n\n  const tableColumns = {\n    partition: t(\"consumerGroup.partition\"),\n    clientId: `${t(\"consumerGroup.client_id\")} + ${t(\n      \"consumerGroup.member_id\"\n    )}`,\n    current_offset: t(\"consumerGroup.current_offset\"),\n    log_end_offset: t(\"consumerGroup.log_end_offset\"),\n    offset_lag: t(\"consumerGroup.offset_lag\"),\n    new_offset: t(\"consumerGroup.new_offset\"),\n  };\n\n  const areAllConsumerSelected =\n    selectedConsumer.length === consumerList.length;\n\n  const onSelectAllConsumer = (isSelecting = true) => {\n    setSelectedConsumer(isSelecting ? consumerList : []);\n  };\n\n  const isConsumerSelected = (consumer: Consumer) => {\n    return selectedConsumer.includes(consumer);\n  };\n  const onSelect = (consumer: Consumer, isSelecting = true) => {\n    setSelectedConsumer(\n      isSelecting\n        ? [...selectedConsumer, consumer]\n        : selectedConsumer.filter((r) => r !== consumer)\n    );\n  };\n\n  const onResetOffset = useCallback(() => {\n    const partitions = selectedConsumer.map(({ partition }) => partition);\n    onClickResetOffset(\n      selectedTopic,\n      selectedOffset,\n      partitions,\n      customOffsetValue || \"0\"\n    );\n  }, [\n    onClickResetOffset,\n    selectedTopic,\n    selectedOffset,\n    selectedConsumer,\n    customOffsetValue,\n  ]);\n\n  return (\n    <Modal\n      variant={ModalVariant.large}\n      isOpen={isModalOpen}\n      aria-label={t(\"consumerGroup.reset_offset_modal_label\")}\n      title={t(\"consumerGroup.reset_offset\")}\n      showClose={true}\n      onClose={onClickClose}\n      aria-describedby=\"modal-message\"\n      disableFocusTrap={disableFocusTrap}\n      appendTo={appendTo}\n      position=\"top\"\n      actions={[\n        <Button\n          variant=\"danger\"\n          key={1}\n          isDisabled={isResetOffsetDisabled}\n          onClick={onResetOffset}\n        >\n          {t(\"consumerGroup.reset_offset\")}\n        </Button>,\n        <Button variant=\"link\" key={2} onClick={onClickClose}>\n          {t(\"common:cancel\")}\n        </Button>,\n      ]}\n    >\n      <Stack hasGutter>\n        <StackItem>\n          <Form isHorizontal>\n            <FormGroup\n              className=\"mas--ConsumerGroupResetOffset-form-group--readonly\"\n              label={t(\"consumerGroup.reset_offset_consumer_group_label\")}\n              fieldId=\"consumer-group-input\"\n            >\n              <TextInput\n                readOnlyVariant={\"default\"}\n                type=\"text\"\n                name={t(\"consumerGroup.reset_offset_consumer_group_label\")}\n                id={\"consumer-group-input\"}\n                value={groupId}\n              />\n            </FormGroup>\n            {isDisconnected && (\n              <FormGroup\n                label={t(\"consumerGroup.reset_offset_topic_label\")}\n                fieldId=\"topic-select\"\n              >\n                <TopicSelect\n                  value={selectedTopic}\n                  topics={topics}\n                  onChange={setSelectedTopic}\n                />\n              </FormGroup>\n            )}\n            {isDisconnected && selectedTopic && (\n              <FormGroup\n                label={t(\"consumerGroup.reset_offset_new_offset_label\")}\n                fieldId=\"offset-select\"\n              >\n                <OffsetSelect\n                  value={selectedOffset}\n                  onChange={setSelectedOffset}\n                />\n              </FormGroup>\n            )}\n            {isDisconnected &&\n              selectedTopic &&\n              selectedOffset === \"absolute\" && (\n                <FormGroup\n                  label={t(\"consumerGroup.reset_offset_custom_offset_label\")}\n                  fieldId=\"custom-offset-input\"\n                >\n                  <TextInput\n                    id=\"custom-offset-input\"\n                    name={t(\"consumerGroup.reset_offset_custom_offset_label\")}\n                    value={customOffsetValue}\n                    onChange={setcustomOffsetValue}\n                    type=\"number\"\n                  />\n                </FormGroup>\n              )}\n          </Form>\n        </StackItem>\n        <StackItem>\n          {!isDisconnected && (\n            <Alert\n              className=\"modal-alert\"\n              variant=\"danger\"\n              isInline\n              title={t(\"consumerGroup.reset_offset_connected_alert_title\")}\n            >\n              <p>{t(\"consumerGroup.reset_offset_connected_alert_body\")}</p>\n            </Alert>\n          )}\n        </StackItem>\n        <StackItem>\n          {isDisconnected && consumerList.length > 0 && selectedTopic && (\n            <Stack hasGutter>\n              <StackItem>\n                <TableComposable\n                  aria-label={t(\"consumerGroup.reset_offset_selectable table\")}\n                  className=\"consumer-table\"\n                >\n                  <Thead>\n                    <Tr>\n                      <Th\n                        select={{\n                          onSelect: (_event, isSelecting) =>\n                            onSelectAllConsumer(isSelecting),\n                          isSelected: areAllConsumerSelected,\n                        }}\n                      />\n                      <Th>{tableColumns.partition}</Th>\n                      <Th>{tableColumns.clientId}</Th>\n                      <Th>{tableColumns.current_offset}</Th>\n                      <Th>{tableColumns.log_end_offset}</Th>\n                      <Th>{tableColumns.offset_lag}</Th>\n                      <Th>{tableColumns.new_offset}</Th>\n                    </Tr>\n                  </Thead>\n                  <Tbody>\n                    {consumerList.map((consumer, index) => {\n                      return (\n                        <Tr key={index}>\n                          <Td\n                            select={{\n                              rowIndex: index,\n                              isSelected: isConsumerSelected(consumer),\n                              onSelect: (_event, isSelecting) =>\n                                onSelect(consumer, isSelecting),\n                            }}\n                          />\n                          <Td dataLabel={tableColumns.partition}>\n                            {consumer.partition}\n                          </Td>\n                          <Td dataLabel={tableColumns.clientId}>\n                            {String(consumer.groupId)}\n                            {String(consumer.memberId)}\n                          </Td>\n                          <Td dataLabel={tableColumns.current_offset}>\n                            {consumer.offset}\n                          </Td>\n                          <Td dataLabel={tableColumns.log_end_offset}>\n                            {consumer.logEndOffset}\n                          </Td>\n                          <Td dataLabel={tableColumns.offset_lag}>\n                            {consumer.lag}\n                          </Td>\n                          <Td dataLabel={tableColumns.offset_lag}>\n                            {isConsumerSelected(consumer) && selectedOffset\n                              ? selectedOffset === \"absolute\"\n                                ? customOffsetValue || 0\n                                : selectedOffset\n                              : \"-\"}\n                          </Td>\n                        </Tr>\n                      );\n                    })}\n                  </Tbody>\n                </TableComposable>\n              </StackItem>\n              <StackItem>\n                <Checkbox\n                  label={t(\"consumerGroup.reset_offset_accept\")}\n                  id=\"resetoffset-checkbox\"\n                  isChecked={isResetAccepted}\n                  onChange={setIsResetAccepted}\n                />\n              </StackItem>\n            </Stack>\n          )}\n        </StackItem>\n      </Stack>\n    </Modal>\n  );\n};\n","import { Alert, Text } from \"@patternfly/react-core\";\nimport { DeleteModal } from \"@rhoas/app-services-ui-components\";\nimport type { FunctionComponent } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport type { State } from \"ui-models/src/models/consumer-group\";\n\nexport type DeleteConsumerGroupProps = {\n  isModalOpen: boolean;\n  onClose: () => void;\n  onDeleteConsumer: () => void;\n  state: State;\n  consumerName: string;\n  appendTo: () => HTMLElement;\n  disableFocusTrap?: boolean;\n};\n\nexport const DeleteConsumerGroup: FunctionComponent<\n  DeleteConsumerGroupProps\n> = ({\n  isModalOpen,\n  onClose,\n  onDeleteConsumer,\n  state,\n  consumerName,\n  appendTo,\n  disableFocusTrap,\n}) => {\n  const { t } = useTranslation(\"kafka\");\n\n  const isConsumerConnected = state === \"Stable\";\n\n  return (\n    <div>\n      <DeleteModal\n        isDeleting={false}\n        isModalOpen={isModalOpen}\n        title={t(\"consumerGroup.delete\")}\n        onCancel={onClose}\n        onDelete={onDeleteConsumer}\n        variant={\"non-destructive\"}\n        appendTo={appendTo}\n        disableFocusTrap={disableFocusTrap}\n        isDisabled={isConsumerConnected}\n      >\n        {isConsumerConnected ? (\n          <Alert\n            className=\"modal-alert\"\n            variant=\"danger\"\n            isInline\n            title={t(\"consumerGroup.delete_consumer_connected_alert_title\", {\n              name: consumerName,\n            })}\n          >\n            {t(\"consumerGroup.delete_consumer_connected_alert_body\")}\n          </Alert>\n        ) : (\n          <Text id=\"modal-message\">\n            <Trans\n              ns={\"kafka\"}\n              i18nKey={\"consumerGroup.consumer_group_delete_message\"}\n              values={{\n                name: consumerName,\n              }}\n            />\n          </Text>\n        )}\n      </DeleteModal>\n    </div>\n  );\n};\n","import {\n  Drawer,\n  DrawerActions,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerContentBody,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerPanelContent,\n  Dropdown,\n  DropdownItem,\n  DropdownPosition,\n  KebabToggle,\n  Text,\n  TextContent,\n  TextVariants,\n  Title,\n} from \"@patternfly/react-core\";\nimport type { FunctionComponent, ReactNode } from \"react\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport type { Consumer, State } from \"ui-models/src/models/consumer-group\";\nimport \"./ConsumerGroup.css\";\nimport { ConsumerGroupDetails } from \"./ConsumerGroupDetails\";\n\nexport type ConsumerGroupDrawerProps = {\n  children: ReactNode;\n  consumerGroupByTopic: boolean;\n  state: State;\n  activeMembers: number;\n  partitionsWithLag: number;\n  consumers: Consumer[];\n  groupId: string;\n  onSelectDeleteConsumerGroup: () => void;\n  onSelectResetOffsetConsumerGroup: () => void;\n  isExpanded: boolean;\n  onClickClose: () => void;\n};\n\nexport const ConsumerGroupDrawer: FunctionComponent<\n  ConsumerGroupDrawerProps\n> = ({\n  children,\n  consumerGroupByTopic,\n  state,\n  activeMembers,\n  partitionsWithLag,\n  consumers,\n  groupId,\n  onSelectDeleteConsumerGroup,\n  onSelectResetOffsetConsumerGroup,\n  isExpanded,\n  onClickClose,\n}) => {\n  const { t } = useTranslation([\"kafka\"]);\n\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  const onToggle = (isOpen: boolean) => {\n    setIsOpen(isOpen);\n  };\n  const onSelect = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const dropdownItems = [\n    <DropdownItem key=\"reset offset\" onClick={onSelectResetOffsetConsumerGroup}>\n      {t(\"consumerGroup.reset_offset\")}\n    </DropdownItem>,\n    <DropdownItem key=\"delete\" onClick={onSelectDeleteConsumerGroup}>\n      {t(\"common:delete\")}\n    </DropdownItem>,\n  ];\n\n  const panelContent = (\n    <DrawerPanelContent widths={{ default: \"width_50\" }}>\n      <DrawerHead>\n        <TextContent>\n          <Text\n            component={TextVariants.small}\n            className={\"consumer-group-drawer__top-label\"}\n          >\n            {t(\"consumerGroup.consumer_group_id\")}\n          </Text>\n          <Title headingLevel={\"h1\"} className={\"consumer-group-drawer__title\"}>\n            {groupId}\n          </Title>\n        </TextContent>\n        <DrawerActions>\n          <Dropdown\n            onSelect={onSelect}\n            toggle={<KebabToggle onToggle={onToggle} id=\"toggle-data-plane\" />}\n            dropdownItems={dropdownItems}\n            isOpen={isOpen}\n            isPlain\n            position={DropdownPosition.right}\n          />\n          <DrawerCloseButton onClick={onClickClose} />\n        </DrawerActions>\n      </DrawerHead>\n      <DrawerPanelBody>\n        <ConsumerGroupDetails\n          consumerGroupByTopic={consumerGroupByTopic}\n          state={state}\n          activeMembers={activeMembers}\n          partitionsWithLag={partitionsWithLag}\n          consumers={consumers}\n        />\n      </DrawerPanelBody>\n    </DrawerPanelContent>\n  );\n\n  return (\n    <Drawer\n      isExpanded={isExpanded}\n      data-ouia-app-id={\"dataPlane-consumerGroupDetails\"}\n      isInline={true}\n    >\n      <DrawerContent panelContent={panelContent}>\n        <DrawerContentBody className=\"consumer-group-drawer__drawer-content-body\">\n          {children}\n        </DrawerContentBody>\n      </DrawerContent>\n    </Drawer>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport type {\n  CloudProvider,\n  KafkaField,\n  SimplifiedStatus,\n  Status,\n} from \"ui-models/src/models/kafka\";\n\nexport function useKafkaLabels() {\n  const { t } = useTranslation(\"kafka\");\n\n  const statuses: { [status in Status]: string } = {\n    ready: t(\"statuses.ready\"),\n    degraded: t(\"statuses.degraded\"),\n    accepted: t(\"statuses.accepted\"),\n    provisioning: t(\"statuses.provisioning\"),\n    preparing: t(\"statuses.preparing\"),\n    deprovision: t(\"statuses.deprovision\"),\n    deleting: t(\"statuses.deleting\"),\n    suspended: t(\"statuses.suspended\"),\n    suspending: t(\"statuses.suspending\"),\n    resuming: t(\"statuses.resuming\"),\n  };\n  const statusesSimplified: { [status in SimplifiedStatus]: string } = {\n    creating: t(\"statusesSimplified.creating\"),\n    ready: t(\"statusesSimplified.ready\"),\n    degraded: t(\"statusesSimplified.degraded\"),\n    deleting: t(\"statusesSimplified.deleting\"),\n    suspended: t(\"statusesSimplified.suspended\"),\n    suspending: t(\"statusesSimplified.suspending\"),\n    resuming: t(\"statusesSimplified.resuming\"),\n  };\n  const providers: { [provider in CloudProvider]: string } = {\n    aws: t(\"common:cloudProviders.aws\"),\n    gcp: t(\"common:cloudProviders.gcp\"),\n    azure: t(\"common:cloudProviders.azure\"),\n  };\n  const providerRegions: {\n    [provider in CloudProvider]: { [region: string]: string };\n  } = {\n    aws: {},\n    gcp: {},\n    azure: {},\n  };\n  const fields: {\n    [field in KafkaField]: string;\n  } = {\n    id: t(\"fields.id\"),\n    name: t(\"fields.name\"),\n    createdAt: t(\"fields.createdAt\"),\n    updatedAt: t(\"fields.updatedAt\"),\n    expiryDate: t(\"fields.expiryDate\"),\n    owner: t(\"fields.owner\"),\n    provider: t(\"fields.provider\"),\n    region: t(\"fields.region\"),\n    status: t(\"fields.status\"),\n    plan: t(\"fields.plan\"),\n    size: t(\"fields.size\"),\n    ingress: t(\"fields.ingress\"),\n    egress: t(\"fields.egress\"),\n    storage: t(\"fields.storage\"),\n    maxPartitions: t(\"fields.maxPartitions\"),\n    connections: t(\"fields.connections\"),\n    connectionRate: t(\"fields.connectionRate\"),\n    messageSize: t(\"fields.messageSize\"),\n    billing: t(\"fields.billing\"),\n    adminUrl: t(\"fields.adminUrl\"),\n    bootstrapUrl: t(\"fields.bootstrapUrl\"),\n    version: t(\"fields.version\"),\n    az: t(\"fields.availabilityZone\"),\n  };\n  return {\n    fields,\n    statuses,\n    statusesSimplified,\n    providers,\n    providerRegions,\n  };\n}\n","import { useTranslation } from \"react-i18next\";\nimport type { TopicField } from \"ui-models/src/models/topic\";\n\nexport function useTopicLabels() {\n  const { t } = useTranslation(\"topic\");\n\n  const fields: {\n    [field in TopicField]: string;\n  } = {\n    name: t(\"fields.name\"),\n    partitions: t(\"fields.partitions\"),\n    \"cleanup.policy\": t(\"fields.cleanup_policy\"),\n    \"delete.retention.ms\": t(\"fields.delete_retention_ms\"),\n    \"max.compaction.lag.ms\": t(\"fields.max_compaction_lag_ms\"),\n    \"max.message.bytes\": t(\"fields.max_message_bytes\"),\n    \"message.downconversion.enable\": t(\"fields.message_downconversion_enable\"),\n    \"message.timestamp.difference.max.ms\": t(\n      \"fields.message_timestamp_difference_max_ms\"\n    ),\n    \"message.timestamp.type\": t(\"fields.message_timestamp_type\"),\n    \"min.compaction.lag.ms\": t(\"fields.min_compaction_lag_ms\"),\n    \"retention.bytes\": t(\"fields.retention_bytes\"),\n    \"retention.ms\": t(\"fields.retention_ms\"),\n    \"segment.bytes\": t(\"fields.segment_bytes\"),\n    \"segment.ms\": t(\"fields.segment_ms\"),\n    \"compression.type\": t(\"fields.compression_type\"),\n    \"file.delete.delay.ms\": t(\"fields.file_delete_delay_ms\"),\n    \"flush.messages\": t(\"fields.flush_messages\"),\n    \"flush.ms\": t(\"fields.flush_ms\"),\n    \"follower.replication.throttled.replicas\": t(\n      \"fields.follower_replication_throttled_replicas\"\n    ),\n    \"index.interval.bytes\": t(\"fields.index_interval_bytes\"),\n    \"leader.replication.throttled.replicas\": t(\n      \"fields.leader_replication_throttled_replicas\"\n    ),\n    \"message.format.version\": t(\"fields.message_format_version\"),\n    \"min.cleanable.dirty.ratio\": t(\"fields.min_cleanable_dirty_ratio\"),\n    \"min.insync.replicas\": t(\"fields.min_insync_replicas\"),\n    \"segment.index.bytes\": t(\"fields.segment_index_bytes\"),\n    \"segment.jitter.ms\": t(\"fields.segment_jitter_ms\"),\n    \"unclean.leader.election.enable\": t(\n      \"fields.unclean_leader_election_enable\"\n    ),\n    preallocate: t(\"fields.preallocate\"),\n  };\n  return {\n    fields,\n  };\n}\n","import { useTranslation } from \"react-i18next\";\nimport type { ConsumerGroupField } from \"ui-models/src/models/consumer-group\";\n\nexport function useConsumerGroupLabels() {\n  const { t } = useTranslation(\"kafka\");\n\n  const fields: {\n    [field in ConsumerGroupField]: string;\n  } = {\n    groupId: t(\"consumerGroup.consumer_group_id\"),\n    activeConsumers: t(\"consumerGroup.active_members\"),\n    laggingPartitions: t(\"consumerGroup.partitions_with_lag\"),\n    state: t(\"consumerGroup.state_header\"),\n  };\n  return {\n    fields,\n  };\n}\n","import { PageSection } from \"@patternfly/react-core\";\nimport { TableVariant } from \"@patternfly/react-table\";\nimport type { TableViewProps } from \"@rhoas/app-services-ui-components\";\nimport {\n  EmptyStateNoResults,\n  TableView,\n} from \"@rhoas/app-services-ui-components\";\nimport { useTranslation } from \"react-i18next\";\nimport type {\n  ConsumerGroup,\n  ConsumerGroupField,\n} from \"ui-models/src/models/consumer-group\";\nimport { ConsumerGroupEmptyState, ConsumerGroupStateLabel } from \"./components\";\nimport { useConsumerGroupLabels } from \"../../hooks\";\n\ntype SubUnion<T, U extends T> = U;\n\nconst Columns: SubUnion<\n  ConsumerGroupField,\n  \"groupId\" | \"activeConsumers\" | \"laggingPartitions\" | \"state\"\n>[] = [\"groupId\", \"activeConsumers\", \"laggingPartitions\", \"state\"];\n\nexport type ConsumerGroupsProps<T extends ConsumerGroup> = {\n  consumers: Array<T> | undefined;\n  onDelete: (row: T) => void;\n  onViewPartition: (row: T) => void;\n  onViewResetOffset: (row: T) => void;\n  consumerName: string[];\n  onSearchConsumer: (value: string) => void;\n  onRemoveConsumerChip: (value: string) => void;\n  onRemoveConsumerChips: () => void;\n} & Pick<\n  TableViewProps<T, (typeof Columns)[number]>,\n  | \"itemCount\"\n  | \"page\"\n  | \"perPage\"\n  | \"onPageChange\"\n  | \"isRowSelected\"\n  | \"isColumnSortable\"\n  | \"onClearAllFilters\"\n>;\n\nexport const ConsumerGroups = <T extends ConsumerGroup>({\n  consumers,\n  onDelete,\n  onViewPartition,\n  isColumnSortable,\n  itemCount,\n  onViewResetOffset,\n  onClearAllFilters,\n  page,\n  perPage,\n  onPageChange,\n  consumerName,\n  onSearchConsumer,\n  onRemoveConsumerChip,\n  onRemoveConsumerChips,\n}: ConsumerGroupsProps<T>) => {\n  const { t } = useTranslation(\"kafka\");\n\n  const labels = useConsumerGroupLabels();\n\n  const isFiltered = consumerName.length > 0;\n  return (\n    <PageSection isFilled={true} hasOverflowScroll={true} aria-label={\"TODO\"}>\n      <TableView\n        variant={TableVariant.compact}\n        tableOuiaId={\"card-table\"}\n        ariaLabel={t(\"consumerGroup.consumer_group_list\")}\n        data={consumers}\n        columns={Columns}\n        renderHeader={({ column, Th, key }) => (\n          <Th\n            key={key}\n            info={\n              column === \"laggingPartitions\"\n                ? {\n                    popover: (\n                      <div>\n                        {t(\"consumerGroup.partitions_with_lag_description\")}\n                      </div>\n                    ),\n                    ariaLabel: \"partitions with lag\",\n                    popoverProps: {\n                      headerContent: t(\n                        \"consumerGroup.partitions_with_lag_name\"\n                      ),\n                    },\n                  }\n                : undefined\n            }\n          >\n            {labels.fields[column]}\n          </Th>\n        )}\n        renderCell={({ column, row, Td, key }) => {\n          return (\n            <Td key={key} dataLabel={labels.fields[column]}>\n              {(() => {\n                switch (column) {\n                  case \"groupId\":\n                    return row.groupId;\n                  case \"activeConsumers\":\n                    return row.activeConsumers;\n                  case \"laggingPartitions\":\n                    return row.laggingPartitions;\n                  case \"state\":\n                    return <ConsumerGroupStateLabel state={row.state} />;\n                }\n              })()}\n            </Td>\n          );\n        }}\n        renderActions={({ row, ActionsColumn }) => (\n          <ActionsColumn\n            items={[\n              {\n                title: t(\"consumerGroup.view_partitions_offsets\"),\n                onClick: () => onViewPartition(row),\n              },\n              {\n                title: t(\"consumerGroup.reset_offset\"),\n                onClick: () => onViewResetOffset(row),\n              },\n              {\n                title: t(\"common:delete\"),\n                onClick: () => onDelete(row),\n              },\n            ]}\n          />\n        )}\n        isColumnSortable={isColumnSortable}\n        filters={{\n          [labels.fields.groupId]: {\n            type: \"search\",\n            chips: consumerName,\n            onSearch: onSearchConsumer,\n            onRemoveChip: onRemoveConsumerChip,\n            onRemoveGroup: onRemoveConsumerChips,\n            validate: (value: string) => !/[\"$^<>|+%/;:,\\s*=~#()]/.test(value),\n            errorMessage: t(\"input_field_invalid_message\"),\n          },\n        }}\n        itemCount={itemCount}\n        page={page}\n        onPageChange={onPageChange}\n        perPage={perPage}\n        isFiltered={isFiltered}\n        onClearAllFilters={onClearAllFilters}\n        emptyStateNoData={<ConsumerGroupEmptyState />}\n        emptyStateNoResults={<EmptyStateNoResults />}\n      />\n    </PageSection>\n  );\n};\n","import {\n  Level,\n  LevelItem,\n  PageSection,\n  PageSectionVariants,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\n\nexport const ControlPlaneHeader: VoidFunctionComponent = () => {\n  const { t } = useTranslation();\n\n  return (\n    <PageSection\n      variant={PageSectionVariants.light}\n      hasShadowBottom={true}\n      stickyOnBreakpoint={{ default: \"top\" }}\n    >\n      <Level>\n        <LevelItem>\n          <TextContent>\n            <Text component=\"h1\">{t(\"kafka:table.title\")}</Text>\n          </TextContent>\n        </LevelItem>\n      </Level>\n    </PageSection>\n  );\n};\n","import type { CloudProvider, CloudRegion } from \"ui-models/src/models/kafka\";\nimport type { CloudProviderInfo } from \"../types\";\n\nexport function onProviderChange(\n  providers: CloudProviderInfo[],\n  provider: CloudProvider\n): { provider: CloudProvider; region: CloudRegion | undefined } {\n  const selectedProvider = providers.find((p) => p.id === provider);\n  const region =\n    selectedProvider?.defaultRegion ||\n    selectedProvider?.regions.filter((r) => !!r.isDisabled === false)[0]?.id;\n  return { provider, region };\n}\n","import {\n  CloudProvider,\n  CloudRegion,\n  MarketplaceSubscription,\n  Size,\n} from \"ui-models/src/models/kafka\";\nimport { assign, createMachine, send, sendParent } from \"xstate\";\nimport {\n  CreateKafkaFormData,\n  CreateKafkaInstanceError,\n  StandardPlanInitializationData,\n  StandardSizes,\n} from \"../types\";\nimport { onProviderChange } from \"./shared\";\n\nexport type StandardPlanMachineContext = {\n  // initial data coming from the APIs\n  capabilities: StandardPlanInitializationData;\n\n  // what the user is selecting\n  form: {\n    name?: string;\n    provider?: CloudProvider;\n    region?: CloudRegion;\n    size?: Size;\n    billing?: MarketplaceSubscription | \"prepaid\";\n  };\n\n  // based on the form.provider selection\n\n  // based on the form.provider and form.region selection\n  sizes: StandardSizes | undefined;\n\n  creationError: CreateKafkaInstanceError | undefined;\n};\n\nexport const StandardPlanMachine =\n  /** @xstate-layout N4IgpgJg5mDOIC5SwC4EMB2E0CcIAUAbTAWTQGMALASwzADoA3MHagMwE8BBRta4gEb9qKDgGJEoAA4B7WCOoyMkkAA9EAZgAcARnoBOfQAYdOrQHYArABYNAJnMAaEB0Q6j++reuXL5k3bWWpY65gC+Yc6omNh4RKQUNHT05Eps1FAArqwYUPTRKJmwYuQ4YGgoYCqy8iiKykhqmjp29OYW5hpGQYG+zq4Ilvoa9KZGlh4a5joAbPqBEVHoWLgExBhkVLQMqRjpWTl5bDI4ALZMaITUEGLpYIQQAJIYvFcQ1XIKSirqCKGG9Ds+ksU1m5n0M2s1n0-UQdgmllGdjsOj8QJm7ihixA0RWcXWmySOzSGWytCOJ3Or2uYlgmQEpxEH1q9R+bmMnnMnRR9n8di0RjssIQ-MFo2sgQ81lCGjm2NxsTWCS2yV2+zJuXoxzO+TQjHJJTKFTAAGVMuRyHB4I0al8GqBfoEZlp6FpISYdBp7PprFZhaK9JDAuDproQfLlor4htEtsUiSDuStZTdfrcobypUAKI4HAnZl2tkinn0WVTFFQrS+mb+jEzehzMz84btazjCMxVbRwlxtWkw7Js63aj3J4vS7XAt1b6NR0+etaWXzPmQmsuOGmRGWfmWRchbctGYdvFKmMq4l7ftJu4PWD0DBoU4ManYSoSG2faf2poIIL15GmDo+iLkBdhGOYa4DLMUKjKCljOkYbrDFox5RgSsaqgmGpHCOt73o+YAZsaU6srObj2F45gSn4UIaDY7QaMKMouohVgzNuHhgRoOioV26HnvGl6JpqN4QHeD5PmIElgAAwpQmAwCRM4OuRrS+tRVG2PRi5MexrSojM9iIW2VgSrx+LKkSgnqgOol3lIeb6hALAXG8xrvtIn6kSpgxAm00IosiEEzDMTjriKHj1hMEIoqE1iGeYdjmaePaYUJ2FarhYn0A5MhOSwRGVEp36-J6alUfCml0b6Onhci8UGJxnoSuBGj6Ml3YYReNnXll9mOdcBW5flOByQpVQfiyyk-mVlEabR2mMXVUr0EYgo+qGQHtJYHX8VZfbCTho53mUUD1K51zucVRYHl4hg6EEPisdYTHwkYgLDNKRjsSF0I7ZEOKRnxlm9lhtl9fQp31IVE2eVNJWqXNlULTVS1QXR5iAqidgzCYApui0u0g2lPUiRDUNKGIw2DaN8m5LDIC2l+RazepyNaajTFdJ4OM8hBnRejxAMKsDZ77WDvXHZDYBnZTFMYGN9PXWRfwUWzNEcwxTEGaWvgWA9Gg+P41hE2LoPpeDUvyAAXs+E6voRys+b6gbcW7czQu4tUDA44KrZCsogfyXqm6l3VXmTVvULb9CEDIaAQAaEBKAwtCMDIADWDAixZZskxHR14TbDBxwn5IIGnMjkBU9QANpGAAuk7P6gvQNi6HY2gPVCwr2HRbS6PoVG7lYQyh111kF5lUcx6XifpiweY4DlxAoNq5w5ylE8HRldn5NHJfx-PUAVy8Vc10o9dN5NhYq9uLqBMiwEWBKneWL3vKrSEiHDOBILDOPASO9LZFwPjDZujpQq6wAuxYwoEpj+n-qMT0254KG3ig9QB4sLaS1AbbKmA1nK03GhAtwi4sYeisPMQw9hay4wML6RKhhvrgiFksTsucw6T0OtPPBhF5aK0UjfZmKtcYuh9GBQwGIUS1kNgYT6Ewfqd26Fg82pNC7ZWLrSA+giGZM28j+KiLopjbkhPrcCuhaweGgT4Ux-hZj-XYSeTqQCJaRz4WIIQhAri5F0aQ388E26NnYuCZcEEXp1VxpjAmVYqKsOBEeYWQNOHbzcRou8XifF5BfFdYRBjfjbhGFoAUZjZjLj8L3YpmM1pWHCZVGYONVH5x4XvTJSYlCEA4GaAQsBSjUCkF+YosB7hgHICgbpvTWADIMfo6apU1rWDaO6EKa0goNMqfoPQ-gbC4x9MBQUGgmnhxaRDNpmoHJgCkHwCAXAsATL6dMpQQyRljPuVMkRcNb4+UPIiYpQI9y7ngsBYU3hFlrU9GYjwIRwhJI4VvVxOD3HZTOXkC5Vzri3IgG8-pgzaQvJQPgMo6L3h5LmW4IwUxXS7i9L4KwswtAgr7m3FEQxEq6EhEc7hu9Tn8CyQQvKNM-GkoRqres3FURxPsMiIEvdAUD0XIhHG8VEKOMBnClx2D1G8LEmIZOyQCjZ2SfCzVU87L+NmOMNo7hxjlgaYbd+kT+6aWCG-XcSrOXAKTinfI6BKg+vVXtNRBd-H8hxq6aUxtfQmCkf6WU9YWhgUqiETEEQAYYBkM5a0yAjUarjMwVgnAeB8EEMIUQ-iQjhtCm1WUEofTjGFFYAw3oQj2p9NRTleUWAAEVMgyHQP4gUIxOLQh8FoX2DLwoJtLI9cFWg63TESU4tCxNU4YFxJaAAqg+Xg-A0ACEIHoryZKEBcnep0NtwQuTSIdT7ClrpQoonmC0XQa1F1qucYG5I8tYBbr1MWvdB7-FckWdCYpD1+RujHTCOqVZSwB3GMiRcwxZgerSf6wod5MhrvpIyFAlQSWfI+TNRCpY2pVhCI+jmwohg8zilRA2Y7fSocRXkAoRR8g4ZEPh-x84DBmGlPjLko8IkDAXatLoi54Sd3hPBZjWq2NZsZkekVsGvTAR8C0ICVHwoTBdKYUKLbkSsQhHJ01KY0723NeCRZnpNkmFCqEMdsaUSrWYd0LkgcTOwo-SurltkUwvis8BUY4EMQ-3cA9G9cJcYjFCmtYIQRhhzEOd55dedjm7xTLAPU5IQ0oIbBYDw4x5wojCj7Kw+lZScV8PCT0pmWlZb1JAENCUDDhOs8CYI-pwSIgabFHGHtMGpdFlwz1IlKRWf8LBOzYJHNCmWl0Nura51uu+vV7lUtpL0DAKcAZAxCP5MQEw0YhS2xoJqhOqCiUh3OmleMCEKWl0jdSSx7V4kCL0As28c1asKoa2qlrSd4J6zdG+h0MEXoTbDZSQirVe8tuBeFSzKiDYfT0UMqYkETFNkg4Mu0aY4xFxQ6ezDk1JzNsfZyUVJHKtDYjDavMKTc6vSdyYtd-2Y6jNDEMutkB2VpLmpI+rKqi0mK+E8AbX0QJWXGCStD41Qbyd4WpkQi6Dt-HaHrMubiHmTJukghuaEXhdzPo8BCFbvPcHZRVy5L7k4affJsICbQSrDBAiHlFkUXRFluk7nReYY7nQwpJwr5pG3leEJcojg7x6Kv+yCBYEEtWuT+gep4UdpupEW-l7msPfP+oCqIYLl0wuUaA9vdYta8xDJei6EYy3SKToy3OlTw98MixTBdKFAWLQbBlTK+RO9gR+NfW4vFFCOfP0Zfz9LWWGBPvjm+w7maExkG8lCCCQUtimLSkRPSl3zokNDZD7n6fVum9z7V0BxbDnBQNOdEBSEXMh8CahO4MfzoG-pNnzM5TLMhd-Yi6cyTrgR6CygoiJ7BAhQhRf5vb7wxyt4a7tANidD6bDwPrzY+wOYNiBCc4hTNiPbvppajZoZ7zFyfYQCAbL6lQUQgiGygFuztDwjdYQjiZQiigZ5vqbyn5+bn7wEMCJzZb7rNbUGIAdBeC6DcRVheiSGYFwjAh6DAgmCKJWDaA+CwFkEHz0AADufAdQuQAAYicD2n2mgD9q0HQVMLyNMDjAguFDSnoOMF7L-KoQApPr5mNt-uQZ2jgCYf2qIarBYZDgwZ6EwZ7l0HeozoqkEBYhPiflPrwY3vwVfgEZspyPZohuxN6HIQgBJmAdIdtA5tCMHkQc9rDqahDOQYvPmAEbNJYdyFyIeHYQMM2qtG2GVDaozhoZUVoXPLlgERBLFtoPfAKFCEMCJs0MMG0IlNuCGIuJ-u4elokV4QfMXktl6A0TYQlP6D4DZkBH3uBMPKqtwQkZ4XASimrsRLUdoI1J0IZBSn4HAuEZIf5C1O4EMJ3GwqUaToruHsirykmOmiaPivUAAEpgAACOmQ1AZQBGSm7eKs+WEw6+OuVe4RChro1mI6iE0a3RUsFxHSXS9IkyOK9Qd4ducJsyKmKOFiEq0wPQNglSwQowwQ0EYE-GcR3xoeZ+SRBJGAnS2Kjya6KRMeIqkWmMf4-IwOdqD0vcGJ0IkObq7Q4wXBOapxpBPK3i7S-JRJPSDygyA6q+tJfg9JY6jJ9hFUWMkIoQDEDSnJJxHhGp+JAJ5yRK1ymKgpgy22u2ZaARFgIw8IxgGmFKDgoQjKoQq0AQ9qjmwIeJeEFxaK7pdyxJ+pZJHGep7yv+CJ3yfIXgtmfeW0Y6l2iAb+Yq7QAo2y7g8IcZ-xWprplySZWKKZmZTyOUbp9uopRYzCroHgi4i4dKesIKtg6egoxSJSbU0wNZGSLpqK7ZNyyZGZpJTyA6RugZ3Q386+A+v4qIQ6r8hsVZvIU59AKK5qpgbcIZ0wqJUKsqa0bQPo7EFiEoKGixJBr2ZqfpIGgBZe3siAhgxizoY+-Ib+xSX+-i9Cam5GmmPo1UjKe+iGypYEVYJgnK2WzAlJf+Ks-yUUmyJp9Bl5saQwDYJgTCa0Y+boRyIa0S8U56NaQIZ2ORrQwwaR3oNewEz5EQQAA */\n  createMachine(\n    {\n      context: {\n        capabilities: {} as StandardPlanInitializationData,\n        sizes: undefined,\n        form: {},\n        creationError: undefined,\n      },\n      tsTypes: {} as import(\"./StandardPlanMachine.typegen\").Typegen0,\n      predictableActionArguments: true,\n      schema: {\n        context: {} as StandardPlanMachineContext,\n        events: {} as\n          | { type: \"fieldInvalid\" }\n          | { type: \"nameChange\"; name: string }\n          | { type: \"providerChange\"; provider: CloudProvider }\n          | { type: \"regionChange\"; region: CloudRegion }\n          | { type: \"sizeChange\"; size: Size }\n          | {\n              type: \"selectSubscription\";\n              subscription: MarketplaceSubscription;\n            }\n          | { type: \"selectPrepaid\" }\n          | { type: \"billingChange\" }\n          | { type: \"nameIsValid\" }\n          | { type: \"nameIsInvalid\" }\n          | { type: \"nameIsTaken\" }\n          | { type: \"submit\" }\n          | { type: \"create\" }\n          | { type: \"createSuccess\" }\n          | { type: \"createError\"; error: CreateKafkaInstanceError },\n        services: {} as {\n          getSizes: {\n            data: StandardSizes;\n          };\n        },\n      },\n      initial: \"verifyAvailability\",\n      id: \"standardPlanMachine\",\n      states: {\n        verifyAvailability: {\n          entry: \"setInitialContext\",\n          always: [\n            {\n              cond: \"isOverQuota\",\n              target: \"overQuota\",\n            },\n            {\n              cond: \"isInstanceUnavailable\",\n              target: \"instanceUnavailable\",\n            },\n            {\n              cond: \"isRegionsUnavailable\",\n              target: \"regionsUnavailable\",\n            },\n            {\n              target: \"configuring\",\n            },\n          ],\n        },\n        overQuota: {\n          tags: \"blocked\",\n        },\n        instanceUnavailable: {\n          tags: \"blocked\",\n        },\n        regionsUnavailable: {\n          tags: \"blocked\",\n        },\n        configuring: {\n          type: \"parallel\",\n          states: {\n            status: {\n              initial: \"unsubmitted\",\n              states: {\n                unsubmitted: {\n                  tags: \"unsubmitted\",\n                },\n                submitted: {\n                  entry: \"triggerSubmit\",\n                  tags: \"submitted\",\n                },\n              },\n              on: {\n                create: {\n                  description:\n                    \"Save is enabled all the time, if it's clicked before the form is completely filled out we should show the validation for all errored fields\",\n                  target: \".submitted\",\n                },\n              },\n            },\n            form: {\n              initial: \"invalid\",\n              states: {\n                invalid: {\n                  tags: \"formInvalid\",\n                },\n                valid: {\n                  entry: \"resetCreationErrorMessage\",\n                  tags: \"creatable\",\n                  on: {\n                    fieldInvalid: {\n                      target: \"invalid\",\n                    },\n                    submit: {\n                      target: \"saving\",\n                    },\n                  },\n                },\n                saving: {\n                  entry: [\"resetCreationErrorMessage\", \"triggerSave\"],\n                  tags: \"formSaving\",\n                  on: {\n                    createSuccess: {\n                      target: \"saved\",\n                    },\n                    createError: {\n                      actions: \"setCreationError\",\n                      target: \"invalid\",\n                    },\n                  },\n                },\n                saved: {\n                  type: \"final\",\n                },\n              },\n              on: {\n                fieldInvalid: {\n                  description:\n                    \"sent by the fields when their value change to an invalid value. This will transition the form to the invalid state, to then eventually transition to the valid state if the field state is marked as done (which means that all fields have a valid value selected)\",\n                  target: \".invalid\",\n                },\n              },\n            },\n            fields: {\n              tags: \"configurable\",\n              type: \"parallel\",\n              states: {\n                name: {\n                  initial: \"validate\",\n                  states: {\n                    empty: {\n                      tags: \"nameEmpty\",\n                    },\n                    invalid: {\n                      entry: \"fieldInvalid\",\n                      tags: \"nameInvalid\",\n                    },\n                    valid: {\n                      tags: \"nameValid\",\n                      type: \"final\",\n                    },\n                    validate: {\n                      always: [\n                        {\n                          cond: \"nameIsEmpty\",\n                          target: \"empty\",\n                        },\n                        {\n                          cond: \"nameIsValid\",\n                          target: \"valid\",\n                        },\n                        {\n                          target: \"invalid\",\n                        },\n                      ],\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    nameChange: {\n                      actions: \"setName\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n                provider: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"providerIsValid\",\n                          target: \"valid\",\n                        },\n                        {\n                          target: \"invalid\",\n                        },\n                      ],\n                    },\n                    invalid: {\n                      entry: \"fieldInvalid\",\n                      tags: \"providerInvalid\",\n                    },\n                    valid: {\n                      tags: \"providerValid\",\n                      type: \"final\",\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    providerChange: {\n                      actions: \"setProvider\",\n                      cond: \"didProviderChange\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n                region: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"regionIsValid\",\n                          target: \"valid\",\n                        },\n                        {\n                          target: \"invalid\",\n                        },\n                      ],\n                    },\n                    invalid: {\n                      entry: \"fieldInvalid\",\n                      tags: \"regionInvalid\",\n                    },\n                    valid: {\n                      tags: \"regionValid\",\n                      type: \"final\",\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    providerChange: {\n                      target: \".validate\",\n                    },\n                    regionChange: {\n                      actions: \"setRegion\",\n                      cond: \"didRegionChange\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n                size: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"noProviderOrRegion\",\n                          target: \"idle\",\n                        },\n                        {\n                          cond: \"noSizes\",\n                          target: \"loading\",\n                        },\n                        {\n                          cond: \"emptySizes\",\n                          target: \"error\",\n                        },\n                        {\n                          cond: \"sizeIsDisabled\",\n                          target: \"disabled\",\n                        },\n                        {\n                          cond: \"billingRequiredButNotSelected\",\n                          target: \"waitingForQuota\",\n                        },\n                        {\n                          cond: \"sizeIsOverQuota\",\n                          target: \"overQuota\",\n                        },\n                        {\n                          target: \"valid\",\n                        },\n                      ],\n                    },\n                    idle: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeIdle\",\n                    },\n                    disabled: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeDisabled\",\n                    },\n                    waitingForQuota: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeWaitingForQuota\",\n                    },\n                    overQuota: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeOverQuota\",\n                    },\n                    valid: {\n                      tags: \"sizeValid\",\n                      type: \"final\",\n                    },\n                    error: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeError\",\n                    },\n                    loading: {\n                      description:\n                        \"Fetch the data required to show the available sizes and limits\",\n                      invoke: {\n                        src: \"getSizes\",\n                        onDone: [\n                          {\n                            actions: \"setSizes\",\n                            target: \"validate\",\n                          },\n                        ],\n                        onError: [\n                          {\n                            target: \"error\",\n                          },\n                        ],\n                      },\n                      tags: \"sizeLoading\",\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    providerChange: {\n                      target: \".validate\",\n                    },\n                    regionChange: {\n                      target: \".validate\",\n                    },\n                    sizeChange: {\n                      actions: \"setSize\",\n                      cond: \"didSizeChange\",\n                      target: \".validate\",\n                    },\n                    billingChange: {\n                      target: \".validate\",\n                    },\n                  },\n                },\n                billing: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"onlyPrepaid\",\n                          target: \"prepaidOnly\",\n                        },\n                        {\n                          cond: \"singleSubscription\",\n                          target: \"singleSubscription\",\n                        },\n                        {\n                          cond: \"onlySubscriptions\",\n                          target: \"onlySubscriptions\",\n                        },\n                        {\n                          description:\n                            \"user has both prepaid and marketplace subscriptions\",\n                          target: \"prepaidAndSubscriptions\",\n                        },\n                      ],\n                    },\n                    prepaidOnly: {\n                      description:\n                        \"The user doesn't need to specify any option about the billing. The API will automatically figure out the right thing to do without giving it any information.\",\n                      tags: [\"noBilling\", \"billingValid\"],\n                      entry: \"setBillingToPrepaid\",\n                      type: \"final\",\n                    },\n                    singleSubscription: {\n                      description:\n                        \"The user doesn't need to specify any option about the billing. The API will automatically figure out the right thing to do without giving it any information.\",\n                      tags: [\"noBilling\", \"billingValid\", \"singleSubscription\"],\n                      entry: \"setBillingToSubscription\",\n                      type: \"final\",\n                    },\n                    onlySubscriptions: {\n                      description:\n                        \"More than one subscription exist. The user needs to select one to procede.\",\n                      initial: \"invalid\",\n                      type: \"final\",\n                      states: {\n                        invalid: {},\n                        valid: {\n                          entry: \"triggerBillingChange\",\n                          tags: \"billingValid\",\n                          type: \"final\",\n                        },\n                      },\n                      on: {\n                        selectSubscription: [\n                          {\n                            actions: \"setBillingToSubscription\",\n                            cond: \"matchesSelectedProviderOrRHMarketplaceAndHasQuota\",\n                            target: \".valid\",\n                          },\n                          {\n                            cond: \"noSelectedProvider\",\n                            target: \".valid\",\n                          },\n                        ],\n                      },\n                    },\n                    prepaidAndSubscriptions: {\n                      description:\n                        \"The user has both prepaid quota and one or more subscription to a marketplace. The user needs to select one to procede.\",\n                      initial: \"empty\",\n                      type: \"final\",\n                      states: {\n                        empty: {},\n                        subscription: {\n                          entry: \"triggerBillingChange\",\n                          tags: \"billingValid\",\n                          type: \"final\",\n                        },\n                        prepaid: {\n                          entry: \"triggerBillingChange\",\n                          tags: \"billingValid\",\n                          type: \"final\",\n                        },\n                      },\n                      on: {\n                        selectSubscription: [\n                          {\n                            actions: \"setBillingToSubscription\",\n                            cond: \"matchesSelectedProviderOrRHMarketplaceAndHasQuota\",\n                            target: \".subscription\",\n                          },\n                          {\n                            cond: \"noSelectedProvider\",\n                            target: \".subscription\",\n                          },\n                        ],\n                        selectPrepaid: {\n                          actions: \"setBillingToPrepaid\",\n                          cond: \"hasPrepaidQuota\",\n                          target: \".prepaid\",\n                        },\n                      },\n                    },\n                  },\n                  on: {\n                    providerChange: {\n                      actions: \"unsetSubscription\",\n                      description:\n                        \"If a new provider is selected, deselect any previously selected billing option.\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n              },\n              onDone: {\n                target: \"#standardPlanMachine.configuring.form.valid\",\n              },\n            },\n          },\n          onDone: {\n            target: \"saved\",\n          },\n        },\n        saved: {\n          type: \"final\",\n        },\n      },\n    },\n    {\n      actions: {\n        setInitialContext: assign((context) => {\n          return {\n            form: {\n              ...(context.capabilities.defaultProvider\n                ? onProviderChange(\n                    context.capabilities.availableProviders,\n                    context.capabilities.defaultProvider\n                  )\n                : {}),\n            },\n          };\n        }),\n        fieldInvalid: send(\"fieldInvalid\"),\n        setName: assign((context, { name }) => {\n          if (context.creationError === \"name-taken\") {\n            return {\n              form: { ...context.form, name },\n              creationError: undefined,\n            };\n          }\n          return { form: { ...context.form, name } };\n        }),\n        setProvider: assign((context, { provider }) => {\n          return {\n            form: {\n              ...context.form,\n              ...onProviderChange(\n                context.capabilities.availableProviders,\n                provider\n              ),\n            },\n            sizes: undefined,\n          };\n        }),\n        setRegion: assign((context, { region }) => {\n          if (context.creationError === \"region-unavailable\") {\n            return {\n              form: { ...context.form, region },\n              sizes: undefined,\n              creationError: undefined,\n            };\n          }\n          return {\n            form: {\n              ...context.form,\n              region,\n            },\n            sizes: undefined,\n          };\n        }),\n        setSize: assign((context, { size }) => ({\n          form: {\n            ...context.form,\n            size,\n          },\n        })),\n        setSizes: assign((context, event) => {\n          const sizes = event.data;\n          const smallestSize = sizes.sort((a, b) => a.quota - b.quota)[0];\n          return {\n            sizes,\n            form: {\n              ...context.form,\n              size: smallestSize,\n            },\n          };\n        }),\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        resetCreationErrorMessage: assign((_context) => ({\n          creationError: undefined,\n        })),\n        setCreationError: assign((_context, { error }) => {\n          return {\n            creationError: error,\n          };\n        }),\n        triggerSave: sendParent((context) => {\n          const form = context.form as Required<typeof context.form> &\n            Pick<typeof context.form, \"billing\">;\n          const data: CreateKafkaFormData = {\n            plan: \"standard\",\n            name: form.name,\n            provider: form.provider,\n            region: form.region,\n            sizeId: form.size.id,\n            billing: form.billing,\n          };\n          return {\n            type: \"save\",\n            data,\n          };\n        }),\n        triggerSubmit: send(\"submit\"),\n        triggerBillingChange: send(\"billingChange\"),\n        setBillingToPrepaid: assign((context) => {\n          const form = { ...context.form };\n          form.billing = \"prepaid\";\n          return { form };\n        }),\n        setBillingToSubscription: assign((context, event) => {\n          const form = { ...context.form };\n          if (event.type === \"selectSubscription\") {\n            form.billing = event.subscription;\n          } else {\n            // single subscription, take it from the context\n            const ms = context.capabilities.marketplaceSubscriptions[0];\n            form.billing = {\n              marketplace: ms.marketplace,\n              subscription: ms.subscriptions[0],\n            };\n          }\n          return { form };\n        }),\n        unsetSubscription: assign((context) => {\n          const form = { ...context.form };\n          form.billing = undefined;\n          return { form };\n        }),\n      },\n      guards: {\n        isOverQuota: ({ capabilities }) =>\n          capabilities === undefined ||\n          capabilities.instanceAvailability === \"out-of-quota\",\n        isInstanceUnavailable: ({ capabilities }) =>\n          capabilities === undefined ||\n          capabilities.instanceAvailability === \"instance-unavailable\",\n        isRegionsUnavailable: ({ capabilities }) =>\n          capabilities === undefined ||\n          capabilities.instanceAvailability === \"regions-unavailable\",\n        nameIsEmpty: ({ form }) =>\n          form.name === undefined || form.name.length === 0,\n        nameIsValid: ({ form }) =>\n          /^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(form.name || \"\"),\n        providerIsValid: ({ form, capabilities }) => {\n          const selectedProviderInfo = capabilities?.availableProviders.find(\n            (p) => p.id === form.provider\n          );\n          return (\n            // must have loaded a list of providers\n            (capabilities?.availableProviders || []).length > 0 &&\n            // must have selected a provider\n            selectedProviderInfo !== undefined\n          );\n        },\n        regionIsValid: ({ form, capabilities }) => {\n          const selectedProviderInfo = capabilities?.availableProviders.find(\n            (p) => p.id === form.provider\n          );\n          return (\n            // must have selected a region\n            form.region !== undefined &&\n            // the region must be included in the capabilities for the provider\n            selectedProviderInfo?.regions.find((r) => r.id === form.region) !==\n              undefined\n          );\n        },\n        noProviderOrRegion: ({ form }) =>\n          form.provider === undefined || form.region === undefined,\n        noSizes: ({ sizes }) => sizes === undefined,\n        emptySizes: ({ sizes }) => sizes !== undefined && sizes.length === 0,\n        sizeIsDisabled: ({ form, capabilities }) => {\n          if (capabilities === undefined) return true;\n          return form.size?.isDisabled === true;\n        },\n        billingRequiredButNotSelected: ({ form }, _, meta) => {\n          if (meta.state.hasTag(\"noBilling\")) {\n            return false;\n          }\n          return form.billing === undefined;\n        },\n        sizeIsOverQuota: ({ form, capabilities }) => {\n          if (capabilities === undefined || !form.size) return true;\n          const availableQuota =\n            form.billing === \"prepaid\" || form.billing === undefined\n              ? capabilities.remainingPrepaidQuota\n              : capabilities.remainingMarketplaceQuota;\n          if (!availableQuota) return true;\n          return form.size.quota > availableQuota;\n        },\n        didProviderChange: (context, event) =>\n          context.form.provider !== event.provider,\n        didRegionChange: (context, event) =>\n          context.form.region !== event.region,\n        didSizeChange: (context, event) =>\n          context.form.size?.id !== event.size.id,\n        onlyPrepaid: (context) =>\n          context.capabilities.marketplaceSubscriptions.length === 0,\n        singleSubscription: (context) =>\n          context.capabilities.remainingPrepaidQuota === undefined &&\n          context.capabilities.marketplaceSubscriptions.flatMap(\n            (m) => m.subscriptions\n          ).length === 1,\n        onlySubscriptions: (context) =>\n          context.capabilities.remainingPrepaidQuota === undefined &&\n          context.capabilities.marketplaceSubscriptions.length > 0,\n        matchesSelectedProviderOrRHMarketplaceAndHasQuota: (\n          { form, capabilities },\n          { subscription }\n        ) =>\n          capabilities.remainingMarketplaceQuota !== undefined &&\n          capabilities.remainingMarketplaceQuota > 0 &&\n          (subscription.marketplace === \"rhm\" ||\n            form.provider === subscription.marketplace),\n        hasPrepaidQuota: (context) =>\n          context.capabilities.remainingPrepaidQuota !== undefined &&\n          context.capabilities.remainingPrepaidQuota > 0,\n        noSelectedProvider: ({ form }) => form.provider === undefined,\n      },\n    }\n  );\n","import { CloudProvider, CloudRegion } from \"ui-models/src/models/kafka\";\nimport { assign, createMachine, send, sendParent } from \"xstate\";\nimport {\n  CreateKafkaFormData,\n  CreateKafkaInstanceError,\n  TrialPlanInitializationData,\n  TrialSizes,\n} from \"../types\";\nimport { onProviderChange } from \"./shared\";\n\nexport type TrialPlanMachineContext = {\n  // initial data coming from the APIs\n  capabilities: TrialPlanInitializationData;\n\n  // what the user is selecting\n  form: {\n    name?: string;\n    provider?: CloudProvider;\n    region?: CloudRegion;\n  };\n\n  // based on the form.provider and form.region selection\n  sizes: TrialSizes | undefined;\n\n  creationError: CreateKafkaInstanceError | undefined;\n};\n\nexport const TrialPlanMachine =\n  /** @xstate-layout N4IgpgJg5mDOIC5QBUBOBLAhgGwArcwDsBZTAYwAt1CwA6ANzAwDMBPAQXs3QICMf0AF1YBiRKAAOAe1hD0UwuJAAPRACYAbAA4AnLQ0AGNQBYArBo0BmHQHYNNywBoQrRDoO1bARjWmv54y8DY18AX1DnNCw8AhJyKhpaMgVmdCgAVwxCKFpYQUxBdNgRMlQwArAlaVlBeUUkFUQgtWdXBFNLY1o7LRDTG1NTLVNjG3DIjBx8IlJKajpkwlSMrJzmKVQAWwYcdAgRVLBsCABJQi5sPaqZOQUlVQQvLRs9NR1TI1Mdey0tNS1Wk1nqZaJodIEbEYTAZ7OMQFEprFZgkFik0plqGsNtsLnsSmUKtcanV7kCXqD3p9vjZfv9AQg1AYhrQDF4fH9jJ0aVo4QiYjN4vMkmiVpjaOstrlMPRMfjyoIwABldJkMhweANaq3eqgB5qSxqGwsgwmgzPHRBGxeemMrQeCwfAY6NT6s2mXmTflxOaJRbLDHZcXYqUy7JyioAUVQqA2RO1pIZBqNppN5st1pcTR04O6gX+9hMefdEXhnum3pRwqW6NWQa2B3QR1O512EDjtTuDQe-i+tD+Jpdxm0NhdpnpXlGXTNnIt-RCnOLE2i5eRQr9NbFh2OsFohEwmzouIgFTEmpuHZ1jQQxmG3VHfjUE7Zb3HGlGoK8Vo0-ksli0Vh0D1lyRQVfRFAM1kbbdd33MADmxZVeE2IR2xJLsmgNccbECWgvAsGwBkhBwb0sIDEQFH1UWrUVAy3CAdz3A8REYsAAGEKCIGBUM7XUMJaTNHg0QZQU5Axf0MYxRmwsivVXMDqIg8UoPo2gJBjGUICYHZLmPBVT0kc80N49o3lBQxgnBLkmQBATH20Wghy8WxnS0IJLA0GSV1Aqj-VrOidzUqQNKYeCtkQ5DBG4y9u0w2zLCePs33cxkmW0IdPJAyiq18zdlIC9S9hCwLgtQdjOMqM9iR4q8vFito7JBd4XhpGF-FGDKKMrdcaMgpsdzKKA6m0vYTyihNTEfY0TH-aFzGCccni6G8DGzf9WSE9KSz5Lysu6xT-NoAa6lCzZwpQyr43Qx46qaN4vFoawR1HT8Jv6DqKzXcC-Lyw6wEGhQRGKwrSo47IKoMqror48cTEsByOhItlLD8P93rknyN1on6joBnHCDKsGxqu2r+LaIJ3FoEYRytYYkZCNHvOyzHeug2QAC9D1bUaLovBNnjh2xnn-A1hgmmz6rtLRugMZrhhvJzF1LYDOs+hTvr63J0A52hsCkTAIFlCAFDoah6CkABrOhtsyrqvtyjX2boXX9cxBBTakMgCjqABtAwAF0ieM4x3k8O0jCc2qNDum0Bg0bpKXihxvmsYwGd2u2sYdrWnb1g2wyYGNUFUghBAlbZrZV+Scsz1ns513PXfdz2L19gOeaMq9g8asPHwtZKLRjs0+xRv5DHJzQ09ttX7drjmTrOyL2+qmLSfUC0uhMDRsysbRNH8SfVerlmVMdwGCs0kHysDmqboQSxgnuvD9THq1szCLayxtw-maUrO57xgmXEl5Q2uqvO+Zo9BBCsJCSwI5rA8g-srD6Vcf7+REEbRIeQKi0ArsgjGPVf7bmvt2QI90-BCx0PFWBXcbQPweoMLeidHyfAPignq6Dja5HyAqHBn9K74IgsQ9Q2g9CGBMOYACdgHBYU5KHay2FkbOhdOEEshApCaQ1CgPheCGBMHQGwTg3A+ACGEEI68YC8J6AtBHew35-wWDUKwugghPQAFVYCQDMW8ewuE+hsjZIMXwr4rFsgtLYp4Fgo5ONoC46Iri9xcB4JgXg2BwYgC1LzK6IQbR-j7FoJMYkhIRxpNEvGsB4nSiMck1JZjskCSCB4cEMtOQiNGDLLw0S9q1iwYUHc6RCCwHSEhIQCo2zAITM0ekQ4QTNSfhCbM9NEHkR0V0sUPSii5CGRFUZXj8mUwaayP4eFkb9HpNoOGkIVodBePYMSitcHoyZgQ9Zmj0mGWXogGk9I-weD+EMbMZpWTiVTks2SjNVm0WDKbVsXjg5xxlv+Zyj4CIWMRaCBhgwmQjD+KRUFO0p5HzrDiGF4ziaDD0P2KEQ5nijloStRKMIvjDmGMjTpGcsSSlgNKTEXiTRGleiaCaFprF0qlhNBWLomTHI8nir+bD9rBi5YwMZENLrGRMN8FkNIt4vGRSOWh2F9Ao1qu8Do+SZVLmWY8iFHLNhmJ-CCSlg5hy0vqX+SBtV2TPz-G8Nl08a4qRYrQfpggpAqgoJ40lxl-BqFBLoWBFhYEwn1E4epLwPVYr+K5dN9ztHWvZYQwNsFaBgE2BIUxUarwjilkJAYmh7DIxTVhTQuF+gcjsJQ38YxZX8KeftH6QboU6XtbfJysCWQdGnE1CaMs-WEoOkGo89rDUumZdmfof48Ljn-FLM0Tw7JOQsHO1BA7i1HkJJWh4nRY0WgGHhXQxhpzGGbXHfwNITAdt-LA49BCF2wXtWacc5hY3iPBEK5ovQf39o1kDC+wbCChvDZG1VmTo2Gusj4OcDghh2ByXYPse6wl3u-N2y1YL07+uPvlIKwNhq6TSRkjuV7-zww+P4NkQ4CKpvqi6e6IRmm6EZOu0jSsrXgoLQdWDWkh1XEvU0Do3RhzBzZEYb4ZgbSSRmS8MwbH77KJ7SsiTP0pNFyXXJhAd7KYOA5OSnQdowEukmvx7CgmVpNSg+raCJmAPi3UIC0O2gLK6HYx5meKk8bwcQ5QZDbzIYTK3p4N4nRAgfHzDCccQ5XjYW0AreKPxQsBv6n9Ia56FRmNgVLJy2E-DOiZPFHQMNx0zhHBxoSD6CtUd+v9QgtAZMqti2qmqwd9DWGpCjF0sCxxuuG50Fa35nQ-mkgZ-NlHC1Fe63RsxDgPB4Q+H+ecjIXz1P1EaGctigXDBEw88Tq2Dp4x8+OQVVnzK0yTO5Dra3Nba1Kwx95ID7CiPyXYL4wdDTfBtH3EbFlvxfsZLisj+Lv6-p+o7XrEAanmY4yCMehoTCHqEjaX4lXQeb38NvD7B1UdmZQ0x9QCnfCuXih8QYQQOgQ5HLhC0JohLaHwrmpBK350o7rgXWM5mLC7u-GCTkkltBTfqvYI0yMALzmnVdvNN2hd-xzi7bII6HP2C6GlTk+S-k+Ap8LjmD3bL-O6J6gYwRpn72W5rk9fUzG9HpJQ2NElqsvUCPD0T5GCXMzMSMb5Mth5Dn1N8Wm2holKpi4xj5DJ7OeEKbobT2ExJYXHd8XeIwRG2HVwL7y9rfOPAQeEIAA */\n  createMachine(\n    {\n      context: {\n        capabilities: {} as TrialPlanInitializationData,\n        sizes: undefined,\n        form: {},\n        creationError: undefined,\n      },\n      tsTypes: {} as import(\"./TrialPlanMachine.typegen\").Typegen0,\n      predictableActionArguments: true,\n      schema: {\n        context: {} as TrialPlanMachineContext,\n        events: {} as\n          | { type: \"fieldInvalid\" }\n          | { type: \"nameChange\"; name: string }\n          | { type: \"providerChange\"; provider: CloudProvider }\n          | { type: \"regionChange\"; region: CloudRegion }\n          | { type: \"nameIsValid\" }\n          | { type: \"nameIsInvalid\" }\n          | { type: \"nameIsTaken\" }\n          | { type: \"submit\" }\n          | { type: \"create\" }\n          | { type: \"createSuccess\" }\n          | { type: \"createError\"; error: CreateKafkaInstanceError },\n        services: {} as {\n          getSizes: {\n            data: TrialSizes;\n          };\n        },\n      },\n      initial: \"verifyAvailability\",\n      id: \"TrialPlanMachine\",\n      states: {\n        verifyAvailability: {\n          entry: \"setInitialContext\",\n          always: [\n            {\n              cond: \"isTrialUsed\",\n              target: \"trialUsed\",\n            },\n            {\n              cond: \"isTrialUnavailable\",\n              target: \"trialUnavailable\",\n            },\n            {\n              target: \"configuring\",\n            },\n          ],\n        },\n        trialUsed: {\n          tags: \"blocked\",\n        },\n        trialUnavailable: {\n          tags: \"blocked\",\n        },\n        regionsUnavailable: {\n          tags: \"blocked\",\n        },\n        configuring: {\n          type: \"parallel\",\n          states: {\n            status: {\n              initial: \"unsubmitted\",\n              states: {\n                unsubmitted: {\n                  tags: \"unsubmitted\",\n                },\n                submitted: {\n                  entry: \"triggerSubmit\",\n                  tags: \"submitted\",\n                },\n              },\n              on: {\n                create: {\n                  description:\n                    \"Save is enabled all the time, if it's clicked before the form is completely filled out we should show the validation for all errored fields\",\n                  target: \".submitted\",\n                },\n              },\n            },\n            form: {\n              initial: \"invalid\",\n              states: {\n                invalid: {\n                  tags: \"formInvalid\",\n                },\n                valid: {\n                  entry: \"resetCreationErrorMessage\",\n                  on: {\n                    fieldInvalid: {\n                      target: \"invalid\",\n                    },\n                    submit: {\n                      target: \"saving\",\n                    },\n                  },\n                },\n                saving: {\n                  entry: [\"resetCreationErrorMessage\", \"triggerSave\"],\n                  tags: \"formSaving\",\n                  on: {\n                    createSuccess: {\n                      target: \"saved\",\n                    },\n                    createError: {\n                      actions: \"setCreationError\",\n                      target: \"invalid\",\n                    },\n                  },\n                },\n                saved: {\n                  type: \"final\",\n                },\n              },\n              on: {\n                fieldInvalid: {\n                  description:\n                    \"sent by the fields when their value change to an invalid value. This will transition the form to the invalid state, to then eventually transition to the valid state if the field state is marked as done (which means that all fields have a valid value selected)\",\n                  target: \".invalid\",\n                },\n              },\n            },\n            fields: {\n              tags: \"configurable\",\n              type: \"parallel\",\n              states: {\n                name: {\n                  initial: \"validate\",\n                  states: {\n                    empty: {\n                      tags: \"nameEmpty\",\n                    },\n                    invalid: {\n                      entry: \"fieldInvalid\",\n                      tags: \"nameInvalid\",\n                    },\n                    valid: {\n                      tags: \"nameValid\",\n                      type: \"final\",\n                    },\n                    validate: {\n                      always: [\n                        {\n                          cond: \"nameIsEmpty\",\n                          target: \"empty\",\n                        },\n                        {\n                          cond: \"nameIsValid\",\n                          target: \"valid\",\n                        },\n                        {\n                          target: \"invalid\",\n                        },\n                      ],\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    nameChange: {\n                      actions: \"setName\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n                provider: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"providerIsValid\",\n                          target: \"valid\",\n                        },\n                        {\n                          target: \"invalid\",\n                        },\n                      ],\n                    },\n                    invalid: {\n                      entry: \"fieldInvalid\",\n                      tags: \"providerInvalid\",\n                    },\n                    valid: {\n                      tags: \"providerValid\",\n                      type: \"final\",\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    providerChange: {\n                      actions: \"setProvider\",\n                      cond: \"didProviderChange\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n                region: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"regionIsValid\",\n                          target: \"valid\",\n                        },\n                        {\n                          target: \"invalid\",\n                        },\n                      ],\n                    },\n                    invalid: {\n                      entry: \"fieldInvalid\",\n                      tags: \"regionInvalid\",\n                    },\n                    valid: {\n                      tags: \"regionValid\",\n                      type: \"final\",\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    providerChange: {\n                      target: \".validate\",\n                    },\n                    regionChange: {\n                      actions: \"setRegion\",\n                      cond: \"didRegionChange\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n                size: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"noProviderAndRegion\",\n                          target: \"idle\",\n                        },\n                        {\n                          cond: \"noSizes\",\n                          target: \"loading\",\n                        },\n                        {\n                          cond: \"emptySizes\",\n                          target: \"error\",\n                        },\n                        {\n                          target: \"valid\",\n                        },\n                      ],\n                    },\n                    idle: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeIdle\",\n                    },\n                    valid: {\n                      tags: \"sizeValid\",\n                      type: \"final\",\n                    },\n                    error: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeError\",\n                    },\n                    loading: {\n                      description:\n                        \"Fetch the data required to show the available sizes and limits\",\n                      invoke: {\n                        src: \"getSizes\",\n                        onDone: [\n                          {\n                            actions: \"setSizes\",\n                            target: \"validate\",\n                          },\n                        ],\n                        onError: [\n                          {\n                            target: \"error\",\n                          },\n                        ],\n                      },\n                      tags: \"sizeLoading\",\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    providerChange: {\n                      target: \".validate\",\n                    },\n                    regionChange: {\n                      target: \".validate\",\n                    },\n                  },\n                },\n              },\n              onDone: {\n                target: \"#TrialPlanMachine.configuring.form.valid\",\n              },\n            },\n          },\n          onDone: {\n            target: \"saved\",\n          },\n        },\n        saved: {\n          type: \"final\",\n        },\n      },\n    },\n    {\n      actions: {\n        setInitialContext: assign((context) => {\n          return {\n            form: {\n              ...(context.capabilities.defaultProvider\n                ? onProviderChange(\n                    context.capabilities.availableProviders,\n                    context.capabilities.defaultProvider\n                  )\n                : {}),\n            },\n          };\n        }),\n        fieldInvalid: send(\"fieldInvalid\"),\n        setName: assign((context, { name }) => {\n          if (context.creationError === \"name-taken\") {\n            return {\n              form: { ...context.form, name },\n              creationError: undefined,\n            };\n          }\n          return { form: { ...context.form, name } };\n        }),\n        setProvider: assign((context, { provider }) => {\n          return {\n            form: {\n              ...context.form,\n              ...onProviderChange(\n                context.capabilities.availableProviders,\n                provider\n              ),\n            },\n            sizes: undefined,\n          };\n        }),\n        setRegion: assign((context, { region }) => {\n          if (context.creationError === \"region-unavailable\") {\n            return {\n              form: { ...context.form, region },\n              sizes: undefined,\n              creationError: undefined,\n            };\n          }\n          return {\n            form: {\n              ...context.form,\n              region,\n            },\n            sizes: undefined,\n          };\n        }),\n        setSizes: assign((_context, event) => {\n          const sizes = event.data;\n          return {\n            sizes,\n          };\n        }),\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        resetCreationErrorMessage: assign((_context) => ({\n          creationError: undefined,\n        })),\n        setCreationError: assign((_context, { error }) => ({\n          creationError: error,\n        })),\n        triggerSave: sendParent((context) => {\n          const form = context.form as Required<typeof context.form>;\n          const data: CreateKafkaFormData = {\n            plan: \"developer\",\n            name: form.name,\n            provider: form.provider,\n            region: form.region,\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            sizeId: context.sizes!.trial.id,\n            billing: undefined,\n          };\n          return {\n            type: \"save\",\n            data,\n          };\n        }),\n        triggerSubmit: send(\"submit\"),\n      },\n      guards: {\n        isTrialUsed: ({ capabilities }) =>\n          capabilities === undefined ||\n          capabilities.instanceAvailability === \"used\",\n        isTrialUnavailable: ({ capabilities }) =>\n          capabilities === undefined ||\n          capabilities.instanceAvailability === \"unavailable\",\n        nameIsEmpty: ({ form }) =>\n          form.name === undefined || form.name.length === 0,\n        nameIsValid: ({ form }) =>\n          /^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(form.name || \"\"),\n        providerIsValid: ({ form, capabilities }) => {\n          const selectedProviderInfo = capabilities?.availableProviders.find(\n            (p) => p.id === form.provider\n          );\n          return (\n            // must have loaded a list of providers\n            (capabilities?.availableProviders || []).length > 0 &&\n            // must have selected a provider\n            selectedProviderInfo !== undefined\n          );\n        },\n        regionIsValid: ({ form, capabilities }) => {\n          const selectedProviderInfo = capabilities?.availableProviders.find(\n            (p) => p.id === form.provider\n          );\n          return (\n            // must have selected a region\n            form.region !== undefined &&\n            // the region must be included in the capabilities for the provider\n            selectedProviderInfo?.regions.find((r) => r.id === form.region) !==\n              undefined\n          );\n        },\n        noProviderAndRegion: ({ form }) =>\n          form.provider === undefined || form.region === undefined,\n        noSizes: ({ sizes }) => sizes === undefined,\n        emptySizes: ({ sizes }) =>\n          sizes !== undefined && sizes.standard.length === 0,\n        didProviderChange: (context, event) =>\n          context.form.provider !== event.provider,\n        didRegionChange: (context, event) =>\n          context.form.region !== event.region,\n      },\n    }\n  );\n","import type { CloudProvider, CloudRegion } from \"ui-models/src/models/kafka\";\nimport { assign, createMachine, EventFrom, forwardTo, send } from \"xstate\";\nimport type {\n  CloudProvidersInfo,\n  CreateKafkaFormData,\n  CreateKafkaInitializationData,\n  CreateKafkaInstanceError,\n  StandardPlanInitializationData,\n  StandardSizes,\n  TrialPlanInitializationData,\n  TrialSizes,\n} from \"../types\";\nimport {\n  StandardPlanMachine,\n  StandardPlanMachineContext,\n} from \"./StandardPlanMachine\";\nimport { TrialPlanMachine, TrialPlanMachineContext } from \"./TrialPlanMachine\";\n\ntype Quota =\n  | Pick<\n      StandardPlanInitializationData,\n      | \"plan\"\n      | \"remainingPrepaidQuota\"\n      | \"marketplaceSubscriptions\"\n      | \"remainingMarketplaceQuota\"\n      | \"instanceAvailability\"\n    >\n  | Pick<TrialPlanInitializationData, \"plan\" | \"instanceAvailability\">;\n\nexport type CreateKafkaInstanceMachineContext = {\n  quota: Quota | undefined;\n  providers: CloudProvidersInfo | undefined;\n  defaultProvider: CloudProvider | undefined;\n  capabilities: CreateKafkaInitializationData | undefined;\n};\n\nconst CreateKafkaInstanceMachine =\n  /** @xstate-layout N4IgpgJg5mDOIC5QGMBOYCGAXMBpDAZgNYYCSAdrFhucmAHQA2A9hhAJblT0COArs2r1kACzDIinKAAIqNCBlQRp-QRgDEYVKmap6AB0bYCugLbD02PIRIU5tBizZTeAoaPGSus6uQVKVNwwETgA3ZmRsdmZyAG0ABgBdRFB9Zlh2LGjyFJAAD0QAFniAJnp4gGYAdkKATgAOeqr4qvrCgFYAGhAAT0QANir++n769tqq2sKARhKKjsKAX0XutEwcfGIySl86JlYOLlc1YTEJKR95RWVVanV7fxug6QxQjHYjACNGMFy0jKyMVyBQQxTKlRqDSaLTaXV6iHG8XoVXahX6UyqJVqJX6-WWq0sGxs23seych24twwp08Fwe10CanUzD4WGkzAIlz8DKpf3SmWywKKpXK1TqjWarQ63T6CHa8UK9Hqcw6JUK6palXxIDWVk2th2NDJBxcVJp5289ICVPU5GYXMejOoLzeHww31+SBA-wFQK9ILBoshEph0vhoPaw2hFRKasKbQa0yWKx1hOsWzsu0cJqOZqtEHUfIBgv9iCTU2RkZj03RYsjMoGyvo0yG40KJSq0wq02m9W1uqJGcNDn2zlzQXoEDAoTALH0WkLXp9gJypYQ5cVKP61drNXr4faFSRJVmdUmasjvf7af1JKzo4px3cZy8MinM7nWhd7y+H0yPU0bRdAMIwsBMVBzAHdMDVJbMx0pCcPAtN9p1nZh51Qb83U+P8sB6EJyHCSIVwSZIl35FchQQWpanaeh4y7JN5gqbFZgbOU1WRE96m3Bp+lRKoKmvdZoLvI04MfM0kNfaR3zQjCsN-Rh-3UOTP0wvhYEgItfVXUAQRouiGO7QpmNYkp2NMqolXqWZcSPCpRn6NFhL1YlM3Eh9TUQl8LjU9Cv1eH93VwgD-IUoLsJ+HTKLXQz6NskyzJPCzwwqdppnoWj4niaZ2kPepaiTaZXMHGD73JFwCDALBRAufQdFCdgp1QWB1Aa5gmpa2AXj8aR0CgbIesir5ovI4s-X0staNqegjzGcZ+hKHjeyqdj2jGcplu4moFSqKpStEjyR0qo5qtqkR6sa5qtDarQdD0QxjDMCwRNvY7jXg+hzrq7wOq626CKIqIYlImKSym9cMRsiY0RmaYFXiOFZUKfa5rqRy5mmWp4kGdpDve4dPsfH7Lr+67uvainbvZTCBqG6Q+HIEb3TG1IKIh-Jpsjeh2k7XHOw7QqWnY0Z6mbapakGNVqgR-GUygwnYK8rhVJiBg5BwV63KHZXTqgcHJq5hASlROj+lKCp6kqdUVvYq3Mr3ds0UaPLZgJ9yiY13xHSe8h6Gan57leT12YmvTjaxbd6NM+NDIVdLCkskUFmxyZt2cwYPd1+982kP36FgV4pHUKCAGU+GQOhYHgcbdKoxOjKR0p6nmYXlvt1Fyn6Lt1W7E9Jkc7Pys8vOC6LprVaggBRIDUENiOQSjioY7b+PTNRe2a152NbLy03M7y4exJHcKvwLwOwGDmcF6orFWl5i2Nt7toEYqUWpayrt5SW+z4ls4+H0GBn0wuPYuU80wVyrnAWuYd65rkbvRBUtQ6x9zaKLeMO8WhDB7PEKEtRAFe0nKhdS+cjD+wniXGec9b5rnvuLSMSNErxhmJUUWCMsrKmWngsEuJ5YpjtFOWBqY3qez1jmBCJxpJ0h9jyIItDIYI1SrKSM4tW6dmVB0TsaISoKxvGIiqEinzUnzAo42zRxYojmD3FEtk+bTFFkMZskYcS9mfiwwh4ivpmhAWYkEswGg2RwSxJosxSjrU4tjAePcEY8SKp4wx3ifK0m8CAxSIVlJ4T8QMfic1lrFVaMqeYDjwztjojxHhsYOxW1ssmAkoic6eX1sY7JCBWjsQ7LNKWjRKiLRxmieW9SdYjxOkY0mV1Oo3Vaq0msCoY7FCGOlWMsxkYIkxMiHh7RYyMPjEJPRDSRnExcJYCAso4GxUhrGQY5QMpjCSpedaExkRND5jorEFQ9lDLKifI5XBWmb3DC2TKlRGLVCxBeDoCTR49CoGAUwjNmaulGqHb0HMjYgkciiLK+UUFWRxt2VZbT1mt1GK0Fo-EOx4n2cMn53srgBAvhANmqLw53yaIqfi4xsQdnyu2d+aVqjONbmna2OJuxQpHGPchhdwEGzrhc42MZBXYwmD3CE-F+j21jCMZy8Ytxdlom0CVewpU0FacteUIwcXcpRKiOY7FsYrzBdbeMhUWJt2NcAkhAVQHSsvuaxos19rzUxelFsyiBjdhGC2UYLY4k9l0V8o6RC0lgMnnK85nMMVVPKJo2GbiirsOsrMd1uU1SWzqSImlQDiEfh9WQs18qs2IGWrk4N-9Q0ZUxJZJoSolWVBylYwqnrhDMFMIYGqKLlzNoQNUf+SomFoP2p2Ht1lcZ5Roj2IW4rqXfKAa0o87EaI3JyhtQS2Ntyo2WMsIAA */\n  createMachine(\n    {\n      context: {\n        providers: undefined,\n        defaultProvider: undefined,\n        quota: undefined,\n        capabilities: undefined,\n      },\n      predictableActionArguments: true,\n      tsTypes: {} as import(\"./CreateKafkaInstanceMachine.typegen\").Typegen0,\n      schema: {\n        context: {} as CreateKafkaInstanceMachineContext,\n        events: {} as\n          | {\n              type: \"standard quota available\";\n              quota: Pick<\n                StandardPlanInitializationData,\n                | \"remainingPrepaidQuota\"\n                | \"remainingMarketplaceQuota\"\n                | \"marketplaceSubscriptions\"\n              >;\n            }\n          | {\n              type: \"out of standard quota\";\n              quota: Pick<\n                StandardPlanInitializationData,\n                \"marketplaceSubscriptions\"\n              >;\n            }\n          | {\n              type: \"no standard quota available\";\n              hasTrialQuota: boolean;\n            }\n          | {\n              type: \"trial available\";\n              capabilities: TrialPlanInitializationData;\n            }\n          | { type: \"trial used\" }\n          | { type: \"developer available\" }\n          | { type: \"developer used\" }\n          | { type: \"developer unavailable\" }\n          | {\n              type: \"providers and regions available\";\n              providers: CloudProvidersInfo;\n              defaultProvider: CloudProvider | undefined;\n            }\n          | { type: \"providers or regions unavailable\" }\n          | { type: \"save\"; data: CreateKafkaFormData }\n          | { type: \"createSuccess\" }\n          | { type: \"createError\"; error: CreateKafkaInstanceError },\n        services: {} as {\n          checkStandardQuota: {\n            data: never;\n          };\n          checkDeveloperAvailability: {\n            data: never;\n          };\n          fetchProvidersWithRegions: {\n            data: never;\n          };\n          standardPlan: {\n            data: StandardPlanMachineContext;\n          };\n          trialPlan: {\n            data: TrialPlanMachineContext;\n          };\n        },\n      },\n      id: \"createKafkaInstance\",\n      initial: \"loading\",\n      states: {\n        loading: {\n          description: \"Fetch the data required to drive the creation flow\",\n          tags: \"loading\",\n          initial: \"quota\",\n          states: {\n            quota: {\n              initial: \"checking standard quota\",\n              states: {\n                \"checking standard quota\": {\n                  invoke: {\n                    src: \"checkStandardQuota\",\n                    onError: [\n                      {\n                        actions: \"setStandardUnavailable\",\n                        target: \"standard\",\n                      },\n                    ],\n                  },\n                  on: {\n                    \"standard quota available\": {\n                      actions: \"setStandardAvailable\",\n                      target: \"standard\",\n                    },\n                    \"out of standard quota\": {\n                      actions: \"setStandardOutOfQuota\",\n                      target: \"standard\",\n                    },\n                    \"no standard quota available\": {\n                      target: \"checking developer availability\",\n                    },\n                  },\n                },\n                standard: {\n                  type: \"final\",\n                  always: {\n                    target: \"#createKafkaInstance.loading.fetching providers\",\n                  },\n                },\n                developer: {\n                  type: \"final\",\n                  always: {\n                    target: \"#createKafkaInstance.loading.fetching providers\",\n                  },\n                },\n                \"checking developer availability\": {\n                  invoke: {\n                    src: \"checkDeveloperAvailability\",\n                    onError: [\n                      {\n                        actions: \"setDeveloperUnavailable\",\n                        target: \"developer\",\n                      },\n                    ],\n                  },\n                  on: {\n                    \"developer used\": {\n                      actions: \"setDeveloperUsed\",\n                      target: \"developer\",\n                    },\n                    \"developer available\": {\n                      actions: \"setDeveloperAvailable\",\n                      target: \"developer\",\n                    },\n                    \"developer unavailable\": {\n                      actions: \"setDeveloperUnavailable\",\n                      target: \"developer\",\n                    },\n                  },\n                },\n              },\n            },\n            \"fetching providers\": {\n              invoke: {\n                src: \"fetchProvidersWithRegions\",\n                onError: [\n                  {\n                    actions: \"setProvidersOrRegionsUnavailable\",\n                    target: \"ready\",\n                  },\n                ],\n              },\n              on: {\n                \"providers and regions available\": {\n                  actions: \"setProviders\",\n                  target: \"ready\",\n                },\n                \"providers or regions unavailable\": {\n                  actions: \"setProvidersOrRegionsUnavailable\",\n                  target: \"ready\",\n                },\n              },\n            },\n            ready: {\n              type: \"final\",\n              entry: \"setCapabilities\",\n            },\n          },\n          onDone: [\n            {\n              cond: \"standard plan\",\n              target: \"standard plan\",\n            },\n            {\n              cond: \"developer plan\",\n              target: \"developer plan\",\n            },\n            {\n              target: \"system unavailable\",\n            },\n          ],\n        },\n        \"system unavailable\": {\n          tags: \"systemUnavailable\",\n          type: \"final\",\n        },\n        \"standard plan\": {\n          invoke: {\n            src: \"standardPlan\",\n            id: \"standardPlanService\",\n          },\n          tags: \"standardPlan\",\n          initial: \"idle\",\n          states: {\n            idle: {\n              on: {\n                save: {\n                  target: \"saving\",\n                },\n              },\n            },\n            saving: {\n              invoke: {\n                src: \"createInstance\",\n              },\n              tags: \"saving\",\n              on: {\n                createSuccess: {\n                  target: \"#createKafkaInstance.complete\",\n                },\n                createError: {\n                  actions: \"notifyCreateErrorToStandardPlan\",\n                  target: \"idle\",\n                },\n              },\n            },\n          },\n        },\n        \"developer plan\": {\n          invoke: {\n            src: \"trialPlan\",\n            id: \"trialPlanService\",\n          },\n          tags: \"trialPlan\",\n          initial: \"idle\",\n          states: {\n            idle: {\n              on: {\n                save: {\n                  target: \"saving\",\n                },\n              },\n            },\n            saving: {\n              invoke: {\n                src: \"createInstance\",\n              },\n              tags: \"saving\",\n              on: {\n                createSuccess: {\n                  target: \"#createKafkaInstance.complete\",\n                },\n                createError: {\n                  actions: \"notifyCreateErrorToTrialPlan\",\n                  target: \"idle\",\n                },\n              },\n            },\n          },\n        },\n        complete: {\n          type: \"final\",\n        },\n      },\n    },\n    {\n      actions: {\n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        setDeveloperAvailable: assign((_) => ({\n          quota: {\n            plan: \"developer\" as const,\n            instanceAvailability: \"available\" as const,\n          },\n        })),\n        setDeveloperUnavailable: assign((_) => ({\n          quota: {\n            plan: \"developer\" as const,\n            instanceAvailability: \"unavailable\" as const,\n          },\n        })),\n        setDeveloperUsed: assign((_) => ({\n          quota: {\n            plan: \"developer\" as const,\n            instanceAvailability: \"used\" as const,\n          },\n        })),\n        setStandardAvailable: assign((_, event) => ({\n          quota: {\n            plan: \"standard\" as const,\n            instanceAvailability: \"available\" as const,\n            remainingPrepaidQuota: event.quota.remainingPrepaidQuota,\n            marketplaceSubscriptions: event.quota.marketplaceSubscriptions,\n            remainingMarketplaceQuota: event.quota.remainingMarketplaceQuota,\n          },\n        })),\n        setStandardOutOfQuota: assign((_, event) => ({\n          quota: {\n            plan: \"standard\" as const,\n            instanceAvailability: \"out-of-quota\" as const,\n            marketplaceSubscriptions: event.quota.marketplaceSubscriptions,\n            remainingMarketplaceQuota: 0,\n            remainingPrepaidQuota: 0,\n          },\n        })),\n        setStandardUnavailable: assign((_) => ({\n          quota: {\n            plan: \"standard\" as const,\n            instanceAvailability: \"instance-unavailable\" as const,\n            marketplaceSubscriptions: [],\n            remainingMarketplaceQuota: 0,\n            remainingPrepaidQuota: 0,\n          },\n        })),\n        setProviders: assign((_, event) => {\n          return {\n            providers: event.providers,\n            defaultProvider: event.defaultProvider,\n          };\n        }),\n        setProvidersOrRegionsUnavailable: assign((context) => {\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          const quota = context.quota!;\n          if (quota.plan === \"standard\") {\n            quota.instanceAvailability = \"regions-unavailable\";\n          } else {\n            quota.instanceAvailability = \"unavailable\";\n          }\n          return {\n            providers: [],\n            quota,\n          };\n        }),\n        setCapabilities: assign((context) => {\n          const { providers, defaultProvider, quota } = context;\n          if (!providers || !quota) {\n            throw new Error(\"unexpected condition, no providers or quota\");\n          }\n          if (quota.plan === \"standard\") {\n            const capabilities: StandardPlanInitializationData = {\n              plan: \"standard\",\n              availableProviders: providers,\n              defaultProvider,\n              instanceAvailability: quota.instanceAvailability,\n              marketplaceSubscriptions: quota.marketplaceSubscriptions,\n              remainingMarketplaceQuota: quota.remainingMarketplaceQuota,\n              remainingPrepaidQuota: quota.remainingPrepaidQuota,\n            };\n            return { capabilities };\n          } else {\n            const capabilities: TrialPlanInitializationData = {\n              plan: \"developer\",\n              availableProviders: providers,\n              defaultProvider,\n              instanceAvailability: quota.instanceAvailability,\n            };\n            return { capabilities };\n          }\n        }),\n        notifyCreateErrorToStandardPlan: forwardTo(\"standardPlanService\"),\n        notifyCreateErrorToTrialPlan: send(\n          (_, event) => {\n            return { type: \"createError\", error: event.error };\n          },\n          { to: \"trialPlanService\" }\n        ),\n        /* eslint-enable @typescript-eslint/no-unused-vars */\n      },\n      guards: {\n        \"standard plan\": (context) => context.quota?.plan === \"standard\",\n        \"developer plan\": (context) => context.quota?.plan === \"developer\",\n      },\n    }\n  );\n\ntype EventTypes = Pick<\n  EventFrom<typeof CreateKafkaInstanceMachine>,\n  \"type\"\n>[\"type\"];\n\ntype EventOptions<E extends EventTypes> = Omit<\n  EventFrom<typeof CreateKafkaInstanceMachine, E>,\n  \"type\"\n>;\n\nexport type CreateKafkaInstanceServices = {\n  checkStandardQuota: (events: {\n    onOutOfQuota: (p: EventOptions<\"out of standard quota\">) => void;\n    onQuotaAvailable: (p: EventOptions<\"standard quota available\">) => void;\n    onNoQuotaAvailable: (\n      p: EventOptions<\"no standard quota available\">\n    ) => void;\n  }) => void;\n  checkDeveloperAvailability: (events: {\n    onUsed: () => void;\n    onAvailable: () => void;\n    onUnavailable: () => void;\n  }) => void;\n  fetchProvidersWithRegions: (\n    plan: \"standard\" | \"developer\",\n    events: {\n      onAvailable: (p: EventOptions<\"providers and regions available\">) => void;\n      onUnavailable: () => void;\n    }\n  ) => void;\n  getStandardSizes: (\n    provider: CloudProvider,\n    region: CloudRegion\n  ) => Promise<StandardSizes>;\n  getTrialSizes: (\n    provider: CloudProvider,\n    region: CloudRegion\n  ) => Promise<TrialSizes>;\n  onCreate: (\n    data: CreateKafkaFormData,\n    onSuccess: () => void,\n    onError: (error: CreateKafkaInstanceError) => void\n  ) => void;\n};\n\nexport function makeCreateKafkaInstanceMachine({\n  checkStandardQuota: checkStandardQuotaCb,\n  checkDeveloperAvailability: checkDeveloperAvailabilityCb,\n  fetchProvidersWithRegions: fetchProvidersWithRegionsCb,\n  getStandardSizes: getStandardSizesCb,\n  getTrialSizes: getTrialSizesCb,\n  onCreate,\n}: CreateKafkaInstanceServices) {\n  return CreateKafkaInstanceMachine.withConfig({\n    services: {\n      checkStandardQuota: () => {\n        return (send) =>\n          checkStandardQuotaCb({\n            onNoQuotaAvailable: ({ hasTrialQuota }) => {\n              send({ type: \"no standard quota available\", hasTrialQuota });\n            },\n            onOutOfQuota: ({ quota }) => {\n              send({ type: \"out of standard quota\", quota });\n            },\n            onQuotaAvailable: ({ quota }) => {\n              send({ type: \"standard quota available\", quota });\n            },\n          });\n      },\n      checkDeveloperAvailability: () => {\n        return (send) => {\n          checkDeveloperAvailabilityCb({\n            onAvailable: () => send(\"developer available\"),\n            onUsed: () => send(\"developer used\"),\n            onUnavailable: () => send(\"developer unavailable\"),\n          });\n        };\n      },\n      fetchProvidersWithRegions: (context) => {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const instanceType = context.quota!.plan;\n        return (send) => {\n          fetchProvidersWithRegionsCb(instanceType, {\n            onAvailable: ({ providers, defaultProvider }) =>\n              send({\n                type: \"providers and regions available\",\n                providers,\n                defaultProvider,\n              }),\n            onUnavailable: () => send(\"providers or regions unavailable\"),\n          });\n        };\n      },\n      createInstance: (_context, event) => {\n        const form = event.data;\n\n        return (send) => {\n          function onSuccess() {\n            send(\"createSuccess\");\n          }\n\n          function onError(error: CreateKafkaInstanceError) {\n            send({ type: \"createError\", error });\n          }\n\n          onCreate(\n            {\n              plan: form.plan,\n              name: form.name,\n              provider: form.provider,\n              region: form.region,\n              sizeId: form.sizeId,\n              billing: form.billing,\n            },\n            onSuccess,\n            onError\n          );\n        };\n      },\n      standardPlan: (context) => {\n        return StandardPlanMachine.withContext({\n          capabilities: context.capabilities as StandardPlanInitializationData,\n          sizes: undefined,\n          form: {},\n          creationError: undefined,\n        }).withConfig({\n          services: {\n            getSizes: (context) => {\n              const form = context.form as Required<typeof context.form>;\n              return getStandardSizesCb(form.provider, form.region);\n            },\n          },\n        });\n      },\n      trialPlan: (context) => {\n        return TrialPlanMachine.withContext({\n          capabilities: context.capabilities as TrialPlanInitializationData,\n          sizes: undefined,\n          form: {},\n          creationError: undefined,\n        }).withConfig({\n          services: {\n            getSizes: (context) => {\n              const form = context.form as Required<typeof context.form>;\n              return getTrialSizesCb(form.provider, form.region);\n            },\n          },\n        });\n      },\n    },\n  });\n}\n","import { useInterpret } from \"@xstate/react\";\nimport type { FunctionComponent } from \"react\";\nimport { createContext } from \"react\";\nimport type { ActorRefFrom } from \"xstate\";\nimport type { CreateKafkaInstanceServices } from \"./CreateKafkaInstanceMachine\";\nimport { makeCreateKafkaInstanceMachine } from \"./CreateKafkaInstanceMachine\";\n\nexport const CreateKafkaInstanceContext = createContext<{\n  service: ActorRefFrom<ReturnType<typeof makeCreateKafkaInstanceMachine>>;\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n}>(null!);\n\nexport const CreateKafkaInstanceProvider: FunctionComponent<\n  CreateKafkaInstanceServices\n> = ({\n  onCreate,\n  checkStandardQuota,\n  checkDeveloperAvailability,\n  fetchProvidersWithRegions,\n  getStandardSizes,\n  getTrialSizes,\n  children,\n}) => {\n  const service = useInterpret(\n    () =>\n      makeCreateKafkaInstanceMachine({\n        checkStandardQuota,\n        checkDeveloperAvailability,\n        fetchProvidersWithRegions,\n        getStandardSizes,\n        getTrialSizes,\n        onCreate,\n      }),\n    { devTools: true }\n  );\n  return (\n    <CreateKafkaInstanceContext.Provider value={{ service }}>\n      {children}\n    </CreateKafkaInstanceContext.Provider>\n  );\n};\n","export const LogoAWS = new URL(\"./Logo-AWS.svg\", import.meta.url)\n  .href;\nexport const LogoAzure = new URL(\n  \"./Logo-Azure.svg\",\n  import.meta.url\n).href;\nexport const LogoGCP = new URL(\"./Logo-GCP.svg\", import.meta.url)\n  .href;\nexport const LogoRedhat = new URL(\n  \"./Logo-Redhat.svg\",\n  import.meta.url\n).href;","import type { FunctionComponent } from \"react\";\nimport { LogoAWS } from \"./images\";\n\nexport const AWSLogo: FunctionComponent = () => {\n  return (\n    <>\n      <img src={LogoAWS} alt={\"\"} style={{ height: \"60px\" }} />\n    </>\n  );\n};\n","import type { FunctionComponent } from \"react\";\nimport { LogoAzure } from \"./images\";\n\nexport const AzureLogo: FunctionComponent = () => {\n  return (\n    <>\n      <img src={LogoAzure} alt={\"\"} style={{ height: \"60px\" }} />\n    </>\n  );\n};\n","import type { FunctionComponent } from \"react\";\nimport { LogoGCP } from \"./images\";\n\nexport const GCPLogo: FunctionComponent = () => {\n  return (\n    <>\n      <img src={LogoGCP} alt={\"\"} style={{ height: \"60px\" }} />\n    </>\n  );\n};\n","import type { SelectProps } from \"@patternfly/react-core\";\nimport {\n  Flex,\n  FlexItem,\n  FormSelect,\n  FormSelectOption,\n  Gallery,\n  GalleryItem,\n  HelperText,\n  HelperTextItem,\n  Tile,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport type { MarketPlace } from \"ui-models/src/models/kafka\";\nimport { AWSLogo, AzureLogo, GCPLogo, RedhatLogo } from \"../../Logos\";\n\nexport type BillingTilesProps = {\n  value: \"prepaid\" | string | undefined;\n  hasPrepaid: boolean;\n  subscriptions: {\n    marketplace: MarketPlace;\n    subscription: string;\n    isDisabled: boolean;\n  }[];\n  isPrepaidOverQuota: boolean;\n  prepaidQuota: number;\n  isMarketplaceOverQuota: boolean;\n  marketplaceQuota: number;\n  onPrepaid: () => void;\n  onSubscription: (marketplace: MarketPlace, subscription: string) => void;\n  validated?: SelectProps[\"validated\"];\n};\nexport const BillingTiles: VoidFunctionComponent<BillingTilesProps> = ({\n  value,\n  hasPrepaid,\n  subscriptions,\n  isPrepaidOverQuota,\n  prepaidQuota,\n  isMarketplaceOverQuota,\n  marketplaceQuota,\n  onPrepaid,\n  onSubscription,\n  validated,\n}) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n  const marketplaces: { [key in MarketPlace]: string } = {\n    aws: t(\"billing.marketplace_aws\"),\n    azure: t(\"billing.marketplace_azure\"),\n    gcp: t(\"billing.marketplace_gcp\"),\n    rhm: t(\"billing.marketplace_rh\"),\n  };\n  return (\n    <>\n      <Flex\n        role=\"listbox\"\n        aria-label={t(\"select_billing\")}\n        direction={{ default: \"column\", md: \"row\" }}\n      >\n        {hasPrepaid && (\n          <Flex\n            flex={{ default: \"flex_1\" }}\n            direction={{ default: \"column\" }}\n            spaceItems={{ default: \"spaceItemsSm\" }}\n          >\n            <span className=\"pf-c-form__label\">\n              <span className=\"pf-c-form__label-text\">\n                {t(\"billing.prepaid\")}\n              </span>\n            </span>\n            <FlexItem flex={{ default: \"flex_1\" }}>\n              <Tile\n                className={\"pf-u-w-100\"}\n                title={t(\"billing.prepaid_option\")}\n                icon={tiles[\"rhm\"]}\n                isDisabled={isPrepaidOverQuota}\n                isStacked={true}\n                isSelected={value === \"prepaid\"}\n                onClick={onPrepaid}\n              >\n                &nbsp;\n              </Tile>\n            </FlexItem>\n            {isPrepaidOverQuota && prepaidQuota > 0 && (\n              <HelperText className={\"pf-c-form__helper-text\"}>\n                <HelperTextItem variant={\"error\"}>\n                  {t(\"billing.prepaid_out_of_quota\")}\n                </HelperTextItem>\n              </HelperText>\n            )}\n            {isPrepaidOverQuota && prepaidQuota === 0 && (\n              <HelperText className={\"pf-c-form__helper-text\"}>\n                <HelperTextItem variant={\"error\"}>\n                  {t(\"billing.prepaid_out_of_quota\")}\n                </HelperTextItem>\n              </HelperText>\n            )}\n          </Flex>\n        )}\n        {subscriptions.length > 0 && (\n          <Flex\n            flex={{ default: \"flex_1\" }}\n            direction={{ default: \"column\" }}\n            spaceItems={{ default: \"spaceItemsSm\" }}\n          >\n            {hasPrepaid && (\n              <span className=\"pf-c-form__label\">\n                <span className=\"pf-c-form__label-text\">\n                  {t(\"billing.marketplace\")}\n                </span>\n              </span>\n            )}\n            <Gallery hasGutter={true}>\n              {subscriptions.map(\n                ({ marketplace, subscription, isDisabled }) => (\n                  <GalleryItem key={`tile-${subscription}`}>\n                    <Tile\n                      className={\"pf-u-w-100\"}\n                      title={marketplaces[marketplace]}\n                      icon={tiles[marketplace]}\n                      isStacked={true}\n                      isSelected={value === subscription}\n                      isDisabled={isDisabled || isMarketplaceOverQuota}\n                      onClick={() => onSubscription(marketplace, subscription)}\n                    >\n                      {subscription}\n                    </Tile>\n                  </GalleryItem>\n                )\n              )}\n            </Gallery>\n            {isMarketplaceOverQuota && marketplaceQuota > 0 && (\n              <HelperText className={\"pf-c-form__helper-text\"}>\n                <HelperTextItem variant={\"error\"}>\n                  {t(\"billing.marketplace_out_of_quota\")}\n                </HelperTextItem>\n              </HelperText>\n            )}\n            {isMarketplaceOverQuota && marketplaceQuota === 0 && (\n              <HelperText className={\"pf-c-form__helper-text\"}>\n                <HelperTextItem variant={\"error\"}>\n                  {t(\"billing.marketplace_out_of_quota\")}\n                </HelperTextItem>\n              </HelperText>\n            )}\n          </Flex>\n        )}\n      </Flex>\n      <FormSelect\n        className={\"pf-u-display-none\"}\n        value={value}\n        id=\"form-billing-option\"\n        name=\"billing\"\n        validated={validated}\n        onChange={(value) => {\n          if (value === \"prepaid\") {\n            onPrepaid();\n          } else {\n            const s = subscriptions.find((s) => s.marketplace === value);\n            if (s) {\n              onSubscription(s.marketplace, s.subscription);\n            }\n          }\n        }}\n      >\n        {[\n          <FormSelectOption\n            value=\"\"\n            key=\"placeholder\"\n            label={t(\"select_billing\")}\n          />,\n          hasPrepaid ? (\n            <FormSelectOption\n              key={\"prepaid\"}\n              value={\"prepaid\"}\n              label={`prepaid`}\n            />\n          ) : null,\n          subscriptions.map(({ marketplace, subscription, isDisabled }) => {\n            return (\n              <FormSelectOption\n                key={`select-option-${subscription}`}\n                value={subscription}\n                label={`${marketplace} - ${subscription}`}\n                isDisabled={isDisabled}\n              />\n            );\n          }),\n        ]}\n      </FormSelect>\n    </>\n  );\n};\n\nconst tiles: { [id in MarketPlace]: JSX.Element } = {\n  aws: <AWSLogo />,\n  gcp: <GCPLogo />,\n  azure: <AzureLogo />,\n  rhm: <RedhatLogo />,\n};\n","import type { FunctionComponent } from \"react\";\nimport { LogoRedhat } from \"./images\";\n\nexport const RedhatLogo: FunctionComponent = () => {\n  return (\n    <>\n      <img src={LogoRedhat} alt={\"\"} style={{ height: \"60px\" }} />\n    </>\n  );\n};\n","import type { SelectProps } from \"@patternfly/react-core\";\nimport {\n  Flex,\n  FlexItem,\n  FormSelect,\n  FormSelectOption,\n  Skeleton,\n  Tile,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport type { CloudProvider } from \"ui-models/src/models/kafka\";\nimport { AWSLogo, AzureLogo, GCPLogo } from \"../../Logos\";\nimport type { CloudProviderInfo } from \"../types\";\n\nexport type CloudProvidersTilesProps = {\n  providers: (CloudProviderInfo & { isDisabled?: boolean })[];\n  value: CloudProvider | undefined;\n  onChange: (provider: CloudProvider) => void;\n  isDisabled: boolean;\n  validated?: SelectProps[\"validated\"];\n};\nexport const CloudProvidersTiles: VoidFunctionComponent<\n  CloudProvidersTilesProps\n> = ({ providers, value, onChange, isDisabled, validated }) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n  return (\n    <>\n      {providers.length === 0 && (\n        <Skeleton\n          className=\"pf-m-text-4xl\"\n          screenreaderText=\"Loading contents\"\n        />\n      )}\n      <div role=\"listbox\" aria-label={t(\"select_cloud_provider\")}>\n        <Flex\n          justifyContent={{ default: \"justifyContentSpaceBetween\" }}\n          spacer={{ default: \"spacerNone\" }}\n          spaceItems={{ default: \"spaceItemsXs\" }}\n        >\n          {providers.map(\n            ({ id, displayName, isDisabled: providerDisabled }) => (\n              <FlexItem grow={{ default: \"grow\" }} key={id}>\n                <Tile\n                  className={\"pf-u-w-100\"}\n                  title={displayName}\n                  icon={tiles[id]}\n                  isStacked={true}\n                  isSelected={value === id}\n                  isDisabled={providerDisabled || isDisabled}\n                  onClick={() => onChange(id)}\n                >\n                  {(providerDisabled || isDisabled) &&\n                    t(\"billing.provider_incompatible_with_current_billing\")}\n                  &nbsp;\n                </Tile>\n              </FlexItem>\n            )\n          )}\n        </Flex>\n      </div>\n      <FormSelect\n        className={\"pf-u-display-none\"}\n        value={value}\n        id=\"form-cloud-provider-option\"\n        name=\"cloud-provider\"\n        isDisabled={isDisabled}\n        validated={validated}\n        onChange={(value) => onChange(value as CloudProvider)}\n      >\n        {[\n          <FormSelectOption\n            value=\"\"\n            key=\"placeholder\"\n            label={t(\"select_cloud_provider\")}\n          />,\n          providers.map(({ id, displayName }, index) => {\n            return (\n              <FormSelectOption key={index} value={id} label={displayName} />\n            );\n          }),\n        ]}\n      </FormSelect>\n    </>\n  );\n};\n\nconst tiles: { [id in CloudProvider]: JSX.Element } = {\n  aws: <AWSLogo />,\n  gcp: <GCPLogo />,\n  azure: <AzureLogo />,\n};\n","import { Flex, FlexItem, Form } from \"@patternfly/react-core\";\nimport type { FormEvent, VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport type { CloudProvider, MarketPlace } from \"ui-models/src/models/kafka\";\nimport type {\n  FieldInstanceNameProps,\n  FieldSizeProps,\n  InstanceInfoProps,\n} from \"./components\";\nimport {\n  FieldAZ,\n  FieldBillingTiles,\n  FieldCloudProvider,\n  FieldCloudRegion,\n  FieldInstanceName,\n  FieldSize,\n  FormAlerts,\n  InstanceInfo,\n  InstanceInfoSkeleton,\n  ModalAlertsStandardPlan,\n} from \"./components\";\nimport { useStandardPlanMachine } from \"./machines\";\n\nexport type StandardInstanceFormProps = {\n  formId: string;\n  onClickContactUs: () => void;\n  onLearnHowToAddStreamingUnits: () => void;\n  onLearnMoreAboutSizes: () => void;\n  onClickQuickStart: () => void;\n  subscriptionOptionsHref: string;\n};\n\nexport const StandardInstanceForm: VoidFunctionComponent<\n  StandardInstanceFormProps\n> = ({\n  formId,\n  onClickContactUs,\n  onLearnHowToAddStreamingUnits,\n  onLearnMoreAboutSizes,\n  onClickQuickStart,\n  subscriptionOptionsHref,\n}) => {\n  const {\n    isBillingSelectionRequired,\n    isBillingSingleMarketplace,\n    capabilities,\n    selectedSize,\n    billingType,\n    error,\n    onCreate,\n  } = useStandardPlanMachine();\n\n  const onSubmit = useCallback(\n    (event: FormEvent<HTMLFormElement>) => {\n      event.preventDefault();\n      onCreate();\n    },\n    [onCreate]\n  );\n\n  const instanceInfoBilling: InstanceInfoProps[\"billing\"] = (() => {\n    if (!isBillingSelectionRequired) {\n      if (isBillingSingleMarketplace === false) {\n        return {\n          value: \"prepaid\",\n          subscriptionOptionsHref,\n          type: billingType,\n        };\n      } else {\n        return {\n          value: isBillingSingleMarketplace,\n          subscriptionOptionsHref,\n          type: billingType,\n        };\n      }\n    }\n    return undefined;\n  })();\n\n  return (\n    <>\n      <ModalAlertsStandardPlan\n        instanceAvailability={capabilities.instanceAvailability}\n        onClickContactUs={onClickContactUs}\n      />\n\n      <Flex\n        direction={{ default: \"column\", lg: \"row\" }}\n        alignItems={{ lg: \"alignItemsFlexStart\" }}\n      >\n        <FlexItem flex={{ default: \"flex_2\" }}>\n          <FormAlerts error={error} onClickContactUS={onClickContactUs} />\n          <Form onSubmit={onSubmit} id={formId}>\n            <ConnectedFieldInstanceName />\n            <ConnectedFieldCloudProvider />\n            <ConnectedFieldCloudRegion />\n            <ConnectedFieldAZ />\n            <ConnectedFieldSize\n              onLearnHowToAddStreamingUnits={onLearnHowToAddStreamingUnits}\n              onLearnMoreAboutSizes={onLearnMoreAboutSizes}\n            />\n            {isBillingSelectionRequired && (\n              <ConnectedBillingTiles\n                subscriptionOptionsHref={subscriptionOptionsHref}\n              />\n            )}\n          </Form>\n        </FlexItem>\n        <FlexItem\n          flex={{ default: \"flex_1\" }}\n          className=\"mas--CreateKafkaInstance__sidebar\"\n        >\n          {selectedSize === undefined ? (\n            <InstanceInfoSkeleton\n              isTrial={false}\n              onClickQuickStart={onClickQuickStart}\n            />\n          ) : (\n            <InstanceInfo\n              isTrial={false}\n              trialDurationInHours={undefined}\n              ingress={selectedSize.ingress}\n              egress={selectedSize.egress}\n              storage={selectedSize.storage}\n              maxPartitions={selectedSize.maxPartitions}\n              connections={selectedSize.connections}\n              connectionRate={selectedSize.connectionRate}\n              messageSize={selectedSize.messageSize}\n              onClickQuickStart={onClickQuickStart}\n              streamingUnits={selectedSize.displayName}\n              billing={instanceInfoBilling}\n            />\n          )}\n        </FlexItem>\n      </Flex>\n    </>\n  );\n};\n\nexport const ConnectedFieldInstanceName: VoidFunctionComponent = () => {\n  const {\n    form,\n    isNameTaken,\n    isNameInvalid,\n    isNameEmpty,\n    isNameError,\n    isFormEnabled,\n    setName,\n  } = useStandardPlanMachine();\n\n  const validity: FieldInstanceNameProps[\"validity\"] = (() => {\n    if (isNameTaken) {\n      return \"taken\";\n    } else if (isNameInvalid) {\n      return \"invalid\";\n    } else if (isNameEmpty && isNameError) {\n      return \"required\";\n    }\n    return \"valid\";\n  })();\n\n  return (\n    <FieldInstanceName\n      value={form.name || \"\"}\n      validity={validity}\n      isDisabled={!isFormEnabled}\n      onChange={setName}\n    />\n  );\n};\n\nexport const ConnectedFieldCloudProvider: VoidFunctionComponent = () => {\n  const {\n    form,\n    capabilities,\n    isProviderError,\n    isFormEnabled,\n    isBillingSingleMarketplace,\n    setProvider,\n  } = useStandardPlanMachine();\n\n  const providers =\n    isBillingSingleMarketplace &&\n    isBillingSingleMarketplace.marketplace !== \"rhm\"\n      ? capabilities.availableProviders.map((p) => ({\n          ...p,\n          isDisabled: p.id !== isBillingSingleMarketplace.marketplace,\n        }))\n      : capabilities.availableProviders;\n\n  return (\n    <FieldCloudProvider\n      isValid={!isProviderError}\n      providers={providers}\n      value={form.provider}\n      isDisabled={!isFormEnabled}\n      onChange={setProvider}\n    />\n  );\n};\n\nexport const ConnectedFieldCloudRegion: VoidFunctionComponent = () => {\n  const {\n    form,\n    selectedProvider,\n    selectedSize,\n    isRegionError,\n    isFormEnabled,\n    capabilities,\n    error,\n    setRegion,\n  } = useStandardPlanMachine();\n\n  return (\n    <FieldCloudRegion\n      validity={\n        isRegionError\n          ? \"required\"\n          : error === \"region-unavailable\" ||\n            capabilities.instanceAvailability === \"regions-unavailable\"\n          ? \"region-unavailable\"\n          : \"valid\"\n      }\n      regions={selectedProvider?.regions}\n      value={form.region}\n      isDisabled={!isFormEnabled}\n      isSizeUnavailable={selectedSize?.isDisabled || false}\n      onChange={setRegion}\n    />\n  );\n};\n\nexport const ConnectedFieldAZ: VoidFunctionComponent = () => {\n  const { isFormEnabled } = useStandardPlanMachine();\n\n  return (\n    <FieldAZ\n      validity={\"valid\"}\n      options={\"multi\"}\n      value={\"multi\"}\n      isDisabled={!isFormEnabled}\n      onChange={() => false} // AZ is defined by the backend, we just visualize the value here\n    />\n  );\n};\n\nexport const ConnectedFieldSize: VoidFunctionComponent<\n  Pick<\n    FieldSizeProps,\n    \"onLearnHowToAddStreamingUnits\" | \"onLearnMoreAboutSizes\"\n  >\n> = ({ onLearnHowToAddStreamingUnits, onLearnMoreAboutSizes }) => {\n  const {\n    form,\n    sizes,\n    isSizeOverQuota,\n    isSizeDisabled,\n    isSizeError,\n    isSizeLoadingError,\n    isBillingSelectionRequired,\n    isFormEnabled,\n    isLoadingSizes,\n    isLoading,\n    setSize,\n    remainingQuota,\n  } = useStandardPlanMachine();\n\n  return (\n    <FieldSize\n      value={form.size?.quota}\n      sizes={sizes}\n      remainingQuota={isBillingSelectionRequired ? undefined : remainingQuota}\n      isDisabled={!isFormEnabled || sizes === undefined}\n      isLoading={isLoading || isLoadingSizes}\n      isError={isSizeError}\n      isLoadingError={isSizeLoadingError}\n      validity={\n        isSizeOverQuota ? \"out-of-quota\" : isSizeDisabled ? \"required\" : \"valid\"\n      }\n      onChange={setSize}\n      onLearnHowToAddStreamingUnits={onLearnHowToAddStreamingUnits}\n      onLearnMoreAboutSizes={onLearnMoreAboutSizes}\n    />\n  );\n};\n\nfunction isMarketplaceDisabled(\n  marketplace: MarketPlace,\n  selectedProvider: CloudProvider | undefined\n) {\n  if (marketplace === \"rhm\") {\n    return false;\n  } else if (selectedProvider) {\n    return marketplace !== selectedProvider;\n  }\n  return false;\n}\n\nexport const ConnectedBillingTiles: VoidFunctionComponent<{\n  subscriptionOptionsHref: string;\n}> = ({ subscriptionOptionsHref }) => {\n  const {\n    form,\n    capabilities,\n    selectedBilling,\n    billingType,\n    isBillingPrepaidAvailable,\n    isSizeOverQuota,\n    isBillingError,\n    isBillingPrepaidOverQuota,\n    isBillingMarketplaceOverQuota,\n    setBillingPrepaid,\n    setBillingSubscription,\n  } = useStandardPlanMachine();\n\n  return (\n    <FieldBillingTiles\n      value={\n        selectedBilling === \"prepaid\"\n          ? \"prepaid\"\n          : selectedBilling?.subscription\n      }\n      hasPrepaid={isBillingPrepaidAvailable}\n      subscriptions={capabilities.marketplaceSubscriptions.flatMap((mq) =>\n        mq.subscriptions.map((subscription) => ({\n          marketplace: mq.marketplace,\n          subscription,\n          isDisabled: isMarketplaceDisabled(mq.marketplace, form.provider),\n        }))\n      )}\n      isPrepaidOverQuota={isBillingPrepaidOverQuota}\n      prepaidQuota={capabilities.remainingPrepaidQuota || 0} // we can default to 0 here just to make TS happy, we will have the info here\n      isMarketplaceOverQuota={isBillingMarketplaceOverQuota}\n      marketplaceQuota={capabilities.remainingMarketplaceQuota || 0} // we can default to 0 here just to make TS happy, we will have the info here\n      onPrepaid={setBillingPrepaid}\n      onSubscription={setBillingSubscription}\n      isValid={!isSizeOverQuota && !isBillingError}\n      billingType={billingType}\n      subscriptionOptionsHref={subscriptionOptionsHref}\n    />\n  );\n};\n","import { DropdownGroup } from \"@patternfly/react-core\";\nimport { ActionsColumn } from \"@patternfly/react-table\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\n\nexport type KafkaInstanceActionsProps = {\n  onDetails: () => void;\n  onConnection: () => void;\n  canOpenConnection: boolean;\n  canChangeOwner: boolean;\n  onChangeOwner: () => void;\n  canDelete: boolean;\n  onDelete: () => void;\n};\n\nexport const KafkaInstanceActions: VoidFunctionComponent<\n  KafkaInstanceActionsProps\n> = ({\n  onDetails,\n  onConnection,\n  canOpenConnection,\n  canChangeOwner,\n  onChangeOwner,\n  canDelete,\n  onDelete,\n}) => {\n  const { t } = useTranslation(\"kafka\");\n  return (\n    <ActionsColumn\n      rowData={hackZIndex}\n      items={[\n        {\n          customChild: (\n            <DropdownGroup\n              label={t(\"table.actions.view-instance-information\")}\n            />\n          ),\n        },\n        {\n          title: t(\"table.actions.details\"),\n          onClick: onDetails,\n        },\n        {\n          title: t(\"table.actions.connection\"),\n          ...(!canOpenConnection\n            ? {\n                isDisabled: true,\n                tooltipProps: {\n                  position: \"left\",\n                  content: t(\"kafka:no_permission_to_see_connections\"),\n                },\n                tooltip: true,\n                style: {\n                  pointerEvents: \"auto\",\n                  cursor: \"default\",\n                },\n              }\n            : {\n                onClick: onConnection,\n              }),\n        },\n        {\n          isSeparator: true,\n        },\n        {\n          title: t(\"table.actions.change-owner\"),\n          ...(!canChangeOwner\n            ? {\n                isDisabled: true,\n                tooltipProps: {\n                  position: \"left\",\n                  content: t(\"kafka:no_permission_to_change_owner\"),\n                },\n                tooltip: true,\n                style: {\n                  pointerEvents: \"auto\",\n                  cursor: \"default\",\n                },\n              }\n            : {\n                onClick: onChangeOwner,\n              }),\n        },\n        {\n          title: t(\"table.actions.delete\"),\n          ...(!canDelete\n            ? {\n                isDisabled: true,\n                tooltipProps: {\n                  position: \"left\",\n                  content: t(\"kafka:no_permission_to_delete_kafka\"),\n                },\n                tooltip: true,\n                style: {\n                  pointerEvents: \"auto\",\n                  cursor: \"default\",\n                },\n              }\n            : {\n                onClick: onDelete,\n              }),\n        },\n      ]}\n    />\n  );\n};\n\nconst hackZIndex = {\n  actionProps: {\n    style: { zIndex: 9999 },\n  },\n};\n","import {\n  Breadcrumb,\n  BreadcrumbItem,\n  Level,\n  LevelItem,\n  Nav,\n  NavItem,\n  NavList,\n  PageSection,\n  PageSectionVariants,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport type { KafkaInstanceActionsProps } from \"./KafkaInstanceActions\";\nimport { KafkaInstanceActions } from \"./KafkaInstanceActions\";\n\ntype Sections =\n  | \"dashboard\"\n  | \"topics\"\n  | \"consumer\"\n  | \"permissions\"\n  | \"settings\";\n\nexport type DataPlaneHeaderProps = {\n  instancesHref: string;\n  instanceName: string;\n  activeSection: Sections;\n  sectionsHref: { [key in Sections]: string };\n} & KafkaInstanceActionsProps;\n\nexport const DataPlaneHeader: VoidFunctionComponent<DataPlaneHeaderProps> = ({\n  instancesHref,\n  instanceName,\n  activeSection,\n  sectionsHref,\n  ...actionsProps\n}) => {\n  const { t } = useTranslation(\"kafka\");\n\n  return (\n    <>\n      <section className=\"pf-c-page__main-breadcrumb\">\n        <Breadcrumb ouiaId={\"breadcrumb\"}>\n          <BreadcrumbItem\n            render={() => (\n              <Link to={instancesHref}>{t(\"common:kafka_instance\")}</Link>\n            )}\n          />\n          <BreadcrumbItem isActive={true}>{instanceName}</BreadcrumbItem>\n        </Breadcrumb>\n      </section>\n      <PageSection variant={PageSectionVariants.light}>\n        <Level>\n          <LevelItem>\n            <TextContent>\n              <Text component=\"h1\">{instanceName}</Text>\n            </TextContent>\n          </LevelItem>\n          <LevelItem>\n            <KafkaInstanceActions {...actionsProps} />\n          </LevelItem>\n        </Level>\n      </PageSection>\n      <PageSection\n        variant={PageSectionVariants.light}\n        padding={{ default: \"noPadding\" }}\n        className=\"pf-c-page__main-tabs\"\n        hasShadowBottom={true}\n      >\n        <Nav\n          variant=\"tertiary\"\n          data-testid=\"pageKafka-tabProperties\"\n          className=\"pf-u-px-sm-on-xl\"\n        >\n          <NavList>\n            <NavItem\n              style={{ borderTop: 0 }}\n              data-testid=\"pageKafka-tabDashboard\"\n              id=\"dashboard-tab-section\"\n              aria-label={t(\"dataPlaneNavigation.dashboard\")}\n              ouiaId={\"tab-Dashboard\"}\n              isActive={activeSection === \"dashboard\"}\n            >\n              <Link to={sectionsHref[\"dashboard\"]}>\n                {t(\"dataPlaneNavigation.dashboard\")}\n              </Link>\n            </NavItem>\n            <NavItem\n              style={{ borderTop: 0 }}\n              data-testid=\"pageKafka-tabTopics\"\n              id=\"topics-tab-section\"\n              aria-label={t(\"dataPlaneNavigation.topics\")}\n              ouiaId={\"tab-Topics\"}\n              isActive={activeSection === \"topics\"}\n            >\n              <Link to={sectionsHref[\"topics\"]}>\n                {t(\"dataPlaneNavigation.topics\")}\n              </Link>\n            </NavItem>\n            <NavItem\n              style={{ borderTop: 0 }}\n              data-testid=\"pageKafka-tabConsumers\"\n              id=\"consumer-groups-tab-section\"\n              aria-label={t(\"dataPlaneNavigation.consumer_groups\")}\n              ouiaId={\"tab-Consumers\"}\n              isActive={activeSection === \"consumer\"}\n            >\n              <Link to={sectionsHref[\"consumer\"]}>\n                {t(\"dataPlaneNavigation.consumer_groups\")}\n              </Link>\n            </NavItem>\n            <NavItem\n              style={{ borderTop: 0 }}\n              data-testid=\"pageKafka-tabPermissions\"\n              id=\"permissions-tab-section\"\n              aria-label={t(\"dataPlaneNavigation.permissions\")}\n              ouiaId={\"tab-Permissions\"}\n              isActive={activeSection === \"permissions\"}\n            >\n              <Link to={sectionsHref[\"permissions\"]}>\n                {t(\"dataPlaneNavigation.permissions\")}\n              </Link>\n            </NavItem>\n            <NavItem\n              style={{ borderTop: 0 }}\n              data-testid=\"pageKafka-tabSettings\"\n              id=\"settings-tab-section\"\n              aria-label={t(\"dataPlaneNavigation.settings\")}\n              ouiaId={\"tab-Settings\"}\n              isActive={activeSection === \"settings\"}\n            >\n              <Link to={sectionsHref[\"settings\"]}>\n                {t(\"dataPlaneNavigation.settings\")}\n              </Link>\n            </NavItem>\n          </NavList>\n        </Nav>\n      </PageSection>\n    </>\n  );\n};\n","import {\n  Breadcrumb,\n  BreadcrumbItem,\n  Level,\n  LevelItem,\n  Nav,\n  NavItem,\n  NavList,\n  PageSection,\n  PageSectionVariants,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport type { KafkaInstanceActionsProps } from \"./KafkaInstanceActions\";\nimport { KafkaInstanceActions } from \"./KafkaInstanceActions\";\n\ntype Sections = \"consumer\" | \"messages\" | \"properties\" | \"schemas\";\n\nexport type DataPlaneTopicHeaderProps = {\n  instancesHref: string;\n  instanceName: string;\n  instanceDetailHref: string;\n  instanceTopicsHref: string;\n  topicName: string;\n  activeSection: Sections;\n  tabsHref: { [key in Sections]: string };\n} & KafkaInstanceActionsProps;\n\nexport const DataPlaneTopicHeader: VoidFunctionComponent<\n  DataPlaneTopicHeaderProps\n> = ({\n  instancesHref,\n  instanceName,\n  instanceDetailHref,\n  instanceTopicsHref,\n  topicName,\n  activeSection,\n  tabsHref,\n  ...actionsProps\n}) => {\n  const { t } = useTranslation(\"kafka\");\n\n  return (\n    <>\n      <section className=\"pf-c-page__main-breadcrumb\">\n        <Breadcrumb ouiaId={\"breadcrumb\"}>\n          <BreadcrumbItem\n            render={() => (\n              <Link to={instancesHref}>{t(\"common:kafka_instance\")}</Link>\n            )}\n          />\n          <BreadcrumbItem\n            render={() => <Link to={instanceDetailHref}>{instanceName}</Link>}\n          />\n          <BreadcrumbItem\n            render={() => (\n              <Link to={instanceTopicsHref}>\n                {t(\"dataPlaneNavigation.topics\")}\n              </Link>\n            )}\n          />\n          <BreadcrumbItem isActive={true}>{topicName}</BreadcrumbItem>\n        </Breadcrumb>\n      </section>\n      <PageSection variant={PageSectionVariants.light}>\n        <Level>\n          <LevelItem>\n            <TextContent>\n              <Text component=\"h1\">{topicName}</Text>\n            </TextContent>\n          </LevelItem>\n          <LevelItem>\n            <KafkaInstanceActions {...actionsProps} />\n          </LevelItem>\n        </Level>\n      </PageSection>\n      <PageSection\n        variant={PageSectionVariants.light}\n        padding={{ default: \"noPadding\" }}\n        className=\"pf-c-page__main-tabs\"\n        hasShadowBottom={true}\n      >\n        <Nav variant=\"tertiary\" className=\"pf-u-px-sm-on-xl\">\n          <NavList>\n            <NavItem\n              style={{ borderTop: 0 }}\n              aria-label={t(\"dataPlaneTopicNavigation.consumer_groups\")}\n              ouiaId={\"tab-Dashboard\"}\n              isActive={activeSection === \"consumer\"}\n            >\n              <Link to={tabsHref[\"consumer\"]}>\n                {t(\"dataPlaneTopicNavigation.consumer_groups\")}\n              </Link>\n            </NavItem>\n            <NavItem\n              style={{ borderTop: 0 }}\n              aria-label={t(\"dataPlaneTopicNavigation.messages\")}\n              ouiaId={\"tab-Topics\"}\n              isActive={activeSection === \"messages\"}\n            >\n              <Link to={tabsHref[\"messages\"]}>\n                {t(\"dataPlaneTopicNavigation.messages\")}\n              </Link>\n            </NavItem>\n            <NavItem\n              style={{ borderTop: 0 }}\n              aria-label={t(\"dataPlaneTopicNavigation.properties\")}\n              ouiaId={\"tab-Permissions\"}\n              isActive={activeSection === \"properties\"}\n            >\n              <Link to={tabsHref[\"properties\"]}>\n                {t(\"dataPlaneTopicNavigation.properties\")}\n              </Link>\n            </NavItem>\n            <NavItem\n              style={{ borderTop: 0 }}\n              aria-label={t(\"dataPlaneTopicNavigation.schemas\")}\n              ouiaId={\"tab-Settings\"}\n              isActive={activeSection === \"schemas\"}\n            >\n              <Link to={tabsHref[\"schemas\"]}>\n                {t(\"dataPlaneTopicNavigation.schemas\")}\n              </Link>\n            </NavItem>\n          </NavList>\n        </Nav>\n      </PageSection>\n    </>\n  );\n};\n","import type { DeleteModalProps } from \"@rhoas/app-services-ui-components\";\nimport {\n  DeleteModal,\n  Trans,\n  useTranslation,\n} from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\n\nexport type DeleteKafkaInstanceProps = {\n  instanceName: string | undefined;\n} & Omit<\n  DeleteModalProps,\n  \"title\" | \"variant\" | \"confirmationValue\" | \"children\"\n>;\n\nexport const DeleteKafkaInstance: VoidFunctionComponent<\n  DeleteKafkaInstanceProps\n> = ({ instanceName, ...props }) => {\n  const { t } = useTranslation(\"kafka\");\n\n  return (\n    <DeleteModal\n      {...props}\n      variant={\"destructive\"}\n      title={t(\"delete_instance_title\")}\n      confirmationValue={instanceName}\n    >\n      <Trans\n        ns={\"kafka\"}\n        i18nKey={\"delete_instance_message\"}\n        components={[<strong />]}\n        values={{\n          instanceName,\n        }}\n      />\n    </DeleteModal>\n  );\n};\n","import type { I18nProviderProps } from \"@rhoas/app-services-ui-components\";\nimport { I18nProvider as UiComponentsI18nProvider } from \"@rhoas/app-services-ui-components\";\nimport type { FunctionComponent } from \"react\";\n\nexport const I18nProvider: FunctionComponent<\n  Omit<I18nProviderProps, \"resources\">\n> = ({ lng, debug, children }) => {\n  return (\n    <UiComponentsI18nProvider\n      lng={lng}\n      resources={{\n        en: {\n          common: () =>\n            import(\"@rhoas/app-services-ui-components/locales/en/common.json\"),\n          \"create-kafka-instance\": () =>\n            import(\"locales/en/create-kafka-instance.json\"),\n          kafka: () => import(\"locales/en/kafka.json\"),\n          \"kafkaoverview-v3\": () => import(\"locales/en/kafkaoverview-v3.json\"),\n          metrics: () => import(\"locales/en/metrics.json\"),\n          topic: () => import(\"locales/en/topic.json\"),\n          \"manage-kafka-permissions\": () =>\n            import(\"locales/en/manage-kafka-permissions.json\"),\n          \"create-topic\": () => import(\"locales/en/create-topic.json\"),\n          \"message-browser\": () => import(\"locales/en/message-browser.json\"),\n          \"connection-tab\": () => import(\"locales/en/connection-tab.json\"),\n          \"connection-tab-p1\": () =>\n            import(\"locales/en/connection-tab-p1.json\"),\n        },\n        it: {\n          common: () => Promise.resolve({ delete: \"Elimina\" }),\n        },\n      }}\n      debug={debug}\n    >\n      {children}\n    </UiComponentsI18nProvider>\n  );\n};\n","import { Alert } from \"@patternfly/react-core\";\nimport { differenceInHours } from \"date-fns\";\nimport type { FunctionComponent } from \"react\";\nimport { Trans } from \"@rhoas/app-services-ui-components\";\nimport { FormatDate } from \"@rhoas/app-services-ui-components\";\n\ntype DetailsTabAlertProps = {\n  expiryDate: Date;\n};\n\nexport const DetailsTabAlert: FunctionComponent<DetailsTabAlertProps> = ({\n  expiryDate,\n}) => {\n  const hoursLeft = expiryDate ? differenceInHours(expiryDate, Date.now()) : 0;\n  return (\n    <Alert\n      variant={\n        hoursLeft > 24\n          ? \"info\"\n          : hoursLeft < 24 && hoursLeft > 5\n          ? \"warning\"\n          : \"danger\"\n      }\n      title={\n        <Trans\n          i18nKey=\"kafka:will_expire\"\n          components={{\n            time: <FormatDate date={expiryDate} format=\"expiration\" />,\n          }}\n        />\n      }\n      aria-live=\"polite\"\n      isInline\n      className=\"pf-u-mb-lg\"\n    />\n  );\n};\n","import {\n  Skeleton,\n  TextContent,\n  TextList,\n  TextListItem,\n  TextListItemVariants,\n  TextListVariants,\n} from \"@patternfly/react-core\";\nimport { FormatDate, useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { ReactChild, VoidFunctionComponent } from \"react\";\nimport type { MarketplaceSubscription, Plan } from \"ui-models/src/models/kafka\";\nimport type { Bytes } from \"../../../../../ui-models/src/types\";\nimport { DetailsTabAlert } from \"./DetailsTabAlert\";\n\n/**\n * All fields marked as accepting undefined will show a skeleton loader until the value is available.\n * This is to support fetching the data from different APIs.\n */\nexport type KafkaDetailsTabProps = {\n  id: string;\n  createdAt: Date;\n  updatedAt: Date;\n  expiryDate: Date | undefined;\n  owner: string;\n  provider: string;\n  region: string;\n  instanceType: Plan;\n  size: string | undefined;\n  ingress: number | undefined;\n  egress: number | undefined;\n  storage: Bytes | undefined;\n  maxPartitions: number | undefined;\n  connections: number | undefined;\n  connectionRate: number | undefined;\n  messageSize: Bytes | undefined;\n  billing: \"prepaid\" | MarketplaceSubscription | undefined;\n  kafkaVersion: string;\n};\n\nexport const KafkaDetailsTab: VoidFunctionComponent<KafkaDetailsTabProps> = ({\n  id,\n  createdAt,\n  updatedAt,\n  owner,\n  provider,\n  region,\n  expiryDate,\n  instanceType,\n  size,\n  ingress,\n  egress,\n  storage,\n  maxPartitions,\n  connections,\n  connectionRate,\n  messageSize,\n  billing,\n  kafkaVersion,\n}) => {\n  const { t } = useTranslation(\"kafka\");\n\n  const renderTextListItem = (title: string, value: ReactChild | undefined) => (\n    <>\n      <TextListItem component={TextListItemVariants.dt}>{title}</TextListItem>\n      {value ? (\n        <TextListItem component={TextListItemVariants.dd}>{value}</TextListItem>\n      ) : (\n        <Skeleton\n          width=\"50%\"\n          screenreaderText={t(\"common:skeleton_loader_screenreader_text\", {\n            contentName: title,\n          })}\n        />\n      )}\n    </>\n  );\n  return (\n    <div className=\"mas--details__drawer--tab-content\">\n      {instanceType !== \"standard\" && expiryDate && (\n        <DetailsTabAlert expiryDate={expiryDate} />\n      )}\n      <TextContent>\n        <TextList component={TextListVariants.dl}>\n          {instanceType === \"standard\" &&\n            renderTextListItem(\n              t(\"common:size\"),\n              size\n                ? t(\"create-kafka-instance:streaming_size_value\", {\n                    value: size,\n                  })\n                : undefined\n            )}\n          {renderTextListItem(\n            t(\"ingress\"),\n            ingress\n              ? t(\"create-kafka-instance:ingress_value\", {\n                  value: ingress,\n                })\n              : undefined\n          )}\n          {renderTextListItem(\n            t(\"egress\"),\n            egress\n              ? t(\"create-kafka-instance:egress_value\", {\n                  value: egress,\n                })\n              : undefined\n          )}\n          {renderTextListItem(\n            t(\"storage\"),\n            storage?.value\n              ? t(\"create-kafka-instance:storage_value\", {\n                  value: storage.value,\n                })\n              : undefined\n          )}\n          {renderTextListItem(\n            t(\"partitions\"),\n            maxPartitions\n              ? t(\"create-kafka-instance:partitions_value\", {\n                  value: maxPartitions,\n                })\n              : undefined\n          )}\n          {renderTextListItem(\n            t(\"client_connections\"),\n            connections\n              ? t(\"create-kafka-instance:client_connections_value\", {\n                  value: connections,\n                })\n              : undefined\n          )}\n          {renderTextListItem(\n            t(\"connection_rate\"),\n            connectionRate\n              ? t(\"create-kafka-instance:connection_rate_value\", {\n                  value: connectionRate,\n                })\n              : undefined\n          )}\n          {renderTextListItem(\n            t(\"message_size\"),\n            messageSize?.value\n              ? t(\"create-kafka-instance:message_size_value\", {\n                  value: messageSize.value,\n                })\n              : undefined\n          )}\n\n          {renderTextListItem(t(\"common:id\"), id)}\n          {renderTextListItem(t(\"common:kafka_version\"), kafkaVersion)}\n          {renderTextListItem(t(\"common:owner\"), owner)}\n          {renderTextListItem(\n            t(\"common:time_created\"),\n            <FormatDate date={createdAt} format={\"long\"} />\n          )}\n          {renderTextListItem(\n            t(\"common:time_updated\"),\n            <FormatDate date={updatedAt} format={\"long\"} />\n          )}\n          {renderTextListItem(t(\"common:cloud_provider\"), provider)}\n          {renderTextListItem(t(\"common:region\"), region)}\n          {renderTextListItem(\n            t(\"create-kafka-instance:billing.field_label\"),\n            (() => {\n              if (billing === undefined) {\n                return undefined;\n              } else if (billing === \"prepaid\") {\n                return t(\"create-kafka-instance:billing.prepaid_option\");\n              } else {\n                switch (billing.marketplace) {\n                  case \"aws\":\n                    return (\n                      <>\n                        {t(\"create-kafka-instance:billing.marketplace_aws\")}\n                        <br />\n                        {billing.subscription}\n                      </>\n                    );\n                  case \"azure\":\n                    return (\n                      <>\n                        {t(\"create-kafka-instance:billing.marketplace_azure\")}\n                        <br />\n                        {billing.subscription}\n                      </>\n                    );\n                  case \"gcp\":\n                    return (\n                      <>\n                        {t(\"create-kafka-instance:billing.marketplace_gcp\")}\n                        <br />\n                        {billing.subscription}\n                      </>\n                    );\n                  case \"rhm\":\n                    return (\n                      <>\n                        {t(\"create-kafka-instance:billing.marketplace_rh\")}\n                        <br />\n                        {billing.subscription}\n                      </>\n                    );\n                }\n              }\n            })()\n          )}\n        </TextList>\n      </TextContent>\n    </div>\n  );\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from \"@patternfly/react-core\";\nimport { ExclamationTriangleIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const SuspendedConnection: VoidFunctionComponent = () => {\n  const { t } = useTranslation(\"kafka\");\n  return (\n    <EmptyState variant={EmptyStateVariant.small}>\n      <EmptyStateIcon icon={ExclamationTriangleIcon} color={\"#f0ab00\"} />\n      <Title headingLevel={\"h1\"} size={TitleSizes.lg}>\n        {t(\"suspend_empty_state_title\")}\n      </Title>\n      <EmptyStateBody>{t(\"suspend_empty_state_body\")}</EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import {\n  Button,\n  ButtonVariant,\n  ClipboardCopy,\n  ExpandableSection,\n  Label,\n  Popover,\n  Skeleton,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { HelpIcon } from \"@patternfly/react-icons\";\nimport {\n  ExternalLink,\n  Trans,\n  useTranslation,\n} from \"@rhoas/app-services-ui-components\";\nimport type { FunctionComponent } from \"react\";\nimport { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { SuspendedConnection } from \"./SuspendedConnection\";\n\nexport type KafkaConnectionTabP2Props = {\n  isKafkaSuspended?: boolean;\n  isKafkaPending?: boolean;\n  externalServer?: string;\n  tokenEndPointUrl: string;\n  linkToServiceAccount: string;\n  linkToAccessTab: string;\n  adminAPIUrl: string | undefined;\n  showCreateServiceAccountModal: () => void;\n  kafkaFleetManagerUrl: string;\n};\n\nexport const KafkaConnectionTabP2: FunctionComponent<\n  KafkaConnectionTabP2Props\n> = ({\n  isKafkaSuspended,\n  isKafkaPending,\n  externalServer,\n  tokenEndPointUrl,\n  linkToServiceAccount,\n  linkToAccessTab,\n  adminAPIUrl,\n  kafkaFleetManagerUrl,\n  showCreateServiceAccountModal,\n}) => {\n  const { t } = useTranslation();\n\n  const [isExpanded, setIsExpanded] = useState<boolean>(false);\n\n  const onChangeExpandedSection = () => {\n    setIsExpanded(!isExpanded);\n  };\n\n  return isKafkaSuspended ? (\n    <SuspendedConnection />\n  ) : (\n    <div className=\"mas--details__drawer--tab-content\">\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.small}>\n          {t(\"connection-tab:drawer_resource_tab_body_description_1\")}\n        </Text>\n        <Text component={TextVariants.h3} className=\"pf-u-mt-xl\">\n          {t(\"connection-tab:bootstrap_server\")}\n        </Text>\n        <Text component={TextVariants.small}>\n          {t(\"connection-tab:bootstrap_server_description\")}\n        </Text>\n        {isKafkaPending ? (\n          <Skeleton fontSize=\"2xl\" />\n        ) : (\n          <ClipboardCopy\n            data-testid=\"drawerStreams-copyBootstrapURL\"\n            textAriaLabel={t(\"connection-tab:bootstrap_server\")}\n            isReadOnly\n          >\n            {externalServer}\n          </ClipboardCopy>\n        )}\n      </TextContent>\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.h3} className=\"pf-u-mt-xl\">\n          {t(\"connection-tab:service_accounts_small\")}\n        </Text>\n        <Text component={TextVariants.small}>\n          {\n            <Trans\n              i18nKey={\n                \"connection-tab:create_service_account_to_generate_credentials\"\n              }\n              components={{\n                value: (\n                  <Link\n                    to={linkToServiceAccount}\n                    data-testid=\"tableStreams-linkKafka\"\n                  ></Link>\n                ),\n              }}\n            />\n          }\n        </Text>\n      </TextContent>\n      <Button\n        variant={ButtonVariant.secondary}\n        isInline\n        onClick={showCreateServiceAccountModal}\n        data-testid=\"drawerStreams-buttonCreateServiceAccount\"\n      >\n        {t(\"connection-tab:create_service_account\")}\n      </Button>\n      <TextContent className=\"pf-u-pt-sm\">\n        <Text component={TextVariants.small}>\n          {\n            <Trans\n              i18nKey={\"connection-tab:current_instance\"}\n              components={{\n                value: <Link to={linkToAccessTab}></Link>,\n              }}\n            />\n          }\n        </Text>\n      </TextContent>\n      <TextContent className=\"pf-u-pb-sm\">\n        <ExpandableSection\n          toggleContent={\n            <div className=\"pf-c-content\">\n              <Text component={TextVariants.h3} className={\"pf-c-content\"}>\n                {t(\"connection-tab:rest_api_header\")}\n              </Text>\n            </div>\n          }\n          isExpanded={isExpanded}\n          onToggle={onChangeExpandedSection}\n          className=\"pf-u-mt-lg\"\n        >\n          <TextContent className=\"pf-u-pb-sm\">\n            <Text component={TextVariants.small}>\n              {t(\"connection-tab:rest_api_description\")}\n            </Text>\n          </TextContent>\n          <TextContent>\n            <strong>\n              {t(\"connection-tab:kafka_instance_url_label\")}\n              <Popover\n                headerContent={\n                  <div>\n                    {t(\"connection-tab:kafka_instance_url_popover_label\")}\n                  </div>\n                }\n                bodyContent={\n                  <TextContent>\n                    <p>{t(\"connection-tab:kafka_instance_url_popover_body\")}</p>\n                    <p>\n                      <Trans\n                        ns={\"connection-tab\"}\n                        i18nKey={\"popover_helper_text\"}\n                        components={[\n                          <Button\n                            isInline\n                            variant={ButtonVariant.link}\n                            component=\"a\"\n                            href=\"https://console.redhat.com/docs/api/kafkainstance?github-owner=redhat-developer&github-repo=app-services-sdk-core&github-content=kafka-admin-rest.yaml%3Fref%3Ddoc-portal&readonly=true\"\n                          />,\n                          <ExternalLink\n                            testId={\"customerPortal-link\"}\n                            href=\"https://access.redhat.com/documentation/en-us/red_hat_openshift_application_services/1/guide/2409253a-45ee-470e-bdc9-5db4bfcf9d0f\"\n                            className={\"pf-u-ml-xs\"}\n                          />,\n                        ]}\n                      />\n                    </p>\n                  </TextContent>\n                }\n              >\n                <Button\n                  variant={ButtonVariant.plain}\n                  aria-label={t(\n                    \"connection-tab:kafka_instance_url_button_aria_label\"\n                  )}\n                >\n                  <HelpIcon />\n                </Button>\n              </Popover>\n            </strong>\n            {adminAPIUrl ? (\n              <ClipboardCopy\n                textAriaLabel={t(\"connection-tab:kafka_instance_url_label\")}\n                isReadOnly\n              >\n                {adminAPIUrl}\n              </ClipboardCopy>\n            ) : (\n              <Skeleton fontSize=\"2xl\" />\n            )}\n            <TextContent className=\"pf-u-pt-sm\">\n              <Text component={TextVariants.small}>\n                {t(\"connection-tab:kafka_instance_url_description\")}\n              </Text>\n            </TextContent>\n          </TextContent>\n          <TextContent className=\"pf-u-mt-md\">\n            <strong>\n              {t(\"connection-tab:kafka_management_url\")}\n              <Popover\n                headerContent={\n                  <div>\n                    {t(\"connection-tab:kafka_management_popover_header\")}\n                  </div>\n                }\n                bodyContent={\n                  <TextContent>\n                    <p>{t(\"connection-tab:kafka_management_popover_body\")}</p>\n                    <p>\n                      <Trans\n                        ns={\"connection-tab\"}\n                        i18nKey={\"popover_helper_text\"}\n                        components={[\n                          <Button\n                            isInline\n                            variant={ButtonVariant.link}\n                            component=\"a\"\n                            href=\"https://console.redhat.com/docs/api/kafkamgmt?github-owner=redhat-developer&github-repo=app-services-sdk-core&github-content=kas-fleet-manager.yaml%3Fref%3Ddoc-portal\"\n                          />,\n                          <ExternalLink\n                            testId={\"customerPortal-link\"}\n                            href=\"https://access.redhat.com/documentation/en-us/red_hat_openshift_application_services/1/guide/2409253a-45ee-470e-bdc9-5db4bfcf9d0f\"\n                            className={\"pf-u-ml-xs\"}\n                          />,\n                        ]}\n                      />\n                    </p>\n                  </TextContent>\n                }\n              >\n                <Button\n                  variant={ButtonVariant.plain}\n                  aria-label={t(\n                    \"connection-tab:kafka_management_button_aria_label\"\n                  )}\n                >\n                  <HelpIcon />\n                </Button>\n              </Popover>\n            </strong>\n            {isKafkaPending ? (\n              <Skeleton fontSize=\"2xl\" />\n            ) : (\n              <ClipboardCopy\n                textAriaLabel={t(\"connection-tab:kafka_management_url\")}\n                isReadOnly\n              >\n                {kafkaFleetManagerUrl}\n              </ClipboardCopy>\n            )}\n            <TextContent className=\"pf-u-pt-sm\">\n              <Text component={TextVariants.small}>\n                {t(\"connection-tab:kafka_management_description\")}\n              </Text>\n            </TextContent>\n          </TextContent>\n        </ExpandableSection>\n      </TextContent>\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.h3} className=\"pf-u-mt-xl\">\n          {t(\"connection-tab:authentication_method\")}\n        </Text>\n        <Text component={TextVariants.h4} className=\"pf-u-mt-md\">\n          {t(\"connection-tab:sasl_oauthbearer\")}{\" \"}\n          <Label color=\"green\">{t(\"connection-tab:recommended\")}</Label>\n          <Popover\n            aria-label={t(\"connection-tab:sasl_oauthbearer\")}\n            bodyContent={\n              <div>{t(\"connection-tab:sasl_oauthbearer_popover_content\")}</div>\n            }\n          >\n            <Button\n              variant={ButtonVariant.plain}\n              aria-label={t(\"connection-tab:more_info_about_sasl_oauthbearer\")}\n            >\n              <HelpIcon />\n            </Button>\n          </Popover>\n        </Text>\n        <Text component={TextVariants.small}>\n          {t(\"connection-tab:sasl_oauthbearer_description\")}\n        </Text>\n        <strong>{t(\"connection-tab:token_endpoint_url\")}</strong>\n        {isKafkaPending ? (\n          <Skeleton fontSize=\"2xl\" />\n        ) : (\n          <ClipboardCopy\n            textAriaLabel={t(\"connection-tab:token_endpoint_url\")}\n            isReadOnly\n          >\n            {tokenEndPointUrl}\n          </ClipboardCopy>\n        )}\n      </TextContent>\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.h4} className=\"pf-u-mt-md\">\n          {t(\"connection-tab:sasl_plain\")}\n        </Text>\n        <Text component={TextVariants.small}>\n          {t(\"connection-tab:sasl_plain_description\")}\n        </Text>\n      </TextContent>\n    </div>\n  );\n};\n","import {\n  ClipboardCopyButton,\n  CodeBlock,\n  CodeBlockAction,\n  CodeBlockCode,\n  ExpandableSection,\n  ExpandableSectionToggle,\n} from \"@patternfly/react-core\";\nimport { useEffect, useState } from \"react\";\nimport type { VoidFunctionComponent } from \"react\";\n\nexport type ClientType = \"java\" | \"python\" | \"quarkus\" | \"springboot\";\n\nexport type SampleCodeSnippetProps = {\n  expandableCode?: string;\n  codeBlockCode: string;\n  codeSnippet?: ClientType;\n};\n\nexport const SampleCodeSnippet: VoidFunctionComponent<\n  SampleCodeSnippetProps\n> = ({ expandableCode, codeBlockCode, codeSnippet }) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  const [copied, setCopied] = useState<boolean>(false);\n\n  useEffect(() => {\n    setIsExpanded(false);\n  }, [codeSnippet]);\n\n  const clipboardCopyFunc = (_event: any, text: string) => {\n    navigator.clipboard\n      .writeText(text.toString())\n      .then(() => {\n        setCopied(true);\n      })\n      .catch(() => {\n        setCopied(false);\n      });\n  };\n\n  const onToggle = (isExpanded: boolean) => {\n    setIsExpanded(isExpanded);\n  };\n\n  const copyCode = expandableCode\n    ? codeBlockCode + \"\\n\" + expandableCode\n    : codeBlockCode;\n\n  const actions = (\n    <CodeBlockAction>\n      <ClipboardCopyButton\n        id=\"basic-copy-button\"\n        textId=\"code-content\"\n        aria-label=\"Copy to clipboard\"\n        exitDelay={600}\n        maxWidth=\"110px\"\n        variant=\"plain\"\n        onClick={(e) => clipboardCopyFunc(e, copyCode)}\n      >\n        {copied ? \"Successfully copied to clipboard!\" : \"Copy to clipboard\"}\n      </ClipboardCopyButton>\n    </CodeBlockAction>\n  );\n\n  return (\n    <CodeBlock actions={actions}>\n      <CodeBlockCode id=\"code-content\">\n        {codeBlockCode}\n\n        <ExpandableSection\n          isExpanded={isExpanded}\n          isDetached\n          contentId=\"code-block-expand\"\n        >\n          {expandableCode}\n        </ExpandableSection>\n      </CodeBlockCode>\n      {expandableCode ? (\n        <ExpandableSectionToggle\n          isExpanded={isExpanded}\n          onToggle={onToggle}\n          contentId=\"code-block-expand\"\n          direction=\"up\"\n        >\n          {isExpanded ? \"Show Less\" : \"Show More\"}\n        </ExpandableSectionToggle>\n      ) : null}\n    </CodeBlock>\n  );\n};\n","export const javaConfigCodeBlock = (\n  kafkaBootstrapUrl: string,\n  tokenEndpointUrl: string\n) => {\n  return `package org.example;\nimport org.apache.kafka.clients.producer.ProducerConfig;  \nimport java.util.Properties;\n    \npublic class KafkaConfig {\n    \n    static Properties properties() {\n    \n        String kafkaHost = \"${kafkaBootstrapUrl}\";\n        String rhoasClientID = \"<client_id>\";\n        String rhoasClientSecret = \"<client_secret>\";\n        String rhoasOauthTokenUrl = \"${tokenEndpointUrl}\";`;\n};\n\nexport const javaConfigExpandabledBlock = `\n        var properties= new Properties();\n\n        properties.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaHost);\n        properties.setProperty(\"security.protocol\", \"SASL_SSL\");\n        properties.setProperty(\"sasl.mechanism\", \"OAUTHBEARER\");\n\n        properties.setProperty(\"sasl.jaas.config\", \"org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required clientId=\\\\\"\" + rhoasClientID + \"\\\\\" clientSecret=\\\\\"\" + rhoasClientSecret + \"\\\\\" oauth.token.endpoint.uri=\\\\\"\" + rhoasOauthTokenUrl + \"\\\\\";\");\n\n        properties.setProperty(\"sasl.login.callback.handler.class\", \"org.apache.kafka.common.security.oauthbearer.secured.OAuthBearerLoginCallbackHandler\");\n        properties.setProperty(\"sasl.oauthbearer.token.endpoint.url\", rhoasOauthTokenUrl);\n        properties.setProperty(\"sasl.oauthbearer.scope.claim.name\", \"api.iam.service_accounts\");\n\n        return properties;\n    }\n}`;\n\nexport const javaProducerCodeBlock = `package org.example;\n \nimport org.apache.kafka.clients.producer.ProducerConfig;\nimport org.apache.kafka.clients.producer.ProducerRecord;\nimport org.apache.kafka.clients.producer.KafkaProducer;\nimport org.apache.kafka.common.serialization.StringSerializer;\n \npublic class ProducerExample {\n \n   public static void main(String[] args) {`;\n\nexport const javaProducerExpandableBlock = `\n   //Creating producer properties\n   var properties= KafkaConfig.properties();\n   properties.setProperty(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n   properties.setProperty(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n\n   KafkaProducer<String,String> producer= new KafkaProducer<String,String>(properties);\n\n   producer.send(new ProducerRecord<>(<\"topic\">, \"Test Message\"));\n   producer.flush();\n   producer.close();\n  }\n}`;\n\nexport const javaConsumerCodeBlock = `package org.example;\n \nimport java.util.Arrays;\n\nimport org.apache.kafka.clients.consumer.ConsumerConfig;\nimport org.apache.kafka.clients.consumer.KafkaConsumer;\nimport org.apache.kafka.common.serialization.StringDeserializer;\nimport org.apache.kafka.clients.consumer.ConsumerRecord;\nimport org.apache.kafka.clients.consumer.ConsumerRecords;\nimport java.time.Duration;`;\n\nexport const javaConsumerExpandableBlock = `\npublic class ConsumerExample {\n\n    public static void main(String[] args) {\n\n        var properties= KafkaConfig.properties();\n\n        properties.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n        properties.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n        properties.setProperty(ConsumerConfig.GROUP_ID_CONFIG,\"test_group_2\");\n        properties.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n\n        KafkaConsumer<String,String> consumer = new KafkaConsumer<String,String>(properties);\n\n        //Subscribing\n        consumer.subscribe(Arrays.asList(\"<topic>\"));\n\n        //polling\n        while(true){\n            ConsumerRecords<String,String> records=consumer.poll(Duration.ofMillis(100));\n            for(ConsumerRecord<String,String> record: records) {\n                System.out.println(\"Key: \"+ record.key() + \", Value:\" +record.value());\n                System.out.println(\"Partition:\" + record.partition()+\",Offset:\"+record.offset());\n            }\n        }\n    }\n}`;\n\nexport const pythonConfigCodeBlock = (tokenEndpointUrl: string) => {\n  return `import time\nimport requests\n    \ndef _get_token(config):\n    payload = {\"grant_type\": \"client_credentials\", \"scope\": \"api.iam.service_accounts\"}\n    resp = requests.post(\n        \"${tokenEndpointUrl}\",\n        auth=(\n            <client_id>,\n            <client_secret>,\n        ),\n        data=payload,\n    )`;\n};\n\nexport const pythonConfigExpandabledBlock = (kafkaBootstrapUrl: string) => {\n  return `\n    token = resp.json()\n    return token[\"access_token\"], time.time() + float(token[\"expires_in\"])\n    \n    common_config = {\n    'bootstrap.servers': \"${kafkaBootstrapUrl}\",\n    'security.protocol': 'SASL_SSL',\n    'sasl.mechanisms': 'OAUTHBEARER',\n    'oauth_cb': _get_token,\n    }\n    \n    topic=<topic>`;\n};\n\nexport const pythonProducer = `from confluent_kafka import Producer\n \nproducer = Producer(common_config)\n \nproducer.produce(topic=<topic>, value=b\"Sample Message\")\nproducer.flush()`;\n\nexport const pythonConsumerCodeBlock = `from confluent_kafka import Consumer\n \nconsumer_config = {\n    \"group.id\": \"test-group\",\n    'session.timeout.ms': 6000,\n    'auto.offset.reset': 'earliest',\n}\n\nconsumer = Consumer({ **consumer_config, **common_config })\n\nconsumer.subscribe([<topic>])`;\n\nexport const pythonConsumerExpandableBlock = `while True:\ntry:\n    msg = consumer.poll(1.0)\n    if msg is None:\n        continue\n\n    print(msg.value())\nexcept KeyboardInterrupt:\n    break\n\nconsumer.close()`;\n\nexport const quarkusConfigCodeBlock = `# Quarkus config\nquarkus.ssl.native=true\n\n# Configure the Kafka sink (we write to it)\nmp.messaging.outgoing.generated-price.connector=smallrye-kafka\nmp.messaging.outgoing.generated-price.topic=<topic>\nmp.messaging.outgoing.generated-price.value.serializer=org.apache.kafka.common.serialization.IntegerSerializer\n\n# Configure the Kafka source (we read from it)\nmp.messaging.incoming.prices.connector=smallrye-kafka\nmp.messaging.incoming.prices.topic=<topic>\nmp.messaging.incoming.prices.value.deserializer=org.apache.kafka.common.serialization.IntegerDeserializer`;\n\nexport const quarkusConfigExpandableBlock = (\n  kafkaBootstrapUrl: string,\n  tokenEndpointUrl: string\n) => {\n  return `\n# Configure docker config\nquarkus.container-image.builder=jib\nquarkus.kubernetes.deployment-target=kubernetes\nquarkus.container-image.build=false\nquarkus.container-image.push=false\n    \n## dev profile using user defined environment variables that uses SASL/OAUTHBEARER\n## ./mvnw quarkus:dev\n## ./mvnw package -Dquarkus.profile=dev\n    \n%dev.kafka.bootstrap.servers=\\${\"${kafkaBootstrapUrl}\"}\n%dev.kafka.security.protocol=SASL_SSL\n    \n%dev.kafka.sasl.mechanism=OAUTHBEARER\n%dev.kafka.sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\\\n    oauth.client.id=\"\\${<client_id>}\" \\\\\n    oauth.client.secret=\"\\${<client_secret>}\" \\\\\n    oauth.token.endpoint.uri=\"\\${\"${tokenEndpointUrl}\"}\" ;\n%dev.kafka.sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler`;\n};\n\nexport const quarkusProducerCodeBlock = `package org.acme.kafka;\nimport java.time.Duration;\nimport java.util.Random;\n\nimport javax.enterprise.context.ApplicationScoped;\n\nimport io.smallrye.mutiny.Multi;\nimport org.eclipse.microprofile.reactive.messaging.Outgoing;`;\n\nexport const quarkusProducerExpandableBlock = `\n/**\n* A bean producing random prices every 5 seconds.\n* The prices are written to a Kafka topic (prices). The Kafka configuration is specified in the application configuration.\n*/\n@ApplicationScoped\npublic class PriceGenerator {\n\n   private Random random = new Random();\n\n   @Outgoing(\"generated-price\")\n   public Multi<Integer> generate() {\n       return Multi.createFrom().ticks().every(Duration.ofSeconds(5))\n               .onOverflow().drop()\n               .map(tick -> random.nextInt(100));\n   }\n\n}`;\n\nexport const quarkusConsumerCodeBlock = `package org.acme.kafka;\nimport javax.enterprise.context.ApplicationScoped;\n\nimport org.eclipse.microprofile.reactive.messaging.Acknowledgment;\nimport org.eclipse.microprofile.reactive.messaging.Incoming;\nimport org.eclipse.microprofile.reactive.messaging.Outgoing;\n\nimport io.smallrye.reactive.messaging.annotations.Broadcast;\n\n/**\n * A bean consuming data from the \"prices\" Kafka topic and applying some conversion.\n * The result is pushed to the \"my-data-stream\" stream which is an in-memory stream.\n */\n@ApplicationScoped`;\n\nexport const quarkusConsumerExpandableBlock = `public class PriceConverter {\n\n    private static final double CONVERSION_RATE = 0.88;\n\n    // Consume from the \\`prices\\` channel and produce to the \\`my-data-stream\\` channel\n    @Incoming(\"prices\")\n    @Outgoing(\"my-data-stream\")\n    // Send to all subscribers\n    @Broadcast\n    // Acknowledge the messages before calling this method.\n    @Acknowledgment(Acknowledgment.Strategy.PRE_PROCESSING)\n    public double process(int priceInUsd) {\n        return priceInUsd * CONVERSION_RATE;\n    }\n\n}`;\n\nexport const springBootConfigCodeBlock = (\n  kafkaBootstrapUrl: string,\n  tokenEndpointUrl: string\n) => {\n  return `package com.example.kafkaconfig;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class KafkaConfig {\n\n   public static Map<String, Object> Config() {\n\n       Map<String, Object> config = new HashMap<>();\n\n       String kafkaHost = \"${kafkaBootstrapUrl}\";\n       String rhoasClientID = \"<client_id>\";\n       String rhoasClientSecret = \"<client_secret>\";\n       String rhoasOauthTokenUrl = \"${tokenEndpointUrl}\";`;\n};\n\nexport const springBootConfigExpandableBlock = `\n    config.put(\"bootstrap.servers\", kafkaHost);\n\n    config.put(\"security.protocol\", \"SASL_SSL\");\n    config.put(\"sasl.mechanism\", \"OAUTHBEARER\");\n\n    config.put(\"sasl.jaas.config\", \"org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required clientId=\\\\\"\" + rhoasClientID + \"\\\\\" clientSecret=\\\\\"\" + rhoasClientSecret + \"\\\\\" oauth.token.endpoint.uri=\\\\\"\" + rhoasOauthTokenUrl + \"\\\\\";\");\n    config.put(\"sasl.login.callback.handler.class\", \"org.apache.kafka.common.security.oauthbearer.secured.OAuthBearerLoginCallbackHandler\");\n    config.put(\"sasl.oauthbearer.token.endpoint.url\", rhoasOauthTokenUrl);\n    config.put(\"sasl.oauthbearer.scope.claim.name\", \"api.iam.service_accounts\");\n\n    return config;\n   }\n}`;\n\nexport const springBootProducerCodeBlock = `package com.example.kafkademo;\nimport org.apache.kafka.clients.producer.ProducerConfig;\nimport org.apache.kafka.common.serialization.StringSerializer;\nimport org.springframework.boot.ApplicationRunner;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.kafka.core.DefaultKafkaProducerFactory;\nimport org.springframework.kafka.core.KafkaTemplate;\nimport org.springframework.kafka.core.ProducerFactory;\nimport com.example.kafkaconfig.KafkaConfig;\n\nimport java.util.Map;`;\n\nexport const springBootProducerExpandableBlock = `\n@SpringBootApplication\npublic class KafkaProducerExample {\n\n  public static void main(String[] args) throws Exception {\n    SpringApplication.run(KafkaProducerExample.class, args);\n  }\n\n  @Bean\n  public ProducerFactory<String, String> producerFactory() {\n    Map<String, Object> config = KafkaConfig.Config();\n\n    config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n    config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n\n    return new DefaultKafkaProducerFactory<String, String>(config);\n  }\n\n  @Bean\n  public KafkaTemplate<String, String> kafkaTemplate() {\n    return new KafkaTemplate<>(producerFactory());\n  }\n\n  @Bean\n  public ApplicationRunner runner(KafkaTemplate<String, String> template) {\n    return args -> {\n      template.send(<\"topic\">, \"Test Message\");\n    };\n  }\n\n}`;\n\nexport const springBootListenerCodeBlock = `package com.example.kafkaconsumer.listener;\n\nimport com.example.kafkaconfig.KafkaConfig;\nimport org.apache.kafka.clients.consumer.ConsumerConfig;\nimport org.apache.kafka.common.serialization.StringDeserializer;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.kafka.annotation.KafkaListener;\nimport org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;\nimport org.springframework.kafka.core.ConsumerFactory;\nimport org.springframework.kafka.core.DefaultKafkaConsumerFactory;\nimport org.springframework.stereotype.Component;\n\nimport java.util.Map;`;\n\nexport const springBootListenerExpandableBlock = `@Component\npublic class Listener {\n\n    @KafkaListener(topics = <\"topic\">,\n            containerFactory = \"concurrentKafkaListenerContainerFactory\",\n            groupId = \"test_group\")\n\n    // Method\n    public void consume(String message)\n    {\n        // Print statement\n        System.out.println(message);\n    }\n}`;\n\nexport const springBootConsumerConfigCodeBlock = `package com.example.kafkaconsumer.config;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport com.example.kafkaconfig.KafkaConfig;\nimport org.apache.kafka.clients.consumer.ConsumerConfig;\nimport org.apache.kafka.common.serialization.StringDeserializer;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.kafka.annotation.EnableKafka;\nimport org.springframework.kafka.core.ConsumerFactory;\nimport org.springframework.kafka.core.DefaultKafkaConsumerFactory;\nimport org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;`;\n\nexport const springBootConsumerConfigExpandableBlock = `// Annotations\n@EnableKafka\n@Configuration\n\npublic class KafkaConsumerConfig {\n\n    @Bean\n    public ConsumerFactory<String, String> consumerFactory() {\n        Map<String, Object> config = KafkaConfig.Config();\n\n        config.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n        config.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n\n        return new DefaultKafkaConsumerFactory<>(config);\n    }\n\n    @Bean\n    public ConcurrentKafkaListenerContainerFactory concurrentKafkaListenerContainerFactory() {\n        ConcurrentKafkaListenerContainerFactory<\n                String, String> factory\n                = new ConcurrentKafkaListenerContainerFactory<>();\n        factory.setConsumerFactory(consumerFactory());\n        return factory;\n    }\n}`;\n\nexport const springBootConsumerExampleCodeBlock = `\npackage com.example.kafkaconsumer;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;`;\n\nexport const springBootConsumerExampleExpandableBlock = `\n@SpringBootApplication\npublic class KafkaConsumerExample {\n\n    public static void main(String[] args) {\n        SpringApplication.run(KafkaConsumerExample.class, args);\n    }\n\n}`;\n","import {\n  TextContent,\n  TextVariants,\n  Text,\n  ToggleGroup,\n  ToggleGroupItem,\n} from \"@patternfly/react-core\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useState } from \"react\";\nimport { SampleCodeSnippet } from \"./SampleCodeSnippet\";\nimport {\n  javaConfigCodeBlock,\n  javaConfigExpandabledBlock,\n  javaConsumerCodeBlock,\n  javaConsumerExpandableBlock,\n  javaProducerCodeBlock,\n  javaProducerExpandableBlock,\n  pythonConfigCodeBlock,\n  pythonConfigExpandabledBlock,\n  pythonConsumerCodeBlock,\n  pythonConsumerExpandableBlock,\n  pythonProducer,\n  quarkusConfigCodeBlock,\n  quarkusConfigExpandableBlock,\n  quarkusConsumerCodeBlock,\n  quarkusConsumerExpandableBlock,\n  quarkusProducerCodeBlock,\n  quarkusProducerExpandableBlock,\n  springBootConfigCodeBlock,\n  springBootConfigExpandableBlock,\n  springBootConsumerConfigCodeBlock,\n  springBootConsumerConfigExpandableBlock,\n  springBootConsumerExampleCodeBlock,\n  springBootConsumerExampleExpandableBlock,\n  springBootListenerCodeBlock,\n  springBootListenerExpandableBlock,\n  springBootProducerCodeBlock,\n  springBootProducerExpandableBlock,\n} from \"./CodeSnippets\";\n\nexport type ClientType = \"java\" | \"python\" | \"quarkus\" | \"springboot\";\n\nexport type KafkaSampleCodeProps = {\n  kafkaBootstrapUrl: string;\n  tokenEndpointUrl: string;\n};\n\nexport const KafkaSampleCode: VoidFunctionComponent<KafkaSampleCodeProps> = ({\n  kafkaBootstrapUrl,\n  tokenEndpointUrl,\n}) => {\n  const { t } = useTranslation(\"kafka\");\n\n  const [clientSelect, setClientSelect] = useState<ClientType>(\"java\");\n\n  const clientProvider: { [provider in ClientType]: string } = {\n    java: t(\"sample_code.clients.java\"),\n    python: t(\"sample_code.clients.python\"),\n    quarkus: t(\"sample_code.clients.quarkus\"),\n    springboot: t(\"sample_code.clients.spring_boot\"),\n  };\n\n  return (\n    <div className=\"mas--details__drawer--tab-content\">\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.small}>\n          {t(\"sample_code.code_snippet_description_1\")}\n        </Text>\n        <Text component={TextVariants.small}>\n          {t(\"sample_code.code_snippet_description_2\")}\n        </Text>\n        <ToggleGroup>\n          <ToggleGroupItem\n            text={clientProvider[\"java\"]}\n            value=\"java\"\n            buttonId=\"java\"\n            isSelected={clientSelect === \"java\"}\n            onChange={() => setClientSelect(\"java\")}\n          />\n          <ToggleGroupItem\n            text={clientProvider[\"python\"]}\n            value=\"python\"\n            buttonId=\"python\"\n            isSelected={clientSelect === \"python\"}\n            onChange={() => setClientSelect(\"python\")}\n          />\n          <ToggleGroupItem\n            text={clientProvider[\"quarkus\"]}\n            value=\"quarkus\"\n            buttonId=\"quarkus\"\n            isSelected={clientSelect === \"quarkus\"}\n            onChange={() => setClientSelect(\"quarkus\")}\n          />\n          <ToggleGroupItem\n            text={clientProvider[\"springboot\"]}\n            value=\"springboot\"\n            buttonId=\"springboot\"\n            isSelected={clientSelect === \"springboot\"}\n            onChange={() => setClientSelect(\"springboot\")}\n          />\n        </ToggleGroup>\n        <Text component={TextVariants.h3} className=\"pf-u-mt-xl\">\n          {t(\"sample_code.sample_configuration_code\")}\n        </Text>\n        <Text component={TextVariants.small}>\n          {t(\"sample_code.sample_configuration_code_description\")}\n        </Text>\n        <Text component={TextVariants.small}>\n          {t(\"sample_code.bracket_text\")}\n        </Text>\n        {(() => {\n          switch (clientSelect) {\n            case \"java\":\n              return (\n                <SampleCodeSnippet\n                  codeBlockCode={javaConfigCodeBlock(\n                    kafkaBootstrapUrl,\n                    tokenEndpointUrl\n                  )}\n                  expandableCode={javaConfigExpandabledBlock}\n                  codeSnippet={clientSelect}\n                />\n              );\n            case \"python\":\n              return (\n                <SampleCodeSnippet\n                  codeBlockCode={pythonConfigCodeBlock(tokenEndpointUrl)}\n                  expandableCode={pythonConfigExpandabledBlock(\n                    kafkaBootstrapUrl\n                  )}\n                  codeSnippet={clientSelect}\n                />\n              );\n            case \"quarkus\":\n              return (\n                <SampleCodeSnippet\n                  codeBlockCode={quarkusConfigCodeBlock}\n                  expandableCode={quarkusConfigExpandableBlock(\n                    kafkaBootstrapUrl,\n                    tokenEndpointUrl\n                  )}\n                  codeSnippet={clientSelect}\n                />\n              );\n            case \"springboot\":\n              return (\n                <SampleCodeSnippet\n                  codeBlockCode={springBootConfigCodeBlock(\n                    kafkaBootstrapUrl,\n                    tokenEndpointUrl\n                  )}\n                  expandableCode={springBootConfigExpandableBlock}\n                  codeSnippet={clientSelect}\n                />\n              );\n            default:\n              return null;\n          }\n        })()}\n        <Text component={TextVariants.h3} className=\"pf-u-mt-xl\">\n          {t(\"sample_code.sample_producer_code\")}\n        </Text>\n        {clientSelect === \"quarkus\" ? (\n          <>\n            <Text component={TextVariants.small}>\n              {t(\"sample_code.sample_producer_code_quarkus_description\")}\n            </Text>\n            <SampleCodeSnippet\n              codeBlockCode={quarkusProducerCodeBlock}\n              expandableCode={quarkusProducerExpandableBlock}\n              codeSnippet={clientSelect}\n            />\n          </>\n        ) : (\n          <>\n            <Text component={TextVariants.small}>\n              <Trans\n                ns={\"kafka\"}\n                i18nKey={\"sample_code.sample_producer_code_description\"}\n                values={{\n                  client_type: clientProvider[clientSelect],\n                }}\n              />\n            </Text>\n            <Text component={TextVariants.small}>\n              {t(\"sample_code.bracket_text\")}\n            </Text>\n            {(() => {\n              switch (clientSelect) {\n                case \"java\":\n                  return (\n                    <SampleCodeSnippet\n                      codeBlockCode={javaProducerCodeBlock}\n                      expandableCode={javaProducerExpandableBlock}\n                      codeSnippet={clientSelect}\n                    />\n                  );\n                case \"python\":\n                  return <SampleCodeSnippet codeBlockCode={pythonProducer} />;\n                case \"springboot\":\n                  return (\n                    <SampleCodeSnippet\n                      codeBlockCode={springBootProducerCodeBlock}\n                      expandableCode={springBootProducerExpandableBlock}\n                      codeSnippet={clientSelect}\n                    />\n                  );\n                default:\n                  return null;\n              }\n            })()}\n          </>\n        )}\n\n        <Text component={TextVariants.h3} className=\"pf-u-mt-xl\">\n          {t(\"sample_code.sample_consumer_code\")}\n        </Text>\n        {clientSelect === \"springboot\" ? (\n          <>\n            <Text component={TextVariants.small}>\n              {t(\"sample_code.spring_boot_sample_consumer_code_description\")}\n            </Text>\n            <Text component={TextVariants.h4} className=\"pf-u-mt-xl\">\n              {t(\"sample_code.spring_boot_consumer_configuration\")}\n            </Text>\n            <Text component={TextVariants.small}>\n              {t(\"sample_code.spring_boot_consumer_configuration_description\")}\n            </Text>\n            <SampleCodeSnippet\n              codeBlockCode={springBootConsumerConfigCodeBlock}\n              expandableCode={springBootConsumerConfigExpandableBlock}\n              codeSnippet={clientSelect}\n            />\n            <Text component={TextVariants.h4} className=\"pf-u-mt-xl\">\n              {t(\"sample_code.spring_boot_listener\")}\n            </Text>\n            <Text component={TextVariants.small}>\n              {t(\"sample_code.spring_boot_listener_description\")}\n            </Text>\n            <Text component={TextVariants.small}>\n              {t(\"sample_code.bracket_text\")}\n            </Text>\n            <SampleCodeSnippet\n              codeBlockCode={springBootListenerCodeBlock}\n              expandableCode={springBootListenerExpandableBlock}\n              codeSnippet={clientSelect}\n            />\n            <Text component={TextVariants.h4} className=\"pf-u-mt-xl\">\n              {t(\"sample_code.spring_boot_consumer\")}\n            </Text>\n            <Text component={TextVariants.small}>\n              {t(\"sample_code.spring_boot_consumer_description\")}\n            </Text>\n            <SampleCodeSnippet\n              codeBlockCode={springBootConsumerExampleCodeBlock}\n              expandableCode={springBootConsumerExampleExpandableBlock}\n              codeSnippet={clientSelect}\n            />\n          </>\n        ) : (\n          <>\n            <Text component={TextVariants.small}>\n              <Trans\n                ns={\"kafka\"}\n                i18nKey={\"sample_code.sample_consumer_code_description\"}\n                values={{\n                  client_type: clientProvider[clientSelect],\n                }}\n              />\n            </Text>\n            {clientSelect === \"quarkus\" ? null :\n              <Text component={TextVariants.small}>\n                {t(\"sample_code.bracket_text\")}\n              </Text>}\n            {(() => {\n              switch (clientSelect) {\n                case \"java\":\n                  return (\n                    <SampleCodeSnippet\n                      codeBlockCode={javaConsumerCodeBlock}\n                      expandableCode={javaConsumerExpandableBlock}\n                      codeSnippet={clientSelect}\n                    />\n                  );\n                case \"python\":\n                  return (\n                    <SampleCodeSnippet\n                      codeBlockCode={pythonConsumerCodeBlock}\n                      expandableCode={pythonConsumerExpandableBlock}\n                      codeSnippet={clientSelect}\n                    />\n                  );\n                case \"quarkus\":\n                  return (\n                    <SampleCodeSnippet\n                      codeBlockCode={quarkusConsumerCodeBlock}\n                      expandableCode={quarkusConsumerExpandableBlock}\n                      codeSnippet={clientSelect}\n                    />\n                  );\n                default:\n                  return null;\n              }\n            })()}\n          </>\n        )}\n      </TextContent>\n    </div>\n  );\n};\n","import type { TabsProps } from \"@patternfly/react-core\";\nimport {\n  Drawer,\n  DrawerActions,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerContentBody,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerPanelContent,\n  Tab,\n  Tabs,\n  TabTitleText,\n  Text,\n  TextContent,\n  TextVariants,\n  Title,\n  TitleSizes,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { parseISO } from \"date-fns\";\nimport type { FunctionComponent, VoidFunctionComponent } from \"react\";\nimport { useCallback, useMemo } from \"react\";\nimport type { Kafka } from \"ui-models/src/models/kafka\";\nimport { CreatingStatuses } from \"ui-models/src/models/kafka\";\nimport { useKafkaLabels } from \"../../hooks\";\nimport {\n  KafkaConnectionTabP2,\n  KafkaDetailsTab,\n  KafkaSampleCode,\n} from \"./components\";\n\nexport type KafkaInstanceDrawerProps = {\n  instance?: Kafka;\n  isExpanded: boolean;\n  activeTab: KafkaInstanceDrawerTab;\n  onTabChange: (tab: KafkaInstanceDrawerTab) => void;\n\n  onClose: () => void;\n};\n\nexport const KafkaInstanceDrawer: FunctionComponent<\n  KafkaInstanceDrawerProps\n> = ({ instance, activeTab, isExpanded, onTabChange, onClose, children }) => {\n  const content = useMemo(() => {\n    return (\n      <DrawerPanelContent>\n        {instance ? (\n          <KafkaInstanceDrawerPanel\n            instance={instance}\n            activeTab={activeTab}\n            onTabChange={onTabChange}\n            onClose={onClose}\n          />\n        ) : null}\n      </DrawerPanelContent>\n    );\n  }, [activeTab, instance, onClose, onTabChange]);\n  return (\n    <Drawer isExpanded={isExpanded} isInline={true}>\n      <DrawerContent panelContent={content}>\n        <DrawerContentBody\n          className={\"pf-u-display-flex pf-u-flex-direction-column\"}\n        >\n          {children}\n        </DrawerContentBody>\n      </DrawerContent>\n    </Drawer>\n  );\n};\n\nexport type KafkaInstanceDrawerTab = \"details\" | \"connections\";\n\nexport const KafkaInstanceDrawerPanel: VoidFunctionComponent<\n  Required<Omit<KafkaInstanceDrawerProps, \"isExpanded\">> & {\n    activeTab: KafkaInstanceDrawerTab;\n  }\n> = ({ instance, activeTab, onTabChange, onClose }) => {\n  const { t } = useTranslation([\"kafka\"]);\n  const labels = useKafkaLabels();\n\n  const handleSelect: TabsProps[\"onSelect\"] = useCallback(\n    (_, tab) => {\n      const t = tab as KafkaInstanceDrawerTab;\n      onTabChange(t);\n    },\n    [onTabChange]\n  );\n\n  const isKafkaPending = CreatingStatuses.includes(instance.status);\n\n  return (\n    <>\n      <DrawerHead>\n        <TextContent>\n          <Text component={TextVariants.small} className={\"pf-u-mb-0\"}>\n            {t(\"common:name\")}\n          </Text>\n          <Title\n            headingLevel={\"h1\"}\n            size={TitleSizes[\"xl\"]}\n            className={\"pf-u-mt-0\"}\n          >\n            {instance.name}\n          </Title>\n        </TextContent>\n        <DrawerActions>\n          <DrawerCloseButton onClick={onClose} />\n        </DrawerActions>\n      </DrawerHead>\n      <DrawerPanelBody>\n        <Tabs activeKey={activeTab} onSelect={handleSelect}>\n          <Tab\n            eventKey={\"details\"}\n            title={<TabTitleText>{t(\"drawer-tabs.details\")}</TabTitleText>}\n          >\n            <div className={\"pf-u-pt-md pf-u-pb-md\"}>\n              <KafkaDetailsTab\n                id={instance.id}\n                owner={instance.owner}\n                createdAt={parseISO(instance.createdAt)}\n                updatedAt={parseISO(instance.updatedAt)}\n                expiryDate={\n                  instance.expiryDate\n                    ? parseISO(instance.expiryDate)\n                    : undefined\n                }\n                size={instance.size}\n                ingress={instance.ingress}\n                egress={instance.egress}\n                storage={instance.storage}\n                maxPartitions={instance.maxPartitions}\n                connections={instance.connections}\n                connectionRate={instance.connectionRate}\n                messageSize={instance.messageSize}\n                provider={\n                  labels.providers[instance.provider] || instance.provider\n                }\n                region={\n                  labels.providerRegions[instance.provider][instance.region] ||\n                  instance.region\n                }\n                instanceType={instance.plan}\n                billing={instance.billing}\n                kafkaVersion={instance.version}\n              />\n            </div>\n          </Tab>\n          <Tab\n            eventKey={\"connections\"}\n            title={<TabTitleText>{t(\"drawer-tabs.connections\")}</TabTitleText>}\n            data-testid=\"drawerStreams-tabConnect\"\n          >\n            <div className={\"pf-u-pt-md pf-u-pb-md\"}>\n              <KafkaConnectionTabP2\n                isKafkaPending={isKafkaPending}\n                externalServer={getExternalServer(instance.bootstrapUrl)}\n                tokenEndPointUrl={\"TODO\"}\n                linkToServiceAccount={\"service-accounts\"}\n                linkToAccessTab={`TODO/acls`}\n                adminAPIUrl={getAdminServerUrl(instance.adminUrl)}\n                showCreateServiceAccountModal={() => {\n                  /* TODO */\n                }}\n                kafkaFleetManagerUrl={\n                  \"https://api.openshift.com/api/kafkas_mgmt/v1/openapi\"\n                }\n              />\n            </div>\n          </Tab>\n          <Tab\n            eventKey={\"samplecode\"}\n            title={<TabTitleText>{t(\"drawer-tabs.sample-code\")}</TabTitleText>}\n          >\n            <div className={\"pf-u-pt-md pf-u-pb-md\"}>\n              <KafkaSampleCode\n                kafkaBootstrapUrl={getExternalServer(instance.bootstrapUrl)!}\n                tokenEndpointUrl={\"TODO\"}\n              />\n            </div>\n          </Tab>\n        </Tabs>\n      </DrawerPanelBody>\n    </>\n  );\n};\n\nconst getExternalServer = (bootstrapUrl: string | undefined) => {\n  if (!bootstrapUrl) {\n    return undefined;\n  }\n  return bootstrapUrl?.endsWith(\":443\") ? bootstrapUrl : `${bootstrapUrl}:443`;\n};\n\nconst getAdminServerUrl = (adminUrl: string | undefined) => {\n  return adminUrl ? `${adminUrl}/openapi` : undefined;\n};\n","import {\n  Alert,\n  Button,\n  Flex,\n  FlexItem,\n  HelperText,\n  HelperTextItem,\n  Spinner,\n  Split,\n  SplitItem,\n} from \"@patternfly/react-core\";\nimport {\n  CheckCircleIcon,\n  ExclamationTriangleIcon,\n} from \"@patternfly/react-icons\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { forwardRef } from \"react\";\nimport type { Status } from \"ui-models/src/models/kafka\";\nimport {\n  CreatingStatuses,\n  DegradedStatuses,\n  DeletingStatuses,\n  ReadyStatuses,\n  ResumingStatuses,\n  SuspendedStatuses,\n  SuspendingStatuses,\n} from \"ui-models/src/models/kafka\";\nimport \"./StatusLabel.css\";\n\ntype StatusLabelProps = {\n  value: Status;\n  showWarning?: boolean;\n  showError?: boolean;\n  withPopover?: boolean;\n};\n\n/**\n *<strong> Introduction </strong>\n *These are the various statuses that can show in the Kafka instances table under the \"Status\" header.\n */\nexport const StatusLabel = forwardRef<HTMLButtonElement, StatusLabelProps>(\n  (\n    { value, showWarning = false, showError = false, withPopover = false },\n    ref\n  ) => {\n    const { t } = useTranslation(\"kafka\");\n\n    const buttonVariant = withPopover ? \"link\" : \"plain\";\n\n    switch (true) {\n      case ReadyStatuses.includes(value):\n        return (\n          <div>\n            <Split hasGutter className=\"mas-c-status\">\n              <SplitItem>\n                <CheckCircleIcon className=\"mas-m-ready\" />\n              </SplitItem>\n              <SplitItem>{t(\"statuses.ready\")}</SplitItem>\n            </Split>\n          </div>\n        );\n\n      case CreatingStatuses.includes(value):\n        switch (true) {\n          case showWarning:\n            return (\n              <div>\n                <Split hasGutter className=\"mas-c-status\">\n                  <SplitItem>\n                    <Spinner size=\"md\" />\n                  </SplitItem>\n                  <SplitItem>\n                    <Button ref={ref} variant={buttonVariant} isInline>\n                      {t(\"statuses.creating\")}\n                    </Button>\n                  </SplitItem>\n                </Split>\n                <Alert\n                  variant=\"warning\"\n                  isInline\n                  isPlain\n                  title=\"This is taking longer than expected.\"\n                />\n              </div>\n            );\n          case showError:\n            return (\n              <div>\n                <Split hasGutter className=\"mas-c-status\">\n                  <SplitItem>\n                    <Spinner size=\"md\" />\n                  </SplitItem>\n                  <SplitItem>\n                    <Button ref={ref} variant={buttonVariant} isInline>\n                      {t(\"statuses.creating\")}\n                    </Button>\n                  </SplitItem>\n                </Split>\n                <Alert\n                  variant=\"danger\"\n                  isInline\n                  isPlain\n                  title={t(\"status_warning_or_error_title\")}\n                />\n              </div>\n            );\n          default:\n            return (\n              <div>\n                <Split hasGutter className=\"mas-c-status\">\n                  <SplitItem>\n                    <Spinner size=\"md\" />\n                  </SplitItem>\n                  <SplitItem>\n                    <Button ref={ref} variant={buttonVariant} isInline>\n                      {t(\"statuses.creating\")}\n                    </Button>\n                    <Flex>\n                      <FlexItem>\n                        <HelperText>\n                          <HelperTextItem variant=\"indeterminate\">\n                            {t(\"status_created_shortly_help\")}\n                          </HelperTextItem>\n                        </HelperText>\n                      </FlexItem>\n                    </Flex>\n                  </SplitItem>\n                </Split>\n              </div>\n            );\n        }\n\n      case DegradedStatuses.includes(value):\n        return (\n          <div>\n            <Split hasGutter className=\"mas-c-status\">\n              <SplitItem>\n                <ExclamationTriangleIcon className=\"mas-m-degraded\" />\n              </SplitItem>\n              <SplitItem>{t(\"statuses.degraded\")}</SplitItem>\n            </Split>\n          </div>\n        );\n\n      case SuspendingStatuses.includes(value):\n        return (\n          <div>\n            <p className=\"mas-m-deleting\"> {t(\"statuses.suspending\")}</p>\n          </div>\n        );\n      case SuspendedStatuses.includes(value):\n        return (\n          <div>\n            <Split hasGutter className=\"mas-c-status\">\n              <SplitItem>\n                <ExclamationTriangleIcon className=\"mas-m-degraded\" />\n              </SplitItem>\n              <SplitItem>\n                <Button ref={ref} variant={buttonVariant} isInline>\n                  {t(\"statuses.suspended\")}\n                </Button>\n              </SplitItem>\n            </Split>\n          </div>\n        );\n      case ResumingStatuses.includes(value):\n        return (\n          <div>\n            <Split hasGutter className=\"mas-c-status\">\n              <SplitItem>\n                <Spinner size=\"md\" />\n              </SplitItem>\n              <SplitItem>{t(\"statuses.resuming\")}</SplitItem>\n            </Split>\n          </div>\n        );\n      case DeletingStatuses.includes(value):\n        return (\n          <div>\n            <p className=\"mas-m-deleting\"> {t(\"statuses.deleting\")}</p>\n          </div>\n        );\n      default:\n        return null;\n    }\n  }\n);\n","export type KafkaStatus =\n  | \"ready\"\n  | \"degraded\"\n  | \"accepted\"\n  | \"provisioning\"\n  | \"preparing\"\n  | \"deprovision\"\n  | \"deleting\"\n  | \"suspended\"\n  | \"suspending\"\n  | \"resuming\";\n\nexport type PopoverStatus =\n  | \"pending\"\n  | \"provisioning\"\n  | \"preparing\"\n  | \"ready\"\n  | \"suspended\";\n\nexport const PopoverStatusOrder: PopoverStatus[] = [\n  \"pending\",\n  \"preparing\",\n  \"provisioning\",\n];\n\nexport const KafkaToPopoverMapping: {\n  [status in KafkaStatus]: PopoverStatus | null;\n} = {\n  ready: null,\n  degraded: null,\n  accepted: \"pending\",\n  provisioning: \"provisioning\",\n  preparing: \"preparing\",\n  deprovision: null,\n  deleting: null,\n  suspended: \"suspended\",\n  suspending: null,\n  resuming: null,\n};\n","import { ProgressStep, ProgressStepper } from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { PopoverStatus } from \"../types\";\nimport { PopoverStatusOrder } from \"../types\";\n\ntype StatusProgressStepperProps = {\n  currentStatus: PopoverStatus;\n};\n\nexport const StatusProgressStepper: VoidFunctionComponent<\n  StatusProgressStepperProps\n> = ({ currentStatus }) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n\n  const currentStep = PopoverStatusOrder.findIndex((s) => s === currentStatus);\n\n  const getVariant = (index: number) =>\n    (currentStep === index && \"info\") ||\n    (currentStep > index && \"success\") ||\n    \"default\";\n\n  return (\n    <ProgressStepper isVertical={true}>\n      <ProgressStep\n        id={\"pending\"}\n        titleId={\"pending\"}\n        isCurrent={currentStatus === \"pending\"}\n        description={t(\"kafka_status_popover.pending.description\")}\n        aria-label={t(\"kafka_status_popover.pending.description\")}\n        variant={getVariant(0)}\n      >\n        {t(\"kafka_status_popover.pending.title\")}\n      </ProgressStep>\n\n      <ProgressStep\n        id={\"provisioning\"}\n        titleId={\"provisioning\"}\n        isCurrent={currentStatus === \"provisioning\"}\n        description={t(\"kafka_status_popover.provisioning.description\")}\n        aria-label={t(\"kafka_status_popover.provisioning.description\")}\n        variant={getVariant(1)}\n      >\n        {t(\"kafka_status_popover.provisioning.title\")}\n      </ProgressStep>\n      <ProgressStep\n        id={\"preparing\"}\n        titleId={\"preparing\"}\n        isCurrent={currentStatus === \"preparing\"}\n        description={t(\"kafka_status_popover.preparing.description\")}\n        aria-label={t(\"kafka_status_popover.preparing.description\")}\n        variant={getVariant(2)}\n      >\n        {t(\"kafka_status_popover.preparing.title\")}\n      </ProgressStep>\n    </ProgressStepper>\n  );\n};\n","import {\n  Alert,\n  Button,\n  ButtonVariant,\n  Stack,\n  StackItem,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { Trans, useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { PopoverStatus } from \"../types\";\nimport { PopoverStatusOrder } from \"../types\";\nimport { StatusProgressStepper } from \"./StatusProgressStepper\";\n\nexport type StatusPopoverContentProps = {\n  currentStatus: PopoverStatus;\n  showWarning?: boolean;\n  showError?: boolean;\n  onClickConnectionTabLink: () => void;\n  onClickSupportLink: () => void;\n};\n\nexport const StatusPopoverContent: VoidFunctionComponent<\n  StatusPopoverContentProps\n> = ({\n  currentStatus,\n  showWarning = false,\n  showError = false,\n  onClickConnectionTabLink,\n  onClickSupportLink,\n}) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n\n  const currentStep = PopoverStatusOrder.findIndex((s) => s === currentStatus);\n\n  return (\n    <div>\n      <Stack hasGutter>\n        <StackItem>\n          {showWarning && (\n            <Alert\n              variant=\"warning\"\n              isInline\n              isPlain\n              title={t(\"kafka_status_popover.warning_or_error_title\")}\n            >\n              <TextContent>\n                <Text component={TextVariants.small}>\n                  <Trans\n                    ns={[\"create-kafka-instance\"]}\n                    i18nKey=\"kafka_status_popover.header_content_with_warning\"\n                    components={[\n                      <Button\n                        key=\"btn-connetcion-tab\"\n                        variant={ButtonVariant.link}\n                        onClick={onClickConnectionTabLink}\n                        isInline\n                      />,\n                    ]}\n                  />\n                </Text>\n              </TextContent>\n            </Alert>\n          )}\n          {showError && (\n            <Alert\n              variant=\"danger\"\n              isInline\n              isPlain\n              title={t(\"kafka_status_popover.warning_or_error_title\")}\n            >\n              <TextContent>\n                <Text component={TextVariants.small}>\n                  <Trans\n                    ns={[\"create-kafka-instance\"]}\n                    i18nKey=\"kafka_status_popover.header_content_with_error\"\n                    components={[\n                      <Button\n                        key=\"btn-connetcion-tab\"\n                        variant={ButtonVariant.link}\n                        onClick={onClickConnectionTabLink}\n                        isInline\n                      />,\n                      <Button\n                        key=\"btn-support-case\"\n                        variant={ButtonVariant.link}\n                        onClick={onClickSupportLink}\n                        isInline\n                      />,\n                    ]}\n                  />\n                </Text>\n              </TextContent>\n            </Alert>\n          )}\n          {!showError && !showWarning && (\n            <TextContent>\n              <Text component={TextVariants.small}>\n                <Trans\n                  ns={[\"create-kafka-instance\"]}\n                  i18nKey=\"kafka_status_popover.header_content\"\n                  components={[\n                    <Button\n                      key=\"btn-connetcion-tab\"\n                      variant={ButtonVariant.link}\n                      onClick={onClickConnectionTabLink}\n                      isInline\n                    />,\n                  ]}\n                />\n              </Text>\n            </TextContent>\n          )}\n        </StackItem>\n        <StackItem>\n          {t(\"common:progress_stepper_current_step\", {\n            currentStep,\n            total: PopoverStatusOrder.length,\n          })}\n        </StackItem>\n        <StackItem>\n          <StatusProgressStepper currentStatus={currentStatus} />\n        </StackItem>\n      </Stack>\n    </div>\n  );\n};\n","import type { PopoverProps } from \"@patternfly/react-core\";\nimport { Popover } from \"@patternfly/react-core\";\nimport type { RefObject, VoidFunctionComponent } from \"react\";\nimport { useCallback, useState } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { PopoverStatus } from \"../types\";\nimport type { StatusPopoverContentProps } from \"./StatusPopoverContent\";\nimport { StatusPopoverContent } from \"./StatusPopoverContent\";\n\nexport type StatusPopoverProps = {\n  status: PopoverStatus;\n  initialOpen?: boolean;\n  showWarning?: boolean;\n  showError?: boolean;\n  children?: PopoverProps[\"children\"];\n  onClickConnectionTabLink: StatusPopoverContentProps[\"onClickConnectionTabLink\"];\n  onClickSupportLink: StatusPopoverContentProps[\"onClickSupportLink\"];\n  reference?: RefObject<HTMLButtonElement>;\n};\n\n/**\n * ## Introduction\n *\n * This is a popover that can be reached from the Kafka Instance table while the status of the instance in question is “Creating”.\n * A Kafka instance usually takes a few minutes to create. The purpose of this popover is to give the user some insights into\n * the creation process of their instance while they wait for it to be available to use.\n *\n * - The text at the top explains that the instance will be ready shortly & suggests that the user creates a service account while they wait.\n *  (Provides a link to the “Connections tab\" where this is done).\n *\n * - The steps shown in the progress stepper are statuses that show in the api. They have been grouped together under the one overall\n * “Creating status” in the table.There is some descriptive text accompanying each step too. When these steps are complete the instance will be ready for use\n *\n * - The popover is only available while instance creation is in progress.\n * - After creation is complete the table displays the ready status and the popover is no longer available.\n *\n */\nexport const StatusPopover: VoidFunctionComponent<StatusPopoverProps> = ({\n  initialOpen = false,\n  status,\n  showWarning = false,\n  showError = false,\n  onClickConnectionTabLink,\n  onClickSupportLink,\n  reference,\n  children,\n}) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n\n  const [isVisible, setIsVisible] = useState(initialOpen);\n  const onClose = () => setIsVisible(false);\n\n  const handleClickConnectionTabLink = useCallback(() => {\n    onClose();\n    onClickConnectionTabLink();\n  }, [onClickConnectionTabLink]);\n\n  const handleClickSupportLink = useCallback(() => {\n    onClose();\n    onClickSupportLink();\n  }, [onClickSupportLink]);\n\n  return (\n    <Popover\n      headerContent={t(\"kafka_status_popover.title\")}\n      bodyContent={\n        <StatusPopoverContent\n          currentStatus={status}\n          showWarning={showWarning}\n          showError={showError}\n          onClickConnectionTabLink={handleClickConnectionTabLink}\n          onClickSupportLink={handleClickSupportLink}\n        />\n      }\n      isVisible={isVisible}\n      shouldOpen={() => setIsVisible(true)}\n      shouldClose={() => setIsVisible(false)}\n      position={\"right\"}\n      enableFlip={true}\n      reference={reference}\n    >\n      {children}\n    </Popover>\n  );\n};\n","import type { PopoverProps } from \"@patternfly/react-core\";\nimport { Popover, TextContent } from \"@patternfly/react-core\";\nimport { ExclamationTriangleIcon } from \"@patternfly/react-icons\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { RefObject, VoidFunctionComponent } from \"react\";\n\nexport type SuspendedPopoverProps = {\n  children?: PopoverProps[\"children\"];\n  reference?: RefObject<HTMLButtonElement>;\n};\n\nexport const SuspendedPopover: VoidFunctionComponent<SuspendedPopoverProps> = ({\n  children,\n  reference,\n}) => {\n  const { t } = useTranslation(\"kafka\");\n  return (\n    <Popover\n      alertSeverityVariant={\"warning\"}\n      headerIcon={<ExclamationTriangleIcon />}\n      headerContent={t(\"suspend_popover_title\")}\n      bodyContent={\n        <TextContent>\n          <p>{t(\"suspend_popover_body_1\")}</p>\n        </TextContent>\n      }\n      position={\"right\"}\n      reference={reference}\n    >\n      {children}\n    </Popover>\n  );\n};\n","import { useInterval } from \"@rhoas/app-services-ui-components\";\nimport { differenceInMinutes } from \"date-fns\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback, useRef, useState } from \"react\";\nimport type { Status } from \"ui-models/src/models/kafka\";\nimport type { StatusPopoverProps } from \"./components\";\nimport { StatusLabel, StatusPopover, SuspendedPopover } from \"./components\";\nimport { KafkaToPopoverMapping } from \"./types\";\n\nexport type KafkaInstanceStatusProps = {\n  status: Status;\n  createdAt: Date;\n  warningAfterMinutes?: number;\n  errorAfterMinutes?: number;\n} & Pick<StatusPopoverProps, \"onClickConnectionTabLink\" | \"onClickSupportLink\">;\n\n/**\n * A component to show the status of a Kafka instance combining the\n * `StatusPopover` with the `StatusLabel`, with automatic handling of which\n * statuses should have a companion popover.\n */\nexport const KafkaInstanceStatus: VoidFunctionComponent<\n  KafkaInstanceStatusProps\n> = ({\n  status,\n  createdAt,\n  warningAfterMinutes = 15,\n  errorAfterMinutes = 30,\n  onClickConnectionTabLink,\n  onClickSupportLink,\n}) => {\n  const popoverStatus = KafkaToPopoverMapping[status];\n  const [alert, setAlert] = useState<\"warning\" | \"error\" | false>(false);\n  const labelRef = useRef<HTMLButtonElement>(null);\n\n  const checkCreatedAt = useCallback(() => {\n    const elapsed = differenceInMinutes(new Date(), createdAt);\n    if (elapsed > errorAfterMinutes) {\n      setAlert(\"error\");\n    } else if (elapsed > warningAfterMinutes) {\n      setAlert(\"warning\");\n    } else {\n      setAlert(false);\n    }\n  }, [createdAt, errorAfterMinutes, warningAfterMinutes]);\n\n  useInterval(checkCreatedAt, 5000);\n  const showWarning = alert === \"warning\";\n  const showError = alert === \"error\";\n  return (\n    <>\n      {popoverStatus === \"suspended\" ? (\n        <SuspendedPopover reference={labelRef} />\n      ) : (\n        popoverStatus && (\n          <StatusPopover\n            status={popoverStatus}\n            showWarning={showWarning}\n            showError={showError}\n            onClickConnectionTabLink={onClickConnectionTabLink}\n            onClickSupportLink={onClickSupportLink}\n            reference={labelRef}\n          />\n        )\n      )}\n      <StatusLabel\n        value={status}\n        showWarning={showWarning}\n        showError={showError}\n        withPopover={popoverStatus !== undefined}\n        ref={labelRef}\n      />\n    </>\n  );\n};\n","import {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { PlusCircleIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { Trans, useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport type EmptyStateNoInstancesProps = {\n  onCreate: () => void;\n  onQuickstartGuide: () => void;\n};\n\nexport const EmptyStateNoInstances: VoidFunctionComponent<\n  EmptyStateNoInstancesProps\n> = ({ onCreate, onQuickstartGuide }) => {\n  const { t } = useTranslation(\"kafka\");\n  return (\n    <EmptyState variant={EmptyStateVariant.xs}>\n      <EmptyStateIcon icon={PlusCircleIcon} />\n      <Title headingLevel=\"h2\" size=\"lg\">\n        {t(\"empty_state_no_instances_title\")}\n      </Title>\n      <EmptyStateBody>\n        <Trans\n          ns={\"kafka\"}\n          i18nKey={\"empty_state_no_instances_body\"}\n          components={[<a onClick={onQuickstartGuide} />]}\n        />\n      </EmptyStateBody>\n      <Button ouiaId=\"button-create\" variant=\"primary\" onClick={onCreate}>\n        {t(\"empty_state_no_instances_create_instance\")}\n      </Button>\n    </EmptyState>\n  );\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { SearchIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { Trans, useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport type EmptyStateNoResultsProps = {\n  onClearAllFilters: () => void;\n};\n\nexport const EmptyStateNoResults: VoidFunctionComponent<\n  EmptyStateNoResultsProps\n> = ({ onClearAllFilters }) => {\n  const { t } = useTranslation(\"kafka\");\n  return (\n    <EmptyState variant={EmptyStateVariant.xs}>\n      <EmptyStateIcon icon={SearchIcon} />\n      <Title headingLevel=\"h2\" size=\"lg\">\n        {t(\"empty_state_no_results_found_title\")}\n      </Title>\n      <EmptyStateBody>\n        <Trans\n          ns={\"kafka\"}\n          i18nKey={\"empty_state_no_results_found_body\"}\n          components={[<a onClick={onClearAllFilters} />]}\n        />\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import { Button, PageSection, Stack, StackItem } from \"@patternfly/react-core\";\nimport type { TableViewProps } from \"@rhoas/app-services-ui-components\";\nimport {\n  FormatDate,\n  TableView,\n  Trans,\n  useTranslation,\n} from \"@rhoas/app-services-ui-components\";\nimport { parseISO } from \"date-fns\";\nimport { Link } from \"react-router-dom\";\nimport type { Kafka, SimplifiedStatus } from \"ui-models/src/models/kafka\";\nimport { DeletingStatuses } from \"ui-models/src/models/kafka\";\nimport { useKafkaLabels } from \"../../hooks\";\nimport { KafkaInstanceActions } from \"../KafkaInstanceActions\";\nimport { KafkaInstanceStatus } from \"../KafkaInstanceStatus\";\nimport type {\n  EmptyStateNoInstancesProps,\n  EmptyStateNoResultsProps,\n} from \"./components\";\nimport { EmptyStateNoInstances, EmptyStateNoResults } from \"./components\";\n\nconst Columns = [\n  \"name\",\n  \"owner\",\n  \"createdAt\",\n  \"provider\",\n  \"region\",\n  \"status\",\n] as const;\n\nexport type KafkaInstancesProps<T extends Kafka = Kafka> = {\n  instances: Array<T> | undefined | null;\n  getUrlForInstance: (row: T) => string;\n  names: string[];\n  owners: string[];\n  statuses: string[];\n  onCreate: () => void;\n  onSearchName: (value: string) => void;\n  onRemoveNameChip: (value: string) => void;\n  onRemoveNameChips: () => void;\n  onSearchOwner: (value: string) => void;\n  onRemoveOwnerChip: (value: string) => void;\n  onRemoveOwnerChips: () => void;\n  onSearchStatus: (value: SimplifiedStatus) => void;\n  onRemoveStatusChip: (value: SimplifiedStatus) => void;\n  onRemoveStatusChips: () => void;\n  onDetails: (row: T) => void;\n  onConnection: (row: T) => void;\n  canChangeOwner: (row: T) => boolean;\n  onChangeOwner: (row: T) => void;\n  canDelete: (row: T) => boolean;\n  onDelete: (row: T) => void;\n  onClickConnectionTabLink: (row: T) => void;\n  onClickSupportLink: () => void;\n  onInstanceLinkClick: (row: T) => void;\n  canHaveInstanceLink: (row: T) => boolean;\n  canOpenConnection: (row: T) => boolean;\n} & Pick<\n  TableViewProps<T, typeof Columns[number]>,\n  | \"itemCount\"\n  | \"page\"\n  | \"perPage\"\n  | \"onPageChange\"\n  | \"isRowSelected\"\n  | \"isColumnSortable\"\n  | \"onClearAllFilters\"\n> &\n  EmptyStateNoInstancesProps &\n  EmptyStateNoResultsProps;\n\nexport const KafkaInstances = <T extends Kafka>({\n  instances,\n  itemCount,\n  page,\n  perPage,\n  names,\n  owners,\n  statuses,\n  getUrlForInstance,\n  isRowSelected,\n  isColumnSortable,\n  onPageChange,\n  onDetails,\n  onConnection,\n  canChangeOwner,\n  onChangeOwner,\n  canDelete,\n  onDelete,\n  onCreate,\n  onQuickstartGuide,\n  onClickConnectionTabLink,\n  onClickSupportLink,\n  onInstanceLinkClick,\n  onSearchName,\n  onRemoveNameChip,\n  onRemoveNameChips,\n  onSearchOwner,\n  onRemoveOwnerChip,\n  onRemoveOwnerChips,\n  onSearchStatus,\n  onRemoveStatusChip,\n  onRemoveStatusChips,\n  onClearAllFilters,\n\n  canHaveInstanceLink,\n  canOpenConnection,\n}: KafkaInstancesProps<T>) => {\n  const { t } = useTranslation(\"kafka\");\n  const labels = useKafkaLabels();\n  const breakpoint = \"lg\";\n\n  const isFiltered =\n    names.length > 0 || owners.length > 0 || statuses.length > 0;\n\n  return (\n    <PageSection isFilled={true}>\n      <TableView\n        data={instances}\n        columns={Columns}\n        renderHeader={({ column, Th, key }) => (\n          <Th key={key}>{labels.fields[column]}</Th>\n        )}\n        renderCell={({ column, row, Td, key }) => {\n          const timeCreatedDate = parseISO(row.createdAt);\n          const instanceLinkEnable = canHaveInstanceLink(row);\n          return (\n            <Td key={key} dataLabel={labels.fields[column]}>\n              {(() => {\n                switch (column) {\n                  case \"name\":\n                    return (\n                      <Button\n                        variant=\"link\"\n                        component={(props) => (\n                          <Link to={getUrlForInstance(row)} {...props}>\n                            {row.name}\n                          </Link>\n                        )}\n                        isInline={true}\n                        isAriaDisabled={!instanceLinkEnable}\n                        isDisabled={!instanceLinkEnable}\n                        onClick={() => onInstanceLinkClick(row)}\n                      />\n                    );\n                  case \"provider\":\n                    return labels.providers[row.provider];\n                  case \"createdAt\":\n                    return (\n                      <Stack>\n                        <StackItem>\n                          <FormatDate\n                            date={timeCreatedDate}\n                            format={\"distanceToNowWithAgo\"}\n                          />\n                        </StackItem>\n                        {row.expiryDate && (\n                          <StackItem>\n                            <Trans\n                              i18nKey=\"will_expire_short\"\n                              ns={[\"kafka\"]}\n                              components={{\n                                time: (\n                                  <FormatDate\n                                    date={parseISO(row.expiryDate)}\n                                    format=\"expiration\"\n                                  />\n                                ),\n                              }}\n                            />\n                          </StackItem>\n                        )}\n                      </Stack>\n                    );\n                  case \"status\":\n                    return (\n                      <KafkaInstanceStatus\n                        status={row[\"status\"]}\n                        createdAt={timeCreatedDate}\n                        onClickConnectionTabLink={() =>\n                          onClickConnectionTabLink(row)\n                        }\n                        onClickSupportLink={onClickSupportLink}\n                      />\n                    );\n                  default:\n                    return row[column];\n                }\n              })()}\n            </Td>\n          );\n        }}\n        renderActions={({ row }) => {\n          const changeOwnerEnabled = canChangeOwner(row);\n          const deleteEnabled = canDelete(row);\n          const openConnectionEnabled = canOpenConnection(row);\n          return (\n            <KafkaInstanceActions\n              onDetails={() => onDetails(row)}\n              onConnection={() => onConnection(row)}\n              canOpenConnection={openConnectionEnabled}\n              canChangeOwner={changeOwnerEnabled}\n              onChangeOwner={() => onChangeOwner(row)}\n              canDelete={deleteEnabled}\n              onDelete={() => onDelete(row)}\n            />\n          );\n        }}\n        onRowClick={({ row }) => onDetails(row)}\n        isColumnSortable={isColumnSortable}\n        isRowSelected={isRowSelected}\n        isRowDeleted={({ row }) => DeletingStatuses.includes(row[\"status\"])}\n        toolbarBreakpoint={breakpoint}\n        filters={{\n          [labels.fields.name]: {\n            type: \"search\",\n            chips: names,\n            onSearch: onSearchName,\n            onRemoveChip: onRemoveNameChip,\n            onRemoveGroup: onRemoveNameChips,\n            validate: (value) => /^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(value),\n            errorMessage: t(\"kafka:input_field_invalid_message\"),\n          },\n          [labels.fields.owner]: {\n            type: \"search\",\n            chips: owners,\n            onSearch: onSearchOwner,\n            onRemoveChip: onRemoveOwnerChip,\n            onRemoveGroup: onRemoveOwnerChips,\n            validate: (value: string) => !/[\"$^<>|+%/;:,\\s*=~#()]/.test(value),\n            errorMessage: t(\"kafka:input_field_invalid_message\"),\n          },\n          [labels.fields.status]: {\n            type: \"checkbox\",\n            chips: statuses,\n            options: labels.statusesSimplified,\n            onToggle: onSearchStatus,\n            onRemoveChip: onRemoveStatusChip,\n            onRemoveGroup: onRemoveStatusChips,\n          },\n        }}\n        actions={[\n          {\n            label: t(\"create_instance\"),\n            onClick: onCreate,\n            isPrimary: true,\n          },\n        ]}\n        itemCount={itemCount}\n        page={page}\n        perPage={perPage}\n        onPageChange={onPageChange}\n        onClearAllFilters={onClearAllFilters}\n        ariaLabel={t(\"table.title\")}\n        isFiltered={isFiltered}\n        emptyStateNoData={\n          <EmptyStateNoInstances\n            onCreate={onCreate}\n            onQuickstartGuide={onQuickstartGuide}\n          />\n        }\n        emptyStateNoResults={\n          <EmptyStateNoResults onClearAllFilters={onClearAllFilters} />\n        }\n      />\n    </PageSection>\n  );\n};\n","import type { DatePickerProps, TimePickerProps } from \"@patternfly/react-core\";\nimport { DatePicker, InputGroup, TimePicker } from \"@patternfly/react-core\";\nimport { formatISO, parseISO, setHours, setMinutes } from \"date-fns\";\nimport { formatInTimeZone } from \"date-fns-tz\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useState } from \"react\";\nimport type { DateIsoString } from \"../../../../../ui-models/src/types\";\n\nexport type DateTimePickerProps = {\n  isDisabled: boolean;\n  value: DateIsoString | undefined;\n  onChange: (value: DateIsoString) => void;\n};\nexport const DateTimePicker: VoidFunctionComponent<DateTimePickerProps> = ({\n  isDisabled,\n  value,\n  onChange,\n}) => {\n  const [timeSelected, setIsTimeSelected] = useState(false);\n  const date = value ? parseISO(value) : undefined;\n\n  const onSelectCalendar: DatePickerProps[\"onChange\"] = (_, newDate) => {\n    if (newDate) {\n      onChange(formatISO(newDate) as DateIsoString);\n    }\n  };\n\n  const onSelectTime: TimePickerProps[\"onChange\"] = (\n    time,\n    hour,\n    minute,\n    __,\n    isValid\n  ) => {\n    if (\n      isValid &&\n      date &&\n      hour != undefined &&\n      hour > 0 &&\n      (time.includes(\"AM\") || time.includes(\"PM\"))\n    ) {\n      let newDate = date;\n      if (hour !== undefined) {\n        newDate = setHours(newDate, hour);\n      }\n      if (minute !== undefined) {\n        newDate = setMinutes(newDate, minute);\n      }\n\n      onChange(formatISO(newDate) as DateIsoString);\n      setIsTimeSelected(true);\n    }\n  };\n\n  return (\n    <InputGroup>\n      <DatePicker\n        isDisabled={isDisabled}\n        value={date ? formatInTimeZone(date, \"UTC\", \"yyyy-MM-dd\") : undefined}\n        onChange={onSelectCalendar}\n      />\n      <TimePicker\n        isDisabled={!date || isDisabled}\n        time={timeSelected ? date : undefined}\n        onChange={onSelectTime}\n      />\n    </InputGroup>\n  );\n};\n","import {\n  Dropdown,\n  DropdownItem,\n  DropdownPosition,\n  DropdownSeparator,\n  DropdownToggle,\n  InputGroup,\n  TextInput,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useState } from \"react\";\nimport type { DateIsoString } from \"../../../../../ui-models/src/types\";\nimport { DateTimePicker } from \"./DateTimePicker\";\n\ntype Category = \"offset\" | \"timestamp\" | \"epoch\" | \"latest\";\nexport type FilterGroupProps = {\n  isDisabled: boolean;\n  offset: number | undefined;\n  epoch: number | undefined;\n  timestamp: DateIsoString | undefined;\n  onOffsetChange: (value: number | undefined) => void;\n  onTimestampChange: (value: DateIsoString | undefined) => void;\n  onEpochChange: (value: number | undefined) => void;\n  onLatest: () => void;\n};\nexport const FilterGroup: VoidFunctionComponent<FilterGroupProps> = ({\n  isDisabled,\n  offset,\n  epoch,\n  timestamp,\n  onOffsetChange,\n  onTimestampChange,\n  onEpochChange,\n  onLatest,\n}) => {\n  const { t } = useTranslation(\"message-browser\");\n  const [currentCategory, setCurrentCategory] = useState<Category>(\"latest\");\n  const [isOpen, setIsOpen] = useState(false);\n  const labels: { [key in Category]: string } = {\n    offset: t(\"filter.offset\"),\n    timestamp: t(\"filter.timestamp\"),\n    epoch: t(\"filter.epoch\"),\n    latest: t(\"filter.latest\"),\n  };\n  return (\n    <ToolbarItem>\n      <InputGroup>\n        <Dropdown\n          data-testid={\"filter-group-dropdown\"}\n          toggle={\n            <DropdownToggle\n              onToggle={setIsOpen}\n              isDisabled={isDisabled}\n              data-testid={\"filter-group\"}\n            >\n              {labels[currentCategory]}\n            </DropdownToggle>\n          }\n          position={DropdownPosition.left}\n          isOpen={isOpen}\n          onSelect={() => setIsOpen(false)}\n          dropdownItems={[\n            <DropdownItem\n              key=\"offset\"\n              value=\"offset\"\n              autoFocus={currentCategory === \"offset\"}\n              onClick={() => setCurrentCategory(\"offset\")}\n            >\n              {labels[\"offset\"]}\n            </DropdownItem>,\n            <DropdownItem\n              key=\"timestamp\"\n              value=\"timestamp\"\n              autoFocus={currentCategory === \"timestamp\"}\n              onClick={() => setCurrentCategory(\"timestamp\")}\n            >\n              {labels[\"timestamp\"]}\n            </DropdownItem>,\n            <DropdownItem\n              key=\"epoch\"\n              value=\"epoch\"\n              autoFocus={currentCategory === \"epoch\"}\n              onClick={() => setCurrentCategory(\"epoch\")}\n            >\n              {labels[\"epoch\"]}\n            </DropdownItem>,\n            <DropdownSeparator key={\"divider\"} />,\n            <DropdownItem\n              key=\"latest\"\n              value=\"latest\"\n              autoFocus={currentCategory === \"latest\"}\n              onClick={() => {\n                setCurrentCategory(\"latest\");\n                onLatest();\n              }}\n            >\n              {labels[\"latest\"]}\n            </DropdownItem>,\n          ]}\n        />\n        {currentCategory === \"offset\" && (\n          <TextInput\n            isDisabled={isDisabled}\n            type={\"number\"}\n            aria-label={t(\"filter.offset_aria_label\")}\n            placeholder={t(\"filter.offset_placeholder\")}\n            onChange={(value) => {\n              if (value !== \"\") {\n                const newOffset = parseInt(value, 10);\n                if (Number.isInteger(newOffset)) {\n                  onOffsetChange(newOffset);\n                }\n              } else {\n                onOffsetChange(undefined);\n              }\n            }}\n            value={offset === undefined ? \"\" : offset}\n          />\n        )}\n        {currentCategory === \"timestamp\" && (\n          <DateTimePicker\n            isDisabled={isDisabled}\n            value={timestamp}\n            onChange={onTimestampChange}\n          />\n        )}\n        {currentCategory === \"epoch\" && (\n          <TextInput\n            isDisabled={isDisabled}\n            type={\"number\"}\n            aria-label={t(\"filter.epoch_aria_label\")}\n            placeholder={t(\"filter.epoch_placeholder\")}\n            className=\"pf-u-flex-basis-auto pf-u-flex-grow-0 pf-u-w-initial\"\n            size={t(\"filter.epoch_placeholder\").length}\n            onChange={(value) => {\n              if (value !== \"\" && Number(value) >= 0)\n                onEpochChange(Number(value));\n              else onEpochChange(undefined);\n            }}\n            value={epoch == undefined ? \"\" : epoch}\n          />\n        )}\n      </InputGroup>\n    </ToolbarItem>\n  );\n};\n","import {\n  InputGroup,\n  InputGroupText,\n  Select,\n  SelectOption,\n} from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport type LimitSelectorProps = {\n  value: number;\n  isDisabled: boolean;\n  onChange: (value: number) => void;\n};\nexport const LimitSelector: VoidFunctionComponent<LimitSelectorProps> = ({\n  value,\n  isDisabled,\n  onChange,\n}) => {\n  const { t } = useTranslation(\"message-browser\");\n  const [isOpen, setIsOpen] = useState(false);\n  const toggleOpen = (isOpen: boolean) => setIsOpen(isOpen);\n  const titleId = \"limit-selector\";\n\n  return (\n    <InputGroup>\n      <InputGroupText className=\"pf-c-content\">\n        {t(\"limit_label\")}\n      </InputGroupText>\n      <div>\n        <span id={titleId} hidden>\n          Select a state\n        </span>\n\n        <Select\n          aria-label={t(\"per_page_aria_label\")}\n          onToggle={toggleOpen}\n          selections={value !== undefined ? [t(\"limit\", { value })] : undefined}\n          isOpen={isOpen}\n          isDisabled={isDisabled}\n          onSelect={() => setIsOpen(false)}\n          data-testid={\"limit-selector\"}\n        >\n          {[10, 20, 50].map((value, idx) => (\n            <SelectOption\n              key={idx}\n              value={t(\"limit\", { value })}\n              onClick={() => onChange(value)}\n            />\n          ))}\n        </Select>\n      </div>\n    </InputGroup>\n  );\n};\n","import type { Message } from \"ui-models/src/models/message\";\n\nexport function isSameMessage(m1: Message, m2: Message) {\n  return JSON.stringify(m1) === JSON.stringify(m2);\n}\n\nexport function beautifyUnknownValue(value: string): string {\n  try {\n    return JSON.stringify(JSON.parse(value), null, 2);\n  } catch (e) {\n    // noop\n  }\n  return value;\n}\n\nexport function truncate(value: string, length: number): [string, boolean] {\n  const shouldTruncate = value.length > length;\n  return [\n    shouldTruncate ? `${value.substring(0, length)}...` : value,\n    shouldTruncate,\n  ];\n}\n","export enum RetentionTimeUnits {\n  MILLISECOND = \"milliseconds\",\n  SECOND = \"seconds\",\n  MINUTE = \"minutes\",\n  HOUR = \"hours\",\n  DAY = \"days\",\n  WEEK = \"weeks\",\n  CUSTOM = \"custom\",\n  UNLIMITED = \"unlimited\",\n}\n\nexport enum RetentionSizeUnits {\n  BYTE = \"bytes\",\n  KIBIBYTE = \"kibibytes\",\n  MEBIBYTE = \"mebibytes\",\n  GIBIBYTE = \"gibibytes\",\n  TEBIBYTE = \"tebibytes\",\n  CUSTOM = \"custom\",\n  UNLIMITED = \"unlimited\",\n}\n\nexport const unitsToBytes = {\n  [RetentionSizeUnits.BYTE]: BigInt(\"1\"),\n  [RetentionSizeUnits.KIBIBYTE]: BigInt(\"1024\"),\n  [RetentionSizeUnits.MEBIBYTE]: BigInt(\"1048576\"),\n  [RetentionSizeUnits.GIBIBYTE]: BigInt(\"1073741824\"),\n  [RetentionSizeUnits.TEBIBYTE]: BigInt(\"1099511600000\"),\n};\n\nexport const unitsToMilliSecond = {\n  [RetentionTimeUnits.MILLISECOND]: BigInt(\"1\"),\n  [RetentionTimeUnits.SECOND]: BigInt(\"1000\"),\n  [RetentionTimeUnits.MINUTE]: BigInt(\"60000\"),\n  [RetentionTimeUnits.HOUR]: BigInt(\"3600000\"),\n  [RetentionTimeUnits.DAY]: BigInt(\"86400000\"),\n};\n\ntype ConversionUnit = {\n  value: bigint;\n  unit: string;\n};\n\nexport const millisecondsToTime = (value: bigint): ConversionUnit => {\n  if (value) {\n    if (value % unitsToMilliSecond.days == BigInt(0))\n      return { value: value / unitsToMilliSecond.days, unit: \"days\" };\n    if (value % unitsToMilliSecond.hours == BigInt(0))\n      return { value: value / unitsToMilliSecond.hours, unit: \"hours\" };\n    if (value % unitsToMilliSecond.minutes == BigInt(0))\n      return { value: value / unitsToMilliSecond.minutes, unit: \"minutes\" };\n    if (value % unitsToMilliSecond.seconds == BigInt(0))\n      return { value: value / unitsToMilliSecond.seconds, unit: \"seconds\" };\n  }\n\n  return { value, unit: \"milliseconds\" };\n};\n\nexport const formattedRetentionTime = (time: bigint): string => {\n  const { unit, value } = millisecondsToTime(time);\n  return Number(value) === -1 ? \"Unlimited\" : `${time} ms (${value} ${unit})`;\n};\n\nexport const formattedRetentionSize = (size: bigint): string => {\n  const { unit, value } = bytesToMemorySize(size);\n  return Number(value) === -1\n    ? \"Unlimited\"\n    : `${size} bytes (${value} ${unit})`;\n};\n\nexport const bytesToMemorySize = (value: bigint): ConversionUnit => {\n  if (value) {\n    if (value % unitsToBytes.tebibytes == BigInt(0))\n      return { value: value / unitsToBytes.tebibytes, unit: \"tebibytes\" };\n    if (value % unitsToBytes.gibibytes == BigInt(0))\n      return { value: value / unitsToBytes.gibibytes, unit: \"gibibytes\" };\n    if (value % unitsToBytes.mebibytes == BigInt(0))\n      return { value: value / unitsToBytes.mebibytes, unit: \"mebibytes\" };\n    if (value % unitsToBytes.kibibytes == BigInt(0))\n      return { value: value / unitsToBytes.kibibytes, unit: \"kibibytes\" };\n  }\n\n  return { value, unit: \"bytes\" };\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport type NoDataCellProps = {\n  columnLabel: string;\n};\nexport const NoDataCell: VoidFunctionComponent<NoDataCellProps> = ({\n  columnLabel,\n}) => {\n  const { t } = useTranslation(\"common\");\n  return (\n    <span className=\"pf-u-color-400\">\n      {t(\"table_cell_no_data\", { column: columnLabel })}\n    </span>\n  );\n};\n","import {\n  ClipboardCopy,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  DrawerActions,\n  DrawerCloseButton,\n  DrawerContentBody,\n  DrawerHead,\n  DrawerPanelContent,\n  Flex,\n  FlexItem,\n  Tab,\n  Tabs,\n  TabTitleText,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { FormatDate, useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { parseISO } from \"date-fns\";\nimport type { VoidFunctionComponent } from \"react\";\nimport type { Message } from \"ui-models/src/models/message\";\nimport { beautifyUnknownValue } from \"../utils\";\nimport { NoDataCell } from \"./NoDataCell\";\n\nexport type MessageDetailsProps = {\n  onClose: () => void;\n  defaultTab: MessageDetailsBodyProps[\"defaultTab\"];\n  message: Message | undefined;\n};\nexport const MessageDetails: VoidFunctionComponent<MessageDetailsProps> = ({\n  onClose,\n  defaultTab,\n  message,\n}) => {\n  const { t } = useTranslation(\"message-browser\");\n\n  return (\n    <DrawerPanelContent isResizable={true} minSize={\"400px\"}>\n      <DrawerHead>\n        <TextContent>\n          <Text component={TextVariants.h2}>{t(\"message\")}</Text>\n        </TextContent>\n        <DrawerActions>\n          <DrawerCloseButton onClick={onClose} />\n        </DrawerActions>\n      </DrawerHead>\n      <DrawerContentBody>\n        {message && (\n          <MessageDetailsBody\n            defaultTab={defaultTab}\n            messageKey={message.key}\n            {...message}\n          />\n        )}\n      </DrawerContentBody>\n    </DrawerPanelContent>\n  );\n};\n\nexport type MessageDetailsBodyProps = {\n  defaultTab: \"value\" | \"headers\";\n  messageKey: Message[\"key\"];\n} & Omit<Message, \"key\">;\n\nexport const MessageDetailsBody: VoidFunctionComponent<\n  MessageDetailsBodyProps\n> = ({ defaultTab, ...message }) => {\n  const { t } = useTranslation(\"message-browser\");\n\n  return (\n    <Flex direction={{ default: \"column\" }} data-testid={\"message-details\"}>\n      <FlexItem>\n        <DescriptionList isHorizontal isCompact>\n          <DescriptionListGroup>\n            <DescriptionListTerm>{t(\"field.partition\")}</DescriptionListTerm>\n            <DescriptionListDescription>\n              {message.partition}\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>{t(\"field.offset\")}</DescriptionListTerm>\n            <DescriptionListDescription>\n              {message.offset}\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>{t(\"field.timestamp\")}</DescriptionListTerm>\n            <DescriptionListDescription>\n              {message.timestamp ? (\n                <FormatDate\n                  date={parseISO(message.timestamp)}\n                  format={\"longWithMilliseconds\"}\n                />\n              ) : (\n                <NoDataCell columnLabel={t(\"field.timestamp\")} />\n              )}\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>{t(\"field.epoch\")}</DescriptionListTerm>\n            <DescriptionListDescription>\n              {message.timestamp ? (\n                <FormatDate\n                  date={parseISO(message.timestamp)}\n                  format={\"epoch\"}\n                />\n              ) : (\n                <NoDataCell columnLabel={t(\"field.epoch\")} />\n              )}\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>{t(\"field.key\")}</DescriptionListTerm>\n            <DescriptionListDescription>\n              {message.messageKey ? (\n                message.messageKey\n              ) : (\n                <NoDataCell columnLabel={t(\"field.key\")} />\n              )}\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n        </DescriptionList>\n      </FlexItem>\n      <FlexItem>\n        {/* set key to be a random number to force redraw the tabs in order to change the active tab from the outside */}\n        <Tabs defaultActiveKey={defaultTab} key={Math.random()}>\n          <Tab\n            eventKey={\"value\"}\n            title={<TabTitleText>{t(\"field.value\")}</TabTitleText>}\n          >\n            <ClipboardCopy isCode={true} isExpanded={true} isReadOnly={true}>\n              {beautifyUnknownValue(message.value || \"\")}\n            </ClipboardCopy>\n          </Tab>\n          <Tab\n            eventKey={\"headers\"}\n            title={<TabTitleText>{t(\"field.headers\")}</TabTitleText>}\n          >\n            <ClipboardCopy isCode={true} isExpanded={true} isReadOnly={true}>\n              {beautifyUnknownValue(JSON.stringify(message.headers) || \"\")}\n            </ClipboardCopy>\n          </Tab>\n        </Tabs>\n      </FlexItem>\n    </Flex>\n  );\n};\n","import {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { CubesIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const NoDataEmptyState: VoidFunctionComponent<{\n  onRefresh: () => void;\n}> = ({ onRefresh }) => {\n  const { t } = useTranslation(\"message-browser\");\n  return (\n    <EmptyState variant={EmptyStateVariant.large}>\n      <EmptyStateIcon icon={CubesIcon} />\n      <Title headingLevel=\"h4\" size=\"lg\">\n        {t(\"no_data_title\")}\n      </Title>\n      <EmptyStateBody>{t(\"no_data_body\")}</EmptyStateBody>\n      <Button onClick={onRefresh}>{t(\"no_data_refresh\")}</Button>\n    </EmptyState>\n  );\n};\n","import {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { SearchIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const NoResultsEmptyState: VoidFunctionComponent<{\n  onReset: () => void;\n}> = ({ onReset }) => {\n  const { t } = useTranslation(\"message-browser\");\n  return (\n    <EmptyState variant={EmptyStateVariant.large}>\n      <EmptyStateIcon icon={SearchIcon} />\n      <Title headingLevel=\"h4\" size=\"lg\">\n        {t(\"no_results_title\")}\n      </Title>\n      <EmptyStateBody>{t(\"no_results_body\")}</EmptyStateBody>\n      <Button variant={\"link\"} onClick={onReset}>\n        {t(\"no_results_reset\")}\n      </Button>\n    </EmptyState>\n  );\n};\n","import { Text, TextContent } from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const OffsetRange: VoidFunctionComponent<{\n  min: number;\n  max: number;\n}> = ({ min, max }) => {\n  const { t } = useTranslation(\"message-browser\");\n  return (\n    <TextContent className=\"pf-u-font-size\">\n      <Text>\n        {t(\"offset\")} <span className=\"custom-text\">{min}</span> -{\" \"}\n        <span className=\"custom-text\">{max}</span>\n      </Text>\n    </TextContent>\n  );\n};\n","import type { SelectProps } from \"@patternfly/react-core\";\nimport {\n  InputGroup,\n  InputGroupText,\n  InputGroupTextVariant,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback, useMemo, useState } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nconst MAX_OPTIONS = 20;\n\nexport type PartitionSelectorProps = {\n  value: number | undefined;\n  partitions: number | undefined;\n  isDisabled: boolean;\n  onChange: (value: number | undefined) => void;\n};\nexport const PartitionSelector: VoidFunctionComponent<\n  PartitionSelectorProps\n> = ({ value, partitions, isDisabled, onChange }) => {\n  const { t } = useTranslation(\"message-browser\");\n  const [isOpen, setIsOpen] = useState(false);\n  const toggleOpen = (isOpen: boolean) => setIsOpen(isOpen);\n  const titleId = \"partition-selector\";\n\n  const handleChange = useCallback(\n    (value: string) => {\n      if (value !== \"\") {\n        const valueAsNum = parseInt(value, 10);\n        if (Number.isInteger(valueAsNum)) {\n          onChange(valueAsNum);\n        }\n      }\n      setIsOpen(false);\n    },\n    [onChange]\n  );\n\n  const allPartitions = useMemo(() => {\n    return new Array(partitions).fill(0).map((_, index) => index.toString());\n  }, [partitions]);\n\n  const makeOptions = useCallback(\n    (values: string[]) => {\n      const options = values\n        .slice(0, MAX_OPTIONS)\n        .map((v) => <SelectOption key={v} value={v} />);\n      const hiddenOptionsCount = values.length - options.length;\n      return hiddenOptionsCount\n        ? [\n            ...options,\n            <SelectOption\n              key={\"more-info\"}\n              isDisabled={true}\n              description={t(\"partitions_hidden\", {\n                count: hiddenOptionsCount,\n              })}\n            />,\n          ]\n        : options;\n    },\n    [t]\n  );\n\n  const options = useMemo(() => {\n    return makeOptions(allPartitions);\n  }, [allPartitions, makeOptions]);\n\n  const handleFilter: SelectProps[\"onFilter\"] = useCallback(\n    (_, filter: string) => {\n      if (filter !== \"\") {\n        return makeOptions(\n          allPartitions.filter((partition) => partition.includes(filter))\n        );\n      }\n      return options;\n    },\n    [allPartitions, makeOptions, options]\n  );\n\n  return (\n    <InputGroup>\n      <InputGroupText className=\"pf-c-content\">\n        {t(\"field.partition\")}\n      </InputGroupText>\n      <div>\n        <span id={titleId} hidden>\n          {t(\"select_partition_aria_label\")}\n        </span>\n        <Select\n          variant={SelectVariant.typeahead}\n          typeAheadAriaLabel={t(\"select_partition_typeahead\")}\n          onToggle={toggleOpen}\n          onSelect={(_, value) => handleChange(value as string)}\n          selections={value !== undefined ? [`${value}`] : undefined}\n          isOpen={isOpen}\n          aria-labelledby={titleId}\n          maxHeight={200}\n          width={150}\n          onFilter={handleFilter}\n          isInputValuePersisted={false}\n          isDisabled={isDisabled}\n          placeholderText={t(\"partition_placeholder\")}\n          onClear={() => onChange(undefined)}\n          data-testid={\"partition-selector\"}\n        >\n          {options}\n        </Select>\n      </div>\n      <InputGroupText\n        id={`${titleId}-input`}\n        variant={InputGroupTextVariant.plain}\n        className=\"pf-c-content\"\n      >\n        {t(\"select_partition_of_count\", { partitions })}\n      </InputGroupText>\n    </InputGroup>\n  );\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { truncate } from \"../utils\";\nimport { Flex, FlexItem } from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nconst PREVIEW_LENGTH = 170;\n\nexport type UnknownValuePreviewProps = {\n  value: string;\n  truncateAt?: number;\n  onClick?: () => void;\n};\nexport const UnknownValuePreview: VoidFunctionComponent<\n  UnknownValuePreviewProps\n> = ({ value, truncateAt = PREVIEW_LENGTH, onClick }) => {\n  const { t } = useTranslation(\"message-browser\");\n  const [preview, truncated] = truncate(value, truncateAt);\n  return (\n    <Flex\n      direction={{ default: \"column\" }}\n      spaceItems={{ default: \"spaceItemsXs\" }}\n    >\n      <FlexItem>{preview}</FlexItem>\n      {truncated && (\n        <FlexItem>\n          <a\n            onClick={\n              onClick\n                ? (e) => {\n                    e.stopPropagation();\n                    onClick();\n                  }\n                : undefined\n            }\n          >\n            {t(\"show_more\")}\n          </a>\n        </FlexItem>\n      )}\n    </Flex>\n  );\n};\n","import type { Message } from \"ui-models/src/models/message\";\nimport { assign, createMachine } from \"xstate\";\nimport type { DateIsoString } from \"../../../../ui-models/src/types\";\nimport { isSameMessage } from \"./utils\";\n\nexport type MessageApiResponse = {\n  lastUpdated: Date;\n  messages: Message[];\n  partitions: number;\n  offsetMin: number;\n  offsetMax: number;\n\n  filter: {\n    partition: number | undefined;\n    offset: number | undefined;\n    timestamp: DateIsoString | undefined;\n    limit: number | undefined;\n    epoch: number | undefined;\n  };\n};\n\nexport const MessageBrowserMachine = createMachine(\n  {\n    id: \"message-browser\",\n    predictableActionArguments: true,\n    tsTypes: {} as import(\"./MessageBrowserMachine.typegen\").Typegen0,\n    schema: {\n      context: {} as {\n        // response\n        response: MessageApiResponse | undefined;\n\n        limit: number;\n        // optional input\n        partition: number | undefined;\n        offset: number | undefined;\n        epoch: number | undefined;\n        timestamp: DateIsoString | undefined;\n        selectedMessage: Message | undefined;\n      },\n      events: {} as\n        | {\n            type: \"fetchSuccess\";\n            messages: Message[];\n            partitions: number;\n            offsetMin: number;\n            offsetMax: number;\n          }\n        | { type: \"fetchFail\" }\n        | { type: \"refresh\" }\n        | { type: \"setPartition\"; value: number | undefined }\n        | { type: \"setOffset\"; value: number | undefined }\n        | { type: \"setTimestamp\"; value: DateIsoString | undefined }\n        | { type: \"setEpoch\"; value: number | undefined }\n        | { type: \"setLatest\" }\n        | { type: \"setLimit\"; value: number }\n        | { type: \"selectMessage\"; message: Message }\n        | { type: \"deselectMessage\" },\n    },\n    initial: \"initialLoading\",\n    context: {\n      // response\n      response: undefined,\n\n      limit: 10,\n      // optional input\n      partition: undefined,\n      offset: undefined,\n      timestamp: undefined,\n      selectedMessage: undefined,\n      epoch: undefined,\n    },\n    states: {\n      initialLoading: {\n        invoke: {\n          src: \"api\",\n        },\n        on: {\n          fetchSuccess: {\n            actions: \"setMessages\",\n            target: \"verifyMessages\",\n          },\n          fetchFail: \"error\",\n        },\n      },\n      verifyMessages: {\n        always: [{ cond: \"noMessages\", target: \"noData\" }, { target: \"ready\" }],\n      },\n      noData: {\n        on: {\n          refresh: \"initialLoading\",\n        },\n      },\n      error: {\n        on: {\n          refresh: \"initialLoading\",\n        },\n      },\n      ready: {\n        initial: \"pristine\",\n        states: {\n          pristine: {},\n          dirty: {\n            tags: \"dirty\",\n          },\n          shouldSearch: {\n            always: [\n              {\n                cond: \"areFiltersChanged\",\n                target: \"dirty\",\n              },\n              { target: \"pristine\" },\n            ],\n          },\n        },\n        always: [\n          {\n            cond: \"selectedMessageNotAvailable\",\n            actions: \"deselectMessage\",\n          },\n        ],\n        on: {\n          refresh: \"refreshing\",\n          setPartition: {\n            target: \".shouldSearch\",\n            actions: \"setPartition\",\n          },\n          setEpoch: {\n            actions: \"setEpoch\",\n            target: \".shouldSearch\",\n          },\n          setTimestamp: {\n            target: \".shouldSearch\",\n            actions: \"setTimestamp\",\n          },\n          setOffset: {\n            target: \".shouldSearch\",\n            actions: \"setOffset\",\n          },\n          setLatest: {\n            target: \".shouldSearch\",\n            actions: \"setLatest\",\n          },\n          setLimit: {\n            target: \".shouldSearch\",\n            actions: \"setLimit\",\n          },\n          selectMessage: {\n            actions: \"selectMessage\",\n          },\n          deselectMessage: {\n            actions: \"deselectMessage\",\n          },\n        },\n      },\n      refreshing: {\n        invoke: {\n          src: \"api\",\n        },\n        on: {\n          fetchSuccess: {\n            actions: \"setMessages\",\n            target: \"ready\",\n          },\n          fetchFail: {\n            target: \"ready\",\n          },\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      setMessages: assign(\n        (context, { messages, partitions, offsetMin, offsetMax }) => ({\n          response: {\n            lastUpdated: new Date(),\n            messages,\n            partitions,\n            offsetMin,\n            offsetMax,\n            filter: {\n              partition: context.partition,\n              timestamp: context.timestamp,\n              offset: context.offset,\n              limit: context.limit,\n              epoch: context.epoch,\n            },\n          },\n        })\n      ),\n      setPartition: assign((_, { value }) => ({ partition: value })),\n      setEpoch: assign((_, { value }) => ({\n        epoch: value,\n      })),\n      setTimestamp: assign((_, { value }) => ({\n        timestamp: value,\n      })),\n      setOffset: assign((_, { value }) => ({\n        offset: value,\n      })),\n      setLimit: assign((_, { value }) => ({\n        limit: value,\n      })),\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      setLatest: assign((_) => ({\n        timestamp: undefined,\n        offset: undefined,\n      })),\n      selectMessage: assign((_, { message }) => ({ selectedMessage: message })),\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      deselectMessage: assign((_) => ({ selectedMessage: undefined })),\n    },\n    guards: {\n      noMessages: ({ response }) =>\n        response === undefined || response.messages.length === 0,\n      selectedMessageNotAvailable: ({ response, selectedMessage }) =>\n        selectedMessage !== undefined &&\n        response?.messages.find((m) => isSameMessage(m, selectedMessage)) ===\n          undefined,\n      areFiltersChanged: (context) =>\n        context.response?.filter.limit !== context.limit ||\n        context.response?.filter.offset !== context.offset ||\n        context.response?.filter.partition !== context.partition ||\n        context.response?.filter.timestamp !== context.timestamp ||\n        context.response?.filter.epoch !== context.epoch,\n    },\n  }\n);\n","import {\n  Button,\n  Drawer,\n  DrawerContent,\n  PageSection,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n} from \"@patternfly/react-core\";\nimport { FilterIcon, SearchIcon } from \"@patternfly/react-icons\";\nimport type { BaseCellProps } from \"@patternfly/react-table\";\nimport {\n  InnerScrollContainer,\n  OuterScrollContainer,\n} from \"@patternfly/react-table\";\nimport {\n  FormatDate,\n  Loading,\n  RefreshButton,\n  ResponsiveTable,\n  useTranslation,\n} from \"@rhoas/app-services-ui-components\";\nimport { useMachine } from \"@xstate/react\";\nimport { parseISO } from \"date-fns\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useMemo, useState } from \"react\";\nimport type { Message } from \"ui-models/src/models/message\";\nimport type { DateIsoString } from \"../../../../ui-models/src/types\";\nimport type { MessageDetailsProps } from \"./components\";\nimport {\n  FilterGroup,\n  LimitSelector,\n  MessageDetails,\n  NoDataCell,\n  NoDataEmptyState,\n  NoResultsEmptyState,\n  OffsetRange,\n  PartitionSelector,\n  UnknownValuePreview,\n} from \"./components\";\nimport \"./KafkaMessageBrowser.css\";\nimport type { MessageApiResponse } from \"./MessageBrowserMachine\";\nimport { MessageBrowserMachine } from \"./MessageBrowserMachine\";\nimport { beautifyUnknownValue, isSameMessage } from \"./utils\";\n\nconst columns = [\n  \"partition\",\n  \"offset\",\n  \"timestamp\",\n  \"key\",\n  \"headers\",\n  \"value\",\n] as const;\n\nconst columnWidths: BaseCellProps[\"width\"][] = [10, 10, 15, 10, undefined, 30];\n\nexport type KafkaMessageBrowserProps = {\n  getMessages: (props: {\n    partition?: number;\n    offset?: number;\n    timestamp?: DateIsoString;\n    limit: number;\n  }) => Promise<{ messages: Message[]; partitions: number }>;\n};\nexport const KafkaMessageBrowser: VoidFunctionComponent<\n  KafkaMessageBrowserProps\n> = ({ getMessages }) => {\n  const [state, send] = useMachine(() => MessageBrowserMachine, {\n    devTools: true,\n    services: {\n      api: (context) => {\n        return (send) => {\n          getMessages({\n            partition: context.partition,\n            offset: context.offset,\n            timestamp: context.timestamp,\n            limit: context.limit,\n          })\n            .then(({ messages, partitions }) =>\n              send({\n                type: \"fetchSuccess\",\n                messages,\n                partitions,\n                offsetMin: context.offset || 0,\n                offsetMax: messages.reduce(\n                  (max, m) => Math.max(max, m.offset || 0),\n                  0\n                ),\n              })\n            )\n            .catch(() => send({ type: \"fetchFail\" }));\n        };\n      },\n    },\n  });\n\n  return (\n    <KafkaMessageBrowserConnected\n      isFirstLoad={state.matches(\"initialLoading\")}\n      isNoData={state.matches(\"noData\") || state.matches(\"error\")}\n      isRefreshing={state.matches(\"refreshing\")}\n      requiresSearch={state.hasTag(\"dirty\")}\n      selectedMessage={state.context.selectedMessage}\n      response={state.context.response}\n      lastUpdated={state.context.response?.lastUpdated}\n      partition={state.context.partition}\n      limit={state.context.limit}\n      filterOffset={state.context.offset}\n      filterEpoch={state.context.epoch}\n      filterTimestamp={state.context.timestamp}\n      setPartition={(value: number | undefined) =>\n        send({ type: \"setPartition\", value })\n      }\n      setOffset={(value: number | undefined) =>\n        send({ type: \"setOffset\", value })\n      }\n      setTimestamp={(value: DateIsoString | undefined) =>\n        send({ type: \"setTimestamp\", value })\n      }\n      setEpoch={(value: number | undefined) =>\n        send({ type: \"setEpoch\", value })\n      }\n      setLatest={() => send({ type: \"setLatest\" })}\n      setLimit={(value: number) => send({ type: \"setLimit\", value })}\n      refresh={() => send({ type: \"refresh\" })}\n      selectMessage={(message: Message) =>\n        send({ type: \"selectMessage\", message })\n      }\n      deselectMessage={() => send({ type: \"deselectMessage\" })}\n    />\n  );\n};\n\nexport type KafkaMessageBrowserConnectedProps = {\n  isFirstLoad: boolean;\n  isNoData: boolean;\n  isRefreshing: boolean;\n  requiresSearch: boolean;\n  selectedMessage: Message | undefined;\n  lastUpdated: Date | undefined;\n  response: MessageApiResponse | undefined;\n  partition: number | undefined;\n  limit: number;\n  filterOffset: number | undefined;\n  filterEpoch: number | undefined;\n  filterTimestamp: DateIsoString | undefined;\n  setPartition: (value: number | undefined) => void;\n  setOffset: (value: number | undefined) => void;\n  setTimestamp: (value: DateIsoString | undefined) => void;\n  setEpoch: (value: number | undefined) => void;\n  setLatest: () => void;\n  setLimit: (value: number) => void;\n  refresh: () => void;\n  selectMessage: (message: Message) => void;\n  deselectMessage: () => void;\n};\nexport const KafkaMessageBrowserConnected: VoidFunctionComponent<\n  KafkaMessageBrowserConnectedProps\n> = ({\n  isFirstLoad,\n  isNoData,\n  isRefreshing,\n  requiresSearch,\n  selectedMessage,\n  response,\n  partition,\n  limit,\n  filterOffset,\n  filterEpoch,\n  filterTimestamp,\n  setPartition,\n  setOffset,\n  setTimestamp,\n  setEpoch,\n  setLatest,\n  setLimit,\n  refresh,\n  selectMessage,\n  deselectMessage,\n}) => {\n  const { t } = useTranslation(\"message-browser\");\n  const [defaultTab, setDefaultTab] =\n    useState<MessageDetailsProps[\"defaultTab\"]>(\"value\");\n\n  const columnLabels: { [key in typeof columns[number]]: string } = useMemo(\n    () =>\n      ({\n        partition: t(\"field.partition\"),\n        offset: t(\"field.offset\"),\n        timestamp: t(\"field.timestamp\"),\n        key: t(\"field.key\"),\n        value: t(\"field.value\"),\n        headers: t(\"field.headers\"),\n      } as const),\n    [t]\n  );\n\n  switch (true) {\n    case isFirstLoad:\n      return <Loading />;\n    case isNoData:\n      return <NoDataEmptyState onRefresh={refresh} />;\n    default:\n      return (\n        <PageSection\n          isFilled={true}\n          hasOverflowScroll={true}\n          aria-label={\"TODO\"}\n        >\n          <Drawer isInline={true} isExpanded={selectedMessage !== undefined}>\n            <DrawerContent\n              panelContent={\n                <MessageDetails\n                  message={selectedMessage}\n                  defaultTab={defaultTab}\n                  onClose={deselectMessage}\n                />\n              }\n            >\n              <OuterScrollContainer>\n                <Toolbar\n                  className={\"mas-KafkaMessageBrowser-Toolbar\"}\n                  data-testid={\"message-browser-toolbar\"}\n                >\n                  <ToolbarContent>\n                    <ToolbarToggleGroup\n                      toggleIcon={<FilterIcon />}\n                      breakpoint=\"2xl\"\n                    >\n                      <ToolbarGroup variant=\"filter-group\">\n                        <ToolbarItem>\n                          <PartitionSelector\n                            value={partition}\n                            partitions={response?.partitions || 0}\n                            onChange={setPartition}\n                            isDisabled={isRefreshing}\n                          />\n                        </ToolbarItem>\n                      </ToolbarGroup>\n                      <ToolbarGroup variant=\"filter-group\">\n                        <FilterGroup\n                          isDisabled={isRefreshing}\n                          offset={filterOffset}\n                          epoch={filterEpoch}\n                          timestamp={filterTimestamp}\n                          onOffsetChange={setOffset}\n                          onTimestampChange={setTimestamp}\n                          onEpochChange={setEpoch}\n                          onLatest={setLatest}\n                        />\n                      </ToolbarGroup>\n                      <ToolbarGroup>\n                        <LimitSelector\n                          value={limit}\n                          onChange={setLimit}\n                          isDisabled={isRefreshing}\n                        />\n                      </ToolbarGroup>\n                    </ToolbarToggleGroup>\n                    <ToolbarGroup>\n                      <ToolbarItem>\n                        <Button\n                          variant={\"plain\"}\n                          isDisabled={!requiresSearch || isRefreshing}\n                          aria-label={t(\"common:search_button_label\")}\n                          onClick={refresh}\n                        >\n                          <SearchIcon />\n                        </Button>\n                      </ToolbarItem>\n                      <ToolbarItem>\n                        <RefreshButton\n                          onClick={refresh}\n                          isRefreshing={isRefreshing}\n                          isDisabled={requiresSearch}\n                        />\n                      </ToolbarItem>\n                    </ToolbarGroup>\n                    <ToolbarGroup alignment={{ default: \"alignRight\" }}>\n                      {response?.filter.partition !== undefined &&\n                        response?.messages.length > 0 && (\n                          <OffsetRange\n                            min={response?.offsetMin || 0}\n                            max={response?.offsetMax || 0}\n                          />\n                        )}\n                    </ToolbarGroup>\n                  </ToolbarContent>\n                </Toolbar>\n                <InnerScrollContainer>\n                  <ResponsiveTable\n                    ariaLabel={t(\"table_aria_label\")}\n                    columns={columns}\n                    data={response?.messages}\n                    expectedLength={response?.messages?.length}\n                    renderHeader={({ column, Th, key }) => (\n                      <Th key={key}>{columnLabels[column]}</Th>\n                    )}\n                    renderCell={({ column, row, colIndex, Td, key }) => (\n                      <Td\n                        key={key}\n                        dataLabel={columnLabels[column]}\n                        width={columnWidths[colIndex]}\n                      >\n                        {(() => {\n                          const empty = (\n                            <NoDataCell columnLabel={columnLabels[column]} />\n                          );\n                          switch (column) {\n                            case \"partition\":\n                              return row.partition;\n                            case \"offset\":\n                              return row.offset;\n                            case \"timestamp\":\n                              return row.timestamp ? (\n                                <FormatDate\n                                  date={parseISO(row.timestamp)}\n                                  format={\"longWithMilliseconds\"}\n                                />\n                              ) : (\n                                empty\n                              );\n                            case \"key\":\n                              return row.key ? (\n                                <UnknownValuePreview\n                                  value={row.key}\n                                  truncateAt={40}\n                                />\n                              ) : (\n                                empty\n                              );\n                            case \"headers\":\n                              return Object.keys(row.headers).length > 0 ? (\n                                <UnknownValuePreview\n                                  value={beautifyUnknownValue(\n                                    JSON.stringify(row.headers)\n                                  )}\n                                  onClick={() => {\n                                    setDefaultTab(\"headers\");\n                                    selectMessage(row);\n                                  }}\n                                />\n                              ) : (\n                                empty\n                              );\n                            case \"value\":\n                              return row.value ? (\n                                <UnknownValuePreview\n                                  value={beautifyUnknownValue(row.value || \"\")}\n                                  onClick={() => {\n                                    setDefaultTab(\"value\");\n                                    selectMessage(row);\n                                  }}\n                                />\n                              ) : (\n                                empty\n                              );\n                          }\n                        })()}\n                      </Td>\n                    )}\n                    isRowSelected={({ row }) =>\n                      selectedMessage !== undefined &&\n                      isSameMessage(row, selectedMessage)\n                    }\n                    onRowClick={({ row }) => {\n                      setDefaultTab(\"value\");\n                      selectMessage(row);\n                    }}\n                  >\n                    <NoResultsEmptyState\n                      onReset={() => {\n                        setLatest();\n                        setPartition(undefined);\n                        refresh();\n                      }}\n                    />\n                  </ResponsiveTable>\n                </InnerScrollContainer>\n              </OuterScrollContainer>\n            </DrawerContent>\n          </Drawer>\n        </PageSection>\n      );\n  }\n};\n","import {\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface CapacityTable {\n  name: string;\n  firstStreamingUnit: string;\n  secondStreamingUnit: string;\n}\n\nexport const KafkaInstanceCapacityTable: FunctionComponent = () => {\n  const { t } = useTranslation(\"kafkaoverview-v2\");\n\n  const capacityTable: CapacityTable[] = [\n    {\n      name: \"Ingress (MB/second)\",\n      firstStreamingUnit: \"up to 50\",\n      secondStreamingUnit: \"up to 100\",\n    },\n    {\n      name: \"Egress (MB/second)\",\n      firstStreamingUnit: \"up to 100\",\n      secondStreamingUnit: \"up to 200\",\n    },\n    {\n      name: \"Storage* (GB)\",\n      firstStreamingUnit: \"up to 1000\",\n      secondStreamingUnit: \"up to 2000\",\n    },\n    {\n      name: \"Topic partitions\",\n      firstStreamingUnit: \"up to 1500\",\n      secondStreamingUnit: \"up to 3000\",\n    },\n    {\n      name: \"Client connections\",\n      firstStreamingUnit: \"up to 3000\",\n      secondStreamingUnit: \"up to 6000\",\n    },\n    {\n      name: \"Connection rate (connections/second)\",\n      firstStreamingUnit: \"up to 100\",\n      secondStreamingUnit: \"up to 200\",\n    },\n    {\n      name: \"Message size (MB)\",\n      firstStreamingUnit: \"up to 1\",\n      secondStreamingUnit: \"up to 1\",\n    },\n  ];\n\n  const columnNames = {\n    name: \"\",\n    firstStreamingUnit: t(\"firstStreamingUnit\"),\n    secondStreamingUnit: t(\"secondStreamingUnit\"),\n  };\n\n  return (\n    <TableComposable>\n      <Thead>\n        <Tr>\n          <Th>{columnNames.name}</Th>\n          <Th>{columnNames.firstStreamingUnit}</Th>\n          <Th>{columnNames.secondStreamingUnit}</Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        {capacityTable.map((table) => {\n          return (\n            <Tr key={table.name}>\n              <Td dataLabel={columnNames.name}>{table.name}</Td>\n              <Td dataLabel={columnNames.firstStreamingUnit}>\n                {table.firstStreamingUnit}\n              </Td>\n              <Td dataLabel={columnNames.secondStreamingUnit}>\n                {table.secondStreamingUnit}\n              </Td>\n            </Tr>\n          );\n        })}\n      </Tbody>\n    </TableComposable>\n  );\n};\n","import {\n  Bullseye,\n  Card,\n  PageSection,\n  PageSectionVariants,\n  Stack,\n  StackItem,\n  Text,\n  TextVariants,\n  Title,\n} from \"@patternfly/react-core\";\nimport classNames from \"classnames\";\nimport type {\n  CSSProperties,\n  FunctionComponent,\n  ReactNode,\n  VoidFunctionComponent,\n} from \"react\";\nimport \"./MarketingPage.css\";\n\nexport type MarketingPageHeroProps = {\n  title: string;\n  tagLine: string;\n  description: string;\n  description2?: string;\n  heroImage: string;\n  heroImageSize: number;\n  heroImageCanRepeat?: boolean;\n  heroImagePositionY?: number;\n  cta?: ReactNode;\n  variant?: \"light\" | \"dark\";\n};\n\nexport const MarketingPageHero: VoidFunctionComponent<\n  MarketingPageHeroProps\n> = ({\n  title,\n  tagLine,\n  description,\n  description2,\n  heroImage,\n  heroImageSize,\n  heroImageCanRepeat = true,\n  heroImagePositionY = 0,\n  cta,\n  variant = \"light\",\n}) => {\n  const style = {\n    \"--appsrv-marketing--banner--before--BackgroundImage\": `url(${heroImage})`,\n    \"--appsrv-marketing--banner--before--BackgroundSize\": `${heroImageSize}px`,\n    \"--appsrv-marketing--banner--before--BackgroundRepeat\": heroImageCanRepeat\n      ? \"repeat\"\n      : \"no-repeat\",\n    \"--appsrv-marketing--banner--before--BackgroundPositionY\": `${heroImagePositionY}px`,\n  } as CSSProperties;\n  return (\n    <PageSection\n      className={classNames(\"appsrv-marketing--banner\", {\n        \"pf-u-background-color-dark-100\": variant === \"dark\",\n        \"pf-u-background-color-100\": variant === \"light\",\n      })}\n      variant={\n        variant === \"dark\"\n          ? PageSectionVariants.dark\n          : PageSectionVariants.light\n      }\n      style={style}\n    >\n      <Stack hasGutter>\n        <Title headingLevel=\"h1\" size=\"2xl\">\n          {title}\n        </Title>\n        <Text\n          className={`appsrv-marketing--banner__tagline ${\n            variant === \"dark\" ? \"\" : \"pf-u-color-200\"\n          }`}\n        >\n          {tagLine}\n        </Text>\n        <Text component={TextVariants.p}>{description}</Text>\n        {description2 && (\n          <Text component={TextVariants.p} className=\"pf-u-mt-md\">\n            {description2}\n          </Text>\n        )}\n        {cta && <StackItem>{cta}</StackItem>}\n      </Stack>\n    </PageSection>\n  );\n};\n\nexport const MarketingPageBanner: FunctionComponent = ({ children }) => {\n  return (\n    <PageSection\n      variant={PageSectionVariants.light}\n      className=\"appsrv-marketing--page-section--marketing pf-u-background-color-100\"\n    >\n      <Bullseye>\n        <Text\n          component={TextVariants.p}\n          className=\"appsrv-marketing--banner--text-only\"\n        >\n          {children}\n        </Text>\n      </Bullseye>\n    </PageSection>\n  );\n};\n\nexport type MarketingPageSectionProps = {\n  className?: string;\n};\n\nexport const MarketingPageSection: FunctionComponent<\n  MarketingPageSectionProps & {\n    variant?: \"dark\" | \"light\" | \"default\";\n  }\n> = ({\n  className = \"appsrv-marketing--page-section--marketing\",\n  variant = \"default\",\n  children,\n}) => (\n  <PageSection\n    isWidthLimited\n    className={classNames(className, {\n      \"pf-u-background-color-dark-100\": variant === \"dark\",\n      \"pf-u-background-color-100\": variant === \"light\",\n    })}\n    variant={\n      variant === \"dark\"\n        ? PageSectionVariants.dark\n        : variant === \"light\"\n        ? PageSectionVariants.light\n        : PageSectionVariants.default\n    }\n  >\n    {children}\n  </PageSection>\n);\n\nexport const MarketingPageVideoCard: VoidFunctionComponent<{\n  src: string;\n  title: string;\n}> = ({ src, title }) => (\n  <Card className=\"appsrv-marketing--video\">\n    <div className=\"appsrv-marketing--video__wrapper\">\n      <iframe\n        src={src}\n        title={title}\n        frameBorder=\"0\"\n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n        allowFullScreen\n      ></iframe>\n    </div>\n  </Card>\n);\n","import {\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n  CardHeaderMain,\n  CardTitle,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Divider,\n  Flex,\n  FlexItem,\n  Grid,\n  Split,\n  SplitItem,\n  Stack,\n  Text,\n  TextContent,\n  TextVariants,\n  Title,\n} from \"@patternfly/react-core\";\nimport {\n  AppSpeedKeyArt,\n  ExternalLink,\n} from \"@rhoas/app-services-ui-components\";\nimport type { FunctionComponent } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { KafkaInstanceCapacityTable } from \"./KafkaInstanceCapacityTable\";\nimport { LogoAWS, LogoAzure, LogoGCP } from \"./Logos/images\";\nimport { MarketingPageHero, MarketingPageSection } from \"./MarketingPage\";\n\nexport const KafkaPageV3: FunctionComponent = () => {\n  const { t } = useTranslation([\"kafkaoverview-v3\"]);\n  return (\n    <>\n      <MarketingPageHero\n        title={t(\"heroTitle\")}\n        tagLine={t(\"heroTagline\")}\n        description={t(\"heroDescription\")}\n        heroImage={AppSpeedKeyArt}\n        heroImageSize={478}\n        heroImageCanRepeat={false}\n        heroImagePositionY={-99}\n      />\n      <MarketingPageSection>\n        <Grid hasGutter lg={6}>\n          <Card\n            ouiaId=\"card-overview-purchase-now\"\n            aria-label={t(\"kafkaoverview:purchaseCardTitle\")}\n          >\n            <CardHeader>\n              <CardHeaderMain>\n                <CardTitle>\n                  <Title headingLevel=\"h2\">\n                    <Trans\n                      ns={\"kafkaoverview-v3\"}\n                      i18nKey={\"purchaseCardTitle\"}\n                    >\n                      <span className=\"pf-u-color-200 pf-u-font-size-sm\"></span>\n                    </Trans>\n                  </Title>\n                </CardTitle>\n              </CardHeaderMain>\n            </CardHeader>\n            <CardBody>{t(\"purchaseCardMainText\")}</CardBody>\n            <CardFooter>\n              <Flex spaceItems={{ default: \"spaceItems2xl\" }}>\n                <FlexItem>\n                  <ExternalLink\n                    href={\n                      \"https://marketplace.redhat.com/en-us/products/red-hat-openshift-streams-for-apache-kafka\"\n                    }\n                    testId={\"cardPurchase-buttonRH\"}\n                    className={\"pf-u-ml-md \"}\n                  >\n                    <Trans\n                      ns={\"kafkaoverview-v3\"}\n                      i18nKey={\"purchaseCardCallToActionButtonRedHat\"}\n                      components={{\n                        bold: <strong />,\n                        size: <span className=\"pf-u-font-size-lg\" />,\n                      }}\n                    />\n                  </ExternalLink>\n                </FlexItem>\n\n                <FlexItem>\n                  <ExternalLink\n                    href={\n                      \"https://aws.amazon.com/marketplace/pp/prodview-3xohcoyuwkumc\"\n                    }\n                    testId={\"cardPurchase-buttonAWS\"}\n                    className={\"pf-u-ml-md\"}\n                  >\n                    <Trans\n                      ns={\"kafkaoverview-v3\"}\n                      i18nKey={\"purchaseCardCallToActionButtonAWS\"}\n                      components={{\n                        bold: <strong />,\n                        size: <span className=\"pf-u-font-size-lg\" />,\n                      }}\n                    />\n                  </ExternalLink>\n                </FlexItem>\n              </Flex>\n            </CardFooter>\n          </Card>\n          <Card\n            ouiaId=\"card-overview-contact-sales\"\n            aria-label={t(\"kafkaoverview:contactSalesCardTitle\")}\n          >\n            <CardHeader>\n              <CardTitle>\n                <Title headingLevel=\"h2\">\n                  <Trans\n                    ns={\"kafkaoverview-v3\"}\n                    i18nKey={\"contactSalesCardTitle\"}\n                  >\n                    <span className=\"pf-u-color-200 pf-u-font-size-sm\"></span>\n                  </Trans>\n                </Title>\n              </CardTitle>\n            </CardHeader>\n            <CardBody>{t(\"contactSalesCardMainText\")}</CardBody>\n            <CardFooter>\n              <ExternalLink\n                href={\n                  \"https://www.redhat.com/en/technologies/cloud-computing/openshift/openshift-streams-for-apache-kafka#contact-us\"\n                }\n                testId={\"cardContactSales-buttonCTA\"}\n                className={\"pf-u-ml-md\"}\n              >\n                <Trans\n                  ns={\"kafkaoverview-v3\"}\n                  i18nKey={\"contactSalesCardCallToActionButton\"}\n                  components={{\n                    bold: <strong />,\n                    size: <span className=\"pf-u-font-size-lg\" />,\n                  }}\n                />\n              </ExternalLink>\n            </CardFooter>\n          </Card>\n        </Grid>\n      </MarketingPageSection>\n      <MarketingPageSection\n        className={\"kafka-overview--page-section--marketing\"}\n      >\n        <Card>\n          <CardTitle>\n            <Title headingLevel=\"h2\">{t(\"pricingModalTitle\")}</Title>\n          </CardTitle>\n          <CardBody>\n            <Flex spaceItems={{ default: \"spaceItemsXl\" }}>\n              <Flex\n                alignSelf={{ default: \"alignSelfCenter\" }}\n                justifyContent={{ default: \"justifyContentCenter\" }}\n                flex={{ default: \"flex_1\" }}\n              >\n                <FlexItem>\n                  <DescriptionList isHorizontal>\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>\n                        {t(\"steamingUnit\")}\n                      </DescriptionListTerm>\n                      <DescriptionListDescription>\n                        {t(\"streamingUnit_price\")}\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>\n                        {t(\"dataTransfer\")}\n                      </DescriptionListTerm>\n                      <DescriptionListDescription>\n                        {t(\"dataTransfer_price\")}\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>{t(\"storage\")}</DescriptionListTerm>\n                      <DescriptionListDescription>\n                        {t(\"storage_price\")}\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                  </DescriptionList>\n                </FlexItem>\n              </Flex>\n              <Divider isVertical />\n              <FlexItem flex={{ default: \"flex_1\" }}>\n                <TextContent>\n                  <Text component={TextVariants.p}>\n                    <Trans\n                      ns={\"kafkaoverview-v3\"}\n                      i18nKey={\"streamingUnitText\"}\n                      components={{ bold: <strong /> }}\n                    />\n                  </Text>\n                </TextContent>\n              </FlexItem>\n            </Flex>\n          </CardBody>\n        </Card>\n      </MarketingPageSection>\n      <MarketingPageSection\n        className={\"kafka-overview--page-section--marketing\"}\n      >\n        <Card>\n          <CardTitle>\n            <Title headingLevel=\"h2\">{t(\"kafkaInstanceCapacityTitle\")}</Title>\n          </CardTitle>\n          <CardBody>\n            <Stack hasGutter>\n              <Text component={TextVariants.p}>\n                {t(\"kafkaInstanceCapacityDescription\")}\n              </Text>\n              <KafkaInstanceCapacityTable />\n            </Stack>\n          </CardBody>\n          <CardFooter>\n            <TextContent className={\"pf-u-font-size-sm\"}>\n              <Trans\n                ns={\"kafkaoverview-v3\"}\n                i18nKey={\"kafkaInstanceCapacityfooter\"}\n                components={[\n                  <ExternalLink\n                    href={\"https://access.redhat.com/support\"}\n                    testId={\"SupportLink\"}\n                    className={\"pf-u-ml-xs\"}\n                  />,\n                  <ExternalLink\n                    href={\n                      \"https://access.redhat.com/documentation/en-us/red_hat_openshift_streams_for_apache_kafka/1/guide/aced8e5e-8229-4cb2-82f9-87a8caa24bb3\"\n                    }\n                    testId={\"MonitoringDiskSpaceLink\"}\n                    className={\"pf-u-ml-xs\"}\n                  />,\n                ]}\n              />\n            </TextContent>\n          </CardFooter>\n        </Card>\n      </MarketingPageSection>\n      <MarketingPageSection\n        className={\"kafka-overview--page-section--marketing\"}\n      >\n        <Card>\n          <CardTitle>\n            <Title headingLevel=\"h2\">{t(\"cloudProvidersTitle\")}</Title>\n          </CardTitle>\n          <CardBody>\n            <Flex\n              spaceItems={{ default: \"spaceItemsXl\" }}\n              direction={{ default: \"column\", xl: \"row\" }}\n            >\n              <Flex\n                justifyContent={{ default: \"justifyContentCenter\" }}\n                flex={{ default: \"flex_1\" }}\n              >\n                <FlexItem>\n                  <Split hasGutter>\n                    <SplitItem>\n                      <img src={LogoAWS} alt={\"\"} style={{ height: \"60px\" }} />\n                    </SplitItem>\n                    <SplitItem>\n                      <Title headingLevel=\"h2\" className={\"pf-u-pt-sm\"}>\n                        {t(\"awsWebServiceTitle\")}\n                      </Title>\n                    </SplitItem>\n                  </Split>\n                </FlexItem>\n              </Flex>\n              <Divider\n                orientation={{ default: \"horizontal\", xl: \"vertical\" }}\n              />\n              <Flex\n                justifyContent={{ default: \"justifyContentCenter\" }}\n                flex={{ default: \"flex_1\" }}\n              >\n                <FlexItem>\n                  <Split hasGutter>\n                    <SplitItem>\n                      <img src={LogoGCP} alt={\"\"} style={{ height: \"60px\" }} />\n                    </SplitItem>\n                    <SplitItem>\n                      <Title headingLevel=\"h2\" className={\"pf-u-pt-sm\"}>\n                        {t(\"googleCloudProviderTitle\")}\n                      </Title>\n                      <Text\n                        component={TextVariants.p}\n                        className={\"pf-u-color-200\"}\n                      >\n                        {t(\"googleCloudProviderDescription\")}\n                      </Text>\n                    </SplitItem>\n                  </Split>\n                </FlexItem>\n              </Flex>\n              <Divider\n                orientation={{ default: \"horizontal\", xl: \"vertical\" }}\n              />\n              <Flex\n                justifyContent={{ default: \"justifyContentCenter\" }}\n                flex={{ default: \"flex_1\" }}\n              >\n                <FlexItem>\n                  <Split hasGutter>\n                    <SplitItem>\n                      <img\n                        src={LogoAzure}\n                        alt={\"\"}\n                        style={{ height: \"60px\" }}\n                      />\n                    </SplitItem>\n                    <SplitItem>\n                      <Title headingLevel=\"h2\" className={\"pf-u-pt-sm\"}>\n                        {t(\"microsoftAzureTitle\")}\n                      </Title>\n                      <Text\n                        component={TextVariants.p}\n                        className={\"pf-u-color-200\"}\n                      >\n                        {t(\"microsoftAzureDescription\")}\n                      </Text>\n                    </SplitItem>\n                  </Split>\n                </FlexItem>\n              </Flex>\n            </Flex>\n          </CardBody>\n        </Card>\n      </MarketingPageSection>\n    </>\n  );\n};\n","import {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { PlusCircleIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nexport type EmptyStateNoTopicProps = {\n  onCreateTopic: () => void;\n};\n\nexport const EmptyStateNoTopic: VoidFunctionComponent<\n  EmptyStateNoTopicProps\n> = ({ onCreateTopic }) => {\n  const { t } = useTranslation(\"topic\");\n\n  return (\n    <EmptyState\n      data-ouia-page-id=\"emptyStateTopics\"\n      variant={EmptyStateVariant.large}\n    >\n      <EmptyStateIcon icon={PlusCircleIcon} />\n      <Title headingLevel=\"h2\" size=\"lg\">\n        {t(\"empty_topics_title\")}\n      </Title>\n      <EmptyStateBody>{t(\"empty_topics_body\")}</EmptyStateBody>\n      <Button\n        data-testid=\"actionCreateTopic\"\n        ouiaId=\"button-create\"\n        variant=\"primary\"\n        onClick={onCreateTopic}\n      >\n        {t(\"create_topic\")}\n      </Button>\n    </EmptyState>\n  );\n};\n","import type { ResourceOperationValue } from \"./components/ResourceOperation\";\nimport type { ResourcePermissionValue } from \"./components/ResourcePermission\";\nimport type { ResourcePrefixRuleValue } from \"./components/ResourcePrefixRule\";\nimport type { ResourceTypeValue } from \"./components/ResourceType\";\n\nexport type AclOperation =\n  | \"ALL\"\n  | \"READ\"\n  | \"WRITE\"\n  | \"CREATE\"\n  | \"DELETE\"\n  | \"ALTER\"\n  | \"DESCRIBE\"\n  | \"DESCRIBE_CONFIGS\"\n  | \"ALTER_CONFIGS\";\n\nexport type AclResourceType =\n  | \"GROUP\"\n  | \"TOPIC\"\n  | \"CLUSTER\"\n  | \"TRANSACTIONAL_ID\";\n\nexport type AclPatternType = \"LITERAL\" | \"PREFIXED\";\n\nexport type AclPermissionType = \"ALLOW\" | \"DENY\";\n\nexport interface AclBinding {\n  /**\n   *\n   * @type {AclResourceType}\n   * @memberof AclBinding\n   */\n  resourceType: AclResourceType;\n  /**\n   *\n   * @type {string}\n   * @memberof AclBinding\n   */\n  resourceName: string;\n  /**\n   *\n   * @type {AclPatternType}\n   * @memberof AclBinding\n   */\n  patternType: AclPatternType;\n  /**\n   * Identifies the user or service account to which an ACL entry is bound. The literal prefix value of `User:` is required. May be used to specify all users with value `User:*`.\n   * @type {string}\n   * @memberof AclBinding\n   */\n  principal: string;\n  /**\n   *\n   * @type {AclOperation}\n   * @memberof AclBinding\n   */\n  operation: AclOperation;\n  /**\n   *\n   * @type {AclPermissionType}\n   * @memberof AclBinding\n   */\n  permission: AclPermissionType;\n}\nexport type AclTablePermissionsType = {\n  permission: AclPermissionType;\n  operation: AclOperation;\n};\nexport type AclTableResourceType = {\n  resourceType: AclResourceType;\n  resourceName: string;\n  patternType: AclPatternType;\n};\nexport type Permissions = {\n  account: string;\n  permission: AclTablePermissionsType;\n  resource: AclTableResourceType;\n};\nexport enum PrincipalType {\n  UserAccount = \"USER_ACCOUNT\",\n  ServiceAccount = \"SERVICE_ACCOUNT\",\n}\n\nexport type Account = {\n  id: string;\n  principalType: PrincipalType;\n  displayName: string;\n  email?: string;\n};\n\ntype ManualAcl = {\n  resourceType: ResourceTypeValue | undefined;\n  resourcePrefix: ResourcePrefixRuleValue;\n  resourceName: string | undefined;\n  resourcePermission: ResourcePermissionValue;\n  resourceOperation: ResourceOperationValue | undefined;\n};\n\ntype ProduceTopicTemplate = {\n  prefixRuleValue: ResourcePrefixRuleValue;\n  resourceNameValue: string | undefined;\n};\n\ntype ConsumeTopicTemplate = {\n  consumerResourceName: string | undefined;\n  consumerResourcePrefixRule: ResourcePrefixRuleValue;\n  topicResourceName: string | undefined;\n  topicResourcePrefixRule: ResourcePrefixRuleValue;\n};\n\ntype ManageAccessTemplate = {\n  instanceName: string;\n};\nexport type AddAclType =\n  | ({ type: \"manual\" } & ManualAcl)\n  | ({ type: \"consume-topic\" } & ConsumeTopicTemplate)\n  | ({ type: \"produce-topic\" } & ProduceTopicTemplate)\n  | ({ type: \"manage-access\" } & ManageAccessTemplate);\n\nexport const createEmptyManualAcl = (): AddAclType => {\n  return {\n    type: \"manual\",\n    resourceName: undefined,\n    resourceType: undefined,\n    resourceOperation: undefined,\n    resourcePrefix: \"Is\",\n    resourcePermission: \"allow\",\n  };\n};\nexport const createEmptyProduceTopicAcl = (): AddAclType => {\n  return {\n    type: \"produce-topic\",\n    prefixRuleValue: \"Is\",\n    resourceNameValue: undefined,\n  };\n};\nexport const createEmptyConsumeTopicAcl = (): AddAclType => {\n  return {\n    type: \"consume-topic\",\n    consumerResourceName: undefined,\n    consumerResourcePrefixRule: \"Is\",\n    topicResourceName: undefined,\n    topicResourcePrefixRule: \"Is\",\n  };\n};\nexport const createEmptyManageAccessAcl = (kafkaName: string): AddAclType => {\n  return {\n    type: \"manage-access\",\n    instanceName: kafkaName,\n  };\n};\n","import { Button, PageSection } from \"@patternfly/react-core\";\nimport { TableVariant } from \"@patternfly/react-table\";\nimport type { TableViewProps } from \"@rhoas/app-services-ui-components\";\nimport {\n  EmptyStateNoResults,\n  TableView,\n} from \"@rhoas/app-services-ui-components\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport type { Topic, TopicField } from \"ui-models/src/models/topic\";\nimport { useTopicLabels } from \"../../hooks\";\nimport type { EmptyStateNoTopicProps } from \"./components\";\nimport { EmptyStateNoTopic } from \"./components\";\nimport { formattedRetentionSize, formattedRetentionTime } from \"./types\";\n\ntype SubUnion<T, U extends T> = U;\n\nconst Columns: SubUnion<\n  TopicField,\n  \"name\" | \"partitions\" | \"retention.ms\" | \"retention.bytes\"\n>[] = [\"name\", \"partitions\", \"retention.ms\", \"retention.bytes\"];\n\nexport type KafkaTopicsProps<T extends Topic> = {\n  topics: Array<T> | undefined;\n  getUrlFortopic: (row: T) => string;\n  onDelete: (row: T) => void;\n  onEdit: (row: T) => void;\n  topicName: string[];\n  onSearchTopic: (value: string) => void;\n  onRemoveTopicChip: (value: string) => void;\n  onRemoveTopicChips: () => void;\n  onTopicLinkClick: (row: T) => void;\n} & Pick<\n  TableViewProps<T, typeof Columns[number]>,\n  | \"itemCount\"\n  | \"page\"\n  | \"perPage\"\n  | \"onPageChange\"\n  | \"isRowSelected\"\n  | \"isColumnSortable\"\n  | \"onClearAllFilters\"\n> &\n  EmptyStateNoTopicProps;\n\nexport const KafkaTopics = <T extends Topic>({\n  topics,\n  onDelete,\n  onEdit,\n  isColumnSortable,\n  itemCount,\n  onSearchTopic,\n  topicName,\n  onClearAllFilters,\n  onCreateTopic,\n  page,\n  perPage,\n  onPageChange,\n  onRemoveTopicChip,\n  onRemoveTopicChips,\n  getUrlFortopic,\n  onTopicLinkClick,\n}: KafkaTopicsProps<T>) => {\n  const { t } = useTranslation(\"topic\");\n\n  const labels = useTopicLabels();\n\n  const isFiltered = topicName.length > 0;\n  return (\n    <PageSection isFilled={true} hasOverflowScroll={true} aria-label={\"TODO\"}>\n      <TableView\n        variant={TableVariant.compact}\n        tableOuiaId={\"card-table\"}\n        ariaLabel={t(\"topic_list_table\")}\n        data={topics}\n        columns={Columns}\n        renderHeader={({ column, Th, key }) => (\n          <Th key={key}>{labels.fields[column]}</Th>\n        )}\n        renderCell={({ column, row, Td, key }) => {\n          return (\n            <Td key={key} dataLabel={labels.fields[column]}>\n              {(() => {\n                switch (column) {\n                  case \"name\":\n                    return (\n                      <Button\n                        variant=\"link\"\n                        component={(props) => (\n                          <Link\n                            to={getUrlFortopic(row)}\n                            {...props}\n                            data-testid=\"tableTopics-linkTopic\"\n                            data-ouia-component-id=\"table-link\"\n                          >\n                            {row.name}\n                          </Link>\n                        )}\n                        onClick={() => onTopicLinkClick(row)}\n                        isInline\n                      />\n                    );\n                  case \"partitions\":\n                    return row.partitions.length;\n                  case \"retention.ms\":\n                    return formattedRetentionTime(row[\"retention.ms\"].value);\n                  case \"retention.bytes\":\n                    return formattedRetentionSize(row[\"retention.bytes\"].value);\n                }\n              })()}\n            </Td>\n          );\n        }}\n        renderActions={({ row, ActionsColumn }) => (\n          <ActionsColumn\n            items={[\n              {\n                title: t(\"table.actions.edit\"),\n                onClick: () => onEdit(row),\n              },\n              {\n                title: t(\"table.actions.delete\"),\n                onClick: () => onDelete(row),\n              },\n            ]}\n          />\n        )}\n        isColumnSortable={isColumnSortable}\n        filters={{\n          [labels.fields.name]: {\n            type: \"search\",\n            chips: topicName,\n            onSearch: onSearchTopic,\n            onRemoveChip: onRemoveTopicChip,\n            onRemoveGroup: onRemoveTopicChips,\n            validate: (value: string) => !/[\"$^<>|+%/;:,\\s*=~#()]/.test(value),\n            errorMessage: t(\"input_field_invalid_message\"),\n          },\n        }}\n        actions={[\n          {\n            label: t(\"create_topic\"),\n            onClick: onCreateTopic,\n            isPrimary: true,\n          },\n        ]}\n        itemCount={itemCount}\n        page={page}\n        onPageChange={onPageChange}\n        perPage={perPage}\n        isFiltered={isFiltered}\n        onClearAllFilters={onClearAllFilters}\n        emptyStateNoData={<EmptyStateNoTopic onCreateTopic={onCreateTopic} />}\n        emptyStateNoResults={<EmptyStateNoResults />}\n      />\n    </PageSection>\n  );\n};\n","import type { CardKafkaInstanceMetricsLimits } from \"./components\";\n\nexport type TimeSeriesMetrics = { [timestamp: string]: number };\nexport type PartitionBytesMetric = { [partition: string]: TimeSeriesMetrics };\n\nexport enum DurationOptions {\n  Last5minutes = 5,\n  Last15minutes = 15,\n  Last30minutes = 30,\n  Last1hour = 60,\n  Last3hours = 3 * 60,\n  Last6hours = 6 * 60,\n  Last12hours = 12 * 60,\n  Last24hours = 24 * 60,\n  Last2days = 2 * 24 * 60,\n  Last7days = 7 * 24 * 60,\n}\n\nexport type GetTopicsMetricsResponse = {\n  kafkaTopics: string[];\n  metricsTopics: string[];\n  bytesOutgoing: TimeSeriesMetrics;\n  bytesIncoming: TimeSeriesMetrics;\n  bytesPerPartition: PartitionBytesMetric;\n  incomingMessageRate: TimeSeriesMetrics;\n};\n\nexport type GetKafkaInstanceMetricsResponse = {\n  usedDiskSpaceMetrics: TimeSeriesMetrics;\n  clientConnectionsMetrics: TimeSeriesMetrics;\n  connectionAttemptRateMetrics: TimeSeriesMetrics;\n} & CardKafkaInstanceMetricsLimits;\n\nexport type GetMetricsKpiResponse = {\n  topics: number;\n  topicPartitions: number;\n  consumerGroups: number;\n  topicPartitionsLimit: number;\n};\n","import type { MenuProps } from \"@patternfly/react-core\";\nimport {\n  Divider,\n  Dropdown,\n  DropdownToggle,\n  DropdownToggleAction,\n  Menu,\n  MenuContent,\n  MenuGroup,\n  MenuItem,\n  MenuList,\n  Popper,\n} from \"@patternfly/react-core\";\nimport type {\n  MouseEvent as ReactMouseEvent,\n  VoidFunctionComponent,\n} from \"react\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nexport type PermissionsDropdownProps = {\n  onAddPermission: () => void;\n  onShortcutConsumeTopic: () => void;\n  onShortcutProduceTopic: () => void;\n  onShortcutManageAccess: () => void;\n};\n\nexport const PermissionsDropdown: VoidFunctionComponent<\n  PermissionsDropdownProps\n> = ({\n  onAddPermission,\n  onShortcutConsumeTopic,\n  onShortcutProduceTopic,\n  onShortcutManageAccess,\n}) => {\n  const { t } = useTranslation([\"manage-kafka-permissions\"]);\n\n  const [isOpen, setIsOpen] = useState(false);\n  useState<string | number | undefined>(0);\n\n  const menuRef = useRef<HTMLDivElement>(null);\n\n  const handleMenuKeys = useCallback(\n    (event: KeyboardEvent) => {\n      if (\n        isOpen &&\n        menuRef.current &&\n        event.target &&\n        menuRef.current.contains(event.target as Node)\n      ) {\n        if (event.key === \"Escape\" || event.key === \"Tab\") {\n          setIsOpen(!isOpen);\n        }\n      }\n    },\n    [isOpen]\n  );\n\n  const handleClickOutside = useCallback(\n    (event: MouseEvent) => {\n      if (\n        isOpen &&\n        menuRef.current &&\n        !menuRef.current.contains(event.target as Node)\n      ) {\n        setIsOpen(false);\n      }\n    },\n    [isOpen]\n  );\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", handleMenuKeys);\n    window.addEventListener(\"click\", handleClickOutside);\n\n    return () => {\n      window.removeEventListener(\"keydown\", handleMenuKeys);\n      window.removeEventListener(\"click\", handleClickOutside);\n    };\n  }, [handleClickOutside, handleMenuKeys, isOpen, menuRef]);\n\n  const onToggleClick = useCallback((open: boolean, ev: ReactMouseEvent) => {\n    ev.stopPropagation(); // Stop handleClickOutside from handling\n    setTimeout(() => {\n      if (menuRef.current) {\n        const firstElement = menuRef.current.querySelector(\n          \"li > button,input:not(:disabled)\"\n        );\n        firstElement && (firstElement as HTMLElement).focus();\n      }\n    }, 0);\n    setIsOpen(open);\n  }, []);\n\n  const handleSelect: MenuProps[\"onSelect\"] = (_event, itemId) => {\n    setIsOpen(false);\n    switch (itemId) {\n      case \"add_permission\":\n        onAddPermission();\n        break;\n      case \"shortcut_consume_topic\":\n        onShortcutConsumeTopic();\n        break;\n      case \"shortcut_produce_topic\":\n        onShortcutProduceTopic();\n        break;\n      case \"shortcut_manage_access\":\n        onShortcutManageAccess();\n        break;\n    }\n  };\n\n  const onActionClick = (\n    event: ReactMouseEvent<HTMLButtonElement, MouseEvent>\n  ) => {\n    event.preventDefault();\n    onAddPermission();\n  };\n\n  const menu = (\n    <Menu onSelect={handleSelect} key=\"acls-menu\" ref={menuRef}>\n      <MenuContent>\n        <MenuList>\n          <MenuGroup>\n            <MenuList>\n              <MenuItem itemId={\"add_permission\"}>\n                {t(\"permissions_dropdown.add_permission\")}\n              </MenuItem>\n            </MenuList>\n          </MenuGroup>\n\n          <Divider />\n          <MenuGroup label={t(\"permissions_dropdown.task_based_permission\")}>\n            <MenuList>\n              <MenuItem\n                itemId={\"shortcut_consume_topic\"}\n                description={t(\n                  \"permissions_dropdown.shortcut_consume_topic_description\"\n                )}\n              >\n                {t(\"permissions_dropdown.shortcut_consume_topic\")}\n              </MenuItem>\n              <MenuItem\n                itemId={\"shortcut_produce_topic\"}\n                description={t(\n                  \"permissions_dropdown.shortcut_produce_topic_description\"\n                )}\n              >\n                {t(\"permissions_dropdown.shortcut_produce_topic\")}\n              </MenuItem>\n              <MenuItem\n                itemId={\"shortcut_manage_access\"}\n                description={t(\n                  \"permissions_dropdown.shortcut_manage_access_description\"\n                )}\n              >\n                {t(\"permissions_dropdown.shortcut_manage_access\")}\n              </MenuItem>\n            </MenuList>\n          </MenuGroup>\n        </MenuList>\n      </MenuContent>\n    </Menu>\n  );\n\n  const toggle = (\n    <Dropdown\n      toggle={\n        <DropdownToggle\n          data-testid={\"permissions-dropdown-toggle\"}\n          splitButtonItems={[\n            <DropdownToggleAction\n              key=\"cog-action\"\n              aria-label={t(\"permissions_dropdown.add_permission\")}\n              onClick={onActionClick}\n            >\n              {t(\"permissions_dropdown.add_permission\")}\n            </DropdownToggleAction>,\n          ]}\n          splitButtonVariant=\"action\"\n          onToggle={onToggleClick}\n        />\n      }\n    />\n  );\n\n  return (\n    <Popper\n      trigger={toggle}\n      popper={menu}\n      isVisible={isOpen}\n      popperMatchesTriggerWidth={false}\n    />\n  );\n};\n","import type { VFC } from \"react\";\nimport type { LabelProps } from \"@patternfly/react-core\";\nimport { Label } from \"@patternfly/react-core\";\nimport type { AclResourceType } from \"../types\";\nimport \"./ResourceTypeLabel.css\";\n\nexport type SolidLabelProps = {\n  variant: AclResourceType;\n};\n\ntype Variant = {\n  labelColor: LabelProps[\"color\"];\n  content: string;\n};\n\nexport const ResourceTypeLabel: VFC<SolidLabelProps> = ({ variant }) => {\n  const getVariant = (): Variant => {\n    switch (variant) {\n      case \"GROUP\":\n        return { labelColor: \"green\", content: \"G\" };\n      case \"CLUSTER\":\n        return { labelColor: \"grey\", content: \"KI\" };\n      case \"TOPIC\":\n        return { labelColor: \"blue\", content: \"T\" };\n      case \"TRANSACTIONAL_ID\":\n        return { labelColor: \"orange\", content: \"TI\" };\n    }\n  };\n\n  const { labelColor, content } = getVariant() || {};\n\n  return (\n    <Label isCompact color={labelColor} className={`mas-m-solid`}>\n      {content}\n    </Label>\n  );\n};\n","import type { FunctionComponent, VFC } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { Label, LabelGroup, Tooltip } from \"@patternfly/react-core\";\n\nimport type {\n  Account,\n  AclOperation,\n  AclPatternType,\n  AclPermissionType,\n  AclResourceType,\n} from \"../types\";\nimport { ResourceTypeLabel } from \"./ResourceTypeLabel\";\nimport { RemoveButton } from \"@rhoas/app-services-ui-components\";\nimport { InfoCircleIcon } from \"@patternfly/react-icons\";\nimport { PrincipalType } from \"..\";\n\nexport const DisplayResourceName: VFC<{ resourceType: AclResourceType }> = ({\n  resourceType,\n}) => {\n  const { t } = useTranslation([\"manage-kafka-permissions\"]);\n\n  switch (resourceType) {\n    case \"GROUP\":\n      return t(\"resourceTypes.consumer_group\");\n    case \"TOPIC\":\n      return t(\"resourceTypes.topic\");\n    case \"CLUSTER\":\n      return t(\"resourceTypes.kafka_instance\");\n    case \"TRANSACTIONAL_ID\":\n      return t(\"resourceTypes.transactional_id\");\n  }\n};\n\nconst PatternType: VFC<{ patternType: AclPatternType }> = ({ patternType }) => {\n  const { t } = useTranslation([\"manage-kafka-permissions\"]);\n  if (patternType === \"PREFIXED\") {\n    return t(\"pattern_type_prefixed\");\n  } else {\n    return t(\"pattern_type_literal\");\n  }\n};\n\nexport type ResourceCellProps = {\n  resourceType: AclResourceType;\n  patternType: AclPatternType;\n  resourceName: string;\n};\n\nexport const ResourceCell: FunctionComponent<ResourceCellProps> = ({\n  resourceType,\n  patternType,\n  resourceName,\n}) => {\n  if (resourceType === \"CLUSTER\") {\n    return (\n      <>\n        <ResourceTypeLabel variant={resourceType} />{\" \"}\n        <DisplayResourceName resourceType={resourceType} />\n      </>\n    );\n  }\n\n  return (\n    <>\n      <ResourceTypeLabel variant={resourceType} />{\" \"}\n      <DisplayResourceName resourceType={resourceType} />{\" \"}\n      <PatternType patternType={patternType} /> \"{resourceName}\"\n    </>\n  );\n};\n\nexport type PermissionOperationCellProps = {\n  permission: AclPermissionType;\n  operation: AclOperation | AclOperation[];\n};\n\nexport const PermissionOperationCell: FunctionComponent<\n  PermissionOperationCellProps\n> = ({ permission, operation }) => {\n  const { t } = useTranslation(\"manage-kafka-permissions\");\n  const permissions: { [key in AclPermissionType]: string } = {\n    ALLOW: t(\"permissions.allow\"),\n    DENY: t(\"permissions.deny\"),\n  };\n  const operations: { [key in AclOperation]: string } = {\n    ALL: t(\"operations.all\"),\n    READ: t(\"operations.read\"),\n    WRITE: t(\"operations.write\"),\n    CREATE: t(\"operations.create\"),\n    DELETE: t(\"operations.delete\"),\n    ALTER: t(\"operations.alter\"),\n    DESCRIBE: t(\"operations.describe\"),\n    DESCRIBE_CONFIGS: t(\"operations.describe_configs\"),\n    ALTER_CONFIGS: t(\"operations.alter_configs\"),\n  };\n  return (\n    <LabelGroup numLabels={4}>\n      {permission && (\n        <Label\n          variant=\"outline\"\n          color={permission === \"DENY\" ? \"red\" : undefined}\n        >\n          {permissions[permission]}\n        </Label>\n      )}\n      {Array.isArray(operation) ? (\n        operation.map((value, key) => (\n          <Label key={key} variant=\"outline\">\n            {operations[value]}\n          </Label>\n        ))\n      ) : (\n        <Label variant=\"outline\">{operations[operation]}</Label>\n      )}\n    </LabelGroup>\n  );\n};\n\nexport type PrincipalCellProps = {\n  isDeleteEnabled: boolean;\n  isAllAccounts?: boolean;\n  onRemoveAcl?: () => void;\n  isReviewTable?: boolean;\n  principal?: string;\n  allAccounts?: Account;\n};\n\nexport const PrincipalCell: VFC<PrincipalCellProps> = ({\n  isDeleteEnabled,\n  isAllAccounts,\n  onRemoveAcl,\n  isReviewTable = true,\n  principal,\n  allAccounts,\n}) => {\n  const { t } = useTranslation([\"manage-kafka-permissions\"]);\n\n  const principalWithTooltip = () => {\n    return allAccounts?.principalType == PrincipalType.ServiceAccount &&\n      !isReviewTable ? (\n      <Tooltip\n        content={\n          <div>\n            Type: {allAccounts && allAccounts.principalType} <br />\n          </div>\n        }\n      >\n        <span tabIndex={0}>\n          {\" \"}\n          {principal?.split(\":\")[1]} <InfoCircleIcon color=\"grey\" />\n        </span>\n      </Tooltip>\n    ) : (\n      !isReviewTable && (\n        <Tooltip\n          content={\n            <div>\n              Type: {allAccounts?.principalType} <br />\n              Name: {allAccounts?.displayName} <br />\n              Email: {allAccounts?.email}\n            </div>\n          }\n        >\n          <span tabIndex={0}>\n            {principal?.split(\":\")[1]} <InfoCircleIcon color=\"grey\" />\n          </span>\n        </Tooltip>\n      )\n    );\n  };\n\n  return (\n    <div\n      className={\n        isReviewTable\n          ? \"pf-u-display-flex pf-u-justify-content-space-between pf-u-justify-content-flex-end-on-lg pf-u-align-items-center\"\n          : \"\"\n      }\n    >\n      {isAllAccounts && isReviewTable ? (\n        <Label variant=\"outline\">{t(\"table.all_accounts\")}</Label>\n      ) : !isReviewTable && principal == \"User:*\" ? (\n        <Label variant={\"outline\"}>{t(\"table.all_accounts\")}</Label>\n      ) : (\n        principalWithTooltip()\n      )}\n\n      {isDeleteEnabled && onRemoveAcl != undefined && (\n        <RemoveButton\n          variant=\"link\"\n          tooltip={t(\"remove_permission_tooltip\")}\n          onClick={onRemoveAcl}\n          ariaLabel={t(\"operations.delete\")}\n        />\n      )}\n    </div>\n  );\n};\n","import {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { SearchIcon } from \"@patternfly/react-icons\";\nimport type React from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nexport type PermissionsTableEmptyStateProps = {\n  openManagePermissions: () => void;\n};\nexport const PermissionsTableEmptyState: React.FunctionComponent<\n  PermissionsTableEmptyStateProps\n> = ({ openManagePermissions }) => {\n  const { t } = useTranslation(\"manage-kafka-permissions\");\n  return (\n    <EmptyState\n      data-ouia-page-id=\"emptyStateTopics\"\n      variant={EmptyStateVariant.large}\n    >\n      <EmptyStateIcon icon={SearchIcon} />\n      <Title headingLevel=\"h2\" size=\"lg\">\n        {t(\"no_results_title\")}\n      </Title>\n      <EmptyStateBody>{t(\"no_results_body\")}</EmptyStateBody>\n      <Button\n        data-testid=\"actionManagePermissions\"\n        ouiaId=\"button-manage-permissions\"\n        variant=\"primary\"\n        onClick={openManagePermissions}\n      >\n        {t(\"dialog_title\")}\n      </Button>\n    </EmptyState>\n  );\n};\n","import { TableVariant } from \"@patternfly/react-table\";\nimport type { TableViewProps } from \"@rhoas/app-services-ui-components\";\nimport { TableView } from \"@rhoas/app-services-ui-components\";\nimport { useTranslation } from \"react-i18next\";\nimport type { Account, Permissions } from \"../types\";\nimport { PrincipalCell, PermissionOperationCell, ResourceCell } from \"./Cells\";\nimport { useEffect, useState } from \"react\";\nimport { PageSection } from \"@patternfly/react-core\";\nimport { PermissionsTableEmptyState } from \"./EmptyPermissionsTable\";\n\ntype SubUnion<T, U extends T> = U;\nexport type PermissionsField = keyof Permissions;\nconst Columns: SubUnion<\n  PermissionsField,\n  \"account\" | \"permission\" | \"resource\"\n>[] = [\"account\", \"permission\", \"resource\"];\n\nexport type PermissionsTableProps<T extends Permissions> = {\n  allAccounts: Account[] | undefined;\n  permissions: Array<T> | undefined;\n  onDelete: (rowIndex: number) => void;\n  onDeleteSelected: (rowIndex: number[]) => void;\n  onManagePermissions: () => void;\n  onManagePermissionsActionItem: (account: string) => void;\n  onPerPageChange: (page: number, perPage: number) => void;\n} & Pick<\n  TableViewProps<T, (typeof Columns)[number]>,\n  | \"itemCount\"\n  | \"page\"\n  | \"perPage\"\n  | \"onPageChange\"\n  | \"isRowSelected\"\n  | \"onClearAllFilters\"\n>;\n\nexport const PermissionsTable = <T extends Permissions>({\n  allAccounts,\n  permissions,\n  onDelete,\n  itemCount,\n  page,\n  perPage,\n  onDeleteSelected,\n  onPageChange,\n  onManagePermissions,\n  onManagePermissionsActionItem,\n}: PermissionsTableProps<T>) => {\n  const { t } = useTranslation(\"manage-kafka-permissions\");\n  const [checkedRows, setCheckedRows] = useState<number[]>([]);\n\n  useEffect(() => {\n    //Only clear all the checked row when they are deleted\n    setCheckedRows([]);\n  }, [permissions]);\n\n  const labels: { [field in (typeof Columns)[number]]: string } = {\n    account: t(\"account_id_title\"),\n    permission: t(\"table.permissions_column_title\"),\n    resource: t(\"table.resource_column_title\"),\n  };\n  const onCheck = (isSelecting: boolean, rowIndex: number) => {\n    if (rowIndex != undefined) {\n      setCheckedRows(\n        isSelecting\n          ? [...checkedRows, rowIndex]\n          : checkedRows.filter((row) => row !== rowIndex)\n      );\n    }\n  };\n\n  const isRowChecked = (rowIndex: number) => {\n    return checkedRows.includes(rowIndex);\n  };\n\n  const onBulkDelete = () => {\n    onDeleteSelected(checkedRows);\n  };\n\n  return (\n    <PageSection hasOverflowScroll={true}>\n      <TableView\n        variant={TableVariant.compact}\n        tableOuiaId={\"card-table\"}\n        ariaLabel={t(\"consumerGroup.consumer_group_list\")}\n        actions={[\n          {\n            onClick: onManagePermissions,\n            label: t(\"dialog_title\"),\n            isPrimary: true,\n          },\n        ]}\n        kebabActions={[\n          {\n            onClick: onBulkDelete,\n            label: t(\"delete_selected\"),\n            isDisabled: checkedRows.length > 0 ? false : true,\n          },\n        ]}\n        data={permissions}\n        columns={Columns}\n        onCheck={onCheck}\n        isRowChecked={({ rowIndex }) => isRowChecked(rowIndex)}\n        renderHeader={({ column, Th, key }) => (\n          <Th key={key}>{labels[column]}</Th>\n        )}\n        renderCell={({ column, row, Td, key }) => {\n          return (\n            <Td key={key} dataLabel={labels[column]}>\n              {(() => {\n                switch (column) {\n                  case \"account\":\n                    return (\n                      <PrincipalCell\n                        isReviewTable={false}\n                        principal={row.account}\n                        isDeleteEnabled={false}\n                        allAccounts={\n                          allAccounts?.filter(\n                            (value) => `User:${value.id}` == row.account\n                          )[0]\n                        }\n                      />\n                    );\n                  case \"permission\":\n                    return (\n                      <PermissionOperationCell\n                        permission={row.permission.permission}\n                        operation={row.permission.operation}\n                      />\n                    );\n                  case \"resource\":\n                    return (\n                      <ResourceCell\n                        patternType={row.resource.patternType}\n                        resourceType={row.resource.resourceType}\n                        resourceName={row.resource.resourceName}\n                      />\n                    );\n                }\n              })()}\n            </Td>\n          );\n        }}\n        renderActions={({ ActionsColumn, rowIndex, row }) => (\n          <ActionsColumn\n            items={[\n              {\n                title: t(\"manage\"),\n                onClick: () =>\n                  onManagePermissionsActionItem(\n                    row.account == \"User:*\"\n                      ? \"all-accounts\"\n                      : row.account?.split(\":\")[1]\n                  ),\n              },\n              {\n                title: t(\"common:delete\"),\n                onClick: () => onDelete(rowIndex),\n              },\n            ]}\n          />\n        )}\n        itemCount={itemCount}\n        page={page}\n        onPageChange={onPageChange}\n        perPage={perPage}\n        emptyStateNoData={\n          <PermissionsTableEmptyState\n            openManagePermissions={onManagePermissions}\n          />\n        }\n        emptyStateNoResults={\n          <PermissionsTableEmptyState\n            openManagePermissions={onManagePermissions}\n          />\n        }\n      />\n    </PageSection>\n  );\n};\n","import type React from \"react\";\nimport { useLayoutEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport type { Account } from \"../types\";\nimport { PrincipalType } from \"../types\";\nimport type { SelectProps } from \"@patternfly/react-core\";\nimport { Button, Form, Modal } from \"@patternfly/react-core\";\nimport { Skeleton } from \"@patternfly/react-core\";\nimport { FormGroup, Popover } from \"@patternfly/react-core\";\nimport {\n  Divider,\n  Select,\n  SelectGroup,\n  SelectOption,\n  SelectVariant,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { HelpIcon } from \"@patternfly/react-icons\";\n\nexport type SelectAccountProps = {\n  accounts: Account[] | undefined;\n  initialOpen?: boolean;\n  kafkaName: string;\n  id?: string;\n  onNext: (selectedAccount: string | undefined) => void;\n  onClose: () => void;\n};\n\nexport const SelectAccount: React.VFC<SelectAccountProps> = ({\n  accounts,\n  initialOpen = false,\n  kafkaName,\n  id,\n  onNext,\n  onClose,\n}) => {\n  const { t } = useTranslation([\"manage-kafka-permissions\"]);\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const [isDirty, setIsDirty] = useState<boolean>(false);\n  const [selectedAccount, setSelectedAccount] = useState<string>();\n\n  // for Storybook, allows opening the select programmatically respecting the initialization needed by the modal and Popper.js\n  useLayoutEffect(() => setIsOpen(initialOpen), [initialOpen]);\n\n  const onToggle = (newState: boolean) => {\n    setIsOpen(newState);\n  };\n\n  const clearSelection = () => {\n    setSelectedAccount(undefined);\n    setIsDirty(true);\n    setIsOpen(false);\n  };\n\n  const noServiceAccounts = [\n    <SelectOption\n      isNoResultsOption={true}\n      isDisabled={true}\n      key={t(\"no_results_found\")}\n    >\n      {t(\"no_results_found\")}\n    </SelectOption>,\n  ];\n  const noUserAccounts = [\n    <SelectOption\n      isNoResultsOption={true}\n      isDisabled={true}\n      key={\"no_user_accounts\"}\n    >\n      {t(\"no_results_found\")}\n    </SelectOption>,\n  ];\n\n  function makeOptions(filterValue = \"\") {\n    const filter = filterValue.toLowerCase();\n    const filteredAccounts =\n      filter !== \"\"\n        ? accounts?.filter(\n            (principal) =>\n              principal.displayName.toLowerCase().includes(filter) ||\n              principal.id.includes(filter)\n          )\n        : accounts;\n\n    const serviceAccountOptions = filteredAccounts\n      ?.filter(\n        (principal) => principal.principalType === PrincipalType.ServiceAccount\n      )\n      .sort((a, b) =>\n        a.displayName && b.displayName\n          ? a.displayName.localeCompare(b.displayName)\n          : -1\n      )\n      .map((principal, index) => (\n        <SelectOption\n          key={index}\n          value={principal.id}\n          description={principal.displayName}\n        >\n          {principal.id}\n        </SelectOption>\n      ));\n\n    const userAccountOperations = filteredAccounts\n      ?.filter(\n        (principal) => principal.principalType === PrincipalType.UserAccount\n      )\n      .map((principal, index) => (\n        <SelectOption\n          key={index}\n          value={principal.id}\n          description={principal.displayName}\n        >\n          {principal.id}\n        </SelectOption>\n      ));\n\n    return [\n      <SelectGroup key=\"all_accounts_group\">\n        <SelectOption\n          key={t(\"all_accounts_title\")}\n          value={t(\"all_accounts_title\")}\n          description={t(\"all_accounts_description\")}\n        >\n          {t(\"all_accounts_title\")}\n        </SelectOption>\n      </SelectGroup>,\n\n      <Divider key=\"all_accounts_divider\" />,\n      <SelectGroup\n        label={t(\"all_accounts_service_account_group\")}\n        key=\"service_accounts_group\"\n      >\n        {serviceAccountOptions?.length\n          ? serviceAccountOptions\n          : noServiceAccounts}\n      </SelectGroup>,\n      <Divider key=\"user_account_divider2\" />,\n      <SelectGroup\n        label={t(\"all_accounts_user_account_group\")}\n        key=\"user_accounts_group\"\n      >\n        {userAccountOperations?.length ? userAccountOperations : noUserAccounts}\n      </SelectGroup>,\n    ];\n  }\n\n  const onSelect: SelectProps[\"onSelect\"] = (_, value) => {\n    setSelectedAccount(value as string);\n    setIsDirty(false);\n    setIsOpen(false);\n  };\n\n  const validated: ValidatedOptions = isDirty\n    ? ValidatedOptions.error\n    : ValidatedOptions.default;\n\n  return (\n    <Modal\n      id=\"manage-permissions-modal\"\n      variant={\"large\"}\n      isOpen={true}\n      aria-label={t(\"dialog_aria_label\")}\n      position=\"top\"\n      title={t(\"dialog_title\")}\n      showClose={true}\n      aria-describedby=\"modal-message\"\n      onClose={onClose}\n      onEscapePress={onClose}\n      appendTo={() =>\n        id ? document.getElementById(id) || document.body : document.body\n      }\n      actions={[\n        <Button\n          key={1}\n          variant=\"primary\"\n          isDisabled={\n            selectedAccount == \"\" || selectedAccount == undefined ? true : false\n          }\n          onClick={() => onNext(selectedAccount)}\n          aria-label={t(\"step_1_submit_button\")}\n        >\n          {t(\"step_1_submit_button\")}\n        </Button>,\n        <Button\n          onClick={onClose}\n          key={2}\n          variant=\"secondary\"\n          aria-label={t(\"common:cancel\")}\n        >\n          {t(\"common:cancel\")}\n        </Button>,\n      ]}\n    >\n      <Form onSubmit={(e) => e.preventDefault()}>\n        <FormGroup\n          fieldId=\"kafka-instance-name\"\n          label={t(\"kafka_instance\")}\n          id=\"modal-message\"\n        >\n          {kafkaName}\n        </FormGroup>\n\n        <FormGroup\n          fieldId=\"account-name\"\n          validated={validated}\n          helperTextInvalid={t(\"common:required\")}\n          isRequired\n          label={t(\"account_id_title\")}\n          labelIcon={\n            <Popover bodyContent={t(\"account_id_help\")}>\n              <button\n                type=\"button\"\n                onClick={(e) => e.preventDefault()}\n                className=\"pf-c-form__group-label-help\"\n                aria-label={t(\"account_help\")}\n              >\n                <HelpIcon noVerticalAlign />\n              </button>\n            </Popover>\n          }\n        >\n          {accounts ? (\n            <Select\n              id={\"account-id\"}\n              data-testid=\"acls-select-account\"\n              className=\"kafka-ui--select--limit-height\"\n              variant={SelectVariant.typeahead}\n              typeAheadAriaLabel={t(\"account_id_title\")}\n              maxHeight={400}\n              onToggle={onToggle}\n              onSelect={onSelect}\n              onClear={clearSelection}\n              selections={selectedAccount}\n              onFilter={(_, value) => makeOptions(value)}\n              isOpen={isOpen}\n              placeholderText={t(\"account_id_typeahead_placeholder\")}\n              isCreatable\n              menuAppendTo=\"parent\"\n              validated={validated}\n              createText={t(\"resourcePrefix.create_text\")}\n              isGrouped\n              onCreateOption={() => {\n                setIsOpen(false);\n                setIsDirty(false);\n              }}\n            >\n              {makeOptions()}\n            </Select>\n          ) : (\n            <Skeleton width={\"100%\"} />\n          )}\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport type { ResourceTypeValue } from \"./ResourceType\";\nimport type { ResourcePrefixRuleValue } from \"./ResourcePrefixRule\";\nimport { AsyncTypeaheadSelect } from \"@rhoas/app-services-ui-components\";\n\ntype ResourceNameProps = {\n  value: string | undefined;\n  onChangeValue: (value: string | undefined) => void;\n  onFetchOptions: (filter: string) => string[];\n  submitted: boolean;\n  resourceType: ResourceTypeValue | undefined;\n  resourcePrefixRule: ResourcePrefixRuleValue;\n  setIsNameValid: (value: boolean) => void;\n};\n\nexport const ResourceName: React.VFC<ResourceNameProps> = ({\n  value,\n  onChangeValue,\n  submitted,\n  resourceType,\n  resourcePrefixRule,\n  onFetchOptions,\n  setIsNameValid,\n}) => {\n  const { t } = useTranslation([\"manage-kafka-permissions\"]);\n  const validationCheck = (\n    resourceType: ResourceTypeValue | undefined,\n    resourcePreixCondition: \"Starts with\" | \"Is\",\n    filter: string | undefined\n  ) => {\n    const regExp = new RegExp(\"^[0-9A-Za-z_.-]+$\");\n\n    if (filter === undefined || filter === \"\" || filter == \"*\")\n      return { isValid: true, message: undefined };\n    if (resourcePreixCondition == \"Is\" && resourceType == \"topic\") {\n      if (filter == \".\" || filter == \"..\")\n        return {\n          isValid: false,\n          message: t(\"resourcePrefix.invalid_topic_name\"),\n        };\n    }\n\n    if (resourceType == \"topic\" && !regExp.test(filter))\n      return {\n        isValid: false,\n        message: t(\"resourcePrefix.invalid_topic\"),\n      };\n\n    if (resourceType == \"consumer-group\" && !regExp.test(filter))\n      return {\n        isValid: false,\n        message: t(\"resourcePrefix.invalid_consumer_group\"),\n      };\n    if (filter.length > 32)\n      return { isValid: false, message: t(\"resourcePrefix.invalid_length\") };\n\n    return { isValid: true, message: undefined };\n  };\n\n  const onValidation = (filter: string | undefined) => {\n    const validationMessage = validationCheck(\n      resourceType,\n      resourcePrefixRule,\n      filter\n    );\n    setIsNameValid(validationMessage.isValid);\n    return validationMessage;\n  };\n\n  return (\n    <AsyncTypeaheadSelect\n      id=\"resource-name\"\n      ariaLabel={\n        resourcePrefixRule === \"Is\"\n          ? t(\"resourcePrefix.aria_label_name_is\", { value: resourceType })\n          : t(\"resourcePrefix.aria_label_name_starts_with\", {\n              value: resourceType,\n            })\n      }\n      value={value}\n      placeholderText={\n        resourcePrefixRule === \"Is\"\n          ? t(\"resourcePrefix.placeholder_name_is\")\n          : t(\"resourcePrefix.placeholder_name_starts_with\")\n      }\n      onChange={onChangeValue}\n      required={true}\n      submitted={submitted}\n      onFetchOptions={onFetchOptions}\n      onValidationCheck={onValidation}\n    />\n  );\n};\n","import { useLayoutEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport type { SelectProps } from \"@patternfly/react-core\";\nimport {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\n\nexport type ResourceOperationValue =\n  | \"All\"\n  | \"Read\"\n  | \"Write\"\n  | \"Create\"\n  | \"Delete\"\n  | \"Alter\"\n  | \"Describe\"\n  | \"Describe configs\"\n  | \"Alter configs\";\n\ntype ResourceOperationProps = {\n  value: ResourceOperationValue | undefined;\n  onChangeValue: (value: ResourceOperationValue | undefined) => void;\n  initialOpen?: boolean;\n  invalid: boolean;\n  resourceTypeOptions: string[];\n};\n\nexport const ResourceOperation: React.VFC<ResourceOperationProps> = ({\n  value,\n  onChangeValue,\n  initialOpen = false,\n  invalid,\n  resourceTypeOptions,\n}) => {\n  const { t } = useTranslation([\"manage-kafka-permissions\"]);\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  // for Storybook, allows opening the select programmatically respecting the initialization needed by the modal and Popper.js\n  useLayoutEffect(() => setIsOpen(initialOpen), [initialOpen]);\n\n  const onToggle = (value: boolean) => {\n    setIsOpen(value);\n  };\n  const onSelect: SelectProps[\"onSelect\"] = (_, selection) => {\n    onChangeValue(selection as ResourceOperationValue);\n    setIsOpen(false);\n  };\n  const makeOptions = () => {\n    return resourceTypeOptions.map((value, index) => (\n      <SelectOption key={index} value={value}>\n        {value}\n      </SelectOption>\n    ));\n  };\n\n  return (\n    <FormGroup\n      validated={invalid ? ValidatedOptions.error : ValidatedOptions.default}\n      helperTextInvalid={t(\"common:required\")}\n      fieldId={\"resource-operation-select\"}\n    >\n      <Select\n        id={\"resource-operation-select\"}\n        aria-label={t(\"operations.aria_label\", value)}\n        data-testid=\"acls-resource-operation-select\"\n        variant={SelectVariant.single}\n        onToggle={onToggle}\n        onSelect={onSelect}\n        isOpen={isOpen}\n        width={200}\n        placeholderText={t(\"operations.placeholder_text\")}\n        validated={invalid ? ValidatedOptions.error : ValidatedOptions.default}\n        selections={value}\n        menuAppendTo={document.body}\n      >\n        {makeOptions()}\n      </Select>\n    </FormGroup>\n  );\n};\n","import { useLayoutEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport type { SelectProps } from \"@patternfly/react-core\";\nimport { Select, SelectOption, SelectVariant } from \"@patternfly/react-core\";\n\nexport type ResourcePermissionValue = \"allow\" | \"deny\";\n\ntype ResourcePermissionProps = {\n  value: ResourcePermissionValue;\n  onChangeValue: (value: ResourcePermissionValue) => void;\n  initialOpen?: boolean;\n};\n\nexport const ResourcePermission: React.VFC<ResourcePermissionProps> = ({\n  value,\n  onChangeValue,\n  initialOpen = false,\n}) => {\n  const { t } = useTranslation([\"manage-kafka-permissions\"]);\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  // for Storybook, allows opening the select programmatically respecting the initialization needed by the modal and Popper.js\n  useLayoutEffect(() => setIsOpen(initialOpen), [initialOpen]);\n\n  const resourcePermissionOptions: {\n    [key in ResourcePermissionValue]: string;\n  } = {\n    allow: t(\"permissions.allow\"),\n    deny: t(\"permissions.deny\"),\n  };\n  const onToggle = (value: boolean) => {\n    setIsOpen(value);\n  };\n  const onSelect: SelectProps[\"onSelect\"] = (_, selection) => {\n    onChangeValue(selection as ResourcePermissionValue);\n    setIsOpen(false);\n  };\n  const makeOptions = () => {\n    return Object.entries(resourcePermissionOptions).map(([value, label]) => (\n      <SelectOption key={value} value={value}>\n        {label}\n      </SelectOption>\n    ));\n  };\n\n  return (\n    <Select\n      id={\"resource-permission-select\"}\n      aria-label={t(\"permissions.aria_label\", { value })}\n      data-testid=\"acls-resource-permission-select\"\n      variant={SelectVariant.single}\n      onToggle={onToggle}\n      onSelect={onSelect}\n      isOpen={isOpen}\n      width={150}\n      selections={value}\n      menuAppendTo={document.body}\n    >\n      {makeOptions()}\n    </Select>\n  );\n};\n","import type { SelectProps } from \"@patternfly/react-core\";\nimport { Select, SelectOption, SelectVariant } from \"@patternfly/react-core\";\nimport { useLayoutEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nexport type ResourcePrefixRuleValue = \"Is\" | \"Starts with\";\n\ntype ResourcePrefixRuleProps = {\n  value: ResourcePrefixRuleValue;\n  onChangeValue: (value: ResourcePrefixRuleValue) => void;\n  initialOpen?: boolean;\n};\n\nexport const ResourcePrefixRule: React.VFC<ResourcePrefixRuleProps> = ({\n  value,\n  onChangeValue,\n  initialOpen = false,\n}) => {\n  const { t } = useTranslation([\"manage-kafka-permissions\"]);\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  // for Storybook, allows opening the select programmatically respecting the initialization needed by the modal and Popper.js\n  useLayoutEffect(() => setIsOpen(initialOpen), [initialOpen]);\n\n  const resourcePrefixRuleOptions: {\n    [key in ResourcePrefixRuleValue]: { label: string; description: string };\n  } = {\n    \"Starts with\": {\n      label: t(\"resource_prefix_rule.starts_with\"),\n      description: t(\"resource_prefix_rule.starts_with_description\"),\n    },\n    Is: {\n      label: t(\"resource_prefix_rule.is\"),\n      description: t(\"resource_prefix_rule.is_description\"),\n    },\n  };\n\n  const onToggle = (value: boolean) => {\n    setIsOpen(value);\n  };\n  const onSelect: SelectProps[\"onSelect\"] = (_, selection) => {\n    onChangeValue(selection as ResourcePrefixRuleValue);\n    setIsOpen(false);\n  };\n  const makeOptions = () => {\n    return Object.entries(resourcePrefixRuleOptions).map(\n      ([key, { label, description }]) => (\n        <SelectOption key={key} value={key} description={description}>\n          {label}\n        </SelectOption>\n      )\n    );\n  };\n\n  return (\n    <Select\n      id={\"resource-prefix-rule-select\"}\n      aria-label={t(\"resource_prefix_rule.aria_label\", { value })}\n      data-testid=\"acls-resource-prefix-rule-select\"\n      variant={SelectVariant.single}\n      onToggle={onToggle}\n      onSelect={onSelect}\n      isOpen={isOpen}\n      width={150}\n      selections={value}\n      menuAppendTo={document.body}\n    >\n      {makeOptions()}\n    </Select>\n  );\n};\n","import { useLayoutEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport type { SelectProps } from \"@patternfly/react-core\";\nimport {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\n\nexport type ResourceTypeValue =\n  | \"topic\"\n  | \"consumer-group\"\n  | \"kafka-instance\"\n  | \"transactional-id\";\n\ntype ResourceTypeProps = {\n  value: ResourceTypeValue | undefined;\n  onChangeValue: (value: ResourceTypeValue | undefined) => void;\n  initialOpen?: boolean;\n  invalid: boolean;\n};\n\nexport const ResourceType: React.VFC<ResourceTypeProps> = ({\n  value,\n  onChangeValue,\n  initialOpen = false,\n  invalid,\n}) => {\n  const { t } = useTranslation([\"manage-kafka-permissions\"]);\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  // for Storybook, allows opening the select programmatically respecting the initialization needed by the modal and Popper.js\n  useLayoutEffect(() => setIsOpen(initialOpen), [initialOpen]);\n\n  const resourceTypeOptions: { [key in ResourceTypeValue]: string } = {\n    \"consumer-group\": t(\"resourceTypes.consumer_group\"),\n    topic: t(\"resourceTypes.topic\"),\n    \"kafka-instance\": t(\"resourceTypes.kafka_instance\"),\n    \"transactional-id\": t(\"resourceTypes.transactional_id\"),\n  };\n  const onToggle = (value: boolean) => {\n    setIsOpen(value);\n  };\n  const onSelect: SelectProps[\"onSelect\"] = (_, selection) => {\n    onChangeValue(selection as ResourceTypeValue);\n    setIsOpen(false);\n  };\n  const makeOptions = () => {\n    return Object.entries(resourceTypeOptions).map(([value, label]) => (\n      <SelectOption key={value} value={value}>\n        {label}\n      </SelectOption>\n    ));\n  };\n\n  return (\n    <FormGroup\n      validated={invalid ? ValidatedOptions.error : ValidatedOptions.default}\n      helperTextInvalid={t(\"common:required\")}\n      fieldId={\"resource-type-select\"}\n    >\n      <Select\n        id={\"resource-type-select\"}\n        aria-label={\n          value != undefined\n            ? t(\"resourceTypes.resource_type_selected\", { value: value })\n            : t(\"resourceTypes.resource_type\")\n        }\n        data-testid=\"acls-resource-type-select\"\n        variant={SelectVariant.single}\n        onToggle={onToggle}\n        onSelect={onSelect}\n        isOpen={isOpen}\n        width={200}\n        placeholderText={t(\"resourceTypes.placeholder_text\")}\n        validated={invalid ? ValidatedOptions.error : ValidatedOptions.default}\n        selections={value}\n        menuAppendTo={document.body}\n      >\n        {makeOptions()}\n      </Select>\n    </FormGroup>\n  );\n};\n","import { Th, Thead, Tr } from \"@patternfly/react-table\";\nimport { useTranslation } from \"react-i18next\";\n\nexport const ShortcutsTableHead: React.FC = () => {\n  const { t } = useTranslation([\"manage-kafka-permissions\"]);\n  return (\n    <Thead>\n      <Tr>\n        <Th>{t(\"table.resource_column_title\")}</Th>\n        <Th />\n\n        <Th />\n\n        <Th>{t(\"table.permissions_column_title\")}</Th>\n        <Th />\n        <Th />\n      </Tr>\n    </Thead>\n  );\n};\n","import { Tbody, Td, Tr } from \"@patternfly/react-table\";\nimport { useTranslation } from \"react-i18next\";\nimport { ResourceType } from \"./ResourceType\";\nimport type { ResourceTypeValue } from \"./ResourceType\";\nimport { ResourcePermission } from \"./ResourcePermission\";\nimport type { ResourcePermissionValue } from \"./ResourcePermission\";\nimport { ResourceOperation } from \"./ResourceOperation\";\nimport type { ResourceOperationValue } from \"./ResourceOperation\";\nimport { RemoveButton } from \"@rhoas/app-services-ui-components\";\nexport type KafkaInstanceManualPermissions = {\n  resourceType: ResourceTypeValue | undefined;\n  onChangeResourceType: (value: ResourceTypeValue | undefined) => void;\n  submitted: boolean;\n  resourcePermission: ResourcePermissionValue;\n  onChangeResourcePermission: (value: ResourcePermissionValue) => void;\n  resourceOperation: ResourceOperationValue | undefined;\n  onChangeResourceOperation: (\n    value: ResourceOperationValue | undefined\n  ) => void;\n  row: number;\n  onDelete: (row: number) => void;\n};\n\nexport const KafkaInstanceManualPermissions: React.FC<\n  KafkaInstanceManualPermissions\n> = ({\n  resourceType,\n  resourceOperation,\n  resourcePermission,\n  submitted,\n  onChangeResourceOperation,\n  onChangeResourcePermission,\n  onChangeResourceType,\n  row,\n  onDelete,\n}) => {\n  const { t } = useTranslation([\"manage-kafka-permissions\"]);\n  return (\n    <Tbody>\n      <Tr>\n        <Td width={60}>\n          <ResourceType\n            value={resourceType}\n            onChangeValue={onChangeResourceType}\n            invalid={submitted && resourceType === undefined}\n          />\n        </Td>\n\n        <Td />\n        <Td />\n\n        <Td>\n          <ResourcePermission\n            value={resourcePermission}\n            onChangeValue={onChangeResourcePermission}\n          />\n        </Td>\n        <Td>\n          <ResourceOperation\n            value={resourceOperation}\n            onChangeValue={onChangeResourceOperation}\n            resourceTypeOptions={[\n              t(\"operations.alter\"),\n              t(\"operations.describe\"),\n            ]}\n            invalid={submitted && resourceOperation === undefined}\n          />\n        </Td>\n        <Td>\n          <RemoveButton\n            variant=\"link\"\n            onClick={() => onDelete(row)}\n            tooltip={t(\"operations.delete\")}\n          />\n        </Td>\n      </Tr>\n    </Tbody>\n  );\n};\n","import { Tbody, Tr, Td } from \"@patternfly/react-table\";\nimport { ResourceName } from \"./ResourceName\";\nimport { ResourceOperation } from \"./ResourceOperation\";\nimport type { ResourceOperationValue } from \"./ResourceOperation\";\nimport { ResourcePermission } from \"./ResourcePermission\";\nimport type { ResourcePermissionValue } from \"./ResourcePermission\";\nimport { ResourcePrefixRule } from \"./ResourcePrefixRule\";\nimport type { ResourcePrefixRuleValue } from \"./ResourcePrefixRule\";\nimport { ResourceType } from \"./ResourceType\";\nimport type { ResourceTypeValue } from \"./ResourceType\";\nimport { ShortcutsTableHead } from \"./ShortcutsTableHead\";\nimport { useTranslation } from \"react-i18next\";\nimport { KafkaInstanceManualPermissions } from \"./KafkaInstanceManualPermissions\";\nimport { RemoveButton } from \"@rhoas/app-services-ui-components\";\n\nexport type AssignPermissionsManualProps = {\n  resourceType: ResourceTypeValue | undefined;\n  onChangeResourceType: (value: ResourceTypeValue | undefined) => void;\n  submitted: boolean;\n  resourcePrefix: ResourcePrefixRuleValue;\n  onChangeResourcePrefix: (value: ResourcePrefixRuleValue) => void;\n  resourceName: string | undefined;\n  onChangeResource: (value: string | undefined) => void;\n  onFetchResourceNameOptions: (filter: string) => string[];\n  resourcePermission: ResourcePermissionValue;\n  onChangeResourcePermission: (value: ResourcePermissionValue) => void;\n  resourceOperation: ResourceOperationValue | undefined;\n  onChangeResourceOperation: (\n    value: ResourceOperationValue | undefined\n  ) => void;\n  multipleShorctutPermissions?: boolean;\n  row: number;\n  onDelete: (row: number) => void;\n  setIsNameValid: (value: boolean) => void;\n};\n\nexport const AssignPermissionsManual: React.FC<\n  AssignPermissionsManualProps\n> = ({\n  resourceType,\n  onChangeResourceType,\n  submitted,\n  resourcePrefix,\n  onChangeResourcePrefix,\n  resourceName,\n  onChangeResource,\n  onFetchResourceNameOptions,\n  resourcePermission,\n  resourceOperation,\n  onChangeResourceOperation,\n  onChangeResourcePermission,\n  multipleShorctutPermissions = true,\n  row,\n  onDelete,\n  setIsNameValid,\n}) => {\n  const { t } = useTranslation(\"manage-kafka-permissions\");\n  const resourceTypeOptions = () => {\n    switch (resourceType) {\n      case \"consumer-group\":\n        return [\n          t(\"operations.all\"),\n          t(\"operations.read\"),\n          t(\"operations.delete\"),\n          t(\"operations.describe\"),\n        ];\n      case \"kafka-instance\":\n        return [t(\"operations.alter\"), t(\"operations.describe\")];\n      case \"transactional-id\":\n        return [\n          t(\"operations.all\"),\n          t(\"operations.write\"),\n          t(\"operations.describe\"),\n        ];\n      default:\n        return [\n          t(\"operations.all\"),\n          t(\"operations.read\"),\n          t(\"operations.write\"),\n          t(\"operations.create\"),\n          t(\"operations.delete\"),\n          t(\"operations.alter\"),\n          t(\"operations.describe\"),\n          t(\"operations.describe_configs\"),\n          t(\"operations.alter_configs\"),\n        ];\n    }\n  };\n\n  return (\n    <>\n      {!multipleShorctutPermissions ? <ShortcutsTableHead /> : null}\n      {resourceType === \"kafka-instance\" ? (\n        <KafkaInstanceManualPermissions\n          resourceOperation={resourceOperation}\n          resourcePermission={resourcePermission}\n          resourceType={resourceType}\n          submitted={submitted}\n          onChangeResourceOperation={onChangeResourceOperation}\n          onChangeResourcePermission={onChangeResourcePermission}\n          onChangeResourceType={onChangeResourceType}\n          onDelete={onDelete}\n          row={row}\n        />\n      ) : (\n        <Tbody>\n          <Tr>\n            <Td>\n              <ResourceType\n                value={resourceType}\n                onChangeValue={onChangeResourceType}\n                invalid={submitted && resourceType === undefined}\n              />\n            </Td>\n            <Td>\n              <ResourcePrefixRule\n                value={resourcePrefix}\n                onChangeValue={onChangeResourcePrefix}\n              />\n            </Td>\n            <Td>\n              <ResourceName\n                value={resourceName}\n                onChangeValue={onChangeResource}\n                onFetchOptions={onFetchResourceNameOptions}\n                submitted={submitted}\n                resourceType={resourceType}\n                resourcePrefixRule={resourcePrefix}\n                setIsNameValid={setIsNameValid}\n              />\n            </Td>\n            <Td>\n              <ResourcePermission\n                value={resourcePermission}\n                onChangeValue={onChangeResourcePermission}\n              />\n            </Td>\n            <Td>\n              <ResourceOperation\n                resourceTypeOptions={resourceTypeOptions()}\n                value={resourceOperation}\n                onChangeValue={onChangeResourceOperation}\n                invalid={\n                  submitted && resourceOperation === undefined ? true : false\n                }\n              />\n            </Td>\n            <Td>\n              <RemoveButton\n                variant=\"link\"\n                onClick={() => onDelete(row)}\n                tooltip={t(\"remove_permission_tooltip\")}\n                ariaLabel={t(\"manual_delete\")}\n              />\n            </Td>\n          </Tr>\n        </Tbody>\n      )}\n    </>\n  );\n};\n","import { Tr, Td } from \"@patternfly/react-table\";\nimport { ResourceTypeLabel } from \"./ResourceTypeLabel\";\nimport { DisplayResourceName, PermissionOperationCell } from \"./Cells\";\nimport { ResourceName } from \"./ResourceName\";\nimport { ResourcePrefixRule } from \"./ResourcePrefixRule\";\nimport type { ResourcePrefixRuleValue } from \"./ResourcePrefixRule\";\n\nexport type ProduceTopicRowProps = {\n  onChange: (value: ResourcePrefixRuleValue) => void;\n  prefixRuleValue: ResourcePrefixRuleValue;\n  resourceNameValue: string | undefined;\n  onChangeResourceName: (value: string | undefined) => void;\n  onFetchResourceNameOptions: (filter: string) => string[];\n  submitted: boolean;\n  isConsumeTopicShortcut?: boolean;\n  setIsNameValid: (value: boolean) => void;\n};\nexport const ProduceTopicRow: React.FC<ProduceTopicRowProps> = ({\n  onChange,\n  prefixRuleValue,\n  resourceNameValue,\n  onChangeResourceName,\n  onFetchResourceNameOptions,\n  submitted,\n  isConsumeTopicShortcut,\n  setIsNameValid,\n}) => {\n  return (\n    <Tr style={{ borderBottom: isConsumeTopicShortcut ? \"none\" : \"\" }}>\n      <Td>\n        {\" \"}\n        <ResourceTypeLabel variant={\"TOPIC\"} />{\" \"}\n        <DisplayResourceName resourceType={\"TOPIC\"} />{\" \"}\n      </Td>\n      <Td>\n        {\n          <ResourcePrefixRule\n            value={prefixRuleValue}\n            onChangeValue={onChange}\n          />\n        }\n      </Td>\n      <Td>\n        <ResourceName\n          value={resourceNameValue}\n          onChangeValue={onChangeResourceName}\n          onFetchOptions={onFetchResourceNameOptions}\n          submitted={submitted}\n          resourceType={\"topic\"}\n          resourcePrefixRule={prefixRuleValue}\n          setIsNameValid={setIsNameValid}\n        />\n      </Td>\n      <Td colSpan={2}>\n        <PermissionOperationCell\n          permission={\"ALLOW\"}\n          operation={\n            isConsumeTopicShortcut\n              ? [\"READ\", \"DESCRIBE\"]\n              : [\"WRITE\", \"CREATE\", \"DESCRIBE\"]\n          }\n        />\n      </Td>\n    </Tr>\n  );\n};\n","import { Popover, Title } from \"@patternfly/react-core\";\nimport { Tbody, Td, Tr } from \"@patternfly/react-table\";\nimport { useTranslation } from \"react-i18next\";\nimport { ResourceTypeLabel } from \"./ResourceTypeLabel\";\nimport { ResourcePrefixRule } from \"./ResourcePrefixRule\";\nimport type { ResourcePrefixRuleValue } from \"./ResourcePrefixRule\";\n\nimport { ResourceName } from \"./ResourceName\";\nimport { DisplayResourceName, PermissionOperationCell } from \"./Cells\";\nimport { ProduceTopicRow } from \"./ProduceTopicRow\";\nimport { ShortcutsTableHead } from \"./ShortcutsTableHead\";\nimport { HelpIcon } from \"@patternfly/react-icons\";\nimport { RemoveButton } from \"@rhoas/app-services-ui-components\";\n\nexport type ConsumeTopicShortcutProps = {\n  onChangeConsumerResourcePrefixRule: (value: ResourcePrefixRuleValue) => void;\n  onChangeTopicResourcePrefixRule: (value: ResourcePrefixRuleValue) => void;\n  consumerPrefixRuleValue: ResourcePrefixRuleValue;\n  topicPrefixRuleValue: ResourcePrefixRuleValue;\n  consumerResourceNameValue: string | undefined;\n  topicResourceNameValue: string | undefined;\n  onChangeConsumerResourceName: (value: string | undefined) => void;\n  onChangeTopicResourceName: (value: string | undefined) => void;\n  onFetchConsumerResourceNameOptions: (filter: string) => string[];\n  onFetchTopicResourceNameOptions: (filter: string) => string[];\n  submitted: boolean;\n  multipleShorctutPermissions?: boolean;\n  onDelete: (row: number) => void;\n  row: number;\n  setIsNameValid: (value: boolean) => void;\n};\nexport const ConsumeTopicShortcut: React.FC<ConsumeTopicShortcutProps> = ({\n  onChangeConsumerResourceName,\n  topicPrefixRuleValue,\n  topicResourceNameValue,\n  consumerPrefixRuleValue,\n  consumerResourceNameValue,\n  submitted,\n  onChangeConsumerResourcePrefixRule,\n  onChangeTopicResourceName,\n  onChangeTopicResourcePrefixRule,\n  onFetchConsumerResourceNameOptions,\n  onFetchTopicResourceNameOptions,\n  onDelete,\n  multipleShorctutPermissions = true,\n  row,\n  setIsNameValid,\n}) => {\n  const { t } = useTranslation([\"manage-kafka-permissions\"]);\n\n  return (\n    <>\n      {!multipleShorctutPermissions ? <ShortcutsTableHead /> : null}\n\n      <Tbody>\n        <Tr style={{ borderBottom: \"none\" }}>\n          <Td colSpan={5}>\n            <Title headingLevel=\"h6\">\n              {t(\"permissions_dropdown.shortcut_consume_topic\")}{\" \"}\n              <Popover\n                headerContent={t(\"permissions_dropdown.shortcut_consume_topic\")}\n                bodyContent={t(\n                  \"permissions_dropdown.shortcut_consume_topic_description\"\n                )}\n              >\n                <button\n                  type=\"button\"\n                  onClick={(e) => e.preventDefault()}\n                  className=\"pf-c-form__group-label-help\"\n                >\n                  <HelpIcon noVerticalAlign />\n                </button>\n              </Popover>\n            </Title>\n          </Td>\n\n          <Td>\n            <RemoveButton\n              variant=\"link\"\n              onClick={() => onDelete(row)}\n              tooltip={t(\"remove_permission_tooltip\")}\n              ariaLabel={t(\"delete_consumer\")}\n            />\n          </Td>\n        </Tr>\n        <ProduceTopicRow\n          setIsNameValid={setIsNameValid}\n          isConsumeTopicShortcut={true}\n          onChange={onChangeTopicResourcePrefixRule}\n          prefixRuleValue={topicPrefixRuleValue}\n          resourceNameValue={topicResourceNameValue}\n          onChangeResourceName={onChangeTopicResourceName}\n          onFetchResourceNameOptions={onFetchTopicResourceNameOptions}\n          submitted={submitted}\n        />\n        <Tr>\n          <Td>\n            {\" \"}\n            <ResourceTypeLabel variant={\"GROUP\"} />{\" \"}\n            <DisplayResourceName resourceType={\"GROUP\"} />{\" \"}\n          </Td>\n          <Td>\n            <ResourcePrefixRule\n              value={consumerPrefixRuleValue}\n              onChangeValue={onChangeConsumerResourcePrefixRule}\n            />\n          </Td>\n          <Td>\n            {\n              <ResourceName\n                value={consumerResourceNameValue}\n                onChangeValue={onChangeConsumerResourceName}\n                onFetchOptions={onFetchConsumerResourceNameOptions}\n                submitted={submitted}\n                resourceType={\"topic\"}\n                resourcePrefixRule={consumerPrefixRuleValue}\n                setIsNameValid={setIsNameValid}\n              />\n            }\n          </Td>\n          <Td>\n            <PermissionOperationCell\n              permission={\"ALLOW\"}\n              operation={[\"READ\"]}\n            />\n          </Td>\n        </Tr>\n      </Tbody>\n    </>\n  );\n};\n","import { Popover, Title } from \"@patternfly/react-core\";\nimport { Tbody, Td, Tr } from \"@patternfly/react-table\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpIcon } from \"@patternfly/react-icons\";\nimport { ResourceTypeLabel } from \"./ResourceTypeLabel\";\nimport { DisplayResourceName, PermissionOperationCell } from \"./Cells\";\nimport { RemoveButton } from \"@rhoas/app-services-ui-components\";\nimport { ShortcutsTableHead } from \"./ShortcutsTableHead\";\n\nexport type ManageAccessShortcutProps = {\n  onDelete: (row: number) => void;\n  multipleShorctutPermissions?: boolean;\n  instanceName: string;\n  row: number;\n};\nexport const ManageAccessShortcut: React.FC<ManageAccessShortcutProps> = ({\n  onDelete,\n  multipleShorctutPermissions = true,\n  instanceName,\n  row,\n}) => {\n  const { t } = useTranslation([\"manage-kafka-permissions\"]);\n\n  return (\n    <>\n      {!multipleShorctutPermissions ? <ShortcutsTableHead /> : null}\n\n      <Tbody>\n        <Tr style={{ borderBottom: \"none\" }}>\n          <Td colSpan={5}>\n            <Title headingLevel=\"h6\">\n              {t(\"permissions_dropdown.shortcut_manage_access\")}{\" \"}\n              <Popover\n                headerContent={t(\"permissions_dropdown.shortcut_manage_access\")}\n                bodyContent={t(\n                  \"permissions_dropdown.shortcut_manage_access_description\"\n                )}\n              >\n                <button\n                  type=\"button\"\n                  onClick={(e) => e.preventDefault()}\n                  className=\"pf-c-form__group-label-help\"\n                >\n                  <HelpIcon noVerticalAlign />\n                </button>\n              </Popover>\n            </Title>\n          </Td>\n          <Td>\n            <RemoveButton\n              variant=\"link\"\n              onClick={() => onDelete(row)}\n              tooltip={t(\"remove_permission_tooltip\")}\n              ariaLabel={t(\"delete_access\")}\n            />\n          </Td>\n        </Tr>\n\n        <Tr>\n          <Td colSpan={2}>\n            <ResourceTypeLabel variant={\"CLUSTER\"} />{\" \"}\n            <DisplayResourceName resourceType={\"CLUSTER\"} />{\" \"}\n            {t(\"is_kafka_instance\", { value: instanceName })}\n          </Td>\n\n          <Td />\n\n          <Td>\n            <PermissionOperationCell\n              permission={\"ALLOW\"}\n              operation={[\"ALTER\"]}\n            />\n          </Td>\n        </Tr>\n      </Tbody>\n    </>\n  );\n};\n","import { Popover, Title } from \"@patternfly/react-core\";\nimport { Tbody, Td, Tr } from \"@patternfly/react-table\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpIcon } from \"@patternfly/react-icons\";\nimport type { ResourcePrefixRuleValue } from \"./ResourcePrefixRule\";\nimport { RemoveButton } from \"@rhoas/app-services-ui-components\";\nimport { ShortcutsTableHead } from \"./ShortcutsTableHead\";\n\nimport { ProduceTopicRow } from \"./ProduceTopicRow\";\n\nexport type ProduceTopicShortcutProps = {\n  onChange: (value: ResourcePrefixRuleValue) => void;\n  prefixRuleValue: ResourcePrefixRuleValue;\n  resourceNameValue: string | undefined;\n  onChangeResourceName: (value: string | undefined) => void;\n  onFetchResourceNameOptions: (filter: string) => string[];\n  submitted: boolean;\n  onDelete: (row: number) => void;\n  multipleShorctutPermissions?: boolean;\n  row: number;\n  setIsNameValid: (value: boolean) => void;\n};\nexport const ProduceTopicShortcut: React.FC<ProduceTopicShortcutProps> = ({\n  onChange,\n  onDelete,\n  prefixRuleValue,\n  onChangeResourceName,\n  resourceNameValue,\n  submitted,\n  onFetchResourceNameOptions,\n  multipleShorctutPermissions = true,\n  row,\n  setIsNameValid,\n}) => {\n  const { t } = useTranslation([\"manage-kafka-permissions\"]);\n\n  return (\n    <>\n      {!multipleShorctutPermissions ? <ShortcutsTableHead /> : null}\n\n      <Tbody>\n        <Tr style={{ borderBottom: \"none\" }}>\n          <Td colSpan={5}>\n            <Title headingLevel=\"h6\">\n              {t(\"permissions_dropdown.shortcut_produce_topic\")}{\" \"}\n              <Popover\n                headerContent={t(\"permissions_dropdown.shortcut_produce_topic\")}\n                bodyContent={t(\n                  \"permissions_dropdown.shortcut_produce_topic_description\"\n                )}\n              >\n                <button\n                  type=\"button\"\n                  onClick={(e) => e.preventDefault()}\n                  className=\"pf-c-form__group-label-help\"\n                >\n                  <HelpIcon noVerticalAlign />\n                </button>\n              </Popover>\n            </Title>\n          </Td>\n          <Td>\n            <RemoveButton\n              variant=\"link\"\n              onClick={() => onDelete(row)}\n              tooltip={t(\"remove_permission_tooltip\")}\n              ariaLabel={t(\"delete_producer\")}\n            />\n          </Td>\n        </Tr>\n\n        <ProduceTopicRow\n          onChange={onChange}\n          prefixRuleValue={prefixRuleValue}\n          resourceNameValue={resourceNameValue}\n          onChangeResourceName={onChangeResourceName}\n          onFetchResourceNameOptions={onFetchResourceNameOptions}\n          submitted={submitted}\n          setIsNameValid={setIsNameValid}\n        />\n      </Tbody>\n    </>\n  );\n};\n","import { ActionList, ActionListItem } from \"@patternfly/react-core\";\nimport { TableComposable } from \"@patternfly/react-table\";\nimport { PermissionsDropdown } from \"./PermissionsDropdown\";\nimport type { AddAclType } from \"../types\";\nimport { AssignPermissionsManual } from \"./AssignPermissionsManual\";\nimport { ConsumeTopicShortcut } from \"./ConsumeTopicShortcut\";\nimport { ManageAccessShortcut } from \"./ManageAccessShortcut\";\nimport { ProduceTopicShortcut } from \"./ProduceTopicShortcut\";\nimport { ShortcutsTableHead } from \"./ShortcutsTableHead\";\n\nexport type AssignPermissionsProps = {\n  submitted: boolean;\n  onDelete: (index: number) => void;\n  topicNameOptions: (filter: string) => string[];\n  consumerGroupNameOptions: (filter: string) => string[];\n  addedAcls?: AddAclType[];\n  onAddManualPermissions: () => void;\n  onAddProduceTopicShortcut: () => void;\n  onConsumeTopicShortcut: () => void;\n  onManageAccessShortcut: () => void;\n  kafkaName: string;\n  setAddedAcls: (value: AddAclType[]) => void;\n  setIsNameValid: (value: boolean) => void;\n};\n\nexport const AssignPermissions: React.VFC<AssignPermissionsProps> = ({\n  submitted,\n  onDelete,\n  topicNameOptions,\n  consumerGroupNameOptions,\n  onAddManualPermissions,\n  onAddProduceTopicShortcut,\n  onConsumeTopicShortcut,\n  onManageAccessShortcut,\n  addedAcls,\n  kafkaName,\n  setAddedAcls,\n  setIsNameValid,\n}) => {\n  return (\n    <>\n      <TableComposable variant=\"compact\">\n        {addedAcls && addedAcls.length > 0 && <ShortcutsTableHead />}\n        {addedAcls &&\n          addedAcls.map((aclTemplate, idx) => {\n            switch (aclTemplate.type) {\n              case \"manual\":\n                return (\n                  <AssignPermissionsManual\n                    key={idx}\n                    setIsNameValid={setIsNameValid}\n                    resourceType={aclTemplate.resourceType}\n                    onChangeResourceType={(value) =>\n                      setAddedAcls(\n                        [...addedAcls].map((resourceValues, row) => {\n                          return row === idx\n                            ? { ...resourceValues, resourceType: value }\n                            : { ...resourceValues };\n                        })\n                      )\n                    }\n                    submitted={submitted}\n                    resourcePrefix={aclTemplate.resourcePrefix}\n                    onChangeResourcePrefix={(value) =>\n                      setAddedAcls(\n                        [...addedAcls].map((resourceValues, row) => {\n                          return row === idx\n                            ? { ...resourceValues, resourcePrefix: value }\n                            : { ...resourceValues };\n                        })\n                      )\n                    }\n                    resourceName={aclTemplate.resourceName}\n                    onChangeResource={(value) =>\n                      setAddedAcls(\n                        [...addedAcls].map((resourceValues, row) => {\n                          return row === idx\n                            ? { ...resourceValues, resourceName: value }\n                            : { ...resourceValues };\n                        })\n                      )\n                    }\n                    onFetchResourceNameOptions={topicNameOptions}\n                    resourcePermission={aclTemplate.resourcePermission}\n                    onChangeResourcePermission={(value) =>\n                      setAddedAcls(\n                        [...addedAcls].map((resourceValues, row) => {\n                          return row === idx\n                            ? {\n                                ...resourceValues,\n                                resourcePermission: value,\n                              }\n                            : { ...resourceValues };\n                        })\n                      )\n                    }\n                    resourceOperation={aclTemplate.resourceOperation}\n                    onChangeResourceOperation={(value) =>\n                      setAddedAcls(\n                        [...addedAcls].map((resourceValues, row) => {\n                          return row === idx\n                            ? {\n                                ...resourceValues,\n                                resourceOperation: value,\n                              }\n                            : { ...resourceValues };\n                        })\n                      )\n                    }\n                    row={idx}\n                    onDelete={onDelete}\n                  />\n                );\n\n              case \"consume-topic\":\n                return (\n                  <ConsumeTopicShortcut\n                    key={idx}\n                    setIsNameValid={setIsNameValid}\n                    onChangeConsumerResourcePrefixRule={(value) =>\n                      setAddedAcls(\n                        [...addedAcls].map((resourceValues, row) => {\n                          return row === idx\n                            ? {\n                                ...resourceValues,\n                                consumerResourcePrefixRule: value,\n                              }\n                            : { ...resourceValues };\n                        })\n                      )\n                    }\n                    onChangeTopicResourcePrefixRule={(value) =>\n                      setAddedAcls(\n                        [...addedAcls].map((resourceValues, row) => {\n                          return row === idx\n                            ? {\n                                ...resourceValues,\n                                topicResourcePrefixRule: value,\n                              }\n                            : { ...resourceValues };\n                        })\n                      )\n                    }\n                    consumerPrefixRuleValue={\n                      aclTemplate.consumerResourcePrefixRule\n                    }\n                    topicPrefixRuleValue={aclTemplate.topicResourcePrefixRule}\n                    consumerResourceNameValue={aclTemplate.consumerResourceName}\n                    topicResourceNameValue={aclTemplate.topicResourceName}\n                    onChangeConsumerResourceName={(value) =>\n                      setAddedAcls(\n                        [...addedAcls].map((resourceValues, row) => {\n                          return row === idx\n                            ? {\n                                ...resourceValues,\n                                consumerResourceName: value,\n                              }\n                            : { ...resourceValues };\n                        })\n                      )\n                    }\n                    onChangeTopicResourceName={(value) =>\n                      setAddedAcls(\n                        [...addedAcls].map((resourceValues, row) => {\n                          return row === idx\n                            ? {\n                                ...resourceValues,\n                                topicResourceName: value,\n                              }\n                            : { ...resourceValues };\n                        })\n                      )\n                    }\n                    onFetchConsumerResourceNameOptions={\n                      consumerGroupNameOptions\n                    }\n                    onFetchTopicResourceNameOptions={topicNameOptions}\n                    submitted={submitted}\n                    onDelete={onDelete}\n                    row={idx}\n                  />\n                );\n\n              case \"produce-topic\":\n                return (\n                  <ProduceTopicShortcut\n                    key={idx}\n                    setIsNameValid={setIsNameValid}\n                    onChange={(value) =>\n                      setAddedAcls(\n                        [...addedAcls].map((resourceValues, row) => {\n                          return row === idx\n                            ? { ...resourceValues, prefixRuleValue: value }\n                            : { ...resourceValues };\n                        })\n                      )\n                    }\n                    prefixRuleValue={aclTemplate.prefixRuleValue}\n                    resourceNameValue={aclTemplate.resourceNameValue}\n                    onChangeResourceName={(value) =>\n                      setAddedAcls(\n                        [...addedAcls].map((resourceValues, row) => {\n                          return row === idx\n                            ? {\n                                ...resourceValues,\n                                resourceNameValue: value,\n                              }\n                            : { ...resourceValues };\n                        })\n                      )\n                    }\n                    onFetchResourceNameOptions={topicNameOptions}\n                    submitted={submitted}\n                    onDelete={onDelete}\n                    row={idx}\n                  />\n                );\n\n              case \"manage-access\":\n                return (\n                  <ManageAccessShortcut\n                    key={idx}\n                    row={idx}\n                    instanceName={kafkaName}\n                    onDelete={onDelete}\n                  />\n                );\n            }\n          })}\n      </TableComposable>\n      <ActionList>\n        <ActionListItem style={{ paddingTop: \"20px\" }}>\n          <PermissionsDropdown\n            onAddPermission={onAddManualPermissions}\n            onShortcutConsumeTopic={onConsumeTopicShortcut}\n            onShortcutProduceTopic={onAddProduceTopicShortcut}\n            onShortcutManageAccess={onManageAccessShortcut}\n          />\n        </ActionListItem>\n      </ActionList>\n    </>\n  );\n};\n","import type React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Modal,\n  ModalVariant,\n  Button,\n  ButtonVariant,\n} from \"@patternfly/react-core\";\n\nexport type PreCancelModalProps = {\n  isOpen: boolean;\n  closeModal: () => void;\n  resumeEditing: () => void;\n};\n\nconst PreCancelModal: React.FC<PreCancelModalProps> = ({\n  isOpen,\n  closeModal,\n  resumeEditing,\n}) => {\n  const { t } = useTranslation([\"manage-kafka-permissions\"]);\n  return (\n    <Modal\n      id=\"manage-permissions-precancel-modal\"\n      variant={ModalVariant.small}\n      isOpen={isOpen}\n      aria-label={t(\"pre_cancel_label\")}\n      title={t(\"pre_cancel_title\")}\n      titleIconVariant=\"warning\"\n      showClose={true}\n      aria-describedby=\"modal-message\"\n      onClose={resumeEditing}\n      onEscapePress={closeModal}\n      actions={[\n        <Button onClick={closeModal} key={1} variant={ButtonVariant.primary}>\n          {t(\"discard_changes\")}\n        </Button>,\n        <Button\n          onClick={resumeEditing}\n          key={2}\n          variant={ButtonVariant.secondary}\n        >\n          {t(\"resume_editing\")}\n        </Button>,\n      ]}\n    >\n      {t(\"cancel_description\")}\n    </Modal>\n  );\n};\n\nexport { PreCancelModal };\n","import type { VFC } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport {\n  TableComposable,\n  TableVariant,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\n\nimport type { AclBinding } from \"../types\";\nimport { PermissionOperationCell, PrincipalCell, ResourceCell } from \"./Cells\";\n\nexport type ReviewPermissionsTableProps = {\n  acls: AclBinding[];\n  selectedAccountId: string;\n  onRemoveAcl: (idx: number) => void;\n};\n\nexport const ReviewPermissionsTable: VFC<ReviewPermissionsTableProps> = ({\n  selectedAccountId,\n  acls = [],\n  onRemoveAcl,\n}) => {\n  const { t } = useTranslation([\"manage-kafka-permissions\"]);\n\n  return (\n    <TableComposable\n      variant={TableVariant.compact}\n      aria-label={t(\"review_permissions_table\")}\n    >\n      <Thead noWrap>\n        <Tr>\n          <Th width={60}>{t(\"table.resource_column_title\")}</Th>\n          <Th width={20}>{t(\"table.permissions_column_title\")}</Th>\n          <Th width={20} />\n        </Tr>\n      </Thead>\n      <Tbody>\n        {acls.map((acl, idx) => {\n          const {\n            patternType,\n            resourceType,\n            resourceName,\n            operation,\n            permission,\n            principal,\n          } = acl;\n          const isDeleteEnabled =\n            selectedAccountId === \"All accounts\" ||\n            principal === `User:${selectedAccountId}` ||\n            principal != `User:*`;\n          const isAllAccounts = principal === \"User:*\";\n\n          return (\n            <Tr key={idx}>\n              <Td>\n                <ResourceCell\n                  patternType={patternType}\n                  resourceType={resourceType}\n                  resourceName={resourceName}\n                />\n              </Td>\n              <Td>\n                <PermissionOperationCell\n                  permission={permission}\n                  operation={operation}\n                />\n              </Td>\n              <Td>\n                <PrincipalCell\n                  isDeleteEnabled={isDeleteEnabled}\n                  isAllAccounts={isAllAccounts}\n                  onRemoveAcl={() => onRemoveAcl(idx)}\n                />\n              </Td>\n            </Tr>\n          );\n        })}\n      </Tbody>\n    </TableComposable>\n  );\n};\n","import { Text, TextContent, TextVariants } from \"@patternfly/react-core\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport type { AclBinding } from \"../types\";\nimport { ReviewPermissionsTable } from \"./ReviewPermissionsTable\";\n\nexport type ViewAccountDetailsProps = {\n  accountId: string | undefined;\n  existingAcls: AclBinding[];\n  onRemoveAcl: (index: number) => void;\n};\n\nexport const ViewAccountDetails: React.VFC<ViewAccountDetailsProps> = ({\n  accountId,\n  existingAcls,\n  onRemoveAcl,\n}) => {\n  const { t } = useTranslation([\"manage-kafka-permissions\"]);\n  const HelperText: React.FunctionComponent = () => {\n    if (accountId === \"All accounts\") {\n      return t(\"all_accounts_help\");\n    }\n    return (\n      <Trans ns={[\"manage-kafka-permissions\"]} i18nKey=\"selected_account_help\">\n        Review the list of existing permissions for the selected account. The\n        list includes account-specific permissions and permissions applied to\n        all accounts within this Kafka instance. Permissions labeled\n        <strong>All accounts</strong> cannot be removed when an individual\n        account ID is selected.\n      </Trans>\n    );\n  };\n  return (\n    <>\n      <TextContent>\n        <Text component={TextVariants.small}>\n          <HelperText />\n        </Text>\n      </TextContent>\n      <ReviewPermissionsTable\n        acls={existingAcls}\n        selectedAccountId={accountId ? accountId : \"\"}\n        onRemoveAcl={onRemoveAcl}\n      />\n    </>\n  );\n};\n","import type { ResourceOperationValue } from \"./components/ResourceOperation\";\nimport type { ResourceTypeValue } from \"./components/ResourceType\";\nimport type { AclBinding } from \"@rhoas/kafka-instance-sdk\";\nimport { AclResourceType } from \"@rhoas/kafka-instance-sdk\";\nimport type { AddAclType } from \"./types\";\n\nexport const transformPermissions = (\n  transformAclData: AclBinding[],\n  newAcls?: AddAclType[],\n  selectedAccount?: string\n) => {\n  // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n  const selectedAccountName = `User:${selectedAccount}`;\n  newAcls?.map((value) => {\n    switch (value.type) {\n      case \"manual\": {\n        transformAclData.push({\n          resourceName:\n            value.resourceType == \"kafka-instance\"\n              ? \"kafka-cluster\"\n              : value.resourceName\n              ? value.resourceName\n              : \"\",\n          resourceType: transformResourceType(value.resourceType),\n          patternType: value.resourcePrefix == \"Is\" ? \"LITERAL\" : \"PREFIXED\",\n          operation: transformResourceOperation(value.resourceOperation),\n          permission: value.resourcePermission == \"allow\" ? \"ALLOW\" : \"DENY\",\n          principal:\n            selectedAccount == \"All accounts\" ? `User:*` : selectedAccountName,\n        });\n        break;\n      }\n      case \"manage-access\":\n        {\n          transformAclData.push({\n            resourceName: \"kafka-cluster\",\n            resourceType: \"CLUSTER\",\n            patternType: \"LITERAL\",\n            operation: \"ALTER\",\n            permission: \"ALLOW\",\n            principal:\n              selectedAccount == \"All accounts\"\n                ? `User:*`\n                : selectedAccountName,\n          });\n        }\n        break;\n      case \"consume-topic\":\n        {\n          transformAclData.push(\n            {\n              resourceName: value.topicResourceName || \"\",\n              resourceType: \"TOPIC\",\n              patternType:\n                value.topicResourcePrefixRule == \"Is\" ? \"LITERAL\" : \"PREFIXED\",\n              operation: \"READ\",\n              permission: \"ALLOW\",\n              principal:\n                selectedAccount == \"All accounts\"\n                  ? `User:*`\n                  : selectedAccountName,\n            },\n            {\n              resourceName: value.topicResourceName || \"\",\n              resourceType: \"TOPIC\",\n              patternType:\n                value.topicResourcePrefixRule == \"Is\" ? \"LITERAL\" : \"PREFIXED\",\n              operation: \"DESCRIBE\",\n              permission: \"ALLOW\",\n              principal:\n                selectedAccount == \"All accounts\"\n                  ? `User:*`\n                  : selectedAccountName,\n            },\n            {\n              resourceName: value.consumerResourceName || \"\",\n              resourceType: \"GROUP\",\n              patternType:\n                value.consumerResourcePrefixRule == \"Is\"\n                  ? \"LITERAL\"\n                  : \"PREFIXED\",\n              operation: \"READ\",\n              permission: \"ALLOW\",\n              principal:\n                selectedAccount == \"All accounts\"\n                  ? `User:*`\n                  : selectedAccountName,\n            }\n          );\n        }\n        break;\n      case \"produce-topic\": {\n        transformAclData.push(\n          {\n            resourceName: value.resourceNameValue || \"\",\n            resourceType: \"TOPIC\",\n            patternType: value.prefixRuleValue == \"Is\" ? \"LITERAL\" : \"PREFIXED\",\n            operation: \"WRITE\",\n            permission: \"ALLOW\",\n            principal:\n              selectedAccount == \"All accounts\"\n                ? `User:*`\n                : selectedAccountName,\n          },\n          {\n            resourceName: value.resourceNameValue || \"\",\n            resourceType: \"TOPIC\",\n            patternType: value.prefixRuleValue == \"Is\" ? \"LITERAL\" : \"PREFIXED\",\n            operation: \"CREATE\",\n            permission: \"ALLOW\",\n            principal:\n              selectedAccount == \"All accounts\"\n                ? `User:*`\n                : selectedAccountName,\n          },\n          {\n            resourceName: value.resourceNameValue || \"\",\n            resourceType: \"TOPIC\",\n            patternType: value.prefixRuleValue == \"Is\" ? \"LITERAL\" : \"PREFIXED\",\n            operation: \"DESCRIBE\",\n            permission: \"ALLOW\",\n            principal:\n              selectedAccount == \"All accounts\"\n                ? `User:*`\n                : selectedAccountName,\n          }\n        );\n      }\n    }\n  });\n};\n\nexport const transformResourceType = (value: ResourceTypeValue | undefined) => {\n  switch (value) {\n    case \"consumer-group\":\n      return AclResourceType.Group;\n    case \"kafka-instance\":\n      return AclResourceType.Cluster;\n    case \"topic\":\n      return AclResourceType.Topic;\n    default:\n      return AclResourceType.TransactionalId;\n  }\n};\nexport const transformResourceOperation = (\n  value: ResourceOperationValue | undefined\n) => {\n  switch (value) {\n    case \"All\":\n      return \"ALL\";\n    case \"Alter\":\n      return \"ALTER\";\n    case \"Alter configs\":\n      return \"ALTER_CONFIGS\";\n    case \"Create\":\n      return \"CREATE\";\n    case \"Delete\":\n      return \"DELETE\";\n    case \"Describe\":\n      return \"DESCRIBE\";\n    case \"Describe configs\":\n      return \"DESCRIBE_CONFIGS\";\n    case \"Read\":\n      return \"READ\";\n    default:\n      return \"WRITE\";\n  }\n};\n","import {\n  Button,\n  ExpandableSection,\n  Form,\n  FormGroup,\n  Modal,\n  TextContent,\n  TextVariants,\n  Text,\n  Badge,\n  Alert,\n  Popover,\n} from \"@patternfly/react-core\";\nimport { HelpIcon } from \"@patternfly/react-icons\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { AssignPermissions } from \"./AssignPermissions\";\nimport { PreCancelModal } from \"./PreCancelModal\";\nimport { ViewAccountDetails } from \"./ViewAccountDetails\";\nimport type { AddAclType } from \"../types\";\nimport type { AclBinding } from \"@rhoas/kafka-instance-sdk\";\nimport type { Permissions } from \"ui\";\nimport {\n  createEmptyConsumeTopicAcl,\n  createEmptyManageAccessAcl,\n  createEmptyManualAcl,\n  createEmptyProduceTopicAcl,\n} from \"../types\";\nimport { transformPermissions } from \"../utils\";\n\nexport type AclType = {\n  groups: Permissions[];\n  count: number;\n};\n\nexport type EditPermissionsProps = {\n  onCancel: () => void;\n  kafkaName: string;\n  onSave: (\n    acls: AclBinding[] | undefined,\n    deletedAcls: AclBinding[] | undefined\n  ) => void;\n  acls: AclBinding[];\n  topicsList: string[];\n  consumerGroupsList: string[];\n  id?: string;\n  selectedAccount: string | undefined;\n};\n\nexport const EditPermissions: React.FC<EditPermissionsProps> = ({\n  onCancel,\n  kafkaName,\n  acls,\n  onSave,\n  topicsList,\n  consumerGroupsList,\n  selectedAccount,\n  id,\n}) => {\n  const { t } = useTranslation([\n    \"manage-kafka-permissions\",\n    \"create-kafka-instance\",\n  ]);\n\n  const escapeClosesModal = useRef<boolean>(true);\n  const [\n    isExpandedExistingPermissionSection,\n    setIsExpandedExistingPermissionSection,\n  ] = useState<boolean>(false);\n  const [isAclDeleted, setIsAclDeleted] = useState<boolean>(false);\n  const [\n    isExpandedAssignPermissionsSection,\n    setIsExpandedAssignPermissionsSection,\n  ] = useState<boolean>(true);\n  const [isNameValid, setIsNameValid] = useState<boolean>(true);\n  const [canSave, setCanSave] = useState<boolean>(false);\n  const [submitted, setSubmitted] = useState<boolean>(false);\n  const [isOpenPreCancelModal, setIsOpenPreCancelModal] =\n    useState<boolean>(false);\n  const [existingAcls, setExistingAcls] = useState<AclBinding[]>(acls);\n  const [newAcls, setNewAcls] = useState<AddAclType[]>();\n  const [deletedAcls, setDeletedAcls] = useState<AclBinding[] | undefined>(\n    undefined\n  );\n\n  const checkValidation = useCallback(() => {\n    if (newAcls) {\n      const isRowInvalid = newAcls?.map((value) =>\n        value.type == \"manual\" &&\n        value.resourceType == \"kafka-instance\" &&\n        value.resourceOperation != undefined\n          ? false\n          : Object.values(value).includes(undefined)\n      );\n      isRowInvalid.includes(true) ? setCanSave(false) : setCanSave(true);\n      if (canSave == true && isNameValid) return true;\n      else return false;\n    }\n    if (deletedAcls && deletedAcls.length > 0) {\n      setCanSave(true);\n      return true;\n    } else return false;\n  }, [canSave, deletedAcls, isNameValid, newAcls]);\n\n  useEffect(() => {\n    checkValidation();\n  }, [checkValidation, newAcls]);\n\n  useEffect(() => {\n    //Fetch the latest table for exiting acls, only when no row is scheduled for deletion\n    if (deletedAcls == undefined) setExistingAcls(acls);\n  }, [acls, deletedAcls]);\n\n  const onEscapePress = () => {\n    if (escapeClosesModal.current) {\n      onCancel();\n    }\n  };\n  const topicFilter = (filter: string) => {\n    if (filter == \"\" || filter == undefined) return topicsList;\n    else return topicsList.filter((v) => v.includes(filter));\n  };\n\n  const consumerGroupsFilter = (filter: string) => {\n    if (filter == \"\" || filter == undefined) return consumerGroupsList;\n    else return consumerGroupsList.filter((v) => v.includes(filter));\n  };\n\n  const aclsToSave: AclBinding[] = [];\n\n  const onClickSubmit = () => {\n    if (\n      (newAcls && newAcls.length > 0) ||\n      (deletedAcls && deletedAcls.length > 0)\n    ) {\n      setSubmitted(true);\n      const isAclValid = checkValidation();\n      transformPermissions(aclsToSave, newAcls, selectedAccount);\n      isAclValid && onSave(aclsToSave, deletedAcls);\n    }\n  };\n\n  const onAddManualPermissions = () => {\n    setSubmitted(false);\n    setNewAcls((prevState) =>\n      prevState\n        ? [...prevState, createEmptyManualAcl()]\n        : [createEmptyManualAcl()]\n    );\n  };\n  const onAddProduceTopicShortcut = () => {\n    setSubmitted(false);\n    setNewAcls((prevState) =>\n      prevState\n        ? [...prevState, createEmptyProduceTopicAcl()]\n        : [createEmptyProduceTopicAcl()]\n    );\n  };\n  const onConsumeTopicShortcut = () => {\n    setSubmitted(false);\n    setNewAcls((prevState) =>\n      prevState\n        ? [...prevState, createEmptyConsumeTopicAcl()]\n        : [createEmptyConsumeTopicAcl()]\n    );\n  };\n  const onManageAccessShortcut = () => {\n    setSubmitted(false);\n    setNewAcls((prevState) =>\n      prevState\n        ? [...prevState, createEmptyManageAccessAcl(kafkaName)]\n        : [createEmptyManageAccessAcl(kafkaName)]\n    );\n  };\n\n  const onDeleteNewAcl = (row: number) => {\n    setNewAcls(\n      (prevState) => prevState && prevState.filter((_, index) => index !== row)\n    );\n  };\n\n  const onChangeExpandedExistingPermissionsSection = (value: boolean) => {\n    setIsExpandedExistingPermissionSection(value);\n  };\n  const onChangeExpandedAssignPermissionsSection = (value: boolean) => {\n    setIsExpandedAssignPermissionsSection(value);\n  };\n\n  const isDisabled =\n    (submitted && !canSave) ||\n    ((newAcls == undefined || newAcls.length < 1) && !isAclDeleted) ||\n    !isNameValid\n      ? true\n      : false;\n  const onClose = () => {\n    !isDisabled || (newAcls && newAcls?.length > 0)\n      ? setIsOpenPreCancelModal(true)\n      : onCancel();\n  };\n\n  const closePreCancelModal = () => {\n    setIsOpenPreCancelModal(false);\n    onCancel();\n  };\n\n  const resumeEditingPermissions = () => {\n    setIsOpenPreCancelModal(false);\n  };\n\n  const updateExistingAcls = (row: number) => {\n    setExistingAcls((existingAcls || []).filter((_, index) => index != row));\n  };\n\n  const onRemoveAcls = (row: number) => {\n    setDeletedAcls((prevState) =>\n      existingAcls && prevState != undefined\n        ? [...prevState, existingAcls[row]]\n        : existingAcls && [existingAcls[row]]\n    );\n    setIsAclDeleted(true);\n    updateExistingAcls(row);\n  };\n  //The value received will have a prefix 'User:'.Remove the prefix when displaying value\n  const accountDisplayName =\n    selectedAccount === \"All accounts\"\n      ? t(\"all_accounts_title\")\n      : selectedAccount?.includes(\"User:\")\n      ? selectedAccount?.split(\":\")[1]\n      : selectedAccount;\n  return (\n    <Modal\n      id=\"manage-permissions-modal\"\n      variant={\"large\"}\n      isOpen={true}\n      aria-label={t(\"dialog_aria_label\")}\n      position=\"top\"\n      title={t(\"dialog_title\")}\n      showClose={true}\n      aria-describedby=\"modal-message\"\n      onClose={onClose}\n      onEscapePress={onEscapePress}\n      appendTo={() =>\n        id ? document.getElementById(id) || document.body : document.body\n      }\n      actions={[\n        <Button\n          key={1}\n          variant=\"primary\"\n          isDisabled={isDisabled}\n          onClick={onClickSubmit}\n          aria-label={t(\"step_2_submit_button\")}\n        >\n          {t(\"step_2_submit_button\")}\n        </Button>,\n        <Button\n          onClick={onClose}\n          key={2}\n          variant=\"secondary\"\n          aria-label={t(\"common:cancel\")}\n        >\n          {t(\"common:cancel\")}\n        </Button>,\n      ]}\n    >\n      <PreCancelModal\n        isOpen={isOpenPreCancelModal}\n        closeModal={closePreCancelModal}\n        resumeEditing={resumeEditingPermissions}\n      />\n      <Form onSubmit={(e) => e.preventDefault()}>\n        <FormGroup\n          fieldId=\"kafka-instance-name\"\n          label={t(\"kafka_instance\")}\n          id=\"modal-message\"\n        >\n          {kafkaName}\n        </FormGroup>\n\n        <FormGroup\n          fieldId=\"account-name\"\n          label={t(\"account_id_title\")}\n          labelIcon={\n            <Popover bodyContent={t(\"account_id_help\")}>\n              <button\n                type=\"button\"\n                onClick={(e) => e.preventDefault()}\n                className=\"pf-c-form__group-label-help\"\n                aria-label={t(\"account_help\")}\n              >\n                <HelpIcon noVerticalAlign />\n              </button>\n            </Popover>\n          }\n        >\n          {accountDisplayName}\n        </FormGroup>\n        {(!canSave || !isNameValid) && submitted && (\n          <Alert\n            isInline\n            title={t(\"create-kafka-instance:form_errors.form_invalid\")}\n            variant={\"danger\"}\n          />\n        )}\n        <ExpandableSection\n          isIndented={true}\n          isExpanded={isExpandedExistingPermissionSection}\n          onToggle={onChangeExpandedExistingPermissionsSection}\n          toggleContent={\n            <div>\n              <span>{t(\"review_existing_title\")}</span>{\" \"}\n              <Badge isRead={existingAcls.length == 0 ? true : false}>\n                {existingAcls.length}\n              </Badge>\n            </div>\n          }\n        >\n          <ViewAccountDetails\n            accountId={selectedAccount}\n            existingAcls={existingAcls}\n            onRemoveAcl={onRemoveAcls}\n          />\n        </ExpandableSection>\n        <FormGroup>\n          <ExpandableSection\n            toggleText={t(\"assign_permissions_title\")}\n            isIndented={true}\n            isExpanded={isExpandedAssignPermissionsSection}\n            onToggle={onChangeExpandedAssignPermissionsSection}\n          >\n            <FormGroup>\n              <TextContent>\n                <Text component={TextVariants.small}>\n                  {selectedAccount === \"All accounts\"\n                    ? t(\"assign_permissions_all_description\")\n                    : t(\"assign_permissions_description\", {\n                        value: accountDisplayName,\n                      })}\n                </Text>\n                {newAcls && newAcls?.length > 0 && (\n                  <Text component={TextVariants.small}>\n                    {t(\"all_fields_required\")}\n                  </Text>\n                )}\n              </TextContent>\n            </FormGroup>\n            <AssignPermissions\n              setIsNameValid={setIsNameValid}\n              submitted={submitted}\n              onAddManualPermissions={onAddManualPermissions}\n              onAddProduceTopicShortcut={onAddProduceTopicShortcut}\n              onConsumeTopicShortcut={onConsumeTopicShortcut}\n              onManageAccessShortcut={onManageAccessShortcut}\n              onDelete={onDeleteNewAcl}\n              topicNameOptions={topicFilter}\n              consumerGroupNameOptions={consumerGroupsFilter}\n              addedAcls={newAcls}\n              kafkaName={kafkaName}\n              setAddedAcls={setNewAcls}\n            />\n          </ExpandableSection>\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateVariant,\n  PageSection,\n} from \"@patternfly/react-core\";\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\n\nexport const EmptyStateInitialLoading: VoidFunctionComponent = () => {\n  return (\n    <PageSection isFilled={true}>\n      <EmptyState variant={EmptyStateVariant.xs}>\n        <EmptyStateBody data-chromatic=\"ignore\">\n          <AppServicesLoading />\n        </EmptyStateBody>\n      </EmptyState>\n    </PageSection>\n  );\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  PageSection,\n  Title,\n} from \"@patternfly/react-core\";\nimport { TachometerAltIcon } from \"@patternfly/react-icons\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { FunctionComponent } from \"react\";\n\nexport const EmptyStateMetricsUnavailable: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <PageSection isFilled={true}>\n      <EmptyState variant={EmptyStateVariant.xs}>\n        <EmptyStateIcon icon={TachometerAltIcon} />\n        <Title headingLevel=\"h3\" size=\"lg\">\n          {t(\"metrics:empty_state_no_data_title\")}\n        </Title>\n        <EmptyStateBody>{t(\"metrics:empty_state_no_data_body\")}</EmptyStateBody>\n      </EmptyState>\n    </PageSection>\n  );\n};\n","import { Grid, GridItem, PageSection } from \"@patternfly/react-core\";\nimport type { FunctionComponent, ReactElement } from \"react\";\n\ntype MetricsLayoutProps = {\n  metricsLagAlert: ReactElement;\n  topicsKpi: ReactElement;\n  topicPartitionsKpi: ReactElement;\n  consumerGroupKpi: ReactElement;\n  diskSpaceMetrics: ReactElement;\n  topicMetrics: ReactElement;\n};\nexport const MetricsLayout: FunctionComponent<MetricsLayoutProps> = ({\n  metricsLagAlert,\n  topicsKpi,\n  topicPartitionsKpi,\n  consumerGroupKpi,\n  diskSpaceMetrics,\n  topicMetrics,\n}) => {\n  return (\n    <PageSection\n      hasOverflowScroll={true}\n      aria-label={\"TODO\"}\n      padding={{ default: \"noPadding\" }}\n      className={\n        \"pf-u-px-lg-on-xl pf-u-pt-sm-on-xl pf-u-pb-lg-on-xl pf-u-px-md pf-u-pb-md\"\n      }\n    >\n      <Grid hasGutter>\n        <GridItem>{metricsLagAlert}</GridItem>\n        <GridItem sm={4}>{topicsKpi}</GridItem>\n        <GridItem sm={4}>{topicPartitionsKpi}</GridItem>\n        <GridItem sm={4}>{consumerGroupKpi}</GridItem>\n        <GridItem lg={6}>{diskSpaceMetrics}</GridItem>\n        <GridItem lg={6}>{topicMetrics}</GridItem>\n      </Grid>\n    </PageSection>\n  );\n};\n","import { CardBody, Bullseye, Spinner } from \"@patternfly/react-core\";\nimport type { FunctionComponent } from \"react\";\n\nexport const CardBodyLoading: FunctionComponent = () => (\n  <CardBody>\n    <Bullseye>\n      <Spinner isSVG data-chromatic=\"ignore\" />\n    </Bullseye>\n  </CardBody>\n);\n","import { DurationOptions } from \"./types\";\n\nexport const timeIntervalsMapping = {\n  [DurationOptions.Last5minutes]: {\n    interval: 1 * 60,\n    ticks: 6,\n    showDate: false,\n  },\n  [DurationOptions.Last15minutes]: {\n    interval: 3 * 60,\n    ticks: 6,\n    showDate: false,\n  },\n  [DurationOptions.Last30minutes]: {\n    interval: 5 * 60,\n    ticks: 7,\n    showDate: false,\n  },\n  [DurationOptions.Last1hour]: { interval: 10 * 60, ticks: 6, showDate: false },\n  [DurationOptions.Last3hours]: {\n    interval: 30 * 60,\n    ticks: 7,\n    showDate: false,\n  },\n  [DurationOptions.Last6hours]: {\n    interval: 1 * 60 * 60,\n    ticks: 7,\n    showDate: false,\n  },\n  [DurationOptions.Last12hours]: {\n    interval: 2 * 60 * 60,\n    ticks: 7,\n    showDate: false,\n  },\n  [DurationOptions.Last24hours]: {\n    interval: 4 * 60 * 60,\n    ticks: 7,\n    showDate: true,\n  },\n  [DurationOptions.Last2days]: {\n    interval: 8 * 60 * 60,\n    ticks: 7,\n    showDate: true,\n  },\n  [DurationOptions.Last7days]: {\n    interval: 24 * 60 * 60,\n    ticks: 8,\n    showDate: true,\n  },\n} as const;\n\nexport const chartHeight = 350;\nexport const chartPadding = {\n  bottom: 110, // Adjusted to accomodate legend\n  left: 120,\n  right: 40,\n  top: 10,\n};\n","import { Flex, FlexItem, Skeleton } from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { chartHeight, chartPadding } from \"../consts\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const ChartSkeletonLoader: VoidFunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <Flex direction={{ default: \"column\" }} data-chromatic=\"ignore\">\n      <FlexItem>\n        <Skeleton\n          height={`${chartHeight - chartPadding.bottom}px`}\n          screenreaderText={t(\"common:skeleton_loader_screenreader_text\")}\n        />\n      </FlexItem>\n      <FlexItem>\n        <Skeleton height={`${chartPadding.bottom / 2 - 12.5}px`} width=\"20%\" />\n      </FlexItem>\n      <FlexItem>\n        <Skeleton height={`${chartPadding.bottom / 2 - 12.5}px`} width=\"40%\" />\n      </FlexItem>\n    </Flex>\n  );\n};\n","import type { RefObject } from \"react\";\nimport { useEffect, useLayoutEffect, useRef, useState } from \"react\";\n\nexport function useChartWidth(): [RefObject<HTMLDivElement>, number] {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [width, setWidth] = useState<number>(0);\n\n  const handleResize = () =>\n    containerRef.current && setWidth(containerRef.current.clientWidth);\n\n  useLayoutEffect(() => {\n    handleResize();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n  return [containerRef, width];\n}\n","import byteSize from \"byte-size\";\nimport { fromUnixTime, sub } from \"date-fns\";\nimport { formatInTimeZone } from \"date-fns-tz\";\nimport { timeIntervalsMapping } from \"../consts\";\nimport type { DurationOptions } from \"../types\";\n\nexport function formatBytes(bytes: number): string {\n  return byteSize(bytes, { units: \"iec\" }).toString();\n}\n\nexport const shouldShowDate = (timeDuration: DurationOptions): boolean => {\n  return timeIntervalsMapping[timeDuration].showDate;\n};\n\nexport const dateToChartValue = (\n  timestamp: number,\n  { showDate }: { showDate: boolean } = { showDate: false }\n): string => {\n  const date = fromUnixTime(timestamp / 1000);\n  return formatInTimeZone(date, \"utc\", showDate ? \"HH:mm'\\n'MMM dd\" : \"HH:mm\");\n};\n\nexport function timestampsToTicks(\n  timestamps: string[],\n  duration: DurationOptions\n): number[] {\n  const allTimestamps = [...timestamps];\n  allTimestamps.sort();\n  const mostRecentTs =\n    parseInt(allTimestamps[allTimestamps.length - 1]) || Date.now();\n  return new Array(\n    Math.max(timeIntervalsMapping[duration].ticks, allTimestamps.length)\n  )\n    .fill(mostRecentTs)\n    .map((d: number, index) =>\n      sub(new Date(d), {\n        seconds: timeIntervalsMapping[duration].interval * index,\n      }).getTime()\n    );\n}\n","import type { ChartVoronoiContainerProps } from \"@patternfly/react-charts\";\nimport {\n  Chart,\n  ChartArea,\n  ChartAxis,\n  ChartGroup,\n  ChartLegend,\n  ChartThemeColor,\n  ChartThreshold,\n  ChartVoronoiContainer,\n} from \"@patternfly/react-charts\";\nimport {\n  chart_color_black_500,\n  chart_color_blue_300,\n} from \"@patternfly/react-tokens\";\nimport type { ReactElement, VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { chartHeight, chartPadding } from \"../consts\";\nimport type { DurationOptions, TimeSeriesMetrics } from \"../types\";\nimport { ChartSkeletonLoader } from \"./ChartSkeletonLoader\";\nimport { useChartWidth } from \"./useChartWidth\";\nimport { dateToChartValue, shouldShowDate, timestampsToTicks } from \"./utils\";\n\ntype ChartData = {\n  areaColor: string;\n  softLimitColor: string;\n  area: BrokerChartData[];\n  softLimit: BrokerChartData[];\n};\n\ntype BrokerChartData = {\n  name: string;\n  x: number;\n  y: number;\n};\n\ntype LegendData = {\n  name: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n};\n\ntype ChartLinearWithOptionalLimitProps = {\n  metrics: TimeSeriesMetrics;\n  duration: DurationOptions;\n  chartName: string;\n  xLabel?: string;\n  yLabel?: string;\n  usageLimit?: number;\n  formatValue?: (d: number) => string;\n  isLoading: boolean;\n  emptyState: ReactElement;\n};\n\nexport const ChartLinearWithOptionalLimit: VoidFunctionComponent<\n  ChartLinearWithOptionalLimitProps\n> = ({\n  metrics,\n  duration,\n  chartName,\n  xLabel,\n  yLabel,\n  usageLimit,\n  formatValue = (d) => `${d}`,\n  isLoading,\n  emptyState,\n}) => {\n  const { t } = useTranslation();\n  const [containerRef, width] = useChartWidth();\n\n  const itemsPerRow = width && width > 650 ? 6 : 3;\n\n  const { chartData, legendData, tickValues } = getChartData(\n    metrics,\n    duration,\n    chartName,\n    t(\"metrics:limit\"),\n    usageLimit\n  );\n\n  const hasMetrics = Object.keys(metrics).length > 0;\n  const showDate = shouldShowDate(duration);\n\n  switch (true) {\n    case isLoading:\n      return <ChartSkeletonLoader />;\n    case !hasMetrics:\n      return emptyState;\n    default: {\n      const labels: ChartVoronoiContainerProps[\"labels\"] = ({ datum }) =>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/restrict-template-expressions,@typescript-eslint/no-unsafe-argument\n        `${datum.name}: ${formatValue(datum.y)}`;\n      return (\n        <div ref={containerRef}>\n          <Chart\n            ariaTitle={chartName}\n            containerComponent={\n              <ChartVoronoiContainer labels={labels} constrainToVisibleArea />\n            }\n            legendPosition=\"bottom-left\"\n            legendComponent={\n              <ChartLegend\n                orientation={\"horizontal\"}\n                data={legendData}\n                itemsPerRow={itemsPerRow}\n              />\n            }\n            height={chartHeight}\n            padding={chartPadding}\n            themeColor={ChartThemeColor.multiUnordered}\n            width={width}\n            legendAllowWrap={true}\n          >\n            <ChartAxis\n              label={\"\\n\" + (xLabel || t(\"metrics:axis-label-time\") || \"\")}\n              tickValues={tickValues}\n              tickFormat={(d: number) =>\n                dateToChartValue(d, {\n                  showDate,\n                })\n              }\n            />\n            <ChartAxis\n              label={\"\\n\\n\\n\\n\\n\" + (yLabel || chartName)}\n              dependentAxis\n              tickFormat={formatValue}\n            />\n            <ChartGroup>\n              {chartData.map((value, index) => (\n                <ChartArea\n                  key={`chart-area-${index}`}\n                  data={value.area}\n                  style={{\n                    data: {\n                      // TODO: check if this is needed\n                      // stroke: value.color,\n                    },\n                  }}\n                />\n              ))}\n            </ChartGroup>\n            <ChartThreshold\n              key={`chart-softlimit`}\n              data={chartData[0].softLimit}\n              style={{\n                data: {\n                  stroke: chartData[0].softLimitColor,\n                },\n              }}\n            />\n          </Chart>\n        </div>\n      );\n    }\n  }\n};\n\nfunction getChartData(\n  metrics: TimeSeriesMetrics,\n  duration: number,\n  lineLabel: string,\n  limitLabel: string,\n  usageLimit?: number\n): {\n  legendData: Array<LegendData>;\n  chartData: Array<ChartData>;\n  tickValues: number[];\n} {\n  const legendData = [\n    usageLimit\n      ? {\n          name: limitLabel,\n          symbol: { fill: chart_color_black_500.value, type: \"threshold\" },\n        }\n      : undefined,\n    { name: lineLabel, symbol: { fill: chart_color_blue_300.value } },\n  ].filter((d) => !!d) as Array<LegendData>;\n\n  const areaColor = chart_color_blue_300.value;\n  const softLimitColor = chart_color_black_500.value;\n  const chartData: Array<ChartData> = [];\n  const area: Array<BrokerChartData> = [];\n  const softLimit: Array<BrokerChartData> = [];\n\n  Object.entries(metrics).map(([timestamp, bytes]) => {\n    area.push({ name: lineLabel, x: parseInt(timestamp, 10), y: bytes });\n  });\n  chartData.push({ areaColor, softLimitColor, area, softLimit });\n\n  const tickValues = timestampsToTicks(Object.keys(metrics), duration);\n\n  if (usageLimit) {\n    tickValues.forEach((timestamp) =>\n      softLimit.push({\n        name: limitLabel,\n        x: timestamp,\n        y: usageLimit,\n      })\n    );\n  }\n\n  return {\n    legendData,\n    chartData,\n    tickValues,\n  };\n}\n","import type { ChartVoronoiContainerProps } from \"@patternfly/react-charts\";\nimport {\n  Chart,\n  ChartArea,\n  ChartAxis,\n  ChartGroup,\n  ChartLegend,\n  ChartThemeColor,\n  ChartVoronoiContainer,\n} from \"@patternfly/react-charts\";\nimport {\n  chart_color_blue_300,\n  chart_color_cyan_300,\n} from \"@patternfly/react-tokens\";\nimport type { FunctionComponent, ReactElement } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { chartHeight, chartPadding } from \"../consts\";\nimport type { PartitionBytesMetric } from \"../types\";\nimport { ChartSkeletonLoader } from \"./ChartSkeletonLoader\";\nimport { useChartWidth } from \"./useChartWidth\";\nimport {\n  dateToChartValue,\n  formatBytes,\n  shouldShowDate,\n  timestampsToTicks,\n} from \"./utils\";\n\nconst colors = [chart_color_cyan_300.value, chart_color_blue_300.value];\n\ntype ChartData = {\n  color: string;\n  area: PartitionChartData[];\n};\n\ntype PartitionChartData = {\n  name: string;\n  x: number;\n  y: number;\n};\n\ntype LegendData = {\n  name: string;\n};\n\nexport type ChartLogSizePerPartitionProps = {\n  partitions: PartitionBytesMetric;\n  topic: string | undefined;\n  duration: number;\n  isLoading: boolean;\n  emptyState: ReactElement;\n};\nexport const ChartLogSizePerPartition: FunctionComponent<\n  ChartLogSizePerPartitionProps\n> = ({ partitions, topic, duration, isLoading, emptyState }) => {\n  const { t } = useTranslation();\n  const [containerRef, width] = useChartWidth();\n\n  const itemsPerRow = width && width > 650 ? 6 : 3;\n\n  const { chartData, legendData, tickValues } = getChartData(\n    partitions,\n    topic,\n    duration\n  );\n\n  const hasMetrics = Object.keys(partitions).length > 0;\n\n  const showDate = shouldShowDate(duration);\n\n  return (\n    <div ref={containerRef}>\n      {(() => {\n        switch (true) {\n          case isLoading:\n            return <ChartSkeletonLoader />;\n          case !hasMetrics:\n            return emptyState;\n          default: {\n            const labels: ChartVoronoiContainerProps[\"labels\"] = ({ datum }) =>\n              // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/restrict-template-expressions,@typescript-eslint/no-unsafe-argument\n              `${datum.name}: ${formatBytes(datum.y)}`;\n\n            return (\n              <Chart\n                ariaTitle={t(\"metrics:log_size_per_partition\")}\n                containerComponent={\n                  <ChartVoronoiContainer\n                    labels={labels}\n                    constrainToVisibleArea\n                  />\n                }\n                legendPosition=\"bottom-left\"\n                legendComponent={\n                  <ChartLegend data={legendData} itemsPerRow={itemsPerRow} />\n                }\n                height={chartHeight}\n                padding={chartPadding}\n                themeColor={ChartThemeColor.multiOrdered}\n                width={width}\n                legendAllowWrap={true}\n              >\n                <ChartAxis\n                  label={\"\\n\" + t(\"metrics:axis-label-time\")}\n                  tickValues={tickValues}\n                  tickFormat={(d: number) =>\n                    dateToChartValue(d, {\n                      showDate,\n                    })\n                  }\n                />\n                <ChartAxis\n                  label={\"\\n\\n\\n\\n\\n\" + t(\"metrics:axis-label-bytes\")}\n                  dependentAxis\n                  tickFormat={formatBytes}\n                />\n                <ChartGroup>\n                  {chartData.map((value, index) => (\n                    <ChartArea key={`chart-area-${index}`} data={value.area} />\n                  ))}\n                </ChartGroup>\n              </Chart>\n            );\n          }\n        }\n      })()}\n    </div>\n  );\n};\n\nexport function getChartData(\n  partitions: PartitionBytesMetric,\n  topic: string | undefined,\n  duration: number\n): {\n  legendData: Array<LegendData>;\n  chartData: Array<ChartData>;\n  tickValues: number[];\n} {\n  const legendData: Array<LegendData> = [];\n  const chartData: Array<ChartData> = [];\n  Object.entries(partitions).map(([partition, dataMap], index) => {\n    const name = topic ? `${topic}: ${partition}` : partition;\n    const color = colors[index];\n    legendData.push({\n      name,\n    });\n    const area: Array<PartitionChartData> = [];\n\n    Object.entries(dataMap).map(([timestamp, value]) => {\n      area.push({ name, x: parseInt(timestamp, 10), y: value });\n    });\n    chartData.push({ color, area });\n  });\n\n  const allTimestamps = Array.from(\n    new Set(Object.values(partitions).flatMap((m) => Object.keys(m)))\n  );\n  const tickValues = timestampsToTicks(allTimestamps, duration);\n\n  return {\n    legendData,\n    chartData,\n    tickValues,\n  };\n}\n","import { Popover } from \"@patternfly/react-core\";\nimport { OutlinedQuestionCircleIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\ntype ChartPopoverProps = {\n  title: string;\n  description: string;\n};\n\nexport const ChartPopover: VoidFunctionComponent<ChartPopoverProps> = ({\n  title,\n  description,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <Popover\n      aria-label={title}\n      headerContent={<div>{title}</div>}\n      bodyContent={<div>{description}</div>}\n    >\n      <OutlinedQuestionCircleIcon\n        aria-label={t(\"metrics:chart-popover-icon-screenreader-text\", {\n          title,\n        })}\n      />\n    </Popover>\n  );\n};\n","import type { ChartVoronoiContainerProps } from \"@patternfly/react-charts\";\nimport {\n  Chart,\n  ChartAxis,\n  ChartGroup,\n  ChartLegend,\n  ChartLine,\n  ChartThemeColor,\n  ChartVoronoiContainer,\n} from \"@patternfly/react-charts\";\nimport {\n  chart_color_blue_300,\n  chart_color_green_300,\n} from \"@patternfly/react-tokens\";\nimport type { FunctionComponent, ReactElement } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { chartHeight, chartPadding, timeIntervalsMapping } from \"../consts\";\nimport type { TimeSeriesMetrics } from \"../types\";\nimport { ChartSkeletonLoader } from \"./ChartSkeletonLoader\";\nimport { useChartWidth } from \"./useChartWidth\";\nimport {\n  dateToChartValue,\n  formatBytes,\n  shouldShowDate,\n  timestampsToTicks,\n} from \"./utils\";\n\ntype ChartData = {\n  color: string;\n  line: TopicChartData[];\n};\n\ntype TopicChartData = {\n  name: string;\n  x: number;\n  y: number;\n};\n\ntype LegendData = {\n  name: string;\n  symbol: {\n    fill: string;\n    type?: string;\n  };\n};\n\ntype ChartTotalBytesProps = {\n  incomingTopicsData: TimeSeriesMetrics;\n  outgoingTopicsData: TimeSeriesMetrics;\n  selectedTopic: string | undefined;\n  duration: number;\n  isLoading: boolean;\n  emptyState: ReactElement;\n};\nexport const ChartTotalBytes: FunctionComponent<ChartTotalBytesProps> = ({\n  incomingTopicsData,\n  outgoingTopicsData,\n  selectedTopic,\n  duration,\n  isLoading,\n  emptyState,\n}) => {\n  const { t } = useTranslation();\n  const [containerRef, width] = useChartWidth();\n\n  const itemsPerRow = width && width > 650 ? 6 : 3;\n\n  const { chartData, legendData, tickValues } = getBytesChartData(\n    incomingTopicsData,\n    outgoingTopicsData,\n    duration,\n    selectedTopic\n      ? t(\"metrics:incoming_bytes\", {\n          topic: selectedTopic,\n        })\n      : t(\"metrics:incoming_bytes_all_topics\"),\n    selectedTopic\n      ? t(\"metrics:outgoing_bytes\", {\n          topic: selectedTopic,\n        })\n      : t(\"metrics:outgoing_bytes_all_topics\")\n  );\n\n  const hasMetrics =\n    Object.keys(incomingTopicsData).length > 0 ||\n    Object.keys(outgoingTopicsData).length > 0;\n\n  const showDate = shouldShowDate(duration);\n\n  switch (true) {\n    case isLoading:\n      return <ChartSkeletonLoader />;\n    case !hasMetrics:\n      return emptyState;\n    default: {\n      const labels: ChartVoronoiContainerProps[\"labels\"] =\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/restrict-template-expressions,@typescript-eslint/no-unsafe-argument\n        ({ datum }) => `${datum.name}: ${formatBytes(datum.y)}`;\n      return (\n        <div ref={containerRef}>\n          <Chart\n            ariaTitle={t(\"metrics:total_bytes\")}\n            containerComponent={\n              <ChartVoronoiContainer labels={labels} constrainToVisibleArea />\n            }\n            legendAllowWrap={true}\n            legendPosition=\"bottom-left\"\n            legendComponent={\n              <ChartLegend data={legendData} itemsPerRow={itemsPerRow} />\n            }\n            height={chartHeight}\n            padding={chartPadding}\n            themeColor={ChartThemeColor.multiUnordered}\n            width={width}\n          >\n            <ChartAxis\n              label={\"\\n\" + t(\"metrics:axis-label-time\")}\n              tickValues={tickValues}\n              tickCount={timeIntervalsMapping[duration].ticks}\n              tickFormat={(d: number) =>\n                dateToChartValue(d, {\n                  showDate,\n                })\n              }\n            />\n            <ChartAxis\n              label={\"\\n\\n\\n\\n\\n\" + t(\"metrics:axis-label-bytes\")}\n              dependentAxis\n              tickFormat={formatBytes}\n            />\n            <ChartGroup>\n              {chartData.map((value, index) => (\n                <ChartLine\n                  key={`chart-line-${index}`}\n                  data={value.line}\n                  style={{\n                    data: {\n                      stroke: value.color,\n                    },\n                  }}\n                />\n              ))}\n            </ChartGroup>\n          </Chart>\n        </div>\n      );\n    }\n  }\n};\n\nexport function getBytesChartData(\n  incomingTopic: TimeSeriesMetrics,\n  outgoingTopic: TimeSeriesMetrics,\n  duration: number,\n  incomingTopicName: string,\n  outgoingTopicName: string\n): {\n  legendData: Array<LegendData>;\n  chartData: Array<ChartData>;\n  tickValues: number[];\n} {\n  const legendData: Array<LegendData> = [];\n  const chartData: Array<ChartData> = [];\n\n  const incomingLine = metricsToLine(incomingTopic, incomingTopicName);\n  if (incomingLine.length > 0) {\n    const color = chart_color_blue_300.value;\n    chartData.push({ color, line: incomingLine });\n    legendData.push({\n      name: incomingTopicName,\n      symbol: {\n        fill: color,\n      },\n    });\n  }\n\n  const outgoingLine = metricsToLine(outgoingTopic, outgoingTopicName);\n  if (outgoingLine.length > 0) {\n    const color = chart_color_green_300.value;\n    chartData.push({ color, line: outgoingLine });\n    legendData.push({\n      name: outgoingTopicName,\n      symbol: {\n        fill: color,\n      },\n    });\n  }\n  const allTimestamps = Array.from(\n    new Set([...Object.keys(incomingTopic), ...Object.keys(outgoingTopic)])\n  );\n  const tickValues = timestampsToTicks(allTimestamps, duration);\n\n  return {\n    legendData,\n    chartData,\n    tickValues,\n  };\n}\n\nexport function metricsToLine(\n  metrics: TimeSeriesMetrics,\n  name: string\n): Array<TopicChartData> {\n  const line: Array<TopicChartData> = [];\n\n  Object.entries(metrics).map(([timestamp, bytes]) => {\n    line.push({ name, x: parseInt(timestamp, 10), y: bytes });\n  });\n  return line;\n}\n","import {\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { ExclamationTriangleIcon } from \"@patternfly/react-icons\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const EmptyStateNoMetricsData: FunctionComponent = () => {\n  const { t } = useTranslation([\"metrics\"]);\n  return (\n    <EmptyState variant={EmptyStateVariant.xs}>\n      <EmptyStateIcon\n        icon={ExclamationTriangleIcon}\n        color=\"var(--pf-global--warning-color--100)\"\n      />\n      <Title headingLevel=\"h3\" size=\"md\">\n        {t(\"metric_not_available\")}\n      </Title>\n    </EmptyState>\n  );\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { SearchIcon } from \"@patternfly/react-icons\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const EmptyStateNoMetricsDataForSelection: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState variant={EmptyStateVariant.xs}>\n      <EmptyStateIcon icon={SearchIcon} />\n      <Title headingLevel=\"h3\" size=\"lg\">\n        {t(\"metrics:empty_state_no_metrics_data_title\")}\n      </Title>\n      <EmptyStateBody>\n        {t(\"metrics:empty_state_no_metrics_data_body\")}\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { WrenchIcon } from \"@patternfly/react-icons\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\ntype EmptyStateNoTopicsProps = {\n  onCreateTopic?: () => void;\n};\nexport const EmptyStateNoTopics: FunctionComponent<EmptyStateNoTopicsProps> = ({\n  onCreateTopic,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState variant={EmptyStateVariant.xs}>\n      <EmptyStateIcon icon={WrenchIcon} />\n      <Title headingLevel=\"h3\" size=\"lg\">\n        {t(\"metrics:empty_state_no_topics_title\")}\n      </Title>\n      <EmptyStateBody>{t(\"metrics:empty_state_no_topics_body\")}</EmptyStateBody>\n      {onCreateTopic && (\n        <Button\n          ouiaId=\"button-create\"\n          variant=\"primary\"\n          onClick={onCreateTopic}\n        >\n          {t(\"metrics:empty_state_no_topics_create_topic\")}\n        </Button>\n      )}\n    </EmptyState>\n  );\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { FilterIcon } from \"@patternfly/react-icons\";\nimport { Trans, useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\n\nexport const EmptyStateNoTopicSelected: VoidFunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState variant={EmptyStateVariant.xs}>\n      <EmptyStateIcon icon={FilterIcon} />\n      <Title headingLevel=\"h3\" size=\"lg\">\n        {t(\"metrics:empty_state_no_filter_title\")}\n      </Title>\n      <EmptyStateBody>\n        <Trans\n          ns={\"metrics\"}\n          i18nKey={\"empty_state_no_filter_body\"}\n          components={{ bold: <strong /> }}\n        />\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { useState } from \"react\";\nimport type { SelectProps } from \"@patternfly/react-core\";\nimport {\n  ToolbarItem,\n  Select,\n  SelectVariant,\n  SelectGroup,\n  SelectOption,\n} from \"@patternfly/react-core\";\nimport { DurationOptions } from \"../types\";\n\nexport const DurationOptionsMap = {\n  [DurationOptions.Last5minutes]: \"Last 5 minutes\",\n  [DurationOptions.Last15minutes]: \"Last 15 minutes\",\n  [DurationOptions.Last30minutes]: \"Last 30 minutes\",\n  [DurationOptions.Last1hour]: \"Last 1 hour\",\n  [DurationOptions.Last3hours]: \"Last 3 hours\",\n  [DurationOptions.Last6hours]: \"Last 6 hours\",\n  [DurationOptions.Last12hours]: \"Last 12 hours\",\n  [DurationOptions.Last24hours]: \"Last 24 hours\",\n  [DurationOptions.Last2days]: \"Last 2 days\",\n  [DurationOptions.Last7days]: \"Last 7 days\",\n} as const;\n\ntype FilterByTimeProps = {\n  duration: DurationOptions;\n  onDurationChange: (value: DurationOptions) => void;\n  keyText: string;\n  ariaLabel: string;\n  disableToolbar: boolean;\n};\n\nexport const FilterByTime: VoidFunctionComponent<FilterByTimeProps> = ({\n  duration,\n  keyText,\n  ariaLabel,\n  disableToolbar,\n  onDurationChange,\n}) => {\n  const [isTimeSelectOpen, setIsTimeSelectOpen] = useState<boolean>(false);\n\n  const onTimeToggle = (isTimeSelectOpen: boolean) => {\n    setIsTimeSelectOpen(isTimeSelectOpen);\n  };\n\n  const onTimeSelect: SelectProps[\"onSelect\"] = (_, selection) => {\n    const mapping = Object.entries(DurationOptionsMap).find(\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      ([_, value]) => value === selection\n    );\n    if (mapping) {\n      onDurationChange(parseInt(mapping[0], 10) as DurationOptions);\n    }\n    setIsTimeSelectOpen(false);\n  };\n\n  const timeOptions = (keyText: string) => [\n    <SelectGroup label=\"Relative time ranges\" key={`${keyText}-group`}>\n      {Object.values(DurationOptionsMap).map((label, idx) => (\n        <SelectOption key={`${keyText}-${idx}`} value={label} />\n      ))}\n    </SelectGroup>,\n  ];\n  const ariaId = `filter-by-time-${Date.now()}`;\n  return (\n    <ToolbarItem>\n      <label hidden id={ariaId}>\n        {ariaLabel}\n      </label>\n      <Select\n        variant={SelectVariant.single}\n        aria-labelledby={ariaId}\n        onToggle={onTimeToggle}\n        onSelect={onTimeSelect}\n        selections={DurationOptionsMap[duration]}\n        isOpen={isTimeSelectOpen}\n        isDisabled={disableToolbar}\n      >\n        {timeOptions(keyText)}\n      </Select>\n    </ToolbarItem>\n  );\n};\n","import type { SelectProps } from \"@patternfly/react-core\";\nimport {\n  Select,\n  SelectGroup,\n  SelectOption,\n  SelectVariant,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { FilterIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport \"./FilterByTopic.css\";\n\nconst widths = {\n  default: \"150px\",\n  sm: \"150px\",\n  md: \"150px\",\n  lg: \"200px\",\n  xl: \"200px\",\n  \"2xl\": \"200px\",\n};\n\ntype FilterByTopicProps = {\n  selectedTopic: string | undefined;\n  topicList: string[];\n  disableToolbar: boolean;\n  ariaLabel: string;\n  onSetSelectedTopic: (value: string | undefined) => void;\n};\n\nexport const FilterByTopic: VoidFunctionComponent<FilterByTopicProps> = ({\n  selectedTopic,\n  topicList = [],\n  disableToolbar,\n  ariaLabel,\n  onSetSelectedTopic,\n}) => {\n  const { t } = useTranslation();\n  const [isTopicSelectOpen, setIsTopicSelectOpen] = useState<boolean>(false);\n  const [selectKey, setSelectKey] = useState(Math.random());\n\n  useEffect(() => setSelectKey(Math.random()), [topicList]);\n\n  const allTopicsLabel = t(\"metrics:all_topics\");\n\n  const onTopicToggle = (isTopicSelectOpen: boolean) => {\n    setIsTopicSelectOpen(isTopicSelectOpen);\n  };\n\n  const onTopicSelect: SelectProps[\"onSelect\"] = (_, selection) => {\n    selection !== allTopicsLabel\n      ? onSetSelectedTopic(selection as string)\n      : onSetSelectedTopic(undefined);\n    setIsTopicSelectOpen(false);\n  };\n\n  const onTopicFilter = (_: unknown, textInput: string) => {\n    const filteredTopics =\n      topicList.filter((topic) => topic.indexOf(textInput) != -1) || [];\n    return topicOptions(filteredTopics);\n  };\n\n  const topicOptions = (topicList: string[]) => [\n    <SelectOption key={\"topic-filter-0\"} value={allTopicsLabel} />,\n    <SelectGroup label=\"Filter by topic\" key=\"topic-filter-group\">\n      {topicList.map((topic, index) => (\n        <SelectOption\n          key={`topic-filter-${index + 1}`}\n          value={topic}\n          title={topic}\n        />\n      ))}\n    </SelectGroup>,\n  ];\n\n  const isDisabled = disableToolbar || topicList.length === 0;\n  const ariaId = `filter-by-topic-${Date.now()}`;\n\n  return (\n    <ToolbarItem widths={widths}>\n      <label hidden id={ariaId}>\n        {ariaLabel}\n      </label>\n      <Select\n        key={selectKey}\n        variant={SelectVariant.single}\n        onToggle={onTopicToggle}\n        onSelect={onTopicSelect}\n        selections={selectedTopic || allTopicsLabel}\n        isOpen={isTopicSelectOpen}\n        placeholderText={\n          <>\n            <FilterIcon /> {allTopicsLabel}\n          </>\n        }\n        aria-labelledby={ariaId}\n        onFilter={onTopicFilter}\n        isGrouped\n        hasInlineFilter\n        isDisabled={isDisabled}\n        position=\"left\"\n        className={\"appserv-metrics-filterbytopic\"}\n      >\n        {topicOptions(topicList)}\n      </Select>\n    </ToolbarItem>\n  );\n};\n","import { ToolbarItem } from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { FormatDate, RefreshButton } from \"@rhoas/app-services-ui-components\";\n\nexport type ToolbarRefreshProps = {\n  isRefreshing: boolean;\n  lastUpdated: Date | undefined;\n  ariaLabel: string;\n  onRefresh: () => void;\n};\n\nexport const ToolbarRefresh: VoidFunctionComponent<ToolbarRefreshProps> = ({\n  isRefreshing,\n  lastUpdated = new Date(),\n  ariaLabel,\n  onRefresh,\n}) => {\n  const { t } = useTranslation([\"metrics\"]);\n\n  return (\n    <>\n      <ToolbarItem>\n        <RefreshButton\n          ariaLabel={ariaLabel}\n          onClick={onRefresh}\n          isRefreshing={isRefreshing}\n        />\n      </ToolbarItem>\n      <ToolbarItem\n        alignment={{ default: \"alignRight\" }}\n        style={{ color: \"var(--pf-global--Color--200)\" }}\n      >\n        <div className=\"pf-u-font-size-xs\">\n          {isRefreshing ? (\n            t(\"metrics:refreshing\")\n          ) : (\n            <>\n              {t(\"metrics:last-refresh\")}\n              <br />\n              <FormatDate date={lastUpdated} format=\"distanceToNow\" />\n              {t(\"metrics:last-refresh-distance\")}\n            </>\n          )}\n        </div>\n      </ToolbarItem>\n    </>\n  );\n};\n","import {\n  CardHeader,\n  CardTitle,\n  Divider,\n  Toolbar,\n  ToolbarContent,\n} from \"@patternfly/react-core\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { DurationOptions } from \"../types\";\nimport { FilterByTime } from \"./FilterByTime\";\nimport { FilterByTopic } from \"./FilterByTopic\";\nimport type { ToolbarRefreshProps } from \"./ToolbarRefresh\";\nimport { ToolbarRefresh } from \"./ToolbarRefresh\";\n\ntype ToolbarTopicsMetricsProps = {\n  title: string;\n  selectedTopic: string | undefined;\n  topicList: string[];\n  duration: DurationOptions;\n  isDisabled: boolean;\n  onSetTimeDuration: (value: DurationOptions) => void;\n  onSetSelectedTopic: (value: string | undefined) => void;\n} & Omit<ToolbarRefreshProps, \"ariaLabel\">;\nexport const ToolbarTopicsMetrics: FunctionComponent<\n  ToolbarTopicsMetricsProps\n> = ({\n  title,\n  selectedTopic,\n  topicList,\n  duration,\n  isDisabled,\n  isRefreshing,\n  lastUpdated,\n  onSetTimeDuration,\n  onRefresh,\n  onSetSelectedTopic,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <CardHeader>\n        <CardTitle component=\"h2\">{title}</CardTitle>\n      </CardHeader>\n      <Divider />\n      <Toolbar>\n        <ToolbarContent>\n          <FilterByTopic\n            ariaLabel={t(\"metrics:topics_filter_by_topic\")}\n            selectedTopic={selectedTopic}\n            onSetSelectedTopic={onSetSelectedTopic}\n            topicList={topicList}\n            disableToolbar={isDisabled}\n          />\n          <FilterByTime\n            ariaLabel={t(\"metrics:topics_filter_by_time\")}\n            duration={duration}\n            onDurationChange={onSetTimeDuration}\n            disableToolbar={isDisabled}\n            keyText={\"topic-metrics-time-filter\"}\n          />\n          <ToolbarRefresh\n            isRefreshing={isRefreshing}\n            lastUpdated={lastUpdated}\n            onRefresh={onRefresh}\n            ariaLabel={t(\"metrics:topics_refresh\")}\n          />\n        </ToolbarContent>\n      </Toolbar>\n      <Divider />\n    </>\n  );\n};\n","import { Card, CardBody, CardTitle, Divider } from \"@patternfly/react-core\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type {\n  DurationOptions,\n  PartitionBytesMetric,\n  TimeSeriesMetrics,\n} from \"../types\";\nimport { CardBodyLoading } from \"./CardBodyLoading\";\nimport { ChartLinearWithOptionalLimit } from \"./ChartLinearWithOptionalLimit\";\nimport { ChartLogSizePerPartition } from \"./ChartLogSizePerPartition\";\nimport { ChartPopover } from \"./ChartPopover\";\nimport { ChartTotalBytes } from \"./ChartTotalBytes\";\nimport { EmptyStateNoMetricsData } from \"./EmptyStateNoMetricsData\";\nimport { EmptyStateNoMetricsDataForSelection } from \"./EmptyStateNoMetricsDataForSelection\";\nimport { EmptyStateNoTopics } from \"./EmptyStateNoTopics\";\nimport { EmptyStateNoTopicSelected } from \"./EmptyStateNoTopicSelected\";\nimport type { ToolbarRefreshProps } from \"./ToolbarRefresh\";\nimport { ToolbarTopicsMetrics } from \"./ToolbarTopicsMetrics\";\n\ntype CardTopicsMetricsProps = {\n  topics: string[];\n  incomingTopicsData: TimeSeriesMetrics;\n  outgoingTopicsData: TimeSeriesMetrics;\n  partitions: PartitionBytesMetric;\n  incomingMessageRate: TimeSeriesMetrics;\n  duration: DurationOptions;\n  backendUnavailable: boolean;\n  isInitialLoading: boolean;\n  isLoading: boolean;\n  isJustCreated: boolean;\n  selectedTopic: string | undefined;\n  onCreateTopic: () => void;\n  onSelectedTopic: (topic: string | undefined) => void;\n  onDurationChange: (duration: DurationOptions) => void;\n} & Omit<ToolbarRefreshProps, \"ariaLabel\">;\n\nexport const CardTopicsMetrics: FunctionComponent<CardTopicsMetricsProps> = ({\n  topics,\n  incomingTopicsData,\n  outgoingTopicsData,\n  incomingMessageRate,\n  selectedTopic,\n  duration,\n  partitions,\n  backendUnavailable,\n  isInitialLoading,\n  isLoading,\n  isRefreshing,\n  isJustCreated,\n  lastUpdated,\n  onCreateTopic,\n  onRefresh,\n  onSelectedTopic,\n  onDurationChange,\n}) => {\n  const { t } = useTranslation();\n  const noTopics = topics.length === 0;\n  const selectedTopicNotInList =\n    selectedTopic !== undefined &&\n    topics.find((t) => t === selectedTopic) === undefined;\n  const chartEmptyState = selectedTopicNotInList ? (\n    <EmptyStateNoMetricsDataForSelection />\n  ) : (\n    <EmptyStateNoMetricsData />\n  );\n  return (\n    <Card data-testid={\"metrics-topics\"}>\n      <ToolbarTopicsMetrics\n        title={t(\"metrics:topic_metrics\")}\n        duration={duration}\n        onSetTimeDuration={onDurationChange}\n        isDisabled={\n          backendUnavailable || isJustCreated || noTopics || isLoading\n        }\n        isRefreshing={isRefreshing}\n        selectedTopic={selectedTopic}\n        onSetSelectedTopic={onSelectedTopic}\n        onRefresh={onRefresh}\n        topicList={topics}\n        lastUpdated={lastUpdated}\n      />\n      {(() => {\n        switch (true) {\n          case isInitialLoading:\n            return <CardBodyLoading />;\n\n          case backendUnavailable:\n            return (\n              <CardBody>\n                <EmptyStateNoMetricsData />\n              </CardBody>\n            );\n\n          case isJustCreated && !noTopics:\n            return (\n              <CardBody>\n                <EmptyStateNoTopics />\n              </CardBody>\n            );\n\n          case isJustCreated && noTopics:\n            return (\n              <CardBody>\n                <EmptyStateNoTopics onCreateTopic={onCreateTopic} />\n              </CardBody>\n            );\n\n          case selectedTopic !== undefined:\n            return (\n              <>\n                <TotalBytesTitle />\n                <CardBody>\n                  <ChartTotalBytes\n                    incomingTopicsData={incomingTopicsData}\n                    outgoingTopicsData={outgoingTopicsData}\n                    selectedTopic={selectedTopic}\n                    duration={duration}\n                    isLoading={isLoading}\n                    emptyState={chartEmptyState}\n                  />\n                </CardBody>\n                <Divider />\n                <IncomingMessageRate />\n                <CardBody>\n                  <ChartLinearWithOptionalLimit\n                    chartName={t(\"metrics:topic_incoming_message_rate\")}\n                    yLabel={t(\"metrics:topic_incoming_message_rate_y_axis\")}\n                    metrics={incomingMessageRate}\n                    duration={duration}\n                    isLoading={isLoading}\n                    emptyState={chartEmptyState}\n                  />\n                </CardBody>\n                <Divider />\n                <PartitionSizeTitle />\n                <CardBody>\n                  <ChartLogSizePerPartition\n                    partitions={partitions}\n                    topic={selectedTopic}\n                    duration={duration}\n                    isLoading={isLoading}\n                    emptyState={chartEmptyState}\n                  />\n                </CardBody>\n              </>\n            );\n\n          default:\n            return (\n              <>\n                <TotalBytesTitle />\n                <CardBody>\n                  <ChartTotalBytes\n                    incomingTopicsData={incomingTopicsData}\n                    outgoingTopicsData={outgoingTopicsData}\n                    selectedTopic={selectedTopic}\n                    duration={duration}\n                    isLoading={isLoading}\n                    emptyState={chartEmptyState}\n                  />\n                </CardBody>\n                <Divider />\n                <IncomingMessageRate />\n                <CardBody>\n                  <ChartLinearWithOptionalLimit\n                    chartName={t(\"metrics:topic_incoming_message_rate\")}\n                    yLabel={t(\"metrics:topic_incoming_message_rate_y_axis\")}\n                    metrics={incomingMessageRate}\n                    duration={duration}\n                    isLoading={isLoading}\n                    emptyState={chartEmptyState}\n                  />\n                </CardBody>\n                <Divider />\n                <PartitionSizeTitle />\n                <CardBody>\n                  <EmptyStateNoTopicSelected />\n                </CardBody>\n              </>\n            );\n        }\n      })()}\n    </Card>\n  );\n};\n\nconst TotalBytesTitle: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <CardTitle component=\"h3\">\n      {t(\"metrics:total_bytes\")}{\" \"}\n      <ChartPopover\n        title={t(\"metrics:total_bytes_popover_header\")}\n        description={t(\"metrics:topic_metrics_help_text\")}\n      />\n    </CardTitle>\n  );\n};\n\nconst PartitionSizeTitle: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <CardTitle component=\"h3\">\n      {t(\"metrics:topic_partition_size\")}{\" \"}\n      <ChartPopover\n        title={t(\"metrics:topic_partition_size_popover_header\")}\n        description={t(\"metrics:topic_partition_size_help_text\")}\n      />\n    </CardTitle>\n  );\n};\n\nconst IncomingMessageRate: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <CardTitle component=\"h3\">\n      {t(\"metrics:topic_incoming_message_rate\")}{\" \"}\n      <ChartPopover\n        title={t(\"metrics:topic_incoming_message_rate_popover_header\")}\n        description={t(\"metrics:topic_incoming_message_rate_help_text\")}\n      />\n    </CardTitle>\n  );\n};\n","import type { FunctionComponent } from \"react\";\nimport {\n  CardHeader,\n  CardTitle,\n  Divider,\n  Toolbar,\n  ToolbarContent,\n} from \"@patternfly/react-core\";\nimport { FilterByTime } from \"./FilterByTime\";\nimport type { DurationOptions } from \"../types\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { ToolbarRefreshProps } from \"./ToolbarRefresh\";\nimport { ToolbarRefresh } from \"./ToolbarRefresh\";\n\ntype ToolbarKafkaInstanceMetricProps = {\n  title: string;\n  isDisabled: boolean;\n  duration: DurationOptions;\n  onSetTimeDuration: (value: DurationOptions) => void;\n} & Omit<ToolbarRefreshProps, \"ariaLabel\">;\nexport const ToolbarKafkaInstanceMetric: FunctionComponent<\n  ToolbarKafkaInstanceMetricProps\n> = ({\n  title,\n  isDisabled,\n  isRefreshing,\n  lastUpdated,\n  duration,\n  onSetTimeDuration,\n  onRefresh,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <CardHeader>\n        <CardTitle component=\"h2\">{title}</CardTitle>\n      </CardHeader>\n      <Divider />\n      <Toolbar>\n        <ToolbarContent>\n          <FilterByTime\n            ariaLabel={t(\"metrics:kafka_instance_filter_by_time\")}\n            duration={duration}\n            onDurationChange={onSetTimeDuration}\n            keyText={\"kafka-metrics-time-filter\"}\n            disableToolbar={isDisabled}\n          />\n          <ToolbarRefresh\n            isRefreshing={isRefreshing}\n            lastUpdated={lastUpdated}\n            onRefresh={onRefresh}\n            ariaLabel={t(\"metrics:kafka_instance_refresh\")}\n          />\n        </ToolbarContent>\n      </Toolbar>\n      <Divider />\n    </>\n  );\n};\n","import { Card, CardBody, CardTitle, Divider } from \"@patternfly/react-core\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { DurationOptions, TimeSeriesMetrics } from \"../types\";\nimport { CardBodyLoading } from \"./CardBodyLoading\";\nimport { ChartPopover } from \"./ChartPopover\";\nimport { ChartLinearWithOptionalLimit } from \"./ChartLinearWithOptionalLimit\";\nimport { EmptyStateMetricsUnavailable } from \"./EmptyStateMetricsUnavailable\";\nimport { ToolbarKafkaInstanceMetric } from \"./ToolbarKafkaInstanceMetric\";\nimport { formatBytes } from \"./utils\";\nimport { EmptyStateNoMetricsData } from \"./EmptyStateNoMetricsData\";\nimport type { ToolbarRefreshProps } from \"./ToolbarRefresh\";\n\nexport type CardKafkaInstanceMetricsLimits = {\n  diskSpaceLimit: number;\n  connectionsLimit: number;\n  connectionRateLimit: number;\n};\n\nexport type CardKafkaInstanceMetricsProps = {\n  usedDiskMetrics: TimeSeriesMetrics;\n  clientConnectionsMetrics: TimeSeriesMetrics;\n  connectionAttemptRateMetrics: TimeSeriesMetrics;\n  duration: DurationOptions;\n  lastUpdated: Date | undefined;\n  backendUnavailable: boolean;\n  isInitialLoading: boolean;\n  isLoading: boolean;\n  isJustCreated: boolean;\n  onDurationChange: (duration: DurationOptions) => void;\n} & Omit<ToolbarRefreshProps, \"ariaLabel\"> &\n  CardKafkaInstanceMetricsLimits;\n\ntype ChartTitleProps = {\n  title: string;\n  helperText: string;\n};\n\nexport const CardKafkaInstanceMetrics: FunctionComponent<\n  CardKafkaInstanceMetricsProps\n> = ({\n  usedDiskMetrics,\n  clientConnectionsMetrics,\n  connectionAttemptRateMetrics,\n  duration,\n  lastUpdated,\n  backendUnavailable,\n  isInitialLoading,\n  isLoading,\n  isRefreshing,\n  isJustCreated,\n  diskSpaceLimit,\n  connectionsLimit,\n  connectionRateLimit,\n  onRefresh,\n  onDurationChange,\n}) => {\n  const { t } = useTranslation(\"metrics\");\n\n  return (\n    <Card data-testid={\"metrics-kafka-instance\"}>\n      <ToolbarKafkaInstanceMetric\n        title={t(\"kafka_instance_metrics\")}\n        duration={duration}\n        lastUpdated={lastUpdated}\n        onSetTimeDuration={onDurationChange}\n        isDisabled={backendUnavailable || isJustCreated || isLoading}\n        isRefreshing={isRefreshing}\n        onRefresh={onRefresh}\n      />\n      {(() => {\n        switch (true) {\n          case isInitialLoading:\n            return <CardBodyLoading />;\n\n          case backendUnavailable:\n            return (\n              <CardBody>\n                <EmptyStateNoMetricsData />\n              </CardBody>\n            );\n\n          case isJustCreated:\n            return (\n              <CardBody>\n                <EmptyStateMetricsUnavailable />\n              </CardBody>\n            );\n\n          default:\n            return (\n              <>\n                <ChartTitle\n                  title={t(\"used_disk_space\")}\n                  helperText={t(\"used_disk_space_help_text\")}\n                />\n                <CardBody>\n                  <ChartLinearWithOptionalLimit\n                    chartName={t(\"used_disk_space\")}\n                    yLabel={t(\"axis-label-bytes\")}\n                    metrics={usedDiskMetrics}\n                    duration={duration}\n                    formatValue={formatBytes}\n                    usageLimit={diskSpaceLimit}\n                    isLoading={isLoading}\n                    emptyState={<EmptyStateNoMetricsData />}\n                  />\n                </CardBody>\n                <Divider />\n                <ChartTitle\n                  title={t(\"client_connections\")}\n                  helperText={t(\"client_connections_helper_text\")}\n                />\n                <CardBody>\n                  <ChartLinearWithOptionalLimit\n                    chartName={t(\"client_connections\")}\n                    yLabel={t(\"client_connections_y_axis\")}\n                    metrics={clientConnectionsMetrics}\n                    duration={duration}\n                    usageLimit={connectionsLimit}\n                    isLoading={isLoading}\n                    emptyState={<EmptyStateNoMetricsData />}\n                  />\n                </CardBody>\n                <Divider />\n                <ChartTitle\n                  title={t(\"connection_attempt_rate\")}\n                  helperText={t(\"connection_attempt_rate_help_text\")}\n                />\n                <CardBody>\n                  <ChartLinearWithOptionalLimit\n                    chartName={t(\"connection_attempt_rate\")}\n                    yLabel={t(\"connection_attempt_rate_yaxis\")}\n                    metrics={connectionAttemptRateMetrics}\n                    duration={duration}\n                    usageLimit={connectionRateLimit}\n                    isLoading={isLoading}\n                    emptyState={<EmptyStateNoMetricsData />}\n                  />\n                </CardBody>\n              </>\n            );\n        }\n      })()}\n    </Card>\n  );\n};\n\nexport const ChartTitle: FunctionComponent<ChartTitleProps> = ({\n  title,\n  helperText,\n}) => {\n  return (\n    <CardTitle component=\"h3\">\n      {title} <ChartPopover title={title} description={helperText} />\n    </CardTitle>\n  );\n};\n","import {\n  Bullseye,\n  Card,\n  CardBody,\n  CardTitle,\n  Skeleton,\n  Title,\n} from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { ChartPopover } from \"./ChartPopover\";\nimport { EmptyStateNoMetricsData } from \"./EmptyStateNoMetricsData\";\n\ntype CardKpiProps = {\n  metric: string | number | undefined;\n  name: string;\n  popover: string;\n  isLoading: boolean;\n};\n\nexport const CardKpi: VoidFunctionComponent<CardKpiProps> = ({\n  metric,\n  name,\n  popover,\n  isLoading,\n}) => {\n  return (\n    <Card isFullHeight data-testid={name}>\n      <CardTitle component=\"h3\">\n        {name} <ChartPopover title={name} description={popover} />\n      </CardTitle>\n      <CardBody>\n        {!isLoading &&\n          (metric === undefined ? (\n            <Bullseye>\n              <EmptyStateNoMetricsData />\n            </Bullseye>\n          ) : (\n            <Title\n              headingLevel=\"h3\"\n              size=\"4xl\"\n              aria-valuetext={`${metric} ${name}`}\n            >\n              {metric}\n            </Title>\n          ))}\n        {isLoading && <Skeleton width=\"50px\" shape=\"square\" />}\n      </CardBody>\n    </Card>\n  );\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { Alert, AlertActionCloseButton } from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport type MetricsLagAlertProps = {\n  isClosed: boolean;\n  onClickClose: () => void;\n};\n\nexport const MetricsLagAlert: VoidFunctionComponent<MetricsLagAlertProps> = ({\n  isClosed,\n  onClickClose,\n}) => {\n  const { t } = useTranslation(\"metrics\");\n\n  if (!isClosed) {\n    return (\n      <Alert\n        isInline\n        variant=\"info\"\n        title={t(\"metrics_lag_title\")}\n        actionClose={<AlertActionCloseButton onClose={onClickClose} />}\n      >\n        <p>{t(\"metrics_lag_description\")}</p>\n      </Alert>\n    );\n  } else {\n    return <> </>;\n  }\n};\n","import {\n  Alert,\n  AlertVariant,\n  Bullseye,\n  Card,\n  CardBody,\n  CardFooter,\n  CardTitle,\n  Skeleton,\n  Text,\n  TextContent,\n  Title,\n} from \"@patternfly/react-core\";\nimport {\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n} from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { ChartPopover } from \"./ChartPopover\";\nimport { EmptyStateNoMetricsData } from \"./EmptyStateNoMetricsData\";\n\ntype PartitionCardProps = {\n  metric: number | undefined;\n  isLoading: boolean;\n  topicPartitionsLimit: number | undefined;\n};\n\nexport const PartitionCard: VoidFunctionComponent<PartitionCardProps> = ({\n  metric,\n  isLoading,\n  topicPartitionsLimit = 0,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <Card\n      isFullHeight\n      data-testid={t(\"metrics:metric_kpi_topicPartitions_name\")}\n    >\n      <CardTitle component=\"h3\">\n        {t(\"metrics:metric_kpi_topicPartitions_name\")}{\" \"}\n        <ChartPopover\n          title={t(\"metrics:metric_kpi_topicPartitions_name\")}\n          description={t(\"metrics:metric_kpi_topicPartitions_description\")}\n        />\n      </CardTitle>\n      <CardBody>\n        {!isLoading &&\n          (metric === undefined ? (\n            <Bullseye>\n              <EmptyStateNoMetricsData />\n            </Bullseye>\n          ) : (\n            <>\n              <Title\n                headingLevel=\"h3\"\n                size=\"4xl\"\n                aria-valuetext={`${metric} ${t(\n                  \"metrics:metric_kpi_topicPartitions_name\"\n                )}`}\n              >\n                {metric}{\" \"}\n                {(() => {\n                  if (metric >= topicPartitionsLimit) {\n                    return (\n                      <ExclamationCircleIcon color=\"var(--pf-global--danger-color--100)\" />\n                    );\n                  } else if (metric >= topicPartitionsLimit * 0.95) {\n                    return (\n                      <ExclamationTriangleIcon color=\"var(--pf-global--warning-color--100)\" />\n                    );\n                  } else {\n                    return \"\";\n                  }\n                })()}\n              </Title>\n              <TextContent>\n                <Text>\n                  {t(\"metrics:partition_limit\", {\n                    topic: topicPartitionsLimit,\n                  })}\n                </Text>\n              </TextContent>\n            </>\n          ))}\n        {isLoading && <Skeleton width=\"50px\" shape=\"square\" />}\n      </CardBody>\n      {(() => {\n        if (metric && metric >= topicPartitionsLimit) {\n          return (\n            <CardFooter>\n              <Alert\n                isExpandable\n                isInline\n                variant={AlertVariant.danger}\n                title={t(\"metrics:partition_limit_reached_title\")}\n              >\n                <p>{t(\"metrics:partition_limit_reached_description_1\")}</p>\n                <p>{t(\"metrics:partition_limit_reached_description_2\")}</p>\n              </Alert>\n            </CardFooter>\n          );\n        } else if (metric && metric >= topicPartitionsLimit * 0.95) {\n          return (\n            <CardFooter>\n              <Alert\n                role={\"alert\"}\n                isExpandable\n                isInline\n                variant={AlertVariant.warning}\n                title={t(\"metrics:partition_limit_approaching_title\")}\n              >\n                <p>\n                  {t(\"metrics:partition_limit_approaching_description_1\", {\n                    limit: topicPartitionsLimit,\n                  })}\n                </p>\n                <p>{t(\"metrics:partition_limit_approaching_description_2\")}</p>\n              </Alert>\n            </CardFooter>\n          );\n        } else {\n          return \" \";\n        }\n      })()}\n    </Card>\n  );\n};\n","import { assign, createMachine } from \"xstate\";\nimport type {\n  GetKafkaInstanceMetricsResponse,\n  TimeSeriesMetrics,\n} from \"../types\";\nimport { DurationOptions } from \"../types\";\n\nconst MAX_RETRIES = 3;\n\nconst apiState = {\n  initial: \"loading\",\n  states: {\n    loading: {\n      invoke: {\n        src: \"api\",\n      },\n      on: {\n        fetchFail: {\n          actions: \"incrementRetries\",\n          target: \"failure\",\n        },\n      },\n    },\n    failure: {\n      after: {\n        1000: [\n          { cond: \"canRetryFetching\", target: \"loading\" },\n          { target: \"#kafkaInstanceMetrics.criticalFail\" },\n        ],\n      },\n    },\n  },\n};\n\nexport type KafkaInstanceMetricsMachineContext = {\n  lastUpdated: Date | undefined;\n\n  // from the UI elements\n  duration: DurationOptions;\n\n  // from the api\n  usedDiskSpaceMetrics: TimeSeriesMetrics;\n  clientConnectionsMetrics: TimeSeriesMetrics;\n  connectionAttemptRateMetrics: TimeSeriesMetrics;\n  diskSpaceLimit: number | undefined;\n  connectionsLimit: number | undefined;\n  connectionRateLimit: number | undefined;\n  // how many time did we try a fetch (that combines more api)\n  fetchFailures: number;\n};\n\nexport const KafkaInstanceMetricsMachine = createMachine(\n  {\n    predictableActionArguments: true,\n    tsTypes: {} as import(\"./KafkaInstanceMetricsMachine.typegen\").Typegen0,\n    schema: {\n      context: {} as KafkaInstanceMetricsMachineContext,\n      events: {} as\n        | ({ type: \"fetchSuccess\" } & GetKafkaInstanceMetricsResponse)\n        | { type: \"fetchFail\" }\n        // to refresh the data\n        | { type: \"refresh\" }\n        // from the UI elements\n        | { type: \"selectTopic\"; topic: string | undefined }\n        | { type: \"selectDuration\"; duration: DurationOptions },\n    },\n    id: \"kafkaInstanceMetrics\",\n    context: {\n      lastUpdated: undefined,\n      duration: DurationOptions.Last1hour,\n      usedDiskSpaceMetrics: {},\n      clientConnectionsMetrics: {},\n      connectionAttemptRateMetrics: {},\n      diskSpaceLimit: undefined,\n      connectionsLimit: undefined,\n      connectionRateLimit: undefined,\n      fetchFailures: 0,\n    },\n    initial: \"initialLoading\",\n    states: {\n      initialLoading: {\n        ...apiState,\n        tags: \"initialLoading\",\n        entry: \"setFetchTimestamp\",\n        on: {\n          fetchSuccess: [\n            {\n              cond: \"isJustCreated\",\n              actions: \"setMetrics\",\n              target: \"#kafkaInstanceMetrics.withResponse\",\n            },\n            { actions: \"setMetrics\", target: \"justCreated\" },\n          ],\n        },\n      },\n      callApi: {\n        ...apiState,\n        tags: \"loading\",\n        entry: \"setFetchTimestamp\",\n        on: {\n          fetchSuccess: {\n            actions: \"setMetrics\",\n            target: \"#kafkaInstanceMetrics.withResponse\",\n          },\n        },\n      },\n      criticalFail: {\n        tags: \"failed\",\n        on: {\n          refresh: {\n            actions: \"resetRetries\",\n            target: \"callApi\",\n          },\n        },\n      },\n      justCreated: {\n        tags: \"justCreated\",\n        on: {\n          refresh: {\n            target: \"initialLoading\",\n          },\n        },\n      },\n      withResponse: {\n        tags: \"withResponse\",\n        on: {\n          refresh: {\n            target: \"refreshing\",\n          },\n          selectDuration: {\n            actions: \"setDuration\",\n            target: \"callApi\",\n          },\n        },\n      },\n      refreshing: {\n        tags: \"refreshing\",\n        entry: \"setFetchTimestamp\",\n        invoke: {\n          src: \"api\",\n        },\n        on: {\n          fetchSuccess: {\n            actions: \"setMetrics\",\n            target: \"withResponse\",\n          },\n          fetchFail: {\n            // 👀 we silently ignore this happened and go back to the right\n            // state depending on the previous data\n            target: \"withResponse\",\n          },\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      setFetchTimestamp: assign({\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        lastUpdated: (_context) => new Date(),\n      }),\n      setMetrics: assign((_, event) => {\n        const {\n          usedDiskSpaceMetrics,\n          clientConnectionsMetrics,\n          connectionAttemptRateMetrics,\n          diskSpaceLimit,\n          connectionsLimit,\n          connectionRateLimit,\n        } = event;\n        return {\n          usedDiskSpaceMetrics,\n          clientConnectionsMetrics,\n          connectionAttemptRateMetrics,\n          diskSpaceLimit: diskSpaceLimit * 1024 ** 3, // convert it to GiB\n          connectionsLimit,\n          connectionRateLimit,\n        };\n      }),\n      incrementRetries: assign({\n        fetchFailures: (context) => context.fetchFailures + 1,\n      }),\n      resetRetries: assign({\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        fetchFailures: (_context) => 0,\n      }),\n      setDuration: assign((_context, event) => ({\n        duration: event.duration,\n        usedDiskSpaceMetrics: {},\n        clientConnectionsMetrics: {},\n        connectionAttemptRateMetrics: {},\n      })),\n    },\n    guards: {\n      canRetryFetching: (context) => context.fetchFailures < MAX_RETRIES,\n      isJustCreated: (_, event) => {\n        if (event.type === \"fetchSuccess\") {\n          return (\n            Object.keys(event.clientConnectionsMetrics).length > 0 ||\n            Object.keys(event.connectionAttemptRateMetrics).length > 0 ||\n            Object.keys(event.usedDiskSpaceMetrics).length > 0\n          );\n        }\n        return false;\n      },\n    },\n  }\n);\n\nexport type KafkaInstanceMetricsMachineType =\n  typeof KafkaInstanceMetricsMachine;\n","import { assign, createMachine } from \"xstate\";\nimport type {\n  GetTopicsMetricsResponse,\n  PartitionBytesMetric,\n  TimeSeriesMetrics,\n} from \"../types\";\nimport { DurationOptions } from \"../types\";\n\nconst MAX_RETRIES = 3;\n\nconst apiState = {\n  initial: \"loading\",\n  states: {\n    loading: {\n      invoke: {\n        src: \"api\",\n      },\n      on: {\n        fetchFail: {\n          actions: \"incrementRetries\",\n          target: \"failure\",\n        },\n      },\n    },\n    failure: {\n      after: {\n        1000: [\n          { cond: \"canRetryFetching\", target: \"loading\" },\n          { target: \"#topicsMetrics.criticalFail\" },\n        ],\n      },\n    },\n  },\n};\n\nexport type TopicsMetricsMachineContext = {\n  lastUpdated: Date | undefined;\n\n  // from the UI elements\n  selectedTopic: string | undefined;\n  duration: DurationOptions;\n\n  // from the api\n  kafkaTopics: string[];\n  metricsTopics: string[];\n  bytesOutgoing: TimeSeriesMetrics;\n  bytesIncoming: TimeSeriesMetrics;\n  bytesPerPartition: PartitionBytesMetric;\n  incomingMessageRate: TimeSeriesMetrics;\n\n  // how many time did we try a fetch (that combines more api)\n  fetchFailures: number;\n};\n\nexport const TopicsMetricsMachine = createMachine(\n  {\n    tsTypes: {} as import(\"./TopicsMetricsMachine.typegen\").Typegen0,\n    predictableActionArguments: true,\n    schema: {\n      context: {} as TopicsMetricsMachineContext,\n      events: {} as  // called when a new kafka id has been specified\n        | ({ type: \"fetchSuccess\" } & GetTopicsMetricsResponse)\n        | { type: \"fetchFail\" }\n\n        // to refresh the data\n        | { type: \"refresh\" }\n\n        // from the UI elements\n        | { type: \"selectTopic\"; topic: string | undefined }\n        | { type: \"selectDuration\"; duration: DurationOptions },\n    },\n    id: \"topicsMetrics\",\n    context: {\n      lastUpdated: undefined,\n\n      // from the UI elements\n      selectedTopic: undefined,\n      duration: DurationOptions.Last1hour,\n\n      // from the api\n      kafkaTopics: [],\n      metricsTopics: [],\n      bytesOutgoing: {},\n      bytesIncoming: {},\n      bytesPerPartition: {},\n      incomingMessageRate: {},\n\n      // how many time did we try a fetch (that combines more api)\n      fetchFailures: 0,\n    },\n    initial: \"initialLoading\",\n    states: {\n      initialLoading: {\n        ...apiState,\n        tags: \"initialLoading\",\n        entry: \"setFetchTimestamp\",\n        on: {\n          fetchSuccess: [\n            {\n              cond: \"isJustCreated\",\n              actions: \"setMetrics\",\n              target: \"#topicsMetrics.withResponse\",\n            },\n            { actions: \"setMetrics\", target: \"justCreated\" },\n          ],\n        },\n      },\n      callApi: {\n        ...apiState,\n        tags: \"loading\",\n        entry: \"setFetchTimestamp\",\n        on: {\n          fetchSuccess: {\n            actions: \"setMetrics\",\n            target: \"#topicsMetrics.withResponse\",\n          },\n        },\n      },\n      criticalFail: {\n        tags: \"failed\",\n        on: {\n          refresh: {\n            actions: \"resetRetries\",\n            target: \"callApi\",\n          },\n        },\n      },\n      justCreated: {\n        tags: \"justCreated\",\n        on: {\n          refresh: {\n            target: \"initialLoading\",\n          },\n        },\n      },\n      withResponse: {\n        tags: \"withResponse\",\n        initial: \"idle\",\n        states: {\n          idle: {},\n          refreshing: {\n            tags: \"refreshing\",\n            entry: \"setFetchTimestamp\",\n            invoke: {\n              src: \"api\",\n            },\n            on: {\n              fetchSuccess: {\n                actions: \"setMetrics\",\n                target: \"#topicsMetrics.withResponse\",\n              },\n              fetchFail: {\n                // 👀 we silently ignore this happened\n                target: \"#topicsMetrics.withResponse\",\n              },\n            },\n          },\n        },\n        on: {\n          refresh: {\n            target: \"#topicsMetrics.withResponse.refreshing\",\n          },\n          selectTopic: {\n            actions: \"setTopic\",\n            target: \"callApi\",\n          },\n          selectDuration: {\n            actions: \"setDuration\",\n            target: \"callApi\",\n          },\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      setFetchTimestamp: assign({\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        lastUpdated: (_context) => new Date(),\n      }),\n      setMetrics: assign((_context, event) => {\n        const {\n          kafkaTopics,\n          metricsTopics,\n          bytesPerPartition,\n          bytesIncoming,\n          bytesOutgoing,\n          incomingMessageRate,\n        } = event;\n        return {\n          kafkaTopics,\n          metricsTopics,\n          bytesPerPartition,\n          bytesIncoming,\n          bytesOutgoing,\n          incomingMessageRate,\n        };\n      }),\n      incrementRetries: assign({\n        fetchFailures: (context) => context.fetchFailures + 1,\n      }),\n      resetRetries: assign({\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        fetchFailures: (_context) => 0,\n      }),\n      setTopic: assign({\n        selectedTopic: (_context, event) => event.topic,\n      }),\n      setDuration: assign({\n        duration: (_, event) => event.duration,\n      }),\n    },\n    guards: {\n      canRetryFetching: (context) => context.fetchFailures < MAX_RETRIES,\n      isJustCreated: (_, event) => {\n        if (event.type === \"fetchSuccess\") {\n          return (\n            Object.keys(event.bytesIncoming).length > 0 ||\n            Object.keys(event.bytesOutgoing).length > 0 ||\n            Object.keys(event.bytesPerPartition).length > 0 ||\n            Object.keys(event.incomingMessageRate).length > 0\n          );\n        }\n        return false;\n      },\n    },\n  }\n);\n\nexport type TopicsMetricsMachineType = typeof TopicsMetricsMachine;\n","import { assign, createMachine } from \"xstate\";\nimport type { GetMetricsKpiResponse } from \"../types\";\n\nconst MAX_RETRIES = 3;\n\nconst apiState = {\n  initial: \"loading\",\n  states: {\n    loading: {\n      invoke: {\n        src: \"api\",\n      },\n      on: {\n        fetchFail: {\n          actions: \"incrementRetries\",\n          target: \"failure\",\n        },\n      },\n    },\n    failure: {\n      after: {\n        1000: [\n          { cond: \"canRetryFetching\", target: \"loading\" },\n          { target: \"#kpis.criticalFail\" },\n        ],\n      },\n    },\n  },\n};\n\nexport type MetricsKpiMachineContext = {\n  // from the api\n  topics: number | undefined;\n  topicPartitions: number | undefined;\n  consumerGroups: number | undefined;\n  topicPartitionsLimit: number | undefined;\n\n  // how many time did we try a fetch (that combines more api)\n  fetchFailures: number;\n};\n\nexport const MetricsKpiMachine = createMachine(\n  {\n    tsTypes: {} as import(\"./MetricsKpiMachine.typegen\").Typegen0,\n    predictableActionArguments: true,\n    schema: {\n      context: {} as MetricsKpiMachineContext,\n      events: {} as\n        | { type: \"fetch\" }\n        | ({ type: \"fetchSuccess\" } & GetMetricsKpiResponse)\n        | { type: \"fetchFail\" }\n        | { type: \"refresh\" },\n    },\n    id: \"kpis\",\n    context: {\n      topics: undefined,\n      topicPartitions: undefined,\n      consumerGroups: undefined,\n      topicPartitionsLimit: undefined,\n      fetchFailures: 0,\n    },\n    initial: \"initialLoading\",\n    states: {\n      initialLoading: {\n        ...apiState,\n        tags: \"initialLoading\",\n        on: {\n          fetchSuccess: [\n            {\n              cond: \"isJustCreated\",\n              actions: \"setMetrics\",\n              target: \"#kpis.withResponse\",\n            },\n            { actions: \"setMetrics\", target: \"justCreated\" },\n          ],\n        },\n      },\n      callApi: {\n        ...apiState,\n        tags: \"loading\",\n        on: {\n          fetchSuccess: {\n            actions: \"setMetrics\",\n            target: \"#kpis.withResponse\",\n          },\n        },\n      },\n      criticalFail: {\n        tags: \"failed\",\n        on: {\n          refresh: {\n            actions: \"resetRetries\",\n            target: \"callApi\",\n          },\n        },\n      },\n      justCreated: {\n        tags: \"justCreated\",\n        on: {\n          refresh: {\n            target: \"initialLoading\",\n          },\n        },\n      },\n      withResponse: {\n        tags: \"withResponse\",\n        initial: \"idle\",\n        states: {\n          idle: {},\n          refreshing: {\n            tags: \"refreshing\",\n            invoke: {\n              src: \"api\",\n            },\n            on: {\n              fetchSuccess: {\n                actions: \"setMetrics\",\n                target: \"#kpis.withResponse\",\n              },\n              fetchFail: {\n                // 👀 we silently ignore this happened\n                target: \"#kpis.withResponse\",\n              },\n            },\n          },\n        },\n        on: {\n          refresh: {\n            target: \"#kpis.withResponse.refreshing\",\n          },\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      setMetrics: assign((_, event) => {\n        const {\n          topics,\n          topicPartitions,\n          consumerGroups,\n          topicPartitionsLimit,\n        } = event;\n        return {\n          topics,\n          topicPartitions,\n          consumerGroups,\n          topicPartitionsLimit,\n        };\n      }),\n\n      incrementRetries: assign({\n        fetchFailures: (context) => context.fetchFailures + 1,\n      }),\n\n      resetRetries: assign({\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        fetchFailures: (_context) => 0,\n      }),\n    },\n    guards: {\n      canRetryFetching: (context) => context.fetchFailures < MAX_RETRIES,\n      isJustCreated: (_, event) => {\n        if (event.type === \"fetchSuccess\") {\n          return (\n            event.topics !== undefined ||\n            event.topicPartitions !== undefined ||\n            event.consumerGroups !== undefined ||\n            event.topicPartitionsLimit !== undefined\n          );\n        }\n        return false;\n      },\n    },\n  }\n);\n\nexport type MetricsKpiMachineType = typeof MetricsKpiMachine;\n","import { useInterpret } from \"@xstate/react\";\nimport type { FunctionComponent } from \"react\";\nimport { createContext } from \"react\";\nimport type { ActorRefFrom } from \"xstate\";\nimport { timeIntervalsMapping } from \"./consts\";\nimport type { KafkaInstanceMetricsMachineType } from \"./machines\";\nimport { KafkaInstanceMetricsMachine } from \"./machines\";\nimport type { DurationOptions, GetKafkaInstanceMetricsResponse } from \"./types\";\n\nexport const KafkaInstanceMetricsContext = createContext<{\n  service: ActorRefFrom<KafkaInstanceMetricsMachineType>;\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n}>(null!);\n\nexport type KafkaInstanceMetricsProviderProps = {\n  getKafkaInstanceMetrics: (options: {\n    duration: DurationOptions;\n    interval: number;\n  }) => Promise<GetKafkaInstanceMetricsResponse>;\n};\nexport const KafkaInstanceMetricsProvider: FunctionComponent<\n  KafkaInstanceMetricsProviderProps\n> = ({ children, getKafkaInstanceMetrics }) => {\n  const service = useInterpret(\n    () =>\n      KafkaInstanceMetricsMachine.withConfig({\n        services: {\n          api: (context) => {\n            return (callback) => {\n              getKafkaInstanceMetrics({\n                duration: context.duration,\n                interval: timeIntervalsMapping[context.duration].interval,\n              })\n                .then((results) =>\n                  callback({ type: \"fetchSuccess\", ...results })\n                )\n                .catch((e) => {\n                  console.error(\"Failed fetching data\", e);\n                  callback(\"fetchFail\");\n                });\n            };\n          },\n        },\n      }),\n    {\n      devTools: true,\n    }\n  );\n  return (\n    <KafkaInstanceMetricsContext.Provider\n      value={{\n        service,\n      }}\n    >\n      {children}\n    </KafkaInstanceMetricsContext.Provider>\n  );\n};\n","import { useInterpret } from \"@xstate/react\";\nimport type { FunctionComponent } from \"react\";\nimport { createContext } from \"react\";\nimport type { ActorRefFrom } from \"xstate\";\nimport type { MetricsKpiMachineType } from \"./machines\";\nimport { MetricsKpiMachine } from \"./machines\";\nimport type { GetMetricsKpiResponse } from \"./types\";\n\nexport const MetricsKpiContext = createContext<{\n  service: ActorRefFrom<MetricsKpiMachineType>;\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n}>(null!);\n\nexport type MetricsKpiProviderProps = {\n  getMetricsKpi: () => Promise<GetMetricsKpiResponse>;\n};\nexport const MetricsKpiProvider: FunctionComponent<MetricsKpiProviderProps> = ({\n  children,\n  getMetricsKpi,\n}) => {\n  const service = useInterpret(\n    () =>\n      MetricsKpiMachine.withConfig({\n        services: {\n          api: () => {\n            return (callback) => {\n              getMetricsKpi()\n                .then((results) =>\n                  callback({ type: \"fetchSuccess\", ...results })\n                )\n                .catch((e) => {\n                  console.error(\"Failed fetching data\", e);\n                  callback(\"fetchFail\");\n                });\n            };\n          },\n        },\n      }),\n    {\n      devTools: true,\n    }\n  );\n  return (\n    <MetricsKpiContext.Provider\n      value={{\n        service,\n      }}\n    >\n      {children}\n    </MetricsKpiContext.Provider>\n  );\n};\n","import { useInterpret } from \"@xstate/react\";\nimport type { FunctionComponent } from \"react\";\nimport { createContext } from \"react\";\nimport type { ActorRefFrom } from \"xstate\";\nimport { timeIntervalsMapping } from \"./consts\";\nimport type { TopicsMetricsMachineType } from \"./machines\";\nimport { TopicsMetricsMachine } from \"./machines\";\nimport type { DurationOptions, GetTopicsMetricsResponse } from \"./types\";\n\nexport const TopicsMetricsContext = createContext<{\n  service: ActorRefFrom<TopicsMetricsMachineType>;\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n}>(null!);\n\nexport type TopicsMetricsProviderProps = {\n  getTopicsMetrics: (options: {\n    duration: DurationOptions;\n    interval: number;\n    selectedTopic: string | undefined;\n  }) => Promise<GetTopicsMetricsResponse>;\n};\nexport const TopicsMetricsProvider: FunctionComponent<\n  TopicsMetricsProviderProps\n> = ({ children, getTopicsMetrics }) => {\n  const service = useInterpret(\n    () =>\n      TopicsMetricsMachine.withConfig({\n        services: {\n          api: (context) => {\n            return (callback) => {\n              getTopicsMetrics({\n                selectedTopic: context.selectedTopic,\n                duration: context.duration,\n                interval: timeIntervalsMapping[context.duration].interval,\n              })\n                .then((results) =>\n                  callback({ type: \"fetchSuccess\", ...results })\n                )\n                .catch((e) => {\n                  console.error(\"Failed fetching data\", e);\n                  callback(\"fetchFail\");\n                });\n            };\n          },\n        },\n      }),\n    {\n      devTools: true,\n    }\n  );\n  return (\n    <TopicsMetricsContext.Provider\n      value={{\n        service,\n      }}\n    >\n      {children}\n    </TopicsMetricsContext.Provider>\n  );\n};\n","import { useSelector } from \"@xstate/react\";\nimport { useCallback, useContext } from \"react\";\nimport { KafkaInstanceMetricsContext } from \"./KafkaInstanceMetricsProvider\";\nimport type { KafkaInstanceMetricsMachineContext } from \"./machines\";\nimport type { DurationOptions } from \"./types\";\n\ntype SeletorReturn = KafkaInstanceMetricsMachineContext & {\n  isInitialLoading: boolean;\n  isRefreshing: boolean;\n  isLoading: boolean;\n  isFailed: boolean;\n  isJustCreated: boolean;\n};\n\nexport function useKafkaInstanceMetrics() {\n  const { service } = useContext(KafkaInstanceMetricsContext);\n\n  const {\n    usedDiskSpaceMetrics,\n    clientConnectionsMetrics,\n    connectionAttemptRateMetrics,\n    diskSpaceLimit,\n    connectionsLimit,\n    connectionRateLimit,\n    duration,\n    lastUpdated,\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n  } = useSelector<typeof service, SeletorReturn>(\n    service,\n    useCallback(\n      (state) => ({\n        ...state.context,\n        isInitialLoading: state.hasTag(\"initialLoading\"),\n        isRefreshing: state.hasTag(\"refreshing\"),\n        isLoading: state.hasTag(\"loading\"),\n        isFailed: state.hasTag(\"failed\"),\n        isJustCreated: state.hasTag(\"justCreated\"),\n      }),\n      []\n    )\n  );\n\n  const onDurationChange = useCallback(\n    (duration: DurationOptions) =>\n      service.send({ type: \"selectDuration\", duration }),\n    [service]\n  );\n\n  const onRefresh = useCallback(() => service.send(\"refresh\"), [service]);\n\n  return {\n    usedDiskSpaceMetrics,\n    clientConnectionsMetrics,\n    connectionAttemptRateMetrics,\n    diskSpaceLimit,\n    connectionsLimit,\n    connectionRateLimit,\n    lastUpdated,\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n    duration,\n    onDurationChange,\n    onRefresh,\n  };\n}\n","import { useSelector } from \"@xstate/react\";\nimport { useCallback, useContext, useMemo } from \"react\";\nimport type { TopicsMetricsMachineContext } from \"./machines\";\nimport { TopicsMetricsContext } from \"./TopicsMetricsProvider\";\nimport type { DurationOptions } from \"./types\";\n\ntype SelectorReturn = TopicsMetricsMachineContext & {\n  isInitialLoading: boolean;\n  isRefreshing: boolean;\n  isLoading: boolean;\n  isFailed: boolean;\n  isJustCreated: boolean;\n};\n\nexport function useTopicsMetrics() {\n  const { service } = useContext(TopicsMetricsContext);\n\n  const {\n    selectedTopic,\n    duration,\n    kafkaTopics,\n    metricsTopics,\n    bytesIncoming,\n    bytesOutgoing,\n    bytesPerPartition,\n    incomingMessageRate,\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n    lastUpdated,\n  } = useSelector<typeof service, SelectorReturn>(\n    service,\n    useCallback(\n      (state) => ({\n        ...state.context,\n        isInitialLoading: state.hasTag(\"initialLoading\"),\n        isRefreshing: state.hasTag(\"refreshing\"),\n        isLoading: state.hasTag(\"loading\"),\n        isFailed: state.hasTag(\"failed\"),\n        isJustCreated: state.hasTag(\"justCreated\"),\n      }),\n      []\n    )\n  );\n\n  const onTopicChange = useCallback(\n    (topic: string | undefined) => service.send({ type: \"selectTopic\", topic }),\n    [service]\n  );\n\n  const onDurationChange = useCallback(\n    (duration: DurationOptions) =>\n      service.send({ type: \"selectDuration\", duration }),\n    [service]\n  );\n\n  const onRefresh = useCallback(() => service.send(\"refresh\"), [service]);\n\n  const mergedTopics = useMemo((): string[] => {\n    const topics = Array.from(\n      new Set<string>([...kafkaTopics, ...metricsTopics])\n    );\n    topics.sort((a, b) => a.localeCompare(b));\n    return topics;\n  }, [kafkaTopics, metricsTopics]);\n\n  return {\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n    lastUpdated,\n    topics: mergedTopics,\n    selectedTopic,\n    duration,\n    bytesIncoming,\n    bytesOutgoing,\n    bytesPerPartition,\n    incomingMessageRate,\n    onTopicChange,\n    onDurationChange,\n    onRefresh,\n  };\n}\n","import { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport {\n  CardKafkaInstanceMetrics,\n  CardTopicsMetrics,\n  EmptyStateInitialLoading,\n  EmptyStateMetricsUnavailable,\n  MetricsLayout,\n} from \"./components\";\nimport { CardKpi } from \"./components/CardKpi\";\nimport { MetricsLagAlert } from \"./components/MetricsLagAlert\";\nimport { PartitionCard } from \"./components/PartitionCard\";\nimport type { KafkaInstanceMetricsProviderProps } from \"./KafkaInstanceMetricsProvider\";\nimport { KafkaInstanceMetricsProvider } from \"./KafkaInstanceMetricsProvider\";\nimport type { MetricsKpiProviderProps } from \"./MetricsKpiProvider\";\nimport { MetricsKpiProvider } from \"./MetricsKpiProvider\";\nimport type { TopicsMetricsProviderProps } from \"./TopicsMetricsProvider\";\nimport { TopicsMetricsProvider } from \"./TopicsMetricsProvider\";\nimport { useKafkaInstanceMetrics } from \"./useKafkaInstanceMetrics\";\nimport { useMetricsKpi } from \"./useMetricsKpi\";\nimport { useTopicsMetrics } from \"./useTopicsMetrics\";\n\nexport type MetricsProps = {\n  onCreateTopic: () => void;\n  onAlertClose: () => void;\n  hasUserAlreadyClosedAlert: boolean;\n} & KafkaInstanceMetricsProviderProps &\n  TopicsMetricsProviderProps &\n  MetricsKpiProviderProps;\n\nexport const Metrics: VoidFunctionComponent<MetricsProps> = ({\n  getKafkaInstanceMetrics,\n  getTopicsMetrics,\n  getMetricsKpi,\n  onCreateTopic,\n  onAlertClose,\n  hasUserAlreadyClosedAlert,\n}) => {\n  return (\n    <TopicsMetricsProvider getTopicsMetrics={getTopicsMetrics}>\n      <KafkaInstanceMetricsProvider\n        getKafkaInstanceMetrics={getKafkaInstanceMetrics}\n      >\n        <MetricsKpiProvider getMetricsKpi={getMetricsKpi}>\n          <ConnectedMetrics\n            onCreateTopic={onCreateTopic}\n            onClickClose={onAlertClose}\n            isClosed={hasUserAlreadyClosedAlert}\n          />\n        </MetricsKpiProvider>\n      </KafkaInstanceMetricsProvider>\n    </TopicsMetricsProvider>\n  );\n};\n\ntype ConnectedMetricsProps = {\n  onCreateTopic: () => void;\n  onClickClose: () => void;\n  isClosed: boolean;\n};\nconst ConnectedMetrics: VoidFunctionComponent<ConnectedMetricsProps> = ({\n  onCreateTopic,\n  onClickClose,\n  isClosed,\n}) => {\n  const { t } = useTranslation();\n  const kafkaInstanceMetrics = useKafkaInstanceMetrics();\n  const topicsMetrics = useTopicsMetrics();\n  const metricsKpi = useMetricsKpi();\n\n  switch (true) {\n    case kafkaInstanceMetrics.isInitialLoading ||\n      topicsMetrics.isInitialLoading ||\n      metricsKpi.isInitialLoading:\n      return <EmptyStateInitialLoading />;\n    case kafkaInstanceMetrics.isFailed &&\n      topicsMetrics.isFailed &&\n      topicsMetrics.isFailed:\n    case kafkaInstanceMetrics.isJustCreated &&\n      topicsMetrics.isJustCreated &&\n      metricsKpi.isJustCreated:\n      return <EmptyStateMetricsUnavailable />;\n    default:\n      return (\n        <MetricsLayout\n          metricsLagAlert={\n            <MetricsLagAlert onClickClose={onClickClose} isClosed={isClosed} />\n          }\n          topicsKpi={\n            <CardKpi\n              metric={metricsKpi.topics}\n              isLoading={metricsKpi.isInitialLoading || metricsKpi.isLoading}\n              name={t(\"metrics:metric_kpi_topics_name\")}\n              popover={t(\"metrics:metric_kpi_topics_description\")}\n            />\n          }\n          topicPartitionsKpi={\n            <PartitionCard\n              metric={metricsKpi.topicPartitions}\n              isLoading={metricsKpi.isInitialLoading || metricsKpi.isLoading}\n              topicPartitionsLimit={metricsKpi.topicPartitionsLimit}\n            />\n          }\n          consumerGroupKpi={\n            <CardKpi\n              metric={metricsKpi.consumerGroups}\n              isLoading={metricsKpi.isInitialLoading || metricsKpi.isLoading}\n              name={t(\"metrics:metric_kpi_consumerGroup_name\")}\n              popover={t(\"metrics:metric_kpi_consumerGroup_description\")}\n            />\n          }\n          diskSpaceMetrics={<ConnectedKafkaInstanceMetrics />}\n          topicMetrics={\n            <ConnectedTopicsMetrics onCreateTopic={onCreateTopic} />\n          }\n        />\n      );\n  }\n};\n\nconst ConnectedKafkaInstanceMetrics: VoidFunctionComponent = () => {\n  const {\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n    duration,\n    lastUpdated,\n    usedDiskSpaceMetrics,\n    clientConnectionsMetrics,\n    connectionAttemptRateMetrics,\n    diskSpaceLimit,\n    connectionsLimit,\n    connectionRateLimit,\n    onDurationChange,\n    onRefresh,\n  } = useKafkaInstanceMetrics();\n\n  return (\n    <CardKafkaInstanceMetrics\n      usedDiskMetrics={usedDiskSpaceMetrics}\n      clientConnectionsMetrics={clientConnectionsMetrics}\n      connectionAttemptRateMetrics={connectionAttemptRateMetrics}\n      duration={duration}\n      backendUnavailable={isFailed}\n      isInitialLoading={isInitialLoading}\n      isLoading={isLoading}\n      isRefreshing={isRefreshing}\n      isJustCreated={isJustCreated}\n      lastUpdated={lastUpdated}\n      onRefresh={onRefresh}\n      onDurationChange={onDurationChange}\n      diskSpaceLimit={diskSpaceLimit || 0}\n      connectionsLimit={connectionsLimit || 0}\n      connectionRateLimit={connectionRateLimit || 0}\n    />\n  );\n};\n\ntype ConnectedTopicsMetricsProps = {\n  onCreateTopic: () => void;\n};\nconst ConnectedTopicsMetrics: VoidFunctionComponent<\n  ConnectedTopicsMetricsProps\n> = ({ onCreateTopic }) => {\n  const {\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n    lastUpdated,\n    selectedTopic,\n    duration,\n    topics,\n    bytesIncoming,\n    bytesOutgoing,\n    bytesPerPartition,\n    incomingMessageRate,\n    onDurationChange,\n    onTopicChange,\n    onRefresh,\n  } = useTopicsMetrics();\n\n  return (\n    <CardTopicsMetrics\n      backendUnavailable={isFailed}\n      topics={topics}\n      incomingTopicsData={bytesIncoming}\n      outgoingTopicsData={bytesOutgoing}\n      partitions={bytesPerPartition}\n      incomingMessageRate={incomingMessageRate}\n      duration={duration}\n      isInitialLoading={isInitialLoading}\n      isLoading={isLoading}\n      isRefreshing={isRefreshing}\n      isJustCreated={isJustCreated}\n      lastUpdated={lastUpdated}\n      selectedTopic={selectedTopic}\n      onRefresh={onRefresh}\n      onSelectedTopic={onTopicChange}\n      onDurationChange={onDurationChange}\n      onCreateTopic={onCreateTopic}\n    />\n  );\n};\n","import { useSelector } from \"@xstate/react\";\nimport { useCallback, useContext } from \"react\";\nimport type { MetricsKpiMachineContext } from \"./machines\";\nimport { MetricsKpiContext } from \"./MetricsKpiProvider\";\n\ntype SelectorReturn = MetricsKpiMachineContext & {\n  isInitialLoading: boolean;\n  isRefreshing: boolean;\n  isLoading: boolean;\n  isFailed: boolean;\n  isJustCreated: boolean;\n};\n\nexport function useMetricsKpi() {\n  const { service } = useContext(MetricsKpiContext);\n\n  const {\n    topics,\n    topicPartitions,\n    topicPartitionsLimit,\n    consumerGroups,\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n  } = useSelector<typeof service, SelectorReturn>(\n    service,\n    useCallback(\n      (state) => ({\n        ...state.context,\n        isInitialLoading: state.hasTag(\"initialLoading\"),\n        isRefreshing: state.hasTag(\"refreshing\"),\n        isLoading: state.hasTag(\"loading\"),\n        isFailed: state.hasTag(\"failed\"),\n        isJustCreated: state.hasTag(\"justCreated\"),\n      }),\n      []\n    )\n  );\n\n  const onRefresh = useCallback(() => service.send(\"refresh\"), [service]);\n\n  return {\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n    topics,\n    topicPartitions,\n    consumerGroups,\n    topicPartitionsLimit,\n    onRefresh,\n  };\n}\n","import {\n  Button,\n  Card,\n  CardBody,\n  Flex,\n  FlexItem,\n  Modal,\n  ModalVariant,\n  PageSection,\n  Spinner,\n  Stack,\n  StackItem,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { FunctionComponent } from \"react\";\nimport { useState } from \"react\";\nimport \"./Settings.css\";\nimport type { SettingsStatus } from \"./types\";\n\nexport type SettingsProps = {\n  onSubmitReAuthentication: (\n    reauthenticationEnabled: boolean\n  ) => Promise<boolean>;\n  reauthenticationEnabled: boolean;\n};\n\nexport const Settings: FunctionComponent<SettingsProps> = ({\n  onSubmitReAuthentication,\n  reauthenticationEnabled,\n}) => {\n  const { t } = useTranslation(\"kafka\");\n  //states\n  const [connectionStatus, setConnectionStatus] = useState<SettingsStatus>(\n    reauthenticationEnabled ? \"On\" : \"Off\"\n  );\n  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n\n  const onClose = () => {\n    setIsModalOpen(false);\n  };\n\n  const onChangeSwitch = (checked: boolean) => {\n    if (connectionStatus === \"On\") {\n      setIsModalOpen(true);\n    } else {\n      handleReAuthentication(checked);\n    }\n  };\n\n  const handleReAuthentication = (reAuthValue: boolean) => {\n    setConnectionStatus(reAuthValue ? \"TurningOn\" : \"TurningOff\");\n\n    onSubmitReAuthentication(reAuthValue)\n      .then((reauthentication) => {\n        setConnectionStatus(reauthentication ? \"On\" : \"Off\");\n\n        // TODO: send notification\n        // addAlert({\n        //   variant: \"success\",\n        //   title: t(\"settings.success_alert\", {\n        //     status: reauthentication ? \"on\" : \"off\",\n        //   }),\n        // });\n      })\n      .catch(() => {\n        setConnectionStatus(!reAuthValue ? \"On\" : \"Off\");\n\n        // TODO: send notification\n        // addAlert({\n        //   variant: \"danger\",\n        //   title: t(\"settings.error_alert_title\"),\n        //   description: t(\"settings.error_alert_title_description\"),\n        // });\n      });\n  };\n\n  const onTurnOff = () => {\n    setIsModalOpen(false);\n    handleReAuthentication(false);\n  };\n\n  return (\n    <PageSection isFilled={true} hasOverflowScroll={true} aria-label={\"TODO\"}>\n      <Stack hasGutter>\n        <StackItem>\n          <Card>\n            <CardBody>{t(\"settings.kafka_instance_settings_label\")}</CardBody>\n          </Card>\n        </StackItem>\n        <StackItem>\n          <Card className={\"mas--settings__card\"}>\n            <CardBody>\n              <Flex flexWrap={{ default: \"nowrap\" }}>\n                <FlexItem grow={{ default: \"grow\" }}>\n                  <Flex>\n                    <FlexItem\n                      component={\"span\"}\n                      spacer={{ default: \"spacerSm\" }}\n                    >\n                      <strong>\n                        {t(\"settings.connection_re_authentication_label\")}\n                        {\":\"}\n                      </strong>\n                    </FlexItem>\n                    <FlexItem>\n                      {(() => {\n                        switch (connectionStatus) {\n                          case \"On\":\n                            return t(\n                              \"settings.Connection_re_authentication_states.on\"\n                            );\n                          case \"TurningOff\":\n                            return (\n                              <>\n                                <Spinner\n                                  size=\"md\"\n                                  aria-valuetext={t(\n                                    \"settings.Connection_re_authentication_states.turning_off\"\n                                  )}\n                                  aria-label={t(\n                                    \"settings.connection_re_authentication_label\"\n                                  )}\n                                />{\" \"}\n                                {t(\n                                  \"settings.Connection_re_authentication_states.turning_off\"\n                                )}\n                              </>\n                            );\n                          case \"Off\":\n                            return t(\n                              \"settings.Connection_re_authentication_states.off\"\n                            );\n                          case \"TurningOn\":\n                            return (\n                              <>\n                                <Spinner\n                                  size=\"md\"\n                                  aria-valuetext={\n                                    \"settings.Connection_re_authentication_states.turning_on\"\n                                  }\n                                  aria-label={t(\n                                    \"settings.connection_re_authentication_label\"\n                                  )}\n                                />{\" \"}\n                                {t(\n                                  \"settings.Connection_re_authentication_states.turning_on\"\n                                )}\n                              </>\n                            );\n                          default:\n                            return null;\n                        }\n                      })()}\n                    </FlexItem>\n                  </Flex>\n                </FlexItem>\n                <FlexItem>\n                  <Switch\n                    id=\"Connection-re-authentication-switch\"\n                    aria-label={t(\n                      \"settings.connection_re_authentication_label\"\n                    )}\n                    isChecked={\n                      connectionStatus === \"On\" ||\n                      connectionStatus === \"TurningOff\"\n                    }\n                    isDisabled={\n                      connectionStatus === \"TurningOff\" ||\n                      connectionStatus === \"TurningOn\"\n                    }\n                    onChange={onChangeSwitch}\n                  />\n                </FlexItem>\n                <Modal\n                  variant={ModalVariant.small}\n                  isOpen={isModalOpen}\n                  title={t(\"settings.warning_title\")}\n                  titleIconVariant={\"warning\"}\n                  actions={[\n                    <Button\n                      key={\"confirm\"}\n                      variant=\"primary\"\n                      onClick={onTurnOff}\n                    >\n                      {t(\"settings.turn_off_button_label\")}\n                    </Button>,\n                    <Button key={\"cancel\"} variant=\"link\" onClick={onClose}>\n                      {t(\"common:cancel\")}\n                    </Button>,\n                  ]}\n                  onClose={onClose}\n                >\n                  {t(\"settings.warning_description\")}\n                </Modal>\n              </Flex>\n            </CardBody>\n          </Card>\n        </StackItem>\n      </Stack>\n    </PageSection>\n  );\n};\n","export type SelectOptions = {\n  key: string;\n  value: string;\n  isPlaceholder?: boolean;\n  isDisabled?: boolean;\n};\n\nexport const retentionTimeSelectOptions: SelectOptions[] = [\n  { key: \"days\", value: \"days\", isPlaceholder: true },\n  { key: \"hours\", value: \"hours\" },\n  { key: \"minutes\", value: \"minutes\" },\n  { key: \"seconds\", value: \"seconds\" },\n  { key: \"milliseconds\", value: \"milliseconds\" },\n];\n\nexport const retentionSizeSelectOptions: SelectOptions[] = [\n  { key: \"bytes\", value: \"bytes\", isPlaceholder: true },\n  { key: \"kibibytes\", value: \"kibibytes\" },\n  { key: \"mebibytes\", value: \"mebibytes\" },\n  { key: \"gibibytes\", value: \"gibibytes\" },\n  { key: \"tebibytes\", value: \"tebibytes\" },\n];\n\nexport type IDropdownOption = {\n  value?: string;\n  label?: string;\n  key?: string;\n  isDisabled?: boolean;\n};\n","import { FormGroup, Popover, TextInput } from \"@patternfly/react-core\";\nimport { HelpIcon } from \"@patternfly/react-icons\";\nimport type { FunctionComponent } from \"react\";\n\nexport interface TextWithLabelPopoverProps {\n  fieldId: string;\n  fieldLabel: string;\n  fieldValue?: string;\n  popoverHeader: string;\n  popoverBody: string;\n  btnAriaLabel: string;\n  showUnlimited?: boolean;\n}\n\nexport const TextWithLabelPopover: FunctionComponent<\n  TextWithLabelPopoverProps\n> = ({\n  fieldId,\n  fieldLabel,\n  btnAriaLabel,\n  fieldValue,\n  popoverBody,\n  popoverHeader,\n  showUnlimited,\n}) => {\n  let displayText = \"-\";\n\n  if (\n    showUnlimited === true &&\n    fieldValue !== undefined &&\n    parseInt(fieldValue) < 0\n  ) {\n    displayText = \"Unlimited\"; // TODO i18n\n  } else if (fieldValue) {\n    displayText = fieldValue;\n  }\n\n  return (\n    <FormGroup\n      fieldId={fieldId}\n      label={fieldLabel}\n      className=\"kafka-ui-form-group--readonly\"\n      labelIcon={\n        <Popover\n          headerContent={<div>{popoverHeader}</div>}\n          bodyContent={<div>{popoverBody}</div>}\n        >\n          <button\n            aria-label={btnAriaLabel}\n            onClick={(event) => event.preventDefault()}\n            className=\"pf-c-form__group-label-help\"\n          >\n            <HelpIcon noVerticalAlign />\n          </button>\n        </Popover>\n      }\n    >\n      <TextInput\n        readOnlyVariant={\"plain\"}\n        type=\"text\"\n        id={fieldId}\n        name={fieldId}\n        value={displayText}\n      />\n    </FormGroup>\n  );\n};\n","import {\n  FormSection,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport convert from \"convert\";\nimport type React from \"react\";\nimport { TextWithLabelPopover } from \"./TextWithLabelPopover\";\n\ntype CleanupProps = {\n  defaultLogSegmentSize: bigint;\n  defaultSegmentTime: bigint;\n  defaultSegmentJitterTime: bigint;\n  defaultFileDeleteDelay: bigint;\n};\n\nconst Cleanup: React.FC<CleanupProps> = ({\n  defaultFileDeleteDelay,\n  defaultLogSegmentSize,\n  defaultSegmentJitterTime,\n  defaultSegmentTime,\n}) => {\n  const { t } = useTranslation([\"create-topic\", \"common\"]);\n\n  return (\n    <FormSection title={t(\"cleanup\")} id=\"cleanup\" titleElement={\"h2\"}>\n      <TextContent>\n        <Text component={TextVariants.p} className=\"section-info\">\n          {t(\"cleanup_section_info\")}\n        </Text>\n      </TextContent>\n\n      <TextWithLabelPopover\n        fieldId=\"log-segment-size\"\n        btnAriaLabel={t(\"log_segment_size\")}\n        fieldLabel={t(\"log_segment_size\")}\n        fieldValue={t(\"bytes_to_gibibyte\", {\n          bytes: defaultLogSegmentSize,\n          gibibyte: convert(Number(defaultLogSegmentSize), \"bytes\").to(\n            \"gibibytes\"\n          ),\n        })}\n        popoverBody={t(\"log_segment_size\")}\n        popoverHeader={t(\"log_segment_size_description\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"segement-time\"\n        btnAriaLabel={t(\"segement_time\")}\n        fieldLabel={t(\"segement_time\")}\n        fieldValue={t(\"milliseconds_to_days\", {\n          milliseconds: defaultSegmentTime,\n          days: convert(Number(defaultSegmentTime), \"milliseconds\").to(\"days\"),\n        })}\n        popoverBody={t(\"segement_time_description\")}\n        popoverHeader={t(\"segement_time\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"segment-jitter-time\"\n        btnAriaLabel={t(\"segment_jitter_time\")}\n        fieldLabel={t(\"segment_jitter_time\")}\n        fieldValue={t(\"milliseconds_time\", { value: defaultSegmentJitterTime })}\n        popoverBody={t(\"segment_jitter_time_description\")}\n        popoverHeader={t(\"segment_jitter_time\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"file-delete-delay\"\n        btnAriaLabel={t(\"file_delete_delay\")}\n        fieldLabel={t(\"file_delete_delay\")}\n        fieldValue={t(\"milliseconds_to_minute\", {\n          milliseconds: defaultFileDeleteDelay,\n          minute: convert(Number(defaultFileDeleteDelay), \"milliseconds\").to(\n            \"minutes\"\n          ),\n        })}\n        popoverBody={t(\"file_delete_delay_description\")}\n        popoverHeader={t(\"file_delete_delay\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"preallocate-log-segment-files\"\n        btnAriaLabel={t(\"preallocate_log_segment_files\")}\n        fieldLabel={t(\"preallocate_log_segment_files\")}\n        fieldValue={t(\"common:disabled\")}\n        popoverBody={t(\"preallocate_log_segment_files_description\")}\n        popoverHeader={t(\"preallocate_log_segment_files\")}\n      />\n    </FormSection>\n  );\n};\n\nexport { Cleanup };\n","import type { NumberInputProps, SelectProps } from \"@patternfly/react-core\";\nimport {\n  Flex,\n  FlexItem,\n  NumberInput,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport type React from \"react\";\nimport type { Topic } from \"ui-models/src/models/topic\";\nimport { RetentionTimeUnits } from \"../../KafkaTopics/types\";\nimport type { SelectOptions } from \"./types\";\n\nexport type CustomRetentionMessageProps = NumberInputProps &\n  SelectProps & {\n    id?: string;\n    selectOptions: SelectOptions[];\n    topicData: Topic;\n    setTopicData: (data: Topic) => void;\n  };\n\nconst CustomRetentionMessage: React.FC<CustomRetentionMessageProps> = ({\n  onToggle,\n  isOpen,\n  selectOptions,\n  topicData,\n  setTopicData,\n}) => {\n  const onSelect: SelectProps[\"onSelect\"] = (event, value) => {\n    // setTopicData({\n    //   ...topicData,\n    //   customRetentionTimeUnit: value as RetentionTimeUnits,\n    // });\n\n    //}\n\n    onToggle(false, event);\n  };\n\n  const handleTouchSpin = (operator: string) => {\n    if (operator === \"+\") {\n      // setTopicData({\n      //   ...topicData,\n      //   retentionTime: topicData.retentionTime + 1,\n      // });\n    } else if (operator === \"-\") {\n      // setTopicData({\n      //   ...topicData,\n      //   retentionTime: topicData.retentionTime - 1,\n      // });\n    }\n  };\n\n  const onChangeTouchSpin = (event: React.FormEvent<HTMLInputElement>) => {\n    // setTopicData({\n    //   ...topicData,\n    //   retentionTime: Number(event.currentTarget.value),\n    // });\n  };\n\n  return (\n    <div className=\"kafka-ui--radio__parameters\">\n      <Flex>\n        <FlexItem>\n          <NumberInput\n            onMinus={() => handleTouchSpin(\"-\")}\n            onPlus={() => handleTouchSpin(\"+\")}\n            value={\n              Number(\n                topicData[\"retention.ms\"].value\n              ) /* TODO precision loss from BigInt to Number, handle this as a string */\n            }\n            onChange={(event) => onChangeTouchSpin(event)}\n            min={0}\n          />\n        </FlexItem>\n        <FlexItem>\n          <Select\n            variant={SelectVariant.single}\n            aria-label=\"Select Input\"\n            onToggle={onToggle}\n            onSelect={onSelect}\n            selections={RetentionTimeUnits.MILLISECOND /* TODO */}\n            isOpen={isOpen}\n          >\n            {selectOptions?.map((s) => (\n              <SelectOption\n                key={s.key}\n                value={s.value}\n                isPlaceholder={s.isPlaceholder}\n              />\n            ))}\n          </Select>\n        </FlexItem>\n      </Flex>\n    </div>\n  );\n};\n\nexport { CustomRetentionMessage };\n","import type { NumberInputProps, SelectProps } from \"@patternfly/react-core\";\nimport {\n  Flex,\n  FlexItem,\n  NumberInput,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport type React from \"react\";\nimport type { Topic } from \"ui-models/src/models/topic\";\nimport { RetentionSizeUnits } from \"../../KafkaTopics/types\";\nimport type { SelectOptions } from \"./types\";\n\nexport type CustomRetentionSizeProps = NumberInputProps &\n  SelectProps & {\n    id?: string;\n    selectOptions: SelectOptions[];\n    topicData: Topic;\n    setTopicData: (data: Topic) => void;\n  };\n\nconst CustomRetentionSize: React.FC<CustomRetentionSizeProps> = ({\n  onToggle,\n  isOpen,\n  selectOptions,\n  topicData,\n  setTopicData,\n}) => {\n  const onSelect: SelectProps[\"onSelect\"] = (event, value) => {\n    // setTopicData({\n    //   ...topicData,\n    //   customRetentionSizeUnit: value as RetentionSizeUnits,\n    // });\n\n    //}\n\n    onToggle(false, event);\n  };\n\n  const handleTouchSpin = (operator: string) => {\n    if (operator === \"+\") {\n      // setTopicData({\n      //   ...topicData,\n      //   retentionBytes: topicData.retentionBytes + 1,\n      // });\n    } else if (operator === \"-\") {\n      // setTopicData({\n      //   ...topicData,\n      //   retentionBytes: topicData.retentionBytes - 1,\n      // });\n    }\n  };\n\n  const onChangeTouchSpin = (event: React.FormEvent<HTMLInputElement>) => {\n    // setTopicData({\n    //   ...topicData,\n    //   retentionBytes: Number(event.currentTarget.value),\n    // });\n  };\n\n  return (\n    <div className=\"kafka-ui--radio__parameters\">\n      <Flex>\n        <FlexItem>\n          <NumberInput\n            onMinus={() => handleTouchSpin(\"-\")}\n            onPlus={() => handleTouchSpin(\"+\")}\n            value={\n              Number(\n                topicData[\"retention.bytes\"].value\n              ) /* TODO precision loss from BigInt to Number */\n            }\n            onChange={(event) => onChangeTouchSpin(event)}\n            min={0}\n          />\n        </FlexItem>\n        <FlexItem>\n          <Select\n            variant={SelectVariant.single}\n            aria-label=\"Select Input\"\n            onToggle={onToggle}\n            onSelect={onSelect}\n            selections={RetentionSizeUnits.BYTE /* TODO */}\n            isOpen={isOpen}\n          >\n            {selectOptions?.map((s) => (\n              <SelectOption\n                key={s.key}\n                value={s.value}\n                isPlaceholder={s.isPlaceholder}\n              />\n            ))}\n          </Select>\n        </FlexItem>\n      </Flex>\n    </div>\n  );\n};\n\nexport { CustomRetentionSize };\n","import type { NumberInputProps } from \"@patternfly/react-core\";\nimport {\n  FormSection,\n  NumberInput,\n  Radio,\n  Stack,\n  Text,\n  TextContent,\n  TextInput,\n  TextVariants,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport {\n  FormGroupWithPopover,\n  useTranslation,\n} from \"@rhoas/app-services-ui-components\";\nimport type { FunctionComponent } from \"react\";\nimport { useCallback, useState } from \"react\";\nimport type { Topic } from \"ui-models/src/models/topic\";\nimport {\n  RetentionSizeUnits,\n  RetentionTimeUnits,\n} from \"../../KafkaTopics/types\";\nimport { CustomRetentionMessage } from \"./CustomRetentionMessage\";\nimport { CustomRetentionSize } from \"./CustomRetentionSize\";\nimport { TextWithLabelPopover } from \"./TextWithLabelPopover\";\nimport {\n  retentionSizeSelectOptions,\n  retentionTimeSelectOptions,\n} from \"./types\";\nimport { useValidateTopic } from \"./useValidateTopic\";\n\nexport type CoreConfigurationProps = {\n  isCreate?: boolean;\n  topicData: Topic;\n  setTopicData: (data: Topic) => void;\n  checkTopicName: (value: string) => Promise<boolean>;\n  //initialPartition: number | undefined;\n  invalidText: string;\n  setInvalidText: (message: string) => void;\n  setTopicValidated: (error: ValidatedOptions) => void;\n  topicValidated: ValidatedOptions;\n  setWarning: (isWarning: boolean) => void;\n  warning: boolean;\n  availablePartitionLimit: number;\n};\n\nconst CoreConfiguration: FunctionComponent<CoreConfigurationProps> = ({\n  isCreate,\n  topicData,\n  setTopicData,\n  invalidText,\n  setInvalidText,\n  setTopicValidated,\n  topicValidated,\n  availablePartitionLimit,\n}) => {\n  const { t } = useTranslation([\"create-topic\"]);\n  const { validateName } = useValidateTopic();\n  const [retentionSizeUnit, setRetentionSizeUnit] =\n    useState<RetentionSizeUnits>(RetentionSizeUnits.BYTE);\n  const [retentionTimeUnit, setRetentionTimeUnit] =\n    useState<RetentionTimeUnits>(RetentionTimeUnits.MILLISECOND);\n  const [isRetentionTimeSelectOpen, setIsRetentionTimeSelectOpen] =\n    useState<boolean>();\n  const [isRetentionSizeSelectOpen, setIsRetentionSizeSelectOpen] =\n    useState<boolean>();\n\n  const validationCheck = useCallback(\n    (value: string) => {\n      const errorMessage = validateName(value);\n      if (errorMessage) {\n        setInvalidText(errorMessage);\n        setTopicValidated(ValidatedOptions.error);\n      } else {\n        setTopicValidated(ValidatedOptions.default);\n      }\n    },\n    [setInvalidText, setTopicValidated, validateName]\n  );\n\n  const handleRetentionMessageSize = (value: string) => {\n    switch (value) {\n      case RetentionSizeUnits.CUSTOM:\n        setRetentionSizeUnit(RetentionSizeUnits.CUSTOM);\n        break;\n      case RetentionTimeUnits.UNLIMITED:\n        setRetentionSizeUnit(RetentionSizeUnits.UNLIMITED);\n    }\n  };\n\n  const onRetentionTimeToggle = (isOpen: boolean) => {\n    setIsRetentionTimeSelectOpen(isOpen);\n  };\n\n  const onRetentionSizeToggle = (isOpen: boolean) => {\n    setIsRetentionSizeSelectOpen(isOpen);\n  };\n\n  const handleRetentionMessageTime = (value: string) => {\n    switch (value) {\n      case RetentionTimeUnits.CUSTOM:\n        setRetentionTimeUnit(RetentionTimeUnits.CUSTOM);\n        break;\n      case RetentionTimeUnits.UNLIMITED:\n        setRetentionTimeUnit(RetentionTimeUnits.UNLIMITED);\n    }\n  };\n\n  const handleTextInputChange = (value: string) => {\n    validationCheck(value);\n    setTopicData({ ...topicData, name: value });\n  };\n\n  const onPartitionsChange: NumberInputProps[\"onChange\"] = (event) => {\n    // setTopicData({\n    //   ...topicData,\n    //   partitions.length: Number((event.target as HTMLInputElement).value),\n    // });\n  };\n  const handleOnPlus = () => {\n    // setTopicData({\n    //   ...topicData,\n    //   partitions.length: topicData.partitions.length + 1,\n    // });\n  };\n\n  const handleOnMinus = () => {\n    // setTopicData({\n    //   ...topicData,\n    //   partitions.length: topicData.partitions.length - 1,\n    // });\n  };\n\n  const retentionTimeInput = (\n    <CustomRetentionMessage\n      toggleId=\"core-config-retention-dropdowntoggle\"\n      name=\"retention-ms\"\n      topicData={topicData}\n      setTopicData={setTopicData}\n      onToggle={onRetentionTimeToggle}\n      isOpen={isRetentionTimeSelectOpen}\n      selectOptions={retentionTimeSelectOptions}\n    />\n  );\n\n  const retentionSizeInput = (\n    <CustomRetentionSize\n      toggleId=\"core-config-retention-size-dropdowntoggle\"\n      name=\"retention-bytes\"\n      topicData={topicData}\n      setTopicData={setTopicData}\n      onToggle={onRetentionSizeToggle}\n      isOpen={isRetentionSizeSelectOpen}\n      selectOptions={retentionSizeSelectOptions}\n    />\n  );\n\n  return (\n    <FormSection\n      title={t(\"core_configuration\")}\n      id=\"core-configuration\"\n      titleElement={\"h2\"}\n    >\n      <TextContent>\n        <Text component={TextVariants.p} className=\"section-info\">\n          {t(\"core_config_info\")}\n        </Text>\n      </TextContent>\n      {isCreate ? (\n        <FormGroupWithPopover\n          labelHead={t(\"topic_name\")}\n          fieldId=\"create-topic-name\"\n          fieldLabel={t(\"topic_name\")}\n          labelBody={t(\"topic_name_description\")}\n          buttonAriaLabel=\"More info for topic name field\"\n          helperTextInvalid={invalidText}\n          validated={topicValidated}\n          isRequired={true}\n          helperText={t(\"topic_name_helper_text\")}\n        >\n          <TextInput\n            isRequired\n            type=\"text\"\n            id=\"create-topic-name\"\n            name=\"name\"\n            value={topicData.name}\n            onChange={handleTextInputChange}\n            label={t(\"topic_name\")}\n            placeholder={t(\"enter_name\")}\n            validated={topicValidated}\n          />\n        </FormGroupWithPopover>\n      ) : (\n        <TextWithLabelPopover\n          fieldId=\"topic-name\"\n          btnAriaLabel=\"topic detail name\"\n          fieldLabel=\"Name\"\n          fieldValue={topicData.name}\n          popoverBody={t(\"topic_name_description\")}\n          popoverHeader={t(\"topic_name\")}\n        />\n      )}\n\n      <FormGroupWithPopover\n        fieldId=\"create-topic-partitions\"\n        fieldLabel=\"Partitions\"\n        labelHead={t(\"partitions\")}\n        labelBody={t(\"partitions_description\")}\n        buttonAriaLabel=\"More info for partitions field\"\n        helperText={\n          topicData.partitions.length >= availablePartitionLimit\n            ? t(\"partitions_warning\")\n            : t(\"partition_helper_text\")\n        }\n        validated={\n          topicData.partitions.length >= availablePartitionLimit\n            ? \"warning\"\n            : \"default\"\n        }\n      >\n        <NumberInput\n          id=\"create-topic-partitions\"\n          inputName=\"num-partitions\"\n          onChange={onPartitionsChange}\n          data-testid={t(\"partitions\")}\n          onPlus={handleOnPlus}\n          onMinus={handleOnMinus}\n          value={topicData.partitions.length}\n          plusBtnProps={{ name: \"num-partitions\" }}\n          minusBtnProps={{ name: \"num-partitions\" }}\n          min={0}\n        />\n      </FormGroupWithPopover>\n\n      <TextWithLabelPopover\n        fieldId=\"replicas\"\n        btnAriaLabel={t(\"replicas\")}\n        fieldLabel={t(\"replicas\")}\n        fieldValue={\"3\" /* TODO */}\n        popoverBody={t(\"replicas_description\")}\n        popoverHeader={t(\"replicas\")}\n      />\n      <TextWithLabelPopover\n        fieldId=\"min-insync-replicas\"\n        btnAriaLabel=\"topic detail min-in-sync replica\"\n        fieldLabel=\"Minimum in-sync replicas\"\n        fieldValue={topicData[\"min.insync.replicas\"].toString()}\n        popoverBody={t(\"min_insync_replicas_description\")}\n        popoverHeader={t(\"min_insync_replicas\")}\n      />\n      <FormGroupWithPopover\n        fieldId=\"retention\"\n        fieldLabel=\"Retention time\"\n        labelHead={t(\"retention_time\")}\n        labelBody={t(\"retention_time_description\")}\n        buttonAriaLabel=\"More info for retention time field\"\n      >\n        <Stack hasGutter>\n          <Radio\n            isChecked={\n              retentionTimeUnit === RetentionTimeUnits.DAY ||\n              retentionTimeUnit === RetentionTimeUnits.WEEK ||\n              retentionTimeUnit === RetentionTimeUnits.CUSTOM\n            }\n            name=\"custom-retention-time\"\n            onChange={() =>\n              handleRetentionMessageTime(RetentionTimeUnits.CUSTOM)\n            }\n            label={retentionTimeInput}\n            className=\"kafka-ui--radio-label__number-input\"\n            aria-label=\"custom duration\"\n            id=\"custom-retention-time\"\n            value={RetentionTimeUnits.CUSTOM}\n          />\n          <Radio\n            isChecked={retentionTimeUnit === RetentionTimeUnits.UNLIMITED}\n            name=\"unlimited-retention-time\"\n            onChange={() =>\n              handleRetentionMessageTime(RetentionTimeUnits.UNLIMITED)\n            }\n            label=\"Unlimited time\"\n            aria-label=\"Unlimited\"\n            id=\"unlimited-retention-time\"\n            value={RetentionTimeUnits.UNLIMITED}\n          />\n        </Stack>\n      </FormGroupWithPopover>\n      <FormGroupWithPopover\n        fieldId=\"retention-size\"\n        fieldLabel=\"Retention size\"\n        labelHead={t(\"retention_size\")}\n        labelBody={t(\"retention_size_description\")}\n        buttonAriaLabel=\"More info for retention size field\"\n      >\n        <Stack hasGutter>\n          <Radio\n            isChecked={retentionSizeUnit === RetentionSizeUnits.CUSTOM}\n            name=\"custom-retention-size\"\n            onChange={() =>\n              handleRetentionMessageSize(RetentionSizeUnits.CUSTOM)\n            }\n            label={retentionSizeInput}\n            className=\"kafka-ui--radio-label__number-input\"\n            aria-label=\"custom size\"\n            id=\"custom-retention-size\"\n            value={RetentionSizeUnits.CUSTOM}\n          />\n          <Radio\n            isChecked={retentionSizeUnit === RetentionSizeUnits.UNLIMITED}\n            name=\"unlimited-retention-size\"\n            onChange={() =>\n              handleRetentionMessageSize(RetentionSizeUnits.UNLIMITED)\n            }\n            label=\"Unlimited size\"\n            aria-label=\"Unlimited\"\n            id=\"unlimited-retention-size\"\n            value={RetentionSizeUnits.UNLIMITED}\n          />\n        </Stack>\n      </FormGroupWithPopover>\n    </FormSection>\n  );\n};\n\nexport { CoreConfiguration };\n","import { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { useCallback } from \"react\";\n\nexport const useValidateTopic = (): {\n  validateName: (name: string) => string | undefined;\n} => {\n  const { t } = useTranslation([\"create-topic\"]);\n\n  return {\n    validateName: useCallback(\n      (name) => {\n        const legalNameChars = new RegExp(\"^[a-zA-Z0-9._-]+$\");\n        if (name.length && !legalNameChars.test(name)) {\n          return t(\"topic_name_helper_text\");\n        } else if (name.length > 249) {\n          return t(\"cannot_exceed_characters\");\n        } else if (name === \".\" || name === \"..\") {\n          return t(\"invalid_name_with_dot\");\n        }\n        return undefined;\n      },\n      [t]\n    ),\n  };\n};\n","import {\n  FormSection,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type React from \"react\";\nimport { TextWithLabelPopover } from \"./TextWithLabelPopover\";\n\ntype FlushProps = {\n  defaultFlushIntervalMessages: bigint;\n  defaultFlushIntervalTime: bigint;\n};\n\nconst Flush: React.FC<FlushProps> = ({\n  defaultFlushIntervalMessages,\n  defaultFlushIntervalTime,\n}) => {\n  const { t } = useTranslation([\"create-topic\"]);\n\n  return (\n    <FormSection title={t(\"flush\")} id=\"flush\" titleElement={\"h2\"}>\n      <TextContent>\n        <Text component={TextVariants.p} className=\"section-info\">\n          {t(\"flush_section_info\")}\n        </Text>\n      </TextContent>\n\n      <TextWithLabelPopover\n        fieldId=\"flush-interval-messages\"\n        btnAriaLabel={t(\"flush_interval_messages\")}\n        fieldLabel={t(\"flush_interval_messages\")}\n        fieldValue={t(\"messages_time\", {\n          value: defaultFlushIntervalMessages,\n        })}\n        popoverBody={t(\"flush_interval_messages_description\")}\n        popoverHeader={t(\"flush_interval_messages\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"flush-interval-time\"\n        btnAriaLabel={t(\"flush_interval_time\")}\n        fieldLabel={t(\"flush_interval_time\")}\n        fieldValue={t(\"milliseconds_time\", { value: defaultFlushIntervalTime })}\n        popoverBody={t(\"flush_interval_time_description\")}\n        popoverHeader={t(\"flush_interval_time\")}\n      />\n    </FormSection>\n  );\n};\n\nexport { Flush };\n","import {\n  FormSection,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport {\n  DropdownWithToggle,\n  FormGroupWithPopover,\n  useTranslation,\n} from \"@rhoas/app-services-ui-components\";\nimport convert from \"convert\";\nimport type React from \"react\";\nimport type { Topic } from \"ui-models/src/models/topic\";\nimport { TextWithLabelPopover } from \"./TextWithLabelPopover\";\nimport type { IDropdownOption } from \"./types\";\n\nexport type LogProps = {\n  topicData: Topic;\n  setTopicData: (data: Topic) => void;\n  defaultDeleteRetentionTime: bigint;\n  defaultMinCleanbleRatio: number;\n  defaultMinimumCompactionLagTime: bigint;\n};\n\nconst Log: React.FC<LogProps> = ({\n  topicData,\n  setTopicData,\n  defaultDeleteRetentionTime,\n  defaultMinCleanbleRatio,\n  defaultMinimumCompactionLagTime,\n}) => {\n  const { t } = useTranslation([\"create-topic\", \"common\"]);\n\n  const cleanupPolicyOptions: IDropdownOption[] = [\n    {\n      key: \"compact\",\n      value: \"compact\",\n      label: t(\"compact\"),\n      isDisabled: false,\n    },\n    {\n      key: \"delete\",\n      value: \"delete\",\n      label: t(\"common:delete\"),\n      isDisabled: false,\n    },\n    {\n      key: \"compact-delete\",\n      value: \"compact,delete\",\n      label: `${t(\"compact\")},${t(\"common:delete\")}`,\n      isDisabled: false,\n    },\n  ];\n\n  const onSelectOption = (value: string) => {\n    // setTopicData({ ...topicData, cleanupPolicy: value });\n  };\n\n  return (\n    <FormSection title={t(\"log\")} id=\"log\" titleElement={\"h2\"}>\n      <TextContent>\n        <Text component={TextVariants.p}>{t(\"log_section_info\")}</Text>\n        <Text component={TextVariants.small}>{t(\"log_section_info_note\")}</Text>\n      </TextContent>\n\n      <FormGroupWithPopover\n        fieldId=\"cleanup-policy\"\n        fieldLabel={t(\"cleanup_policy\")}\n        labelHead={t(\"cleanup_policy\")}\n        labelBody={t(\"cleanup_policy_description\")}\n        buttonAriaLabel={t(\"cleanup_policy\")}\n      >\n        <DropdownWithToggle\n          id=\"log-section-policy-type-dropdown\"\n          toggleId=\"log-section-policy-type-dropdowntoggle\"\n          ariaLabel={t(\"select_policy\")}\n          onSelectOption={onSelectOption}\n          items={cleanupPolicyOptions}\n          name=\"cleanup-policy\"\n          value={topicData[\"cleanup.policy\"]}\n          isLabelAndValueNotSame={true}\n        />\n      </FormGroupWithPopover>\n\n      <TextWithLabelPopover\n        fieldId=\"delete-retention-time\"\n        btnAriaLabel={t(\"delete_retention_time\")}\n        fieldLabel={t(\"delete_retention_time\")}\n        fieldValue={t(\"milliseconds_time_to_day\", {\n          value: defaultDeleteRetentionTime,\n          days: convert(Number(defaultDeleteRetentionTime), \"milliseconds\").to(\n            \"days\"\n          ),\n        })}\n        popoverBody={t(\"delete_retention_time_description\")}\n        popoverHeader={t(\"delete_retention_time\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"min-cleanable-ratio\"\n        btnAriaLabel={t(\"min_cleanable_ratio\")}\n        fieldLabel={t(\"min_cleanable_ratio\")}\n        fieldValue={String(defaultMinCleanbleRatio)}\n        popoverBody={t(\"min_cleanable_ratio_description\")}\n        popoverHeader={t(\"min_cleanable_ratio\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"min-compaction-lag-time-description\"\n        btnAriaLabel={t(\"min_compaction_lag_time\")}\n        fieldLabel={t(\"min_compaction_lag_time\")}\n        fieldValue={t(\"milliseconds_time\", {\n          value: defaultMinimumCompactionLagTime,\n        })}\n        popoverBody={t(\"min_compaction_lag_time_description\")}\n        popoverHeader={t(\"min_compaction_lag_time\")}\n      />\n    </FormSection>\n  );\n};\n\nexport { Log };\n","import {\n  FormSection,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type React from \"react\";\nimport { TextWithLabelPopover } from \"./TextWithLabelPopover\";\n\ntype MessageProps = {\n  defaultMaximumMessageBytes: bigint;\n  defaultMessageTimestampType: string;\n  defaultMaxMessageTimestampDiff: bigint;\n};\n\nconst Message: React.FC<MessageProps> = ({\n  defaultMaximumMessageBytes,\n  defaultMessageTimestampType,\n  defaultMaxMessageTimestampDiff,\n}) => {\n  const { t } = useTranslation([\"create-topic\"]);\n\n  return (\n    <FormSection title={t(\"messages\")} id=\"messages\" titleElement={\"h2\"}>\n      <TextContent>\n        <Text component={TextVariants.p} className=\"section-info\">\n          {t(\"message_section_info\")}\n        </Text>\n      </TextContent>\n\n      <TextWithLabelPopover\n        fieldId=\"max-message-size\"\n        btnAriaLabel={t(\"max_message_size\")}\n        fieldLabel={t(\"max_message_size\")}\n        fieldValue={t(\"bytes_size\", { value: defaultMaximumMessageBytes })}\n        popoverBody={t(\"max_message_size_description\")}\n        popoverHeader={t(\"max_message_size\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"message-timestamp-type\"\n        btnAriaLabel={t(\"message_timestamp_type\")}\n        fieldLabel={t(\"message_timestamp_type\")}\n        fieldValue={String(defaultMessageTimestampType)}\n        popoverBody={t(\"message_timestamp_type_description\")}\n        popoverHeader={t(\"message_timestamp_type\")}\n      />\n      <TextWithLabelPopover\n        fieldId=\"max-message-timestamp-diff\"\n        btnAriaLabel={t(\"max_message_timestamp_diff\")}\n        fieldLabel={t(\"max_message_timestamp_diff\")}\n        fieldValue={t(\"milliseconds_time\", {\n          value: defaultMaxMessageTimestampDiff,\n        })}\n        popoverBody={t(\"max_message_timestamp_diff_description\")}\n        popoverHeader={t(\"max_message_timestamp_diff\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"compression-type\"\n        btnAriaLabel={t(\"compression_type\")}\n        fieldLabel={t(\"compression_type\")}\n        fieldValue={\"Producer\"}\n        popoverBody={t(\"compression_type_description\")}\n        popoverHeader={t(\"compression_type\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"message-format\"\n        btnAriaLabel={t(\"message_format\")}\n        fieldLabel={t(\"message_format\")}\n        fieldValue={\"2.7-IV2\"}\n        popoverBody={t(\"message_format_description\")}\n        popoverHeader={t(\"message_format\")}\n      />\n    </FormSection>\n  );\n};\n\nexport { Message };\n","import {\n  FormSection,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type React from \"react\";\nimport { TextWithLabelPopover } from \"./TextWithLabelPopover\";\n\nconst Replication: React.FC = () => {\n  const { t } = useTranslation([\"create-topic\", \"common\"]);\n\n  return (\n    <FormSection title={t(\"replication\")} id=\"replication\" titleElement={\"h2\"}>\n      <TextContent>\n        <Text component={TextVariants.p}>\n          {t(\"replication_section_info\")}\n          <Text component={TextVariants.small}>\n            {t(\"replication_section_info_note\")}\n          </Text>\n        </Text>\n      </TextContent>\n\n      <TextWithLabelPopover\n        fieldId=\"unclean-leader-election\"\n        btnAriaLabel={t(\"unclean_leader_election\")}\n        fieldLabel={t(\"unclean_leader_election\")}\n        fieldValue={t(\"common:disabled\")}\n        popoverBody={t(\"unclean_leader_election_description\")}\n        popoverHeader={t(\"unclean_leader_election\")}\n      />\n    </FormSection>\n  );\n};\n\nexport { Replication };\n","import {\n  FormSection,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport convert from \"convert\";\nimport type React from \"react\";\nimport { TextWithLabelPopover } from \"./TextWithLabelPopover\";\n\ntype TopicAdavanceIndexProps = {\n  defaultIndexIntervalSize: bigint;\n  defaultSegmentIndexSize: bigint;\n};\n\nconst TopicAdvanceIndex: React.FC<TopicAdavanceIndexProps> = ({\n  defaultIndexIntervalSize,\n  defaultSegmentIndexSize,\n}) => {\n  const { t } = useTranslation([\"create-topic\"]);\n\n  return (\n    <FormSection title={t(\"index\")} id=\"index\" titleElement={\"h2\"}>\n      <TextContent>\n        <Text component={TextVariants.p} className=\"section-info\">\n          {t(\"index_section_info\")}\n        </Text>\n      </TextContent>\n\n      <TextWithLabelPopover\n        fieldId=\"index-interval-size\"\n        btnAriaLabel={t(\"index_interval_size\")}\n        fieldLabel={t(\"index_interval_size\")}\n        fieldValue={t(\"bytes_to_kibibytes\", {\n          bytes: defaultIndexIntervalSize,\n          kibibytes: convert(Number(defaultIndexIntervalSize), \"bytes\").to(\n            \"kibibytes\"\n          ),\n        })}\n        popoverBody={t(\"index_interval_size_description\")}\n        popoverHeader={t(\"index_interval_size\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"segment-index-size\"\n        btnAriaLabel={t(\"segment_index_size\")}\n        fieldLabel={t(\"segment_index_size\")}\n        fieldValue={t(\"bytes_to_mebibytes\", {\n          bytes: defaultSegmentIndexSize,\n          mebibytes: convert(Number(defaultIndexIntervalSize), \"bytes\").to(\n            \"mebibytes\"\n          ),\n        })}\n        popoverBody={t(\"segment_index_size_description\")}\n        popoverHeader={t(\"segment_index_size\")}\n      />\n    </FormSection>\n  );\n};\n\nexport { TopicAdvanceIndex };\n","import { JumpLinks, JumpLinksItem, SidebarPanel } from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type React from \"react\";\n\nexport type TopicAdvanceJumpLinksProps = {\n  canHaveDelete?: boolean;\n};\nconst TopicAdvanceJumpLinks: React.FC<TopicAdvanceJumpLinksProps> = ({\n  canHaveDelete,\n}) => {\n  const { t } = useTranslation([\"create-topic\"]);\n\n  return (\n    <SidebarPanel variant=\"sticky\">\n      <JumpLinks\n        isVertical\n        label={t(\"jump_to_section\")}\n        scrollableSelector=\".topic-properties\"\n        style={{ position: \"sticky\" }}\n        // offset={-164} // for header\n      >\n        <JumpLinksItem key={0} href=\"#core-configuration\">\n          {t(\"core_configuration\")}\n        </JumpLinksItem>\n        <JumpLinksItem key={1} href=\"#messages\">\n          {t(\"messages\")}\n        </JumpLinksItem>\n        <JumpLinksItem key={2} href=\"#log\">\n          {t(\"log\")}\n        </JumpLinksItem>\n        <JumpLinksItem key={3} href=\"#replication\">\n          {t(\"replication\")}\n        </JumpLinksItem>\n        <JumpLinksItem key={4} href=\"#cleanup\">\n          {t(\"cleanup\")}\n        </JumpLinksItem>\n        <JumpLinksItem key={5} href=\"#index\">\n          {t(\"index\")}\n        </JumpLinksItem>\n        <JumpLinksItem key={6} href=\"#flush\">\n          {t(\"flush\")}\n        </JumpLinksItem>\n        {canHaveDelete ? (\n          <JumpLinksItem key={7} href=\"#delete\">\n            {t(\"delete\")}\n          </JumpLinksItem>\n        ) : (\n          <></>\n        )}\n      </JumpLinks>\n    </SidebarPanel>\n  );\n};\n\nexport { TopicAdvanceJumpLinks };\n","import {\n  ActionGroup,\n  Button,\n  Divider,\n  Form,\n  PageGroup,\n  PageSection,\n  Sidebar,\n  SidebarContent,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type React from \"react\";\nimport { useState } from \"react\";\nimport type { Topic } from \"ui-models/src/models/topic\";\nimport { Cleanup } from \"./Cleanup\";\nimport { CoreConfiguration } from \"./CoreConfiguration\";\nimport { Flush } from \"./Flush\";\nimport { Log } from \"./Log\";\nimport { Message } from \"./Message\";\nimport { Replication } from \"./Replication\";\nimport { TopicAdvanceIndex } from \"./TopicAdvanceIndex\";\nimport { TopicAdvanceJumpLinks } from \"./TopicAdvanceJumpLinks\";\n\nexport type TopicAdvancePageProps = {\n  isCreate: boolean;\n  onConfirm: () => void;\n  handleCancel?: () => void;\n  topicData: Topic;\n  setTopicData: (val: Topic) => void;\n  checkTopicName: (value: string) => Promise<boolean>;\n  availablePartitionLimit: number;\n};\n\nexport const TopicAdvancePage: React.FunctionComponent<\n  TopicAdvancePageProps\n> = ({\n  isCreate,\n  onConfirm,\n  handleCancel,\n  topicData,\n  setTopicData,\n  checkTopicName,\n  availablePartitionLimit,\n}) => {\n  const { t } = useTranslation([\"create-topic\", \"common\"]);\n  const actionText = isCreate ? t(\"create_topic\") : t(\"common:save\");\n\n  //states\n\n  const [topicValidated, setTopicValidated] = useState<ValidatedOptions>(\n    ValidatedOptions.default\n  );\n  const [invalidText, setInvalidText] = useState(\"\");\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [warning, setWarning] = useState<boolean>(false);\n  const onValidateTopic = () => {\n    if (topicData?.name.length < 1) {\n      setInvalidText(t(\"common:required\"));\n      setTopicValidated(ValidatedOptions.error);\n    } else {\n      setIsLoading(true);\n\n      checkTopicName(topicData?.name)\n        .then((value) =>\n          value == false\n            ? (setInvalidText(t(\"already_exists\", { name: topicData?.name })),\n              setTopicValidated(ValidatedOptions.error))\n            : onConfirm()\n        )\n        .finally(() => setIsLoading(false));\n    }\n  };\n\n  return (\n    <PageSection padding={{ default: \"noPadding\" }}>\n      <Sidebar hasGutter>\n        <TopicAdvanceJumpLinks />\n        <SidebarContent>\n          <PageGroup\n            hasOverflowScroll={true}\n            id=\"topic-detail-view\"\n            aria-label={\"TODO\"}\n          >\n            <PageSection padding={{ default: \"noPadding\" }}>\n              <Form>\n                <CoreConfiguration\n                  isCreate={isCreate}\n                  topicData={topicData}\n                  setTopicData={setTopicData}\n                  checkTopicName={checkTopicName}\n                  availablePartitionLimit={availablePartitionLimit}\n                  invalidText={invalidText}\n                  setInvalidText={setInvalidText}\n                  setTopicValidated={setTopicValidated}\n                  topicValidated={topicValidated}\n                  setWarning={setWarning}\n                  warning={warning}\n                />\n                <Message\n                  defaultMaximumMessageBytes={\n                    topicData[\"max.message.bytes\"].value\n                  }\n                  defaultMessageTimestampType={\n                    topicData[\"message.timestamp.type\"]\n                  }\n                  defaultMaxMessageTimestampDiff={\n                    topicData[\"message.timestamp.difference.max.ms\"].value\n                  }\n                />\n                <Log\n                  topicData={topicData}\n                  setTopicData={setTopicData}\n                  defaultDeleteRetentionTime={topicData[\"retention.ms\"].value}\n                  defaultMinCleanbleRatio={\n                    topicData[\"min.cleanable.dirty.ratio\"]\n                  }\n                  defaultMinimumCompactionLagTime={\n                    topicData[\"min.compaction.lag.ms\"].value\n                  }\n                />\n                <Replication />\n                <Cleanup\n                  defaultLogSegmentSize={topicData[\"segment.bytes\"].value}\n                  defaultSegmentTime={topicData[\"segment.ms\"].value}\n                  defaultSegmentJitterTime={\n                    topicData[\"segment.jitter.ms\"].value\n                  }\n                  defaultFileDeleteDelay={\n                    topicData[\"file.delete.delay.ms\"].value\n                  }\n                />\n                <TopicAdvanceIndex\n                  defaultIndexIntervalSize={\n                    topicData[\"index.interval.bytes\"].value\n                  }\n                  defaultSegmentIndexSize={\n                    topicData[\"segment.index.bytes\"].value\n                  }\n                />\n                <Flush\n                  defaultFlushIntervalMessages={\n                    topicData[\"flush.messages\"].value\n                  }\n                  defaultFlushIntervalTime={topicData[\"flush.ms\"].value}\n                />\n              </Form>\n\n              <ActionGroup className=\"kafka-ui--sticky-footer\">\n                <Divider className=\"kafka-ui--divider--FlexShrink\" />\n                <Button\n                  isLoading={isLoading}\n                  onClick={onValidateTopic}\n                  variant=\"primary\"\n                  data-testid={\n                    isCreate\n                      ? \"topicAdvanceCreate-actionCreate\"\n                      : \"tabProperties-actionSave\"\n                  }\n                  isDisabled={topicValidated !== \"default\"}\n                >\n                  {actionText}\n                </Button>\n                <Button\n                  onClick={handleCancel}\n                  variant=\"link\"\n                  data-testid={\n                    isCreate\n                      ? \"topicAdvanceCreate-actionCancel\"\n                      : \"tabProperties-actionCancel\"\n                  }\n                >\n                  {t(\"common:cancel\")}\n                </Button>\n              </ActionGroup>\n            </PageSection>\n          </PageGroup>\n        </SidebarContent>\n      </Sidebar>\n    </PageSection>\n  );\n};\n","import { PageSection } from \"@patternfly/react-core\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport type { Topic } from \"ui-models/src/models/topic\";\nimport { TopicAdvancePage } from \"../components/TopicAdvancePage\";\n\nexport type EditTopicPropertiesProps = {\n  topic: Topic;\n  onCancel: () => void;\n};\n\nexport const EditTopicProperties: FunctionComponent<\n  EditTopicPropertiesProps\n> = ({ topic }) => {\n  const { t } = useTranslation([\"create-topic\"]);\n  return (\n    <PageSection\n      variant={\"light\"}\n      className={\"topic-properties\"}\n      hasOverflowScroll={true}\n      aria-label={\"TODO\"}\n    >\n      <TopicAdvancePage\n        isCreate={false}\n        onConfirm={() => {}}\n        handleCancel={() => {}}\n        topicData={topic}\n        setTopicData={() => {}}\n        checkTopicName={() => Promise.resolve(true)}\n        availablePartitionLimit={3}\n      />\n    </PageSection>\n  );\n};\n","import {\n  Button,\n  Divider,\n  Form,\n  FormSection,\n  PageGroup,\n  PageSection,\n  Sidebar,\n  SidebarContent,\n  Split,\n  SplitItem,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport type React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport type { Topic } from \"ui-models/src/models/topic\";\nimport {\n  formattedRetentionSize,\n  formattedRetentionTime,\n} from \"../../KafkaTopics/types\";\nimport { TextWithLabelPopover } from \"../components\";\nimport { Cleanup } from \"../components/Cleanup\";\nimport { Flush } from \"../components/Flush\";\nimport { Message } from \"../components/Message\";\nimport { Replication } from \"../components/Replication\";\nimport { TopicAdvanceIndex } from \"../components/TopicAdvanceIndex\";\nimport { TopicAdvanceJumpLinks } from \"../components/TopicAdvanceJumpLinks\";\n\nexport type TopicViewDetailProps = {\n  topic: Topic;\n  deleteTopicHref: string;\n  updateTopicHref: string;\n};\n\nexport const TopicProperties: React.FunctionComponent<TopicViewDetailProps> = ({\n  topic,\n  deleteTopicHref,\n  updateTopicHref,\n}) => {\n  const { t } = useTranslation([\"create-topic\"]);\n  return (\n    <PageSection\n      variant={\"light\"}\n      className={\"topic-properties\"}\n      hasOverflowScroll={true}\n      aria-label={\"TODO\"}\n    >\n      <Sidebar hasGutter>\n        <TopicAdvanceJumpLinks canHaveDelete={true} />\n        <SidebarContent>\n          <PageGroup\n            hasOverflowScroll={true}\n            aria-label={\"TODO\"}\n            id=\"topic-detail-view\"\n            className={\"pf-u-mb-4xl\"}\n          >\n            <PageSection padding={{ default: \"noPadding\" }}>\n              <Split>\n                <SplitItem isFilled>\n                  <Form id=\"topic-form\">\n                    <FormSection\n                      title={t(\"core_configuration\")}\n                      id=\"core-configuration\"\n                      titleElement={\"h2\"}\n                    >\n                      <TextContent>\n                        <Text\n                          component={TextVariants.p}\n                          className=\"section-info\"\n                        >\n                          {t(\"core_config_info\")}\n                        </Text>\n                      </TextContent>\n\n                      <TextWithLabelPopover\n                        fieldId=\"topic-name\"\n                        btnAriaLabel={t(\"name\")}\n                        fieldLabel={t(\"topic_name\")}\n                        fieldValue={topic.name}\n                        popoverBody={t(\"topic_name_description\")}\n                        popoverHeader={t(\"topic_name\")}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId=\"partitions\"\n                        btnAriaLabel={t(\"partitions\")}\n                        fieldLabel={t(\"partitions\")}\n                        fieldValue={topic.partitions.length.toString()}\n                        popoverBody={t(\"partitions_description\")}\n                        popoverHeader={t(\"partitions\")}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId=\"replicas\"\n                        btnAriaLabel={t(\"replicas\")}\n                        fieldLabel={t(\"replicas\")}\n                        fieldValue={\n                          \"TODO\" /* TODO this is a config from the Kafka instance itself, should we be showing it? */\n                        }\n                        popoverBody={t(\"replicas_description\")}\n                        popoverHeader={t(\"replicas\")}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId=\"min-insync-replicas\"\n                        btnAriaLabel={t(\"min_insync_replicas\")}\n                        fieldLabel={t(\"min_insync_replicas\")}\n                        fieldValue={topic[\"min.insync.replicas\"].toString()}\n                        popoverBody={t(\"min_insync_replicas_description\")}\n                        popoverHeader={t(\"min_insync_replicas\")}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId=\"retention-time\"\n                        btnAriaLabel={t(\"retention_time\")}\n                        fieldLabel={t(\"retention_time\")}\n                        fieldValue={formattedRetentionTime(\n                          topic[\"retention.ms\"].value\n                        )}\n                        popoverBody={t(\"retention_time_description\")}\n                        popoverHeader={t(\"retention_time\")}\n                        showUnlimited={true}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId=\"retention-size\"\n                        btnAriaLabel={t(\"retention_size\")}\n                        fieldLabel={t(\"retention_size\")}\n                        fieldValue={formattedRetentionSize(\n                          topic[\"retention.bytes\"].value\n                        )}\n                        popoverHeader={t(\"retention_size\")}\n                        popoverBody={t(\"retention_size_description\")}\n                        showUnlimited={true}\n                      />\n                    </FormSection>\n                    <Message\n                      defaultMaximumMessageBytes={\n                        topic[\"max.message.bytes\"].value\n                      }\n                      defaultMessageTimestampType={\n                        topic[\"message.timestamp.type\"]\n                      }\n                      defaultMaxMessageTimestampDiff={\n                        topic[\"message.timestamp.difference.max.ms\"].value\n                      }\n                    />\n                    <FormSection title={t(\"log\")} id=\"log\" titleElement={\"h2\"}>\n                      <TextContent>\n                        <Text component={TextVariants.p}>\n                          {t(\"log_section_info\")}\n                          <Text\n                            component={TextVariants.small}\n                            className=\"section-info-note\"\n                          >\n                            {t(\"log_section_info_note\")}\n                          </Text>\n                        </Text>\n                      </TextContent>\n\n                      <TextWithLabelPopover\n                        fieldId=\"cleanup-policy\"\n                        btnAriaLabel={t(\"cleanup_policy\")}\n                        fieldLabel={t(\"cleanup_policy\")}\n                        fieldValue={topic[\"cleanup.policy\"]}\n                        popoverBody={t(\"cleanup_policy_description\")}\n                        popoverHeader={t(\"cleanup_policy\")}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId=\"delete-retention-time\"\n                        btnAriaLabel={t(\"delete_retention_time\")}\n                        fieldLabel={t(\"delete_retention_time\")}\n                        fieldValue={topic[\n                          \"delete.retention.ms\"\n                        ].value.toString()}\n                        popoverBody={t(\"delete_retention_time_description\")}\n                        popoverHeader={t(\"delete_retention_time\")}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId=\"min-cleanable-ratio\"\n                        btnAriaLabel={t(\"min_cleanable_ratio\")}\n                        fieldLabel={t(\"min_cleanable_ratio\")}\n                        fieldValue={topic[\n                          \"min.cleanable.dirty.ratio\"\n                        ].toString()}\n                        popoverBody={t(\"min_cleanable_ratio_description\")}\n                        popoverHeader={t(\"min_cleanable_ratio\")}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId=\"min-compaction-lag-time\"\n                        btnAriaLabel={t(\"min_compaction_lag_time\")}\n                        fieldLabel={t(\"min_compaction_lag_time\")}\n                        fieldValue={topic[\n                          \"min.compaction.lag.ms\"\n                        ].value.toString()}\n                        popoverBody={t(\"min_compaction_lag_time_description\")}\n                        popoverHeader={t(\"min_compaction_lag_time\")}\n                      />\n                    </FormSection>\n                    <Replication />\n                    <Cleanup\n                      defaultLogSegmentSize={topic[\"segment.bytes\"].value}\n                      defaultSegmentTime={topic[\"segment.ms\"].value}\n                      defaultSegmentJitterTime={\n                        topic[\"segment.jitter.ms\"].value\n                      }\n                      defaultFileDeleteDelay={\n                        topic[\"file.delete.delay.ms\"].value\n                      }\n                    />\n                    <TopicAdvanceIndex\n                      defaultIndexIntervalSize={\n                        topic[\"index.interval.bytes\"].value\n                      }\n                      defaultSegmentIndexSize={\n                        topic[\"segment.index.bytes\"].value\n                      }\n                    />\n                    <Flush\n                      defaultFlushIntervalMessages={\n                        topic[\"flush.messages\"].value\n                      }\n                      defaultFlushIntervalTime={topic[\"flush.ms\"].value}\n                    />\n                  </Form>\n\n                  <Divider className=\"pf-u-mt-2xl pf-u-mb-2xl\" />\n\n                  <TextContent>\n                    <Text component={TextVariants.h2} id=\"delete\">\n                      {t(\"delete_topic_irreversible\")}\n                    </Text>\n                    <Text component={TextVariants.p} className=\"section-info\">\n                      {t(\"delete_topic_info\")}\n                    </Text>\n                    <Button\n                      variant=\"danger\"\n                      data-testid=\"tabProperties-actionDelete\"\n                      component={(props) => (\n                        <Link {...props} to={deleteTopicHref}>\n                          {t(\"delete_topic\")}\n                        </Link>\n                      )}\n                    />\n                  </TextContent>\n                </SplitItem>\n                <SplitItem>\n                  <Button\n                    variant=\"primary\"\n                    data-testid=\"tabProperties-actionEdit\"\n                    component={(props) => (\n                      <Link {...props} to={updateTopicHref}>\n                        {t(\"edit_props\")}\n                      </Link>\n                    )}\n                  />\n                </SplitItem>\n              </Split>\n            </PageSection>\n          </PageGroup>\n        </SidebarContent>\n      </Sidebar>\n    </PageSection>\n  );\n};\n","import type { SelectProps } from \"@patternfly/react-core\";\nimport { Select, SelectOption, SelectVariant } from \"@patternfly/react-core\";\nimport type { FC } from \"react\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport type { OwnerAccount } from \"./types\";\n\nexport type SelectOwnerProps = {\n  isDisabled: boolean;\n  accounts: OwnerAccount[];\n  owner: string | undefined;\n  onChangeOwner: (owner: string | undefined) => void;\n};\n\nexport const SelectOwner: FC<SelectOwnerProps> = ({\n  isDisabled,\n  accounts,\n  owner,\n  onChangeOwner,\n}) => {\n  const { t } = useTranslation(\"kafka\");\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  const onToggle = (isExpanded: boolean) => {\n    setIsOpen(isExpanded);\n  };\n\n  const onSelect: SelectProps[\"onSelect\"] = (_, owner) => {\n    onChangeOwner(owner as string);\n    setIsOpen(false);\n  };\n\n  function selectOptions(filter = \"\") {\n    const filterRegExp = new RegExp(filter, \"i\");\n    const filteredAccounts =\n      filter !== \"\"\n        ? accounts.filter(\n            (account) =>\n              filterRegExp.test(account.displayName) ||\n              filterRegExp.test(account.id)\n          )\n        : accounts;\n    return filteredAccounts.map((account) => (\n      <SelectOption\n        key={account.id}\n        value={account.id}\n        description={account.displayName}\n      >\n        {account.id}\n      </SelectOption>\n    ));\n  }\n\n  return (\n    <Select\n      id=\"change-permission-owner-select\"\n      variant={SelectVariant.typeahead}\n      onToggle={onToggle}\n      isDisabled={isDisabled}\n      isOpen={isOpen}\n      placeholderText={t(\"select_user_account\")}\n      isCreatable={true}\n      createText={t(\"change_owner_create_text\")}\n      menuAppendTo=\"parent\"\n      maxHeight={400}\n      selections={owner}\n      onSelect={onSelect}\n      onFilter={(_, value) => selectOptions(value)}\n    >\n      {selectOptions()}\n    </Select>\n  );\n};\n","import {\n  Alert,\n  AlertVariant,\n  Button,\n  Form,\n  FormGroup,\n  Modal,\n  Skeleton,\n} from \"@patternfly/react-core\";\nimport type { FunctionComponent } from \"react\";\nimport { useCallback, useRef, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { SelectOwner } from \"./SelectOwner\";\nimport type { ChangeOwnerErrorMessage, OwnerAccount } from \"./types\";\n\nexport type ChangeKafkaOwnerProps = {\n  currentOwner: string;\n  accounts: OwnerAccount[] | undefined;\n  savingState: \"idle\" | \"saving\" | ChangeOwnerErrorMessage;\n  onConfirm: (newOwner: string) => void;\n  onCancel: () => void;\n};\n\nexport const ChangeKafkaOwner: FunctionComponent<ChangeKafkaOwnerProps> = ({\n  currentOwner,\n  accounts,\n  savingState,\n  onConfirm,\n  onCancel,\n}) => {\n  const { t } = useTranslation([\"kafka\", \"common\"]);\n  const [account, setAccount] = useState<string | undefined>();\n  const submittedAccount = useRef<string>();\n\n  const isSaving = savingState === \"saving\";\n\n  const onConfirmOwner = useCallback(() => {\n    if (account) {\n      submittedAccount.current = account;\n      onConfirm(account);\n    }\n  }, [onConfirm, account]);\n\n  const renderAlert = () => {\n    switch (savingState) {\n      case \"invalid-user\":\n        return (\n          <Alert\n            variant={AlertVariant.danger}\n            aria-live=\"polite\"\n            isInline\n            title={t(\"new_owner_does_not_exist_title\")}\n          >\n            {t(\"new_owner_does_not_exist_message\", {\n              newOwner: submittedAccount.current,\n            })}\n          </Alert>\n        );\n      case \"unknown-error\":\n        return (\n          <Alert\n            variant={AlertVariant.danger}\n            aria-live=\"polite\"\n            isInline\n            title={t(\"can_not_change_owner_title\")}\n          >\n            {t(\"owner_transfer_failed_message\", {\n              name: currentOwner,\n            })}\n          </Alert>\n        );\n    }\n  };\n  return (\n    <Modal\n      id=\"change-owner-modal\"\n      title={t(\"change-owner-title\")}\n      isOpen={true}\n      onClose={onCancel}\n      variant={\"medium\"}\n      position=\"top\"\n      actions={[\n        <Button\n          id=\"confirm-button\"\n          key=\"changeowner\"\n          variant=\"primary\"\n          isDisabled={isSaving}\n          onClick={onConfirmOwner}\n        >\n          {t(\"change-owner-button\")}\n        </Button>,\n        <Button\n          id=\"cancel-button\"\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={onCancel}\n          isDisabled={isSaving}\n        >\n          {t(\"common:cancel\")}\n        </Button>,\n      ]}\n    >\n      <Form onSubmit={(e) => e?.preventDefault()}>\n        {renderAlert()}\n        <FormGroup fieldId=\"Current-owner-name\" label={t(\"current_owner\")}>\n          {currentOwner}\n        </FormGroup>\n        <FormGroup fieldId=\"New-owner-name\" label={t(\"new_owner\")}>\n          {accounts ? (\n            <SelectOwner\n              isDisabled={isSaving}\n              accounts={accounts}\n              owner={account}\n              onChangeOwner={setAccount}\n            />\n          ) : (\n            <Skeleton width={\"100%\"} />\n          )}\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n};\n"],"names":["ControlPlaneRouteRoot","NewInstanceSegment","ControlPlaneSpecialSegments","ControlPlaneRoutePath","ControlPlaneNewInstancePath","ControlPlaneDeleteInstancePath","ControlPlaneChangeOwnerPath","DrawerContext","createContext","DrawerProvider","children","match","useRouteMatch","Error","selectedInstance","params","id","includes","undefined","section","instance","useState","isExact","isExpanded","setIsExpanded","activeTab","setActiveTab","onClose","useRef","toggleExpanded","useCallback","newValue","prev","current","useEffect","value","useMemo","Provider","onTabChange","useDrawer","context","useContext","RedirectOnGateError","redirectUrl","key","useLocation","ErrorBoundary","resetKeys","fallbackRender","RedirectAndResetError","reset","Redirect","to","KafkaInstancesRoute","getUrlForInstance","history","useHistory","setActiveQuickStart","QuickStartContext","replace","labels","usePaginationSearchParams","page","perPage","setPagination","setPaginationQuery","resetPaginationQuery","namesChips","useURLSearchParamsChips","ownersChips","statusesChips","useSortableSearchParams","fields","isColumnSortable","sort","sortDirection","data","name","chips","owner","status","direction","onClearAllFilters","clearChained","openDrawer","tab","onDetailsClick","onConnectionsClick","onCreate","push","onDelete","onChangeOwner","onQuickstartGuide","instances","itemCount","count","names","owners","statuses","onPageChange","onSearchName","add","onRemoveNameChip","remove","onRemoveNameChips","clear","onSearchOwner","onRemoveOwnerChip","onRemoveOwnerChips","onSearchStatus","toggle","onRemoveStatusChip","onRemoveStatusChips","isRowSelected","onDetails","onConnection","onClickConnectionTabLink","onClickSupportLink","onInstanceLinkClick","canHaveInstanceLink","canOpenConnection","canChangeOwner","canDelete","CreateKafkaInstanceRoute","instancesHref","callbacks","auth","useChrome","getUsername","getUser","username","identity","user","Promise","reject","checkDeveloperAvailabilityQuery","standardQuotaQuery","providersWithRegionsQuery","getProvidersInfo","getProviderRegionsSizes","checkDeveloperAvailability","onAvailable","onUsed","onUnavailable","checkStandardQuota","onQuotaAvailable","onNoQuotaAvailable","onOutOfQuota","hasTrialQuota","remainingPrepaidQuota","remainingMarketplaceQuota","marketplaceSubscriptions","quota","fetchProvidersWithRegions","plan","providers","getStandardSizes","provider","region","providersInfo","providerInfo","find","p","getTrialSizes","standardSizes","length","displayName","trialSizes","standard","trial","useCreateKafkaCallbacks","createKafkaInstance","qsContext","onClickKafkaOverview","onClickQuickStart","onSuccess","onError","mutateAsync","onCancel","CreateKafkaInstance","isModalOpen","onClickContactUs","onLearnHowToAddStreamingUnits","onLearnMoreAboutSizes","subscriptionOptionsHref","document","location","href","appendTo","getElementById","body","useControlPlaneGate","DeleteKafkaInstanceRoute","isDeleting","instanceName","ChangeOwnerRoute","accounts","updateInstance","onConfirm","newOwner","mutate","updates","savingState","isLoading","isError","error","type","currentOwner","map","a","ControlPlaneRoutes","Route","path","exact","DataPlaneRoutePath","DataPlaneTopicRoutePath","DataPlaneConsumerGroupRoutePath","DataPlaneTopicConsumerGroupRoutePath","DataPlanePermissionsRoutePath","useDataPlaneGate","DataPlaneHeaderConnected","activeSection","url","sectionsHref","dashboard","topics","consumer","permissions","settings","PermissionsRoute","managePermissionsHref","editPermissionsHref","dispatch","useDispatch","acls","adminUrl","serviceAccounts","userAccounts","userAccount","email","principalType","serviceAccountList","serviceAccount","allAccounts","onDeleteSelected","rowIndex","rowToDelete","groups","instanceId","acl","patternType","resource","permissionType","permission","principal","account","resourceName","operation","resourceType","_","message","addNotification","variant","title","dismissable","onManagePermissionsActionItem","onManagePermission","onManagePermissions","onPerPageChange","TopicsRoute","topicChips","filter","topicName","getUrlFortopic","row","onEdit","onSearchTopic","onCreateTopic","onRemoveTopicChip","onRemoveTopicChips","onTopicLinkClick","SettingsRoute","onSubmitReAuthentication","reauthenticationEnabled","reauthentication_enabled","request","DashboardRoute","hasUserAlreadyClosedAlert","setHasUserAlreadyClosedAlert","onAlertClose","queryInstance","queryKpisMetrics","queryInstanceMetrics","queryTopicMetrics","queryTopics","getMetricsKpi","kpis","topicPartitionsLimit","maxPartitions","getKafkaInstanceMetrics","interval","duration","all","metrics","diskSpaceLimit","max_data_retention_size","bytes","connectionsLimit","connections","connectionRateLimit","connectionRate","getTopicsMetrics","selectedTopic","kafkaTopics","t","ConsumerGroupsRoute","groupId","consumerName","onDeletConsumerGroup","instanceConsumerGroupsHref","onViewPartition","onClickResetOffset","consumers","onSearchConsumer","onRemoveConsumerChip","onRemoveConsumerChips","onViewResetOffset","useTopicGate","topic","DataPlaneTopicHeaderConnected","instanceDetailsHref","instanceTopicsHref","tabsHref","messages","properties","schemas","instanceDetailHref","TopicConsumerGroupsRoute","TopicMessagesGroupsRoute","kafkaTopicMessagesFetchQuery","getMessages","partitions","TopicPropertiesRoute","deleteTopicHref","updateTopicHref","TopicSchemasRoute","chrome","processor2","entry","e","basename","srs","getToken","AuthContext","ConfigContext","apiBasePath","I18nProvider","lng","resources","en","common","srsTemporaryFixMe","debug","ScalprumComponent","appName","module","scope","ErrorComponent","processor","renderSchema","registry","version","registryId","useConsumerGroupGate","consumerGroup","consumerGroupId","ConsumerGroupDeleteRoute","onDeleteConsumer","state","ConsumerGroupResetOffsetRoute","onConfirmResetOffset","offset","customOffsetValue","Array","from","Set","onClickClose","ConsumerGroupViewPartitionRoute","viewPartitionConsumerGroupHref","consumerGroupByTopic","activeMembers","activeConsumers","partitionsWithLag","laggingPartitions","onSelectDeleteConsumerGroup","onSelectResetOffsetConsumerGroup","useTopicConsumerGroupGate","TopicConsumerGroupDeleteRoute","instanceTopicConsumerGroupsHref","TopicConsumerGroupResetOffsetRoute","TopicConsumerGroupViewPartitionRoute","viewTopicPartitionConsumerGroupHref","DeleteKafkaTopic","props","useTranslation","DeleteModal","confirmationValue","Trans","ns","i18nKey","components","values","TopicDeleteRoute","topicHref","TopicEditPropertiesRoute","PermissionsEditRoute","consumerGroups","consumerGroupsList","topicsList","updatePermissions","onSaveAcls","aclPermission","deletedPermissions","aclData","aclToDelete","existingAcls","aclsForSelectedAccount","selectedAccount","kafkaName","onSave","PermissionsSelectAccountRoute","loggedInUser","setCurrentlyLoggedInUser","filteredAccounts","onNext","instanceTopicConsumerGroupHref","permissionsModalHref","DataPlaneRoutes","Switch","render","InvalidObject","OverviewRoute","Routes","memo","updateDocumentTitle","on","register","notifications","unregister","event","console","dir","navId","basePath","getPath","QuickstartLoader","loaded","setLoaded","quickStarts","AssetsContext","showDrafts","onLoad","qs","set","init","errorDescriptionKey","middleware","consumerGroupTransformer","stateMapping","lag","memberId","partition","logEndOffset","unassignedPartitions","DEAD","EMPTY","STABLE","UNKNOWN","COMPLETING_REBALANCE","PREPARING_REBALANCE","fetchKafkaKpis","getMetricsByInstantQuery","topicPartitions","items","forEach","metric","fetchKafkaMetrics","getMetricsByRangeQuery","response","safeMetrics","m","persistentvolumeclaim","usedDiskSpaceMetrics","connectionAttemptRateMetrics","clientConnectionsMetrics","addAggregatedValuesTo","timestamp","valuesToQuery","field","comparison","v","trim","join","uiColumnMapping","createdAt","fetchKafkas","dataMapper","getKafkas","search","flatMap","s","Boolean","q","filtersToSearch","toString","res","rawInstances","total","apiSizeToComponentSize","isDisabled","apiSize","display_name","quota_consumed","ingress","ingress_throughput_per_sec","egress","egress_throughput_per_sec","storage","Math","round","total_max_connections","max_connection_attempts_per_sec","max_partitions","messageSize","max_message_size","maturity_status","trialDurationHours","lifespan_seconds","fetchProviderRegions","getCloudProviderRegions","instanceType","enabled","capacity","some","c","instance_type","r","max_capacity_reached","available_sizes","isStandardQuota","related_resources","billing_model","isMarketplaceQuota","fetchStandardQuota","api","organizationId","quotaResponse","statusText","standardQuotas","resource_name","product","prepaidQuota","marketplaceQuotas","allowed","consumed","reduce","agg","unaggregatedSubscriptions","cloud_accounts","subscriptionMarketplaces","cloud_provider_id","marketplace","subscriptions","cloud_account_id","developerDefaults","BigInt","preallocate","standardDefaults","topicTransformerFactory","d","JSON","stringify","cm","Object","fromEntries","config","configValueToMilliseconds","configValueToBytes","configValueToBoolean","configValueToNumber","defaultIfEmpty","defaultIfError","parseInt","parse","fetchTopics","getTopics","fetchTopicsMetrics","filteredMetrics","bytesIncoming","bytesOutgoing","bytesPerPartition","incomingMessageRate","addAggregatedTotalBytesTo","metricsTopics","fetchUserAccounts","getUserAccounts","fullObject","first_name","last_name","isOrgAdmin","is_org_admin","ReactQueryDevtoolsProduction","lazy","then","default","ReactQueryDevtools","ApiContext","ApiProvider","showDevTools","QueryClientProvider","client","initialIsOpen","Suspense","fallback","useApiConfiguration","masQueries","_root","organization","entity","available","subentity","developerAvailability","standardAvailability","kafkaQueries","list","details","topicMessages","kpi","providerQueries","limits","developer","accessToken","kafkasFleet","DefaultApi","Configuration","token","PrincipalApi","SecurityApi","AppServicesApi","TopicsApi","GroupsApi","AclsApi","records","RecordsApi","useConsumerGroups","suspense","refetchInterval","useQuery","queryKey","queryFn","getConsumerGroups","fetchConsumerGroups","args","kafkaRequestToKafkaInstanceEnhanched","developerPlanInstanceLimits","standardPlanInstanceLimits","enhancedInstance","billing","created_at","Date","toISOString","expiryDate","expires_at","cloud_provider","size","accepted","preparing","provisioning","ready","failed","deprovision","deleting","updatedAt","updated_at","bootstrapUrl","bootstrap_server_host","admin_api_server_url","az","multi_az","marketplaceForBilling","ms","billing_cloud_account_id","subscription","warn","thisInstanceLimits","l","size_id","APIErrorCodes","useKafkaInstanceTransformer","getStandardQuotaQuery","useStandardQuotaFetchQuery","useProvidersWithRegionsFetchQuery","useProviderRegionSizesFetchQuery","standardQuota","standardPlanLimitsQuery","developerPlanLimitsQuery","standardPlanLimits","developerPlanLimits","useKafka","getKafkaById","useKafkas","queryClient","i","setQueryData","useTopic","getTopic","fetchTopic","useTopics","useUserAccounts","listPrincipals","useConsumerGroup","getConsumerGroupById","fetchConsumerGroup","useAcls","getAcls","fetchPermissions","useServiceAccounts","getServiceAccounts","fetchServiceAccounts","useDeveloperInstanceAvailabilityFetchQuery","fetchQuery","staleTime","Infinity","k","useKafkaFetchQuery","useKafkaKpisFetchQuery","useKafkaMetricsFetchQuery","useTopicsMetricsFetchQuery","useTopicsFetchQuery","useMessagesFetchQuery","consumeRecords","limit","headers","fetchMessages","kms","regions","regionInfo","availableSizes","sizes","instance_types","bind","fetchProviderRegionSizes","getInstanceTypesByCloudProviderAndRegion","getCloudProviders","allProviders","firstProvider","defaultProvider","skipCache","ams","fetchOrganization","apiAccountsMgmtV1CurrentAccountGet","apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet","useCreateKafkaMutation","useMutation","kafkaRequest","sizeId","createKafka","isServiceApiError","code","DUPLICATE_INSTANCE_NAME","INTERNAL_CAPACITY_ERROR","INSUFFICIENT_QUOTA","invalidateQueries","UNAUTHORIZED_USER","TRIAL_USED","FAILED_TO_CHECK_QUOTA","OWNER_DOES_NOT_EXIST","useDeleteKafkaMutation","deleteKafkaById","useDeleteTopicMutation","deleteTopic","useUpdateKafkaMutation","updateKafkaById","getErrorCode","reason","AxiosError","useDeleteConsumerGroupMutation","deleteConsumerGroupById","useResetConsumerGroupMutation","resetConsumerGroupOffset","useDeletePermissionsMutation","deleteAcls","useUpdatePermissionsMutation","createAcl","KafkaInstancesSortableColumns","KafkaTopicsSortableColumns","TopicOrderKey","KafkaConsumerGroupSortableColumns","ConsumerGroupOrderKey","REACT_QUERY_DEVTOOLS","METRICS_LAG_ALERT","isReactQueryDevToolsEanbled","localStorage","getItem","metricsIsLagAlertsDismissed","metricsDismissLagAlerts","setItem","CreatingStatuses","ReadyStatuses","DegradedStatuses","SuspendingStatuses","SuspendedStatuses","DeletingStatuses","ResumingStatuses","SimplifiedStatuses","creating","degraded","suspended","resuming","suspending","ConsumerGroupPopover","description","Popover","headerContent","bodyContent","OutlinedQuestionCircleIcon","ConsumerGroupStateLabel","ConsumerGroupByKafka","columnNames","consumer_id","current_offset","log_end_offset","offset_lag","Stack","hasGutter","DescriptionList","columnModifier","lg","className","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","TableComposable","TableVariant","Thead","noWrap","Tr","Th","width","Tbody","Td","dataLabel","ConsumerGroupByTopic","ConsumerGroupDetails","ConsumerGroupEmptyState","EmptyState","EmptyStateVariant","EmptyStateIcon","icon","CubesIcon","Title","headingLevel","TitleSizes","EmptyStateBody","OffsetSelect","onChange","isOpen","setIsOpen","offsetValueOption","absolute","latest","earliest","Select","toggleAriaLabel","onToggle","onSelect","selection","SelectVariant","placeholderText","selections","menuAppendTo","entries","label","SelectOption","TopicSelect","index","ConsumerGroupResetOffset","disableFocusTrap","setSelectedTopic","selectedOffset","setSelectedOffset","setcustomOffsetValue","isResetAccepted","setIsResetAccepted","selectedConsumer","setSelectedConsumer","isDisconnected","consumerList","isResetOffsetDisabled","tableColumns","clientId","new_offset","areAllConsumerSelected","isConsumerSelected","onResetOffset","Modal","ModalVariant","showClose","position","actions","Button","onClick","StackItem","Form","isHorizontal","FormGroup","fieldId","TextInput","readOnlyVariant","Alert","isInline","select","_event","isSelecting","onSelectAllConsumer","isSelected","String","Checkbox","isChecked","DeleteConsumerGroup","isConsumerConnected","Text","ConsumerGroupDrawer","dropdownItems","DropdownItem","panelContent","DrawerPanelContent","widths","DrawerHead","TextContent","component","TextVariants","DrawerActions","Dropdown","KebabToggle","isPlain","DropdownPosition","DrawerCloseButton","DrawerPanelBody","Drawer","DrawerContent","DrawerContentBody","useKafkaLabels","statusesSimplified","aws","gcp","azure","providerRegions","useTopicLabels","useConsumerGroupLabels","Columns","ConsumerGroups","isFiltered","PageSection","isFilled","hasOverflowScroll","TableView","tableOuiaId","ariaLabel","columns","renderHeader","column","info","popover","popoverProps","renderCell","renderActions","ActionsColumn","filters","onSearch","onRemoveChip","onRemoveGroup","validate","test","errorMessage","emptyStateNoData","emptyStateNoResults","EmptyStateNoResults","ControlPlaneHeader","PageSectionVariants","hasShadowBottom","stickyOnBreakpoint","Level","LevelItem","onProviderChange","selectedProvider","defaultRegion","capabilities","form","creationError","tsTypes","predictableActionArguments","schema","events","services","initial","states","verifyAvailability","always","cond","target","overQuota","tags","instanceUnavailable","regionsUnavailable","configuring","unsubmitted","submitted","create","invalid","valid","fieldInvalid","submit","saving","createSuccess","createError","saved","empty","nameChange","providerChange","regionChange","idle","disabled","waitingForQuota","loading","invoke","src","onDone","sizeChange","billingChange","prepaidOnly","singleSubscription","onlySubscriptions","selectSubscription","prepaidAndSubscriptions","prepaid","selectPrepaid","setInitialContext","availableProviders","setName","setProvider","setRegion","setSize","setSizes","smallestSize","b","resetCreationErrorMessage","_context","setCreationError","triggerSave","triggerSubmit","triggerBillingChange","setBillingToPrepaid","setBillingToSubscription","unsetSubscription","guards","isOverQuota","instanceAvailability","isInstanceUnavailable","isRegionsUnavailable","nameIsEmpty","nameIsValid","providerIsValid","selectedProviderInfo","regionIsValid","noProviderOrRegion","noSizes","emptySizes","sizeIsDisabled","billingRequiredButNotSelected","meta","hasTag","sizeIsOverQuota","availableQuota","didProviderChange","didRegionChange","didSizeChange","onlyPrepaid","matchesSelectedProviderOrRHMarketplaceAndHasQuota","hasPrepaidQuota","noSelectedProvider","trialUsed","trialUnavailable","isTrialUsed","isTrialUnavailable","noProviderAndRegion","save","complete","setDeveloperAvailable","setDeveloperUnavailable","setDeveloperUsed","setStandardAvailable","setStandardOutOfQuota","setStandardUnavailable","setProviders","setProvidersOrRegionsUnavailable","setCapabilities","notifyCreateErrorToStandardPlan","notifyCreateErrorToTrialPlan","LogoAWS","URL","LogoAzure","LogoGCP","LogoRedhat","AWSLogo","alt","style","height","AzureLogo","GCPLogo","KafkaInstanceActions","rowData","hackZIndex","customChild","DropdownGroup","tooltipProps","content","tooltip","pointerEvents","cursor","isSeparator","actionProps","zIndex","DataPlaneHeader","actionsProps","Breadcrumb","ouiaId","BreadcrumbItem","Link","isActive","padding","Nav","NavList","NavItem","borderTop","DataPlaneTopicHeader","DeleteKafkaInstance","kafka","it","resolve","delete","DetailsTabAlert","hoursLeft","differenceInHours","now","time","FormatDate","date","format","KafkaDetailsTab","kafkaVersion","renderTextListItem","TextListItem","TextListItemVariants","Skeleton","screenreaderText","contentName","TextList","TextListVariants","SuspendedConnection","ExclamationTriangleIcon","color","KafkaConnectionTabP2","isKafkaSuspended","isKafkaPending","externalServer","tokenEndPointUrl","linkToServiceAccount","linkToAccessTab","adminAPIUrl","kafkaFleetManagerUrl","showCreateServiceAccountModal","fontSize","ClipboardCopy","textAriaLabel","isReadOnly","ButtonVariant","ExpandableSection","toggleContent","testId","HelpIcon","Label","SampleCodeSnippet","expandableCode","codeBlockCode","codeSnippet","copied","setCopied","copyCode","CodeBlockAction","ClipboardCopyButton","textId","exitDelay","maxWidth","text","navigator","clipboard","writeText","catch","CodeBlock","CodeBlockCode","isDetached","contentId","ExpandableSectionToggle","javaConfigCodeBlock","kafkaBootstrapUrl","tokenEndpointUrl","pythonConfigCodeBlock","pythonConfigExpandabledBlock","quarkusConfigExpandableBlock","springBootConfigCodeBlock","KafkaSampleCode","clientSelect","setClientSelect","clientProvider","java","python","quarkus","springboot","ToggleGroup","ToggleGroupItem","buttonId","client_type","KafkaInstanceDrawer","KafkaInstanceDrawerPanel","handleSelect","Tabs","activeKey","Tab","eventKey","TabTitleText","parseISO","getExternalServer","getAdminServerUrl","endsWith","StatusLabel","forwardRef","ref","showWarning","showError","withPopover","buttonVariant","Split","SplitItem","CheckCircleIcon","Spinner","Flex","FlexItem","HelperText","HelperTextItem","PopoverStatusOrder","KafkaToPopoverMapping","StatusProgressStepper","currentStatus","currentStep","findIndex","getVariant","ProgressStepper","isVertical","ProgressStep","titleId","isCurrent","StatusPopoverContent","StatusPopover","initialOpen","reference","isVisible","setIsVisible","handleClickConnectionTabLink","handleClickSupportLink","shouldOpen","shouldClose","enableFlip","SuspendedPopover","alertSeverityVariant","headerIcon","KafkaInstanceStatus","warningAfterMinutes","errorAfterMinutes","popoverStatus","alert","setAlert","labelRef","checkCreatedAt","elapsed","differenceInMinutes","useInterval","EmptyStateNoInstances","PlusCircleIcon","SearchIcon","KafkaInstances","timeCreatedDate","instanceLinkEnable","isAriaDisabled","changeOwnerEnabled","deleteEnabled","openConnectionEnabled","onRowClick","isRowDeleted","toolbarBreakpoint","options","isPrimary","DateTimePicker","timeSelected","setIsTimeSelected","InputGroup","DatePicker","formatInTimeZone","newDate","formatISO","TimePicker","hour","minute","__","isValid","setHours","setMinutes","FilterGroup","epoch","onOffsetChange","onTimestampChange","onEpochChange","onLatest","currentCategory","setCurrentCategory","ToolbarItem","DropdownToggle","autoFocus","DropdownSeparator","placeholder","newOffset","Number","isInteger","LimitSelector","InputGroupText","hidden","idx","isSameMessage","m1","m2","beautifyUnknownValue","RetentionSizeUnits","RetentionTimeUnits","NoDataCell","columnLabel","MessageDetails","defaultTab","isResizable","minSize","MessageDetailsBody","messageKey","isCompact","defaultActiveKey","isCode","random","NoDataEmptyState","onRefresh","NoResultsEmptyState","onReset","OffsetRange","min","max","PartitionSelector","handleChange","valueAsNum","allPartitions","fill","makeOptions","slice","hiddenOptionsCount","handleFilter","typeAheadAriaLabel","maxHeight","onFilter","isInputValuePersisted","onClear","InputGroupTextVariant","UnknownValuePreview","truncateAt","shouldTruncate","substring","truncate","preview","truncated","spaceItems","stopPropagation","MessageBrowserMachine","selectedMessage","initialLoading","fetchSuccess","fetchFail","verifyMessages","noData","refresh","pristine","dirty","shouldSearch","setPartition","setEpoch","setTimestamp","setOffset","setLatest","setLimit","selectMessage","deselectMessage","refreshing","setMessages","offsetMin","offsetMax","lastUpdated","noMessages","selectedMessageNotAvailable","areFiltersChanged","columnWidths","KafkaMessageBrowser","useMachine","devTools","send","KafkaMessageBrowserConnected","isFirstLoad","matches","isNoData","isRefreshing","requiresSearch","filterOffset","filterEpoch","filterTimestamp","setDefaultTab","columnLabels","Loading","OuterScrollContainer","Toolbar","ToolbarContent","ToolbarToggleGroup","toggleIcon","FilterIcon","breakpoint","ToolbarGroup","RefreshButton","alignment","InnerScrollContainer","ResponsiveTable","expectedLength","colIndex","keys","KafkaInstanceCapacityTable","firstStreamingUnit","secondStreamingUnit","table","MarketingPageHero","tagLine","description2","heroImage","heroImageSize","heroImageCanRepeat","heroImagePositionY","cta","MarketingPageSection","isWidthLimited","KafkaPageV3","Grid","Card","CardHeader","CardHeaderMain","CardTitle","CardBody","CardFooter","bold","alignSelf","justifyContent","flex","Divider","xl","orientation","EmptyStateNoTopic","PrincipalType","unitsToBytes","BYTE","KIBIBYTE","MEBIBYTE","GIBIBYTE","TEBIBYTE","unitsToMilliSecond","MILLISECOND","SECOND","MINUTE","HOUR","DAY","formattedRetentionTime","days","unit","hours","minutes","seconds","millisecondsToTime","formattedRetentionSize","bytesToMemorySize","tebibytes","gibibytes","mebibytes","kibibytes","KafkaTopics","DurationOptions","createEmptyManageAccessAcl","PermissionsDropdown","onAddPermission","onShortcutConsumeTopic","onShortcutProduceTopic","onShortcutManageAccess","menuRef","handleMenuKeys","contains","handleClickOutside","window","addEventListener","removeEventListener","onToggleClick","open","ev","setTimeout","firstElement","querySelector","focus","menu","Menu","itemId","MenuContent","MenuList","MenuGroup","MenuItem","splitButtonItems","DropdownToggleAction","preventDefault","splitButtonVariant","Popper","trigger","popper","popperMatchesTriggerWidth","labelColor","DisplayResourceName","PatternType","ResourceCell","PermissionOperationCell","ALLOW","DENY","operations","ALL","READ","WRITE","CREATE","DELETE","ALTER","DESCRIBE","DESCRIBE_CONFIGS","ALTER_CONFIGS","LabelGroup","numLabels","isArray","PrincipalCell","isDeleteEnabled","isAllAccounts","onRemoveAcl","isReviewTable","ServiceAccount","Tooltip","tabIndex","split","InfoCircleIcon","RemoveButton","PermissionsTableEmptyState","openManagePermissions","PermissionsTable","checkedRows","setCheckedRows","kebabActions","onCheck","isRowChecked","SelectAccount","isDirty","setIsDirty","setSelectedAccount","useLayoutEffect","noServiceAccounts","isNoResultsOption","noUserAccounts","filterValue","toLowerCase","serviceAccountOptions","localeCompare","userAccountOperations","UserAccount","SelectGroup","validated","ValidatedOptions","onEscapePress","onSubmit","helperTextInvalid","isRequired","labelIcon","noVerticalAlign","newState","isCreatable","createText","isGrouped","onCreateOption","ResourceName","onChangeValue","resourcePrefixRule","onFetchOptions","setIsNameValid","AsyncTypeaheadSelect","required","onValidationCheck","validationMessage","resourcePreixCondition","regExp","RegExp","validationCheck","ResourceOperation","resourceTypeOptions","ResourcePermission","resourcePermissionOptions","allow","deny","ResourcePrefixRule","resourcePrefixRuleOptions","Is","ResourceType","ShortcutsTableHead","KafkaInstanceManualPermissions","resourceOperation","resourcePermission","onChangeResourceOperation","onChangeResourcePermission","onChangeResourceType","AssignPermissionsManual","resourcePrefix","onChangeResourcePrefix","onChangeResource","onFetchResourceNameOptions","multipleShorctutPermissions","ProduceTopicRow","prefixRuleValue","resourceNameValue","onChangeResourceName","isConsumeTopicShortcut","borderBottom","colSpan","ConsumeTopicShortcut","onChangeConsumerResourceName","topicPrefixRuleValue","topicResourceNameValue","consumerPrefixRuleValue","consumerResourceNameValue","onChangeConsumerResourcePrefixRule","onChangeTopicResourceName","onChangeTopicResourcePrefixRule","onFetchConsumerResourceNameOptions","onFetchTopicResourceNameOptions","ManageAccessShortcut","ProduceTopicShortcut","AssignPermissions","topicNameOptions","consumerGroupNameOptions","onAddManualPermissions","onAddProduceTopicShortcut","onConsumeTopicShortcut","onManageAccessShortcut","addedAcls","setAddedAcls","aclTemplate","resourceValues","consumerResourcePrefixRule","topicResourcePrefixRule","consumerResourceName","topicResourceName","ActionList","ActionListItem","paddingTop","PreCancelModal","closeModal","resumeEditing","titleIconVariant","ReviewPermissionsTable","selectedAccountId","ViewAccountDetails","accountId","transformResourceType","AclResourceType","transformResourceOperation","EditPermissions","escapeClosesModal","isExpandedExistingPermissionSection","setIsExpandedExistingPermissionSection","isAclDeleted","setIsAclDeleted","isExpandedAssignPermissionsSection","setIsExpandedAssignPermissionsSection","isNameValid","canSave","setCanSave","setSubmitted","isOpenPreCancelModal","setIsOpenPreCancelModal","setExistingAcls","newAcls","setNewAcls","deletedAcls","setDeletedAcls","checkValidation","aclsToSave","accountDisplayName","isAclValid","transformAclData","selectedAccountName","transformPermissions","isIndented","Badge","isRead","prevState","updateExistingAcls","toggleText","EmptyStateInitialLoading","EmptyStateMetricsUnavailable","TachometerAltIcon","MetricsLayout","metricsLagAlert","topicsKpi","topicPartitionsKpi","consumerGroupKpi","diskSpaceMetrics","topicMetrics","GridItem","sm","CardBodyLoading","Bullseye","isSVG","timeIntervalsMapping","Last5minutes","ticks","showDate","Last15minutes","Last30minutes","Last1hour","Last3hours","Last6hours","Last12hours","Last24hours","Last2days","Last7days","chartHeight","chartPadding","bottom","left","right","top","ChartSkeletonLoader","useChartWidth","containerRef","setWidth","handleResize","clientWidth","formatBytes","units","shouldShowDate","timeDuration","dateToChartValue","fromUnixTime","timestampsToTicks","timestamps","allTimestamps","mostRecentTs","sub","getTime","ChartLinearWithOptionalLimit","chartName","xLabel","yLabel","usageLimit","formatValue","emptyState","itemsPerRow","lineLabel","limitLabel","legendData","symbol","chart_color_black_500","chart_color_blue_300","areaColor","softLimitColor","chartData","area","softLimit","x","y","tickValues","getChartData","hasMetrics","Chart","ariaTitle","containerComponent","ChartVoronoiContainer","datum","constrainToVisibleArea","legendPosition","legendComponent","ChartLegend","themeColor","ChartTheme","legendAllowWrap","ChartAxis","C","tickFormat","dependentAxis","ChartGroup","ChartArea","ChartThreshold","stroke","colors","chart_color_cyan_300","ChartLogSizePerPartition","dataMap","ChartPopover","ChartTotalBytes","incomingTopicsData","outgoingTopicsData","incomingTopic","outgoingTopic","incomingTopicName","outgoingTopicName","incomingLine","metricsToLine","line","outgoingLine","chart_color_green_300","getBytesChartData","tickCount","ChartLine","EmptyStateNoMetricsData","EmptyStateNoMetricsDataForSelection","EmptyStateNoTopics","WrenchIcon","EmptyStateNoTopicSelected","DurationOptionsMap","FilterByTime","keyText","disableToolbar","onDurationChange","isTimeSelectOpen","setIsTimeSelectOpen","ariaId","mapping","timeOptions","md","FilterByTopic","topicList","onSetSelectedTopic","isTopicSelectOpen","setIsTopicSelectOpen","selectKey","setSelectKey","allTopicsLabel","topicOptions","textInput","filteredTopics","indexOf","hasInlineFilter","ToolbarRefresh","ToolbarTopicsMetrics","onSetTimeDuration","CardTopicsMetrics","backendUnavailable","isInitialLoading","isJustCreated","onSelectedTopic","noTopics","selectedTopicNotInList","chartEmptyState","TotalBytesTitle","IncomingMessageRate","PartitionSizeTitle","ToolbarKafkaInstanceMetric","CardKafkaInstanceMetrics","usedDiskMetrics","ChartTitle","helperText","CardKpi","isFullHeight","shape","MetricsLagAlert","isClosed","actionClose","AlertActionCloseButton","PartitionCard","ExclamationCircleIcon","isExpandable","AlertVariant","role","apiState","failure","after","KafkaInstanceMetricsMachine","fetchFailures","callApi","criticalFail","justCreated","withResponse","selectDuration","setFetchTimestamp","setMetrics","incrementRetries","resetRetries","setDuration","canRetryFetching","TopicsMetricsMachine","selectTopic","setTopic","MetricsKpiMachine","KafkaInstanceMetricsContext","KafkaInstanceMetricsProvider","service","callback","results","MetricsKpiContext","MetricsKpiProvider","TopicsMetricsContext","TopicsMetricsProvider","useKafkaInstanceMetrics","isFailed","useTopicsMetrics","onTopicChange","Metrics","ConnectedMetrics","kafkaInstanceMetrics","topicsMetrics","metricsKpi","useMetricsKpi","ConnectedKafkaInstanceMetrics","ConnectedTopicsMetrics","Settings","connectionStatus","setConnectionStatus","setIsModalOpen","handleReAuthentication","reAuthValue","reauthentication","flexWrap","grow","spacer","checked","retentionTimeSelectOptions","isPlaceholder","retentionSizeSelectOptions","fieldLabel","btnAriaLabel","fieldValue","popoverBody","popoverHeader","displayText","Cleanup","defaultFileDeleteDelay","defaultLogSegmentSize","defaultSegmentJitterTime","defaultSegmentTime","FormSection","titleElement","gibibyte","milliseconds","CustomRetentionMessage","selectOptions","topicData","NumberInput","onMinus","onPlus","CustomRetentionSize","CoreConfiguration","isCreate","setTopicData","invalidText","setInvalidText","setTopicValidated","topicValidated","availablePartitionLimit","validateName","legalNameChars","retentionSizeUnit","setRetentionSizeUnit","retentionTimeUnit","setRetentionTimeUnit","isRetentionTimeSelectOpen","setIsRetentionTimeSelectOpen","isRetentionSizeSelectOpen","setIsRetentionSizeSelectOpen","handleRetentionMessageSize","handleRetentionMessageTime","retentionTimeInput","toggleId","retentionSizeInput","labelHead","labelBody","buttonAriaLabel","inputName","plusBtnProps","minusBtnProps","Radio","Flush","defaultFlushIntervalMessages","defaultFlushIntervalTime","Log","defaultDeleteRetentionTime","defaultMinCleanbleRatio","defaultMinimumCompactionLagTime","cleanupPolicyOptions","DropdownWithToggle","onSelectOption","isLabelAndValueNotSame","Message","defaultMaximumMessageBytes","defaultMessageTimestampType","defaultMaxMessageTimestampDiff","Replication","TopicAdvanceIndex","defaultIndexIntervalSize","defaultSegmentIndexSize","TopicAdvanceJumpLinks","canHaveDelete","SidebarPanel","JumpLinks","scrollableSelector","JumpLinksItem","handleCancel","checkTopicName","actionText","setIsLoading","warning","setWarning","Sidebar","SidebarContent","PageGroup","ActionGroup","finally","EditTopicProperties","TopicProperties","showUnlimited","SelectOwner","filterRegExp","ChangeKafkaOwner","setAccount","submittedAccount","isSaving","onConfirmOwner","renderAlert"],"sourceRoot":""}