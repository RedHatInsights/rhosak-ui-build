{"version":3,"file":"js/533.9f34b5f7d75c04ecd94a.js","mappings":"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","sources":["webpack:///./src/routes/control-plane/routesConsts.ts","webpack:///./src/routes/control-plane/DrawerProvider.tsx","webpack:///./src/routes/RedirectOnGateError.tsx","webpack:///./src/routes/control-plane/routes/ConnectedControlPlaneHeader.tsx","webpack:///./src/routes/control-plane/routes/useKafkaInstancesTable.ts","webpack:///./src/routes/control-plane/routes/KafkaInstancesRoute.tsx","webpack:///./src/routes/control-plane/routes/CreateKafkaInstanceRoute.tsx","webpack:///./src/routes/control-plane/routes/useCreateKafkaCallbacks.ts","webpack:///./src/routes/control-plane/useControlPlaneGate.tsx","webpack:///./src/routes/control-plane/routes/DeleteKafkaInstanceRoute.tsx","webpack:///./src/routes/control-plane/routes/ChangeOwnerRoute.tsx","webpack:///./src/routes/control-plane/ControlPlaneRoutes.tsx","webpack:///./src/routes/control-plane/routes/DedicatedClustersRoute.tsx","webpack:///./src/routes/control-plane/routes/DedicatedKafkaInstancesRoute.tsx","webpack:///./src/routes/control-plane/DedicatedControlPlaneRoutes.tsx","webpack:///./src/routes/data-plane/routesConsts.ts","webpack:///./src/routes/data-plane/useDataPlaneGate.tsx","webpack:///./src/routes/data-plane/routes/DataPlaneHeaderConnected.tsx","webpack:///./src/routes/data-plane/routes/AclsRoute.tsx","webpack:///./src/routes/data-plane/routes/TopicsRoute.tsx","webpack:///./src/routes/data-plane/routes/SettingsRoute.tsx","webpack:///./src/routes/data-plane/routes/DashboardRoute.tsx","webpack:///./src/routes/data-plane/routes/ConsumerGroupsRoute.tsx","webpack:///./src/routes/data-plane/useTopicGate.tsx","webpack:///./src/routes/data-plane/routes/DataPlaneTopicHeaderConnected.tsx","webpack:///./src/routes/data-plane/routes/TopicConsumerGroupsRoute.tsx","webpack:///./src/routes/data-plane/routes/TopicMessagesRoute.tsx","webpack:///./src/routes/data-plane/routes/TopicPropertiesRoute.tsx","webpack:///./src/routes/data-plane/routes/TopicSchemasRoute.tsx","webpack:///./src/routes/data-plane/useConsumerGroupGate.tsx","webpack:///./src/routes/data-plane/routes/ConsumerGroupDeleteRoute.tsx","webpack:///./src/routes/data-plane/routes/ConsumerGroupResetOffsetRoute.tsx","webpack:///./src/routes/data-plane/routes/ConsumerGroupViewPartitionRoute.tsx","webpack:///./src/routes/data-plane/useTopicConsumerGroupGate.tsx","webpack:///./src/routes/data-plane/routes/TopicConsumerGroupDeleteRoute.tsx","webpack:///./src/routes/data-plane/routes/TopicConsumerGroupResetOffsetRoute.tsx","webpack:///./src/routes/data-plane/routes/TopicConsumerGroupViewPartitionRoute.tsx","webpack:///../../packages/ui/src/components/DeleteKafkaTopic/DeleteKafkaTopic.tsx","webpack:///./src/routes/data-plane/routes/TopicDeleteRoute.tsx","webpack:///./src/routes/data-plane/routes/TopicEditPropertiesRoute.tsx","webpack:///./src/routes/data-plane/DataPlaneRoutes.tsx","webpack:///./src/routes/data-plane/DedicatedDataPlaneRoutes.tsx","webpack:///./src/routes/useDedicatedGate.tsx","webpack:///../../packages/consoledot-api/src/queries/useStandardQuota.ts","webpack:///./src/routes/DedicatedUsersGate.tsx","webpack:///./src/routes/overview/OverviewRoute.tsx","webpack:///./src/routes/StandardUsersGate.tsx","webpack:///./src/routes/Routes.tsx","webpack:///./src/App.tsx","webpack:///./src/QuickstartLoader.tsx","webpack:///./src/store/index.ts","webpack:///../../packages/consoledot-api/src/queries/useConsumerGroup.ts","webpack:///../../packages/consoledot-api/src/queries/useConsumerGroups.ts","webpack:///../../packages/consoledot-api/src/queries/useDedicatedClusters.ts","webpack:///../../packages/consoledot-api/src/transformers/kafkaRequestToKafkaInstanceEnhanched.ts","webpack:///../../packages/consoledot-api/src/queries/useCreateInstance.ts","webpack:///../../packages/consoledot-api/src/queries/useKafkaInstanceTransformer.ts","webpack:///../../packages/consoledot-api/src/queries/useKafka.ts","webpack:///../../packages/consoledot-api/src/queries/useKafkas.ts","webpack:///../../packages/consoledot-api/src/queries/useTopic.ts","webpack:///../../packages/consoledot-api/src/queries/useTopics.ts","webpack:///../../packages/consoledot-api/src/queries/useUserAccounts.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useDeveloperInstanceAvailabilityFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useKafkaFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useKafkaKpisFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useKafkaMetricsFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useTopicsMetricsFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useTopicsFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useMessagesFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useProviderRegionSizesFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useProvidersWithRegionsFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useStandardQuotaFetchQuery.ts","webpack:///../../packages/consoledot-api/src/mutations/useCreateKafkaMutation.ts","webpack:///../../packages/consoledot-api/src/mutations/useDeleteKafkaMutation.ts","webpack:///../../packages/consoledot-api/src/mutations/useDeleteTopicMutation.ts","webpack:///../../packages/consoledot-api/src/mutations/useUpdateKafkaMutation.ts","webpack:///../../packages/consoledot-api/src/mutations/useDeleteConsumerGroupMutation.ts","webpack:///../../packages/consoledot-api/src/mutations/useResetConsumerGroupMutation.ts","webpack:///../../packages/consoledot-api/src/types.ts","webpack:///../../packages/consoledot-api/src/ApiProvider.tsx","webpack:///../../packages/consoledot-api/src/transformers/consumerGroupTransformer.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchConsumerGroup.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchConsumerGroups.ts","webpack:///../../packages/consoledot-api/src/transformers/dedicatedClusterTransformer.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchDedicatedClusters.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchKafkaKpis.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchKafkaMetrics.ts","webpack:///../../packages/consoledot-api/src/fetchers/valuesToQuery.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchKafkas.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchMessages.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchOrganization.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchProviderRegionSizes.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchProvidersWithRegions.ts","webpack:///../../packages/consoledot-api/src/utilsAndConstants.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchStandardQuota.ts","webpack:///../../packages/consoledot-api/src/transformers/topicTransformer.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchTopic.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchTopics.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchTopicsMetrics.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchUserAccounts.ts","webpack:///../../packages/consoledot-api/src/queryKeys.ts","webpack:///../../packages/consoledot-api/src/useApi.ts","webpack:///../../packages/local-storage-helpers/index.ts","webpack:///../../packages/ui-models/src/models/kafka.ts","webpack:///../../packages/ui/src/components/ChangeKafkaOwner/SelectOwner.tsx","webpack:///../../packages/ui/src/components/ChangeKafkaOwner/ChangeKafkaOwner.tsx","webpack:///../../packages/ui/src/components/ConsumerGroups/components/ConsumerGroupPopover.tsx","webpack:///../../packages/ui/src/components/ConsumerGroups/components/ConsumerGroupState.tsx","webpack:///../../packages/ui/src/components/ConsumerGroups/components/ConsumerGroupByKafka.tsx","webpack:///../../packages/ui/src/components/ConsumerGroups/components/ConsumerGroupByTopic.tsx","webpack:///../../packages/ui/src/components/ConsumerGroups/components/ConsumerGroupDetails.tsx","webpack:///../../packages/ui/src/components/ConsumerGroups/components/ConsumerGroupEmptyState.tsx","webpack:///../../packages/ui/src/components/ConsumerGroups/components/OffsetSelect.tsx","webpack:///../../packages/ui/src/components/ConsumerGroups/components/TopicSelect.tsx","webpack:///../../packages/ui/src/components/ConsumerGroups/components/ConsumerGroupResetOffset.tsx","webpack:///../../packages/ui/src/components/ConsumerGroups/components/DeleteConsumerGroup.tsx","webpack:///../../packages/ui/src/components/ConsumerGroups/components/ConsumerGroupDrawer.tsx","webpack:///../../packages/ui/src/hooks/useKafkaLabels.ts","webpack:///../../packages/ui/src/hooks/useTopicLabels.ts","webpack:///../../packages/ui/src/hooks/useConsumerGroupLabels.ts","webpack:///../../packages/ui/src/components/ConsumerGroups/ConsumerGroups.tsx","webpack:///../../packages/ui/src/components/ControlPlaneHeader.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/machines/shared.ts","webpack:///../../packages/ui/src/components/CreateKafkaInstance/machines/StandardPlanMachine.ts","webpack:///../../packages/ui/src/components/CreateKafkaInstance/machines/TrialPlanMachine.ts","webpack:///../../packages/ui/src/components/CreateKafkaInstance/machines/CreateKafkaInstanceMachine.ts","webpack:///../../packages/ui/src/components/CreateKafkaInstance/machines/CreateKafkaInstanceProvider.tsx","webpack:///../../packages/ui/src/components/Logos/images.ts","webpack:///../../packages/ui/src/components/Logos/AWSLogo.tsx","webpack:///../../packages/ui/src/components/Logos/AzureLogo.tsx","webpack:///../../packages/ui/src/components/Logos/GCPLogo.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/components/BillingTiles.tsx","webpack:///../../packages/ui/src/components/Logos/RedhatLogo.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/components/CloudProviderTiles.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/StandardInstanceForm.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceActions.tsx","webpack:///../../packages/ui/src/components/DataPlaneHeader.tsx","webpack:///../../packages/ui/src/components/DataPlaneTopicHeader.tsx","webpack:///../../packages/ui/src/components/DedicatedClusters/DedicatedClusters.tsx","webpack:///../../packages/ui/src/hooks/useDedicatedClusterLabels.ts","webpack:///../../packages/ui/src/components/DeleteKafKaInstance/DeleteKafkaInstance.tsx","webpack:///../../packages/ui/src/components/I18nProvider.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceDrawer/components/DetailsTabAlert.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceDrawer/components/KafkaDetailsTab.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceDrawer/components/SuspendedConnection.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceDrawer/components/KafkaConnectionTabP2.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceDrawer/components/SampleCodeSnippet.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceDrawer/components/CodeSnippets.ts","webpack:///../../packages/ui/src/components/KafkaInstanceDrawer/components/KafkaSampleCode.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceDrawer/KafkaInstanceDrawer.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/components/StatusLabel.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/types.ts","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/components/StatusProgressStepper.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/components/StatusPopoverContent.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/components/StatusPopover.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/components/SuspendedPopover.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/KafkaInstanceStatus.tsx","webpack:///../../packages/ui/src/components/KafkaInstances/components/EmptyStateNoInstances.tsx","webpack:///../../packages/ui/src/components/KafkaInstances/components/EmptyStateNoResults.tsx","webpack:///../../packages/ui/src/components/KafkaInstances/KafkaInstances.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/DateTimePicker.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/FilterGroup.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/LimitSelector.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/utils.ts","webpack:///../../packages/ui/src/components/KafkaTopics/types.ts","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/NoDataCell.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/MessageDetails.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/NoDataEmptyState.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/NoResultsEmptyState.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/OffsetRange.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/PartitionSelector.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/UnknownValuePreview.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/MessageBrowserMachine.ts","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/KafkaMessageBrowser.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceCapacityTable.tsx","webpack:///../../packages/ui/src/components/MarketingPage.tsx","webpack:///../../packages/ui/src/components/KafkaPageV3.tsx","webpack:///../../packages/ui/src/components/KafkaTopics/components/EmptyStateNoTopic.tsx","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/types.ts","webpack:///../../packages/ui/src/components/KafkaTopics/KafkaTopics.tsx","webpack:///../../packages/ui/src/components/Metrics/types.ts","webpack:///../../packages/ui/src/components/Metrics/components/EmptyStateInitialLoading.tsx","webpack:///../../packages/ui/src/components/Metrics/components/EmptyStateMetricsUnavailable.tsx","webpack:///../../packages/ui/src/components/Metrics/components/MetricsLayout.tsx","webpack:///../../packages/ui/src/components/Metrics/components/CardBodyLoading.tsx","webpack:///../../packages/ui/src/components/Metrics/consts.ts","webpack:///../../packages/ui/src/components/Metrics/components/ChartSkeletonLoader.tsx","webpack:///../../packages/ui/src/components/Metrics/components/useChartWidth.tsx","webpack:///../../packages/ui/src/components/Metrics/components/utils.ts","webpack:///../../packages/ui/src/components/Metrics/components/ChartLinearWithOptionalLimit.tsx","webpack:///../../packages/ui/src/components/Metrics/components/ChartLogSizePerPartition.tsx","webpack:///../../packages/ui/src/components/Metrics/components/ChartPopover.tsx","webpack:///../../packages/ui/src/components/Metrics/components/ChartTotalBytes.tsx","webpack:///../../packages/ui/src/components/Metrics/components/EmptyStateNoMetricsData.tsx","webpack:///../../packages/ui/src/components/Metrics/components/EmptyStateNoMetricsDataForSelection.tsx","webpack:///../../packages/ui/src/components/Metrics/components/EmptyStateNoTopics.tsx","webpack:///../../packages/ui/src/components/Metrics/components/EmptyStateNoTopicSelected.tsx","webpack:///../../packages/ui/src/components/Metrics/components/FilterByTime.tsx","webpack:///../../packages/ui/src/components/Metrics/components/FilterByTopic.tsx","webpack:///../../packages/ui/src/components/Metrics/components/ToolbarRefresh.tsx","webpack:///../../packages/ui/src/components/Metrics/components/ToolbarTopicsMetrics.tsx","webpack:///../../packages/ui/src/components/Metrics/components/CardTopicsMetrics.tsx","webpack:///../../packages/ui/src/components/Metrics/components/ToolbarKafkaInstanceMetric.tsx","webpack:///../../packages/ui/src/components/Metrics/components/CardKafkaInstanceMetrics.tsx","webpack:///../../packages/ui/src/components/Metrics/components/CardKpi.tsx","webpack:///../../packages/ui/src/components/Metrics/components/MetricsLagAlert.tsx","webpack:///../../packages/ui/src/components/Metrics/components/PartitionCard.tsx","webpack:///../../packages/ui/src/components/Metrics/machines/KafkaInstanceMetricsMachine.ts","webpack:///../../packages/ui/src/components/Metrics/machines/TopicsMetricsMachine.ts","webpack:///../../packages/ui/src/components/Metrics/machines/MetricsKpiMachine.ts","webpack:///../../packages/ui/src/components/Metrics/KafkaInstanceMetricsProvider.tsx","webpack:///../../packages/ui/src/components/Metrics/MetricsKpiProvider.tsx","webpack:///../../packages/ui/src/components/Metrics/TopicsMetricsProvider.tsx","webpack:///../../packages/ui/src/components/Metrics/useKafkaInstanceMetrics.tsx","webpack:///../../packages/ui/src/components/Metrics/useTopicsMetrics.tsx","webpack:///../../packages/ui/src/components/Metrics/Metrics.tsx","webpack:///../../packages/ui/src/components/Metrics/useMetricsKpi.tsx","webpack:///../../packages/ui/src/components/Settings/Settings.tsx","webpack:///../../packages/ui/src/components/Topic/components/types.ts","webpack:///../../packages/ui/src/components/Topic/components/TextWithLabelPopover.tsx","webpack:///../../packages/ui/src/components/Topic/components/Cleanup.tsx","webpack:///../../packages/ui/src/components/Topic/components/CustomRetentionMessage.tsx","webpack:///../../packages/ui/src/components/Topic/components/CustomRetentionSize.tsx","webpack:///../../packages/ui/src/components/Topic/components/CoreConfiguration.tsx","webpack:///../../packages/ui/src/components/Topic/components/useValidateTopic.ts","webpack:///../../packages/ui/src/components/Topic/components/Flush.tsx","webpack:///../../packages/ui/src/components/Topic/components/Log.tsx","webpack:///../../packages/ui/src/components/Topic/components/Message.tsx","webpack:///../../packages/ui/src/components/Topic/components/Replication.tsx","webpack:///../../packages/ui/src/components/Topic/components/TopicAdvanceIndex.tsx","webpack:///../../packages/ui/src/components/Topic/components/TopicAdvanceJumpLinks.tsx","webpack:///../../packages/ui/src/components/Topic/components/TopicAdvancePage.tsx","webpack:///../../packages/ui/src/components/Topic/EditTopicProperties/EditTopicProperties.tsx","webpack:///../../packages/ui/src/components/Topic/TopicProperties/TopicProperties.tsx"],"sourcesContent":["const NewInstanceSegment = \"create\";\nconst ClusterSegment = \"clusters\";\nexport const ControlPlaneSpecialSegments = [NewInstanceSegment, ClusterSegment];\n\nexport const ControlPlaneRouteRoot = \"/kafkas\" as const;\nexport const ControlPlaneRoutePath =\n  `${ControlPlaneRouteRoot}/:id?/:section(delete|change-owner)?` as const;\nexport const ControlPlaneNewInstancePath = `${ControlPlaneRouteRoot}/${NewInstanceSegment}`;\nexport const ControlPlaneDeleteInstancePath = `${ControlPlaneRouteRoot}/:id/delete`;\nexport const ControlPlaneChangeOwnerPath = `${ControlPlaneRouteRoot}/:id/change-owner`;\nexport type ControlPlaneRouteParams = {\n  id?: string;\n  section?: \"delete\" | \"change-owner\";\n};\n\nexport const DedicatedControlPlaneRouteRoot = \"/dedicated\" as const;\n\nexport const DedicatedControlPlaneRoutePath =\n  `${DedicatedControlPlaneRouteRoot}/:id?/:section(delete|change-owner)?` as const;\nexport const DedicatedControlPlaneClustersPath = `${DedicatedControlPlaneRouteRoot}/${ClusterSegment}`;\nexport const DedicatedControlPlaneNewInstancePath = `${DedicatedControlPlaneRouteRoot}/${NewInstanceSegment}`;\nexport const DedicatedControlPlaneDeleteInstancePath = `${DedicatedControlPlaneRouteRoot}/:id/delete`;\nexport const DedicatedControlPlaneChangeOwnerPath = `${DedicatedControlPlaneRouteRoot}/:id/change-owner`;\n\nexport type ControlPlaneNavigationProps = {\n  instancesHref: string;\n};\n","import { useKafka } from \"consoledot-api\";\nimport type { FunctionComponent, MutableRefObject } from \"react\";\nimport {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport type { KafkaInstanceDrawerTab } from \"ui\";\nimport { KafkaInstanceDrawer } from \"ui\";\nimport type { ControlPlaneRouteParams } from \"./routesConsts\";\nimport {\n  ControlPlaneRoutePath,\n  ControlPlaneSpecialSegments,\n  DedicatedControlPlaneRoutePath,\n} from \"./routesConsts\";\n\ntype DrawerContextProps = {\n  selectedInstance: string | undefined;\n  activeTab: KafkaInstanceDrawerTab;\n  setActiveTab: (tab: KafkaInstanceDrawerTab) => void;\n  isExpanded: boolean;\n  toggleExpanded: (newState?: boolean) => void;\n  onClose: MutableRefObject<(() => void) | undefined>;\n};\n// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\nconst DrawerContext = createContext<DrawerContextProps>(null!);\n\nexport const DrawerProvider: FunctionComponent = ({ children }) => {\n  const standardMatch = useRouteMatch<ControlPlaneRouteParams>(\n    ControlPlaneRoutePath\n  );\n  const dedicatedMatch = useRouteMatch<ControlPlaneRouteParams>(\n    DedicatedControlPlaneRoutePath\n  );\n  const match = standardMatch || dedicatedMatch;\n  if (!match) {\n    throw Error(\"DrawerProvider used outside the expected route\");\n  }\n  const selectedInstance =\n    (match.params.id &&\n      ControlPlaneSpecialSegments.includes(match.params.id)) ||\n    match.params.section !== undefined\n      ? undefined\n      : match.params.id;\n  const { data: instance } = useKafka(selectedInstance);\n  const [isExpanded, setIsExpanded] = useState(\n    selectedInstance !== undefined && match.isExact\n  );\n  const [activeTab, setActiveTab] = useState<KafkaInstanceDrawerTab>(\"details\");\n  const onClose = useRef<() => void | undefined>();\n\n  const toggleExpanded = useCallback((newValue: boolean | undefined) => {\n    setIsExpanded((prev) => {\n      const isExpanded = newValue !== undefined ? newValue : !prev;\n      if (isExpanded === false && onClose.current) {\n        onClose.current();\n      }\n      return isExpanded;\n    });\n  }, []);\n\n  useEffect(() => {\n    if (!instance) {\n      setIsExpanded(false);\n    }\n  }, [instance]);\n\n  const value = useMemo(() => {\n    const shouldBeExpanded = selectedInstance !== undefined && isExpanded;\n\n    return {\n      selectedInstance,\n      activeTab,\n      setActiveTab,\n      isExpanded: shouldBeExpanded,\n      toggleExpanded,\n      onClose,\n    };\n  }, [activeTab, isExpanded, selectedInstance, toggleExpanded]);\n\n  return (\n    <DrawerContext.Provider value={value}>\n      <KafkaInstanceDrawer\n        instance={instance}\n        activeTab={activeTab}\n        onTabChange={setActiveTab}\n        isExpanded={isExpanded}\n        onClose={() => toggleExpanded(false)}\n      >\n        {children}\n      </KafkaInstanceDrawer>\n    </DrawerContext.Provider>\n  );\n};\n\nexport function useDrawer(onClose?: () => void) {\n  const context = useContext(DrawerContext);\n  context.onClose.current = onClose;\n  return context;\n}\n","import { useQueryErrorResetBoundary } from \"consoledot-api\";\nimport type { FunctionComponent, VoidFunctionComponent } from \"react\";\nimport { useEffect } from \"react\";\nimport { ErrorBoundary } from \"react-error-boundary\";\nimport { Redirect, useLocation } from \"react-router-dom\";\n\nexport const RedirectOnGateError: FunctionComponent<{\n  redirectUrl: string;\n}> = ({ children, redirectUrl }) => {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const { key } = useLocation();\n\n  return (\n    <ErrorBoundary\n      resetKeys={[key]}\n      fallbackRender={() => <RedirectAndResetError redirectUrl={redirectUrl} />}\n    >\n      {children}\n    </ErrorBoundary>\n  );\n};\n\nconst RedirectAndResetError: VoidFunctionComponent<{ redirectUrl: string }> = ({\n  redirectUrl,\n}) => {\n  const { reset } = useQueryErrorResetBoundary();\n  useEffect(() => reset, [reset]);\n  return <Redirect to={redirectUrl} />;\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport type { ControlPlaneHeaderProps } from \"ui\";\nimport { ControlPlaneHeader } from \"ui\";\n\nexport type ConnectedControlPlaneHeaderProps = {\n  activeSection: ControlPlaneHeaderProps[\"activeSection\"];\n};\n\nexport const ConnectedControlPlaneHeader: VoidFunctionComponent<\n  ConnectedControlPlaneHeaderProps\n> = ({ activeSection }) => {\n  return (\n    <ControlPlaneHeader\n      activeSection={activeSection}\n      sectionsHref={{\n        standard: \"/kafkas\",\n        dedicated: \"/dedicated\",\n        clusters: \"/dedicated/clusters\",\n      }}\n    />\n  );\n};\n","import { QuickStartContext } from \"@patternfly/quickstarts\";\nimport {\n  usePaginationSearchParams,\n  useSortableSearchParams,\n  useURLSearchParamsChips,\n} from \"@rhoas/app-services-ui-components\";\nimport { KafkaInstancesSortableColumns } from \"consoledot-api\";\nimport { useCallback, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport type { KafkaInstanceDrawerTab, KafkaInstancesProps } from \"ui\";\nimport { useKafkaLabels } from \"ui\";\nimport type { SimplifiedStatus } from \"ui-models/src/models/kafka\";\nimport { useDrawer } from \"../DrawerProvider\";\n\nexport type UseKafkaInstancesTableProps = {\n  instancesHref: string;\n  instanceSelectedHref: (id: string) => string;\n  instanceCreationHref: string;\n  instanceDeletionHref: (id: string) => string;\n  instanceChangeOwnerHref: (id: string) => string;\n};\n\nexport function useKafkaInstancesTable({\n  instancesHref,\n  instanceSelectedHref,\n  instanceCreationHref,\n  instanceDeletionHref,\n  instanceChangeOwnerHref,\n}: UseKafkaInstancesTableProps) {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const history = useHistory();\n  const { setActiveQuickStart } = useContext(QuickStartContext);\n\n  const { selectedInstance, toggleExpanded, setActiveTab, isExpanded } =\n    useDrawer(\n      useCallback(() => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n        history.replace(instancesHref);\n      }, [history, instancesHref])\n    );\n\n  const labels = useKafkaLabels();\n\n  const { page, perPage, setPagination, setPaginationQuery } =\n    usePaginationSearchParams();\n  const resetPaginationQuery = useCallback(\n    () => setPaginationQuery(1, perPage),\n    [perPage, setPaginationQuery]\n  );\n\n  const namesChips = useURLSearchParamsChips(\"names\", resetPaginationQuery);\n  const ownersChips = useURLSearchParamsChips(\"owners\", resetPaginationQuery);\n  const statusesChips = useURLSearchParamsChips<SimplifiedStatus>(\n    \"statuses\",\n    resetPaginationQuery\n  );\n\n  const [isColumnSortable, sort, sortDirection] = useSortableSearchParams(\n    KafkaInstancesSortableColumns,\n    labels.fields,\n    \"createdAt\",\n    \"desc\"\n  );\n\n  const onClearAllFilters = useCallback(() => {\n    namesChips.clearChained(\n      ownersChips.clearChained(\n        statusesChips.clearChained(setPaginationQuery(1, perPage))\n      ),\n      true\n    );\n  }, [namesChips, ownersChips, perPage, setPaginationQuery, statusesChips]);\n\n  const openDrawer = useCallback(\n    (id: string, tab: KafkaInstanceDrawerTab) => {\n      if (selectedInstance === id && isExpanded) {\n        toggleExpanded(false);\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n        history.replace(instanceSelectedHref(id));\n        toggleExpanded(true);\n        setActiveTab(tab);\n      }\n    },\n    [\n      history,\n      instanceSelectedHref,\n      isExpanded,\n      selectedInstance,\n      setActiveTab,\n      toggleExpanded,\n    ]\n  );\n\n  const onDetailsClick: KafkaInstancesProps[\"onDetails\"] = useCallback(\n    (instance) => {\n      openDrawer(instance.id, \"details\");\n    },\n    [openDrawer]\n  );\n\n  const onConnectionsClick: KafkaInstancesProps[\"onDetails\"] = useCallback(\n    (instance) => {\n      openDrawer(instance.id, \"connections\");\n    },\n    [openDrawer]\n  );\n\n  const onCreate = useCallback(() => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    history.push(instanceCreationHref);\n  }, [history, instanceCreationHref]);\n\n  const onDelete = useCallback<KafkaInstancesProps[\"onDelete\"]>(\n    ({ id }) => {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n      history.push(instanceDeletionHref(id));\n    },\n    [history, instanceDeletionHref]\n  );\n  const onChangeOwner = useCallback<KafkaInstancesProps[\"onChangeOwner\"]>(\n    ({ id }) => {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n      history.push(instanceChangeOwnerHref(id));\n    },\n    [history, instanceChangeOwnerHref]\n  );\n\n  const onQuickstartGuide = useCallback(\n    () => setActiveQuickStart && setActiveQuickStart(\"getting-started\"),\n    [setActiveQuickStart]\n  );\n\n  return {\n    selectedInstance,\n    page,\n    perPage,\n    setPagination,\n    namesChips,\n    ownersChips,\n    statusesChips,\n    isColumnSortable,\n    sort,\n    sortDirection,\n    onClearAllFilters,\n    onDetailsClick,\n    onConnectionsClick,\n    onCreate,\n    onDelete,\n    onChangeOwner,\n    onQuickstartGuide,\n  };\n}\n","import { useKafkas } from \"consoledot-api\";\nimport type { FunctionComponent } from \"react\";\nimport type { ControlPlaneHeaderProps, KafkaInstancesProps } from \"ui\";\nimport { KafkaInstances } from \"ui\";\nimport type { Kafka } from \"ui-models/src/models/kafka\";\nimport { ReadyStatuses } from \"ui-models/src/models/kafka\";\nimport { ConnectedControlPlaneHeader } from \"./ConnectedControlPlaneHeader\";\nimport { useKafkaInstancesTable } from \"./useKafkaInstancesTable\";\n\nexport type KafkaInstancesRoute = {\n  activeSection: ControlPlaneHeaderProps[\"activeSection\"];\n  instancesHref: string;\n  instanceSelectedHref: (id: string) => string;\n  instanceCreationHref: string;\n  instanceDeletionHref: (id: string) => string;\n  instanceChangeOwnerHref: (id: string) => string;\n} & Pick<KafkaInstancesProps<Kafka>, \"getUrlForInstance\">;\n\nexport const KafkaInstancesRoute: FunctionComponent<KafkaInstancesRoute> = ({\n  activeSection,\n  instancesHref,\n  instanceDeletionHref,\n  instanceSelectedHref,\n  instanceCreationHref,\n  instanceChangeOwnerHref,\n  getUrlForInstance,\n}) => {\n  const {\n    selectedInstance,\n    page,\n    perPage,\n    setPagination,\n    namesChips,\n    ownersChips,\n    statusesChips,\n    isColumnSortable,\n    sort,\n    sortDirection,\n    onClearAllFilters,\n    onDetailsClick,\n    onConnectionsClick,\n    onCreate,\n    onDelete,\n    onChangeOwner,\n    onQuickstartGuide,\n  } = useKafkaInstancesTable({\n    instancesHref,\n    instanceDeletionHref,\n    instanceSelectedHref,\n    instanceCreationHref,\n    instanceChangeOwnerHref,\n  });\n\n  const { data } = useKafkas({\n    page,\n    perPage,\n    name: namesChips.chips,\n    owner: ownersChips.chips,\n    status: statusesChips.chips,\n    sort: sort || \"createdAt\",\n    direction: sortDirection,\n    deployment: \"standard\",\n  });\n\n  return (\n    <>\n      <ConnectedControlPlaneHeader activeSection={activeSection} />\n      <KafkaInstances\n        instances={data?.instances}\n        itemCount={data?.count}\n        page={page}\n        perPage={perPage}\n        names={namesChips.chips}\n        owners={ownersChips.chips}\n        statuses={statusesChips.chips}\n        isColumnSortable={isColumnSortable}\n        onPageChange={setPagination}\n        onSearchName={namesChips.add}\n        onRemoveNameChip={namesChips.remove}\n        onRemoveNameChips={namesChips.clear}\n        onSearchOwner={ownersChips.add}\n        onRemoveOwnerChip={ownersChips.remove}\n        onRemoveOwnerChips={ownersChips.clear}\n        onSearchStatus={statusesChips.toggle}\n        onRemoveStatusChip={statusesChips.remove}\n        onRemoveStatusChips={statusesChips.clear}\n        onClearAllFilters={onClearAllFilters}\n        onChangeOwner={onChangeOwner}\n        onDelete={onDelete}\n        onCreate={onCreate}\n        isRowSelected={({ row }) => row.id === selectedInstance}\n        getUrlForInstance={getUrlForInstance}\n        onDetails={onDetailsClick}\n        onConnection={onConnectionsClick}\n        onClickConnectionTabLink={() => {\n          /* TODO */\n        }}\n        onClickSupportLink={() => {\n          /* TODO */\n        }}\n        onInstanceLinkClick={() => {\n          /* TODO */\n        }}\n        onQuickstartGuide={onQuickstartGuide}\n        canHaveInstanceLink={({ status }) => ReadyStatuses.includes(status)}\n        canOpenConnection={({ status }) => ReadyStatuses.includes(status)}\n        canChangeOwner={() => true}\n        canDelete={() => true}\n      />\n    </>\n  );\n};\n","import { QuickStartContext } from \"@patternfly/quickstarts\";\nimport type { CreateKafkaInstanceServices } from \"@rhoas/app-services-ui-components\";\nimport { CreateKafkaInstance } from \"@rhoas/app-services-ui-components\";\nimport { useCreateKafkaMutation } from \"consoledot-api\";\nimport type { FunctionComponent } from \"react\";\nimport { useCallback, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport type { ControlPlaneNavigationProps } from \"../routesConsts\";\nimport { ControlPlaneRouteRoot } from \"../routesConsts\";\nimport { useCreateKafkaCallbacks } from \"./useCreateKafkaCallbacks\";\n\nexport const CreateKafkaInstanceRoute: FunctionComponent<\n  ControlPlaneNavigationProps\n> = ({ instancesHref }) => {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const history = useHistory();\n  const callbacks = useCreateKafkaCallbacks();\n  const createKafkaInstance = useCreateKafkaMutation();\n  const qsContext = useContext(QuickStartContext);\n\n  const onClickKafkaOverview = () => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    history.push(`overview`);\n  };\n\n  const onClickQuickStart = useCallback(() => {\n    qsContext.setActiveQuickStart &&\n      qsContext.setActiveQuickStart(\"getting-started\");\n  }, [qsContext]);\n\n  const onCreate = useCallback<CreateKafkaInstanceServices[\"onCreate\"]>(\n    function (instance, onSuccess, onError) {\n      const onOnSuccess = () => {\n        onSuccess();\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n        history.push(ControlPlaneRouteRoot);\n      };\n      void createKafkaInstance.mutateAsync({\n        instance,\n        onSuccess: onOnSuccess,\n        onError,\n      });\n    },\n    [createKafkaInstance, history]\n  );\n\n  const onCancel = useCallback(() => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    history.push(instancesHref);\n  }, [history, instancesHref]);\n\n  return (\n    <CreateKafkaInstance\n      {...callbacks}\n      isModalOpen={true}\n      onCancel={onCancel}\n      onClickContactUs={onClickKafkaOverview}\n      onClickKafkaOverview={onClickKafkaOverview}\n      onClickQuickStart={onClickQuickStart}\n      onCreate={onCreate}\n      onLearnHowToAddStreamingUnits={onClickKafkaOverview}\n      onLearnMoreAboutSizes={onClickKafkaOverview}\n      subscriptionOptionsHref={document.location.href + \"/../overview\"}\n      appendTo={() =>\n        (document.getElementById(\"chrome-app-render-root\") as HTMLElement) ||\n        document.body\n      }\n    />\n  );\n};\n","import { useChrome } from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport {\n  useDeveloperInstanceAvailabilityFetchQuery,\n  useProviderRegionSizesFetchQuery,\n  useProvidersWithRegionsFetchQuery,\n  useStandardQuotaFetchQuery,\n} from \"consoledot-api\";\nimport { useCallback } from \"react\";\nimport type { CreateKafkaInstanceProps, StandardSizes } from \"ui\";\n\nexport function useCreateKafkaCallbacks() {\n  const { auth } = useChrome();\n\n  const getUsername = useCallback(async () => {\n    const username = (await auth.getUser())?.identity.user?.username;\n    if (!username) {\n      return Promise.reject(\"Invalid user\");\n    }\n    return username;\n  }, [auth]);\n\n  const checkDeveloperAvailabilityQuery =\n    useDeveloperInstanceAvailabilityFetchQuery();\n\n  const standardQuotaQuery = useStandardQuotaFetchQuery(true);\n  const providersWithRegionsQuery = useProvidersWithRegionsFetchQuery();\n  const getProvidersInfo = useProvidersWithRegionsFetchQuery();\n  const getProviderRegionsSizes = useProviderRegionSizesFetchQuery();\n\n  const checkDeveloperAvailability = useCallback<\n    CreateKafkaInstanceProps[\"checkDeveloperAvailability\"]\n  >(\n    async ({ onAvailable, onUsed, onUnavailable }) => {\n      try {\n        const available = await checkDeveloperAvailabilityQuery(getUsername);\n\n        if (available) {\n          onAvailable();\n        } else {\n          onUsed();\n        }\n      } catch {\n        onUnavailable();\n      }\n    },\n    [checkDeveloperAvailabilityQuery, getUsername]\n  );\n\n  const checkStandardQuota = useCallback<\n    CreateKafkaInstanceProps[\"checkStandardQuota\"]\n  >(\n    async ({ onQuotaAvailable, onNoQuotaAvailable, onOutOfQuota }) => {\n      try {\n        const {\n          hasTrialQuota,\n          remainingPrepaidQuota,\n          remainingMarketplaceQuota,\n          marketplaceSubscriptions,\n        } = await standardQuotaQuery();\n\n        if (\n          remainingMarketplaceQuota !== undefined ||\n          remainingPrepaidQuota !== undefined\n        ) {\n          if (\n            (remainingMarketplaceQuota || 0) === 0 &&\n            (remainingPrepaidQuota || 0) === 0\n          ) {\n            onOutOfQuota({\n              quota: {\n                marketplaceSubscriptions,\n              },\n            });\n          } else {\n            onQuotaAvailable({\n              quota: {\n                remainingPrepaidQuota,\n                remainingMarketplaceQuota,\n                marketplaceSubscriptions,\n              },\n            });\n          }\n        } else {\n          onNoQuotaAvailable({ hasTrialQuota });\n        }\n      } catch (e) {\n        onNoQuotaAvailable({ hasTrialQuota: false });\n      }\n    },\n    [standardQuotaQuery]\n  );\n\n  const fetchProvidersWithRegions = useCallback<\n    CreateKafkaInstanceProps[\"fetchProvidersWithRegions\"]\n  >(\n    async (plan, { onAvailable, onUnavailable }) => {\n      try {\n        const providers = await providersWithRegionsQuery(plan);\n        onAvailable(providers);\n      } catch {\n        onUnavailable();\n      }\n    },\n    [providersWithRegionsQuery]\n  );\n\n  const getStandardSizes = useCallback<\n    CreateKafkaInstanceProps[\"getStandardSizes\"]\n  >(\n    async (provider, region) => {\n      const providersInfo = await getProvidersInfo(\"standard\");\n      const providerInfo = providersInfo.providers.find(\n        (p) => p.id === provider\n      );\n      if (!providerInfo) {\n        return Promise.reject(\"Invalid cloud provider\");\n      }\n      return getProviderRegionsSizes(providerInfo, region, \"standard\");\n    },\n    [getProviderRegionsSizes, getProvidersInfo]\n  );\n\n  const getTrialSizes = useCallback<CreateKafkaInstanceProps[\"getTrialSizes\"]>(\n    async (provider, region) => {\n      let standardSizes: StandardSizes;\n\n      try {\n        standardSizes = await getStandardSizes(provider, region);\n        if (standardSizes.length === 0) {\n          throw new Error(\"No standard sizes found\");\n        }\n      } catch {\n        // It can happen that the selected provider doesn't support standard instances.\n        // In this case we provide a faux sample list of sizes just to make the slider happy.\n        standardSizes = [\n          { id: \"1\", displayName: \"1\", quota: 1 },\n          { id: \"2\", displayName: \"2\", quota: 2 },\n        ] as StandardSizes;\n      }\n      const providersInfo = await getProvidersInfo(\"developer\");\n      const providerInfo = providersInfo.providers.find(\n        (p) => p.id === provider\n      );\n      if (!providerInfo) {\n        return Promise.reject(\"Invalid cloud provider\");\n      }\n      const trialSizes = await getProviderRegionsSizes(\n        providerInfo,\n        region,\n        \"developer\"\n      );\n      return {\n        standard: standardSizes,\n        trial: trialSizes[0],\n      };\n    },\n    [getProviderRegionsSizes, getProvidersInfo, getStandardSizes]\n  );\n  return {\n    checkDeveloperAvailability,\n    checkStandardQuota,\n    fetchProvidersWithRegions,\n    getStandardSizes,\n    getTrialSizes,\n  };\n}\n","import { useKafka } from \"consoledot-api\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport type { ControlPlaneRouteParams } from \"./routesConsts\";\nimport {\n  ControlPlaneRoutePath,\n  DedicatedControlPlaneRoutePath,\n} from \"./routesConsts\";\n\nexport function useControlPlaneGate() {\n  const standardMatch = useRouteMatch<ControlPlaneRouteParams>(\n    ControlPlaneRoutePath\n  );\n  const enterpriseMatch = useRouteMatch<ControlPlaneRouteParams>(\n    DedicatedControlPlaneRoutePath\n  );\n  const match = standardMatch || enterpriseMatch;\n  if (!match) {\n    throw Error(\"useControlPlaneGate used outside the expected route\");\n  }\n  const { data: instance } = useKafka(match.params.id, true);\n  return { instance: instance as NonNullable<typeof instance>, match };\n}\n","import { useDeleteKafkaMutation } from \"consoledot-api\";\nimport type { FunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { DeleteKafkaInstance } from \"ui\";\nimport { ReadyStatuses } from \"ui-models/src/models/kafka\";\nimport type { ControlPlaneNavigationProps } from \"../routesConsts\";\nimport { useControlPlaneGate } from \"../useControlPlaneGate\";\n\nexport const DeleteKafkaInstanceRoute: FunctionComponent<\n  ControlPlaneNavigationProps\n> = ({ instancesHref }) => {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const history = useHistory();\n\n  const { instance } = useControlPlaneGate();\n  const { mutateAsync, isLoading: isDeleting } = useDeleteKafkaMutation();\n\n  const onCancel = useCallback(() => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    history.push(instancesHref);\n  }, [history, instancesHref]);\n\n  const onDelete = useCallback(() => {\n    void mutateAsync({\n      id: instance.id,\n      onError: () => {\n        // TODO: alert\n      },\n      onSuccess: () => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n        history.replace(instancesHref);\n      },\n    });\n  }, [mutateAsync, history, instance?.id, instancesHref]);\n\n  return (\n    <DeleteKafkaInstance\n      isModalOpen={true}\n      isDeleting={isDeleting}\n      onCancel={onCancel}\n      onDelete={onDelete}\n      instanceName={\n        ReadyStatuses.includes(instance.status) ? instance.name : undefined\n      }\n      appendTo={() =>\n        (document.getElementById(\"chrome-app-render-root\") as HTMLElement) ||\n        document.body\n      }\n    />\n  );\n};\n","import { useUpdateKafkaMutation, useUserAccounts } from \"consoledot-api\";\nimport type { FunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport type { ChangeKafkaOwnerProps } from \"ui\";\nimport { ChangeKafkaOwner } from \"ui\";\n\nimport type { ControlPlaneNavigationProps } from \"../routesConsts\";\nimport { useControlPlaneGate } from \"../useControlPlaneGate\";\n\nexport const ChangeOwnerRoute: FunctionComponent<\n  ControlPlaneNavigationProps\n> = ({ instancesHref }) => {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const history = useHistory();\n\n  const { instance } = useControlPlaneGate();\n  const { data: accounts } = useUserAccounts({});\n  const updateInstance = useUpdateKafkaMutation();\n\n  const onCancel = useCallback(() => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    history.push(instancesHref);\n  }, [history, instancesHref]);\n\n  const onConfirm = useCallback(\n    (newOwner: string) => {\n      updateInstance.mutate(\n        {\n          id: instance.id,\n          updates: { owner: newOwner },\n        },\n        {\n          onSuccess: () => {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n            history.replace(instancesHref);\n          },\n        }\n      );\n    },\n    [history, instance.id, instancesHref, updateInstance]\n  );\n\n  const savingState = ((): ChangeKafkaOwnerProps[\"savingState\"] => {\n    if (updateInstance.isLoading) return \"saving\";\n    if (updateInstance.isError) {\n      return updateInstance.error.type === \"invalid-user\"\n        ? \"invalid-user\"\n        : \"unknown-error\";\n    }\n    return \"idle\";\n  })();\n\n  return (\n    <ChangeKafkaOwner\n      currentOwner={instance.owner}\n      accounts={accounts?.accounts.map((a) => ({\n        id: a.username,\n        displayName: a.displayName,\n      }))}\n      onConfirm={onConfirm}\n      onCancel={onCancel}\n      savingState={savingState}\n    />\n  );\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { RedirectOnGateError } from \"../RedirectOnGateError\";\nimport {\n  CreateKafkaInstanceRoute,\n  DeleteKafkaInstanceRoute,\n  KafkaInstancesRoute,\n} from \"./routes\";\nimport { ChangeOwnerRoute } from \"./routes/ChangeOwnerRoute\";\nimport {\n  ControlPlaneChangeOwnerPath,\n  ControlPlaneDeleteInstancePath,\n  ControlPlaneNewInstancePath,\n  ControlPlaneRoutePath,\n  ControlPlaneRouteRoot,\n} from \"./routesConsts\";\n\nexport const ControlPlaneRoutes: VoidFunctionComponent = () => {\n  return (\n    <Route path={ControlPlaneRoutePath} exact>\n      <Route path={ControlPlaneNewInstancePath}>\n        <CreateKafkaInstanceRoute instancesHref={ControlPlaneRouteRoot} />\n      </Route>\n      <RedirectOnGateError redirectUrl={ControlPlaneRouteRoot}>\n        <Route path={ControlPlaneDeleteInstancePath}>\n          <DeleteKafkaInstanceRoute instancesHref={ControlPlaneRouteRoot} />\n        </Route>\n        <Route path={ControlPlaneChangeOwnerPath}>\n          <ChangeOwnerRoute instancesHref={ControlPlaneRouteRoot} />\n        </Route>\n      </RedirectOnGateError>\n      <KafkaInstancesRoute\n        activeSection={\"standard\"}\n        instancesHref={ControlPlaneRouteRoot}\n        instanceSelectedHref={(id) => `${ControlPlaneRouteRoot}/${id}`}\n        instanceCreationHref={`${ControlPlaneRouteRoot}/create`}\n        instanceDeletionHref={(id) => `${ControlPlaneRouteRoot}/${id}/delete`}\n        instanceChangeOwnerHref={(id) =>\n          `${ControlPlaneRouteRoot}/${id}/change-owner`\n        }\n        getUrlForInstance={(instance) =>\n          `${ControlPlaneRouteRoot}/${instance.id}/details`\n        }\n      />\n    </Route>\n  );\n};\n","import { useDedicatedClusters } from \"consoledot-api\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { DedicatedClusters } from \"ui\";\nimport { ConnectedControlPlaneHeader } from \"./ConnectedControlPlaneHeader\";\n\nexport const DedicatedClustersRoute: VoidFunctionComponent = () => {\n  const { data } = useDedicatedClusters();\n\n  return (\n    <>\n      <ConnectedControlPlaneHeader activeSection={\"clusters\"} />\n      <DedicatedClusters\n        clusters={data?.clusters}\n        itemCount={data?.count}\n        page={1}\n        onPageChange={() => {\n          /* TODO */\n        }}\n      />\n    </>\n  );\n};\n","import { useKafkas } from \"consoledot-api\";\nimport type { FunctionComponent } from \"react\";\nimport type { ControlPlaneHeaderProps, KafkaInstancesProps } from \"ui\";\nimport { KafkaInstances } from \"ui\";\nimport type { Kafka } from \"ui-models/src/models/kafka\";\nimport { ReadyStatuses } from \"ui-models/src/models/kafka\";\nimport { ConnectedControlPlaneHeader } from \"./ConnectedControlPlaneHeader\";\nimport { useKafkaInstancesTable } from \"./useKafkaInstancesTable\";\n\nexport type KafkaInstancesRoute = {\n  activeSection: ControlPlaneHeaderProps[\"activeSection\"];\n  instancesHref: string;\n  instanceSelectedHref: (id: string) => string;\n  instanceCreationHref: string;\n  instanceDeletionHref: (id: string) => string;\n  instanceChangeOwnerHref: (id: string) => string;\n} & Pick<KafkaInstancesProps<Kafka>, \"getUrlForInstance\">;\n\nexport const DedicatedKafkaInstancesRoute: FunctionComponent<\n  KafkaInstancesRoute\n> = ({\n  activeSection,\n  instancesHref,\n  instanceDeletionHref,\n  instanceSelectedHref,\n  instanceCreationHref,\n  instanceChangeOwnerHref,\n  getUrlForInstance,\n}) => {\n  const {\n    selectedInstance,\n    page,\n    perPage,\n    setPagination,\n    namesChips,\n    ownersChips,\n    statusesChips,\n    isColumnSortable,\n    sort,\n    sortDirection,\n    onClearAllFilters,\n    onDetailsClick,\n    onConnectionsClick,\n    onCreate,\n    onDelete,\n    onChangeOwner,\n    onQuickstartGuide,\n  } = useKafkaInstancesTable({\n    instancesHref,\n    instanceDeletionHref,\n    instanceSelectedHref,\n    instanceCreationHref,\n    instanceChangeOwnerHref,\n  });\n\n  const { data } = useKafkas({\n    page,\n    perPage,\n    name: namesChips.chips,\n    owner: ownersChips.chips,\n    status: statusesChips.chips,\n    sort: sort || \"createdAt\",\n    direction: sortDirection,\n    deployment: \"clusters\",\n  });\n\n  return (\n    <>\n      <ConnectedControlPlaneHeader activeSection={activeSection} />\n      <KafkaInstances\n        instances={data?.instances}\n        itemCount={data?.count}\n        page={page}\n        perPage={perPage}\n        names={namesChips.chips}\n        owners={ownersChips.chips}\n        statuses={statusesChips.chips}\n        isColumnSortable={isColumnSortable}\n        onPageChange={setPagination}\n        onSearchName={namesChips.add}\n        onRemoveNameChip={namesChips.remove}\n        onRemoveNameChips={namesChips.clear}\n        onSearchOwner={ownersChips.add}\n        onRemoveOwnerChip={ownersChips.remove}\n        onRemoveOwnerChips={ownersChips.clear}\n        onSearchStatus={statusesChips.toggle}\n        onRemoveStatusChip={statusesChips.remove}\n        onRemoveStatusChips={statusesChips.clear}\n        onClearAllFilters={onClearAllFilters}\n        onChangeOwner={onChangeOwner}\n        onDelete={onDelete}\n        onCreate={onCreate}\n        isRowSelected={({ row }) => row.id === selectedInstance}\n        getUrlForInstance={getUrlForInstance}\n        onDetails={onDetailsClick}\n        onConnection={onConnectionsClick}\n        onClickConnectionTabLink={() => {\n          /* TODO */\n        }}\n        onClickSupportLink={() => {\n          /* TODO */\n        }}\n        onInstanceLinkClick={() => {\n          /* TODO */\n        }}\n        onQuickstartGuide={onQuickstartGuide}\n        canHaveInstanceLink={({ status }) => ReadyStatuses.includes(status)}\n        canOpenConnection={({ status }) => ReadyStatuses.includes(status)}\n        canChangeOwner={() => true}\n        canDelete={() => true}\n      />\n    </>\n  );\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { RedirectOnGateError } from \"../RedirectOnGateError\";\nimport { CreateKafkaInstanceRoute, DeleteKafkaInstanceRoute } from \"./routes\";\nimport { ChangeOwnerRoute } from \"./routes/ChangeOwnerRoute\";\nimport { DedicatedClustersRoute } from \"./routes/DedicatedClustersRoute\";\nimport { DedicatedKafkaInstancesRoute } from \"./routes/DedicatedKafkaInstancesRoute\";\nimport {\n  DedicatedControlPlaneChangeOwnerPath,\n  DedicatedControlPlaneClustersPath,\n  DedicatedControlPlaneDeleteInstancePath,\n  DedicatedControlPlaneNewInstancePath,\n  DedicatedControlPlaneRoutePath,\n  DedicatedControlPlaneRouteRoot,\n} from \"./routesConsts\";\n\nexport const DedicatedControlPlaneRoutes: VoidFunctionComponent = () => {\n  return (\n    <Route path={DedicatedControlPlaneRoutePath}>\n      <Route path={DedicatedControlPlaneNewInstancePath}>\n        <CreateKafkaInstanceRoute\n          instancesHref={DedicatedControlPlaneRouteRoot}\n        />\n      </Route>\n      <RedirectOnGateError redirectUrl={DedicatedControlPlaneRoutePath}>\n        <Route path={DedicatedControlPlaneDeleteInstancePath}>\n          <DeleteKafkaInstanceRoute\n            instancesHref={DedicatedControlPlaneRouteRoot}\n          />\n        </Route>\n        <Route path={DedicatedControlPlaneChangeOwnerPath}>\n          <ChangeOwnerRoute instancesHref={DedicatedControlPlaneRouteRoot} />\n        </Route>\n      </RedirectOnGateError>\n\n      <Switch>\n        <Route path={DedicatedControlPlaneClustersPath}>\n          <DedicatedClustersRoute />\n        </Route>\n\n        <Route path={DedicatedControlPlaneRoutePath} exact>\n          <DedicatedKafkaInstancesRoute\n            activeSection={\"dedicated\"}\n            instancesHref={DedicatedControlPlaneRouteRoot}\n            instanceSelectedHref={(id) =>\n              `${DedicatedControlPlaneRouteRoot}/${id}`\n            }\n            instanceCreationHref={`${DedicatedControlPlaneRouteRoot}/create`}\n            instanceDeletionHref={(id) =>\n              `${DedicatedControlPlaneRouteRoot}/${id}/delete`\n            }\n            instanceChangeOwnerHref={(id) =>\n              `${DedicatedControlPlaneRouteRoot}/${id}/change-owner`\n            }\n            getUrlForInstance={(instance) =>\n              `${DedicatedControlPlaneRouteRoot}/${instance.id}/details`\n            }\n          />\n        </Route>\n      </Switch>\n    </Route>\n  );\n};\n","import type { ControlPlaneNavigationProps } from \"../control-plane/routesConsts\";\nimport {\n  ControlPlaneRouteRoot,\n  DedicatedControlPlaneRouteRoot,\n} from \"../control-plane/routesConsts\";\n\nexport const DataPlaneRoutePath =\n  `${ControlPlaneRouteRoot}/:id/details` as const;\n\nexport const DataPlaneTopicRoutePath =\n  `${ControlPlaneRouteRoot}/:id/details/topics/:topicName` as const;\n\nexport const DataPlaneConsumerGroupRoutePath =\n  `${ControlPlaneRouteRoot}/:id/details/consumer-groups/:consumerGroupId` as const;\n\nexport const DataPlaneTopicConsumerGroupRoutePath =\n  `${ControlPlaneRouteRoot}/:id/details/topics/:topicName/consumer-groups/:consumerGroupId` as const;\n\nexport const DedicatedDataPlaneRoutePath =\n  `${DedicatedControlPlaneRouteRoot}/:id/details` as const;\n\nexport const DedicatedDataPlaneTopicRoutePath =\n  `${DedicatedControlPlaneRouteRoot}/:id/details/topics/:topicName` as const;\n\nexport const DedicatedDataPlaneConsumerGroupRoutePath =\n  `${DedicatedControlPlaneRouteRoot}/:id/details/consumer-groups/:consumerGroupId` as const;\n\nexport const DedicatedDataPlaneTopicConsumerGroupRoutePath =\n  `${DedicatedControlPlaneRouteRoot}/:id/details/topics/:topicName/consumer-groups/:consumerGroupId` as const;\n\nexport type DataPlaneRouteParams = { id: string };\nexport type DataPlaneTopicRouteParams = { id: string; topicName: string };\nexport type DataPlaneConsumerGroupRouteParams = {\n  id: string;\n  consumerGroupId: string;\n};\n\nexport type DataPlaneTopicConsumerRouteParams = {\n  id: string;\n  topicName: string;\n  consumerGroupId: string;\n};\n\nexport type DataPlaneNavigationProps = {\n  instanceDetailsHref: (instanceId: string) => string;\n  instanceTopicsHref: (instanceId: string) => string;\n  instanceConsumerGroupsHref: (instanceId: string) => string;\n} & ControlPlaneNavigationProps;\n\nexport type DataPlaneTopicNavigationProps = {\n  instanceDetailsHref: (instanceId: string) => string;\n  instanceTopicsHref: (instanceId: string) => string;\n  instanceConsumerGroupsHref: (instanceId: string) => string;\n  topicHref: (instanceId: string, topicName: string) => string;\n  deleteTopicHref: (instanceId: string, topicName: string) => string;\n  updateTopicHref: (instanceId: string, topicName: string) => string;\n} & ControlPlaneNavigationProps;\n\nexport type DataPlaneConsumerGroupNavigationsProps = {\n  instanceTopicsHref: (instanceId: string) => string;\n  instanceDetailsHref: (instanceId: string) => string;\n  instanceConsumerGroupsHref: (instanceId: string) => string;\n  viewPartitionConsumerGroupHref: (\n    instanceId: string,\n    consumerGroupId: string\n  ) => string;\n} & ControlPlaneNavigationProps;\n\nexport type DataPlaneTopicConsumerGroupNavigationsProps = {\n  instanceTopicConsumerGroupsHref: (\n    instanceId: string,\n    topicName: string\n  ) => string;\n  viewTopicPartitionConsumerGroupHref: (\n    instanceId: string,\n    consumerGroupId: string,\n    topicName: string\n  ) => string;\n  instanceDetailsHref: (instanceId: string) => string;\n  instanceTopicsHref: (instanceId: string) => string;\n  instanceConsumerGroupsHref: (instanceId: string) => string;\n} & ControlPlaneNavigationProps;\n","import { useKafka } from \"consoledot-api\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport type { DataPlaneRouteParams } from \"./routesConsts\";\nimport {\n  DataPlaneRoutePath,\n  DedicatedDataPlaneRoutePath,\n} from \"./routesConsts\";\n\nexport function useDataPlaneGate() {\n  const standardMatch = useRouteMatch<DataPlaneRouteParams>(DataPlaneRoutePath);\n  const dedicatedMatch = useRouteMatch<DataPlaneRouteParams>(\n    DedicatedDataPlaneRoutePath\n  );\n  const match = standardMatch || dedicatedMatch;\n  if (!match) {\n    throw Error(\"useDataPlaneGate used outside the expected route\");\n  }\n  const { data: instance } = useKafka(match.params.id, true);\n  return { instance: instance as NonNullable<typeof instance>, match };\n}\n","import type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport type { DataPlaneHeaderProps } from \"ui\";\nimport { DataPlaneHeader } from \"ui\";\nimport { ReadyStatuses } from \"ui-models/src/models/kafka\";\nimport { useDrawer } from \"../../control-plane\";\nimport type { ControlPlaneNavigationProps } from \"../../control-plane/routesConsts\";\nimport { useDataPlaneGate } from \"../useDataPlaneGate\";\n\nexport const DataPlaneHeaderConnected: VoidFunctionComponent<\n  ControlPlaneNavigationProps & Pick<DataPlaneHeaderProps, \"activeSection\">\n> = ({ instancesHref, activeSection }) => {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const history = useHistory();\n  const { setActiveTab, toggleExpanded } = useDrawer();\n\n  const {\n    instance,\n    match: { url },\n  } = useDataPlaneGate();\n\n  const sectionsHref = {\n    dashboard: `${url}/dashboard`,\n    topics: `${url}/topics`,\n    consumer: `${url}/consumer-groups`,\n    permissions: `${url}/acls`,\n    settings: `${url}/settings`,\n  };\n\n  const onDelete = useCallback(() => {\n    // TODO: unhardcode this url\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    history.push(`${instancesHref}/${instance.id}/delete`);\n  }, [history, instance, instancesHref]);\n\n  return (\n    <DataPlaneHeader\n      instancesHref={instancesHref}\n      instanceName={instance?.name || \"\"}\n      activeSection={activeSection}\n      sectionsHref={sectionsHref}\n      onDetails={() => {\n        setActiveTab(\"details\");\n        toggleExpanded(true);\n      }}\n      onConnection={() => {\n        setActiveTab(\"connections\");\n        toggleExpanded(true);\n      }}\n      canOpenConnection={\n        instance ? ReadyStatuses.includes(instance?.status) : false\n      }\n      canChangeOwner={true /* TODO */}\n      onChangeOwner={() => false /* TODO */}\n      canDelete={true /* TODO */}\n      onDelete={onDelete}\n    />\n  );\n};\n","import { PageSection } from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport type { ControlPlaneNavigationProps } from \"../../control-plane/routesConsts\";\nimport { DataPlaneHeaderConnected } from \"./DataPlaneHeaderConnected\";\n\nexport const AclsRoute: VoidFunctionComponent<ControlPlaneNavigationProps> = ({\n  instancesHref,\n}) => {\n  return (\n    <>\n      <DataPlaneHeaderConnected\n        instancesHref={instancesHref}\n        activeSection={\"permissions\"}\n      />\n      <PageSection>TODO</PageSection>\n    </>\n  );\n};\n","import {\n  usePaginationSearchParams,\n  useSortableSearchParams,\n  useURLSearchParamsChips,\n} from \"@rhoas/app-services-ui-components\";\nimport { KafkaTopicsSortableColumns, useTopics } from \"consoledot-api\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { KafkaTopics, useTopicLabels } from \"ui\";\nimport type { ControlPlaneNavigationProps } from \"../../control-plane/routesConsts\";\nimport { useDataPlaneGate } from \"../useDataPlaneGate\";\nimport { DataPlaneHeaderConnected } from \"./DataPlaneHeaderConnected\";\n\nexport const TopicsRoute: VoidFunctionComponent<\n  ControlPlaneNavigationProps\n> = ({ instancesHref }) => {\n  const labels = useTopicLabels();\n\n  const { instance } = useDataPlaneGate();\n  const { page, perPage, setPagination, setPaginationQuery } =\n    usePaginationSearchParams();\n  const resetPaginationQuery = useCallback(\n    () => setPaginationQuery(1, perPage),\n    [perPage, setPaginationQuery]\n  );\n\n  const topicChips = useURLSearchParamsChips(\"topic\", resetPaginationQuery);\n  const [isColumnSortable, sort, sortDirection] = useSortableSearchParams(\n    KafkaTopicsSortableColumns,\n    labels.fields\n  );\n  const { data } = useTopics({\n    id: instance?.id,\n    adminUrl: instance?.adminUrl,\n    page,\n    perPage,\n    sort: sort || undefined,\n    direction: sortDirection,\n    filter: topicChips.chips[0],\n    plan: instance.plan,\n  });\n  return (\n    <>\n      <DataPlaneHeaderConnected\n        instancesHref={instancesHref}\n        activeSection={\"topics\"}\n      />\n      <KafkaTopics\n        topics={data?.topics}\n        itemCount={data?.count}\n        page={page}\n        perPage={perPage}\n        topicName={topicChips.chips}\n        getUrlFortopic={(row) => `./topics/${row.name}`}\n        isColumnSortable={isColumnSortable}\n        onDelete={() => {\n          /* TODO */\n        }}\n        onEdit={() => {\n          /* TODO */\n        }}\n        onSearchTopic={(value) => {\n          topicChips.clear();\n          topicChips.toggle(value);\n        }}\n        onClearAllFilters={topicChips.clear}\n        onCreateTopic={() => {\n          /* TODO */\n        }}\n        onPageChange={setPagination}\n        onRemoveTopicChip={topicChips.clear}\n        onRemoveTopicChips={topicChips.clear}\n        onTopicLinkClick={() => {\n          /* TODO */\n        }}\n      />\n    </>\n  );\n};\n","import { useUpdateKafkaMutation } from \"consoledot-api\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport type { SettingsProps } from \"ui\";\nimport { Settings as SettingsComp } from \"ui\";\nimport type { ControlPlaneNavigationProps } from \"../../control-plane/routesConsts\";\nimport { useDataPlaneGate } from \"../useDataPlaneGate\";\nimport { DataPlaneHeaderConnected } from \"./DataPlaneHeaderConnected\";\n\nexport const SettingsRoute: VoidFunctionComponent<\n  ControlPlaneNavigationProps\n> = ({ instancesHref }) => {\n  const { instance } = useDataPlaneGate();\n  const updateInstance = useUpdateKafkaMutation();\n\n  const onSubmitReAuthentication = useCallback<\n    SettingsProps[\"onSubmitReAuthentication\"]\n  >(\n    async (reauthenticationEnabled) => {\n      try {\n        await updateInstance.mutateAsync({\n          id: instance.id,\n          updates: { reauthentication_enabled: reauthenticationEnabled },\n        });\n        return reauthenticationEnabled;\n      } catch {\n        return instance.request.reauthentication_enabled;\n      }\n    },\n    [instance, updateInstance]\n  );\n  return (\n    <>\n      <DataPlaneHeaderConnected\n        instancesHref={instancesHref}\n        activeSection={\"settings\"}\n      />\n      <SettingsComp\n        onSubmitReAuthentication={onSubmitReAuthentication}\n        reauthenticationEnabled={instance.request.reauthentication_enabled}\n      />\n    </>\n  );\n};\n","import {\n  useKafkaFetchQuery,\n  useKafkaKpisFetchQuery,\n  useKafkaMetricsFetchQuery,\n  useTopicsFetchQuery,\n  useTopicsMetricsFetchQuery,\n} from \"consoledot-api\";\nimport {\n  metricsDismissLagAlerts,\n  metricsIsLagAlertsDismissed,\n} from \"local-storage-helpers\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback, useState } from \"react\";\nimport type { MetricsProps } from \"ui\";\nimport { Metrics } from \"ui\";\nimport type { ControlPlaneNavigationProps } from \"../../control-plane/routesConsts\";\nimport { useDataPlaneGate } from \"../useDataPlaneGate\";\nimport { DataPlaneHeaderConnected } from \"./DataPlaneHeaderConnected\";\n\nexport const DashboardRoute: VoidFunctionComponent<\n  ControlPlaneNavigationProps\n> = ({ instancesHref }) => {\n  const {\n    instance,\n    match: { params },\n  } = useDataPlaneGate();\n  const [hasUserAlreadyClosedAlert, setHasUserAlreadyClosedAlert] = useState(\n    metricsIsLagAlertsDismissed()\n  );\n\n  const onAlertClose = useCallback(() => {\n    setHasUserAlreadyClosedAlert(true);\n    metricsDismissLagAlerts();\n  }, []);\n\n  const queryInstance = useKafkaFetchQuery();\n  const queryKpisMetrics = useKafkaKpisFetchQuery();\n  const queryInstanceMetrics = useKafkaMetricsFetchQuery();\n  const queryTopicMetrics = useTopicsMetricsFetchQuery();\n  const queryTopics = useTopicsFetchQuery();\n\n  const getMetricsKpi: MetricsProps[\"getMetricsKpi\"] = useCallback(async () => {\n    const kpis = await queryKpisMetrics(params.id);\n    return {\n      ...kpis,\n      topicPartitionsLimit: instance.maxPartitions || 0,\n    };\n  }, [instance, params.id, queryKpisMetrics]);\n\n  const getKafkaInstanceMetrics: MetricsProps[\"getKafkaInstanceMetrics\"] =\n    useCallback(\n      async ({ interval, duration }) => {\n        const [instance, metrics] = await Promise.all([\n          queryInstance(params.id),\n          queryInstanceMetrics({ id: params.id, duration, interval }),\n        ]);\n        if (!instance) {\n          return Promise.reject(\"Can't retrieve instance\");\n        }\n        return {\n          ...metrics,\n          diskSpaceLimit:\n            (instance.request.max_data_retention_size?.bytes || 0) / 1073741824,\n          connectionsLimit: instance.connections || 0,\n          connectionRateLimit: instance.connectionRate || 0,\n        };\n      },\n      [params.id, queryInstance, queryInstanceMetrics]\n    );\n\n  const getTopicsMetrics: MetricsProps[\"getTopicsMetrics\"] = useCallback(\n    async ({ interval, duration, selectedTopic }) => {\n      const [instance, metrics] = await Promise.all([\n        queryInstance(params.id),\n        queryTopicMetrics({ id: params.id, duration, interval, selectedTopic }),\n      ]);\n      if (!instance || !instance.adminUrl) {\n        return Promise.reject(\"Can't retrieve instance\");\n      }\n      const kafkaTopics = (\n        await queryTopics({\n          id: instance.id,\n          adminUrl: instance.adminUrl,\n          page: 1,\n          perPage: 1000,\n          plan: instance.plan,\n        })\n      ).topics.map((t) => t.name);\n      return {\n        ...metrics,\n        kafkaTopics,\n      };\n    },\n    [params.id, queryInstance, queryTopicMetrics, queryTopics]\n  );\n\n  return (\n    <>\n      <DataPlaneHeaderConnected\n        instancesHref={instancesHref}\n        activeSection={\"dashboard\"}\n      />\n      <Metrics\n        onCreateTopic={() => {\n          /* TODO */\n        }}\n        onAlertClose={onAlertClose}\n        hasUserAlreadyClosedAlert={hasUserAlreadyClosedAlert}\n        getKafkaInstanceMetrics={getKafkaInstanceMetrics}\n        getTopicsMetrics={getTopicsMetrics}\n        getMetricsKpi={getMetricsKpi}\n      />\n    </>\n  );\n};\n","import {\n  usePaginationSearchParams,\n  useSortableSearchParams,\n  useURLSearchParamsChips,\n} from \"@rhoas/app-services-ui-components\";\nimport {\n  KafkaConsumerGroupSortableColumns,\n  useConsumerGroups,\n} from \"consoledot-api\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { ConsumerGroups, useConsumerGroupLabels } from \"ui\";\nimport type { DataPlaneNavigationProps } from \"../routesConsts\";\nimport { useDataPlaneGate } from \"../useDataPlaneGate\";\nimport { DataPlaneHeaderConnected } from \"./DataPlaneHeaderConnected\";\n\nexport const ConsumerGroupsRoute: VoidFunctionComponent<\n  DataPlaneNavigationProps\n> = ({ instancesHref, instanceConsumerGroupsHref }) => {\n  const { instance } = useDataPlaneGate();\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const history = useHistory();\n\n  const labels = useConsumerGroupLabels();\n\n  const { page, perPage, setPagination, setPaginationQuery } =\n    usePaginationSearchParams();\n  const resetPaginationQuery = useCallback(\n    () => setPaginationQuery(1, perPage),\n    [perPage, setPaginationQuery]\n  );\n\n  const name = labels.fields.groupId;\n\n  const consumerName = useURLSearchParamsChips(\n    \"consumer\",\n    resetPaginationQuery\n  );\n  const [isColumnSortable, sort, sortDirection] = useSortableSearchParams(\n    KafkaConsumerGroupSortableColumns,\n    { name }\n  );\n  const { data } = useConsumerGroups({\n    id: instance?.id,\n    adminUrl: instance?.adminUrl,\n    page,\n    perPage,\n    sort: sort || undefined,\n    direction: sortDirection,\n    groupId: consumerName.chips[0],\n  });\n\n  const onDeletConsumerGroup = useCallback(\n    (groupId: string) => {\n      //TODO: remove hardcode value\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n      history.push(\n        `${instanceConsumerGroupsHref(instance.id)}/${groupId}/delete`\n      );\n    },\n    [history, instance.id, instanceConsumerGroupsHref]\n  );\n\n  const onViewPartition = useCallback(\n    (groupId: string) => {\n      //TODO: remove hardcode value\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n      history.push(\n        `${instanceConsumerGroupsHref(instance.id)}/${groupId}/view-partition`\n      );\n    },\n    [history, instance.id, instanceConsumerGroupsHref]\n  );\n\n  const onClickResetOffset = useCallback(\n    (groupId: string) => {\n      //TODO: remove hardcode value\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n      history.push(\n        `${instanceConsumerGroupsHref(instance.id)}/${groupId}/reset-offset`\n      );\n    },\n    [history, instance.id, instanceConsumerGroupsHref]\n  );\n  return (\n    <>\n      <DataPlaneHeaderConnected\n        instancesHref={instancesHref}\n        activeSection={\"consumer\"}\n      />\n      <ConsumerGroups\n        consumers={data?.groups}\n        itemCount={data?.count}\n        page={page}\n        perPage={perPage}\n        consumerName={consumerName.chips}\n        isRowSelected={() => false}\n        isColumnSortable={isColumnSortable}\n        onDelete={(row) => onDeletConsumerGroup(row.groupId)}\n        onSearchConsumer={(value) => {\n          consumerName.clear();\n          consumerName.toggle(value);\n        }}\n        onClearAllFilters={consumerName.clear}\n        onPageChange={setPagination}\n        onRemoveConsumerChip={consumerName.clear}\n        onRemoveConsumerChips={consumerName.clear}\n        onViewPartition={(row) => onViewPartition(row.groupId)}\n        onViewResetOffset={(row) => onClickResetOffset(row.groupId)}\n      />\n    </>\n  );\n};\n","import { useTopic } from \"consoledot-api\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport type { DataPlaneTopicRouteParams } from \"./routesConsts\";\nimport {\n  DataPlaneTopicRoutePath,\n  DedicatedDataPlaneTopicRoutePath,\n} from \"./routesConsts\";\nimport { useDataPlaneGate } from \"./useDataPlaneGate\";\n\nexport function useTopicGate() {\n  const { instance } = useDataPlaneGate();\n  const standardMatch = useRouteMatch<DataPlaneTopicRouteParams>(\n    DataPlaneTopicRoutePath\n  );\n  const dedicatedMatch = useRouteMatch<DataPlaneTopicRouteParams>(\n    DedicatedDataPlaneTopicRoutePath\n  );\n  const match = standardMatch || dedicatedMatch;\n  if (!match) {\n    throw Error(\"useDataPlaneGate used outside the expected route\");\n  }\n  const { data: topic } = useTopic(\n    {\n      id: instance.id,\n      adminUrl: instance.adminUrl,\n      topicName: match.params.topicName,\n      plan: instance.plan,\n    },\n    true\n  );\n\n  return {\n    instance,\n    topic: topic as NonNullable<typeof topic>,\n    match,\n  };\n}\n","import type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport type { DataPlaneTopicHeaderProps } from \"ui\";\nimport { DataPlaneTopicHeader } from \"ui\";\nimport { ReadyStatuses } from \"ui-models/src/models/kafka\";\nimport { useDrawer } from \"../../control-plane\";\nimport type { DataPlaneNavigationProps } from \"../routesConsts\";\nimport { useTopicGate } from \"../useTopicGate\";\n\nexport const DataPlaneTopicHeaderConnected: VoidFunctionComponent<\n  DataPlaneNavigationProps & Pick<DataPlaneTopicHeaderProps, \"activeSection\">\n> = ({\n  instanceDetailsHref,\n  instanceTopicsHref,\n  instancesHref,\n  activeSection,\n}) => {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const history = useHistory();\n  const { setActiveTab, toggleExpanded } = useDrawer();\n  const {\n    instance,\n    topic,\n    match: { url },\n  } = useTopicGate();\n\n  const tabsHref = {\n    consumer: `${url}/consumer-groups`,\n    messages: `${url}/messages`,\n    properties: `${url}/properties`,\n    schemas: `${url}/schemas`,\n  };\n\n  const onDelete = useCallback(() => {\n    // TODO: unhardcode this url\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    history.push(`${instancesHref}/${instance.id}/delete`);\n  }, [history, instance, instancesHref]);\n\n  return (\n    <DataPlaneTopicHeader\n      instancesHref={instancesHref}\n      instanceName={instance.name}\n      instanceDetailHref={instanceDetailsHref(instance.id)}\n      instanceTopicsHref={instanceTopicsHref(instance.id)}\n      activeSection={activeSection}\n      topicName={topic.name}\n      tabsHref={tabsHref}\n      onDetails={() => {\n        setActiveTab(\"details\");\n        toggleExpanded(true);\n      }}\n      onConnection={() => {\n        setActiveTab(\"connections\");\n        toggleExpanded(true);\n      }}\n      canOpenConnection={\n        instance ? ReadyStatuses.includes(instance?.status) : false\n      }\n      canChangeOwner={true /* TODO */}\n      onChangeOwner={() => false /* TODO */}\n      canDelete={true /* TODO */}\n      onDelete={onDelete}\n    />\n  );\n};\n","import {\n  usePaginationSearchParams,\n  useSortableSearchParams,\n  useURLSearchParamsChips,\n} from \"@rhoas/app-services-ui-components\";\nimport {\n  KafkaConsumerGroupSortableColumns,\n  useConsumerGroups,\n} from \"consoledot-api\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { ConsumerGroups, useConsumerGroupLabels } from \"ui\";\nimport { ControlPlaneRouteRoot } from \"../../control-plane/routesConsts\";\nimport type { DataPlaneNavigationProps } from \"../routesConsts\";\nimport { useTopicGate } from \"../useTopicGate\";\nimport { DataPlaneTopicHeaderConnected } from \"./DataPlaneTopicHeaderConnected\";\n\nexport const TopicConsumerGroupsRoute: VoidFunctionComponent<\n  DataPlaneNavigationProps\n> = ({\n  instanceDetailsHref,\n  instanceTopicsHref,\n  instancesHref,\n  instanceConsumerGroupsHref,\n}) => {\n  const { instance, topic } = useTopicGate();\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const history = useHistory();\n\n  const labels = useConsumerGroupLabels();\n\n  const { page, perPage, setPagination, setPaginationQuery } =\n    usePaginationSearchParams();\n\n  const resetPaginationQuery = useCallback(\n    () => setPaginationQuery(1, perPage),\n    [perPage, setPaginationQuery]\n  );\n\n  const name = labels.fields.groupId;\n\n  const consumerName = useURLSearchParamsChips(\n    \"consumer\",\n    resetPaginationQuery\n  );\n  const [isColumnSortable, sort, sortDirection] = useSortableSearchParams(\n    KafkaConsumerGroupSortableColumns,\n    { name }\n  );\n\n  const { data } = useConsumerGroups({\n    id: instance?.id,\n    adminUrl: instance?.adminUrl,\n    page,\n    perPage,\n    sort: sort || undefined,\n    direction: sortDirection,\n    groupId: consumerName.chips[0],\n    topic: topic.name,\n  });\n\n  const onDeletConsumerGroup = useCallback(\n    (groupId: string) => {\n      //TODO: remove hardcode value\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n      history.push(\n        `${ControlPlaneRouteRoot}/${instance.id}/details/topics/${topic.name}/consumer-groups/${groupId}/delete`\n      );\n    },\n    [history, instance.id, topic.name]\n  );\n\n  const onViewPartition = useCallback(\n    (groupId: string) => {\n      //TODO: remove hardcode value\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n      history.push(\n        `${ControlPlaneRouteRoot}/${instance.id}/details/topics/${topic.name}/consumer-groups/${groupId}/view-partition`\n      );\n    },\n    [history, instance.id, topic.name]\n  );\n\n  const onClickResetOffset = useCallback(\n    (groupId: string) => {\n      //TODO: remove hardcode value\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n      history.push(\n        `${ControlPlaneRouteRoot}/${instance.id}/details/topics/${topic.name}/consumer-groups/${groupId}/reset-offset`\n      );\n    },\n    [history, instance.id, topic.name]\n  );\n\n  return (\n    <>\n      <DataPlaneTopicHeaderConnected\n        instancesHref={instancesHref}\n        instanceDetailsHref={instanceDetailsHref}\n        instanceTopicsHref={instanceTopicsHref}\n        instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n        activeSection={\"consumer\"}\n      />\n      <ConsumerGroups\n        consumers={data?.groups}\n        itemCount={data?.count}\n        page={page}\n        perPage={perPage}\n        consumerName={consumerName.chips}\n        isRowSelected={() => false}\n        isColumnSortable={isColumnSortable}\n        onDelete={(row) => onDeletConsumerGroup(row.groupId)}\n        onSearchConsumer={(value) => {\n          consumerName.clear();\n          consumerName.toggle(value);\n        }}\n        onClearAllFilters={consumerName.clear}\n        onPageChange={setPagination}\n        onRemoveConsumerChip={consumerName.clear}\n        onRemoveConsumerChips={consumerName.clear}\n        onViewPartition={(row) => onViewPartition(row.groupId)}\n        onViewResetOffset={(row) => onClickResetOffset(row.groupId)}\n      />\n    </>\n  );\n};\n","import { useMessagesFetchQuery } from \"consoledot-api\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport type { KafkaMessageBrowserProps } from \"ui\";\nimport { KafkaMessageBrowser } from \"ui\";\nimport type { DataPlaneNavigationProps } from \"../routesConsts\";\nimport { useTopicGate } from \"../useTopicGate\";\nimport { DataPlaneTopicHeaderConnected } from \"./DataPlaneTopicHeaderConnected\";\n\nexport const TopicMessagesGroupsRoute: VoidFunctionComponent<\n  DataPlaneNavigationProps\n> = ({\n  instanceDetailsHref,\n  instanceTopicsHref,\n  instancesHref,\n  instanceConsumerGroupsHref,\n}) => {\n  const { instance, topic } = useTopicGate();\n  const kafkaTopicMessagesFetchQuery = useMessagesFetchQuery();\n\n  const getMessages = useCallback<KafkaMessageBrowserProps[\"getMessages\"]>(\n    async (params) => {\n      if (!instance.adminUrl) {\n        throw Error(\"Invalid instance adminUrl\");\n      }\n      const messages = await kafkaTopicMessagesFetchQuery({\n        ...params,\n        id: instance.id,\n        adminUrl: instance.adminUrl,\n        topicName: topic.name,\n      });\n      return {\n        messages,\n        partitions: topic.partitions.length,\n      };\n    },\n    [\n      instance.adminUrl,\n      instance.id,\n      kafkaTopicMessagesFetchQuery,\n      topic.name,\n      topic.partitions.length,\n    ]\n  );\n\n  return (\n    <>\n      <DataPlaneTopicHeaderConnected\n        instancesHref={instancesHref}\n        instanceDetailsHref={instanceDetailsHref}\n        instanceTopicsHref={instanceTopicsHref}\n        instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n        activeSection={\"messages\"}\n      />\n      <KafkaMessageBrowser getMessages={getMessages} />\n    </>\n  );\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { TopicProperties } from \"ui\";\nimport type { DataPlaneTopicNavigationProps } from \"../routesConsts\";\nimport { useTopicGate } from \"../useTopicGate\";\nimport { DataPlaneTopicHeaderConnected } from \"./DataPlaneTopicHeaderConnected\";\n\nexport const TopicPropertiesRoute: VoidFunctionComponent<\n  DataPlaneTopicNavigationProps\n> = ({\n  instanceDetailsHref,\n  instanceTopicsHref,\n  instanceConsumerGroupsHref,\n  instancesHref,\n  deleteTopicHref,\n  updateTopicHref,\n}) => {\n  const { instance, topic } = useTopicGate();\n\n  return (\n    <>\n      <DataPlaneTopicHeaderConnected\n        instancesHref={instancesHref}\n        instanceDetailsHref={instanceDetailsHref}\n        instanceTopicsHref={instanceTopicsHref}\n        instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n        activeSection={\"properties\"}\n      />\n      <TopicProperties\n        topic={topic}\n        deleteTopicHref={deleteTopicHref(instance.id, topic.name)}\n        updateTopicHref={updateTopicHref(instance.id, topic.name)}\n      />\n    </>\n  );\n};\n","/* eslint-disable */\n// @ts-nocheck\nimport { useChrome } from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport { I18nProvider } from \"@rhoas/app-services-ui-components\";\nimport type { Auth, Config } from \"@rhoas/app-services-ui-shared\";\nimport { AuthContext, ConfigContext } from \"@rhoas/app-services-ui-shared\";\n/* tslint:disable */\nimport type { Registry } from \"@rhoas/registry-management-sdk\";\nimport type { ScalprumComponentProps } from \"@scalprum/react-core\";\nimport { ScalprumComponent } from \"@scalprum/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport type { DataPlaneNavigationProps } from \"../routesConsts\";\nimport { useTopicGate } from \"../useTopicGate\";\nimport { DataPlaneTopicHeaderConnected } from \"./DataPlaneTopicHeaderConnected\";\n\nexport const TopicSchemasRoute: VoidFunctionComponent<\n  DataPlaneNavigationProps\n> = ({\n  instanceDetailsHref,\n  instanceTopicsHref,\n  instancesHref,\n  instanceConsumerGroupsHref,\n}) => {\n  const chrome = useChrome();\n  const { topic } = useTopicGate();\n  const processor = (([_, m]: [string, { entry: string[] }]) =>\n    m.entry.map(\n      (e) => `/beta/apps/srs-ui-build${e}`\n    )) as unknown as ScalprumComponentProps[\"processor\"];\n  const processor2 = (([_, m]: [string, { entry: string[] }]) =>\n    m.entry.map(\n      (e) => `/beta/apps/sr-ui-build${e}`\n    )) as unknown as ScalprumComponentProps[\"processor\"];\n  const basename = \"/service-registry\";\n  const auth: Auth = {\n    srs: { getToken: chrome.auth.getToken },\n  };\n  const config: Config = {\n    srs: { apiBasePath: process.env.API_URL },\n  };\n  return (\n    <>\n      <DataPlaneTopicHeaderConnected\n        instancesHref={instancesHref}\n        instanceDetailsHref={instanceDetailsHref}\n        instanceTopicsHref={instanceTopicsHref}\n        instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n        activeSection={\"schemas\"}\n      />\n      <AuthContext.Provider value={auth}>\n        <ConfigContext.Provider value={config}>\n          <I18nProvider\n            lng={\"en\"}\n            resources={{\n              en: {\n                common: () =>\n                  import(\n                    \"@rhoas/app-services-ui-components/locales/en/common.json\"\n                  ),\n                \"service-registry\": () =>\n                  import(\n                    \"@rhoas/app-services-ui-components/locales/en/service-registry.json\"\n                  ),\n                srsTemporaryFixMe: () => import(\"./srs-locales.json\"),\n              },\n            }}\n            debug={true}\n          >\n            <ScalprumComponent\n              appName=\"srs\"\n              module=\"./ServiceRegistryMapping\"\n              scope=\"srs\"\n              ErrorComponent={<div>opsie</div>}\n              processor={processor}\n              basename={basename}\n              topicName={topic.name}\n              renderSchema={(registry: Registry) => {\n                return (\n                  <ScalprumComponent\n                    appName=\"ar\"\n                    scope=\"ar\"\n                    ErrorComponent={<div>opsie</div>}\n                    processor={processor2}\n                    module=\"./FederatedSchemaMapping\"\n                    registry={registry}\n                    topicName={topic.name}\n                    groupId={null}\n                    version={\"latest\"}\n                    registryId={registry?.id}\n                    basename={basename}\n                  />\n                );\n              }}\n            />\n          </I18nProvider>\n        </ConfigContext.Provider>\n      </AuthContext.Provider>\n    </>\n  );\n};\n","import { useConsumerGroup } from \"consoledot-api\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport { DataPlaneConsumerGroupRoutePath } from \"./routesConsts\";\nimport type { DataPlaneConsumerGroupRouteParams } from \"./routesConsts\";\nimport { useDataPlaneGate } from \"./useDataPlaneGate\";\n\nexport function useConsumerGroupGate() {\n  const { instance } = useDataPlaneGate();\n  const match = useRouteMatch<DataPlaneConsumerGroupRouteParams>(\n    DataPlaneConsumerGroupRoutePath\n  );\n  if (!match) {\n    throw Error(\"useConsumerGroupGate used outside the expected route\");\n  }\n  const { data: consumerGroup } = useConsumerGroup(\n    {\n      id: instance.id,\n      adminUrl: instance.adminUrl,\n      consumerGroupId: match.params.consumerGroupId,\n    },\n    true\n  );\n\n  return {\n    instance,\n    consumerGroup: consumerGroup as NonNullable<typeof consumerGroup>,\n    match,\n  };\n}\n","import type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { DeleteConsumerGroup } from \"ui\";\nimport { useDeleteConsumerGroupMutation } from \"consoledot-api\";\nimport type { DataPlaneConsumerGroupNavigationsProps } from \"../routesConsts\";\nimport { useConsumerGroupGate } from \"../useConsumerGroupGate\";\n\nexport const ConsumerGroupDeleteRoute: VoidFunctionComponent<\n  DataPlaneConsumerGroupNavigationsProps\n> = ({ instanceConsumerGroupsHref }) => {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const history = useHistory();\n\n  const { instance, consumerGroup } = useConsumerGroupGate();\n\n  const { mutateAsync } = useDeleteConsumerGroupMutation();\n\n  const onCancel = useCallback(() => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    history.push(instanceConsumerGroupsHref(instance.id));\n  }, [history, instance.id, instanceConsumerGroupsHref]);\n\n  const onDelete = useCallback(() => {\n    void mutateAsync({\n      instanceId: instance.id,\n      adminUrl: instance.adminUrl!,\n      consumerGroupId: consumerGroup.groupId,\n      onError: () => {\n        // TODO: alert\n      },\n      onSuccess: () => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n        history.replace(instanceConsumerGroupsHref(instance.id));\n      },\n    });\n  }, [\n    mutateAsync,\n    history,\n    instance?.id,\n    instanceConsumerGroupsHref,\n    consumerGroup.groupId,\n    instance.adminUrl,\n  ]);\n\n  return (\n    <DeleteConsumerGroup\n      isModalOpen={true}\n      onClose={onCancel}\n      onDeleteConsumer={onDelete}\n      state={consumerGroup.state}\n      consumerName={consumerGroup.groupId}\n      appendTo={() =>\n        (document.getElementById(\"chrome-app-render-root\") as HTMLElement) ||\n        document.body\n      }\n    />\n  );\n};\n","import { useCallback } from \"react\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { ConsumerGroupResetOffset } from \"ui\";\nimport type { OffsetValue } from \"ui\";\nimport type { DataPlaneConsumerGroupNavigationsProps } from \"../routesConsts\";\nimport { useHistory } from \"react-router-dom\";\nimport { useResetConsumerGroupMutation } from \"consoledot-api\";\nimport { useConsumerGroupGate } from \"../useConsumerGroupGate\";\n\nexport const ConsumerGroupResetOffsetRoute: VoidFunctionComponent<\n  DataPlaneConsumerGroupNavigationsProps\n> = ({ instanceConsumerGroupsHref }) => {\n  const { instance, consumerGroup } = useConsumerGroupGate();\n\n  const { mutateAsync } = useResetConsumerGroupMutation();\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const history = useHistory();\n\n  const onCancel = useCallback(() => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    history.push(instanceConsumerGroupsHref(instance.id));\n  }, [history, instance.id, instanceConsumerGroupsHref]);\n\n  const getTopics = () => {\n    const topics = (consumerGroup.consumers || []).map(\n      (consumer) => consumer.topic\n    );\n    const distinctTopics = Array.from(new Set(topics));\n    return distinctTopics;\n  };\n\n  const onConfirmResetOffset = useCallback(\n    (\n      topic: string,\n      offset: OffsetValue,\n      partitions: number[],\n      customOffsetValue: string\n    ) => {\n      void mutateAsync({\n        instanceId: instance.id,\n        adminUrl: instance.adminUrl!,\n        consumerGroupId: consumerGroup.groupId,\n        topic: topic,\n        offset: offset,\n        partitions: partitions,\n        value: customOffsetValue,\n        onError: () => {\n          // TODO: alert\n        },\n        onSuccess: () => {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n          history.replace(instanceConsumerGroupsHref(instance.id));\n        },\n      });\n    },\n    [\n      mutateAsync,\n      history,\n      instance?.id,\n      instanceConsumerGroupsHref,\n      instance.adminUrl,\n      consumerGroup.groupId,\n    ]\n  );\n\n  return (\n    <ConsumerGroupResetOffset\n      isModalOpen={true}\n      state={consumerGroup.state}\n      groupId={consumerGroup.groupId}\n      topics={getTopics()}\n      consumers={consumerGroup.consumers}\n      onClickClose={onCancel}\n      onClickResetOffset={onConfirmResetOffset}\n    />\n  );\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { ConsumerGroupDrawer } from \"ui\";\nimport type { DataPlaneConsumerGroupNavigationsProps } from \"../routesConsts\";\nimport { useConsumerGroupGate } from \"../useConsumerGroupGate\";\nimport { ConsumerGroupsRoute } from \"./ConsumerGroupsRoute\";\n\nexport const ConsumerGroupViewPartitionRoute: VoidFunctionComponent<\n  DataPlaneConsumerGroupNavigationsProps\n> = ({\n  instanceConsumerGroupsHref,\n  viewPartitionConsumerGroupHref,\n  instancesHref,\n  instanceDetailsHref,\n  instanceTopicsHref,\n}) => {\n  const { instance, consumerGroup } = useConsumerGroupGate();\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const history = useHistory();\n\n  const onCancel = useCallback(() => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    history.push(instanceConsumerGroupsHref(instance.id));\n  }, [history, instance.id, instanceConsumerGroupsHref]);\n\n  const onDelete = useCallback(() => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    history.push(\n      `${viewPartitionConsumerGroupHref(\n        instance.id,\n        consumerGroup.groupId\n      )}/delete`\n    );\n  }, [\n    history,\n    instance.id,\n    consumerGroup.groupId,\n    viewPartitionConsumerGroupHref,\n  ]);\n\n  const onClickResetOffset = useCallback(() => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    history.push(\n      `${viewPartitionConsumerGroupHref(\n        instance.id,\n        consumerGroup.groupId\n      )}/reset-offset`\n    );\n  }, [\n    history,\n    instance.id,\n    consumerGroup.groupId,\n    viewPartitionConsumerGroupHref,\n  ]);\n\n  return (\n    <ConsumerGroupDrawer\n      consumerGroupByTopic={false}\n      state={consumerGroup.state}\n      activeMembers={consumerGroup.activeConsumers!}\n      partitionsWithLag={consumerGroup.laggingPartitions!}\n      consumers={consumerGroup.consumers}\n      groupId={consumerGroup.groupId}\n      onSelectDeleteConsumerGroup={onDelete}\n      onSelectResetOffsetConsumerGroup={onClickResetOffset}\n      isExpanded={true}\n      onClickClose={onCancel}\n    >\n      <ConsumerGroupsRoute\n        instancesHref={instancesHref}\n        instanceTopicsHref={instanceTopicsHref}\n        instanceDetailsHref={instanceDetailsHref}\n        instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n      />\n    </ConsumerGroupDrawer>\n  );\n};\n","import { useConsumerGroup } from \"consoledot-api\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport type { DataPlaneTopicConsumerRouteParams } from \"./routesConsts\";\nimport {\n  DataPlaneTopicConsumerGroupRoutePath,\n  DedicatedDataPlaneTopicConsumerGroupRoutePath,\n} from \"./routesConsts\";\nimport { useTopicGate } from \"./useTopicGate\";\n\nexport function useTopicConsumerGroupGate() {\n  const { instance, topic } = useTopicGate();\n  const standardMatch = useRouteMatch<DataPlaneTopicConsumerRouteParams>(\n    DataPlaneTopicConsumerGroupRoutePath\n  );\n  const dedicatedMatch = useRouteMatch<DataPlaneTopicConsumerRouteParams>(\n    DedicatedDataPlaneTopicConsumerGroupRoutePath\n  );\n  const match = standardMatch || dedicatedMatch;\n  if (!match) {\n    throw Error(\"useTopicConsumerGroupGate used outside the expected route\");\n  }\n  const { data: consumerGroup } = useConsumerGroup(\n    {\n      id: instance.id,\n      adminUrl: instance.adminUrl,\n      consumerGroupId: match.params.consumerGroupId,\n    },\n    true\n  );\n\n  return {\n    instance,\n    consumerGroup: consumerGroup as NonNullable<typeof consumerGroup>,\n    match,\n    topic,\n  };\n}\n","import type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { DeleteConsumerGroup } from \"ui\";\nimport { useDeleteConsumerGroupMutation } from \"consoledot-api\";\nimport type { DataPlaneTopicConsumerGroupNavigationsProps } from \"../routesConsts\";\nimport { useTopicConsumerGroupGate } from \"../useTopicConsumerGroupGate\";\n\nexport const TopicConsumerGroupDeleteRoute: VoidFunctionComponent<\n  DataPlaneTopicConsumerGroupNavigationsProps\n> = ({ instanceTopicConsumerGroupsHref }) => {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const history = useHistory();\n\n  const { instance, consumerGroup, topic } = useTopicConsumerGroupGate();\n\n  const { mutateAsync } = useDeleteConsumerGroupMutation();\n\n  const onCancel = useCallback(() => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    history.push(instanceTopicConsumerGroupsHref(instance.id, topic.name));\n  }, [history, instance.id, topic.name, instanceTopicConsumerGroupsHref]);\n\n  const onDelete = useCallback(() => {\n    void mutateAsync({\n      instanceId: instance.id,\n      adminUrl: instance.adminUrl!,\n      consumerGroupId: consumerGroup.groupId,\n      onError: () => {\n        // TODO: alert\n      },\n      onSuccess: () => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n        history.replace(\n          instanceTopicConsumerGroupsHref(instance.id, topic.name)\n        );\n      },\n    });\n  }, [\n    mutateAsync,\n    history,\n    instance?.id,\n    instanceTopicConsumerGroupsHref,\n    topic.name,\n    consumerGroup.groupId,\n    instance?.adminUrl,\n  ]);\n\n  return (\n    <DeleteConsumerGroup\n      isModalOpen={true}\n      onClose={onCancel}\n      onDeleteConsumer={onDelete}\n      state={consumerGroup.state}\n      consumerName={consumerGroup.groupId}\n      appendTo={() =>\n        (document.getElementById(\"chrome-app-render-root\") as HTMLElement) ||\n        document.body\n      }\n    />\n  );\n};\n","import { useCallback } from \"react\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { ConsumerGroupResetOffset } from \"ui\";\nimport type { OffsetValue } from \"ui\";\nimport type { DataPlaneTopicConsumerGroupNavigationsProps } from \"../routesConsts\";\nimport { useHistory } from \"react-router-dom\";\nimport { useResetConsumerGroupMutation } from \"consoledot-api\";\nimport { useTopicConsumerGroupGate } from \"../useTopicConsumerGroupGate\";\n\nexport const TopicConsumerGroupResetOffsetRoute: VoidFunctionComponent<\n  DataPlaneTopicConsumerGroupNavigationsProps\n> = ({ instanceTopicConsumerGroupsHref }) => {\n  const { instance, topic, consumerGroup } = useTopicConsumerGroupGate();\n\n  const { mutateAsync } = useResetConsumerGroupMutation();\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const history = useHistory();\n\n  const onCancel = useCallback(() => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    history.push(instanceTopicConsumerGroupsHref(instance.id, topic.name));\n  }, [history, instance.id, topic.name, instanceTopicConsumerGroupsHref]);\n\n  const getTopics = () => {\n    const topics = (consumerGroup.consumers || []).map(\n      (consumer) => consumer.topic\n    );\n    const distinctTopics = Array.from(new Set(topics));\n    return distinctTopics;\n  };\n\n  const onConfirmResetOffset = useCallback(\n    (\n      topicName: string,\n      offset: OffsetValue,\n      partitions: number[],\n      customOffsetValue: string\n    ) => {\n      void mutateAsync({\n        instanceId: instance.id,\n        adminUrl: instance.adminUrl!,\n        consumerGroupId: consumerGroup.groupId,\n        topic: topicName,\n        offset: offset,\n        partitions: partitions,\n        value: customOffsetValue,\n        onError: () => {\n          // TODO: alert\n        },\n        onSuccess: () => {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n          history.replace(\n            instanceTopicConsumerGroupsHref(instance.id, topic.name)\n          );\n        },\n      });\n    },\n    [\n      mutateAsync,\n      history,\n      instance?.id,\n      topic.name,\n      instanceTopicConsumerGroupsHref,\n      instance.adminUrl,\n      consumerGroup.groupId,\n    ]\n  );\n\n  return (\n    <ConsumerGroupResetOffset\n      isModalOpen={true}\n      state={consumerGroup.state}\n      groupId={consumerGroup.groupId}\n      topics={getTopics()}\n      consumers={consumerGroup.consumers}\n      onClickClose={onCancel}\n      onClickResetOffset={onConfirmResetOffset}\n    />\n  );\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { ConsumerGroupDrawer } from \"ui\";\nimport type { DataPlaneTopicConsumerGroupNavigationsProps } from \"../routesConsts\";\nimport { useTopicConsumerGroupGate } from \"../useTopicConsumerGroupGate\";\nimport { TopicConsumerGroupsRoute } from \"./TopicConsumerGroupsRoute\";\n\nexport const TopicConsumerGroupViewPartitionRoute: VoidFunctionComponent<\n  DataPlaneTopicConsumerGroupNavigationsProps\n> = ({\n  instanceTopicConsumerGroupsHref,\n  instancesHref,\n  viewTopicPartitionConsumerGroupHref,\n  instanceDetailsHref,\n  instanceTopicsHref,\n  instanceConsumerGroupsHref,\n}) => {\n  const { instance, topic, consumerGroup } = useTopicConsumerGroupGate();\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const history = useHistory();\n\n  const onCancel = useCallback(() => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    history.push(instanceTopicConsumerGroupsHref(instance.id, topic.name));\n  }, [history, instance.id, topic.name, instanceTopicConsumerGroupsHref]);\n\n  const onDelete = useCallback(() => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    history.push(\n      `${viewTopicPartitionConsumerGroupHref(\n        instance.id,\n        topic.name,\n        consumerGroup.groupId\n      )}/delete`\n    );\n  }, [\n    history,\n    instance.id,\n    consumerGroup.groupId,\n    topic.name,\n    viewTopicPartitionConsumerGroupHref,\n  ]);\n\n  const onClickResetOffset = useCallback(() => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    history.push(\n      `${viewTopicPartitionConsumerGroupHref(\n        instance.id,\n        topic.name,\n        consumerGroup.groupId\n      )}/reset-offset`\n    );\n  }, [\n    history,\n    instance.id,\n    topic.name,\n    consumerGroup.groupId,\n    viewTopicPartitionConsumerGroupHref,\n  ]);\n\n  return (\n    <ConsumerGroupDrawer\n      consumerGroupByTopic={false}\n      state={consumerGroup.state}\n      activeMembers={consumerGroup.activeConsumers!}\n      partitionsWithLag={consumerGroup.laggingPartitions!}\n      consumers={consumerGroup.consumers}\n      groupId={consumerGroup.groupId}\n      onSelectDeleteConsumerGroup={onDelete}\n      onSelectResetOffsetConsumerGroup={onClickResetOffset}\n      isExpanded={true}\n      onClickClose={onCancel}\n    >\n      <TopicConsumerGroupsRoute\n        instancesHref={instancesHref}\n        instanceDetailsHref={instanceDetailsHref}\n        instanceTopicsHref={instanceTopicsHref}\n        instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n      />\n    </ConsumerGroupDrawer>\n  );\n};\n","import type { DeleteModalProps } from \"@rhoas/app-services-ui-components\";\nimport {\n  DeleteModal,\n  Trans,\n  useTranslation,\n} from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\n\nexport type DeleteKafkaTopicProps = {\n  topicName: string;\n} & Omit<\n  DeleteModalProps,\n  \"title\" | \"variant\" | \"confirmationValue\" | \"children\"\n>;\n\nexport const DeleteKafkaTopic: VoidFunctionComponent<DeleteKafkaTopicProps> = ({\n  topicName,\n  ...props\n}) => {\n  const { t } = useTranslation(\"kafka\");\n\n  return (\n    <DeleteModal\n      {...props}\n      variant={\"destructive\"}\n      title={t(\"delete_topic_title\")}\n      confirmationValue={topicName}\n    >\n      <Trans\n        ns={\"kafka\"}\n        i18nKey={\"delete_topic_message\"}\n        components={[<strong />]}\n        values={{\n          topicName,\n        }}\n      />\n    </DeleteModal>\n  );\n};\n","import { useDeleteTopicMutation } from \"consoledot-api\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { DeleteKafkaTopic } from \"ui/src/components/DeleteKafkaTopic\";\nimport type { DataPlaneTopicNavigationProps } from \"../routesConsts\";\nimport { useTopicGate } from \"../useTopicGate\";\n\nexport const TopicDeleteRoute: VoidFunctionComponent<\n  DataPlaneTopicNavigationProps\n> = ({ topicHref, instanceTopicsHref }) => {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const history = useHistory();\n\n  const { instance, topic } = useTopicGate();\n  const { mutateAsync, isLoading: isDeleting } = useDeleteTopicMutation();\n\n  const onCancel = useCallback(() => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    history.push(topicHref(instance.id, topic.name));\n  }, [history, instance.id, topic.name, topicHref]);\n\n  const onDelete = useCallback(() => {\n    if (!instance.adminUrl) {\n      throw Error(\"Invalid instance adminUrl\");\n    }\n    void mutateAsync({\n      instanceId: instance.id,\n      adminUrl: instance.adminUrl,\n      name: topic.name,\n      onError: () => {\n        // TODO: alert\n      },\n      onSuccess: () => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n        history.replace(instanceTopicsHref(instance.id));\n      },\n    });\n  }, [\n    instance.adminUrl,\n    instance.id,\n    mutateAsync,\n    topic.name,\n    history,\n    instanceTopicsHref,\n  ]);\n\n  return (\n    <DeleteKafkaTopic\n      topicName={topic.name}\n      isModalOpen={true}\n      isDeleting={isDeleting}\n      appendTo={() =>\n        (document.getElementById(\"chrome-app-render-root\") as HTMLElement) ||\n        document.body\n      }\n      onDelete={onDelete}\n      onCancel={onCancel}\n    />\n  );\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { EditTopicProperties } from \"ui\";\nimport type { DataPlaneNavigationProps } from \"../routesConsts\";\nimport { useTopicGate } from \"../useTopicGate\";\nimport { DataPlaneTopicHeaderConnected } from \"./DataPlaneTopicHeaderConnected\";\n\nexport const TopicEditPropertiesRoute: VoidFunctionComponent<\n  DataPlaneNavigationProps\n> = ({\n  instanceDetailsHref,\n  instanceTopicsHref,\n  instancesHref,\n  instanceConsumerGroupsHref,\n}) => {\n  const { topic } = useTopicGate();\n\n  return (\n    <>\n      <DataPlaneTopicHeaderConnected\n        instancesHref={instancesHref}\n        instanceDetailsHref={instanceDetailsHref}\n        instanceTopicsHref={instanceTopicsHref}\n        instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n        activeSection={\"properties\"}\n      />\n      <EditTopicProperties\n        topic={topic}\n        onCancel={() => {\n          /* TODO */\n        }}\n      />\n    </>\n  );\n};\n","import { InvalidObject } from \"@redhat-cloud-services/frontend-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport { ControlPlaneRouteRoot } from \"../control-plane/routesConsts\";\nimport { RedirectOnGateError } from \"../RedirectOnGateError\";\nimport {\n  AclsRoute,\n  ConsumerGroupDeleteRoute,\n  ConsumerGroupResetOffsetRoute,\n  ConsumerGroupsRoute,\n  ConsumerGroupViewPartitionRoute,\n  DashboardRoute,\n  SettingsRoute,\n  TopicConsumerGroupDeleteRoute,\n  TopicConsumerGroupResetOffsetRoute,\n  TopicConsumerGroupsRoute,\n  TopicConsumerGroupViewPartitionRoute,\n  TopicDeleteRoute,\n  TopicEditPropertiesRoute,\n  TopicMessagesGroupsRoute,\n  TopicPropertiesRoute,\n  TopicSchemasRoute,\n  TopicsRoute,\n} from \"./routes\";\n\nimport { DataPlaneRoutePath, DataPlaneTopicRoutePath } from \"./routesConsts\";\n\nconst instanceDetailsHref = (id: string) =>\n  `${ControlPlaneRouteRoot}/${id}/details`;\n\nconst instanceTopicsHref = (id: string) =>\n  `${ControlPlaneRouteRoot}/${id}/details/topics`;\n\nconst topicHref = (id: string, topic: string) =>\n  `${instanceDetailsHref(id)}/topics/${topic}/properties`;\n\nconst updateTopicHref = (id: string, topic: string) =>\n  `${topicHref(id, topic)}/edit`;\n\nconst deleteTopicHref = (id: string, topic: string) =>\n  `${topicHref(id, topic)}/delete`;\n\nconst instanceConsumerGroupsHref = (id: string) =>\n  `${instanceDetailsHref(id)}/consumer-groups`;\n\nconst viewPartitionConsumerGroupHref = (id: string, consumerGroupId: string) =>\n  `${instanceDetailsHref(\n    id\n  )}/consumer-groups/${consumerGroupId}/view-partition`;\n\nconst instanceTopicConsumerGroupHref = (id: string, topic: string) =>\n  `${instanceDetailsHref(id)}/topics/${topic}/consumer-groups`;\n\nconst viewTopicPartitionConsumerGroupHref = (\n  id: string,\n  topic: string,\n  consumerGroupId: string\n) =>\n  `${instanceDetailsHref(\n    id\n  )}/topics/${topic}/consumer-groups/${consumerGroupId}/view-partition`;\n\nexport const DataPlaneRoutes: VoidFunctionComponent = () => {\n  return (\n    <Route path={DataPlaneRoutePath}>\n      <RedirectOnGateError redirectUrl={ControlPlaneRouteRoot}>\n        <Switch>\n          <Route path={`${DataPlaneRoutePath}/dashboard`} exact>\n            <DashboardRoute instancesHref={ControlPlaneRouteRoot} />\n          </Route>\n\n          <Route path={`${DataPlaneRoutePath}/topics`} exact>\n            <TopicsRoute instancesHref={ControlPlaneRouteRoot} />\n          </Route>\n\n          <Route path={`${DataPlaneRoutePath}/consumer-groups`} exact>\n            <ConsumerGroupsRoute\n              instancesHref={ControlPlaneRouteRoot}\n              instanceDetailsHref={instanceDetailsHref}\n              instanceTopicsHref={instanceTopicsHref}\n              instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n            />\n          </Route>\n          <Route path={`${DataPlaneRoutePath}/acls`} exact>\n            <AclsRoute instancesHref={ControlPlaneRouteRoot} />\n          </Route>\n\n          <Route path={`${DataPlaneRoutePath}/settings`} exact>\n            <SettingsRoute instancesHref={ControlPlaneRouteRoot} />\n          </Route>\n          <Route\n            path={`${DataPlaneRoutePath}/topics`}\n            render={({ match }) => (\n              <RedirectOnGateError\n                redirectUrl={instanceTopicsHref(match.params.id)}\n              >\n                <Switch>\n                  <Route\n                    path={`${DataPlaneRoutePath}/topics/:topicName/consumer-groups`}\n                  >\n                    <RedirectOnGateError\n                      redirectUrl={instanceTopicsHref(match.params.id)}\n                    >\n                      <Switch>\n                        <Route\n                          path={`${DataPlaneTopicRoutePath}/consumer-groups/:consumerGroupId/view-partition`}\n                        >\n                          <Route\n                            path={`${DataPlaneTopicRoutePath}/consumer-groups/:consumerGroupId/view-partition/delete`}\n                          >\n                            <TopicConsumerGroupDeleteRoute\n                              instancesHref={ControlPlaneRouteRoot}\n                              instanceTopicConsumerGroupsHref={\n                                instanceTopicConsumerGroupHref\n                              }\n                              viewTopicPartitionConsumerGroupHref={\n                                viewTopicPartitionConsumerGroupHref\n                              }\n                              instanceDetailsHref={instanceDetailsHref}\n                              instanceTopicsHref={instanceTopicsHref}\n                              instanceConsumerGroupsHref={\n                                instanceConsumerGroupsHref\n                              }\n                            />\n                          </Route>\n                          <Route\n                            path={`${DataPlaneTopicRoutePath}/consumer-groups/:consumerGroupId/view-partition/reset-offset`}\n                          >\n                            <TopicConsumerGroupResetOffsetRoute\n                              instancesHref={ControlPlaneRouteRoot}\n                              instanceTopicConsumerGroupsHref={\n                                instanceTopicConsumerGroupHref\n                              }\n                              viewTopicPartitionConsumerGroupHref={\n                                viewTopicPartitionConsumerGroupHref\n                              }\n                              instanceDetailsHref={instanceDetailsHref}\n                              instanceTopicsHref={instanceTopicsHref}\n                              instanceConsumerGroupsHref={\n                                instanceConsumerGroupsHref\n                              }\n                            />\n                          </Route>\n                          <TopicConsumerGroupViewPartitionRoute\n                            instancesHref={ControlPlaneRouteRoot}\n                            instanceTopicConsumerGroupsHref={\n                              instanceTopicConsumerGroupHref\n                            }\n                            viewTopicPartitionConsumerGroupHref={\n                              viewTopicPartitionConsumerGroupHref\n                            }\n                            instanceDetailsHref={instanceDetailsHref}\n                            instanceTopicsHref={instanceTopicsHref}\n                            instanceConsumerGroupsHref={\n                              instanceConsumerGroupsHref\n                            }\n                          />\n                        </Route>\n                        <Route\n                          path={`${DataPlaneTopicRoutePath}/consumer-groups/:consumerGroupId/reset-offset`}\n                        >\n                          <TopicConsumerGroupResetOffsetRoute\n                            instancesHref={ControlPlaneRouteRoot}\n                            instanceTopicConsumerGroupsHref={\n                              instanceTopicConsumerGroupHref\n                            }\n                            viewTopicPartitionConsumerGroupHref={\n                              viewTopicPartitionConsumerGroupHref\n                            }\n                            instanceDetailsHref={instanceDetailsHref}\n                            instanceTopicsHref={instanceTopicsHref}\n                            instanceConsumerGroupsHref={\n                              instanceConsumerGroupsHref\n                            }\n                          />\n                        </Route>\n                        <Route\n                          path={`${DataPlaneTopicRoutePath}/consumer-groups/:consumerGroupId/delete`}\n                        >\n                          <TopicConsumerGroupDeleteRoute\n                            instancesHref={ControlPlaneRouteRoot}\n                            instanceTopicConsumerGroupsHref={\n                              instanceTopicConsumerGroupHref\n                            }\n                            viewTopicPartitionConsumerGroupHref={\n                              viewTopicPartitionConsumerGroupHref\n                            }\n                            instanceDetailsHref={instanceDetailsHref}\n                            instanceTopicsHref={instanceTopicsHref}\n                            instanceConsumerGroupsHref={\n                              instanceConsumerGroupsHref\n                            }\n                          />\n                        </Route>\n                      </Switch>\n                    </RedirectOnGateError>\n                    <TopicConsumerGroupsRoute\n                      instancesHref={ControlPlaneRouteRoot}\n                      instanceDetailsHref={instanceDetailsHref}\n                      instanceTopicsHref={instanceTopicsHref}\n                      instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n                    />\n                  </Route>\n                  <Route\n                    path={`${DataPlaneRoutePath}/topics/:topicName/messages`}\n                    exact\n                  >\n                    <TopicMessagesGroupsRoute\n                      instancesHref={ControlPlaneRouteRoot}\n                      instanceDetailsHref={instanceDetailsHref}\n                      instanceTopicsHref={instanceTopicsHref}\n                      instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n                    />\n                  </Route>\n\n                  <Route\n                    path={`${DataPlaneRoutePath}/topics/:topicName/properties/edit`}\n                    exact\n                  >\n                    <TopicEditPropertiesRoute\n                      instancesHref={ControlPlaneRouteRoot}\n                      instanceDetailsHref={instanceDetailsHref}\n                      instanceTopicsHref={instanceTopicsHref}\n                      instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n                    />\n                  </Route>\n                  <Route\n                    path={`${DataPlaneRoutePath}/topics/:topicName/properties`}\n                  >\n                    <Route\n                      path={`${DataPlaneRoutePath}/topics/:topicName/properties/delete`}\n                    >\n                      <TopicDeleteRoute\n                        instancesHref={ControlPlaneRouteRoot}\n                        instanceDetailsHref={instanceDetailsHref}\n                        instanceTopicsHref={instanceTopicsHref}\n                        instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n                        topicHref={topicHref}\n                        updateTopicHref={updateTopicHref}\n                        deleteTopicHref={deleteTopicHref}\n                      />\n                    </Route>\n                    <TopicPropertiesRoute\n                      instancesHref={ControlPlaneRouteRoot}\n                      instanceDetailsHref={instanceDetailsHref}\n                      instanceTopicsHref={instanceTopicsHref}\n                      instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n                      topicHref={topicHref}\n                      updateTopicHref={updateTopicHref}\n                      deleteTopicHref={deleteTopicHref}\n                    />\n                  </Route>\n                  <Route\n                    path={`${DataPlaneRoutePath}/topics/:topicName/schemas`}\n                    exact\n                  >\n                    <TopicSchemasRoute\n                      instancesHref={ControlPlaneRouteRoot}\n                      instanceDetailsHref={instanceDetailsHref}\n                      instanceTopicsHref={instanceTopicsHref}\n                      instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n                    />\n                  </Route>\n                  <Redirect\n                    from={`${DataPlaneRoutePath}/topics/:topicName/`}\n                    to={`${DataPlaneRoutePath}/topics/:topicName/consumer-groups`}\n                    exact\n                  />\n                </Switch>\n              </RedirectOnGateError>\n            )}\n          />\n          <Route\n            path={`${DataPlaneRoutePath}/consumer-groups`}\n            render={({ match }) => (\n              <RedirectOnGateError\n                redirectUrl={instanceConsumerGroupsHref(match.params.id)}\n              >\n                <Switch>\n                  <Route\n                    path={`${DataPlaneRoutePath}/consumer-groups/:consumerGroupId/view-partition`}\n                  >\n                    <Route\n                      path={`${DataPlaneRoutePath}/consumer-groups/:consumerGroupId/view-partition/delete`}\n                    >\n                      <ConsumerGroupDeleteRoute\n                        instancesHref={ControlPlaneRouteRoot}\n                        instanceTopicsHref={instanceTopicsHref}\n                        instanceDetailsHref={instanceDetailsHref}\n                        instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n                        viewPartitionConsumerGroupHref={\n                          viewPartitionConsumerGroupHref\n                        }\n                      />\n                    </Route>\n                    <Route\n                      path={`${DataPlaneRoutePath}/consumer-groups/:consumerGroupId/view-partition/reset-offset`}\n                    >\n                      <ConsumerGroupResetOffsetRoute\n                        instancesHref={ControlPlaneRouteRoot}\n                        instanceTopicsHref={instanceTopicsHref}\n                        instanceDetailsHref={instanceDetailsHref}\n                        instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n                        viewPartitionConsumerGroupHref={\n                          viewPartitionConsumerGroupHref\n                        }\n                      />\n                    </Route>\n                    <ConsumerGroupViewPartitionRoute\n                      instancesHref={ControlPlaneRouteRoot}\n                      instanceTopicsHref={instanceTopicsHref}\n                      instanceDetailsHref={instanceDetailsHref}\n                      instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n                      viewPartitionConsumerGroupHref={\n                        viewPartitionConsumerGroupHref\n                      }\n                    />\n                  </Route>\n                  <Route\n                    path={`${DataPlaneRoutePath}/consumer-groups/:consumerGroupId/reset-offset`}\n                  >\n                    <ConsumerGroupResetOffsetRoute\n                      instancesHref={ControlPlaneRouteRoot}\n                      instanceTopicsHref={instanceTopicsHref}\n                      instanceDetailsHref={instanceDetailsHref}\n                      instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n                      viewPartitionConsumerGroupHref={\n                        viewPartitionConsumerGroupHref\n                      }\n                    />\n                  </Route>\n                  <Route\n                    path={`${DataPlaneRoutePath}/consumer-groups/:consumerGroupId/delete`}\n                  >\n                    <ConsumerGroupDeleteRoute\n                      instancesHref={ControlPlaneRouteRoot}\n                      instanceTopicsHref={instanceTopicsHref}\n                      instanceDetailsHref={instanceDetailsHref}\n                      instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n                      viewPartitionConsumerGroupHref={\n                        viewPartitionConsumerGroupHref\n                      }\n                    />\n                  </Route>\n                </Switch>\n              </RedirectOnGateError>\n            )}\n          />\n          <Redirect\n            from={`${DataPlaneRoutePath}`}\n            to={`${DataPlaneRoutePath}/dashboard`}\n            exact\n          />\n\n          <Route>\n            <InvalidObject />\n          </Route>\n        </Switch>\n      </RedirectOnGateError>\n    </Route>\n  );\n};\n","import { InvalidObject } from \"@redhat-cloud-services/frontend-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport { DedicatedControlPlaneRouteRoot } from \"../control-plane/routesConsts\";\nimport { RedirectOnGateError } from \"../RedirectOnGateError\";\nimport {\n  AclsRoute,\n  ConsumerGroupDeleteRoute,\n  ConsumerGroupResetOffsetRoute,\n  ConsumerGroupsRoute,\n  ConsumerGroupViewPartitionRoute,\n  DashboardRoute,\n  SettingsRoute,\n  TopicConsumerGroupDeleteRoute,\n  TopicConsumerGroupResetOffsetRoute,\n  TopicConsumerGroupsRoute,\n  TopicConsumerGroupViewPartitionRoute,\n  TopicDeleteRoute,\n  TopicEditPropertiesRoute,\n  TopicMessagesGroupsRoute,\n  TopicPropertiesRoute,\n  TopicSchemasRoute,\n  TopicsRoute,\n} from \"./routes\";\n\nimport {\n  DedicatedDataPlaneRoutePath,\n  DedicatedDataPlaneTopicRoutePath,\n} from \"./routesConsts\";\n\nconst instanceDetailsHref = (id: string) =>\n  `${DedicatedControlPlaneRouteRoot}/${id}/details`;\n\nconst instanceTopicsHref = (id: string) =>\n  `${DedicatedControlPlaneRouteRoot}/${id}/details/topics`;\n\nconst topicHref = (id: string, topic: string) =>\n  `${instanceDetailsHref(id)}/topics/${topic}/properties`;\n\nconst updateTopicHref = (id: string, topic: string) =>\n  `${topicHref(id, topic)}/edit`;\n\nconst deleteTopicHref = (id: string, topic: string) =>\n  `${topicHref(id, topic)}/delete`;\n\nconst instanceConsumerGroupsHref = (id: string) =>\n  `${instanceDetailsHref(id)}/consumer-groups`;\n\nconst viewPartitionConsumerGroupHref = (id: string, consumerGroupId: string) =>\n  `${instanceDetailsHref(\n    id\n  )}/consumer-groups/${consumerGroupId}/view-partition`;\n\nconst instanceTopicConsumerGroupHref = (id: string, topic: string) =>\n  `${instanceDetailsHref(id)}/topics/${topic}/consumer-groups`;\n\nconst viewTopicPartitionConsumerGroupHref = (\n  id: string,\n  topic: string,\n  consumerGroupId: string\n) =>\n  `${instanceDetailsHref(\n    id\n  )}/topics/${topic}/consumer-groups/${consumerGroupId}/view-partition`;\n\nexport const DedicatedDataPlaneRoutes: VoidFunctionComponent = () => {\n  return (\n    <Route path={DedicatedDataPlaneRoutePath}>\n      <RedirectOnGateError redirectUrl={DedicatedControlPlaneRouteRoot}>\n        <Switch>\n          <Route path={`${DedicatedDataPlaneRoutePath}/dashboard`} exact>\n            <DashboardRoute instancesHref={DedicatedControlPlaneRouteRoot} />\n          </Route>\n\n          <Route path={`${DedicatedDataPlaneRoutePath}/topics`} exact>\n            <TopicsRoute instancesHref={DedicatedControlPlaneRouteRoot} />\n          </Route>\n\n          <Route path={`${DedicatedDataPlaneRoutePath}/consumer-groups`} exact>\n            <ConsumerGroupsRoute\n              instancesHref={DedicatedControlPlaneRouteRoot}\n              instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n              instanceDetailsHref={instanceDetailsHref}\n              instanceTopicsHref={instanceTopicsHref}\n            />\n          </Route>\n          <Route path={`${DedicatedDataPlaneRoutePath}/acls`} exact>\n            <AclsRoute instancesHref={DedicatedControlPlaneRouteRoot} />\n          </Route>\n\n          <Route path={`${DedicatedDataPlaneRoutePath}/settings`} exact>\n            <SettingsRoute instancesHref={DedicatedControlPlaneRouteRoot} />\n          </Route>\n          <Route\n            path={`${DedicatedDataPlaneRoutePath}/topics`}\n            render={({ match }) => (\n              <RedirectOnGateError\n                redirectUrl={instanceTopicsHref(match.params.id)}\n              >\n                <Switch>\n                  <Route\n                    path={`${DedicatedDataPlaneRoutePath}/topics/:topicName/consumer-groups`}\n                  >\n                    <RedirectOnGateError\n                      redirectUrl={instanceTopicsHref(match.params.id)}\n                    >\n                      <Switch>\n                        <Route\n                          path={`${DedicatedDataPlaneTopicRoutePath}/consumer-groups/:consumerGroupId/view-partition`}\n                        >\n                          <Route\n                            path={`${DedicatedDataPlaneTopicRoutePath}/consumer-groups/:consumerGroupId/view-partition/delete`}\n                          >\n                            <TopicConsumerGroupDeleteRoute\n                              instancesHref={DedicatedControlPlaneRouteRoot}\n                              instanceTopicConsumerGroupsHref={\n                                instanceTopicConsumerGroupHref\n                              }\n                              viewTopicPartitionConsumerGroupHref={\n                                viewTopicPartitionConsumerGroupHref\n                              }\n                              instanceDetailsHref={instanceDetailsHref}\n                              instanceTopicsHref={instanceTopicsHref}\n                              instanceConsumerGroupsHref={\n                                instanceConsumerGroupsHref\n                              }\n                            />\n                          </Route>\n                          <Route\n                            path={`${DedicatedDataPlaneTopicRoutePath}/consumer-groups/:consumerGroupId/view-partition/reset-offset`}\n                          >\n                            <TopicConsumerGroupResetOffsetRoute\n                              instancesHref={DedicatedControlPlaneRouteRoot}\n                              instanceTopicConsumerGroupsHref={\n                                instanceTopicConsumerGroupHref\n                              }\n                              viewTopicPartitionConsumerGroupHref={\n                                viewTopicPartitionConsumerGroupHref\n                              }\n                              instanceDetailsHref={instanceDetailsHref}\n                              instanceTopicsHref={instanceTopicsHref}\n                              instanceConsumerGroupsHref={\n                                instanceConsumerGroupsHref\n                              }\n                            />\n                          </Route>\n                          <TopicConsumerGroupViewPartitionRoute\n                            instancesHref={DedicatedControlPlaneRouteRoot}\n                            instanceTopicConsumerGroupsHref={\n                              instanceTopicConsumerGroupHref\n                            }\n                            viewTopicPartitionConsumerGroupHref={\n                              viewTopicPartitionConsumerGroupHref\n                            }\n                            instanceDetailsHref={instanceDetailsHref}\n                            instanceTopicsHref={instanceTopicsHref}\n                            instanceConsumerGroupsHref={\n                              instanceConsumerGroupsHref\n                            }\n                          />\n                        </Route>\n                        <Route\n                          path={`${DedicatedDataPlaneTopicRoutePath}/consumer-groups/:consumerGroupId/reset-offset`}\n                        >\n                          <TopicConsumerGroupResetOffsetRoute\n                            instancesHref={DedicatedControlPlaneRouteRoot}\n                            instanceTopicConsumerGroupsHref={\n                              instanceTopicConsumerGroupHref\n                            }\n                            viewTopicPartitionConsumerGroupHref={\n                              viewTopicPartitionConsumerGroupHref\n                            }\n                            instanceDetailsHref={instanceDetailsHref}\n                            instanceTopicsHref={instanceTopicsHref}\n                            instanceConsumerGroupsHref={\n                              instanceConsumerGroupsHref\n                            }\n                          />\n                        </Route>\n                        <Route\n                          path={`${DedicatedDataPlaneTopicRoutePath}/consumer-groups/:consumerGroupId/delete`}\n                        >\n                          <TopicConsumerGroupDeleteRoute\n                            instancesHref={DedicatedControlPlaneRouteRoot}\n                            instanceTopicConsumerGroupsHref={\n                              instanceTopicConsumerGroupHref\n                            }\n                            viewTopicPartitionConsumerGroupHref={\n                              viewTopicPartitionConsumerGroupHref\n                            }\n                            instanceDetailsHref={instanceDetailsHref}\n                            instanceTopicsHref={instanceTopicsHref}\n                            instanceConsumerGroupsHref={\n                              instanceConsumerGroupsHref\n                            }\n                          />\n                        </Route>\n                      </Switch>\n                    </RedirectOnGateError>\n                    <TopicConsumerGroupsRoute\n                      instancesHref={DedicatedControlPlaneRouteRoot}\n                      instanceDetailsHref={instanceDetailsHref}\n                      instanceTopicsHref={instanceTopicsHref}\n                      instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n                    />\n                  </Route>\n                  <Route\n                    path={`${DedicatedDataPlaneRoutePath}/topics/:topicName/messages`}\n                    exact\n                  >\n                    <TopicMessagesGroupsRoute\n                      instancesHref={DedicatedControlPlaneRouteRoot}\n                      instanceDetailsHref={instanceDetailsHref}\n                      instanceTopicsHref={instanceTopicsHref}\n                      instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n                    />\n                  </Route>\n\n                  <Route\n                    path={`${DedicatedDataPlaneRoutePath}/topics/:topicName/properties/edit`}\n                    exact\n                  >\n                    <TopicEditPropertiesRoute\n                      instancesHref={DedicatedControlPlaneRouteRoot}\n                      instanceDetailsHref={instanceDetailsHref}\n                      instanceTopicsHref={instanceTopicsHref}\n                      instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n                    />\n                  </Route>\n                  <Route\n                    path={`${DedicatedDataPlaneRoutePath}/topics/:topicName/properties`}\n                  >\n                    <Route\n                      path={`${DedicatedDataPlaneRoutePath}/topics/:topicName/properties/delete`}\n                    >\n                      <TopicDeleteRoute\n                        instancesHref={DedicatedControlPlaneRouteRoot}\n                        instanceDetailsHref={instanceDetailsHref}\n                        instanceTopicsHref={instanceTopicsHref}\n                        instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n                        topicHref={topicHref}\n                        updateTopicHref={updateTopicHref}\n                        deleteTopicHref={deleteTopicHref}\n                      />\n                    </Route>\n                    <TopicPropertiesRoute\n                      instancesHref={DedicatedControlPlaneRouteRoot}\n                      instanceDetailsHref={instanceDetailsHref}\n                      instanceTopicsHref={instanceTopicsHref}\n                      instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n                      topicHref={topicHref}\n                      updateTopicHref={updateTopicHref}\n                      deleteTopicHref={deleteTopicHref}\n                    />\n                  </Route>\n                  <Route\n                    path={`${DedicatedDataPlaneRoutePath}/topics/:topicName/schemas`}\n                    exact\n                  >\n                    <TopicSchemasRoute\n                      instancesHref={DedicatedControlPlaneRouteRoot}\n                      instanceDetailsHref={instanceDetailsHref}\n                      instanceTopicsHref={instanceTopicsHref}\n                      instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n                    />\n                  </Route>\n                  <Redirect\n                    from={`${DedicatedDataPlaneRoutePath}/topics/:topicName/`}\n                    to={`${DedicatedDataPlaneRoutePath}/topics/:topicName/consumer-groups`}\n                    exact\n                  />\n                </Switch>\n              </RedirectOnGateError>\n            )}\n          />\n          <Route\n            path={`${DedicatedDataPlaneRoutePath}/consumer-groups`}\n            render={({ match }) => (\n              <RedirectOnGateError\n                redirectUrl={instanceConsumerGroupsHref(match.params.id)}\n              >\n                <Switch>\n                  <Route\n                    path={`${DedicatedDataPlaneRoutePath}/consumer-groups/:consumerGroupId/view-partition`}\n                  >\n                    <Route\n                      path={`${DedicatedDataPlaneRoutePath}/consumer-groups/:consumerGroupId/view-partition/delete`}\n                    >\n                      <ConsumerGroupDeleteRoute\n                        instancesHref={DedicatedControlPlaneRouteRoot}\n                        instanceTopicsHref={instanceTopicsHref}\n                        instanceDetailsHref={instanceDetailsHref}\n                        instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n                        viewPartitionConsumerGroupHref={\n                          viewPartitionConsumerGroupHref\n                        }\n                      />\n                    </Route>\n                    <Route\n                      path={`${DedicatedDataPlaneRoutePath}/consumer-groups/:consumerGroupId/view-partition/reset-offset`}\n                    >\n                      <ConsumerGroupResetOffsetRoute\n                        instancesHref={DedicatedControlPlaneRouteRoot}\n                        instanceTopicsHref={instanceTopicsHref}\n                        instanceDetailsHref={instanceDetailsHref}\n                        instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n                        viewPartitionConsumerGroupHref={\n                          viewPartitionConsumerGroupHref\n                        }\n                      />\n                    </Route>\n                    <ConsumerGroupViewPartitionRoute\n                      instancesHref={DedicatedControlPlaneRouteRoot}\n                      instanceTopicsHref={instanceTopicsHref}\n                      instanceDetailsHref={instanceDetailsHref}\n                      instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n                      viewPartitionConsumerGroupHref={\n                        viewPartitionConsumerGroupHref\n                      }\n                    />\n                  </Route>\n                  <Route\n                    path={`${DedicatedDataPlaneRoutePath}/consumer-groups/:consumerGroupId/reset-offset`}\n                  >\n                    <ConsumerGroupResetOffsetRoute\n                      instancesHref={DedicatedControlPlaneRouteRoot}\n                      instanceTopicsHref={instanceTopicsHref}\n                      instanceDetailsHref={instanceDetailsHref}\n                      instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n                      viewPartitionConsumerGroupHref={\n                        viewPartitionConsumerGroupHref\n                      }\n                    />\n                  </Route>\n                  <Route\n                    path={`${DedicatedDataPlaneRoutePath}/consumer-groups/:consumerGroupId/delete`}\n                  >\n                    <ConsumerGroupDeleteRoute\n                      instancesHref={DedicatedControlPlaneRouteRoot}\n                      instanceTopicsHref={instanceTopicsHref}\n                      instanceDetailsHref={instanceDetailsHref}\n                      instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n                      viewPartitionConsumerGroupHref={\n                        viewPartitionConsumerGroupHref\n                      }\n                    />\n                  </Route>\n                </Switch>\n              </RedirectOnGateError>\n            )}\n          />\n          <Redirect\n            from={`${DedicatedDataPlaneRoutePath}`}\n            to={`${DedicatedDataPlaneRoutePath}/dashboard`}\n            exact\n          />\n\n          <Route>\n            <InvalidObject />\n          </Route>\n        </Switch>\n      </RedirectOnGateError>\n    </Route>\n  );\n};\n","import { useDedicatedClusters } from \"consoledot-api\";\nimport { useStandardQuota } from \"consoledot-api/src/queries/useStandardQuota\";\n\nexport function useDedicatedGate() {\n  const quota = useStandardQuota();\n  const dedicated = useDedicatedClusters({ refetch: false });\n\n  if (\n    dedicated.isSuccess &&\n    quota.data &&\n    quota.data.hasStandardQuota === false\n  ) {\n    return \"dedicated-only\" as const;\n  }\n\n  if (dedicated.isError) {\n    return \"standard-only\" as const;\n  }\n\n  if (!quota.isFetched && !dedicated.isFetched) {\n    return \"loading\" as const;\n  }\n\n  return \"standard-and-dedicated\" as const;\n}\n","import { useQuery } from \"@tanstack/react-query\";\nimport { useApiConfiguration } from \"../ApiProvider\";\nimport { fetchOrganization, fetchStandardQuota } from \"../fetchers\";\nimport { masQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useStandardQuota() {\n  const { refetchInterval } = useApiConfiguration();\n  const { account } = useApi();\n  const ams = account();\n\n  return useQuery({\n    queryKey: masQueries.quota.available(),\n    queryFn: async () => {\n      const organization = await fetchOrganization((...args) =>\n        ams.apiAccountsMgmtV1CurrentAccountGet(...args)\n      );\n      if (!organization) {\n        return Promise.reject(\"Missing organization id\");\n      }\n      return fetchStandardQuota(\n        (...args) =>\n          ams.apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(...args),\n        organization\n      );\n    },\n    refetchInterval,\n  });\n}\n","import { Loading } from \"@rhoas/app-services-ui-components\";\nimport type { FunctionComponent } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { ControlPlaneRouteRoot } from \"./control-plane/routesConsts\";\nimport { useDedicatedGate } from \"./useDedicatedGate\";\n\nexport const DedicatedUsersGate: FunctionComponent = ({ children }) => {\n  const gate = useDedicatedGate();\n\n  if (gate === \"loading\") {\n    return <Loading />;\n  }\n  if (gate === \"standard-only\") {\n    return <Redirect to={ControlPlaneRouteRoot} />;\n  }\n\n  return <>{children}</>;\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { KafkaPageV3 } from \"ui\";\n\nexport const OverviewRoute: VoidFunctionComponent = () => {\n  return <KafkaPageV3 />;\n};\n","import { Loading } from \"@rhoas/app-services-ui-components\";\nimport type { FunctionComponent } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { DedicatedControlPlaneRouteRoot } from \"./control-plane/routesConsts\";\nimport { useDedicatedGate } from \"./useDedicatedGate\";\n\nlet redirected = false;\n\nexport const StandardUsersGate: FunctionComponent = ({ children }) => {\n  const gate = useDedicatedGate();\n\n  if (gate === \"loading\") {\n    return <Loading />;\n  }\n\n  if (gate === \"dedicated-only\" && redirected === false) {\n    redirected = true;\n    return <Redirect to={DedicatedControlPlaneRouteRoot} />;\n  }\n\n  return <>{children}</>;\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport {\n  ControlPlaneRoutes,\n  DedicatedControlPlaneRoutes,\n  DrawerProvider,\n} from \"./control-plane\";\nimport { DataPlaneRoutes, DedicatedDataPlaneRoutes } from \"./data-plane\";\nimport { DedicatedUsersGate } from \"./DedicatedUsersGate\";\nimport { OverviewRoute } from \"./overview\";\nimport { StandardUsersGate } from \"./StandardUsersGate\";\n\nexport const Routes: VoidFunctionComponent = () => {\n  return (\n    <Switch>\n      <Route path={\"/overview\"} exact>\n        <OverviewRoute />\n      </Route>\n      <Redirect from={\"/\"} to={\"/kafkas\"} exact />\n      <Route path={\"/kafkas\"}>\n        <StandardUsersGate>\n          <DrawerProvider>\n            {/* don't move these routes around! the order is important */}\n            <ControlPlaneRoutes />\n            <DataPlaneRoutes />\n          </DrawerProvider>\n        </StandardUsersGate>\n      </Route>\n      <Route path={\"/dedicated\"}>\n        <DedicatedUsersGate>\n          <DrawerProvider>\n            {/* don't move these routes around! the order is important */}\n            <DedicatedControlPlaneRoutes />\n            <DedicatedDataPlaneRoutes />\n          </DrawerProvider>\n        </DedicatedUsersGate>\n      </Route>\n      <Route path={\"\"} exact></Route>\n    </Switch>\n  );\n};\n","import NotificationsPortal from \"@redhat-cloud-services/frontend-components-notifications/NotificationPortal\";\nimport { notificationsReducer } from \"@redhat-cloud-services/frontend-components-notifications/redux\";\nimport { getRegistry } from \"@redhat-cloud-services/frontend-components-utilities/Registry\";\nimport { useChrome } from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { memo, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport type { Reducer } from \"redux\";\n\nimport \"./App.scss\";\n\nimport { Routes } from \"./routes\";\n\nconst App = memo(() => {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const history = useHistory();\n  const { updateDocumentTitle, on } = useChrome();\n\n  const { t } = useTranslation();\n  const title = t(\"kafka:rhosakTitle\");\n\n  useEffect(() => {\n    const registry = getRegistry();\n    registry.register({ notifications: notificationsReducer as Reducer });\n\n    updateDocumentTitle(title);\n\n    const unregister = on(\"APP_NAVIGATION\", (event) => {\n      console.dir(event);\n      if (event.navId) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n        history.push(\"/\" + event.navId === \"/\" ? \"\" : event.navId);\n      }\n    });\n    return () => {\n      if (unregister) {\n        unregister();\n      }\n    };\n  }, [history, on, title, updateDocumentTitle]);\n\n  return (\n    <>\n      <NotificationsPortal />\n      <Routes />\n    </>\n  );\n});\n\nexport default App;\n","/* eslint-disable */\n// @ts-nocheck\nimport { useChrome } from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport { AssetsContext } from \"@rhoas/app-services-ui-shared\";\nimport type { ScalprumComponentProps } from \"@scalprum/react-core\";\nimport { ScalprumComponent } from \"@scalprum/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useState } from \"react\";\nimport { ErrorBoundary } from \"react-error-boundary\";\n\nexport const appIdentifier = \"applicationServices\";\n\nconst basePath = \"/apps/rhoas-guides-build\";\nconst getPath = () => {\n  return basePath;\n};\n\nexport const QuickstartLoader: VoidFunctionComponent = () => {\n  const [loaded, setLoaded] = useState(false);\n  const chrome = useChrome();\n  const { quickStarts } = chrome;\n\n  const onLoad = (qs: unknown) => {\n    if (quickStarts) {\n      setLoaded(true); // unload federated module\n      quickStarts.set(appIdentifier, qs);\n    }\n  };\n\n  const processor = (([_, m]: [string, { entry: string[] }]) =>\n    m.entry.map(\n      (e) => `${basePath}${e}`\n    )) as unknown as ScalprumComponentProps[\"processor\"];\n\n  return (\n    <ErrorBoundary fallbackRender={() => null}>\n      <AssetsContext.Provider value={{ getPath }}>\n        {!loaded ? (\n          <ScalprumComponent\n            appName=\"guides\"\n            scope=\"guides\"\n            module=\"./QuickStartLoader\"\n            ErrorComponent={<div>opsie</div>}\n            processor={processor}\n            showDrafts={false}\n            onLoad={onLoad}\n          />\n        ) : null}\n      </AssetsContext.Provider>\n    </ErrorBoundary>\n  );\n};\n","import notificationsMiddleware from \"@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware\";\nimport type ReducerRegistry from \"@redhat-cloud-services/frontend-components-utilities/ReducerRegistry\";\nimport { getRegistry } from \"@redhat-cloud-services/frontend-components-utilities/Registry\";\nimport type { Middleware } from \"redux\";\nimport promiseMiddleware from \"redux-promise-middleware\";\n\n// eslint-disable-next-line  @typescript-eslint/no-explicit-any\nexport let registry: ReducerRegistry<any>;\n\nexport function init(...middleware: Middleware[]) {\n  registry = getRegistry({}, [\n    promiseMiddleware,\n    notificationsMiddleware({ errorDescriptionKey: [\"detail\", \"stack\"] }),\n    ...middleware,\n  ]);\n  return registry;\n}\n","import { useQuery } from \"@tanstack/react-query\";\nimport { useApiConfiguration } from \"../ApiProvider\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\nimport type { FetchConsumerGroupParams } from \"../fetchers\";\nimport { fetchConsumerGroup } from \"../fetchers\";\n\nexport function useConsumerGroup(\n  params: { id?: string; adminUrl?: string } & Omit<\n    FetchConsumerGroupParams,\n    \"getConsumerGroupById\"\n  >,\n  suspense = false\n) {\n  const { refetchInterval } = useApiConfiguration();\n  const { consumerGroups } = useApi();\n\n  return useQuery({\n    queryKey: kafkaQueries.instance.consumerGroup(params),\n    queryFn: () => {\n      if (!params.id) {\n        return Promise.reject(\"Invalid id\");\n      }\n      if (!params.adminUrl) {\n        return Promise.reject(\"Invalid adminUrl\");\n      }\n      if (!params.consumerGroupId) {\n        return Promise.reject(\"Invalid consumerGroupId\");\n      }\n      const api = consumerGroups(params.adminUrl);\n\n      return fetchConsumerGroup({\n        getConsumerGroupById: (...args) => api.getConsumerGroupById(...args),\n        ...params,\n      });\n    },\n    enabled:\n      Boolean(params.adminUrl) &&\n      Boolean(params.id) &&\n      Boolean(params.consumerGroupId),\n    refetchInterval,\n    suspense,\n  });\n}\n","import { useQuery } from \"@tanstack/react-query\";\nimport { useApiConfiguration } from \"../ApiProvider\";\nimport type { FetchConsumerGroupsParams } from \"../fetchers\";\nimport { fetchConsumerGroups } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useConsumerGroups(\n  params: { id?: string; adminUrl?: string } & Omit<\n    FetchConsumerGroupsParams,\n    \"getConsumerGroups\"\n  >\n) {\n  const { refetchInterval } = useApiConfiguration();\n  const { consumerGroups } = useApi();\n\n  return useQuery({\n    queryKey: kafkaQueries.instance.consumerGroups(params),\n    queryFn: () => {\n      if (!params.id) {\n        return Promise.reject(\"Invalid id\");\n      }\n      if (!params.adminUrl) {\n        return Promise.reject(\"Invalid adminUrl\");\n      }\n      const api = consumerGroups(params.adminUrl);\n\n      return fetchConsumerGroups({\n        getConsumerGroups: (...args) => api.getConsumerGroups(...args),\n        ...params,\n      });\n    },\n    enabled: Boolean(params.adminUrl) && Boolean(params.id),\n    refetchInterval,\n  });\n}\n","import { useQuery } from \"@tanstack/react-query\";\nimport { useApiConfiguration } from \"../ApiProvider\";\nimport { fetchDedicatedClusters } from \"../fetchers\";\nimport { masQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useDedicatedClusters(\n  { refetch }: { refetch: boolean } = { refetch: true }\n) {\n  const { refetchInterval } = useApiConfiguration();\n  const { dedicatedClusters } = useApi();\n\n  return useQuery({\n    queryKey: masQueries.dedicatedClusters(),\n    queryFn: () => {\n      const api = dedicatedClusters();\n\n      return fetchDedicatedClusters({\n        getEnterpriseOsdClusters: (...args) =>\n          api.getEnterpriseOsdClusters(...args),\n      });\n    },\n    refetchInterval: refetch ? refetchInterval : false,\n    refetchOnWindowFocus: !refetch ? false : undefined,\n    refetchOnReconnect: !refetch ? false : undefined,\n    refetchOnMount: !refetch ? false : undefined,\n    retry: false,\n  });\n}\n","import type { KafkaRequest } from \"@rhoas/kafka-management-sdk\";\nimport type {\n  CloudProvider,\n  Kafka,\n  MarketPlaceSubscriptions,\n  Plan,\n  Status,\n} from \"ui-models/src/models/kafka\";\nimport type { DateIsoString } from \"ui-models/src/types\";\n\nimport type { SizeWithLimits } from \"../fetchers\";\n\nexport type KafkaInstanceEnhanced = Required<Kafka> & {\n  request: KafkaRequest;\n};\n\nexport function kafkaRequestToKafkaInstanceEnhanched(\n  instance: KafkaRequest,\n  marketplaceSubscriptions: MarketPlaceSubscriptions[],\n  developerPlanInstanceLimits: SizeWithLimits[],\n  standardPlanInstanceLimits: SizeWithLimits[]\n): KafkaInstanceEnhanced {\n  const enhancedInstance: KafkaInstanceEnhanced = {\n    billing: undefined,\n    connectionRate: 0,\n    connections: 0,\n    createdAt: (instance.created_at ||\n      new Date().toISOString()) as DateIsoString,\n    egress: 0,\n    expiryDate: instance.expires_at as DateIsoString | undefined,\n    id: instance.id,\n    ingress: 0,\n    maxPartitions: 0,\n    messageSize: { type: \"bytes\", value: BigInt(0) },\n    name: instance.name || \"\",\n    owner: instance.owner || \"\",\n    plan: instance.billing_model as Plan,\n    provider: instance.cloud_provider as CloudProvider,\n    region: instance.region || \"\",\n    size: \"1\",\n    status: apiStatusToUIStatus(instance.status || \"\"),\n    storage: { type: \"bytes\", value: BigInt(0) },\n    updatedAt: (instance.updated_at ||\n      new Date().toISOString()) as DateIsoString,\n    request: instance,\n    version: instance.version || \"\",\n    bootstrapUrl: instance.bootstrap_server_host,\n    adminUrl: instance.admin_api_server_url,\n  };\n\n  // update the billing info\n  try {\n    const marketplaceForBilling = marketplaceSubscriptions.find((ms) =>\n      ms.subscriptions.find((s) => s === instance.billing_cloud_account_id)\n    )?.marketplace;\n\n    const billing: KafkaInstanceEnhanced[\"billing\"] =\n      instance.billing_model === \"standard\"\n        ? \"prepaid\"\n        : marketplaceForBilling && instance.billing_cloud_account_id\n        ? {\n            marketplace: marketplaceForBilling,\n            subscription: instance.billing_cloud_account_id,\n          }\n        : undefined;\n    enhancedInstance.billing = billing;\n  } catch (e) {\n    console.warn(\n      \"kafkaRequestToKafkaInstance\",\n      `couldn't retrieve the billing info for`,\n      instance\n    );\n  }\n\n  // update the limits\n  try {\n    const limits =\n      instance.instance_type === \"developer\"\n        ? developerPlanInstanceLimits\n        : standardPlanInstanceLimits;\n    const thisInstanceLimits = limits.find((l) => l.id === instance.size_id);\n    if (thisInstanceLimits) {\n      enhancedInstance.size = thisInstanceLimits.displayName;\n      enhancedInstance.ingress = thisInstanceLimits.ingress;\n      enhancedInstance.egress = thisInstanceLimits.egress;\n      enhancedInstance.storage = {\n        type: \"bytes\",\n        value: BigInt(instance.max_data_retention_size?.bytes || 0),\n      };\n      enhancedInstance.connections = thisInstanceLimits.connections;\n      enhancedInstance.connectionRate = thisInstanceLimits.connectionRate;\n      enhancedInstance.maxPartitions = thisInstanceLimits.maxPartitions;\n      enhancedInstance.messageSize = {\n        type: \"bytes\",\n        value: BigInt(thisInstanceLimits.messageSize),\n      };\n    }\n  } catch (e) {\n    console.warn(\n      \"kafkaRequestToKafkaInstance\",\n      `couldn't retrieve the limits info for`,\n      instance\n    );\n  }\n\n  return enhancedInstance;\n}\n\nfunction apiStatusToUIStatus(status: string): Status {\n  const mapping: { [key: string]: Status } = {\n    accepted: \"accepted\",\n    preparing: \"preparing\",\n    provisioning: \"provisioning\",\n    ready: \"ready\",\n    failed: \"degraded\",\n    deprovision: \"deprovision\",\n    deleting: \"deleting\",\n  };\n  return mapping[status] || \"degraded\";\n}\n","import type { KafkaRequestPayload } from \"@rhoas/kafka-management-sdk\";\nimport { APIErrorCodes, isServiceApiError } from \"@rhoas/kafka-management-sdk\";\nimport type { CreateKafkaInstanceServices } from \"ui\";\nimport { useApi } from \"../useApi\";\n\nconst ErrorCodes = {\n  /** Forbidden to perform this action*/\n  UNAUTHORIZED_USER: APIErrorCodes.ERROR_4,\n  /** Kafka cluster name is already used*/\n  DUPLICATE_INSTANCE_NAME: APIErrorCodes.ERROR_36,\n  /** The maximum number of allowed kafka instances has been reached*/\n  INTERNAL_CAPACITY_ERROR: APIErrorCodes.ERROR_24,\n  /** Insufficient quota*/\n  INSUFFICIENT_QUOTA: APIErrorCodes.ERROR_120,\n  /** Forbidden to create more instances than the maximum allowed*/\n  TRIAL_USED: APIErrorCodes.ERROR_5,\n  /** Failed to check quota*/\n  FAILED_TO_CHECK_QUOTA: APIErrorCodes.ERROR_121,\n  /** Bad request*/\n  OWNER_DOES_NOT_EXIST: APIErrorCodes.ERROR_21,\n};\n\n/**\n * Create Kafka instance hook that creates kafka instance\n */\nexport const useCreateInstance =\n  (): CreateKafkaInstanceServices[\"onCreate\"] => {\n    const { kafkasFleet } = useApi();\n\n    return (data, onSuccess, onError) => {\n      const runner = async () => {\n        const apisService = kafkasFleet();\n\n        try {\n          const kafkaRequest = {} as KafkaRequestPayload;\n          kafkaRequest.name = data.name;\n          kafkaRequest.cloud_provider = data.provider;\n          kafkaRequest.region = data.region;\n          kafkaRequest.plan = data.plan + \".\" + data.sizeId;\n          kafkaRequest.billing_model =\n            data.billing === \"prepaid\"\n              ? \"standard\"\n              : data.billing !== undefined\n              ? \"marketplace\"\n              : null;\n          kafkaRequest.billing_cloud_account_id =\n            data.billing && data.billing !== \"prepaid\"\n              ? data.billing.subscription\n              : null;\n          await apisService.createKafka(true, kafkaRequest);\n          onSuccess();\n        } catch (error) {\n          if (isServiceApiError(error)) {\n            const { code } = error?.response?.data || {};\n\n            switch (data.plan) {\n              case \"developer\":\n                switch (code) {\n                  case ErrorCodes.DUPLICATE_INSTANCE_NAME:\n                    onError(\"name-taken\");\n                    break;\n\n                  // regardless of the error, let's not give too many details to trial users\n                  default:\n                    onError(\"developer-unavailable\");\n                    break;\n                }\n                break;\n\n              case \"standard\":\n                switch (code) {\n                  case ErrorCodes.DUPLICATE_INSTANCE_NAME:\n                    onError(\"name-taken\");\n                    break;\n\n                  case ErrorCodes.INTERNAL_CAPACITY_ERROR:\n                    onError(\"region-unavailable\");\n                    break;\n\n                  case ErrorCodes.INSUFFICIENT_QUOTA:\n                    onError(\"insufficient-quota\");\n                    break;\n\n                  default:\n                    console.error(\n                      \"useAvailableProvidersAndDefault\",\n                      \"createKafka unknown error\",\n                      error\n                    );\n                    onError(\"unknown\");\n                }\n                break;\n            }\n          } else {\n            console.error(\n              \"useAvailableProvidersAndDefault\",\n              \"createKafka unexpected error\",\n              error\n            );\n          }\n        }\n      };\n      void runner();\n    };\n  };\n","import type { KafkaRequest } from \"@rhoas/kafka-management-sdk\";\nimport {\n  useProviderRegionSizesFetchQuery,\n  useProvidersWithRegionsFetchQuery,\n  useStandardQuotaFetchQuery,\n} from \"../fetchQueries\";\nimport { kafkaRequestToKafkaInstanceEnhanched } from \"../transformers/kafkaRequestToKafkaInstanceEnhanched\";\n\nexport function useKafkaInstanceTransformer() {\n  const getStandardQuotaQuery = useStandardQuotaFetchQuery();\n  const getProvidersInfo = useProvidersWithRegionsFetchQuery();\n  const getProviderRegionsSizes = useProviderRegionSizesFetchQuery();\n\n  return async function kafkaInstanceTransformer(instance: KafkaRequest) {\n    if (!instance.region) {\n      throw new Error(\n        `Invalid KafkaRequest, empty region: ${JSON.stringify(instance)}`\n      );\n    }\n    const standardQuota = await getStandardQuotaQuery();\n\n    const providersInfo = await getProvidersInfo(\n      instance.billing_model !== \"standard\" ? \"developer\" : \"standard\"\n    );\n    const providerInfo = providersInfo.providers.find(\n      (p) => p.id === instance.cloud_provider\n    );\n    if (!providerInfo) {\n      return Promise.reject(\"Invalid cloud provider\");\n    }\n    const standardPlanLimitsQuery = getProviderRegionsSizes(\n      providerInfo,\n      instance.region,\n      \"standard\"\n    );\n    const developerPlanLimitsQuery = getProviderRegionsSizes(\n      providerInfo,\n      instance.region,\n      \"developer\"\n    );\n    const [standardPlanLimits, developerPlanLimits] = await Promise.all([\n      standardPlanLimitsQuery,\n      developerPlanLimitsQuery,\n    ]);\n    return kafkaRequestToKafkaInstanceEnhanched(\n      instance,\n      standardQuota.marketplaceSubscriptions,\n      developerPlanLimits,\n      standardPlanLimits\n    );\n  };\n}\n","import { useQuery } from \"@tanstack/react-query\";\nimport { useApiConfiguration } from \"../ApiProvider\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\nimport { useKafkaInstanceTransformer } from \"./useKafkaInstanceTransformer\";\n\nexport function useKafka(id: string | undefined, suspense = false) {\n  const { refetchInterval } = useApiConfiguration();\n  const dataMapper = useKafkaInstanceTransformer();\n  const { kafkasFleet } = useApi();\n  const api = kafkasFleet();\n\n  return useQuery({\n    enabled: Boolean(id),\n    queryKey: kafkaQueries.instance.details({ id }),\n    queryFn: async () => {\n      if (!id) {\n        return Promise.reject(\"Invalid Kafka instance id\");\n      }\n      const instance = await api.getKafkaById(id);\n      return dataMapper(instance.data);\n    },\n    refetchInterval,\n    suspense,\n  });\n}\n","import { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useApiConfiguration } from \"../ApiProvider\";\nimport type { FetchKafkasParams } from \"../fetchers\";\nimport { fetchKafkas } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\nimport { useDedicatedClusters } from \"./useDedicatedClusters\";\nimport { useKafkaInstanceTransformer } from \"./useKafkaInstanceTransformer\";\n\nexport function useKafkas(\n  params: Omit<FetchKafkasParams, \"dataMapper\" | \"getKafkas\" | \"clusterIds\">\n) {\n  const { refetchInterval } = useApiConfiguration();\n  const { data, isError } = useDedicatedClusters();\n  const queryClient = useQueryClient();\n  const dataMapper = useKafkaInstanceTransformer();\n  const { kafkasFleet } = useApi();\n  const api = kafkasFleet();\n  const clusterIds = data?.clusters.map((c) => c.id);\n\n  return useQuery({\n    queryKey: kafkaQueries.list({ ...params, clusterIds }),\n    queryFn: async () => {\n      const res = await fetchKafkas({\n        getKafkas: (...args) => api.getKafkas(...args),\n        dataMapper,\n        ...params,\n        clusterIds,\n      });\n      res.instances.forEach((i) =>\n        queryClient.setQueryData(kafkaQueries.instance.details({ id: i.id }), i)\n      );\n      return res;\n    },\n    enabled: Boolean(clusterIds) || isError,\n    refetchInterval,\n  });\n}\n","import { useQuery } from \"@tanstack/react-query\";\nimport { useApiConfiguration } from \"../ApiProvider\";\nimport type { FetchTopicParams } from \"../fetchers\";\nimport { fetchTopic } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useTopic(\n  params: { id?: string; adminUrl?: string } & Omit<\n    FetchTopicParams,\n    \"getTopic\"\n  >,\n  suspense = false\n) {\n  const { refetchInterval } = useApiConfiguration();\n  const { topics } = useApi();\n\n  return useQuery({\n    queryKey: kafkaQueries.instance.topic(params),\n    queryFn: () => {\n      if (!params.id) {\n        return Promise.reject(\"Invalid id\");\n      }\n      if (!params.adminUrl) {\n        return Promise.reject(\"Invalid adminUrl\");\n      }\n      const api = topics(params.adminUrl);\n\n      return fetchTopic({\n        getTopic: (...args) => api.getTopic(...args),\n        ...params,\n      });\n    },\n    enabled:\n      Boolean(params.adminUrl) &&\n      Boolean(params.id) &&\n      Boolean(params.topicName),\n    refetchInterval,\n    suspense,\n  });\n}\n","import { useQuery } from \"@tanstack/react-query\";\nimport { useApiConfiguration } from \"../ApiProvider\";\nimport type { FetchTopicsParams } from \"../fetchers\";\nimport { fetchTopics } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useTopics(\n  params: { id?: string; adminUrl?: string } & Omit<\n    FetchTopicsParams,\n    \"getTopics\"\n  >\n) {\n  const { refetchInterval } = useApiConfiguration();\n  const { topics } = useApi();\n\n  return useQuery({\n    queryKey: kafkaQueries.instance.topics(params),\n    queryFn: () => {\n      if (!params.id) {\n        return Promise.reject(\"Invalid id\");\n      }\n      if (!params.adminUrl) {\n        return Promise.reject(\"Invalid adminUrl\");\n      }\n      const api = topics(params.adminUrl);\n\n      return fetchTopics({\n        getTopics: (...args) => api.getTopics(...args),\n        ...params,\n      });\n    },\n    enabled: Boolean(params.adminUrl) && Boolean(params.id),\n    refetchInterval,\n  });\n}\n","import { useQuery } from \"@tanstack/react-query\";\nimport { useApiConfiguration } from \"../ApiProvider\";\nimport type { FetchUserAccountsParams } from \"../fetchers\";\nimport { fetchUserAccounts } from \"../fetchers\";\nimport { masQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useUserAccounts(\n  params: Omit<FetchUserAccountsParams, \"getUserAccounts\">\n) {\n  const { refetchInterval } = useApiConfiguration();\n  const { userAccounts } = useApi();\n\n  return useQuery({\n    queryKey: masQueries.userAccounts(params),\n    queryFn: async () => {\n      const api = await userAccounts();\n\n      return fetchUserAccounts({\n        getUserAccounts: (...args) => api.listPrincipals(...args),\n        ...params,\n      });\n    },\n    refetchInterval,\n  });\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport { fetchDedicatedClusters, fetchKafkas } from \"../fetchers\";\nimport { useKafkaInstanceTransformer } from \"../queries\";\nimport { kafkaQueries, masQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport const useDeveloperInstanceAvailabilityFetchQuery = () => {\n  const queryClient = useQueryClient();\n  const { kafkasFleet, dedicatedClusters } = useApi();\n  const dataMapper = useKafkaInstanceTransformer();\n\n  return (getUsername: () => Promise<string>) => {\n    const fleetApi = kafkasFleet();\n    const clustersApi = dedicatedClusters();\n    return queryClient.fetchQuery({\n      queryKey: masQueries.quota.developerAvailability(),\n      queryFn: async () => {\n        const username = await getUsername();\n        if (!username) {\n          return Promise.reject(new Error(\"Invalid username\"));\n        }\n        let clusterIds: string[] = [];\n\n        try {\n          const clusterResponse = await queryClient.fetchQuery({\n            queryKey: masQueries.dedicatedClusters(),\n            queryFn: () =>\n              fetchDedicatedClusters({\n                getEnterpriseOsdClusters: (...args) =>\n                  clustersApi.getEnterpriseOsdClusters(...args),\n              }),\n          });\n          clusterIds = clusterResponse.clusters.map((c) => c.id);\n        } catch {\n          // noop\n        }\n\n        const { instances } = await queryClient.fetchQuery({\n          queryKey: kafkaQueries.list({\n            direction: \"desc\",\n            sort: \"createdAt\",\n            name: [],\n            status: [],\n            owner: [username],\n            perPage: 1000,\n            page: 1,\n            clusterIds,\n            deployment: \"standard\",\n          }),\n          queryFn: () =>\n            fetchKafkas({\n              getKafkas: (...args) => fleetApi.getKafkas(...args),\n              dataMapper,\n              direction: \"desc\",\n              sort: \"createdAt\",\n              name: [],\n              status: [],\n              owner: [username],\n              perPage: 1000,\n              page: 1,\n              clusterIds,\n              deployment: \"standard\",\n            }),\n          staleTime: Infinity,\n        });\n\n        return instances.some((k) => k?.plan !== \"standard\") !== true;\n      },\n    });\n  };\n};\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport { useKafkaInstanceTransformer } from \"../queries\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useKafkaFetchQuery() {\n  const queryClient = useQueryClient();\n  const dataMapper = useKafkaInstanceTransformer();\n  const { kafkasFleet } = useApi();\n  return async (id: string) => {\n    const api = kafkasFleet();\n    return queryClient.fetchQuery({\n      queryKey: kafkaQueries.instance.details({ id }),\n      queryFn: async () => {\n        const instance = await api.getKafkaById(id);\n        return dataMapper(instance.data);\n      },\n    });\n  };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport { fetchKafkaKpis } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useKafkaKpisFetchQuery() {\n  const { kafkasFleet } = useApi();\n  const queryClient = useQueryClient();\n\n  return (id: string) => {\n    const api = kafkasFleet();\n\n    return queryClient.fetchQuery({\n      queryKey: kafkaQueries.instance.metrics.kpi({ id }),\n      queryFn: async () => {\n        return fetchKafkaKpis(\n          (...args) => api.getMetricsByInstantQuery(...args),\n          id\n        );\n      },\n    });\n  };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport type { FetchKafkaMetricsProps } from \"../fetchers\";\nimport { fetchKafkaMetrics } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useKafkaMetricsFetchQuery() {\n  const { kafkasFleet } = useApi();\n  const queryClient = useQueryClient();\n\n  return (params: Omit<FetchKafkaMetricsProps, \"getMetricsByRangeQuery\">) => {\n    const api = kafkasFleet();\n\n    return queryClient.fetchQuery({\n      queryKey: kafkaQueries.instance.metrics.instance(params),\n      queryFn: async () => {\n        return fetchKafkaMetrics({\n          getMetricsByRangeQuery: (...args) =>\n            api.getMetricsByRangeQuery(...args),\n          ...params,\n        });\n      },\n    });\n  };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport type { FetchTopicsMetricsProps } from \"../fetchers\";\nimport { fetchTopicsMetrics } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useTopicsMetricsFetchQuery() {\n  const { kafkasFleet } = useApi();\n  const queryClient = useQueryClient();\n\n  return (params: Omit<FetchTopicsMetricsProps, \"getMetricsByRangeQuery\">) => {\n    const api = kafkasFleet();\n\n    return queryClient.fetchQuery({\n      queryKey: kafkaQueries.instance.metrics.topic(params),\n      queryFn: async () => {\n        return fetchTopicsMetrics({\n          getMetricsByRangeQuery: (...args) =>\n            api.getMetricsByRangeQuery(...args),\n          ...params,\n        });\n      },\n    });\n  };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport type { FetchTopicsParams } from \"../fetchers\";\nimport { fetchTopics } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useTopicsFetchQuery() {\n  const { topics } = useApi();\n  const queryClient = useQueryClient();\n\n  return (\n    params: Omit<FetchTopicsParams, \"getTopics\"> & {\n      id: string;\n      adminUrl: string;\n    }\n  ) => {\n    const api = topics(params.adminUrl);\n\n    return queryClient.fetchQuery({\n      queryKey: kafkaQueries.instance.topics(params),\n      queryFn: async () => {\n        return fetchTopics({\n          getTopics: (...args) => api.getTopics(...args),\n          ...params,\n        });\n      },\n    });\n  };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport type { FetchMessagesParams } from \"../fetchers\";\nimport { fetchMessages } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useMessagesFetchQuery() {\n  const { records } = useApi();\n  const queryClient = useQueryClient();\n\n  return (\n    params: { id: string; adminUrl: string } & Omit<\n      FetchMessagesParams,\n      \"consumeRecords\"\n    >\n  ) => {\n    const api = records(params.adminUrl);\n\n    return queryClient.fetchQuery({\n      queryKey: kafkaQueries.instance.topicMessages(params),\n      queryFn: () => {\n        if (!params.id) {\n          return Promise.reject(\"Invalid id\");\n        }\n        if (!params.adminUrl) {\n          return Promise.reject(\"Invalid adminUrl\");\n        }\n\n        return fetchMessages({\n          consumeRecords: (...args) => api.consumeRecords(...args),\n          ...params,\n        });\n      },\n    });\n  };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport type { Plan } from \"ui-models/src/models/kafka\";\nimport type { CloudProviderInfoWithRegionsCapacity } from \"../fetchers\";\nimport { fetchProviderRegionSizes } from \"../fetchers\";\nimport { providerQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useProviderRegionSizesFetchQuery() {\n  const queryClient = useQueryClient();\n  const { kafkasFleet } = useApi();\n\n  return (\n    provider: CloudProviderInfoWithRegionsCapacity,\n    region: string,\n    plan: Plan\n  ) => {\n    const kms = kafkasFleet();\n    return queryClient.fetchQuery({\n      queryKey: providerQueries.limits[\n        plan === \"standard\" ? \"standard\" : \"developer\"\n      ]({ provider: provider.id, region }),\n      queryFn: () =>\n        fetchProviderRegionSizes(\n          (...args) => kms.getInstanceTypesByCloudProviderAndRegion(...args),\n          provider,\n          region,\n          plan\n        ),\n      staleTime: Infinity,\n    });\n  };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport type { Plan } from \"ui-models/src/models/kafka\";\nimport { fetchProvidersWithRegions } from \"../fetchers\";\nimport { providerQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useProvidersWithRegionsFetchQuery() {\n  const queryClient = useQueryClient();\n  const { kafkasFleet } = useApi();\n\n  return (plan: Plan) => {\n    const kms = kafkasFleet();\n    return queryClient.fetchQuery({\n      queryKey: providerQueries.list({ plan }),\n      queryFn: () =>\n        fetchProvidersWithRegions(\n          (...args) => kms.getCloudProviders(...args),\n          (...args) => kms.getCloudProviderRegions(...args),\n          plan\n        ),\n      staleTime: Infinity,\n    });\n  };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport { fetchOrganization, fetchStandardQuota } from \"../fetchers\";\nimport { masQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useStandardQuotaFetchQuery(skipCache = false) {\n  const queryClient = useQueryClient();\n  const { account } = useApi();\n  const ams = account();\n\n  return async () => {\n    const organization = await queryClient.fetchQuery({\n      queryKey: masQueries.organization(),\n      queryFn: () =>\n        fetchOrganization((...args) =>\n          ams.apiAccountsMgmtV1CurrentAccountGet(...args)\n        ),\n      staleTime: Infinity,\n    });\n    if (!organization) {\n      return Promise.reject(\"Missing organization id\");\n    }\n    return queryClient.fetchQuery({\n      queryKey: masQueries.quota.available(),\n      queryFn: () =>\n        fetchStandardQuota(\n          (...args) =>\n            ams.apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(...args),\n          organization\n        ),\n      staleTime: skipCache ? undefined : Infinity,\n    });\n  };\n}\n","import type { KafkaRequestPayload } from \"@rhoas/kafka-management-sdk\";\nimport { APIErrorCodes, isServiceApiError } from \"@rhoas/kafka-management-sdk\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport type { CreateKafkaFormData, CreateKafkaInstanceError } from \"ui\";\nimport { kafkaQueries, masQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useCreateKafkaMutation() {\n  const { kafkasFleet } = useApi();\n  const queryClient = useQueryClient();\n\n  return useMutation(\n    async function kafkaCreateInstance(props: {\n      instance: CreateKafkaFormData;\n      onSuccess: () => void;\n      onError: (error: CreateKafkaInstanceError) => void;\n    }) {\n      const { instance, onSuccess, onError } = props;\n      const api = kafkasFleet();\n      const kafkaRequest: KafkaRequestPayload = {\n        name: instance.name,\n        cloud_provider: instance.provider,\n        region: instance.region,\n      };\n      kafkaRequest.plan = instance.plan + \".\" + instance.sizeId;\n      kafkaRequest.billing_model =\n        instance.billing === \"prepaid\"\n          ? \"standard\"\n          : instance.billing !== undefined\n          ? \"marketplace\"\n          : null;\n      kafkaRequest.billing_cloud_account_id =\n        instance.billing && instance.billing !== \"prepaid\"\n          ? instance.billing.subscription\n          : null;\n      try {\n        await api.createKafka(true, kafkaRequest);\n        onSuccess();\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const { code } = error?.response?.data || {};\n\n          switch (instance.plan) {\n            case \"developer\":\n              switch (code) {\n                case ErrorCodes.DUPLICATE_INSTANCE_NAME:\n                  onError(\"name-taken\");\n                  break;\n\n                // regardless of the error, let's not give too many details to trial users\n                default:\n                  onError(\"developer-unavailable\");\n                  break;\n              }\n              break;\n\n            case \"standard\":\n              switch (code) {\n                case ErrorCodes.DUPLICATE_INSTANCE_NAME:\n                  onError(\"name-taken\");\n                  break;\n\n                case ErrorCodes.INTERNAL_CAPACITY_ERROR:\n                  onError(\"region-unavailable\");\n                  break;\n\n                case ErrorCodes.INSUFFICIENT_QUOTA:\n                  onError(\"insufficient-quota\");\n                  break;\n\n                default:\n                  console.error(\n                    \"useKafkaCreateInstanceMutation\",\n                    \"createKafka unknown error\",\n                    error\n                  );\n                  onError(\"unknown\");\n              }\n              break;\n          }\n        } else {\n          console.error(\n            \"useKafkaCreateInstanceMutation\",\n            \"createKafka unexpected error\",\n            error\n          );\n          onError(\"unknown\");\n        }\n      }\n    },\n    {\n      onSuccess: () => {\n        void queryClient.invalidateQueries([kafkaQueries._root()]);\n        void queryClient.invalidateQueries([masQueries.quota._root()]);\n      },\n    }\n  );\n}\n\nconst ErrorCodes = {\n  /** Forbidden to perform this action*/\n  UNAUTHORIZED_USER: APIErrorCodes.ERROR_4,\n  /** Kafka cluster name is already used*/\n  DUPLICATE_INSTANCE_NAME: APIErrorCodes.ERROR_36,\n  /** The maximum number of allowed kafka instances has been reached*/\n  INTERNAL_CAPACITY_ERROR: APIErrorCodes.ERROR_24,\n  /** Insufficient quota*/\n  INSUFFICIENT_QUOTA: APIErrorCodes.ERROR_120,\n  /** Forbidden to create more instances than the maximum allowed*/\n  TRIAL_USED: APIErrorCodes.ERROR_5,\n  /** Failed to check quota*/\n  FAILED_TO_CHECK_QUOTA: APIErrorCodes.ERROR_121,\n  /** Bad request*/\n  OWNER_DOES_NOT_EXIST: APIErrorCodes.ERROR_21,\n} as const;\n","import { isServiceApiError } from \"@rhoas/kafka-management-sdk\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { kafkaQueries, masQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useDeleteKafkaMutation() {\n  const { kafkasFleet } = useApi();\n  const queryClient = useQueryClient();\n\n  return useMutation(\n    async function kafkaCreateInstance(props: {\n      id: string;\n      onSuccess: () => void;\n      onError: (code: string, message: string) => void;\n    }) {\n      const { id, onSuccess, onError } = props;\n      const api = kafkasFleet();\n      try {\n        await api.deleteKafkaById(id, true);\n        onSuccess();\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const message = error?.message;\n          const { code } = error?.response?.data || {};\n\n          onError(code || \"?\", message);\n        }\n      }\n    },\n    {\n      onSuccess: () => {\n        void queryClient.invalidateQueries([kafkaQueries._root()]);\n        void queryClient.invalidateQueries([masQueries.quota._root()]);\n      },\n    }\n  );\n}\n","import { isServiceApiError } from \"@rhoas/kafka-management-sdk\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useDeleteTopicMutation() {\n  const { topics } = useApi();\n  const queryClient = useQueryClient();\n\n  return useMutation(\n    async function kafkaCreateInstance({\n      adminUrl,\n      name,\n      onSuccess,\n      onError,\n    }: {\n      instanceId: string;\n      adminUrl: string;\n      name: string;\n      onSuccess: () => void;\n      onError: (code: string, message: string) => void;\n    }) {\n      const api = topics(adminUrl);\n      try {\n        await api.deleteTopic(name);\n        onSuccess();\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const message = error?.message;\n          const { code } = error?.response?.data || {};\n\n          onError(code || \"?\", message);\n        }\n      }\n    },\n    {\n      onSuccess: (_, { adminUrl, instanceId }) => {\n        void queryClient.invalidateQueries([\n          kafkaQueries.instance._root({\n            id: instanceId,\n            adminUrl,\n          }),\n        ]);\n      },\n    }\n  );\n}\n","import type {\n  KafkaRequest,\n  KafkaUpdateRequest,\n} from \"@rhoas/kafka-management-sdk\";\nimport { getErrorCode, isServiceApiError } from \"@rhoas/kafka-management-sdk\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport type { AxiosResponse } from \"axios\";\nimport { AxiosError } from \"axios\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\ntype Errors = \"invalid-user\" | \"other\" | \"unknown\";\n\nexport function useUpdateKafkaMutation() {\n  const { kafkasFleet } = useApi();\n  const queryClient = useQueryClient();\n\n  return useMutation<\n    AxiosResponse<KafkaRequest>,\n    { type: Errors; message?: string },\n    { id: string; updates: KafkaUpdateRequest },\n    unknown\n  >(\n    async function kafkaCreateInstance({ id, updates }) {\n      const api = kafkasFleet();\n      try {\n        return await api.updateKafkaById(id, updates);\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const code = getErrorCode(error);\n\n          switch (code) {\n            case \"KAFKAS-MGMT-21\": {\n              return Promise.reject({\n                type: \"invalid-user\",\n                message: error.response?.data.reason,\n              });\n            }\n            default: {\n              return Promise.reject({\n                type: \"other\",\n                message: error.response?.data.reason,\n              });\n            }\n          }\n        } else if (error instanceof AxiosError) {\n          return Promise.reject({ type: \"unknown\", message: error.message });\n        } else {\n          return Promise.reject({ type: \"unknown\", message: \"unknown\" });\n        }\n      }\n    },\n    {\n      onSuccess: () => {\n        void queryClient.invalidateQueries([kafkaQueries._root()]);\n      },\n    }\n  );\n}\n","import { isServiceApiError } from \"@rhoas/kafka-management-sdk\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useDeleteConsumerGroupMutation() {\n  const { consumerGroups } = useApi();\n  const queryClient = useQueryClient();\n\n  return useMutation(\n    async function deleteConsumerGroup(props: {\n      instanceId: string;\n      adminUrl: string;\n      consumerGroupId: string;\n      onSuccess: () => void;\n      onError: (code: string, message: string) => void;\n    }) {\n      const { instanceId, adminUrl, consumerGroupId, onSuccess, onError } =\n        props;\n      const api = consumerGroups(adminUrl);\n      try {\n        await api.deleteConsumerGroupById(consumerGroupId);\n        onSuccess();\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const message = error?.message;\n          const { code } = error?.response?.data || {};\n\n          onError(code || \"?\", message);\n        }\n      }\n    },\n    {\n      onSuccess: (_, { adminUrl, instanceId }) => {\n        void queryClient.invalidateQueries([\n          kafkaQueries.instance._root({\n            id: instanceId,\n            adminUrl,\n          }),\n        ]);\n      },\n    }\n  );\n}\n","import { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useApi } from \"../useApi\";\nimport type { OffsetValue } from \"ui\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { isServiceApiError } from \"@rhoas/kafka-management-sdk\";\n\nexport function useResetConsumerGroupMutation() {\n  const { consumerGroups } = useApi();\n  const queryClient = useQueryClient();\n\n  return useMutation(\n    async function consumerGroupResetOffset(props: {\n      instanceId: string;\n      adminUrl: string;\n      consumerGroupId: string;\n      offset: OffsetValue;\n      topic: string;\n      partitions: number[];\n      value?: string;\n      onSuccess: () => void;\n      onError: (code: string, message: string) => void;\n    }) {\n      const {\n        instanceId,\n        adminUrl,\n        consumerGroupId,\n        offset,\n        topic,\n        partitions,\n        value,\n        onSuccess,\n        onError,\n      } = props;\n      const api = consumerGroups(adminUrl);\n      try {\n        await api.resetConsumerGroupOffset(consumerGroupId, {\n          value,\n          offset,\n          topics: [{ topic, partitions }],\n        });\n        onSuccess();\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const message = error?.message;\n          const { code } = error?.response?.data || {};\n\n          onError(code || \"?\", message);\n        }\n      }\n    },\n    {\n      onSuccess: (_, { adminUrl, instanceId }) => {\n        void queryClient.invalidateQueries([\n          kafkaQueries.instance._root({\n            id: instanceId,\n            adminUrl,\n          }),\n        ]);\n      },\n    }\n  );\n}\n","import {\n  ConsumerGroupOrderKey,\n  TopicOrderKey,\n} from \"@rhoas/kafka-instance-sdk\";\nimport type { RangeQuery } from \"@rhoas/kafka-management-sdk\";\n\nexport type NoUndefinedField<T> = {\n  [P in keyof T]-?: NoUndefinedField<NonNullable<T[P]>>;\n};\n\nexport type SafeRangeQuery = NoUndefinedField<RangeQuery>;\n\nexport const KafkaInstancesSortableColumns = [\n  \"name\",\n  \"owner\",\n  \"createdAt\",\n  \"provider\",\n  \"region\",\n] as const;\n\nexport type KafkaInstancesSortableColumn =\n  (typeof KafkaInstancesSortableColumns)[number];\n\nexport const KafkaTopicsSortableColumns = [\n  ...Object.values(TopicOrderKey),\n] as const;\n\nexport type KafkaTopicsSortableColumn =\n  (typeof KafkaTopicsSortableColumns)[number];\n\nexport const KafkaConsumerGroupSortableColumns = [\n  ...Object.values(ConsumerGroupOrderKey),\n] as const;\n\nexport type KafkaConsumerGroupSortableColumn =\n  (typeof KafkaConsumerGroupSortableColumns)[number];\n","import { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { isReactQueryDevToolsEanbled } from \"local-storage-helpers\";\nimport type { FunctionComponent } from \"react\";\nimport { createContext, lazy, Suspense, useContext } from \"react\";\n\nconst ReactQueryDevtoolsProduction = lazy(() =>\n  import(\"@tanstack/react-query-devtools/build/lib/index.prod.js\").then(\n    (d) => ({\n      default: d.ReactQueryDevtools,\n    })\n  )\n);\n\ntype ApiContextProps = {\n  accessToken: () => Promise<string>;\n  basePath: string;\n  refetchInterval: number;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\nconst ApiContext = createContext<ApiContextProps>(null!);\n\nconst queryClient = new QueryClient();\n\nexport const ApiProvider: FunctionComponent<ApiContextProps> = ({\n  children,\n  ...context\n}) => {\n  const showDevTools = isReactQueryDevToolsEanbled();\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ApiContext.Provider value={context}>\n        {children}\n        {showDevTools && (\n          <Suspense fallback={null}>\n            <ReactQueryDevtoolsProduction />\n          </Suspense>\n        )}\n      </ApiContext.Provider>\n    </QueryClientProvider>\n  );\n};\n\nexport function useApiConfiguration() {\n  return useContext(ApiContext);\n}\n\nexport { useQueryErrorResetBoundary } from \"@tanstack/react-query\";\n","import type {\n  ConsumerGroup as ConsumerGroupApi,\n  ConsumerGroupState,\n} from \"@rhoas/kafka-instance-sdk\";\nimport type {\n  Consumer,\n  ConsumerGroup,\n} from \"ui-models/src/models/consumer-group\";\n\nexport function consumerGroupTransformer(t: ConsumerGroupApi): ConsumerGroup {\n  const state = stateMapping[t.state as ConsumerGroupState];\n  return {\n    groupId: t.groupId,\n    state: state,\n    consumers: t.consumers.map<Consumer>((consumer) => ({\n      groupId: consumer.groupId,\n      topic: consumer.topic,\n      lag: consumer.lag,\n      memberId: consumer.memberId,\n      partition: consumer.partition,\n      offset: consumer.offset,\n      logEndOffset: consumer.logEndOffset,\n    })),\n    activeConsumers: t.metrics?.activeConsumers,\n    laggingPartitions: t.metrics?.laggingPartitions,\n    unassignedPartitions: t.metrics?.unassignedPartitions,\n  };\n}\n\nexport const stateMapping: {\n  [state in ConsumerGroupState]: ConsumerGroup[\"state\"];\n} = {\n  DEAD: \"Dead\",\n  EMPTY: \"Empty\",\n  STABLE: \"Stable\",\n  UNKNOWN: \"Unknown\",\n  COMPLETING_REBALANCE: \"CompletingRebalance\",\n  PREPARING_REBALANCE: \"PreparingRebalance\",\n};\n","import type { GroupsApi } from \"@rhoas/kafka-instance-sdk\";\nimport type { ConsumerGroup } from \"ui-models/src/models/consumer-group\";\nimport { consumerGroupTransformer } from \"../transformers/consumerGroupTransformer\";\n\nexport type FetchConsumerGroupParams = {\n  getConsumerGroupById: GroupsApi[\"getConsumerGroupById\"];\n  consumerGroupId: string;\n};\n\nexport async function fetchConsumerGroup({\n  getConsumerGroupById,\n  consumerGroupId,\n}: FetchConsumerGroupParams): Promise<ConsumerGroup> {\n  const response = await getConsumerGroupById(consumerGroupId);\n  return consumerGroupTransformer(response.data);\n}\n","import type {\n  ConsumerGroupState,\n  GroupsApi,\n  SortDirection,\n} from \"@rhoas/kafka-instance-sdk\";\nimport type { ConsumerGroup } from \"ui-models/src/models/consumer-group\";\nimport { stateMapping } from \"../transformers/consumerGroupTransformer\";\nimport type { KafkaConsumerGroupSortableColumn } from \"../types\";\n\nexport type FetchConsumerGroupsParams = {\n  getConsumerGroups: GroupsApi[\"getConsumerGroups\"];\n  page?: number;\n  perPage?: number;\n  sort?: KafkaConsumerGroupSortableColumn;\n  direction?: SortDirection;\n  topic?: string;\n  groupId?: string;\n};\n\nexport async function fetchConsumerGroups({\n  getConsumerGroups,\n  page,\n  perPage,\n  topic,\n  groupId,\n  sort,\n  direction,\n}: FetchConsumerGroupsParams): Promise<{\n  groups: ConsumerGroup[];\n  count: number;\n}> {\n  const response = await getConsumerGroups(\n    undefined,\n    undefined,\n    perPage,\n    page,\n    topic,\n    groupId,\n    direction,\n    sort\n  );\n  const groups = (response.data.items || []).map<ConsumerGroup>((t) => ({\n    groupId: t.groupId || \"\",\n    state: stateMapping[t.state as ConsumerGroupState],\n    consumers: t.consumers,\n    activeConsumers: t.metrics?.activeConsumers,\n    laggingPartitions: t.metrics?.laggingPartitions,\n    unassignedPartitions: t.metrics?.unassignedPartitions,\n  }));\n  const count = response.data.total;\n\n  return { count, groups };\n}\n","import type { EnterpriseCluster } from \"@rhoas/kafka-management-sdk\";\nimport type { DedicatedCluster } from \"ui-models/src/models/dedicated-cluster\";\n\nexport function dedicatedClusterTransformer(\n  c: EnterpriseCluster\n): DedicatedCluster {\n  if (c.cluster_id === undefined || c.status === undefined) {\n    throw new Error(\"Invalid EnterpriseCluster data\");\n  }\n  return {\n    id: c.cluster_id,\n    status: c.status,\n  };\n}\n","import type { EnterpriseDataplaneClustersApi } from \"@rhoas/kafka-management-sdk\";\nimport type { DedicatedCluster } from \"ui-models/src/models/dedicated-cluster\";\nimport { dedicatedClusterTransformer } from \"../transformers/dedicatedClusterTransformer\";\n\nexport type FetchDedicatedClustersParams = {\n  getEnterpriseOsdClusters: EnterpriseDataplaneClustersApi[\"getEnterpriseOsdClusters\"];\n};\n\nexport async function fetchDedicatedClusters({\n  getEnterpriseOsdClusters,\n}: FetchDedicatedClustersParams): Promise<{\n  clusters: DedicatedCluster[];\n  count: number;\n}> {\n  const response = await getEnterpriseOsdClusters();\n  if (response.status === 403) {\n    throw new MissingDedicatedEntitlement();\n  }\n  return {\n    clusters: (response.data.items || []).map(dedicatedClusterTransformer),\n    count: response.data.total,\n  };\n}\n\nexport class MissingDedicatedEntitlement extends Error {}\n","import type { DefaultApi, InstantQuery } from \"@rhoas/kafka-management-sdk\";\nimport type { NoUndefinedField } from \"../types\";\n\nexport async function fetchKafkaKpis(\n  getMetricsByInstantQuery: DefaultApi[\"getMetricsByInstantQuery\"],\n  id: string\n) {\n  let topics = 0,\n    topicPartitions = 0,\n    consumerGroups = 0;\n\n  const response = await getMetricsByInstantQuery(id, [\n    \"kafka_topic:kafka_topic_partitions:sum\", // (Number of topic partitions)\n    \"kafka_topic:kafka_topic_partitions:count\", // (Number of topics)\n    \"consumergroup:kafka_consumergroup_members:count\", // (number of consumer groups - note that this metric will appear after a consumer group is created. There should be handled by the UI in a way that the metric isn't visible if no consumer groups are created)\n  ]);\n\n  const safeMetrics: NoUndefinedField<InstantQuery[]> = (response.data.items ||\n    []) as NoUndefinedField<InstantQuery[]>;\n\n  safeMetrics.forEach(({ metric, value }) => {\n    const { __name__: name } = metric;\n\n    switch (name) {\n      case \"kafka_topic:kafka_topic_partitions:sum\":\n        topicPartitions = value;\n        break;\n      case \"kafka_topic:kafka_topic_partitions:count\":\n        topics = value;\n        break;\n      case \"consumergroup:kafka_consumergroup_members:count\":\n        consumerGroups = value;\n        break;\n    }\n  });\n  return {\n    consumerGroups,\n    topicPartitions,\n    topics,\n  };\n}\n","import type { DefaultApi } from \"@rhoas/kafka-management-sdk\";\nimport type { GetKafkaInstanceMetricsResponse, TimeSeriesMetrics } from \"ui\";\nimport type { SafeRangeQuery } from \"../types\";\n\nexport type FetchKafkaMetricsProps = {\n  getMetricsByRangeQuery: DefaultApi[\"getMetricsByRangeQuery\"];\n  id: string;\n  duration: number;\n  interval: number;\n};\n\nexport async function fetchKafkaMetrics({\n  getMetricsByRangeQuery,\n  id,\n  duration,\n  interval,\n}: FetchKafkaMetricsProps): Promise<GetKafkaInstanceMetricsResponse> {\n  const response = await getMetricsByRangeQuery(id, duration, interval, [\n    \"kubelet_volume_stats_used_bytes\",\n    \"kafka_namespace:kafka_server_socket_server_metrics_connection_creation_rate:sum\",\n    \"kafka_namespace:kafka_server_socket_server_metrics_connection_count:sum\",\n  ]);\n\n  // Remove all results with no data. Not sure this can really  happen but since\n  // the types allow for undefined we need to do a bit of defensive programming.\n  const safeMetrics: SafeRangeQuery[] = (response.data.items || []).filter(\n    (m) =>\n      // defensive programming\n      !(\n        m.values &&\n        m.metric &&\n        m.metric.topic &&\n        m.metric.name &&\n        m.metric.persistentvolumeclaim &&\n        m.metric.persistentvolumeclaim.includes(\"zookeeper\")\n      )\n  ) as SafeRangeQuery[];\n\n  const usedDiskSpaceMetrics: TimeSeriesMetrics = {};\n  const connectionAttemptRateMetrics: TimeSeriesMetrics = {};\n  const clientConnectionsMetrics: TimeSeriesMetrics = {};\n\n  const connectionRateLimit = 0,\n    connectionsLimit = 0,\n    diskSpaceLimit = 0;\n\n  safeMetrics.forEach((m) => {\n    const { __name__: name } = m.metric;\n\n    function addAggregatedValuesTo(metric: TimeSeriesMetrics) {\n      m.values.forEach(\n        ({ value, timestamp }) =>\n          (metric[timestamp] = value + (metric[timestamp] || 0))\n      );\n    }\n\n    switch (name) {\n      case \"kubelet_volume_stats_used_bytes\":\n        addAggregatedValuesTo(usedDiskSpaceMetrics);\n        break;\n      case \"kafka_namespace:kafka_server_socket_server_metrics_connection_creation_rate:sum\":\n        addAggregatedValuesTo(connectionAttemptRateMetrics);\n        break;\n      case \"kafka_namespace:kafka_server_socket_server_metrics_connection_count:sum\":\n        addAggregatedValuesTo(clientConnectionsMetrics);\n        break;\n    }\n  });\n\n  return {\n    usedDiskSpaceMetrics,\n    clientConnectionsMetrics,\n    connectionAttemptRateMetrics,\n    diskSpaceLimit,\n    connectionRateLimit,\n    connectionsLimit,\n  };\n}\n","export function valuesToQuery(\n  field: string,\n  values: string[],\n  comparison: \"%\" | \"=\" | \"<>\",\n  join: \"and\" | \"or\"\n): string | undefined {\n  return values\n    .map((v) =>\n      comparison === \"%\"\n        ? `${field} like %${v.trim()}%`\n        : `${field} ${comparison} ${v.trim()}`\n    )\n    .join(` ${join} `);\n}\n","import type { DefaultApi, KafkaRequest } from \"@rhoas/kafka-management-sdk\";\nimport type { SimplifiedStatus } from \"ui-models/src/models/kafka\";\nimport { SimplifiedStatuses } from \"ui-models/src/models/kafka\";\nimport type { KafkaInstanceEnhanced } from \"../transformers/kafkaRequestToKafkaInstanceEnhanched\";\nimport type { KafkaInstancesSortableColumn } from \"../types\";\nimport { valuesToQuery } from \"./valuesToQuery\";\n\nconst uiColumnMapping: {\n  [key in KafkaInstancesSortableColumn]: keyof KafkaRequest;\n} = {\n  name: \"name\",\n  owner: \"owner\",\n  provider: \"cloud_provider\",\n  region: \"region\",\n  createdAt: \"created_at\",\n};\nexport type FetchKafkasParams = {\n  getKafkas: DefaultApi[\"getKafkas\"];\n  dataMapper: (data: KafkaRequest) => Promise<KafkaInstanceEnhanced>;\n  page: number;\n  perPage: number;\n  name: string[];\n  owner: string[];\n  status: SimplifiedStatus[];\n  sort: KafkaInstancesSortableColumn;\n  direction: \"asc\" | \"desc\";\n  clusterIds: string[] | undefined;\n  deployment: \"standard\" | \"clusters\";\n};\n\nexport async function fetchKafkas(params: FetchKafkasParams): Promise<{\n  instances: KafkaInstanceEnhanced[];\n  count: number;\n}> {\n  const {\n    name,\n    status,\n    owner,\n    sort,\n    direction,\n    page,\n    perPage,\n    clusterIds,\n    deployment,\n    dataMapper,\n    getKafkas,\n  } = params;\n  const search = filtersToSearch(name, owner, status, clusterIds, deployment);\n\n  const res = await getKafkas(\n    page.toString(10),\n    perPage.toString(10),\n    sort ? `${uiColumnMapping[sort]} ${direction}` : undefined,\n    search\n  );\n  const rawInstances = res.data.items;\n  const count = res.data.total;\n  const instances = await Promise.all(rawInstances.map(dataMapper));\n  return {\n    instances,\n    count,\n  };\n}\n\nexport function filtersToSearch(\n  name: string[],\n  owner: string[],\n  status: SimplifiedStatus[],\n  clusters: string[] | undefined,\n  deployment: \"standard\" | \"clusters\"\n): string {\n  const querystring = [\n    valuesToQuery(\"name\", name, \"%\", \"or\"),\n    valuesToQuery(\"owner\", owner, \"%\", \"or\"),\n    valuesToQuery(\n      \"status\",\n      status.flatMap((s) => SimplifiedStatuses[s]),\n      \"=\",\n      \"or\"\n    ),\n    clusters\n      ? valuesToQuery(\n          \"cluster_id\",\n          clusters,\n          deployment === \"standard\" ? \"<>\" : \"=\",\n          deployment === \"standard\" ? \"and\" : \"or\"\n        )\n      : null,\n  ]\n    .filter(Boolean)\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    .map((q) => `(${q!})`)\n    .join(\" and \");\n  return querystring;\n}\n","import type { Record, RecordsApi } from \"@rhoas/kafka-instance-sdk\";\nimport type { Message } from \"ui-models/src/models/message\";\nimport type { DateIsoString } from \"../../../ui-models/src/types\";\n\nexport type FetchMessagesParams = {\n  consumeRecords: RecordsApi[\"consumeRecords\"];\n  topicName: string;\n  partition?: number;\n  offset?: number;\n  timestamp?: DateIsoString;\n  limit: number;\n};\n\nexport async function fetchMessages({\n  topicName,\n  consumeRecords,\n  partition,\n  offset,\n  timestamp,\n  limit,\n}: FetchMessagesParams): Promise<Message[]> {\n  const response = await consumeRecords(\n    topicName,\n    undefined,\n    limit,\n    undefined,\n    offset,\n    partition,\n    timestamp\n  );\n  return response.data.items.map((m: Record) => ({\n    partition: m.partition,\n    offset: m.offset,\n    timestamp: m.timestamp as DateIsoString,\n    key: m.key,\n    value: m.value,\n    headers: m.headers || {},\n  }));\n}\n","import type { AppServicesApi } from \"@rhoas/account-management-sdk\";\n\nexport async function fetchOrganization(\n  api: AppServicesApi[\"apiAccountsMgmtV1CurrentAccountGet\"]\n) {\n  const account = await api();\n  const orgId = account?.data?.organization?.id;\n  return orgId;\n}\n","import type {\n  DefaultApi,\n  SupportedKafkaSize,\n} from \"@rhoas/kafka-management-sdk\";\nimport type { Plan, Size } from \"ui-models/src/models/kafka\";\nimport type { CloudProviderInfoWithRegionsCapacity } from \"./fetchProvidersWithRegions\";\n\nexport type SizeWithLimits = Size & { trialDurationHours: number };\n\nexport async function fetchProviderRegionSizes(\n  api: DefaultApi[\"getInstanceTypesByCloudProviderAndRegion\"],\n  providerInfo: CloudProviderInfoWithRegionsCapacity,\n  region: string,\n  instanceType: Plan\n) {\n  const regions = providerInfo.regions;\n  const regionInfo = regions.find((r) => r.id === region);\n  const availableSizes =\n    regionInfo?.capacity.flatMap((c) =>\n      c.available_sizes.map((s) => `${c.instance_type}.${s}`)\n    ) || [];\n  const sizes = await api(providerInfo.id, region);\n  if (!sizes?.data?.instance_types) {\n    throw new Error(`No instance_types from backend`);\n  }\n\n  const standardSizes =\n    sizes?.data?.instance_types.find((i) => i.id === instanceType)?.sizes || [];\n\n  return standardSizes.map(\n    apiSizeToComponentSize.bind(\n      undefined,\n      (id) => !availableSizes.includes(`${instanceType}.${id}`)\n    )\n  );\n}\n\n//\n// export async function fetchProviderRegionSizesForPlanStandard (\n//   api: DefaultApi['getInstanceTypesByCloudProviderAndRegion'], providerInfo: CloudProviderInfoWithRegionsCapacity, region: string\n// )  {\n//   return fetchProviderRegionSizes(api, providerInfo, region, \"standard\");\n// };\n//\n// export const fetchProviderRegionSizesForPlanDeveloper = (\n//   api: DefaultApi['getInstanceTypesByCloudProviderAndRegion'], providerInfo: CloudProviderInfoWithRegionsCapacity, region: string\n//\n// ) => {\n//   const { data: standardSizes, isError } = await fetchProviderRegionSizes(\n//     provider,\n//     region,\n//     \"standard\"\n//   );\n//   const { data: developerSizes } = fetchProviderRegionSizes(\n//     provider,\n//     region,\n//     \"developer\"\n//   );\n//   return useQuery({\n//     queryKey: [],\n//     queryFn: () => {\n//       return {\n//         standard:\n//           standardSizes ||\n//           ([\n//             { id: \"1\", displayName: \"1\" },\n//             { id: \"2\", displayName: \"2\" },\n//           ] as StandardSizes),\n//         trial: developerSizes![0],\n//       };\n//     },\n//     enabled: (!!standardSizes || isError) && !!developerSizes,\n//   });\n// };\n\nfunction apiSizeToComponentSize(\n  isDisabled: (id: string) => boolean,\n  apiSize: SupportedKafkaSize\n): SizeWithLimits {\n  const s = apiSize as Required<SupportedKafkaSize>;\n  return {\n    id: s.id,\n    displayName: s.display_name,\n    quota: s.quota_consumed,\n    ingress: (s.ingress_throughput_per_sec.bytes || 0) / 1048576,\n    egress: (s.egress_throughput_per_sec.bytes || 0) / 1048576,\n    storage: Math.round((s.max_data_retention_size.bytes || 0) / 1073741824),\n    connections: s.total_max_connections,\n    connectionRate: s.max_connection_attempts_per_sec,\n    maxPartitions: s.max_partitions,\n    messageSize: (s.max_message_size.bytes || 0) / 1048576,\n    status: s.maturity_status === \"stable\" ? \"stable\" : \"preview\",\n    trialDurationHours: s.lifespan_seconds ? s.lifespan_seconds / 60 / 60 : 0,\n    isDisabled: isDisabled(s.id),\n  };\n}\n","import type { DefaultApi } from \"@rhoas/kafka-management-sdk\";\nimport type { CloudProviderInfo } from \"ui\";\nimport type { CloudProvider, Plan } from \"ui-models/src/models/kafka\";\n\nexport type CloudProviderInfoWithRegionsCapacity = Omit<\n  CloudProviderInfo,\n  \"regions\"\n> & {\n  regions: Awaited<ReturnType<typeof fetchProviderRegions>>;\n};\n\nexport async function fetchProvidersWithRegions(\n  getCloudProviders: DefaultApi[\"getCloudProviders\"],\n  getCloudProviderRegions: DefaultApi[\"getCloudProviderRegions\"],\n  plan: Plan\n) {\n  const res = await getCloudProviders();\n  const allProviders = res?.data?.items || [];\n\n  const providers = (\n    await Promise.all(\n      allProviders\n        .filter((p) => p.enabled)\n        .map(async (provider) => {\n          const regions = await fetchProviderRegions(\n            getCloudProviderRegions,\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            provider.id!,\n            plan\n          );\n          const providerInfo: CloudProviderInfoWithRegionsCapacity = {\n            id: provider.id as CloudProvider,\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            displayName: provider.display_name!,\n            regions,\n          };\n          return regions.length > 0 ? providerInfo : null;\n        })\n    )\n  ).filter((p) => Boolean(p)) as CloudProviderInfoWithRegionsCapacity[];\n  if (providers.length === 0) {\n    throw new Error(\"No cloud providers with capacity found\");\n  }\n  const firstProvider = providers[0];\n  return { providers, defaultProvider: firstProvider?.id };\n}\n\nexport async function fetchProviderRegions(\n  getCloudProviderRegions: DefaultApi[\"getCloudProviderRegions\"],\n  provider: string,\n  instanceType: Plan\n) {\n  const res = await getCloudProviderRegions(provider);\n\n  if (!res?.data?.items) {\n    return Promise.reject(\"Invalid provider\");\n  }\n\n  const regionsForInstance = res.data.items.filter(\n    (region) =>\n      region.enabled &&\n      region.capacity.some((c) => c.instance_type === instanceType)\n  );\n\n  return regionsForInstance.map((r) => {\n    const max_capacity_reached = r.capacity?.some(\n      (c) => c.instance_type === instanceType && c.available_sizes?.length === 0\n    );\n\n    return {\n      id: r.id as CloudProvider,\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      displayName: r.display_name!,\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      isDisabled: max_capacity_reached,\n      capacity: r.capacity,\n    };\n  });\n}\n","import type { QuotaCost } from \"@rhoas/account-management-sdk\";\n\nexport const standardId = \"RHOSAK\" as const;\nexport const developerId = \"RHOSAKTrial\" as const;\nexport const resourceName = \"rhosak\" as const;\n\nexport function isStandardQuota(q: QuotaCost) {\n  return q.related_resources?.find((r) => r.billing_model === \"standard\");\n}\n\nexport function isMarketplaceQuota(q: QuotaCost) {\n  return q.related_resources?.find((r) => r.billing_model === \"marketplace\");\n}\n","import type { AppServicesApi } from \"@rhoas/account-management-sdk\";\nimport type {\n  MarketPlace,\n  MarketPlaceSubscriptions,\n} from \"ui-models/src/models/kafka\";\nimport {\n  developerId,\n  isMarketplaceQuota,\n  isStandardQuota,\n  resourceName,\n  standardId,\n} from \"../utilsAndConstants\";\n\nexport type StandardQuota = {\n  hasTrialQuota: boolean;\n  remainingPrepaidQuota: number | undefined;\n  remainingMarketplaceQuota: number | undefined;\n  marketplaceSubscriptions: MarketPlaceSubscriptions[];\n};\nexport const fetchStandardQuota = async (\n  api: AppServicesApi[\"apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet\"],\n  organizationId: string\n) => {\n  const quotaResponse = await api(\n    organizationId,\n    undefined,\n    true,\n    undefined,\n    true\n  );\n  if (quotaResponse.status !== 200) {\n    throw new Error(quotaResponse.statusText);\n  }\n  const standardQuotas = quotaResponse.data.items?.filter((q) =>\n    q.related_resources?.find(\n      (r) => r.resource_name === resourceName && r.product === standardId\n    )\n  );\n\n  const prepaidQuota = standardQuotas?.find(isStandardQuota);\n  const hasStandardQuota = prepaidQuota !== undefined;\n\n  const marketplaceQuotas = standardQuotas?.some(isMarketplaceQuota)\n    ? standardQuotas?.filter(isMarketplaceQuota)\n    : undefined;\n\n  const hasTrialQuota =\n    (prepaidQuota === undefined &&\n      marketplaceQuotas === undefined &&\n      quotaResponse.data.items?.some((q) =>\n        q.related_resources?.find(\n          (r) => r.resource_name === resourceName && r.product === developerId\n        )\n      )) ||\n    false;\n\n  const remainingPrepaidQuota = prepaidQuota\n    ? prepaidQuota.allowed - prepaidQuota.consumed\n    : undefined;\n  const remainingMarketplaceQuota = marketplaceQuotas\n    ? marketplaceQuotas.reduce((agg, q) => q.allowed - q.consumed + agg, 0)\n    : undefined;\n  const unaggregatedSubscriptions = marketplaceQuotas\n    ?.filter((q) => q.cloud_accounts !== undefined)\n    .flatMap((q) => q.cloud_accounts || []);\n  const subscriptionMarketplaces = Array.from(\n    new Set(\n      unaggregatedSubscriptions?.map((s) => s.cloud_provider_id as MarketPlace)\n    )\n  );\n  const marketplaceSubscriptions: MarketPlaceSubscriptions[] =\n    unaggregatedSubscriptions\n      ? subscriptionMarketplaces.map((marketplace) => ({\n          marketplace,\n          subscriptions: unaggregatedSubscriptions\n            .filter((s) => s.cloud_provider_id === marketplace)\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            .map((s) => s.cloud_account_id!),\n        }))\n      : [];\n\n  return {\n    hasStandardQuota,\n    hasTrialQuota,\n    remainingPrepaidQuota,\n    remainingMarketplaceQuota,\n    marketplaceSubscriptions,\n  };\n};\n","import type { Topic as ApiTopic } from \"@rhoas/kafka-instance-sdk/dist/generated/model/topic\";\nimport type { Plan } from \"ui-models/src/models/kafka\";\nimport type { Topic } from \"ui-models/src/models/topic\";\nimport type {\n  TopicConfig,\n  TopicConfigField,\n} from \"ui-models/src/models/topic-config\";\nimport type { Bytes, Milliseconds } from \"ui-models/src/types\";\n\nexport const developerDefaults: TopicConfig = {\n  \"cleanup.policy\": \"delete\",\n  \"delete.retention.ms\": { type: \"ms\", value: BigInt(\"86400000\") },\n  \"max.compaction.lag.ms\": { type: \"ms\", value: BigInt(\"9223372036854775807\") },\n  \"max.message.bytes\": { type: \"bytes\", value: BigInt(\"1048588\") },\n  \"message.downconversion.enable\": true,\n  \"message.timestamp.difference.max.ms\": {\n    type: \"ms\",\n    value: BigInt(\"9223372036854775807\"),\n  },\n  \"message.timestamp.type\": \"CreateTime\",\n  \"min.compaction.lag.ms\": { type: \"ms\", value: BigInt(\"0\") },\n  \"retention.bytes\": { type: \"bytes\", value: BigInt(\"-1\") },\n  \"retention.ms\": { type: \"ms\", value: BigInt(\"604800000\") },\n  \"segment.bytes\": { type: \"bytes\", value: BigInt(\"1073741824\") },\n  \"segment.ms\": { type: \"ms\", value: BigInt(\"604800000\") },\n  \"compression.type\": \"producer\",\n  \"file.delete.delay.ms\": { type: \"ms\", value: BigInt(\"60000\") },\n  \"flush.messages\": { type: \"ms\", value: BigInt(\"9223372036854775807\") },\n  \"flush.ms\": { type: \"ms\", value: BigInt(\"9223372036854775807\") },\n  \"index.interval.bytes\": { type: \"bytes\", value: BigInt(\"4096\") },\n  \"message.format.version\": \"3.0-IV1\",\n  \"min.cleanable.dirty.ratio\": 0.5,\n  \"min.insync.replicas\": 1,\n  \"segment.index.bytes\": { type: \"bytes\", value: BigInt(\"10485760\") },\n  \"segment.jitter.ms\": { type: \"ms\", value: BigInt(\"0\") },\n  \"unclean.leader.election.enable\": false,\n  preallocate: false,\n} as const;\n\nexport const standardDefaults: TopicConfig = {\n  \"cleanup.policy\": \"delete\",\n  \"delete.retention.ms\": { type: \"ms\", value: BigInt(\"86400000\") },\n  \"max.compaction.lag.ms\": { type: \"ms\", value: BigInt(\"9223372036854775807\") },\n  \"max.message.bytes\": { type: \"bytes\", value: BigInt(\"1048588\") },\n  \"message.downconversion.enable\": true,\n  \"message.timestamp.difference.max.ms\": {\n    type: \"ms\",\n    value: BigInt(\"9223372036854775807\"),\n  },\n  \"message.timestamp.type\": \"CreateTime\",\n  \"min.compaction.lag.ms\": { type: \"ms\", value: BigInt(\"0\") },\n  \"retention.bytes\": { type: \"bytes\", value: BigInt(\"-1\") },\n  \"retention.ms\": { type: \"ms\", value: BigInt(\"604800000\") },\n  \"segment.bytes\": { type: \"bytes\", value: BigInt(\"1073741824\") },\n  \"segment.ms\": { type: \"ms\", value: BigInt(\"604800000\") },\n  \"compression.type\": \"producer\",\n  \"file.delete.delay.ms\": { type: \"ms\", value: BigInt(\"60000\") },\n  \"flush.messages\": { type: \"ms\", value: BigInt(\"9223372036854775807\") },\n  \"flush.ms\": { type: \"ms\", value: BigInt(\"9223372036854775807\") },\n  \"index.interval.bytes\": { type: \"bytes\", value: BigInt(\"4096\") },\n  \"message.format.version\": \"3.0-IV1\",\n  \"min.cleanable.dirty.ratio\": 0.5,\n  \"min.insync.replicas\": 2,\n  \"segment.index.bytes\": { type: \"bytes\", value: BigInt(\"10485760\") },\n  \"segment.jitter.ms\": { type: \"ms\", value: BigInt(\"0\") },\n  \"unclean.leader.election.enable\": false,\n  preallocate: false,\n} as const;\n\nexport function topicTransformerFactory(plan: Plan) {\n  const d = plan === \"developer\" ? developerDefaults : standardDefaults;\n\n  return function topicTransformer(t: ApiTopic): Topic {\n    if (!t.name) {\n      throw new Error(`Invalid topic, name is empty: ${JSON.stringify(t)}`);\n    }\n    const cm = Object.fromEntries<string>(\n      t.config?.map((c) => [c.key as TopicConfigField, c.value]) || []\n    );\n    const config: TopicConfig = {\n      \"cleanup.policy\": cm[\"cleanup.policy\"] as TopicConfig[\"cleanup.policy\"],\n      \"delete.retention.ms\": configValueToMilliseconds(\n        cm[\"delete.retention.ms\"],\n        d[\"delete.retention.ms\"]\n      ),\n      \"max.compaction.lag.ms\": configValueToMilliseconds(\n        cm[\"max.compaction.lag.ms\"],\n        d[\"max.compaction.lag.ms\"]\n      ),\n      \"max.message.bytes\": configValueToBytes(\n        cm[\"max.message.bytes\"],\n        d[\"max.message.bytes\"]\n      ),\n      \"message.downconversion.enable\": configValueToBoolean(\n        cm[\"message.downconversion.enable\"],\n        d[\"message.downconversion.enable\"]\n      ),\n      \"message.timestamp.difference.max.ms\": configValueToMilliseconds(\n        cm[\"message.timestamp.difference.max.ms\"],\n        d[\"message.timestamp.difference.max.ms\"]\n      ),\n      \"message.timestamp.type\": cm[\n        \"message.timestamp.type\"\n      ] as TopicConfig[\"message.timestamp.type\"],\n      \"min.compaction.lag.ms\": configValueToMilliseconds(\n        cm[\"min.compaction.lag.ms\"],\n        d[\"min.compaction.lag.ms\"]\n      ),\n      \"retention.bytes\": configValueToBytes(\n        cm[\"retention.bytes\"],\n        d[\"retention.bytes\"]\n      ),\n      \"retention.ms\": configValueToMilliseconds(\n        cm[\"retention.ms\"],\n        d[\"retention.ms\"]\n      ),\n      \"segment.bytes\": configValueToBytes(\n        cm[\"segment.bytes\"],\n        d[\"segment.bytes\"]\n      ),\n      \"segment.ms\": configValueToMilliseconds(\n        cm[\"segment.ms\"],\n        d[\"segment.ms\"]\n      ),\n      \"compression.type\": cm[\n        \"compression.type\"\n      ] as TopicConfig[\"compression.type\"],\n      \"file.delete.delay.ms\": configValueToMilliseconds(\n        cm[\"file.delete.delay.ms\"],\n        d[\"file.delete.delay.ms\"]\n      ),\n      \"flush.messages\": configValueToMilliseconds(\n        cm[\"flush.messages\"],\n        d[\"flush.messages\"]\n      ),\n      \"flush.ms\": configValueToMilliseconds(cm[\"flush.ms\"], d[\"flush.ms\"]),\n      \"follower.replication.throttled.replicas\":\n        cm[\"follower.replication.throttled.replicas\"],\n      \"index.interval.bytes\": configValueToBytes(\n        cm[\"index.interval.bytes\"],\n        d[\"index.interval.bytes\"]\n      ),\n      \"leader.replication.throttled.replicas\":\n        cm[\"leader.replication.throttled.replicas\"],\n      \"message.format.version\": cm[\"message.format.version\"],\n      \"min.cleanable.dirty.ratio\": configValueToNumber(\n        cm[\"min.cleanable.dirty.ratio\"],\n        d[\"min.cleanable.dirty.ratio\"]\n      ),\n      \"min.insync.replicas\": configValueToNumber(\n        cm[\"min.insync.replicas\"],\n        d[\"min.insync.replicas\"]\n      ),\n      \"segment.index.bytes\": configValueToBytes(\n        cm[\"segment.index.bytes\"],\n        d[\"segment.index.bytes\"]\n      ),\n      \"segment.jitter.ms\": configValueToMilliseconds(\n        cm[\"segment.jitter.ms\"],\n        d[\"segment.jitter.ms\"]\n      ),\n      \"unclean.leader.election.enable\": configValueToBoolean(\n        cm[\"unclean.leader.election.enable\"],\n        d[\"unclean.leader.election.enable\"]\n      ),\n      preallocate: configValueToBoolean(cm[\"preallocate\"], d[\"preallocate\"]),\n    };\n    return {\n      name: t.name,\n      partitions: t.partitions || [],\n      ...config,\n    };\n  };\n}\n\nfunction configValueToMilliseconds(\n  value: string,\n  defaultIfEmpty: Milliseconds\n): Milliseconds {\n  return value && value.trim().length > 0\n    ? { type: \"ms\", value: BigInt(value.trim()) }\n    : defaultIfEmpty;\n}\n\nfunction configValueToBytes(value: string, defaultIfEmpty: Bytes): Bytes {\n  return value && value.trim().length > 0\n    ? { type: \"bytes\", value: BigInt(value.trim()) }\n    : defaultIfEmpty;\n}\n\nfunction configValueToNumber(value: string, defaultIfError: number): number {\n  return parseInt(value, 10) || defaultIfError;\n}\n\nfunction configValueToBoolean(value: string, defaultIfError: boolean): boolean {\n  try {\n    const v: unknown = JSON.parse(value);\n    if (typeof v === \"boolean\") {\n      return v;\n    }\n  } catch {\n    // not a boolean, fallback to the default\n  }\n  return defaultIfError;\n}\n","import type { TopicsApi } from \"@rhoas/kafka-instance-sdk\";\nimport type { Plan } from \"ui-models/src/models/kafka\";\nimport type { Topic } from \"ui-models/src/models/topic\";\nimport { topicTransformerFactory } from \"../transformers/topicTransformer\";\n\nexport type FetchTopicParams = {\n  getTopic: TopicsApi[\"getTopic\"];\n  topicName: string;\n  plan: Plan;\n};\n\nexport async function fetchTopic({\n  getTopic,\n  topicName,\n  plan,\n}: FetchTopicParams): Promise<Topic> {\n  const response = await getTopic(topicName);\n  return topicTransformerFactory(plan)(response.data);\n}\n","import type { SortDirection, TopicsApi } from \"@rhoas/kafka-instance-sdk\";\nimport type { Plan } from \"ui-models/src/models/kafka\";\nimport type { Topic } from \"ui-models/src/models/topic\";\nimport { topicTransformerFactory } from \"../transformers/topicTransformer\";\nimport type { KafkaTopicsSortableColumn } from \"../types\";\n\nexport type FetchTopicsParams = {\n  getTopics: TopicsApi[\"getTopics\"];\n  page?: number;\n  perPage?: number;\n  sort?: KafkaTopicsSortableColumn;\n  direction?: SortDirection;\n  filter?: string;\n  plan: Plan;\n};\n\nexport async function fetchTopics({\n  getTopics,\n  page,\n  perPage,\n  filter,\n  sort,\n  direction,\n  plan,\n}: FetchTopicsParams): Promise<{ topics: Topic[]; count: number }> {\n  const response = await getTopics(\n    undefined,\n    undefined,\n    perPage,\n    filter,\n    page,\n    direction,\n    sort\n  );\n  const topics = (response.data.items || []).map<Topic>(\n    topicTransformerFactory(plan)\n  );\n  const count = response.data.total;\n  return { count, topics };\n}\n","import type { DefaultApi } from \"@rhoas/kafka-management-sdk\";\nimport type {\n  GetTopicsMetricsResponse,\n  PartitionBytesMetric,\n  TimeSeriesMetrics,\n} from \"ui\";\nimport type { SafeRangeQuery } from \"../types\";\n\nexport type FetchTopicsMetricsProps = {\n  getMetricsByRangeQuery: DefaultApi[\"getMetricsByRangeQuery\"];\n  id: string;\n  duration: number;\n  interval: number;\n  selectedTopic: string | undefined;\n};\n\nexport async function fetchTopicsMetrics({\n  getMetricsByRangeQuery,\n  id,\n  duration,\n  interval,\n  selectedTopic,\n}: FetchTopicsMetricsProps): Promise<\n  Omit<GetTopicsMetricsResponse, \"kafkaTopics\">\n> {\n  const response = await getMetricsByRangeQuery(id, duration, interval, [\n    \"kafka_topic:kafka_server_brokertopicmetrics_bytes_in_total:rate5m\",\n    \"kafka_topic:kafka_server_brokertopicmetrics_bytes_out_total:rate5m\",\n    \"kafka_topic:kafka_log_log_size:sum\",\n    \"kafka_topic:kafka_server_brokertopicmetrics_messages_in_total:rate5m\",\n  ]);\n\n  // Remove all results with no data. Not sure this can really  happen but since\n  // the types allow for undefined we need to do a bit of defensive programming.\n  const safeMetrics: SafeRangeQuery[] = (response.data.items || []).filter(\n    (m) =>\n      // defensive programming\n      !(m.values && m.metric && m.metric.topic && m.metric.name)\n  ) as SafeRangeQuery[];\n\n  // Also filter for metrics about the selectedTopic, if specified\n  const filteredMetrics = safeMetrics.filter((m) =>\n    // filter for metrics for the selectedTopic, if needed\n    selectedTopic !== undefined ? m.metric?.topic === selectedTopic : true\n  );\n\n  // get the unique topics we have metrics for in the selected time range\n  const topics = Array.from(new Set(safeMetrics.map((m) => m.metric.topic)));\n\n  const bytesIncoming: TimeSeriesMetrics = {};\n  const bytesOutgoing: TimeSeriesMetrics = {};\n  const bytesPerPartition: PartitionBytesMetric = {};\n  const incomingMessageRate: TimeSeriesMetrics = {};\n\n  filteredMetrics.forEach((m) => {\n    const { __name__: name, topic } = m.metric;\n\n    function addAggregatedTotalBytesTo(metric: TimeSeriesMetrics) {\n      m.values.forEach(\n        ({ value, timestamp }) =>\n          (metric[timestamp] = value + (metric[timestamp] || 0))\n      );\n    }\n\n    function addAggregatePartitionBytes() {\n      const partition = bytesPerPartition[topic] || {};\n      m.values.forEach(\n        ({ value, timestamp }) =>\n          (partition[timestamp] = value + (partition[timestamp] || 0))\n      );\n      bytesPerPartition[topic] = partition;\n    }\n\n    switch (name) {\n      case \"kafka_topic:kafka_server_brokertopicmetrics_bytes_in_total:rate5m\":\n        addAggregatedTotalBytesTo(bytesIncoming);\n        break;\n      case \"kafka_topic:kafka_server_brokertopicmetrics_bytes_out_total:rate5m\":\n        addAggregatedTotalBytesTo(bytesOutgoing);\n        break;\n      case \"kafka_topic:kafka_log_log_size:sum\":\n        addAggregatePartitionBytes();\n        break;\n      case \"kafka_topic:kafka_server_brokertopicmetrics_messages_in_total:rate5m\":\n        addAggregatedTotalBytesTo(incomingMessageRate);\n        break;\n    }\n  });\n\n  return {\n    metricsTopics: topics,\n    bytesOutgoing,\n    bytesIncoming,\n    bytesPerPartition,\n    incomingMessageRate,\n  };\n}\n","import type {\n  Principal,\n  PrincipalApi,\n} from \"@redhat-cloud-services/rbac-client\";\nimport type { UserAccount } from \"ui-models/src/models/user-account\";\n\nexport type FetchUserAccountsParams = {\n  getUserAccounts: PrincipalApi[\"listPrincipals\"];\n};\n\nexport async function fetchUserAccounts({\n  getUserAccounts,\n}: FetchUserAccountsParams): Promise<{\n  accounts: UserAccount[];\n  count: number;\n}> {\n  const response = await getUserAccounts(-1);\n  const accounts = response.data.data.map<UserAccount>((p) => {\n    const fullObject = p as Principal;\n    return {\n      username: fullObject.username,\n      displayName: `${fullObject.first_name || \"\"} ${\n        fullObject.last_name || \"\"\n      }`.trim(),\n      email: fullObject.email,\n      isOrgAdmin: fullObject.is_org_admin || false,\n    };\n  });\n  const count = accounts.length;\n  return { count, accounts };\n}\n","import type {\n  FetchConsumerGroupParams,\n  FetchConsumerGroupsParams,\n  FetchKafkaMetricsProps,\n  FetchKafkasParams,\n  FetchMessagesParams,\n  FetchTopicParams,\n  FetchTopicsMetricsProps,\n  FetchTopicsParams,\n  FetchUserAccountsParams,\n} from \"./fetchers\";\n\nexport const masQueries = {\n  _root: () => ({ scope: \"mas\" } as const),\n  organization: () =>\n    [{ ...masQueries._root(), entity: \"organization\" }] as const,\n  userAccounts: (params: Omit<FetchUserAccountsParams, \"getUserAccounts\">) =>\n    [{ ...masQueries._root(), entity: \"userAccounts\" }, params] as const,\n  quota: {\n    _root: () => ({ ...masQueries._root(), entity: \"quota\" } as const),\n    available: () =>\n      [{ ...masQueries.quota._root(), subentity: \"available\" }] as const,\n    developerAvailability: () =>\n      [\n        { ...masQueries.quota._root(), subentity: \"developerAvailability\" },\n      ] as const,\n    standardAvailability: () =>\n      [\n        { ...masQueries.quota._root(), subentity: \"standardAvailability\" },\n      ] as const,\n  },\n  dedicatedClusters: () =>\n    [{ ...masQueries._root(), subentity: \"dedicatedClusters\" }] as const,\n} as const;\n\nexport const kafkaQueries = {\n  _root: () => ({ scope: \"kafka\" } as const),\n  list: (params: Omit<FetchKafkasParams, \"dataMapper\" | \"getKafkas\">) =>\n    [\n      {\n        ...kafkaQueries._root(),\n        entity: \"list\",\n      },\n      params,\n    ] as const,\n  instance: {\n    _root: ({ id, adminUrl }: { id?: string; adminUrl?: string }) =>\n      ({ ...kafkaQueries._root(), entity: \"instance\", id, adminUrl } as const),\n    details: (params: { id?: string }) =>\n      [\n        { ...kafkaQueries.instance._root(params), subentity: \"details\" },\n      ] as const,\n    topics: ({\n      id,\n      adminUrl,\n      ...params\n    }: { id?: string; adminUrl?: string } & Omit<\n      FetchTopicsParams,\n      \"getTopics\"\n    >) =>\n      [\n        {\n          ...kafkaQueries.instance._root({ id, adminUrl }),\n          subentity: \"topics\",\n        },\n        params,\n      ] as const,\n    topic: ({\n      id,\n      adminUrl,\n      topicName,\n    }: { id?: string; adminUrl?: string } & Omit<\n      FetchTopicParams,\n      \"getTopic\"\n    >) =>\n      [\n        {\n          ...kafkaQueries.instance._root({ id, adminUrl }),\n          subentity: \"topic\",\n        },\n        { topicName },\n      ] as const,\n    topicMessages: ({\n      id,\n      adminUrl,\n      topicName,\n      ...params\n    }: { id?: string; adminUrl?: string } & Omit<\n      FetchMessagesParams,\n      \"consumeRecords\"\n    >) =>\n      [\n        {\n          ...kafkaQueries.instance._root({ id, adminUrl }),\n          subentity: \"topicMessages\",\n        },\n        { topicName, ...params },\n      ] as const,\n    consumerGroups: (\n      params: { id?: string; adminUrl?: string } & Omit<\n        FetchConsumerGroupsParams,\n        \"getConsumerGroups\"\n      >\n    ) =>\n      [\n        {\n          ...kafkaQueries.instance._root(params),\n          subentity: \"consumer-groups\",\n        },\n        params,\n      ] as const,\n    consumerGroup: ({\n      id,\n      adminUrl,\n      consumerGroupId,\n    }: { id?: string; adminUrl?: string } & Omit<\n      FetchConsumerGroupParams,\n      \"getConsumerGroupById\"\n    >) =>\n      [\n        {\n          ...kafkaQueries.instance._root({ id, adminUrl }),\n          subentity: \"consumerGroup\",\n        },\n        { consumerGroupId },\n      ] as const,\n    metrics: {\n      _root: ({ id }: { id: string }) =>\n        ({\n          ...kafkaQueries.instance._root({ id }),\n          subentity: \"metrics\",\n          id,\n        } as const),\n      kpi: (params: { id: string }) =>\n        [{ ...kafkaQueries.instance._root(params), type: \"kpi\" }] as const,\n      instance: ({\n        id,\n        ...params\n      }: Omit<FetchKafkaMetricsProps, \"getMetricsByRangeQuery\">) =>\n        [\n          {\n            ...kafkaQueries.instance._root({ id }),\n            type: \"instance\",\n          },\n          params,\n        ] as const,\n      topic: ({\n        id,\n        ...params\n      }: Omit<FetchTopicsMetricsProps, \"getMetricsByRangeQuery\">) =>\n        [\n          {\n            ...kafkaQueries.instance._root({ id }),\n            type: \"topic\",\n          },\n          params,\n        ] as const,\n    },\n  },\n} as const;\n\nexport const providerQueries = {\n  _root: () => ({ scope: \"providers\" }),\n  list: (params: { plan?: string }) =>\n    [{ ...providerQueries._root(), entity: \"list\", ...params }] as const,\n  limits: {\n    _root: ({ provider }: { provider?: string }) =>\n      ({\n        ...providerQueries._root(),\n        entity: \"limits\",\n        provider,\n      } as const),\n    standard: ({ provider, region }: { provider?: string; region: string }) => [\n      {\n        ...providerQueries.limits._root({ provider }),\n        plan: \"standard\",\n        region,\n      },\n    ],\n    developer: ({\n      provider,\n      region,\n    }: {\n      provider?: string;\n      region: string;\n    }) => [\n      {\n        ...providerQueries.limits._root({ provider }),\n        plan: \"developer\",\n        region,\n      },\n    ],\n  },\n} as const;\n","import { PrincipalApi } from \"@redhat-cloud-services/rbac-client\";\nimport { AppServicesApi } from \"@rhoas/account-management-sdk\";\nimport { GroupsApi, RecordsApi, TopicsApi } from \"@rhoas/kafka-instance-sdk\";\nimport {\n  Configuration,\n  DefaultApi,\n  EnterpriseDataplaneClustersApi,\n} from \"@rhoas/kafka-management-sdk\";\nimport { useCallback } from \"react\";\nimport { useApiConfiguration } from \"./ApiProvider\";\n\nexport const useApi = () => {\n  const { basePath, accessToken } = useApiConfiguration();\n\n  const kafkasFleet = useCallback(\n    () =>\n      new DefaultApi(\n        new Configuration({\n          accessToken,\n          basePath,\n        })\n      ),\n    [accessToken, basePath]\n  );\n\n  const userAccounts = useCallback(async () => {\n    const token = await accessToken();\n    return new PrincipalApi({\n      accessToken: token,\n      basePath: `/api/rbac/v1`,\n    });\n  }, [accessToken]);\n\n  const account = useCallback(\n    () =>\n      new AppServicesApi(\n        new Configuration({\n          accessToken,\n          basePath,\n        })\n      ),\n    [accessToken, basePath]\n  );\n\n  const topics = useCallback(\n    (adminUrl: string) =>\n      new TopicsApi(\n        new Configuration({\n          accessToken,\n          basePath: adminUrl,\n        })\n      ),\n    [accessToken]\n  );\n\n  const consumerGroups = useCallback(\n    (adminUrl: string) =>\n      new GroupsApi(\n        new Configuration({\n          accessToken,\n          basePath: adminUrl,\n        })\n      ),\n    [accessToken]\n  );\n\n  const records = useCallback(\n    (adminUrl: string) =>\n      new RecordsApi(\n        new Configuration({\n          accessToken,\n          basePath: adminUrl,\n        })\n      ),\n    [accessToken]\n  );\n\n  const dedicatedClusters = useCallback(\n    () =>\n      new EnterpriseDataplaneClustersApi(\n        new Configuration({\n          accessToken,\n          basePath,\n        })\n      ),\n    [accessToken, basePath]\n  );\n\n  return {\n    kafkasFleet,\n    account,\n    topics,\n    consumerGroups,\n    records,\n    userAccounts,\n    dedicatedClusters,\n  };\n};\n","const REACT_QUERY_DEVTOOLS = \"mas.devtools\";\nconst METRICS_LAG_ALERT = \"mas.rhosak.metrics.lag-alert-closed\";\n\nexport function isReactQueryDevToolsEanbled() {\n  return localStorage.getItem(REACT_QUERY_DEVTOOLS) === \"true\";\n}\n\nexport function metricsIsLagAlertsDismissed() {\n  return localStorage.getItem(METRICS_LAG_ALERT) === \"true\";\n}\n\nexport function metricsDismissLagAlerts() {\n  return localStorage.setItem(METRICS_LAG_ALERT, \"true\");\n}\n","import type { Bytes, DateIsoString } from \"../types\";\n\n/**\n * All the details abut a Kafka instance.\n *\n * Unless differently specified, the values marked as accepting `undefined`\n * will come from extra API calls.\n */\nexport type Kafka = {\n  id: string;\n  name: string;\n  createdAt: DateIsoString;\n  updatedAt: DateIsoString;\n  expiryDate: DateIsoString | undefined;\n  owner: string;\n  provider: CloudProvider;\n  region: CloudRegion;\n  status: Status;\n  plan: Plan;\n  size: string | undefined;\n  ingress: number | undefined;\n  egress: number | undefined;\n  storage: Bytes | undefined;\n  maxPartitions: number | undefined;\n  connections: number | undefined;\n  connectionRate: number | undefined;\n  messageSize: Bytes | undefined;\n  billing: \"prepaid\" | MarketplaceSubscription | undefined;\n\n  version: string;\n\n  bootstrapUrl: string | undefined;\n  adminUrl: string | undefined;\n};\nexport type KafkaField = keyof Kafka;\n\n/**\n * Supported Cloud Providers. Extend this to add a new provider, then follow\n * Typescript errors to find where extra information need to be added (images,\n * translations).\n */\nexport type CloudProvider = \"aws\" | \"gcp\" | \"azure\";\n\n/**\n * A Cloud Region. Since this varies between Cloud Providers and has no extra\n * visual attached, we take its name from the API and do no further\n * transformation.\n */\nexport type CloudRegion = string;\n/**\n * Cloud provider multi availability zone\n */\nexport type AZ = \"single\" | \"multi\";\n/**\n * A number that describes how much does an instance cost to create\n */\nexport type Quota = number;\n/**\n * The capabilities of an instance, and its quota cost. Some sizes might not be\n * enabled, eg. because temporarily out of capacity\n */\nexport type Size = {\n  id: string;\n  displayName: string;\n  status: \"stable\" | \"preview\";\n  quota: Quota;\n  ingress: number;\n  egress: number;\n  storage: number;\n  connections: number;\n  connectionRate: number;\n  maxPartitions: number;\n  messageSize: number;\n  isDisabled: boolean;\n};\n/**\n * Paid for instances are `standard`, evaluation instances are `developer`.\n * `standard` instances have a `Quota` associated, and bigger sizes.\n * `developer` instances are free to be created (up to 1 per user), have a\n * single, smaller size option than `standard` ones, and they expire after a\n * few hours.\n *\n * Note: a new kind of evaluation instance is being studied. They will have a\n * long expiration period and bigger sizes.\n */\nexport type Plan = \"standard\" | \"developer\";\n/**\n * All the statuses an instance can be. If new statuses are added, ensure to\n * add them to the relevant status group (`ReadyStatuses` etc.).\n */\nexport const Statuses = [\n  \"ready\",\n  \"degraded\",\n  \"accepted\",\n  \"provisioning\",\n  \"preparing\",\n  \"deprovision\",\n  \"deleting\",\n  \"suspended\",\n  \"suspending\",\n  \"resuming\",\n] as const;\n\nexport type Status = typeof Statuses[number];\n\nexport const CreatingStatuses: readonly Status[] = [\n  \"accepted\",\n  \"provisioning\",\n  \"preparing\",\n];\nexport const ReadyStatuses: readonly Status[] = [\"ready\"];\nexport const DegradedStatuses: readonly Status[] = [\"degraded\"];\nexport const SuspendingStatuses: readonly Status[] = [\"suspending\"];\nexport const SuspendedStatuses: readonly Status[] = [\"suspended\"];\nexport const DeletingStatuses: readonly Status[] = [\"deleting\", \"deprovision\"];\nexport const ResumingStatuses: readonly Status[] = [\"resuming\"];\n\nexport const SimplifiedStatuses = {\n  creating: CreatingStatuses,\n  ready: ReadyStatuses,\n  degraded: DegradedStatuses,\n  suspended: SuspendedStatuses,\n  deleting: DeletingStatuses,\n  resuming: ResumingStatuses,\n  suspending: SuspendingStatuses,\n} as const;\nexport type SimplifiedStatus = keyof typeof SimplifiedStatuses;\n\n/**\n * A list of marketplaces where an instance can be billed to\n */\nexport type MarketPlace = CloudProvider | \"rhm\";\n/**\n * List of marketplaces where a user has some subscription\n */\nexport type MarketPlaceSubscriptions = {\n  marketplace: MarketPlace;\n  subscriptions: string[];\n};\n/**\n * A specific marketplace's subscription, assigned as billing option to an\n * instance.\n *\n * Note: the API will provide only the `subscription`; the `MarketPlace` will\n * have to be fetched querying for the `subscription`.\n */\nexport type MarketplaceSubscription = {\n  marketplace: MarketPlace;\n  subscription: string;\n};\n","import type { SelectProps } from \"@patternfly/react-core\";\nimport { Select, SelectOption, SelectVariant } from \"@patternfly/react-core\";\nimport type { FC } from \"react\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport type { OwnerAccount } from \"./types\";\n\nexport type SelectOwnerProps = {\n  isDisabled: boolean;\n  accounts: OwnerAccount[];\n  owner: string | undefined;\n  onChangeOwner: (owner: string | undefined) => void;\n};\n\nexport const SelectOwner: FC<SelectOwnerProps> = ({\n  isDisabled,\n  accounts,\n  owner,\n  onChangeOwner,\n}) => {\n  const { t } = useTranslation(\"kafka\");\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  const onToggle = (isExpanded: boolean) => {\n    setIsOpen(isExpanded);\n  };\n\n  const onSelect: SelectProps[\"onSelect\"] = (_, owner) => {\n    onChangeOwner(owner as string);\n    setIsOpen(false);\n  };\n\n  function selectOptions(filter = \"\") {\n    const filterRegExp = new RegExp(filter, \"i\");\n    const filteredAccounts =\n      filter !== \"\"\n        ? accounts.filter(\n            (account) =>\n              filterRegExp.test(account.displayName) ||\n              filterRegExp.test(account.id)\n          )\n        : accounts;\n    return filteredAccounts.map((account) => (\n      <SelectOption\n        key={account.id}\n        value={account.id}\n        description={account.displayName}\n      >\n        {account.id}\n      </SelectOption>\n    ));\n  }\n\n  return (\n    <Select\n      id=\"change-permission-owner-select\"\n      variant={SelectVariant.typeahead}\n      onToggle={onToggle}\n      isDisabled={isDisabled}\n      isOpen={isOpen}\n      placeholderText={t(\"select_user_account\")}\n      isCreatable={true}\n      createText={t(\"change_owner_create_text\")}\n      menuAppendTo=\"parent\"\n      maxHeight={400}\n      selections={owner}\n      onSelect={onSelect}\n      onFilter={(_, value) => selectOptions(value)}\n    >\n      {selectOptions()}\n    </Select>\n  );\n};\n","import {\n  Alert,\n  AlertVariant,\n  Button,\n  Form,\n  FormGroup,\n  Modal,\n  Skeleton,\n} from \"@patternfly/react-core\";\nimport type { FunctionComponent } from \"react\";\nimport { useCallback, useRef, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { SelectOwner } from \"./SelectOwner\";\nimport type { ChangeOwnerErrorMessage, OwnerAccount } from \"./types\";\n\nexport type ChangeKafkaOwnerProps = {\n  currentOwner: string;\n  accounts: OwnerAccount[] | undefined;\n  savingState: \"idle\" | \"saving\" | ChangeOwnerErrorMessage;\n  onConfirm: (newOwner: string) => void;\n  onCancel: () => void;\n};\n\nexport const ChangeKafkaOwner: FunctionComponent<ChangeKafkaOwnerProps> = ({\n  currentOwner,\n  accounts,\n  savingState,\n  onConfirm,\n  onCancel,\n}) => {\n  const { t } = useTranslation([\"kafka\", \"common\"]);\n  const [account, setAccount] = useState<string | undefined>();\n  const submittedAccount = useRef<string>();\n\n  const isSaving = savingState === \"saving\";\n\n  const onConfirmOwner = useCallback(() => {\n    if (account) {\n      submittedAccount.current = account;\n      onConfirm(account);\n    }\n  }, [onConfirm, account]);\n\n  const renderAlert = () => {\n    switch (savingState) {\n      case \"invalid-user\":\n        return (\n          <Alert\n            variant={AlertVariant.danger}\n            aria-live=\"polite\"\n            isInline\n            title={t(\"new_owner_does_not_exist_title\")}\n          >\n            {t(\"new_owner_does_not_exist_message\", {\n              newOwner: submittedAccount.current,\n            })}\n          </Alert>\n        );\n      case \"unknown-error\":\n        return (\n          <Alert\n            variant={AlertVariant.danger}\n            aria-live=\"polite\"\n            isInline\n            title={t(\"can_not_change_owner_title\")}\n          >\n            {t(\"owner_transfer_failed_message\", {\n              name: currentOwner,\n            })}\n          </Alert>\n        );\n    }\n  };\n  return (\n    <Modal\n      id=\"change-owner-modal\"\n      title={t(\"change-owner-title\")}\n      isOpen={true}\n      onClose={onCancel}\n      variant={\"medium\"}\n      position=\"top\"\n      actions={[\n        <Button\n          id=\"confirm-button\"\n          key=\"changeowner\"\n          variant=\"primary\"\n          isDisabled={isSaving}\n          onClick={onConfirmOwner}\n        >\n          {t(\"change-owner-button\")}\n        </Button>,\n        <Button\n          id=\"cancel-button\"\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={onCancel}\n          isDisabled={isSaving}\n        >\n          {t(\"common:cancel\")}\n        </Button>,\n      ]}\n    >\n      <Form onSubmit={(e) => e?.preventDefault()}>\n        {renderAlert()}\n        <FormGroup fieldId=\"Current-owner-name\" label={t(\"current_owner\")}>\n          {currentOwner}\n        </FormGroup>\n        <FormGroup fieldId=\"New-owner-name\" label={t(\"new_owner\")}>\n          {accounts ? (\n            <SelectOwner\n              isDisabled={isSaving}\n              accounts={accounts}\n              owner={account}\n              onChangeOwner={setAccount}\n            />\n          ) : (\n            <Skeleton width={\"100%\"} />\n          )}\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n};\n","import { Popover } from \"@patternfly/react-core\";\nimport { OutlinedQuestionCircleIcon } from \"@patternfly/react-icons\";\nimport type { FunctionComponent } from \"react\";\n\ntype ConsumerGroupPopoverProps = {\n  title: string;\n  description: string;\n};\n\nexport const ConsumerGroupPopover: FunctionComponent<\n  ConsumerGroupPopoverProps\n> = ({ title, description }) => {\n  return (\n    <Popover\n      aria-label=\"Consumer groups popover\"\n      headerContent={<div>{title}</div>}\n      bodyContent={<div>{description}</div>}\n    >\n      <OutlinedQuestionCircleIcon />\n    </Popover>\n  );\n};\n","import type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport type { State } from \"ui-models/src/models/consumer-group\";\n\nexport type ConsumerGroupStateLabelProps = {\n  state: State;\n};\n\nexport const ConsumerGroupStateLabel: FunctionComponent<\n  ConsumerGroupStateLabelProps\n> = ({ state }) => {\n  const { t } = useTranslation([\"kafka\"]);\n\n  switch (state) {\n    case \"Stable\":\n      return t(\"consumerGroup.state.stable\");\n    case \"Empty\":\n      return t(\"consumerGroup.state.empty\");\n    case \"Dead\":\n      return t(\"consumerGroup.state.dead\");\n    case \"CompletingRebalance\":\n      return t(\"consumerGroup.state.completing_rebalance\");\n    case \"PreparingRebalance\":\n      return t(\"consumerGroup.state.preparing_rebalance\");\n    case \"Unknown\":\n      return t(\"consumerGroup.state.unknown\");\n    default:\n      return null;\n  }\n};\n","import {\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Stack,\n} from \"@patternfly/react-core\";\nimport {\n  TableComposable,\n  TableVariant,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport type { Consumer, State } from \"ui-models/src/models/consumer-group\";\nimport { ConsumerGroupPopover } from \"./ConsumerGroupPopover\";\nimport { ConsumerGroupStateLabel } from \"./ConsumerGroupState\";\n\nexport type ConsumerGroupByKafkaProps = {\n  state: State;\n  consumers: Consumer[];\n  activeMembers: number;\n  partitionsWithLag: number;\n};\n\nexport const ConsumerGroupByKafka: FunctionComponent<\n  ConsumerGroupByKafkaProps\n> = ({ state, consumers, activeMembers, partitionsWithLag }) => {\n  const { t } = useTranslation([\"kafka\"]);\n\n  const columnNames = {\n    topic: t(\"topic.topic\"),\n    partition: t(\"consumerGroup.partition\"),\n    consumer_id: t(\"consumerGroup.consumer_id\"),\n    current_offset: t(\"consumerGroup.current_offset\"),\n    log_end_offset: t(\"consumerGroup.log_end_offset\"),\n    offset_lag: t(\"consumerGroup.offset_lag\"),\n  };\n\n  return (\n    <Stack hasGutter>\n      <DescriptionList\n        columnModifier={{ lg: \"3Col\" }}\n        className={\"pf-m-display-2xl\"}\n      >\n        <DescriptionListGroup>\n          <DescriptionListTerm>\n            {t(\"consumerGroup.active_members\")}\n          </DescriptionListTerm>\n          <DescriptionListDescription>\n            {activeMembers}\n          </DescriptionListDescription>\n        </DescriptionListGroup>\n        <DescriptionListGroup>\n          <DescriptionListTerm>\n            {t(\"consumerGroup.partitions_with_lag\")}{\" \"}\n            <ConsumerGroupPopover\n              title={t(\"consumerGroup.partitions_with_lag_name\")}\n              description={t(\"consumerGroup.partitions_with_lag_description\")}\n            />\n          </DescriptionListTerm>\n          <DescriptionListDescription>\n            {partitionsWithLag}\n          </DescriptionListDescription>\n        </DescriptionListGroup>\n        <DescriptionListGroup>\n          <DescriptionListTerm>\n            {t(\"consumerGroup.state_header\")}\n          </DescriptionListTerm>\n          <DescriptionListDescription>\n            <ConsumerGroupStateLabel state={state} />\n          </DescriptionListDescription>\n        </DescriptionListGroup>\n      </DescriptionList>\n      <TableComposable\n        aria-label={t(\"consumerGroup.consumer_group_info_table_aria\")}\n        variant={TableVariant.compact}\n      >\n        <Thead noWrap>\n          <Tr>\n            <Th width={20}>{columnNames.topic}</Th>\n            <Th width={20}>{columnNames.partition}</Th>\n            <Th width={20}>{columnNames.consumer_id}</Th>\n            <Th width={20}>{columnNames.current_offset}</Th>\n            <Th width={20}>{columnNames.log_end_offset}</Th>\n            <Th width={20}>{columnNames.offset_lag}</Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          {consumers.map(\n            ({\n              groupId,\n              partition,\n              topic,\n              memberId,\n              offset,\n              logEndOffset,\n              lag,\n            }) => {\n              return (\n                <Tr key={groupId}>\n                  <Td dataLabel={columnNames.topic}>{topic}</Td>\n                  <Td dataLabel={columnNames.partition}>{partition}</Td>\n                  <Td dataLabel={columnNames.consumer_id}>\n                    {memberId ? (\n                      `${groupId}\\n${memberId}`\n                    ) : (\n                      <i>{t(\"consumerGroup.unassigned\")}</i>\n                    )}\n                  </Td>\n                  <Td dataLabel={columnNames.current_offset}>{offset}</Td>\n                  <Td dataLabel={columnNames.log_end_offset}>{logEndOffset}</Td>\n                  <Td dataLabel={columnNames.offset_lag}>{lag}</Td>\n                </Tr>\n              );\n            }\n          )}\n        </Tbody>\n      </TableComposable>\n    </Stack>\n  );\n};\n","import {\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Stack,\n} from \"@patternfly/react-core\";\nimport {\n  TableComposable,\n  TableVariant,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport type { Consumer, State } from \"ui-models/src/models/consumer-group\";\nimport { ConsumerGroupPopover } from \"./ConsumerGroupPopover\";\nimport { ConsumerGroupStateLabel } from \"./ConsumerGroupState\";\n\nexport type ConsumerGroupByTopicProps = {\n  state: State;\n  consumers: Consumer[];\n  activeMembers: number;\n  partitionsWithLag: number;\n};\n\nexport const ConsumerGroupByTopic: FunctionComponent<\n  ConsumerGroupByTopicProps\n> = ({ state, consumers, activeMembers, partitionsWithLag }) => {\n  const { t } = useTranslation([\"kafka\"]);\n\n  const columnNames = {\n    partition: t(\"consumerGroup.partition\"),\n    consumer_id: t(\"consumerGroup.consumer_id\"),\n    current_offset: t(\"consumerGroup.current_offset\"),\n    log_end_offset: t(\"consumerGroup.log_end_offset\"),\n    offset_lag: t(\"consumerGroup.offset_lag\"),\n  };\n\n  return (\n    <Stack hasGutter>\n      <DescriptionList\n        columnModifier={{ lg: \"3Col\" }}\n        className={\"pf-m-display-2xl\"}\n      >\n        <DescriptionListGroup>\n          <DescriptionListTerm>\n            {t(\"consumerGroup.active_members_for_topic\")}\n          </DescriptionListTerm>\n          <DescriptionListDescription>\n            {activeMembers}\n          </DescriptionListDescription>\n        </DescriptionListGroup>\n        <DescriptionListGroup>\n          <DescriptionListTerm>\n            {t(\"consumerGroup.partitions_with_lag_for_topic\")}{\" \"}\n            <ConsumerGroupPopover\n              title={t(\"consumerGroup.partitions_with_lag_name\")}\n              description={t(\"consumerGroup.partitions_with_lag_description\")}\n            />\n          </DescriptionListTerm>\n          <DescriptionListDescription>\n            {partitionsWithLag}\n          </DescriptionListDescription>\n        </DescriptionListGroup>\n        <DescriptionListGroup>\n          <DescriptionListTerm>\n            {t(\"consumerGroup.state_header\")}\n          </DescriptionListTerm>\n          <DescriptionListDescription>\n            {<ConsumerGroupStateLabel state={state} />}\n          </DescriptionListDescription>\n        </DescriptionListGroup>\n      </DescriptionList>\n      <TableComposable\n        aria-label={t(\"consumerGroup.consumer_group_info_table_aria\")}\n        variant={TableVariant.compact}\n      >\n        <Thead noWrap>\n          <Tr>\n            <Th key={columnNames.partition} width={20}>\n              {columnNames.partition}\n            </Th>\n            <Th key={columnNames.consumer_id} width={20}>\n              {columnNames.consumer_id}\n            </Th>\n            <Th key={columnNames.current_offset} width={20}>\n              {columnNames.current_offset}\n            </Th>\n            <Th key={columnNames.log_end_offset} width={20}>\n              {columnNames.log_end_offset}\n            </Th>\n            <Th key={columnNames.offset_lag} width={20}>\n              {columnNames.offset_lag}\n            </Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          {consumers.map(\n            ({ groupId, partition, memberId, offset, logEndOffset, lag }) => {\n              return (\n                <Tr key={groupId}>\n                  <Td dataLabel={columnNames.partition}>{partition}</Td>\n                  <Td dataLabel={columnNames.consumer_id}>\n                    {memberId ? (\n                      `${groupId}\\n${memberId}`\n                    ) : (\n                      <i>{t(\"consumerGroup.unassigned\")}</i>\n                    )}{\" \"}\n                  </Td>\n                  <Td dataLabel={columnNames.current_offset}>{offset}</Td>\n                  <Td dataLabel={columnNames.log_end_offset}>{logEndOffset}</Td>\n                  <Td dataLabel={columnNames.offset_lag}>{lag}</Td>\n                </Tr>\n              );\n            }\n          )}\n        </Tbody>\n      </TableComposable>\n    </Stack>\n  );\n};\n","import type { FunctionComponent } from \"react\";\nimport type { Consumer, State } from \"ui-models/src/models/consumer-group\";\nimport { ConsumerGroupByKafka } from \"./ConsumerGroupByKafka\";\nimport { ConsumerGroupByTopic } from \"./ConsumerGroupByTopic\";\n\nexport type ConsumerGroupDetailsProps = {\n  consumerGroupByTopic: boolean;\n  state: State;\n  activeMembers: number;\n  partitionsWithLag: number;\n  consumers: Consumer[];\n};\n\nexport const ConsumerGroupDetails: FunctionComponent<\n  ConsumerGroupDetailsProps\n> = ({\n  consumerGroupByTopic,\n  state,\n  consumers,\n  activeMembers,\n  partitionsWithLag,\n}) => {\n  return (\n    <div>\n      {consumerGroupByTopic ? (\n        <ConsumerGroupByTopic\n          state={state}\n          consumers={consumers}\n          activeMembers={activeMembers}\n          partitionsWithLag={partitionsWithLag}\n        />\n      ) : (\n        <ConsumerGroupByKafka\n          state={state}\n          consumers={consumers}\n          activeMembers={activeMembers}\n          partitionsWithLag={partitionsWithLag}\n        />\n      )}\n    </div>\n  );\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from \"@patternfly/react-core\";\nimport { CubesIcon } from \"@patternfly/react-icons\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nexport const ConsumerGroupEmptyState: FunctionComponent = () => {\n  const { t } = useTranslation([\"kafka\"]);\n  return (\n    <EmptyState variant={EmptyStateVariant.large}>\n      <EmptyStateIcon icon={CubesIcon} />\n      <Title headingLevel={\"h1\"} size={TitleSizes.lg}>\n        {t(\"consumerGroup.empty_consumer_title\")}\n      </Title>\n      <EmptyStateBody>{t(\"consumerGroup.empty_consumer_body\")}</EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import { Select, SelectOption, SelectVariant } from \"@patternfly/react-core\";\nimport type { SelectProps } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport type { OffsetValue } from \"../types\";\n\nexport type OffsetSelectProps = {\n  value: OffsetValue;\n  onChange: (value: OffsetValue) => void;\n};\n\nexport const OffsetSelect: FunctionComponent<OffsetSelectProps> = ({\n  onChange,\n  value,\n}) => {\n  const { t } = useTranslation(\"kafka\");\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  const onToggle = (isOpen: boolean) => {\n    setIsOpen(isOpen);\n  };\n\n  const offsetValueOption: { [key in OffsetValue]: string } = {\n    absolute: t(\"consumerGroup.offset.absolute\"),\n    latest: t(\"consumerGroup.offset.latest\"),\n    earliest: t(\"consumerGroup.offset.earliest\"),\n  };\n\n  const onSelect: SelectProps[\"onSelect\"] = (_, selection) => {\n    onChange(selection as OffsetValue);\n    setIsOpen(false);\n  };\n\n  const makeOptions = () => {\n    return Object.entries(offsetValueOption).map(([value, label]) => (\n      <SelectOption key={value} value={value}>\n        {label}\n      </SelectOption>\n    ));\n  };\n\n  return (\n    <Select\n      aira-label={t(\"consumerGroup.reset_offset_new_offset_label\")}\n      toggleAriaLabel={t(\"consumerGroup.reset_offset_new_offset_label\")}\n      id={\"offset-select\"}\n      onToggle={onToggle}\n      onSelect={onSelect}\n      variant={SelectVariant.single}\n      isOpen={isOpen}\n      placeholderText={t(\"consumerGroup.select_offset\")}\n      selections={value}\n      menuAppendTo={\"parent\"}\n    >\n      {makeOptions()}\n    </Select>\n  );\n};\n","import { Select, SelectOption, SelectVariant } from \"@patternfly/react-core\";\nimport type { SelectProps } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nexport type TopicSelectProps = {\n  value: string;\n  topics: string[];\n  onChange: (topic: string) => void;\n};\n\nexport const TopicSelect: FunctionComponent<TopicSelectProps> = ({\n  topics,\n  onChange,\n  value,\n}) => {\n  const { t } = useTranslation(\"kafka\");\n\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  const onToggle = (isOpen: boolean) => {\n    setIsOpen(isOpen);\n  };\n\n  const onSelect: SelectProps[\"onSelect\"] = (_, topic) => {\n    onChange(topic as string);\n    setIsOpen(false);\n  };\n\n  return (\n    <Select\n      aira-label={t(\"consumerGroup.reset_offset_topic_label\")}\n      toggleAriaLabel={t(\"consumerGroup.reset_offset_topic_label\")}\n      id={\"topic-select\"}\n      variant={SelectVariant.single}\n      onToggle={onToggle}\n      onSelect={onSelect}\n      isOpen={isOpen}\n      selections={value}\n      placeholderText={t(\"consumerGroup.select_topic\")}\n      menuAppendTo={\"parent\"}\n      isDisabled={topics.length <= 0}\n    >\n      {topics.map((topic, index) => (\n        <SelectOption key={index} value={topic}>\n          {topic}\n        </SelectOption>\n      ))}\n    </Select>\n  );\n};\n","import {\n  Alert,\n  Button,\n  Checkbox,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  Stack,\n  StackItem,\n  TextInput,\n} from \"@patternfly/react-core\";\nimport {\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport { useCallback, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport type { Consumer } from \"ui-models/src/models/consumer-group\";\nimport \"../ConsumerGroup.css\";\nimport type { OffsetValue } from \"../types\";\nimport { OffsetSelect } from \"./OffsetSelect\";\nimport { TopicSelect } from \"./TopicSelect\";\nimport type { FunctionComponent } from \"react\";\nimport type { State } from \"ui-models/src/models/consumer-group\";\n\nexport type ConsumerGroupResetOffsetProps = {\n  isModalOpen: boolean;\n  state: State;\n  groupId: string;\n  topics: string[];\n  consumers: Consumer[];\n  onClickClose: () => void;\n  onClickResetOffset: (\n    topic: string,\n    offset: OffsetValue,\n    partitions: number[],\n    customOffset: string\n  ) => void;\n  disableFocusTrap?: boolean;\n  appendTo?: () => HTMLElement;\n};\n\nexport const ConsumerGroupResetOffset: FunctionComponent<\n  ConsumerGroupResetOffsetProps\n> = ({\n  groupId,\n  topics,\n  onClickClose,\n  isModalOpen,\n  onClickResetOffset,\n  disableFocusTrap,\n  appendTo,\n  consumers,\n  state,\n}) => {\n  const { t } = useTranslation([\"kafka\"]);\n\n  const [selectedTopic, setSelectedTopic] = useState<string>(\"\");\n  const [selectedOffset, setSelectedOffset] = useState<OffsetValue>(\"absolute\");\n  const [customOffsetValue, setcustomOffsetValue] = useState<string>();\n\n  const [isResetAccepted, setIsResetAccepted] = useState<boolean>(false);\n\n  const [selectedConsumer, setSelectedConsumer] = useState<Consumer[]>([]);\n\n  const isDisconnected = state !== \"Stable\";\n\n  const consumerList =\n    consumers.filter((consumer) => consumer.topic === selectedTopic) || [];\n\n  const isResetOffsetDisabled =\n    !selectedTopic ||\n    !selectedOffset ||\n    !isResetAccepted ||\n    !isDisconnected ||\n    selectedConsumer.length === 0;\n\n  const tableColumns = {\n    partition: t(\"consumerGroup.partition\"),\n    clientId: `${t(\"consumerGroup.client_id\")} + ${t(\n      \"consumerGroup.member_id\"\n    )}`,\n    current_offset: t(\"consumerGroup.current_offset\"),\n    log_end_offset: t(\"consumerGroup.log_end_offset\"),\n    offset_lag: t(\"consumerGroup.offset_lag\"),\n    new_offset: t(\"consumerGroup.new_offset\"),\n  };\n\n  const areAllConsumerSelected =\n    selectedConsumer.length === consumerList.length;\n\n  const onSelectAllConsumer = (isSelecting = true) => {\n    setSelectedConsumer(isSelecting ? consumerList : []);\n  };\n\n  const isConsumerSelected = (consumer: Consumer) => {\n    return selectedConsumer.includes(consumer);\n  };\n  const onSelect = (consumer: Consumer, isSelecting = true) => {\n    setSelectedConsumer(\n      isSelecting\n        ? [...selectedConsumer, consumer]\n        : selectedConsumer.filter((r) => r !== consumer)\n    );\n  };\n\n  const onResetOffset = useCallback(() => {\n    const partitions = selectedConsumer.map(({ partition }) => partition);\n    onClickResetOffset(\n      selectedTopic,\n      selectedOffset,\n      partitions,\n      customOffsetValue || \"0\"\n    );\n  }, [\n    onClickResetOffset,\n    selectedTopic,\n    selectedOffset,\n    selectedConsumer,\n    customOffsetValue,\n  ]);\n\n  return (\n    <Modal\n      variant={ModalVariant.large}\n      isOpen={isModalOpen}\n      aria-label={t(\"consumerGroup.reset_offset_modal_label\")}\n      title={t(\"consumerGroup.reset_offset\")}\n      showClose={true}\n      onClose={onClickClose}\n      aria-describedby=\"modal-message\"\n      disableFocusTrap={disableFocusTrap}\n      appendTo={appendTo}\n      position=\"top\"\n      actions={[\n        <Button\n          variant=\"danger\"\n          key={1}\n          isDisabled={isResetOffsetDisabled}\n          onClick={onResetOffset}\n        >\n          {t(\"consumerGroup.reset_offset\")}\n        </Button>,\n        <Button variant=\"link\" key={2} onClick={onClickClose}>\n          {t(\"common:cancel\")}\n        </Button>,\n      ]}\n    >\n      <Stack hasGutter>\n        <StackItem>\n          <Form isHorizontal>\n            <FormGroup\n              className=\"mas--ConsumerGroupResetOffset-form-group--readonly\"\n              label={t(\"consumerGroup.reset_offset_consumer_group_label\")}\n              fieldId=\"consumer-group-input\"\n            >\n              <TextInput\n                readOnlyVariant={\"default\"}\n                type=\"text\"\n                name={t(\"consumerGroup.reset_offset_consumer_group_label\")}\n                id={\"consumer-group-input\"}\n                value={groupId}\n              />\n            </FormGroup>\n            {isDisconnected && (\n              <FormGroup\n                label={t(\"consumerGroup.reset_offset_topic_label\")}\n                fieldId=\"topic-select\"\n              >\n                <TopicSelect\n                  value={selectedTopic}\n                  topics={topics}\n                  onChange={setSelectedTopic}\n                />\n              </FormGroup>\n            )}\n            {isDisconnected && selectedTopic && (\n              <FormGroup\n                label={t(\"consumerGroup.reset_offset_new_offset_label\")}\n                fieldId=\"offset-select\"\n              >\n                <OffsetSelect\n                  value={selectedOffset}\n                  onChange={setSelectedOffset}\n                />\n              </FormGroup>\n            )}\n            {isDisconnected &&\n              selectedTopic &&\n              selectedOffset === \"absolute\" && (\n                <FormGroup\n                  label={t(\"consumerGroup.reset_offset_custom_offset_label\")}\n                  fieldId=\"custom-offset-input\"\n                >\n                  <TextInput\n                    id=\"custom-offset-input\"\n                    name={t(\"consumerGroup.reset_offset_custom_offset_label\")}\n                    value={customOffsetValue}\n                    onChange={setcustomOffsetValue}\n                    type=\"number\"\n                  />\n                </FormGroup>\n              )}\n          </Form>\n        </StackItem>\n        <StackItem>\n          {!isDisconnected && (\n            <Alert\n              className=\"modal-alert\"\n              variant=\"danger\"\n              isInline\n              title={t(\"consumerGroup.reset_offset_connected_alert_title\")}\n            >\n              <p>{t(\"consumerGroup.reset_offset_connected_alert_body\")}</p>\n            </Alert>\n          )}\n        </StackItem>\n        <StackItem>\n          {isDisconnected && consumerList.length > 0 && selectedTopic && (\n            <Stack hasGutter>\n              <StackItem>\n                <TableComposable\n                  aria-label={t(\"consumerGroup.reset_offset_selectable table\")}\n                  className=\"consumer-table\"\n                >\n                  <Thead>\n                    <Tr>\n                      <Th\n                        select={{\n                          onSelect: (_event, isSelecting) =>\n                            onSelectAllConsumer(isSelecting),\n                          isSelected: areAllConsumerSelected,\n                        }}\n                      />\n                      <Th>{tableColumns.partition}</Th>\n                      <Th>{tableColumns.clientId}</Th>\n                      <Th>{tableColumns.current_offset}</Th>\n                      <Th>{tableColumns.log_end_offset}</Th>\n                      <Th>{tableColumns.offset_lag}</Th>\n                      <Th>{tableColumns.new_offset}</Th>\n                    </Tr>\n                  </Thead>\n                  <Tbody>\n                    {consumerList.map((consumer, index) => {\n                      return (\n                        <Tr key={index}>\n                          <Td\n                            select={{\n                              rowIndex: index,\n                              isSelected: isConsumerSelected(consumer),\n                              onSelect: (_event, isSelecting) =>\n                                onSelect(consumer, isSelecting),\n                            }}\n                          />\n                          <Td dataLabel={tableColumns.partition}>\n                            {consumer.partition}\n                          </Td>\n                          <Td dataLabel={tableColumns.clientId}>\n                            {String(consumer.groupId)}\n                            {String(consumer.memberId)}\n                          </Td>\n                          <Td dataLabel={tableColumns.current_offset}>\n                            {consumer.offset}\n                          </Td>\n                          <Td dataLabel={tableColumns.log_end_offset}>\n                            {consumer.logEndOffset}\n                          </Td>\n                          <Td dataLabel={tableColumns.offset_lag}>\n                            {consumer.lag}\n                          </Td>\n                          <Td dataLabel={tableColumns.offset_lag}>\n                            {isConsumerSelected(consumer) && selectedOffset\n                              ? selectedOffset === \"absolute\"\n                                ? customOffsetValue || 0\n                                : selectedOffset\n                              : \"-\"}\n                          </Td>\n                        </Tr>\n                      );\n                    })}\n                  </Tbody>\n                </TableComposable>\n              </StackItem>\n              <StackItem>\n                <Checkbox\n                  label={t(\"consumerGroup.reset_offset_accept\")}\n                  id=\"resetoffset-checkbox\"\n                  isChecked={isResetAccepted}\n                  onChange={setIsResetAccepted}\n                />\n              </StackItem>\n            </Stack>\n          )}\n        </StackItem>\n      </Stack>\n    </Modal>\n  );\n};\n","import { Alert, Text } from \"@patternfly/react-core\";\nimport { DeleteModal } from \"@rhoas/app-services-ui-components\";\nimport type { FunctionComponent } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport type { State } from \"ui-models/src/models/consumer-group\";\n\nexport type DeleteConsumerGroupProps = {\n  isModalOpen: boolean;\n  onClose: () => void;\n  onDeleteConsumer: () => void;\n  state: State;\n  consumerName: string;\n  appendTo: () => HTMLElement;\n  disableFocusTrap?: boolean;\n};\n\nexport const DeleteConsumerGroup: FunctionComponent<\n  DeleteConsumerGroupProps\n> = ({\n  isModalOpen,\n  onClose,\n  onDeleteConsumer,\n  state,\n  consumerName,\n  appendTo,\n  disableFocusTrap,\n}) => {\n  const { t } = useTranslation(\"kafka\");\n\n  const isConsumerConnected = state === \"Stable\";\n\n  return (\n    <div>\n      <DeleteModal\n        isDeleting={false}\n        isModalOpen={isModalOpen}\n        title={t(\"consumerGroup.delete\")}\n        onCancel={onClose}\n        onDelete={onDeleteConsumer}\n        variant={\"non-destructive\"}\n        appendTo={appendTo}\n        disableFocusTrap={disableFocusTrap}\n        isDisabled={isConsumerConnected}\n      >\n        {isConsumerConnected ? (\n          <Alert\n            className=\"modal-alert\"\n            variant=\"danger\"\n            isInline\n            title={t(\"consumerGroup.delete_consumer_connected_alert_title\", {\n              name: consumerName,\n            })}\n          >\n            {t(\"consumerGroup.delete_consumer_connected_alert_body\")}\n          </Alert>\n        ) : (\n          <Text id=\"modal-message\">\n            <Trans\n              ns={\"kafka\"}\n              i18nKey={\"consumerGroup.consumer_group_delete_message\"}\n              values={{\n                name: consumerName,\n              }}\n            />\n          </Text>\n        )}\n      </DeleteModal>\n    </div>\n  );\n};\n","import {\n  Drawer,\n  DrawerActions,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerContentBody,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerPanelContent,\n  Dropdown,\n  DropdownItem,\n  DropdownPosition,\n  KebabToggle,\n  Text,\n  TextContent,\n  TextVariants,\n  Title,\n} from \"@patternfly/react-core\";\nimport type { FunctionComponent, ReactNode } from \"react\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport type { Consumer, State } from \"ui-models/src/models/consumer-group\";\nimport \"./ConsumerGroup.css\";\nimport { ConsumerGroupDetails } from \"./ConsumerGroupDetails\";\n\nexport type ConsumerGroupDrawerProps = {\n  children: ReactNode;\n  consumerGroupByTopic: boolean;\n  state: State;\n  activeMembers: number;\n  partitionsWithLag: number;\n  consumers: Consumer[];\n  groupId: string;\n  onSelectDeleteConsumerGroup: () => void;\n  onSelectResetOffsetConsumerGroup: () => void;\n  isExpanded: boolean;\n  onClickClose: () => void;\n};\n\nexport const ConsumerGroupDrawer: FunctionComponent<\n  ConsumerGroupDrawerProps\n> = ({\n  children,\n  consumerGroupByTopic,\n  state,\n  activeMembers,\n  partitionsWithLag,\n  consumers,\n  groupId,\n  onSelectDeleteConsumerGroup,\n  onSelectResetOffsetConsumerGroup,\n  isExpanded,\n  onClickClose,\n}) => {\n  const { t } = useTranslation([\"kafka\"]);\n\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  const onToggle = (isOpen: boolean) => {\n    setIsOpen(isOpen);\n  };\n  const onSelect = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const dropdownItems = [\n    <DropdownItem key=\"reset offset\" onClick={onSelectResetOffsetConsumerGroup}>\n      {t(\"consumerGroup.reset_offset\")}\n    </DropdownItem>,\n    <DropdownItem key=\"delete\" onClick={onSelectDeleteConsumerGroup}>\n      {t(\"common:delete\")}\n    </DropdownItem>,\n  ];\n\n  const panelContent = (\n    <DrawerPanelContent widths={{ default: \"width_50\" }}>\n      <DrawerHead>\n        <TextContent>\n          <Text\n            component={TextVariants.small}\n            className={\"consumer-group-drawer__top-label\"}\n          >\n            {t(\"consumerGroup.consumer_group_id\")}\n          </Text>\n          <Title headingLevel={\"h1\"} className={\"consumer-group-drawer__title\"}>\n            {groupId}\n          </Title>\n        </TextContent>\n        <DrawerActions>\n          <Dropdown\n            onSelect={onSelect}\n            toggle={<KebabToggle onToggle={onToggle} id=\"toggle-data-plane\" />}\n            dropdownItems={dropdownItems}\n            isOpen={isOpen}\n            isPlain\n            position={DropdownPosition.right}\n          />\n          <DrawerCloseButton onClick={onClickClose} />\n        </DrawerActions>\n      </DrawerHead>\n      <DrawerPanelBody>\n        <ConsumerGroupDetails\n          consumerGroupByTopic={consumerGroupByTopic}\n          state={state}\n          activeMembers={activeMembers}\n          partitionsWithLag={partitionsWithLag}\n          consumers={consumers}\n        />\n      </DrawerPanelBody>\n    </DrawerPanelContent>\n  );\n\n  return (\n    <Drawer\n      isExpanded={isExpanded}\n      data-ouia-app-id={\"dataPlane-consumerGroupDetails\"}\n      isInline={true}\n    >\n      <DrawerContent panelContent={panelContent}>\n        <DrawerContentBody className=\"consumer-group-drawer__drawer-content-body\">\n          {children}\n        </DrawerContentBody>\n      </DrawerContent>\n    </Drawer>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport type {\n  CloudProvider,\n  KafkaField,\n  SimplifiedStatus,\n  Status,\n} from \"ui-models/src/models/kafka\";\n\nexport function useKafkaLabels() {\n  const { t } = useTranslation(\"kafka\");\n\n  const statuses: { [status in Status]: string } = {\n    ready: t(\"statuses.ready\"),\n    degraded: t(\"statuses.degraded\"),\n    accepted: t(\"statuses.accepted\"),\n    provisioning: t(\"statuses.provisioning\"),\n    preparing: t(\"statuses.preparing\"),\n    deprovision: t(\"statuses.deprovision\"),\n    deleting: t(\"statuses.deleting\"),\n    suspended: t(\"statuses.suspended\"),\n    suspending: t(\"statuses.suspending\"),\n    resuming: t(\"statuses.resuming\"),\n  };\n  const statusesSimplified: { [status in SimplifiedStatus]: string } = {\n    creating: t(\"statusesSimplified.creating\"),\n    ready: t(\"statusesSimplified.ready\"),\n    degraded: t(\"statusesSimplified.degraded\"),\n    deleting: t(\"statusesSimplified.deleting\"),\n    suspended: t(\"statusesSimplified.suspended\"),\n    suspending: t(\"statusesSimplified.suspending\"),\n    resuming: t(\"statusesSimplified.resuming\"),\n  };\n  const providers: { [provider in CloudProvider]: string } = {\n    aws: t(\"common:cloudProviders.aws\"),\n    gcp: t(\"common:cloudProviders.gcp\"),\n    azure: t(\"common:cloudProviders.azure\"),\n  };\n  const providerRegions: {\n    [provider in CloudProvider]: { [region: string]: string };\n  } = {\n    aws: {},\n    gcp: {},\n    azure: {},\n  };\n  const fields: {\n    [field in KafkaField]: string;\n  } = {\n    id: t(\"fields.id\"),\n    name: t(\"fields.name\"),\n    createdAt: t(\"fields.createdAt\"),\n    updatedAt: t(\"fields.updatedAt\"),\n    expiryDate: t(\"fields.expiryDate\"),\n    owner: t(\"fields.owner\"),\n    provider: t(\"fields.provider\"),\n    region: t(\"fields.region\"),\n    status: t(\"fields.status\"),\n    plan: t(\"fields.plan\"),\n    size: t(\"fields.size\"),\n    ingress: t(\"fields.ingress\"),\n    egress: t(\"fields.egress\"),\n    storage: t(\"fields.storage\"),\n    maxPartitions: t(\"fields.maxPartitions\"),\n    connections: t(\"fields.connections\"),\n    connectionRate: t(\"fields.connectionRate\"),\n    messageSize: t(\"fields.messageSize\"),\n    billing: t(\"fields.billing\"),\n    adminUrl: t(\"fields.adminUrl\"),\n    bootstrapUrl: t(\"fields.bootstrapUrl\"),\n    version: t(\"fields.version\"),\n  };\n  return {\n    fields,\n    statuses,\n    statusesSimplified,\n    providers,\n    providerRegions,\n  };\n}\n","import { useTranslation } from \"react-i18next\";\nimport type { TopicField } from \"ui-models/src/models/topic\";\n\nexport function useTopicLabels() {\n  const { t } = useTranslation(\"topic\");\n\n  const fields: {\n    [field in TopicField]: string;\n  } = {\n    name: t(\"fields.name\"),\n    partitions: t(\"fields.partitions\"),\n    \"cleanup.policy\": t(\"fields.cleanup_policy\"),\n    \"delete.retention.ms\": t(\"fields.delete_retention_ms\"),\n    \"max.compaction.lag.ms\": t(\"fields.max_compaction_lag_ms\"),\n    \"max.message.bytes\": t(\"fields.max_message_bytes\"),\n    \"message.downconversion.enable\": t(\"fields.message_downconversion_enable\"),\n    \"message.timestamp.difference.max.ms\": t(\n      \"fields.message_timestamp_difference_max_ms\"\n    ),\n    \"message.timestamp.type\": t(\"fields.message_timestamp_type\"),\n    \"min.compaction.lag.ms\": t(\"fields.min_compaction_lag_ms\"),\n    \"retention.bytes\": t(\"fields.retention_bytes\"),\n    \"retention.ms\": t(\"fields.retention_ms\"),\n    \"segment.bytes\": t(\"fields.segment_bytes\"),\n    \"segment.ms\": t(\"fields.segment_ms\"),\n    \"compression.type\": t(\"fields.compression_type\"),\n    \"file.delete.delay.ms\": t(\"fields.file_delete_delay_ms\"),\n    \"flush.messages\": t(\"fields.flush_messages\"),\n    \"flush.ms\": t(\"fields.flush_ms\"),\n    \"follower.replication.throttled.replicas\": t(\n      \"fields.follower_replication_throttled_replicas\"\n    ),\n    \"index.interval.bytes\": t(\"fields.index_interval_bytes\"),\n    \"leader.replication.throttled.replicas\": t(\n      \"fields.leader_replication_throttled_replicas\"\n    ),\n    \"message.format.version\": t(\"fields.message_format_version\"),\n    \"min.cleanable.dirty.ratio\": t(\"fields.min_cleanable_dirty_ratio\"),\n    \"min.insync.replicas\": t(\"fields.min_insync_replicas\"),\n    \"segment.index.bytes\": t(\"fields.segment_index_bytes\"),\n    \"segment.jitter.ms\": t(\"fields.segment_jitter_ms\"),\n    \"unclean.leader.election.enable\": t(\n      \"fields.unclean_leader_election_enable\"\n    ),\n    preallocate: t(\"fields.preallocate\"),\n  };\n  return {\n    fields,\n  };\n}\n","import { useTranslation } from \"react-i18next\";\nimport type { ConsumerGroupField } from \"ui-models/src/models/consumer-group\";\n\nexport function useConsumerGroupLabels() {\n  const { t } = useTranslation(\"kafka\");\n\n  const fields: {\n    [field in ConsumerGroupField]: string;\n  } = {\n    groupId: t(\"consumerGroup.consumer_group_id\"),\n    activeConsumers: t(\"consumerGroup.active_members\"),\n    laggingPartitions: t(\"consumerGroup.partitions_with_lag\"),\n    state: t(\"consumerGroup.state_header\"),\n  };\n  return {\n    fields,\n  };\n}\n","import { PageSection } from \"@patternfly/react-core\";\nimport { TableVariant } from \"@patternfly/react-table\";\nimport type { TableViewProps } from \"@rhoas/app-services-ui-components\";\nimport {\n  EmptyStateNoResults,\n  TableView,\n} from \"@rhoas/app-services-ui-components\";\nimport { useTranslation } from \"react-i18next\";\nimport type {\n  ConsumerGroup,\n  ConsumerGroupField,\n} from \"ui-models/src/models/consumer-group\";\nimport { ConsumerGroupEmptyState, ConsumerGroupStateLabel } from \"./components\";\nimport { useConsumerGroupLabels } from \"../../hooks\";\n\ntype SubUnion<T, U extends T> = U;\n\nconst Columns: SubUnion<\n  ConsumerGroupField,\n  \"groupId\" | \"activeConsumers\" | \"laggingPartitions\" | \"state\"\n>[] = [\"groupId\", \"activeConsumers\", \"laggingPartitions\", \"state\"];\n\nexport type ConsumerGroupsProps<T extends ConsumerGroup> = {\n  consumers: Array<T> | undefined;\n  onDelete: (row: T) => void;\n  onViewPartition: (row: T) => void;\n  onViewResetOffset: (row: T) => void;\n  consumerName: string[];\n  onSearchConsumer: (value: string) => void;\n  onRemoveConsumerChip: (value: string) => void;\n  onRemoveConsumerChips: () => void;\n} & Pick<\n  TableViewProps<T, (typeof Columns)[number]>,\n  | \"itemCount\"\n  | \"page\"\n  | \"perPage\"\n  | \"onPageChange\"\n  | \"isRowSelected\"\n  | \"isColumnSortable\"\n  | \"onClearAllFilters\"\n>;\n\nexport const ConsumerGroups = <T extends ConsumerGroup>({\n  consumers,\n  onDelete,\n  onViewPartition,\n  isColumnSortable,\n  itemCount,\n  onViewResetOffset,\n  onClearAllFilters,\n  page,\n  perPage,\n  onPageChange,\n  consumerName,\n  onSearchConsumer,\n  onRemoveConsumerChip,\n  onRemoveConsumerChips,\n}: ConsumerGroupsProps<T>) => {\n  const { t } = useTranslation(\"kafka\");\n\n  const labels = useConsumerGroupLabels();\n\n  const isFiltered = consumerName.length > 0;\n  return (\n    <PageSection isFilled={true} hasOverflowScroll={true} aria-label={\"TODO\"}>\n      <TableView\n        variant={TableVariant.compact}\n        tableOuiaId={\"card-table\"}\n        ariaLabel={t(\"consumerGroup.consumer_group_list\")}\n        data={consumers}\n        columns={Columns}\n        renderHeader={({ column, Th, key }) => (\n          <Th\n            key={key}\n            info={\n              column === \"laggingPartitions\"\n                ? {\n                    popover: (\n                      <div>\n                        {t(\"consumerGroup.partitions_with_lag_description\")}\n                      </div>\n                    ),\n                    ariaLabel: \"partitions with lag\",\n                    popoverProps: {\n                      headerContent: t(\n                        \"consumerGroup.partitions_with_lag_name\"\n                      ),\n                    },\n                  }\n                : undefined\n            }\n          >\n            {labels.fields[column]}\n          </Th>\n        )}\n        renderCell={({ column, row, Td, key }) => {\n          return (\n            <Td key={key} dataLabel={labels.fields[column]}>\n              {(() => {\n                switch (column) {\n                  case \"groupId\":\n                    return row.groupId;\n                  case \"activeConsumers\":\n                    return row.activeConsumers;\n                  case \"laggingPartitions\":\n                    return row.laggingPartitions;\n                  case \"state\":\n                    return <ConsumerGroupStateLabel state={row.state} />;\n                }\n              })()}\n            </Td>\n          );\n        }}\n        renderActions={({ row, ActionsColumn }) => (\n          <ActionsColumn\n            items={[\n              {\n                title: t(\"consumerGroup.view_partitions_offsets\"),\n                onClick: () => onViewPartition(row),\n              },\n              {\n                title: t(\"consumerGroup.reset_offset\"),\n                onClick: () => onViewResetOffset(row),\n              },\n              {\n                title: t(\"common:delete\"),\n                onClick: () => onDelete(row),\n              },\n            ]}\n          />\n        )}\n        isColumnSortable={isColumnSortable}\n        filters={{\n          [labels.fields.groupId]: {\n            type: \"search\",\n            chips: consumerName,\n            onSearch: onSearchConsumer,\n            onRemoveChip: onRemoveConsumerChip,\n            onRemoveGroup: onRemoveConsumerChips,\n            validate: (value: string) => !/[\"$^<>|+%/;:,\\s*=~#()]/.test(value),\n            errorMessage: t(\"input_field_invalid_message\"),\n          },\n        }}\n        itemCount={itemCount}\n        page={page}\n        onPageChange={onPageChange}\n        perPage={perPage}\n        isFiltered={isFiltered}\n        onClearAllFilters={onClearAllFilters}\n        emptyStateNoData={<ConsumerGroupEmptyState />}\n        emptyStateNoResults={<EmptyStateNoResults />}\n      />\n    </PageSection>\n  );\n};\n","import {\n  Level,\n  LevelItem,\n  Nav,\n  NavItem,\n  NavList,\n  PageSection,\n  PageSectionVariants,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { Link } from \"react-router-dom\";\n\ntype Sections = \"standard\" | \"dedicated\" | \"clusters\";\n\nexport type ControlPlaneHeaderProps = {\n  activeSection: Sections;\n  sectionsHref: { [key in Sections]: string };\n};\n\nexport const ControlPlaneHeader: VoidFunctionComponent<\n  ControlPlaneHeaderProps\n> = ({ activeSection, sectionsHref }) => {\n  const { t } = useTranslation(\"kafka\");\n\n  return (\n    <>\n      <PageSection variant={PageSectionVariants.light}>\n        <Level>\n          <LevelItem>\n            <TextContent>\n              <Text component=\"h1\">{t(\"kafka:title\")}</Text>\n              <p>{t(\"kafka:description\")}</p>\n            </TextContent>\n          </LevelItem>\n        </Level>\n      </PageSection>\n      <PageSection\n        variant={PageSectionVariants.light}\n        padding={{ default: \"noPadding\" }}\n        className=\"pf-c-page__main-tabs\"\n        hasShadowBottom={true}\n      >\n        <Nav variant=\"tertiary\" className=\"pf-u-px-sm-on-xl\">\n          <NavList>\n            <NavItem\n              style={{ borderTop: 0 }}\n              data-testid=\"pageKafka-tabstandard\"\n              id=\"dashboard-tab-section\"\n              aria-label={t(\"controlPlaneNavigation.standard\")}\n              ouiaId={\"tab-standard\"}\n              isActive={activeSection === \"standard\"}\n            >\n              <Link to={sectionsHref[\"standard\"]}>\n                {t(\"controlPlaneNavigation.standard\")}\n              </Link>\n            </NavItem>\n            <NavItem\n              style={{ borderTop: 0 }}\n              data-testid=\"pageKafka-tabdedicated\"\n              id=\"dashboard-tab-section\"\n              aria-label={t(\"controlPlaneNavigation.dedicated\")}\n              ouiaId={\"tab-dedicated\"}\n              isActive={\n                activeSection === \"dedicated\" || activeSection === \"clusters\"\n              }\n            >\n              <Link to={sectionsHref[\"dedicated\"]}>\n                {t(\"controlPlaneNavigation.dedicated\")}\n              </Link>\n            </NavItem>\n          </NavList>\n        </Nav>\n        {activeSection === \"standard\" && (\n          <div className=\"pf-u-px-lg pf-u-py-sm\">\n            {t(\"standard_description\")}\n          </div>\n        )}\n        {(activeSection === \"dedicated\" || activeSection === \"clusters\") && (\n          <Nav variant=\"tertiary\" className=\"pf-u-px-sm-on-xl\">\n            <NavList>\n              <NavItem\n                style={{ borderTop: 0 }}\n                data-testid=\"pageKafka-tabdedicated\"\n                id=\"dashboard-tab-section\"\n                aria-label={t(\"controlPlaneNavigation.dedicated\")}\n                ouiaId={\"tab-dedicated\"}\n                isActive={activeSection === \"dedicated\"}\n              >\n                <Link to={sectionsHref[\"dedicated\"]}>\n                  {t(\"controlPlaneNavigation.dedicated-instances\")}\n                </Link>\n              </NavItem>\n              <NavItem\n                style={{ borderTop: 0 }}\n                data-testid=\"pageKafka-tabclusters\"\n                id=\"dashboard-tab-section\"\n                aria-label={t(\"controlPlaneNavigation.clusters\")}\n                ouiaId={\"tab-clusters\"}\n                isActive={activeSection === \"clusters\"}\n              >\n                <Link to={sectionsHref[\"clusters\"]}>\n                  {t(\"controlPlaneNavigation.clusters\")}\n                </Link>\n              </NavItem>\n            </NavList>\n          </Nav>\n        )}\n      </PageSection>\n    </>\n  );\n};\n","import type { CloudProvider, CloudRegion } from \"ui-models/src/models/kafka\";\nimport type { CloudProviderInfo } from \"../types\";\n\nexport function onProviderChange(\n  providers: CloudProviderInfo[],\n  provider: CloudProvider\n): { provider: CloudProvider; region: CloudRegion | undefined } {\n  const selectedProvider = providers.find((p) => p.id === provider);\n  const region =\n    selectedProvider?.defaultRegion ||\n    selectedProvider?.regions.filter((r) => !!r.isDisabled === false)[0]?.id;\n  return { provider, region };\n}\n","import {\n  CloudProvider,\n  CloudRegion,\n  MarketplaceSubscription,\n  Size,\n} from \"ui-models/src/models/kafka\";\nimport { assign, createMachine, send, sendParent } from \"xstate\";\nimport {\n  CreateKafkaFormData,\n  CreateKafkaInstanceError,\n  StandardPlanInitializationData,\n  StandardSizes,\n} from \"../types\";\nimport { onProviderChange } from \"./shared\";\n\nexport type StandardPlanMachineContext = {\n  // initial data coming from the APIs\n  capabilities: StandardPlanInitializationData;\n\n  // what the user is selecting\n  form: {\n    name?: string;\n    provider?: CloudProvider;\n    region?: CloudRegion;\n    size?: Size;\n    billing?: MarketplaceSubscription | \"prepaid\";\n  };\n\n  // based on the form.provider selection\n\n  // based on the form.provider and form.region selection\n  sizes: StandardSizes | undefined;\n\n  creationError: CreateKafkaInstanceError | undefined;\n};\n\nexport const StandardPlanMachine =\n  /** @xstate-layout N4IgpgJg5mDOIC5SwC4EMB2E0CcIAUAbTAWTQGMALASwzADoA3MHagMwE8BBRta4gEb9qKDgGJEoAA4B7WCOoyMkkAA9EAZgAcARnoBOfQAYdOrQHYArABYNAJnMAaEB0Q6j++reuXL5k3bWWpY65gC+Yc6omNh4RKQUNHT05Eps1FAArqwYUPTRKJmwYuQ4YGgoYCqy8iiKykhqmjp29OYW5hpGQYG+zq4Ilvoa9KZGlh4a5joAbPqBEVHoWLgExBhkVLQMqRjpWTl5bDI4ALZMaITUEGLpYIQQAJIYvFcQ1XIKSirqCKGG9Ds+ksU1m5n0M2s1n0-UQdgmllGdjsOj8QJm7ihixA0RWcXWmySOzSGWytCOJ3Or2uYlgmQEpxEH1q9R+bmMnnMnRR9n8di0RjssIQ-MFo2sgQ81lCGjm2NxsTWCS2yV2+zJuXoxzO+TQjHJJTKFTAAGVMuRyHB4I0al8GqBfoEZlp6FpISYdBp7PprFZhaK9JDAuDproQfLlor4htEtsUiSDuStZTdfrcobypUAKI4HAnZl2tkinn0WVTFFQrS+mb+jEzehzMz84btazjCMxVbRwlxtWkw7Js63aj3J4vS7XAt1b6NR0+etaWXzPmQmsuOGmRGWfmWRchbctGYdvFKmMq4l7ftJu4PWD0DBoU4ManYSoSG2faf2poIIL15GmDo+iLkBdhGOYa4DLMUKjKCljOkYbrDFox5RgSsaqgmGpHCOt73o+YAZsaU6srObj2F45gSn4UIaDY7QaMKMouohVgzNuHhgRoOioV26HnvGl6JpqN4QHeD5PmIElgAAwpQmAwCRM4OuRrS+tRVG2PRi5MexrSojM9iIW2VgSrx+LKkSgnqgOol3lIeb6hALAXG8xrvtIn6kSpgxAm00IosiEEzDMTjriKHj1hMEIoqE1iGeYdjmaePaYUJ2FarhYn0A5MhOSwRGVEp36-J6alUfCml0b6Onhci8UGJxnoSuBGj6Ml3YYReNnXll9mOdcBW5flOByQpVQfiyyk-mVlEabR2mMXVUr0EYgo+qGQHtJYHX8VZfbCTho53mUUD1K51zucVRYHl4hg6EEPisdYTHwkYgLDNKRjsSF0I7ZEOKRnxlm9lhtl9fQp31IVE2eVNJWqXNlULTVS1QXR5iAqidgzCYApui0u0g2lPUiRDUNKGIw2DaN8m5LDIC2l+RazepyNaajTFdJ4OM8hBnRejxAMKsDZ77WDvXHZDYBnZTFMYGN9PXWRfwUWzNEcwxTEGaWvgWA9Gg+P41hE2LoPpeDUvyAAXs+E6voRys+b6gbcW7czQu4tUDA44KrZCsogfyXqm6l3VXmTVvULb9CEDIaAQAaEBKAwtCMDIADWDAixZZskxHR14TbDBxwn5IIGnMjkBU9QANpGAAuk7P6gvQNi6HY2gPVCwr2HRbS6PoVG7lYQyh111kF5lUcx6XifpiweY4DlxAoNq5w5ylE8HRldn5NHJfx-PUAVy8Vc10o9dN5NhYq9uLqBMiwEWBKneWL3vKrSEiHDOBILDOPASO9LZFwPjDZujpQq6wAuxYwoEpj+n-qMT0254KG3ig9QB4sLaS1AbbKmA1nK03GhAtwi4sYeisPMQw9hay4wML6RKhhvrgiFksTsucw6T0OtPPBhF5aK0UjfZmKtcYuh9GBQwGIUS1kNgYT6Ewfqd26Fg82pNC7ZWLrSA+giGZM28j+KiLopjbkhPrcCuhaweGgT4Ux-hZj-XYSeTqQCJaRz4WIIQhAri5F0aQ388E26NnYuCZcEEXp1VxpjAmVYqKsOBEeYWQNOHbzcRou8XifF5BfFdYRBjfjbhGFoAUZjZjLj8L3YpmM1pWHCZVGYONVH5x4XvTJSYlCEA4GaAQsBSjUCkF+YosB7hgHICgbpvTWADIMfo6apU1rWDaO6EKa0goNMqfoPQ-gbC4x9MBQUGgmnhxaRDNpmoHJgCkHwCAXAsATL6dMpQQyRljPuVMkRcNb4+UPIiYpQI9y7ngsBYU3hFlrU9GYjwIRwhJI4VvVxOD3HZTOXkC5Vzri3IgG8-pgzaQvJQPgMo6L3h5LmW4IwUxXS7i9L4KwswtAgr7m3FEQxEq6EhEc7hu9Tn8CyQQvKNM-GkoRqres3FURxPsMiIEvdAUD0XIhHG8VEKOMBnClx2D1G8LEmIZOyQCjZ2SfCzVU87L+NmOMNo7hxjlgaYbd+kT+6aWCG-XcSrOXAKTinfI6BKg+vVXtNRBd-H8hxq6aUxtfQmCkf6WU9YWhgUqiETEEQAYYBkM5a0yAjUarjMwVgnAeB8EEMIUQ-iQjhtCm1WUEofTjGFFYAw3oQj2p9NRTleUWAAEVMgyHQP4gUIxOLQh8FoX2DLwoJtLI9cFWg63TESU4tCxNU4YFxJaAAqg+Xg-A0ACEIHoryZKEBcnep0NtwQuTSIdT7ClrpQoonmC0XQa1F1qucYG5I8tYBbr1MWvdB7-FckWdCYpD1+RujHTCOqVZSwB3GMiRcwxZgerSf6wod5MhrvpIyFAlQSWfI+TNRCpY2pVhCI+jmwohg8zilRA2Y7fSocRXkAoRR8g4ZEPh-x84DBmGlPjLko8IkDAXatLoi54Sd3hPBZjWq2NZsZkekVsGvTAR8C0ICVHwoTBdKYUKLbkSsQhHJ01KY0723NeCRZnpNkmFCqEMdsaUSrWYd0LkgcTOwo-SurltkUwvis8BUY4EMQ-3cA9G9cJcYjFCmtYIQRhhzEOd55dedjm7xTLAPU5IQ0oIbBYDw4x5wojCj7Kw+lZScV8PCT0pmWlZb1JAENCUDDhOs8CYI-pwSIgabFHGHtMGpdFlwz1IlKRWf8LBOzYJHNCmWl0Nura51uu+vV7lUtpL0DAKcAZAxCP5MQEw0YhS2xoJqhOqCiUh3OmleMCEKWl0jdSSx7V4kCL0As28c1asKoa2qlrSd4J6zdG+h0MEXoTbDZSQirVe8tuBeFSzKiDYfT0UMqYkETFNkg4Mu0aY4xFxQ6ezDk1JzNsfZyUVJHKtDYjDavMKTc6vSdyYtd-2Y6jNDEMutkB2VpLmpI+rKqi0mK+E8AbX0QJWXGCStD41Qbyd4WpkQi6Dt-HaHrMubiHmTJukghuaEXhdzPo8BCFbvPcHZRVy5L7k4affJsICbQSrDBAiHlFkUXRFluk7nReYY7nQwpJwr5pG3leEJcojg7x6Kv+yCBYEEtWuT+gep4UdpupEW-l7msPfP+oCqIYLl0wuUaA9vdYta8xDJei6EYy3SKToy3OlTw98MixTBdKFAWLQbBlTK+RO9gR+NfW4vFFCOfP0Zfz9LWWGBPvjm+w7maExkG8lCCCQUtimLSkRPSl3zokNDZD7n6fVum9z7V0BxbDnBQNOdEBSEXMh8CahO4MfzoG-pNnzM5TLMhd-Yi6cyTrgR6CygoiJ7BAhQhRf5vb7wxyt4a7tANidD6bDwPrzY+wOYNiBCc4hTNiPbvppajZoZ7zFyfYQCAbL6lQUQgiGygFuztDwjdYQjiZQiigZ5vqbyn5+bn7wEMCJzZb7rNbUGIAdBeC6DcRVheiSGYFwjAh6DAgmCKJWDaA+CwFkEHz0AADufAdQuQAAYicD2n2mgD9q0HQVMLyNMDjAguFDSnoOMF7L-KoQApPr5mNt-uQZ2jgCYf2qIarBYZDgwZ6EwZ7l0HeozoqkEBYhPiflPrwY3vwVfgEZspyPZohuxN6HIQgBJmAdIdtA5tCMHkQc9rDqahDOQYvPmAEbNJYdyFyIeHYQMM2qtG2GVDaozhoZUVoXPLlgERBLFtoPfAKFCEMCJs0MMG0IlNuCGIuJ-u4elokV4QfMXktl6A0TYQlP6D4DZkBH3uBMPKqtwQkZ4XASimrsRLUdoI1J0IZBSn4HAuEZIf5C1O4EMJ3GwqUaToruHsirykmOmiaPivUAAEpgAACOmQ1AZQBGSm7eKs+WEw6+OuVe4RChro1mI6iE0a3RUsFxHSXS9IkyOK9Qd4ducJsyKmKOFiEq0wPQNglSwQowwQ0EYE-GcR3xoeZ+SRBJGAnS2Kjya6KRMeIqkWmMf4-IwOdqD0vcGJ0IkObq7Q4wXBOapxpBPK3i7S-JRJPSDygyA6q+tJfg9JY6jJ9hFUWMkIoQDEDSnJJxHhGp+JAJ5yRK1ymKgpgy22u2ZaARFgIw8IxgGmFKDgoQjKoQq0AQ9qjmwIeJeEFxaK7pdyxJ+pZJHGep7yv+CJ3yfIXgtmfeW0Y6l2iAb+Yq7QAo2y7g8IcZ-xWprplySZWKKZmZTyOUbp9uopRYzCroHgi4i4dKesIKtg6egoxSJSbU0wNZGSLpqK7ZNyyZGZpJTyA6RugZ3Q386+A+v4qIQ6r8hsVZvIU59AKK5qpgbcIZ0wqJUKsqa0bQPo7EFiEoKGixJBr2ZqfpIGgBZe3siAhgxizoY+-Ib+xSX+-i9Cam5GmmPo1UjKe+iGypYEVYJgnK2WzAlJf+Ks-yUUmyJp9Bl5saQwDYJgTCa0Y+boRyIa0S8U56NaQIZ2ORrQwwaR3oNewEz5EQQAA */\n  createMachine(\n    {\n      context: {\n        capabilities: {} as StandardPlanInitializationData,\n        sizes: undefined,\n        form: {},\n        creationError: undefined,\n      },\n      tsTypes: {} as import(\"./StandardPlanMachine.typegen\").Typegen0,\n      predictableActionArguments: true,\n      schema: {\n        context: {} as StandardPlanMachineContext,\n        events: {} as\n          | { type: \"fieldInvalid\" }\n          | { type: \"nameChange\"; name: string }\n          | { type: \"providerChange\"; provider: CloudProvider }\n          | { type: \"regionChange\"; region: CloudRegion }\n          | { type: \"sizeChange\"; size: Size }\n          | {\n              type: \"selectSubscription\";\n              subscription: MarketplaceSubscription;\n            }\n          | { type: \"selectPrepaid\" }\n          | { type: \"billingChange\" }\n          | { type: \"nameIsValid\" }\n          | { type: \"nameIsInvalid\" }\n          | { type: \"nameIsTaken\" }\n          | { type: \"submit\" }\n          | { type: \"create\" }\n          | { type: \"createSuccess\" }\n          | { type: \"createError\"; error: CreateKafkaInstanceError },\n        services: {} as {\n          getSizes: {\n            data: StandardSizes;\n          };\n        },\n      },\n      initial: \"verifyAvailability\",\n      id: \"standardPlanMachine\",\n      states: {\n        verifyAvailability: {\n          entry: \"setInitialContext\",\n          always: [\n            {\n              cond: \"isOverQuota\",\n              target: \"overQuota\",\n            },\n            {\n              cond: \"isInstanceUnavailable\",\n              target: \"instanceUnavailable\",\n            },\n            {\n              cond: \"isRegionsUnavailable\",\n              target: \"regionsUnavailable\",\n            },\n            {\n              target: \"configuring\",\n            },\n          ],\n        },\n        overQuota: {\n          tags: \"blocked\",\n        },\n        instanceUnavailable: {\n          tags: \"blocked\",\n        },\n        regionsUnavailable: {\n          tags: \"blocked\",\n        },\n        configuring: {\n          type: \"parallel\",\n          states: {\n            status: {\n              initial: \"unsubmitted\",\n              states: {\n                unsubmitted: {\n                  tags: \"unsubmitted\",\n                },\n                submitted: {\n                  entry: \"triggerSubmit\",\n                  tags: \"submitted\",\n                },\n              },\n              on: {\n                create: {\n                  description:\n                    \"Save is enabled all the time, if it's clicked before the form is completely filled out we should show the validation for all errored fields\",\n                  target: \".submitted\",\n                },\n              },\n            },\n            form: {\n              initial: \"invalid\",\n              states: {\n                invalid: {\n                  tags: \"formInvalid\",\n                },\n                valid: {\n                  entry: \"resetCreationErrorMessage\",\n                  tags: \"creatable\",\n                  on: {\n                    fieldInvalid: {\n                      target: \"invalid\",\n                    },\n                    submit: {\n                      target: \"saving\",\n                    },\n                  },\n                },\n                saving: {\n                  entry: [\"resetCreationErrorMessage\", \"triggerSave\"],\n                  tags: \"formSaving\",\n                  on: {\n                    createSuccess: {\n                      target: \"saved\",\n                    },\n                    createError: {\n                      actions: \"setCreationError\",\n                      target: \"invalid\",\n                    },\n                  },\n                },\n                saved: {\n                  type: \"final\",\n                },\n              },\n              on: {\n                fieldInvalid: {\n                  description:\n                    \"sent by the fields when their value change to an invalid value. This will transition the form to the invalid state, to then eventually transition to the valid state if the field state is marked as done (which means that all fields have a valid value selected)\",\n                  target: \".invalid\",\n                },\n              },\n            },\n            fields: {\n              tags: \"configurable\",\n              type: \"parallel\",\n              states: {\n                name: {\n                  initial: \"validate\",\n                  states: {\n                    empty: {\n                      tags: \"nameEmpty\",\n                    },\n                    invalid: {\n                      entry: \"fieldInvalid\",\n                      tags: \"nameInvalid\",\n                    },\n                    valid: {\n                      tags: \"nameValid\",\n                      type: \"final\",\n                    },\n                    validate: {\n                      always: [\n                        {\n                          cond: \"nameIsEmpty\",\n                          target: \"empty\",\n                        },\n                        {\n                          cond: \"nameIsValid\",\n                          target: \"valid\",\n                        },\n                        {\n                          target: \"invalid\",\n                        },\n                      ],\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    nameChange: {\n                      actions: \"setName\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n                provider: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"providerIsValid\",\n                          target: \"valid\",\n                        },\n                        {\n                          target: \"invalid\",\n                        },\n                      ],\n                    },\n                    invalid: {\n                      entry: \"fieldInvalid\",\n                      tags: \"providerInvalid\",\n                    },\n                    valid: {\n                      tags: \"providerValid\",\n                      type: \"final\",\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    providerChange: {\n                      actions: \"setProvider\",\n                      cond: \"didProviderChange\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n                region: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"regionIsValid\",\n                          target: \"valid\",\n                        },\n                        {\n                          target: \"invalid\",\n                        },\n                      ],\n                    },\n                    invalid: {\n                      entry: \"fieldInvalid\",\n                      tags: \"regionInvalid\",\n                    },\n                    valid: {\n                      tags: \"regionValid\",\n                      type: \"final\",\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    providerChange: {\n                      target: \".validate\",\n                    },\n                    regionChange: {\n                      actions: \"setRegion\",\n                      cond: \"didRegionChange\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n                size: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"noProviderOrRegion\",\n                          target: \"idle\",\n                        },\n                        {\n                          cond: \"noSizes\",\n                          target: \"loading\",\n                        },\n                        {\n                          cond: \"emptySizes\",\n                          target: \"error\",\n                        },\n                        {\n                          cond: \"sizeIsDisabled\",\n                          target: \"disabled\",\n                        },\n                        {\n                          cond: \"billingRequiredButNotSelected\",\n                          target: \"waitingForQuota\",\n                        },\n                        {\n                          cond: \"sizeIsOverQuota\",\n                          target: \"overQuota\",\n                        },\n                        {\n                          target: \"valid\",\n                        },\n                      ],\n                    },\n                    idle: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeIdle\",\n                    },\n                    disabled: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeDisabled\",\n                    },\n                    waitingForQuota: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeWaitingForQuota\",\n                    },\n                    overQuota: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeOverQuota\",\n                    },\n                    valid: {\n                      tags: \"sizeValid\",\n                      type: \"final\",\n                    },\n                    error: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeError\",\n                    },\n                    loading: {\n                      description:\n                        \"Fetch the data required to show the available sizes and limits\",\n                      invoke: {\n                        src: \"getSizes\",\n                        onDone: [\n                          {\n                            actions: \"setSizes\",\n                            target: \"validate\",\n                          },\n                        ],\n                        onError: [\n                          {\n                            target: \"error\",\n                          },\n                        ],\n                      },\n                      tags: \"sizeLoading\",\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    providerChange: {\n                      target: \".validate\",\n                    },\n                    regionChange: {\n                      target: \".validate\",\n                    },\n                    sizeChange: {\n                      actions: \"setSize\",\n                      cond: \"didSizeChange\",\n                      target: \".validate\",\n                    },\n                    billingChange: {\n                      target: \".validate\",\n                    },\n                  },\n                },\n                billing: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"onlyPrepaid\",\n                          target: \"prepaidOnly\",\n                        },\n                        {\n                          cond: \"singleSubscription\",\n                          target: \"singleSubscription\",\n                        },\n                        {\n                          cond: \"onlySubscriptions\",\n                          target: \"onlySubscriptions\",\n                        },\n                        {\n                          description:\n                            \"user has both prepaid and marketplace subscriptions\",\n                          target: \"prepaidAndSubscriptions\",\n                        },\n                      ],\n                    },\n                    prepaidOnly: {\n                      description:\n                        \"The user doesn't need to specify any option about the billing. The API will automatically figure out the right thing to do without giving it any information.\",\n                      tags: [\"noBilling\", \"billingValid\"],\n                      entry: \"setBillingToPrepaid\",\n                      type: \"final\",\n                    },\n                    singleSubscription: {\n                      description:\n                        \"The user doesn't need to specify any option about the billing. The API will automatically figure out the right thing to do without giving it any information.\",\n                      tags: [\"noBilling\", \"billingValid\", \"singleSubscription\"],\n                      entry: \"setBillingToSubscription\",\n                      type: \"final\",\n                    },\n                    onlySubscriptions: {\n                      description:\n                        \"More than one subscription exist. The user needs to select one to procede.\",\n                      initial: \"invalid\",\n                      type: \"final\",\n                      states: {\n                        invalid: {},\n                        valid: {\n                          entry: \"triggerBillingChange\",\n                          tags: \"billingValid\",\n                          type: \"final\",\n                        },\n                      },\n                      on: {\n                        selectSubscription: [\n                          {\n                            actions: \"setBillingToSubscription\",\n                            cond: \"matchesSelectedProviderOrRHMarketplaceAndHasQuota\",\n                            target: \".valid\",\n                          },\n                          {\n                            cond: \"noSelectedProvider\",\n                            target: \".valid\",\n                          },\n                        ],\n                      },\n                    },\n                    prepaidAndSubscriptions: {\n                      description:\n                        \"The user has both prepaid quota and one or more subscription to a marketplace. The user needs to select one to procede.\",\n                      initial: \"empty\",\n                      type: \"final\",\n                      states: {\n                        empty: {},\n                        subscription: {\n                          entry: \"triggerBillingChange\",\n                          tags: \"billingValid\",\n                          type: \"final\",\n                        },\n                        prepaid: {\n                          entry: \"triggerBillingChange\",\n                          tags: \"billingValid\",\n                          type: \"final\",\n                        },\n                      },\n                      on: {\n                        selectSubscription: [\n                          {\n                            actions: \"setBillingToSubscription\",\n                            cond: \"matchesSelectedProviderOrRHMarketplaceAndHasQuota\",\n                            target: \".subscription\",\n                          },\n                          {\n                            cond: \"noSelectedProvider\",\n                            target: \".subscription\",\n                          },\n                        ],\n                        selectPrepaid: {\n                          actions: \"setBillingToPrepaid\",\n                          cond: \"hasPrepaidQuota\",\n                          target: \".prepaid\",\n                        },\n                      },\n                    },\n                  },\n                  on: {\n                    providerChange: {\n                      actions: \"unsetSubscription\",\n                      description:\n                        \"If a new provider is selected, deselect any previously selected billing option.\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n              },\n              onDone: {\n                target: \"#standardPlanMachine.configuring.form.valid\",\n              },\n            },\n          },\n          onDone: {\n            target: \"saved\",\n          },\n        },\n        saved: {\n          type: \"final\",\n        },\n      },\n    },\n    {\n      actions: {\n        setInitialContext: assign((context) => {\n          return {\n            form: {\n              ...(context.capabilities.defaultProvider\n                ? onProviderChange(\n                    context.capabilities.availableProviders,\n                    context.capabilities.defaultProvider\n                  )\n                : {}),\n            },\n          };\n        }),\n        fieldInvalid: send(\"fieldInvalid\"),\n        setName: assign((context, { name }) => {\n          if (context.creationError === \"name-taken\") {\n            return {\n              form: { ...context.form, name },\n              creationError: undefined,\n            };\n          }\n          return { form: { ...context.form, name } };\n        }),\n        setProvider: assign((context, { provider }) => {\n          return {\n            form: {\n              ...context.form,\n              ...onProviderChange(\n                context.capabilities.availableProviders,\n                provider\n              ),\n            },\n            sizes: undefined,\n          };\n        }),\n        setRegion: assign((context, { region }) => {\n          if (context.creationError === \"region-unavailable\") {\n            return {\n              form: { ...context.form, region },\n              sizes: undefined,\n              creationError: undefined,\n            };\n          }\n          return {\n            form: {\n              ...context.form,\n              region,\n            },\n            sizes: undefined,\n          };\n        }),\n        setSize: assign((context, { size }) => ({\n          form: {\n            ...context.form,\n            size,\n          },\n        })),\n        setSizes: assign((context, event) => {\n          const sizes = event.data;\n          const smallestSize = sizes.sort((a, b) => a.quota - b.quota)[0];\n          return {\n            sizes,\n            form: {\n              ...context.form,\n              size: smallestSize,\n            },\n          };\n        }),\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        resetCreationErrorMessage: assign((_context) => ({\n          creationError: undefined,\n        })),\n        setCreationError: assign((_context, { error }) => {\n          return {\n            creationError: error,\n          };\n        }),\n        triggerSave: sendParent((context) => {\n          const form = context.form as Required<typeof context.form> &\n            Pick<typeof context.form, \"billing\">;\n          const data: CreateKafkaFormData = {\n            plan: \"standard\",\n            name: form.name,\n            provider: form.provider,\n            region: form.region,\n            sizeId: form.size.id,\n            billing: form.billing,\n          };\n          return {\n            type: \"save\",\n            data,\n          };\n        }),\n        triggerSubmit: send(\"submit\"),\n        triggerBillingChange: send(\"billingChange\"),\n        setBillingToPrepaid: assign((context) => {\n          const form = { ...context.form };\n          form.billing = \"prepaid\";\n          return { form };\n        }),\n        setBillingToSubscription: assign((context, event) => {\n          const form = { ...context.form };\n          if (event.type === \"selectSubscription\") {\n            form.billing = event.subscription;\n          } else {\n            // single subscription, take it from the context\n            const ms = context.capabilities.marketplaceSubscriptions[0];\n            form.billing = {\n              marketplace: ms.marketplace,\n              subscription: ms.subscriptions[0],\n            };\n          }\n          return { form };\n        }),\n        unsetSubscription: assign((context) => {\n          const form = { ...context.form };\n          form.billing = undefined;\n          return { form };\n        }),\n      },\n      guards: {\n        isOverQuota: ({ capabilities }) =>\n          capabilities === undefined ||\n          capabilities.instanceAvailability === \"out-of-quota\",\n        isInstanceUnavailable: ({ capabilities }) =>\n          capabilities === undefined ||\n          capabilities.instanceAvailability === \"instance-unavailable\",\n        isRegionsUnavailable: ({ capabilities }) =>\n          capabilities === undefined ||\n          capabilities.instanceAvailability === \"regions-unavailable\",\n        nameIsEmpty: ({ form }) =>\n          form.name === undefined || form.name.length === 0,\n        nameIsValid: ({ form }) =>\n          /^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(form.name || \"\"),\n        providerIsValid: ({ form, capabilities }) => {\n          const selectedProviderInfo = capabilities?.availableProviders.find(\n            (p) => p.id === form.provider\n          );\n          return (\n            // must have loaded a list of providers\n            (capabilities?.availableProviders || []).length > 0 &&\n            // must have selected a provider\n            selectedProviderInfo !== undefined\n          );\n        },\n        regionIsValid: ({ form, capabilities }) => {\n          const selectedProviderInfo = capabilities?.availableProviders.find(\n            (p) => p.id === form.provider\n          );\n          return (\n            // must have selected a region\n            form.region !== undefined &&\n            // the region must be included in the capabilities for the provider\n            selectedProviderInfo?.regions.find((r) => r.id === form.region) !==\n              undefined\n          );\n        },\n        noProviderOrRegion: ({ form }) =>\n          form.provider === undefined || form.region === undefined,\n        noSizes: ({ sizes }) => sizes === undefined,\n        emptySizes: ({ sizes }) => sizes !== undefined && sizes.length === 0,\n        sizeIsDisabled: ({ form, capabilities }) => {\n          if (capabilities === undefined) return true;\n          return form.size?.isDisabled === true;\n        },\n        billingRequiredButNotSelected: ({ form }, _, meta) => {\n          if (meta.state.hasTag(\"noBilling\")) {\n            return false;\n          }\n          return form.billing === undefined;\n        },\n        sizeIsOverQuota: ({ form, capabilities }) => {\n          if (capabilities === undefined || !form.size) return true;\n          const availableQuota =\n            form.billing === \"prepaid\" || form.billing === undefined\n              ? capabilities.remainingPrepaidQuota\n              : capabilities.remainingMarketplaceQuota;\n          if (!availableQuota) return true;\n          return form.size.quota > availableQuota;\n        },\n        didProviderChange: (context, event) =>\n          context.form.provider !== event.provider,\n        didRegionChange: (context, event) =>\n          context.form.region !== event.region,\n        didSizeChange: (context, event) =>\n          context.form.size?.id !== event.size.id,\n        onlyPrepaid: (context) =>\n          context.capabilities.marketplaceSubscriptions.length === 0,\n        singleSubscription: (context) =>\n          context.capabilities.remainingPrepaidQuota === undefined &&\n          context.capabilities.marketplaceSubscriptions.flatMap(\n            (m) => m.subscriptions\n          ).length === 1,\n        onlySubscriptions: (context) =>\n          context.capabilities.remainingPrepaidQuota === undefined &&\n          context.capabilities.marketplaceSubscriptions.length > 0,\n        matchesSelectedProviderOrRHMarketplaceAndHasQuota: (\n          { form, capabilities },\n          { subscription }\n        ) =>\n          capabilities.remainingMarketplaceQuota !== undefined &&\n          capabilities.remainingMarketplaceQuota > 0 &&\n          (subscription.marketplace === \"rhm\" ||\n            form.provider === subscription.marketplace),\n        hasPrepaidQuota: (context) =>\n          context.capabilities.remainingPrepaidQuota !== undefined &&\n          context.capabilities.remainingPrepaidQuota > 0,\n        noSelectedProvider: ({ form }) => form.provider === undefined,\n      },\n    }\n  );\n","import { CloudProvider, CloudRegion } from \"ui-models/src/models/kafka\";\nimport { assign, createMachine, send, sendParent } from \"xstate\";\nimport {\n  CreateKafkaFormData,\n  CreateKafkaInstanceError,\n  TrialPlanInitializationData,\n  TrialSizes,\n} from \"../types\";\nimport { onProviderChange } from \"./shared\";\n\nexport type TrialPlanMachineContext = {\n  // initial data coming from the APIs\n  capabilities: TrialPlanInitializationData;\n\n  // what the user is selecting\n  form: {\n    name?: string;\n    provider?: CloudProvider;\n    region?: CloudRegion;\n  };\n\n  // based on the form.provider and form.region selection\n  sizes: TrialSizes | undefined;\n\n  creationError: CreateKafkaInstanceError | undefined;\n};\n\nexport const TrialPlanMachine =\n  /** @xstate-layout N4IgpgJg5mDOIC5QBUBOBLAhgGwArcwDsBZTAYwAt1CwA6ANzAwDMBPAQXs3QICMf0AF1YBiRKAAOAe1hD0UwuJAAPRACYAbAA4AnLQ0AGNQBYArBo0BmHQHYNNywBoQrRDoO1bARjWmv54y8DY18AX1DnNCw8AhJyKhpaMgVmdCgAVwxCKFpYQUxBdNgRMlQwArAlaVlBeUUkFUQgtWdXBFNLY1o7LRDTG1NTLVNjG3DIjBx8IlJKajpkwlSMrJzmKVQAWwYcdAgRVLBsCABJQi5sPaqZOQUlVQQvLRs9NR1TI1Mdey0tNS1Wk1nqZaJodIEbEYTAZ7OMQFEprFZgkFik0plqGsNtsLnsSmUKtcanV7kCXqD3p9vjZfv9AQg1AYhrQDF4fH9jJ0aVo4QiYjN4vMkmiVpjaOstrlMPRMfjyoIwABldJkMhweANaq3eqgB5qSxqGwsgwmgzPHRBGxeemMrQeCwfAY6NT6s2mXmTflxOaJRbLDHZcXYqUy7JyioAUVQqA2RO1pIZBqNppN5st1pcTR04O6gX+9hMefdEXhnum3pRwqW6NWQa2B3QR1O512EDjtTuDQe-i+tD+Jpdxm0NhdpnpXlGXTNnIt-RCnOLE2i5eRQr9NbFh2OsFohEwmzouIgFTEmpuHZ1jQQxmG3VHfjUE7Zb3HGlGoK8Vo0-ksli0Vh0D1lyRQVfRFAM1kbbdd33MADmxZVeE2IR2xJLsmgNccbECWgvAsGwBkhBwb0sIDEQFH1UWrUVAy3CAdz3A8REYsAAGEKCIGBUM7XUMJaTNHg0QZQU5Axf0MYxRmwsivVXMDqIg8UoPo2gJBjGUICYHZLmPBVT0kc80N49o3lBQxgnBLkmQBATH20Wghy8WxnS0IJLA0GSV1Aqj-VrOidzUqQNKYeCtkQ5DBG4y9u0w2zLCePs33cxkmW0IdPJAyiq18zdlIC9S9hCwLgtQdjOMqM9iR4q8vFito7JBd4XhpGF-FGDKKMrdcaMgpsdzKKA6m0vYTyihNTEfY0TH-aFzGCccni6G8DGzf9WSE9KSz5Lysu6xT-NoAa6lCzZwpQyr43Qx46qaN4vFoawR1HT8Jv6DqKzXcC-Lyw6wEGhQRGKwrSo47IKoMqror48cTEsByOhItlLD8P93rknyN1on6joBnHCDKsGxqu2r+LaIJ3FoEYRytYYkZCNHvOyzHeug2QAC9D1bUaLovBNnjh2xnn-A1hgmmz6rtLRugMZrhhvJzF1LYDOs+hTvr63J0A52hsCkTAIFlCAFDoah6CkABrOhtsyrqvtyjX2boXX9cxBBTakMgCjqABtAwAF0ieM4x3k8O0jCc2qNDum0Bg0bpKXihxvmsYwGd2u2sYdrWnb1g2wyYGNUFUghBAlbZrZV+Scsz1ns513PXfdz2L19gOeaMq9g8asPHwtZKLRjs0+xRv5DHJzQ09ttX7drjmTrOyL2+qmLSfUC0uhMDRsysbRNH8SfVerlmVMdwGCs0kHysDmqboQSxgnuvD9THq1szCLayxtw-maUrO57xgmXEl5Q2uqvO+Zo9BBCsJCSwI5rA8g-srD6Vcf7+REEbRIeQKi0ArsgjGPVf7bmvt2QI90-BCx0PFWBXcbQPweoMLeidHyfAPignq6Dja5HyAqHBn9K74IgsQ9Q2g9CGBMOYACdgHBYU5KHay2FkbOhdOEEshApCaQ1CgPheCGBMHQGwTg3A+ACGEEI68YC8J6AtBHew35-wWDUKwugghPQAFVYCQDMW8ewuE+hsjZIMXwr4rFsgtLYp4Fgo5ONoC46Iri9xcB4JgXg2BwYgC1LzK6IQbR-j7FoJMYkhIRxpNEvGsB4nSiMck1JZjskCSCB4cEMtOQiNGDLLw0S9q1iwYUHc6RCCwHSEhIQCo2zAITM0ekQ4QTNSfhCbM9NEHkR0V0sUPSii5CGRFUZXj8mUwaayP4eFkb9HpNoOGkIVodBePYMSitcHoyZgQ9Zmj0mGWXogGk9I-weD+EMbMZpWTiVTks2SjNVm0WDKbVsXjg5xxlv+Zyj4CIWMRaCBhgwmQjD+KRUFO0p5HzrDiGF4ziaDD0P2KEQ5nijloStRKMIvjDmGMjTpGcsSSlgNKTEXiTRGleiaCaFprF0qlhNBWLomTHI8nir+bD9rBi5YwMZENLrGRMN8FkNIt4vGRSOWh2F9Ao1qu8Do+SZVLmWY8iFHLNhmJ-CCSlg5hy0vqX+SBtV2TPz-G8Nl08a4qRYrQfpggpAqgoJ40lxl-BqFBLoWBFhYEwn1E4epLwPVYr+K5dN9ztHWvZYQwNsFaBgE2BIUxUarwjilkJAYmh7DIxTVhTQuF+gcjsJQ38YxZX8KeftH6QboU6XtbfJysCWQdGnE1CaMs-WEoOkGo89rDUumZdmfof48Ljn-FLM0Tw7JOQsHO1BA7i1HkJJWh4nRY0WgGHhXQxhpzGGbXHfwNITAdt-LA49BCF2wXtWacc5hY3iPBEK5ovQf39o1kDC+wbCChvDZG1VmTo2Gusj4OcDghh2ByXYPse6wl3u-N2y1YL07+uPvlIKwNhq6TSRkjuV7-zww+P4NkQ4CKpvqi6e6IRmm6EZOu0jSsrXgoLQdWDWkh1XEvU0Do3RhzBzZEYb4ZgbSSRmS8MwbH77KJ7SsiTP0pNFyXXJhAd7KYOA5OSnQdowEukmvx7CgmVpNSg+raCJmAPi3UIC0O2gLK6HYx5meKk8bwcQ5QZDbzIYTK3p4N4nRAgfHzDCccQ5XjYW0AreKPxQsBv6n9Ia56FRmNgVLJy2E-DOiZPFHQMNx0zhHBxoSD6CtUd+v9QgtAZMqti2qmqwd9DWGpCjF0sCxxuuG50Fa35nQ-mkgZ-NlHC1Fe63RsxDgPB4Q+H+ecjIXz1P1EaGctigXDBEw88Tq2Dp4x8+OQVVnzK0yTO5Dra3Nba1Kwx95ID7CiPyXYL4wdDTfBtH3EbFlvxfsZLisj+Lv6-p+o7XrEAanmY4yCMehoTCHqEjaX4lXQeb38NvD7B1UdmZQ0x9QCnfCuXih8QYQQOgQ5HLhC0JohLaHwrmpBK350o7rgXWM5mLC7u-GCTkkltBTfqvYI0yMALzmnVdvNN2hd-xzi7bII6HP2C6GlTk+S-k+Ap8LjmD3bL-O6J6gYwRpn72W5rk9fUzG9HpJQ2NElqsvUCPD0T5GCXMzMSMb5Mth5Dn1N8Wm2holKpi4xj5DJ7OeEKbobT2ExJYXHd8XeIwRG2HVwL7y9rfOPAQeEIAA */\n  createMachine(\n    {\n      context: {\n        capabilities: {} as TrialPlanInitializationData,\n        sizes: undefined,\n        form: {},\n        creationError: undefined,\n      },\n      tsTypes: {} as import(\"./TrialPlanMachine.typegen\").Typegen0,\n      predictableActionArguments: true,\n      schema: {\n        context: {} as TrialPlanMachineContext,\n        events: {} as\n          | { type: \"fieldInvalid\" }\n          | { type: \"nameChange\"; name: string }\n          | { type: \"providerChange\"; provider: CloudProvider }\n          | { type: \"regionChange\"; region: CloudRegion }\n          | { type: \"nameIsValid\" }\n          | { type: \"nameIsInvalid\" }\n          | { type: \"nameIsTaken\" }\n          | { type: \"submit\" }\n          | { type: \"create\" }\n          | { type: \"createSuccess\" }\n          | { type: \"createError\"; error: CreateKafkaInstanceError },\n        services: {} as {\n          getSizes: {\n            data: TrialSizes;\n          };\n        },\n      },\n      initial: \"verifyAvailability\",\n      id: \"TrialPlanMachine\",\n      states: {\n        verifyAvailability: {\n          entry: \"setInitialContext\",\n          always: [\n            {\n              cond: \"isTrialUsed\",\n              target: \"trialUsed\",\n            },\n            {\n              cond: \"isTrialUnavailable\",\n              target: \"trialUnavailable\",\n            },\n            {\n              target: \"configuring\",\n            },\n          ],\n        },\n        trialUsed: {\n          tags: \"blocked\",\n        },\n        trialUnavailable: {\n          tags: \"blocked\",\n        },\n        regionsUnavailable: {\n          tags: \"blocked\",\n        },\n        configuring: {\n          type: \"parallel\",\n          states: {\n            status: {\n              initial: \"unsubmitted\",\n              states: {\n                unsubmitted: {\n                  tags: \"unsubmitted\",\n                },\n                submitted: {\n                  entry: \"triggerSubmit\",\n                  tags: \"submitted\",\n                },\n              },\n              on: {\n                create: {\n                  description:\n                    \"Save is enabled all the time, if it's clicked before the form is completely filled out we should show the validation for all errored fields\",\n                  target: \".submitted\",\n                },\n              },\n            },\n            form: {\n              initial: \"invalid\",\n              states: {\n                invalid: {\n                  tags: \"formInvalid\",\n                },\n                valid: {\n                  entry: \"resetCreationErrorMessage\",\n                  on: {\n                    fieldInvalid: {\n                      target: \"invalid\",\n                    },\n                    submit: {\n                      target: \"saving\",\n                    },\n                  },\n                },\n                saving: {\n                  entry: [\"resetCreationErrorMessage\", \"triggerSave\"],\n                  tags: \"formSaving\",\n                  on: {\n                    createSuccess: {\n                      target: \"saved\",\n                    },\n                    createError: {\n                      actions: \"setCreationError\",\n                      target: \"invalid\",\n                    },\n                  },\n                },\n                saved: {\n                  type: \"final\",\n                },\n              },\n              on: {\n                fieldInvalid: {\n                  description:\n                    \"sent by the fields when their value change to an invalid value. This will transition the form to the invalid state, to then eventually transition to the valid state if the field state is marked as done (which means that all fields have a valid value selected)\",\n                  target: \".invalid\",\n                },\n              },\n            },\n            fields: {\n              tags: \"configurable\",\n              type: \"parallel\",\n              states: {\n                name: {\n                  initial: \"validate\",\n                  states: {\n                    empty: {\n                      tags: \"nameEmpty\",\n                    },\n                    invalid: {\n                      entry: \"fieldInvalid\",\n                      tags: \"nameInvalid\",\n                    },\n                    valid: {\n                      tags: \"nameValid\",\n                      type: \"final\",\n                    },\n                    validate: {\n                      always: [\n                        {\n                          cond: \"nameIsEmpty\",\n                          target: \"empty\",\n                        },\n                        {\n                          cond: \"nameIsValid\",\n                          target: \"valid\",\n                        },\n                        {\n                          target: \"invalid\",\n                        },\n                      ],\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    nameChange: {\n                      actions: \"setName\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n                provider: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"providerIsValid\",\n                          target: \"valid\",\n                        },\n                        {\n                          target: \"invalid\",\n                        },\n                      ],\n                    },\n                    invalid: {\n                      entry: \"fieldInvalid\",\n                      tags: \"providerInvalid\",\n                    },\n                    valid: {\n                      tags: \"providerValid\",\n                      type: \"final\",\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    providerChange: {\n                      actions: \"setProvider\",\n                      cond: \"didProviderChange\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n                region: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"regionIsValid\",\n                          target: \"valid\",\n                        },\n                        {\n                          target: \"invalid\",\n                        },\n                      ],\n                    },\n                    invalid: {\n                      entry: \"fieldInvalid\",\n                      tags: \"regionInvalid\",\n                    },\n                    valid: {\n                      tags: \"regionValid\",\n                      type: \"final\",\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    providerChange: {\n                      target: \".validate\",\n                    },\n                    regionChange: {\n                      actions: \"setRegion\",\n                      cond: \"didRegionChange\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n                size: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"noProviderAndRegion\",\n                          target: \"idle\",\n                        },\n                        {\n                          cond: \"noSizes\",\n                          target: \"loading\",\n                        },\n                        {\n                          cond: \"emptySizes\",\n                          target: \"error\",\n                        },\n                        {\n                          target: \"valid\",\n                        },\n                      ],\n                    },\n                    idle: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeIdle\",\n                    },\n                    valid: {\n                      tags: \"sizeValid\",\n                      type: \"final\",\n                    },\n                    error: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeError\",\n                    },\n                    loading: {\n                      description:\n                        \"Fetch the data required to show the available sizes and limits\",\n                      invoke: {\n                        src: \"getSizes\",\n                        onDone: [\n                          {\n                            actions: \"setSizes\",\n                            target: \"validate\",\n                          },\n                        ],\n                        onError: [\n                          {\n                            target: \"error\",\n                          },\n                        ],\n                      },\n                      tags: \"sizeLoading\",\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    providerChange: {\n                      target: \".validate\",\n                    },\n                    regionChange: {\n                      target: \".validate\",\n                    },\n                  },\n                },\n              },\n              onDone: {\n                target: \"#TrialPlanMachine.configuring.form.valid\",\n              },\n            },\n          },\n          onDone: {\n            target: \"saved\",\n          },\n        },\n        saved: {\n          type: \"final\",\n        },\n      },\n    },\n    {\n      actions: {\n        setInitialContext: assign((context) => {\n          return {\n            form: {\n              ...(context.capabilities.defaultProvider\n                ? onProviderChange(\n                    context.capabilities.availableProviders,\n                    context.capabilities.defaultProvider\n                  )\n                : {}),\n            },\n          };\n        }),\n        fieldInvalid: send(\"fieldInvalid\"),\n        setName: assign((context, { name }) => {\n          if (context.creationError === \"name-taken\") {\n            return {\n              form: { ...context.form, name },\n              creationError: undefined,\n            };\n          }\n          return { form: { ...context.form, name } };\n        }),\n        setProvider: assign((context, { provider }) => {\n          return {\n            form: {\n              ...context.form,\n              ...onProviderChange(\n                context.capabilities.availableProviders,\n                provider\n              ),\n            },\n            sizes: undefined,\n          };\n        }),\n        setRegion: assign((context, { region }) => {\n          if (context.creationError === \"region-unavailable\") {\n            return {\n              form: { ...context.form, region },\n              sizes: undefined,\n              creationError: undefined,\n            };\n          }\n          return {\n            form: {\n              ...context.form,\n              region,\n            },\n            sizes: undefined,\n          };\n        }),\n        setSizes: assign((_context, event) => {\n          const sizes = event.data;\n          return {\n            sizes,\n          };\n        }),\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        resetCreationErrorMessage: assign((_context) => ({\n          creationError: undefined,\n        })),\n        setCreationError: assign((_context, { error }) => ({\n          creationError: error,\n        })),\n        triggerSave: sendParent((context) => {\n          const form = context.form as Required<typeof context.form>;\n          const data: CreateKafkaFormData = {\n            plan: \"developer\",\n            name: form.name,\n            provider: form.provider,\n            region: form.region,\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            sizeId: context.sizes!.trial.id,\n            billing: undefined,\n          };\n          return {\n            type: \"save\",\n            data,\n          };\n        }),\n        triggerSubmit: send(\"submit\"),\n      },\n      guards: {\n        isTrialUsed: ({ capabilities }) =>\n          capabilities === undefined ||\n          capabilities.instanceAvailability === \"used\",\n        isTrialUnavailable: ({ capabilities }) =>\n          capabilities === undefined ||\n          capabilities.instanceAvailability === \"unavailable\",\n        nameIsEmpty: ({ form }) =>\n          form.name === undefined || form.name.length === 0,\n        nameIsValid: ({ form }) =>\n          /^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(form.name || \"\"),\n        providerIsValid: ({ form, capabilities }) => {\n          const selectedProviderInfo = capabilities?.availableProviders.find(\n            (p) => p.id === form.provider\n          );\n          return (\n            // must have loaded a list of providers\n            (capabilities?.availableProviders || []).length > 0 &&\n            // must have selected a provider\n            selectedProviderInfo !== undefined\n          );\n        },\n        regionIsValid: ({ form, capabilities }) => {\n          const selectedProviderInfo = capabilities?.availableProviders.find(\n            (p) => p.id === form.provider\n          );\n          return (\n            // must have selected a region\n            form.region !== undefined &&\n            // the region must be included in the capabilities for the provider\n            selectedProviderInfo?.regions.find((r) => r.id === form.region) !==\n              undefined\n          );\n        },\n        noProviderAndRegion: ({ form }) =>\n          form.provider === undefined || form.region === undefined,\n        noSizes: ({ sizes }) => sizes === undefined,\n        emptySizes: ({ sizes }) =>\n          sizes !== undefined && sizes.standard.length === 0,\n        didProviderChange: (context, event) =>\n          context.form.provider !== event.provider,\n        didRegionChange: (context, event) =>\n          context.form.region !== event.region,\n      },\n    }\n  );\n","import type { CloudProvider, CloudRegion } from \"ui-models/src/models/kafka\";\nimport { assign, createMachine, EventFrom, forwardTo, send } from \"xstate\";\nimport type {\n  CloudProvidersInfo,\n  CreateKafkaFormData,\n  CreateKafkaInitializationData,\n  CreateKafkaInstanceError,\n  StandardPlanInitializationData,\n  StandardSizes,\n  TrialPlanInitializationData,\n  TrialSizes,\n} from \"../types\";\nimport {\n  StandardPlanMachine,\n  StandardPlanMachineContext,\n} from \"./StandardPlanMachine\";\nimport { TrialPlanMachine, TrialPlanMachineContext } from \"./TrialPlanMachine\";\n\ntype Quota =\n  | Pick<\n      StandardPlanInitializationData,\n      | \"plan\"\n      | \"remainingPrepaidQuota\"\n      | \"marketplaceSubscriptions\"\n      | \"remainingMarketplaceQuota\"\n      | \"instanceAvailability\"\n    >\n  | Pick<TrialPlanInitializationData, \"plan\" | \"instanceAvailability\">;\n\nexport type CreateKafkaInstanceMachineContext = {\n  quota: Quota | undefined;\n  providers: CloudProvidersInfo | undefined;\n  defaultProvider: CloudProvider | undefined;\n  capabilities: CreateKafkaInitializationData | undefined;\n};\n\nconst CreateKafkaInstanceMachine =\n  /** @xstate-layout N4IgpgJg5mDOIC5QGMBOYCGAXMBpDAZgNYYCSAdrFhucmAHQA2A9hhAJblT0COArs2r1kACzDIinKAAIqNCBlQRp-QRgDEYVKmap6AB0bYCugLbD02PIRIU5tBizZTeAoaPGSus6uQVKVNwwETgA3ZmRsdmZyAG0ABgBdRFB9Zlh2LGjyFJAAD0QAFniAJnp4gGYAdkKATgAOeqr4qvrCgFYAGhAAT0QANir++n769tqq2sKARhKKjsKAX0XutEwcfGIySl86JlYOLlc1YTEJKR95RWVVanV7fxug6QxQjHYjACNGMFy0jKyMVyBQQxTKlRqDSaLTaXV6iHG8XoVXahX6UyqJVqJX6-WWq0sGxs23seych24twwp08Fwe10CanUzD4WGkzAIlz8DKpf3SmWywKKpXK1TqjWarQ63T6CHa8UK9Hqcw6JUK6palXxIDWVk2th2NDJBxcVJp5289ICVPU5GYXMejOoLzeHww31+SBA-wFQK9ILBoshEph0vhoPaw2hFRKasKbQa0yWKx1hOsWzsu0cJqOZqtEHUfIBgv9iCTU2RkZj03RYsjMoGyvo0yG40KJSq0wq02m9W1uqJGcNDn2zlzQXoEDAoTALH0WkLXp9gJypYQ5cVKP61drNXr4faFSRJVmdUmasjvf7af1JKzo4px3cZy8MinM7nWhd7y+H0yPU0bRdAMIwsBMVBzAHdMDVJbMx0pCcPAtN9p1nZh51Qb83U+P8sB6EJyHCSIVwSZIl35FchQQWpanaeh4y7JN5gqbFZgbOU1WRE96m3Bp+lRKoKmvdZoLvI04MfM0kNfaR3zQjCsN-Rh-3UOTP0wvhYEgItfVXUAQRouiGO7QpmNYkp2NMqolXqWZcSPCpRn6NFhL1YlM3Eh9TUQl8LjU9Cv1eH93VwgD-IUoLsJ+HTKLXQz6NskyzJPCzwwqdppnoWj4niaZ2kPepaiTaZXMHGD73JFwCDALBRAufQdFCdgp1QWB1Aa5gmpa2AXj8aR0CgbIesir5ovI4s-X0staNqegjzGcZ+hKHjeyqdj2jGcplu4moFSqKpStEjyR0qo5qtqkR6sa5qtDarQdD0QxjDMCwRNvY7jXg+hzrq7wOq626CKIqIYlImKSym9cMRsiY0RmaYFXiOFZUKfa5rqRy5mmWp4kGdpDve4dPsfH7Lr+67uvainbvZTCBqG6Q+HIEb3TG1IKIh-Jpsjeh2k7XHOw7QqWnY0Z6mbapakGNVqgR-GUygwnYK8rhVJiBg5BwV63KHZXTqgcHJq5hASlROj+lKCp6kqdUVvYq3Mr3ds0UaPLZgJ9yiY13xHSe8h6Gan57leT12YmvTjaxbd6NM+NDIVdLCkskUFmxyZt2cwYPd1+982kP36FgV4pHUKCAGU+GQOhYHgcbdKoxOjKR0p6nmYXlvt1Fyn6Lt1W7E9Jkc7Pys8vOC6LprVaggBRIDUENiOQSjioY7b+PTNRe2a152NbLy03M7y4exJHcKvwLwOwGDmcF6orFWl5i2Nt7toEYqUWpayrt5SW+z4ls4+H0GBn0wuPYuU80wVyrnAWuYd65rkbvRBUtQ6x9zaKLeMO8WhDB7PEKEtRAFe0nKhdS+cjD+wniXGec9b5rnvuLSMSNErxhmJUUWCMsrKmWngsEuJ5YpjtFOWBqY3qez1jmBCJxpJ0h9jyIItDIYI1SrKSM4tW6dmVB0TsaISoKxvGIiqEinzUnzAo42zRxYojmD3FEtk+bTFFkMZskYcS9mfiwwh4ivpmhAWYkEswGg2RwSxJosxSjrU4tjAePcEY8SKp4wx3ifK0m8CAxSIVlJ4T8QMfic1lrFVaMqeYDjwztjojxHhsYOxW1ssmAkoic6eX1sY7JCBWjsQ7LNKWjRKiLRxmieW9SdYjxOkY0mV1Oo3Vaq0msCoY7FCGOlWMsxkYIkxMiHh7RYyMPjEJPRDSRnExcJYCAso4GxUhrGQY5QMpjCSpedaExkRND5jorEFQ9lDLKifI5XBWmb3DC2TKlRGLVCxBeDoCTR49CoGAUwjNmaulGqHb0HMjYgkciiLK+UUFWRxt2VZbT1mt1GK0Fo-EOx4n2cMn53srgBAvhANmqLw53yaIqfi4xsQdnyu2d+aVqjONbmna2OJuxQpHGPchhdwEGzrhc42MZBXYwmD3CE-F+j21jCMZy8Ytxdlom0CVewpU0FacteUIwcXcpRKiOY7FsYrzBdbeMhUWJt2NcAkhAVQHSsvuaxos19rzUxelFsyiBjdhGC2UYLY4k9l0V8o6RC0lgMnnK85nMMVVPKJo2GbiirsOsrMd1uU1SWzqSImlQDiEfh9WQs18qs2IGWrk4N-9Q0ZUxJZJoSolWVBylYwqnrhDMFMIYGqKLlzNoQNUf+SomFoP2p2Ht1lcZ5Roj2IW4rqXfKAa0o87EaI3JyhtQS2Ntyo2WMsIAA */\n  createMachine(\n    {\n      context: {\n        providers: undefined,\n        defaultProvider: undefined,\n        quota: undefined,\n        capabilities: undefined,\n      },\n      predictableActionArguments: true,\n      tsTypes: {} as import(\"./CreateKafkaInstanceMachine.typegen\").Typegen0,\n      schema: {\n        context: {} as CreateKafkaInstanceMachineContext,\n        events: {} as\n          | {\n              type: \"standard quota available\";\n              quota: Pick<\n                StandardPlanInitializationData,\n                | \"remainingPrepaidQuota\"\n                | \"remainingMarketplaceQuota\"\n                | \"marketplaceSubscriptions\"\n              >;\n            }\n          | {\n              type: \"out of standard quota\";\n              quota: Pick<\n                StandardPlanInitializationData,\n                \"marketplaceSubscriptions\"\n              >;\n            }\n          | {\n              type: \"no standard quota available\";\n              hasTrialQuota: boolean;\n            }\n          | {\n              type: \"trial available\";\n              capabilities: TrialPlanInitializationData;\n            }\n          | { type: \"trial used\" }\n          | { type: \"developer available\" }\n          | { type: \"developer used\" }\n          | { type: \"developer unavailable\" }\n          | {\n              type: \"providers and regions available\";\n              providers: CloudProvidersInfo;\n              defaultProvider: CloudProvider | undefined;\n            }\n          | { type: \"providers or regions unavailable\" }\n          | { type: \"save\"; data: CreateKafkaFormData }\n          | { type: \"createSuccess\" }\n          | { type: \"createError\"; error: CreateKafkaInstanceError },\n        services: {} as {\n          checkStandardQuota: {\n            data: never;\n          };\n          checkDeveloperAvailability: {\n            data: never;\n          };\n          fetchProvidersWithRegions: {\n            data: never;\n          };\n          standardPlan: {\n            data: StandardPlanMachineContext;\n          };\n          trialPlan: {\n            data: TrialPlanMachineContext;\n          };\n        },\n      },\n      id: \"createKafkaInstance\",\n      initial: \"loading\",\n      states: {\n        loading: {\n          description: \"Fetch the data required to drive the creation flow\",\n          tags: \"loading\",\n          initial: \"quota\",\n          states: {\n            quota: {\n              initial: \"checking standard quota\",\n              states: {\n                \"checking standard quota\": {\n                  invoke: {\n                    src: \"checkStandardQuota\",\n                    onError: [\n                      {\n                        actions: \"setStandardUnavailable\",\n                        target: \"standard\",\n                      },\n                    ],\n                  },\n                  on: {\n                    \"standard quota available\": {\n                      actions: \"setStandardAvailable\",\n                      target: \"standard\",\n                    },\n                    \"out of standard quota\": {\n                      actions: \"setStandardOutOfQuota\",\n                      target: \"standard\",\n                    },\n                    \"no standard quota available\": {\n                      target: \"checking developer availability\",\n                    },\n                  },\n                },\n                standard: {\n                  type: \"final\",\n                  always: {\n                    target: \"#createKafkaInstance.loading.fetching providers\",\n                  },\n                },\n                developer: {\n                  type: \"final\",\n                  always: {\n                    target: \"#createKafkaInstance.loading.fetching providers\",\n                  },\n                },\n                \"checking developer availability\": {\n                  invoke: {\n                    src: \"checkDeveloperAvailability\",\n                    onError: [\n                      {\n                        actions: \"setDeveloperUnavailable\",\n                        target: \"developer\",\n                      },\n                    ],\n                  },\n                  on: {\n                    \"developer used\": {\n                      actions: \"setDeveloperUsed\",\n                      target: \"developer\",\n                    },\n                    \"developer available\": {\n                      actions: \"setDeveloperAvailable\",\n                      target: \"developer\",\n                    },\n                    \"developer unavailable\": {\n                      actions: \"setDeveloperUnavailable\",\n                      target: \"developer\",\n                    },\n                  },\n                },\n              },\n            },\n            \"fetching providers\": {\n              invoke: {\n                src: \"fetchProvidersWithRegions\",\n                onError: [\n                  {\n                    actions: \"setProvidersOrRegionsUnavailable\",\n                    target: \"ready\",\n                  },\n                ],\n              },\n              on: {\n                \"providers and regions available\": {\n                  actions: \"setProviders\",\n                  target: \"ready\",\n                },\n                \"providers or regions unavailable\": {\n                  actions: \"setProvidersOrRegionsUnavailable\",\n                  target: \"ready\",\n                },\n              },\n            },\n            ready: {\n              type: \"final\",\n              entry: \"setCapabilities\",\n            },\n          },\n          onDone: [\n            {\n              cond: \"standard plan\",\n              target: \"standard plan\",\n            },\n            {\n              cond: \"developer plan\",\n              target: \"developer plan\",\n            },\n            {\n              target: \"system unavailable\",\n            },\n          ],\n        },\n        \"system unavailable\": {\n          tags: \"systemUnavailable\",\n          type: \"final\",\n        },\n        \"standard plan\": {\n          invoke: {\n            src: \"standardPlan\",\n            id: \"standardPlanService\",\n          },\n          tags: \"standardPlan\",\n          initial: \"idle\",\n          states: {\n            idle: {\n              on: {\n                save: {\n                  target: \"saving\",\n                },\n              },\n            },\n            saving: {\n              invoke: {\n                src: \"createInstance\",\n              },\n              tags: \"saving\",\n              on: {\n                createSuccess: {\n                  target: \"#createKafkaInstance.complete\",\n                },\n                createError: {\n                  actions: \"notifyCreateErrorToStandardPlan\",\n                  target: \"idle\",\n                },\n              },\n            },\n          },\n        },\n        \"developer plan\": {\n          invoke: {\n            src: \"trialPlan\",\n            id: \"trialPlanService\",\n          },\n          tags: \"trialPlan\",\n          initial: \"idle\",\n          states: {\n            idle: {\n              on: {\n                save: {\n                  target: \"saving\",\n                },\n              },\n            },\n            saving: {\n              invoke: {\n                src: \"createInstance\",\n              },\n              tags: \"saving\",\n              on: {\n                createSuccess: {\n                  target: \"#createKafkaInstance.complete\",\n                },\n                createError: {\n                  actions: \"notifyCreateErrorToTrialPlan\",\n                  target: \"idle\",\n                },\n              },\n            },\n          },\n        },\n        complete: {\n          type: \"final\",\n        },\n      },\n    },\n    {\n      actions: {\n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        setDeveloperAvailable: assign((_) => ({\n          quota: {\n            plan: \"developer\" as const,\n            instanceAvailability: \"available\" as const,\n          },\n        })),\n        setDeveloperUnavailable: assign((_) => ({\n          quota: {\n            plan: \"developer\" as const,\n            instanceAvailability: \"unavailable\" as const,\n          },\n        })),\n        setDeveloperUsed: assign((_) => ({\n          quota: {\n            plan: \"developer\" as const,\n            instanceAvailability: \"used\" as const,\n          },\n        })),\n        setStandardAvailable: assign((_, event) => ({\n          quota: {\n            plan: \"standard\" as const,\n            instanceAvailability: \"available\" as const,\n            remainingPrepaidQuota: event.quota.remainingPrepaidQuota,\n            marketplaceSubscriptions: event.quota.marketplaceSubscriptions,\n            remainingMarketplaceQuota: event.quota.remainingMarketplaceQuota,\n          },\n        })),\n        setStandardOutOfQuota: assign((_, event) => ({\n          quota: {\n            plan: \"standard\" as const,\n            instanceAvailability: \"out-of-quota\" as const,\n            marketplaceSubscriptions: event.quota.marketplaceSubscriptions,\n            remainingMarketplaceQuota: 0,\n            remainingPrepaidQuota: 0,\n          },\n        })),\n        setStandardUnavailable: assign((_) => ({\n          quota: {\n            plan: \"standard\" as const,\n            instanceAvailability: \"instance-unavailable\" as const,\n            marketplaceSubscriptions: [],\n            remainingMarketplaceQuota: 0,\n            remainingPrepaidQuota: 0,\n          },\n        })),\n        setProviders: assign((_, event) => {\n          return {\n            providers: event.providers,\n            defaultProvider: event.defaultProvider,\n          };\n        }),\n        setProvidersOrRegionsUnavailable: assign((context) => {\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          const quota = context.quota!;\n          if (quota.plan === \"standard\") {\n            quota.instanceAvailability = \"regions-unavailable\";\n          } else {\n            quota.instanceAvailability = \"unavailable\";\n          }\n          return {\n            providers: [],\n            quota,\n          };\n        }),\n        setCapabilities: assign((context) => {\n          const { providers, defaultProvider, quota } = context;\n          if (!providers || !quota) {\n            throw new Error(\"unexpected condition, no providers or quota\");\n          }\n          if (quota.plan === \"standard\") {\n            const capabilities: StandardPlanInitializationData = {\n              plan: \"standard\",\n              availableProviders: providers,\n              defaultProvider,\n              instanceAvailability: quota.instanceAvailability,\n              marketplaceSubscriptions: quota.marketplaceSubscriptions,\n              remainingMarketplaceQuota: quota.remainingMarketplaceQuota,\n              remainingPrepaidQuota: quota.remainingPrepaidQuota,\n            };\n            return { capabilities };\n          } else {\n            const capabilities: TrialPlanInitializationData = {\n              plan: \"developer\",\n              availableProviders: providers,\n              defaultProvider,\n              instanceAvailability: quota.instanceAvailability,\n            };\n            return { capabilities };\n          }\n        }),\n        notifyCreateErrorToStandardPlan: forwardTo(\"standardPlanService\"),\n        notifyCreateErrorToTrialPlan: send(\n          (_, event) => {\n            return { type: \"createError\", error: event.error };\n          },\n          { to: \"trialPlanService\" }\n        ),\n        /* eslint-enable @typescript-eslint/no-unused-vars */\n      },\n      guards: {\n        \"standard plan\": (context) => context.quota?.plan === \"standard\",\n        \"developer plan\": (context) => context.quota?.plan === \"developer\",\n      },\n    }\n  );\n\ntype EventTypes = Pick<\n  EventFrom<typeof CreateKafkaInstanceMachine>,\n  \"type\"\n>[\"type\"];\n\ntype EventOptions<E extends EventTypes> = Omit<\n  EventFrom<typeof CreateKafkaInstanceMachine, E>,\n  \"type\"\n>;\n\nexport type CreateKafkaInstanceServices = {\n  checkStandardQuota: (events: {\n    onOutOfQuota: (p: EventOptions<\"out of standard quota\">) => void;\n    onQuotaAvailable: (p: EventOptions<\"standard quota available\">) => void;\n    onNoQuotaAvailable: (\n      p: EventOptions<\"no standard quota available\">\n    ) => void;\n  }) => void;\n  checkDeveloperAvailability: (events: {\n    onUsed: () => void;\n    onAvailable: () => void;\n    onUnavailable: () => void;\n  }) => void;\n  fetchProvidersWithRegions: (\n    plan: \"standard\" | \"developer\",\n    events: {\n      onAvailable: (p: EventOptions<\"providers and regions available\">) => void;\n      onUnavailable: () => void;\n    }\n  ) => void;\n  getStandardSizes: (\n    provider: CloudProvider,\n    region: CloudRegion\n  ) => Promise<StandardSizes>;\n  getTrialSizes: (\n    provider: CloudProvider,\n    region: CloudRegion\n  ) => Promise<TrialSizes>;\n  onCreate: (\n    data: CreateKafkaFormData,\n    onSuccess: () => void,\n    onError: (error: CreateKafkaInstanceError) => void\n  ) => void;\n};\n\nexport function makeCreateKafkaInstanceMachine({\n  checkStandardQuota: checkStandardQuotaCb,\n  checkDeveloperAvailability: checkDeveloperAvailabilityCb,\n  fetchProvidersWithRegions: fetchProvidersWithRegionsCb,\n  getStandardSizes: getStandardSizesCb,\n  getTrialSizes: getTrialSizesCb,\n  onCreate,\n}: CreateKafkaInstanceServices) {\n  return CreateKafkaInstanceMachine.withConfig({\n    services: {\n      checkStandardQuota: () => {\n        return (send) =>\n          checkStandardQuotaCb({\n            onNoQuotaAvailable: ({ hasTrialQuota }) => {\n              send({ type: \"no standard quota available\", hasTrialQuota });\n            },\n            onOutOfQuota: ({ quota }) => {\n              send({ type: \"out of standard quota\", quota });\n            },\n            onQuotaAvailable: ({ quota }) => {\n              send({ type: \"standard quota available\", quota });\n            },\n          });\n      },\n      checkDeveloperAvailability: () => {\n        return (send) => {\n          checkDeveloperAvailabilityCb({\n            onAvailable: () => send(\"developer available\"),\n            onUsed: () => send(\"developer used\"),\n            onUnavailable: () => send(\"developer unavailable\"),\n          });\n        };\n      },\n      fetchProvidersWithRegions: (context) => {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const instanceType = context.quota!.plan;\n        return (send) => {\n          fetchProvidersWithRegionsCb(instanceType, {\n            onAvailable: ({ providers, defaultProvider }) =>\n              send({\n                type: \"providers and regions available\",\n                providers,\n                defaultProvider,\n              }),\n            onUnavailable: () => send(\"providers or regions unavailable\"),\n          });\n        };\n      },\n      createInstance: (_context, event) => {\n        const form = event.data;\n\n        return (send) => {\n          function onSuccess() {\n            send(\"createSuccess\");\n          }\n\n          function onError(error: CreateKafkaInstanceError) {\n            send({ type: \"createError\", error });\n          }\n\n          onCreate(\n            {\n              plan: form.plan,\n              name: form.name,\n              provider: form.provider,\n              region: form.region,\n              sizeId: form.sizeId,\n              billing: form.billing,\n            },\n            onSuccess,\n            onError\n          );\n        };\n      },\n      standardPlan: (context) => {\n        return StandardPlanMachine.withContext({\n          capabilities: context.capabilities as StandardPlanInitializationData,\n          sizes: undefined,\n          form: {},\n          creationError: undefined,\n        }).withConfig({\n          services: {\n            getSizes: (context) => {\n              const form = context.form as Required<typeof context.form>;\n              return getStandardSizesCb(form.provider, form.region);\n            },\n          },\n        });\n      },\n      trialPlan: (context) => {\n        return TrialPlanMachine.withContext({\n          capabilities: context.capabilities as TrialPlanInitializationData,\n          sizes: undefined,\n          form: {},\n          creationError: undefined,\n        }).withConfig({\n          services: {\n            getSizes: (context) => {\n              const form = context.form as Required<typeof context.form>;\n              return getTrialSizesCb(form.provider, form.region);\n            },\n          },\n        });\n      },\n    },\n  });\n}\n","import { useInterpret } from \"@xstate/react\";\nimport type { FunctionComponent } from \"react\";\nimport { createContext } from \"react\";\nimport type { ActorRefFrom } from \"xstate\";\nimport type { CreateKafkaInstanceServices } from \"./CreateKafkaInstanceMachine\";\nimport { makeCreateKafkaInstanceMachine } from \"./CreateKafkaInstanceMachine\";\n\nexport const CreateKafkaInstanceContext = createContext<{\n  service: ActorRefFrom<ReturnType<typeof makeCreateKafkaInstanceMachine>>;\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n}>(null!);\n\nexport const CreateKafkaInstanceProvider: FunctionComponent<\n  CreateKafkaInstanceServices\n> = ({\n  onCreate,\n  checkStandardQuota,\n  checkDeveloperAvailability,\n  fetchProvidersWithRegions,\n  getStandardSizes,\n  getTrialSizes,\n  children,\n}) => {\n  const service = useInterpret(\n    () =>\n      makeCreateKafkaInstanceMachine({\n        checkStandardQuota,\n        checkDeveloperAvailability,\n        fetchProvidersWithRegions,\n        getStandardSizes,\n        getTrialSizes,\n        onCreate,\n      }),\n    { devTools: true }\n  );\n  return (\n    <CreateKafkaInstanceContext.Provider value={{ service }}>\n      {children}\n    </CreateKafkaInstanceContext.Provider>\n  );\n};\n","export const LogoAWS = new URL(\"./Logo-AWS.svg\", import.meta.url)\n  .href;\nexport const LogoAzure = new URL(\n  \"./Logo-Azure.svg\",\n  import.meta.url\n).href;\nexport const LogoGCP = new URL(\"./Logo-GCP.svg\", import.meta.url)\n  .href;\nexport const LogoRedhat = new URL(\n  \"./Logo-Redhat.svg\",\n  import.meta.url\n).href;","import type { FunctionComponent } from \"react\";\nimport { LogoAWS } from \"./images\";\n\nexport const AWSLogo: FunctionComponent = () => {\n  return (\n    <>\n      <img src={LogoAWS} alt={\"\"} style={{ height: \"60px\" }} />\n    </>\n  );\n};\n","import type { FunctionComponent } from \"react\";\nimport { LogoAzure } from \"./images\";\n\nexport const AzureLogo: FunctionComponent = () => {\n  return (\n    <>\n      <img src={LogoAzure} alt={\"\"} style={{ height: \"60px\" }} />\n    </>\n  );\n};\n","import type { FunctionComponent } from \"react\";\nimport { LogoGCP } from \"./images\";\n\nexport const GCPLogo: FunctionComponent = () => {\n  return (\n    <>\n      <img src={LogoGCP} alt={\"\"} style={{ height: \"60px\" }} />\n    </>\n  );\n};\n","import type { SelectProps } from \"@patternfly/react-core\";\nimport {\n  Flex,\n  FlexItem,\n  FormSelect,\n  FormSelectOption,\n  Gallery,\n  GalleryItem,\n  HelperText,\n  HelperTextItem,\n  Tile,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport type { MarketPlace } from \"ui-models/src/models/kafka\";\nimport { AWSLogo, AzureLogo, GCPLogo, RedhatLogo } from \"../../Logos\";\n\nexport type BillingTilesProps = {\n  value: \"prepaid\" | string | undefined;\n  hasPrepaid: boolean;\n  subscriptions: {\n    marketplace: MarketPlace;\n    subscription: string;\n    isDisabled: boolean;\n  }[];\n  isPrepaidOverQuota: boolean;\n  prepaidQuota: number;\n  isMarketplaceOverQuota: boolean;\n  marketplaceQuota: number;\n  onPrepaid: () => void;\n  onSubscription: (marketplace: MarketPlace, subscription: string) => void;\n  validated?: SelectProps[\"validated\"];\n};\nexport const BillingTiles: VoidFunctionComponent<BillingTilesProps> = ({\n  value,\n  hasPrepaid,\n  subscriptions,\n  isPrepaidOverQuota,\n  prepaidQuota,\n  isMarketplaceOverQuota,\n  marketplaceQuota,\n  onPrepaid,\n  onSubscription,\n  validated,\n}) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n  const marketplaces: { [key in MarketPlace]: string } = {\n    aws: t(\"billing.marketplace_aws\"),\n    azure: t(\"billing.marketplace_azure\"),\n    gcp: t(\"billing.marketplace_gcp\"),\n    rhm: t(\"billing.marketplace_rh\"),\n  };\n  return (\n    <>\n      <Flex\n        role=\"listbox\"\n        aria-label={t(\"select_billing\")}\n        direction={{ default: \"column\", md: \"row\" }}\n      >\n        {hasPrepaid && (\n          <Flex\n            flex={{ default: \"flex_1\" }}\n            direction={{ default: \"column\" }}\n            spaceItems={{ default: \"spaceItemsSm\" }}\n          >\n            <span className=\"pf-c-form__label\">\n              <span className=\"pf-c-form__label-text\">\n                {t(\"billing.prepaid\")}\n              </span>\n            </span>\n            <FlexItem flex={{ default: \"flex_1\" }}>\n              <Tile\n                className={\"pf-u-w-100\"}\n                title={t(\"billing.prepaid_option\")}\n                icon={tiles[\"rhm\"]}\n                isDisabled={isPrepaidOverQuota}\n                isStacked={true}\n                isSelected={value === \"prepaid\"}\n                onClick={onPrepaid}\n              >\n                &nbsp;\n              </Tile>\n            </FlexItem>\n            {isPrepaidOverQuota && prepaidQuota > 0 && (\n              <HelperText className={\"pf-c-form__helper-text\"}>\n                <HelperTextItem variant={\"error\"}>\n                  {t(\"billing.prepaid_out_of_quota\")}\n                </HelperTextItem>\n              </HelperText>\n            )}\n            {isPrepaidOverQuota && prepaidQuota === 0 && (\n              <HelperText className={\"pf-c-form__helper-text\"}>\n                <HelperTextItem variant={\"error\"}>\n                  {t(\"billing.prepaid_out_of_quota\")}\n                </HelperTextItem>\n              </HelperText>\n            )}\n          </Flex>\n        )}\n        {subscriptions.length > 0 && (\n          <Flex\n            flex={{ default: \"flex_1\" }}\n            direction={{ default: \"column\" }}\n            spaceItems={{ default: \"spaceItemsSm\" }}\n          >\n            {hasPrepaid && (\n              <span className=\"pf-c-form__label\">\n                <span className=\"pf-c-form__label-text\">\n                  {t(\"billing.marketplace\")}\n                </span>\n              </span>\n            )}\n            <Gallery hasGutter={true}>\n              {subscriptions.map(\n                ({ marketplace, subscription, isDisabled }) => (\n                  <GalleryItem key={`tile-${subscription}`}>\n                    <Tile\n                      className={\"pf-u-w-100\"}\n                      title={marketplaces[marketplace]}\n                      icon={tiles[marketplace]}\n                      isStacked={true}\n                      isSelected={value === subscription}\n                      isDisabled={isDisabled || isMarketplaceOverQuota}\n                      onClick={() => onSubscription(marketplace, subscription)}\n                    >\n                      {subscription}\n                    </Tile>\n                  </GalleryItem>\n                )\n              )}\n            </Gallery>\n            {isMarketplaceOverQuota && marketplaceQuota > 0 && (\n              <HelperText className={\"pf-c-form__helper-text\"}>\n                <HelperTextItem variant={\"error\"}>\n                  {t(\"billing.marketplace_out_of_quota\")}\n                </HelperTextItem>\n              </HelperText>\n            )}\n            {isMarketplaceOverQuota && marketplaceQuota === 0 && (\n              <HelperText className={\"pf-c-form__helper-text\"}>\n                <HelperTextItem variant={\"error\"}>\n                  {t(\"billing.marketplace_out_of_quota\")}\n                </HelperTextItem>\n              </HelperText>\n            )}\n          </Flex>\n        )}\n      </Flex>\n      <FormSelect\n        className={\"pf-u-display-none\"}\n        value={value}\n        id=\"form-billing-option\"\n        name=\"billing\"\n        validated={validated}\n        onChange={(value) => {\n          if (value === \"prepaid\") {\n            onPrepaid();\n          } else {\n            const s = subscriptions.find((s) => s.marketplace === value);\n            if (s) {\n              onSubscription(s.marketplace, s.subscription);\n            }\n          }\n        }}\n      >\n        {[\n          <FormSelectOption\n            value=\"\"\n            key=\"placeholder\"\n            label={t(\"select_billing\")}\n          />,\n          hasPrepaid ? (\n            <FormSelectOption\n              key={\"prepaid\"}\n              value={\"prepaid\"}\n              label={`prepaid`}\n            />\n          ) : null,\n          subscriptions.map(({ marketplace, subscription, isDisabled }) => {\n            return (\n              <FormSelectOption\n                key={`select-option-${subscription}`}\n                value={subscription}\n                label={`${marketplace} - ${subscription}`}\n                isDisabled={isDisabled}\n              />\n            );\n          }),\n        ]}\n      </FormSelect>\n    </>\n  );\n};\n\nconst tiles: { [id in MarketPlace]: JSX.Element } = {\n  aws: <AWSLogo />,\n  gcp: <GCPLogo />,\n  azure: <AzureLogo />,\n  rhm: <RedhatLogo />,\n};\n","import type { FunctionComponent } from \"react\";\nimport { LogoRedhat } from \"./images\";\n\nexport const RedhatLogo: FunctionComponent = () => {\n  return (\n    <>\n      <img src={LogoRedhat} alt={\"\"} style={{ height: \"60px\" }} />\n    </>\n  );\n};\n","import type { SelectProps } from \"@patternfly/react-core\";\nimport {\n  Flex,\n  FlexItem,\n  FormSelect,\n  FormSelectOption,\n  Skeleton,\n  Tile,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport type { CloudProvider } from \"ui-models/src/models/kafka\";\nimport { AWSLogo, AzureLogo, GCPLogo } from \"../../Logos\";\nimport type { CloudProviderInfo } from \"../types\";\n\nexport type CloudProvidersTilesProps = {\n  providers: (CloudProviderInfo & { isDisabled?: boolean })[];\n  value: CloudProvider | undefined;\n  onChange: (provider: CloudProvider) => void;\n  isDisabled: boolean;\n  validated?: SelectProps[\"validated\"];\n};\nexport const CloudProvidersTiles: VoidFunctionComponent<\n  CloudProvidersTilesProps\n> = ({ providers, value, onChange, isDisabled, validated }) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n  return (\n    <>\n      {providers.length === 0 && (\n        <Skeleton\n          className=\"pf-m-text-4xl\"\n          screenreaderText=\"Loading contents\"\n        />\n      )}\n      <div role=\"listbox\" aria-label={t(\"select_cloud_provider\")}>\n        <Flex\n          justifyContent={{ default: \"justifyContentSpaceBetween\" }}\n          spacer={{ default: \"spacerNone\" }}\n          spaceItems={{ default: \"spaceItemsXs\" }}\n        >\n          {providers.map(\n            ({ id, displayName, isDisabled: providerDisabled }) => (\n              <FlexItem grow={{ default: \"grow\" }} key={id}>\n                <Tile\n                  className={\"pf-u-w-100\"}\n                  title={displayName}\n                  icon={tiles[id]}\n                  isStacked={true}\n                  isSelected={value === id}\n                  isDisabled={providerDisabled || isDisabled}\n                  onClick={() => onChange(id)}\n                >\n                  {(providerDisabled || isDisabled) &&\n                    t(\"billing.provider_incompatible_with_current_billing\")}\n                  &nbsp;\n                </Tile>\n              </FlexItem>\n            )\n          )}\n        </Flex>\n      </div>\n      <FormSelect\n        className={\"pf-u-display-none\"}\n        value={value}\n        id=\"form-cloud-provider-option\"\n        name=\"cloud-provider\"\n        isDisabled={isDisabled}\n        validated={validated}\n        onChange={(value) => onChange(value as CloudProvider)}\n      >\n        {[\n          <FormSelectOption\n            value=\"\"\n            key=\"placeholder\"\n            label={t(\"select_cloud_provider\")}\n          />,\n          providers.map(({ id, displayName }, index) => {\n            return (\n              <FormSelectOption key={index} value={id} label={displayName} />\n            );\n          }),\n        ]}\n      </FormSelect>\n    </>\n  );\n};\n\nconst tiles: { [id in CloudProvider]: JSX.Element } = {\n  aws: <AWSLogo />,\n  gcp: <GCPLogo />,\n  azure: <AzureLogo />,\n};\n","import { Flex, FlexItem, Form } from \"@patternfly/react-core\";\nimport type { FormEvent, VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport type { CloudProvider, MarketPlace } from \"ui-models/src/models/kafka\";\nimport type {\n  FieldInstanceNameProps,\n  FieldSizeProps,\n  InstanceInfoProps,\n} from \"./components\";\nimport {\n  FieldAZ,\n  FieldBillingTiles,\n  FieldCloudProvider,\n  FieldCloudRegion,\n  FieldInstanceName,\n  FieldSize,\n  FormAlerts,\n  InstanceInfo,\n  InstanceInfoSkeleton,\n  ModalAlertsStandardPlan,\n} from \"./components\";\nimport { useStandardPlanMachine } from \"./machines\";\n\nexport type StandardInstanceFormProps = {\n  formId: string;\n  onClickContactUs: () => void;\n  onLearnHowToAddStreamingUnits: () => void;\n  onLearnMoreAboutSizes: () => void;\n  onClickQuickStart: () => void;\n  subscriptionOptionsHref: string;\n};\n\nexport const StandardInstanceForm: VoidFunctionComponent<\n  StandardInstanceFormProps\n> = ({\n  formId,\n  onClickContactUs,\n  onLearnHowToAddStreamingUnits,\n  onLearnMoreAboutSizes,\n  onClickQuickStart,\n  subscriptionOptionsHref,\n}) => {\n  const {\n    isBillingSelectionRequired,\n    isBillingSingleMarketplace,\n    capabilities,\n    selectedSize,\n    billingType,\n    error,\n    onCreate,\n  } = useStandardPlanMachine();\n\n  const onSubmit = useCallback(\n    (event: FormEvent<HTMLFormElement>) => {\n      event.preventDefault();\n      onCreate();\n    },\n    [onCreate]\n  );\n\n  const instanceInfoBilling: InstanceInfoProps[\"billing\"] = (() => {\n    if (!isBillingSelectionRequired) {\n      if (isBillingSingleMarketplace === false) {\n        return {\n          value: \"prepaid\",\n          subscriptionOptionsHref,\n          type: billingType,\n        };\n      } else {\n        return {\n          value: isBillingSingleMarketplace,\n          subscriptionOptionsHref,\n          type: billingType,\n        };\n      }\n    }\n    return undefined;\n  })();\n\n  return (\n    <>\n      <ModalAlertsStandardPlan\n        instanceAvailability={capabilities.instanceAvailability}\n        onClickContactUs={onClickContactUs}\n      />\n\n      <Flex\n        direction={{ default: \"column\", lg: \"row\" }}\n        alignItems={{ lg: \"alignItemsFlexStart\" }}\n      >\n        <FlexItem flex={{ default: \"flex_2\" }}>\n          <FormAlerts error={error} onClickContactUS={onClickContactUs} />\n          <Form onSubmit={onSubmit} id={formId}>\n            <ConnectedFieldInstanceName />\n            <ConnectedFieldCloudProvider />\n            <ConnectedFieldCloudRegion />\n            <ConnectedFieldAZ />\n            <ConnectedFieldSize\n              onLearnHowToAddStreamingUnits={onLearnHowToAddStreamingUnits}\n              onLearnMoreAboutSizes={onLearnMoreAboutSizes}\n            />\n            {isBillingSelectionRequired && (\n              <ConnectedBillingTiles\n                subscriptionOptionsHref={subscriptionOptionsHref}\n              />\n            )}\n          </Form>\n        </FlexItem>\n        <FlexItem\n          flex={{ default: \"flex_1\" }}\n          className=\"mas--CreateKafkaInstance__sidebar\"\n        >\n          {selectedSize === undefined ? (\n            <InstanceInfoSkeleton\n              isTrial={false}\n              onClickQuickStart={onClickQuickStart}\n            />\n          ) : (\n            <InstanceInfo\n              isTrial={false}\n              trialDurationInHours={undefined}\n              ingress={selectedSize.ingress}\n              egress={selectedSize.egress}\n              storage={selectedSize.storage}\n              maxPartitions={selectedSize.maxPartitions}\n              connections={selectedSize.connections}\n              connectionRate={selectedSize.connectionRate}\n              messageSize={selectedSize.messageSize}\n              onClickQuickStart={onClickQuickStart}\n              streamingUnits={selectedSize.displayName}\n              billing={instanceInfoBilling}\n            />\n          )}\n        </FlexItem>\n      </Flex>\n    </>\n  );\n};\n\nexport const ConnectedFieldInstanceName: VoidFunctionComponent = () => {\n  const {\n    form,\n    isNameTaken,\n    isNameInvalid,\n    isNameEmpty,\n    isNameError,\n    isFormEnabled,\n    setName,\n  } = useStandardPlanMachine();\n\n  const validity: FieldInstanceNameProps[\"validity\"] = (() => {\n    if (isNameTaken) {\n      return \"taken\";\n    } else if (isNameInvalid) {\n      return \"invalid\";\n    } else if (isNameEmpty && isNameError) {\n      return \"required\";\n    }\n    return \"valid\";\n  })();\n\n  return (\n    <FieldInstanceName\n      value={form.name || \"\"}\n      validity={validity}\n      isDisabled={!isFormEnabled}\n      onChange={setName}\n    />\n  );\n};\n\nexport const ConnectedFieldCloudProvider: VoidFunctionComponent = () => {\n  const {\n    form,\n    capabilities,\n    isProviderError,\n    isFormEnabled,\n    isBillingSingleMarketplace,\n    setProvider,\n  } = useStandardPlanMachine();\n\n  const providers =\n    isBillingSingleMarketplace &&\n    isBillingSingleMarketplace.marketplace !== \"rhm\"\n      ? capabilities.availableProviders.map((p) => ({\n          ...p,\n          isDisabled: p.id !== isBillingSingleMarketplace.marketplace,\n        }))\n      : capabilities.availableProviders;\n\n  return (\n    <FieldCloudProvider\n      isValid={!isProviderError}\n      providers={providers}\n      value={form.provider}\n      isDisabled={!isFormEnabled}\n      onChange={setProvider}\n    />\n  );\n};\n\nexport const ConnectedFieldCloudRegion: VoidFunctionComponent = () => {\n  const {\n    form,\n    selectedProvider,\n    selectedSize,\n    isRegionError,\n    isFormEnabled,\n    capabilities,\n    error,\n    setRegion,\n  } = useStandardPlanMachine();\n\n  return (\n    <FieldCloudRegion\n      validity={\n        isRegionError\n          ? \"required\"\n          : error === \"region-unavailable\" ||\n            capabilities.instanceAvailability === \"regions-unavailable\"\n          ? \"region-unavailable\"\n          : \"valid\"\n      }\n      regions={selectedProvider?.regions}\n      value={form.region}\n      isDisabled={!isFormEnabled}\n      isSizeUnavailable={selectedSize?.isDisabled || false}\n      onChange={setRegion}\n    />\n  );\n};\n\nexport const ConnectedFieldAZ: VoidFunctionComponent = () => {\n  const { isFormEnabled } = useStandardPlanMachine();\n\n  return (\n    <FieldAZ\n      validity={\"valid\"}\n      options={\"multi\"}\n      value={\"multi\"}\n      isDisabled={!isFormEnabled}\n      onChange={() => false} // AZ is defined by the backend, we just visualize the value here\n    />\n  );\n};\n\nexport const ConnectedFieldSize: VoidFunctionComponent<\n  Pick<\n    FieldSizeProps,\n    \"onLearnHowToAddStreamingUnits\" | \"onLearnMoreAboutSizes\"\n  >\n> = ({ onLearnHowToAddStreamingUnits, onLearnMoreAboutSizes }) => {\n  const {\n    form,\n    sizes,\n    isSizeOverQuota,\n    isSizeDisabled,\n    isSizeError,\n    isSizeLoadingError,\n    isBillingSelectionRequired,\n    isFormEnabled,\n    isLoadingSizes,\n    isLoading,\n    setSize,\n    remainingQuota,\n  } = useStandardPlanMachine();\n\n  return (\n    <FieldSize\n      value={form.size?.quota}\n      sizes={sizes}\n      remainingQuota={isBillingSelectionRequired ? undefined : remainingQuota}\n      isDisabled={!isFormEnabled || sizes === undefined}\n      isLoading={isLoading || isLoadingSizes}\n      isError={isSizeError}\n      isLoadingError={isSizeLoadingError}\n      validity={\n        isSizeOverQuota ? \"out-of-quota\" : isSizeDisabled ? \"required\" : \"valid\"\n      }\n      onChange={setSize}\n      onLearnHowToAddStreamingUnits={onLearnHowToAddStreamingUnits}\n      onLearnMoreAboutSizes={onLearnMoreAboutSizes}\n    />\n  );\n};\n\nfunction isMarketplaceDisabled(\n  marketplace: MarketPlace,\n  selectedProvider: CloudProvider | undefined\n) {\n  if (marketplace === \"rhm\") {\n    return false;\n  } else if (selectedProvider) {\n    return marketplace !== selectedProvider;\n  }\n  return false;\n}\n\nexport const ConnectedBillingTiles: VoidFunctionComponent<{\n  subscriptionOptionsHref: string;\n}> = ({ subscriptionOptionsHref }) => {\n  const {\n    form,\n    capabilities,\n    selectedBilling,\n    billingType,\n    isBillingPrepaidAvailable,\n    isSizeOverQuota,\n    isBillingError,\n    isBillingPrepaidOverQuota,\n    isBillingMarketplaceOverQuota,\n    setBillingPrepaid,\n    setBillingSubscription,\n  } = useStandardPlanMachine();\n\n  return (\n    <FieldBillingTiles\n      value={\n        selectedBilling === \"prepaid\"\n          ? \"prepaid\"\n          : selectedBilling?.subscription\n      }\n      hasPrepaid={isBillingPrepaidAvailable}\n      subscriptions={capabilities.marketplaceSubscriptions.flatMap((mq) =>\n        mq.subscriptions.map((subscription) => ({\n          marketplace: mq.marketplace,\n          subscription,\n          isDisabled: isMarketplaceDisabled(mq.marketplace, form.provider),\n        }))\n      )}\n      isPrepaidOverQuota={isBillingPrepaidOverQuota}\n      prepaidQuota={capabilities.remainingPrepaidQuota || 0} // we can default to 0 here just to make TS happy, we will have the info here\n      isMarketplaceOverQuota={isBillingMarketplaceOverQuota}\n      marketplaceQuota={capabilities.remainingMarketplaceQuota || 0} // we can default to 0 here just to make TS happy, we will have the info here\n      onPrepaid={setBillingPrepaid}\n      onSubscription={setBillingSubscription}\n      isValid={!isSizeOverQuota && !isBillingError}\n      billingType={billingType}\n      subscriptionOptionsHref={subscriptionOptionsHref}\n    />\n  );\n};\n","import { DropdownGroup } from \"@patternfly/react-core\";\nimport { ActionsColumn } from \"@patternfly/react-table\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\n\nexport type KafkaInstanceActionsProps = {\n  onDetails: () => void;\n  onConnection: () => void;\n  canOpenConnection: boolean;\n  canChangeOwner: boolean;\n  onChangeOwner: () => void;\n  canDelete: boolean;\n  onDelete: () => void;\n};\n\nexport const KafkaInstanceActions: VoidFunctionComponent<\n  KafkaInstanceActionsProps\n> = ({\n  onDetails,\n  onConnection,\n  canOpenConnection,\n  canChangeOwner,\n  onChangeOwner,\n  canDelete,\n  onDelete,\n}) => {\n  const { t } = useTranslation(\"kafka\");\n  return (\n    <ActionsColumn\n      rowData={hackZIndex}\n      items={[\n        {\n          customChild: (\n            <DropdownGroup\n              label={t(\"table.actions.view-instance-information\")}\n            />\n          ),\n        },\n        {\n          title: t(\"table.actions.details\"),\n          onClick: onDetails,\n        },\n        {\n          title: t(\"table.actions.connection\"),\n          ...(!canOpenConnection\n            ? {\n                isDisabled: true,\n                tooltipProps: {\n                  position: \"left\",\n                  content: t(\"kafka:no_permission_to_see_connections\"),\n                },\n                tooltip: true,\n                style: {\n                  pointerEvents: \"auto\",\n                  cursor: \"default\",\n                },\n              }\n            : {\n                onClick: onConnection,\n              }),\n        },\n        {\n          isSeparator: true,\n        },\n        {\n          title: t(\"table.actions.change-owner\"),\n          ...(!canChangeOwner\n            ? {\n                isDisabled: true,\n                tooltipProps: {\n                  position: \"left\",\n                  content: t(\"kafka:no_permission_to_change_owner\"),\n                },\n                tooltip: true,\n                style: {\n                  pointerEvents: \"auto\",\n                  cursor: \"default\",\n                },\n              }\n            : {\n                onClick: onChangeOwner,\n              }),\n        },\n        {\n          title: t(\"table.actions.delete\"),\n          ...(!canDelete\n            ? {\n                isDisabled: true,\n                tooltipProps: {\n                  position: \"left\",\n                  content: t(\"kafka:no_permission_to_delete_kafka\"),\n                },\n                tooltip: true,\n                style: {\n                  pointerEvents: \"auto\",\n                  cursor: \"default\",\n                },\n              }\n            : {\n                onClick: onDelete,\n              }),\n        },\n      ]}\n    />\n  );\n};\n\nconst hackZIndex = {\n  actionProps: {\n    style: { zIndex: 9999 },\n  },\n};\n","import {\n  Breadcrumb,\n  BreadcrumbItem,\n  Level,\n  LevelItem,\n  Nav,\n  NavItem,\n  NavList,\n  PageSection,\n  PageSectionVariants,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport type { KafkaInstanceActionsProps } from \"./KafkaInstanceActions\";\nimport { KafkaInstanceActions } from \"./KafkaInstanceActions\";\n\ntype Sections =\n  | \"dashboard\"\n  | \"topics\"\n  | \"consumer\"\n  | \"permissions\"\n  | \"settings\";\n\nexport type DataPlaneHeaderProps = {\n  instancesHref: string;\n  instanceName: string;\n  activeSection: Sections;\n  sectionsHref: { [key in Sections]: string };\n} & KafkaInstanceActionsProps;\n\nexport const DataPlaneHeader: VoidFunctionComponent<DataPlaneHeaderProps> = ({\n  instancesHref,\n  instanceName,\n  activeSection,\n  sectionsHref,\n  ...actionsProps\n}) => {\n  const { t } = useTranslation(\"kafka\");\n\n  return (\n    <>\n      <section className=\"pf-c-page__main-breadcrumb\">\n        <Breadcrumb ouiaId={\"breadcrumb\"}>\n          <BreadcrumbItem\n            render={() => (\n              <Link to={instancesHref}>{t(\"common:kafka_instance\")}</Link>\n            )}\n          />\n          <BreadcrumbItem isActive={true}>{instanceName}</BreadcrumbItem>\n        </Breadcrumb>\n      </section>\n      <PageSection variant={PageSectionVariants.light}>\n        <Level>\n          <LevelItem>\n            <TextContent>\n              <Text component=\"h1\">{instanceName}</Text>\n            </TextContent>\n          </LevelItem>\n          <LevelItem>\n            <KafkaInstanceActions {...actionsProps} />\n          </LevelItem>\n        </Level>\n      </PageSection>\n      <PageSection\n        variant={PageSectionVariants.light}\n        padding={{ default: \"noPadding\" }}\n        className=\"pf-c-page__main-tabs\"\n        hasShadowBottom={true}\n      >\n        <Nav\n          variant=\"tertiary\"\n          data-testid=\"pageKafka-tabProperties\"\n          className=\"pf-u-px-sm-on-xl\"\n        >\n          <NavList>\n            <NavItem\n              style={{ borderTop: 0 }}\n              data-testid=\"pageKafka-tabDashboard\"\n              id=\"dashboard-tab-section\"\n              aria-label={t(\"dataPlaneNavigation.dashboard\")}\n              ouiaId={\"tab-Dashboard\"}\n              isActive={activeSection === \"dashboard\"}\n            >\n              <Link to={sectionsHref[\"dashboard\"]}>\n                {t(\"dataPlaneNavigation.dashboard\")}\n              </Link>\n            </NavItem>\n            <NavItem\n              style={{ borderTop: 0 }}\n              data-testid=\"pageKafka-tabTopics\"\n              id=\"topics-tab-section\"\n              aria-label={t(\"dataPlaneNavigation.topics\")}\n              ouiaId={\"tab-Topics\"}\n              isActive={activeSection === \"topics\"}\n            >\n              <Link to={sectionsHref[\"topics\"]}>\n                {t(\"dataPlaneNavigation.topics\")}\n              </Link>\n            </NavItem>\n            <NavItem\n              style={{ borderTop: 0 }}\n              data-testid=\"pageKafka-tabConsumers\"\n              id=\"consumer-groups-tab-section\"\n              aria-label={t(\"dataPlaneNavigation.consumer_groups\")}\n              ouiaId={\"tab-Consumers\"}\n              isActive={activeSection === \"consumer\"}\n            >\n              <Link to={sectionsHref[\"consumer\"]}>\n                {t(\"dataPlaneNavigation.consumer_groups\")}\n              </Link>\n            </NavItem>\n            <NavItem\n              style={{ borderTop: 0 }}\n              data-testid=\"pageKafka-tabPermissions\"\n              id=\"permissions-tab-section\"\n              aria-label={t(\"dataPlaneNavigation.permissions\")}\n              ouiaId={\"tab-Permissions\"}\n              isActive={activeSection === \"permissions\"}\n            >\n              <Link to={sectionsHref[\"permissions\"]}>\n                {t(\"dataPlaneNavigation.permissions\")}\n              </Link>\n            </NavItem>\n            <NavItem\n              style={{ borderTop: 0 }}\n              data-testid=\"pageKafka-tabSettings\"\n              id=\"settings-tab-section\"\n              aria-label={t(\"dataPlaneNavigation.settings\")}\n              ouiaId={\"tab-Settings\"}\n              isActive={activeSection === \"settings\"}\n            >\n              <Link to={sectionsHref[\"settings\"]}>\n                {t(\"dataPlaneNavigation.settings\")}\n              </Link>\n            </NavItem>\n          </NavList>\n        </Nav>\n      </PageSection>\n    </>\n  );\n};\n","import {\n  Breadcrumb,\n  BreadcrumbItem,\n  Level,\n  LevelItem,\n  Nav,\n  NavItem,\n  NavList,\n  PageSection,\n  PageSectionVariants,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport type { KafkaInstanceActionsProps } from \"./KafkaInstanceActions\";\nimport { KafkaInstanceActions } from \"./KafkaInstanceActions\";\n\ntype Sections = \"consumer\" | \"messages\" | \"properties\" | \"schemas\";\n\nexport type DataPlaneTopicHeaderProps = {\n  instancesHref: string;\n  instanceName: string;\n  instanceDetailHref: string;\n  instanceTopicsHref: string;\n  topicName: string;\n  activeSection: Sections;\n  tabsHref: { [key in Sections]: string };\n} & KafkaInstanceActionsProps;\n\nexport const DataPlaneTopicHeader: VoidFunctionComponent<\n  DataPlaneTopicHeaderProps\n> = ({\n  instancesHref,\n  instanceName,\n  instanceDetailHref,\n  instanceTopicsHref,\n  topicName,\n  activeSection,\n  tabsHref,\n  ...actionsProps\n}) => {\n  const { t } = useTranslation(\"kafka\");\n\n  return (\n    <>\n      <section className=\"pf-c-page__main-breadcrumb\">\n        <Breadcrumb ouiaId={\"breadcrumb\"}>\n          <BreadcrumbItem\n            render={() => (\n              <Link to={instancesHref}>{t(\"common:kafka_instance\")}</Link>\n            )}\n          />\n          <BreadcrumbItem\n            render={() => <Link to={instanceDetailHref}>{instanceName}</Link>}\n          />\n          <BreadcrumbItem\n            render={() => (\n              <Link to={instanceTopicsHref}>\n                {t(\"dataPlaneNavigation.topics\")}\n              </Link>\n            )}\n          />\n          <BreadcrumbItem isActive={true}>{topicName}</BreadcrumbItem>\n        </Breadcrumb>\n      </section>\n      <PageSection variant={PageSectionVariants.light}>\n        <Level>\n          <LevelItem>\n            <TextContent>\n              <Text component=\"h1\">{topicName}</Text>\n            </TextContent>\n          </LevelItem>\n          <LevelItem>\n            <KafkaInstanceActions {...actionsProps} />\n          </LevelItem>\n        </Level>\n      </PageSection>\n      <PageSection\n        variant={PageSectionVariants.light}\n        padding={{ default: \"noPadding\" }}\n        className=\"pf-c-page__main-tabs\"\n        hasShadowBottom={true}\n      >\n        <Nav variant=\"tertiary\" className=\"pf-u-px-sm-on-xl\">\n          <NavList>\n            <NavItem\n              style={{ borderTop: 0 }}\n              aria-label={t(\"dataPlaneTopicNavigation.consumer_groups\")}\n              ouiaId={\"tab-Dashboard\"}\n              isActive={activeSection === \"consumer\"}\n            >\n              <Link to={tabsHref[\"consumer\"]}>\n                {t(\"dataPlaneTopicNavigation.consumer_groups\")}\n              </Link>\n            </NavItem>\n            <NavItem\n              style={{ borderTop: 0 }}\n              aria-label={t(\"dataPlaneTopicNavigation.messages\")}\n              ouiaId={\"tab-Topics\"}\n              isActive={activeSection === \"messages\"}\n            >\n              <Link to={tabsHref[\"messages\"]}>\n                {t(\"dataPlaneTopicNavigation.messages\")}\n              </Link>\n            </NavItem>\n            <NavItem\n              style={{ borderTop: 0 }}\n              aria-label={t(\"dataPlaneTopicNavigation.properties\")}\n              ouiaId={\"tab-Permissions\"}\n              isActive={activeSection === \"properties\"}\n            >\n              <Link to={tabsHref[\"properties\"]}>\n                {t(\"dataPlaneTopicNavigation.properties\")}\n              </Link>\n            </NavItem>\n            <NavItem\n              style={{ borderTop: 0 }}\n              aria-label={t(\"dataPlaneTopicNavigation.schemas\")}\n              ouiaId={\"tab-Settings\"}\n              isActive={activeSection === \"schemas\"}\n            >\n              <Link to={tabsHref[\"schemas\"]}>\n                {t(\"dataPlaneTopicNavigation.schemas\")}\n              </Link>\n            </NavItem>\n          </NavList>\n        </Nav>\n      </PageSection>\n    </>\n  );\n};\n","import { PageSection } from \"@patternfly/react-core\";\nimport type { TableViewProps } from \"@rhoas/app-services-ui-components\";\nimport { TableView } from \"@rhoas/app-services-ui-components\";\nimport type { DedicatedCluster } from \"ui-models/src/models/dedicated-cluster\";\nimport { useDedicatedClusterLabels } from \"../../hooks\";\n\nconst Columns = [\"id\", \"status\"] as const;\n\nexport type DedicatedClustersProps<\n  T extends DedicatedCluster = DedicatedCluster\n> = {\n  clusters: Array<T> | undefined | null;\n} & Pick<\n  TableViewProps<T, (typeof Columns)[number]>,\n  \"itemCount\" | \"page\" | \"onPageChange\"\n>;\n\nexport const DedicatedClusters = <T extends DedicatedCluster>({\n  clusters,\n  itemCount,\n  page,\n  onPageChange,\n}: DedicatedClustersProps<T>) => {\n  const labels = useDedicatedClusterLabels();\n  const breakpoint = \"lg\";\n\n  return (\n    <PageSection isFilled={true}>\n      <TableView\n        ariaLabel={\"TODO\"}\n        data={clusters}\n        columns={Columns}\n        renderHeader={({ column, Th, key }) => (\n          <Th key={key}>{labels.fields[column]}</Th>\n        )}\n        renderCell={({ column, row, Td, key }) => {\n          return (\n            <Td key={key} dataLabel={labels.fields[column]}>\n              {(() => {\n                switch (column) {\n                  case \"id\":\n                    return row.id;\n                  case \"status\":\n                    return row.status;\n                }\n              })()}\n            </Td>\n          );\n        }}\n        toolbarBreakpoint={breakpoint}\n        itemCount={itemCount}\n        page={page}\n        onPageChange={onPageChange}\n        emptyStateNoData={<div>TODO</div>}\n        emptyStateNoResults={<div>TODO</div>}\n      />\n    </PageSection>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport type { DedicatedClusterField } from \"ui-models/src/models/dedicated-cluster\";\n\nexport function useDedicatedClusterLabels() {\n  const { t } = useTranslation(\"cluster\");\n\n  const fields: {\n    [field in DedicatedClusterField]: string;\n  } = {\n    id: t(\"fields.id\"),\n    status: t(\"fields.status\"),\n  };\n  return {\n    fields,\n  };\n}\n","import type { DeleteModalProps } from \"@rhoas/app-services-ui-components\";\nimport {\n  DeleteModal,\n  Trans,\n  useTranslation,\n} from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\n\nexport type DeleteKafkaInstanceProps = {\n  instanceName: string | undefined;\n} & Omit<\n  DeleteModalProps,\n  \"title\" | \"variant\" | \"confirmationValue\" | \"children\"\n>;\n\nexport const DeleteKafkaInstance: VoidFunctionComponent<\n  DeleteKafkaInstanceProps\n> = ({ instanceName, ...props }) => {\n  const { t } = useTranslation(\"kafka\");\n\n  return (\n    <DeleteModal\n      {...props}\n      variant={\"destructive\"}\n      title={t(\"delete_instance_title\")}\n      confirmationValue={instanceName}\n    >\n      <Trans\n        ns={\"kafka\"}\n        i18nKey={\"delete_instance_message\"}\n        components={[<strong />]}\n        values={{\n          instanceName,\n        }}\n      />\n    </DeleteModal>\n  );\n};\n","import type { I18nProviderProps } from \"@rhoas/app-services-ui-components\";\nimport { I18nProvider as UiComponentsI18nProvider } from \"@rhoas/app-services-ui-components\";\nimport type { FunctionComponent } from \"react\";\n\nexport const I18nProvider: FunctionComponent<\n  Omit<I18nProviderProps, \"resources\">\n> = ({ lng, debug, children }) => {\n  return (\n    <UiComponentsI18nProvider\n      lng={lng}\n      resources={{\n        en: {\n          common: () =>\n            import(\"@rhoas/app-services-ui-components/locales/en/common.json\"),\n          \"create-kafka-instance\": () =>\n            import(\"locales/en/create-kafka-instance.json\"),\n          kafka: () => import(\"locales/en/kafka.json\"),\n          \"kafkaoverview-v3\": () => import(\"locales/en/kafkaoverview-v3.json\"),\n          metrics: () => import(\"locales/en/metrics.json\"),\n          topic: () => import(\"locales/en/topic.json\"),\n          \"manage-kafka-permissions\": () =>\n            import(\"locales/en/manage-kafka-permissions.json\"),\n          \"create-topic\": () => import(\"locales/en/create-topic.json\"),\n          \"message-browser\": () => import(\"locales/en/message-browser.json\"),\n          \"connection-tab\": () => import(\"locales/en/connection-tab.json\"),\n          \"connection-tab-p1\": () =>\n            import(\"locales/en/connection-tab-p1.json\"),\n          cluster: () => import(\"locales/en/cluster.json\"),\n        },\n        it: {\n          common: () => Promise.resolve({ delete: \"Elimina\" }),\n        },\n      }}\n      debug={debug}\n    >\n      {children}\n    </UiComponentsI18nProvider>\n  );\n};\n","import { Alert } from \"@patternfly/react-core\";\nimport { differenceInHours } from \"date-fns\";\nimport type { FunctionComponent } from \"react\";\nimport { Trans } from \"@rhoas/app-services-ui-components\";\nimport { FormatDate } from \"@rhoas/app-services-ui-components\";\n\ntype DetailsTabAlertProps = {\n  expiryDate: Date;\n};\n\nexport const DetailsTabAlert: FunctionComponent<DetailsTabAlertProps> = ({\n  expiryDate,\n}) => {\n  const hoursLeft = expiryDate ? differenceInHours(expiryDate, Date.now()) : 0;\n  return (\n    <Alert\n      variant={\n        hoursLeft > 24\n          ? \"info\"\n          : hoursLeft < 24 && hoursLeft > 5\n          ? \"warning\"\n          : \"danger\"\n      }\n      title={\n        <Trans\n          i18nKey=\"kafka:will_expire\"\n          components={{\n            time: <FormatDate date={expiryDate} format=\"expiration\" />,\n          }}\n        />\n      }\n      aria-live=\"polite\"\n      isInline\n      className=\"pf-u-mb-lg\"\n    />\n  );\n};\n","import {\n  Skeleton,\n  TextContent,\n  TextList,\n  TextListItem,\n  TextListItemVariants,\n  TextListVariants,\n} from \"@patternfly/react-core\";\nimport { FormatDate, useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { ReactChild, VoidFunctionComponent } from \"react\";\nimport type { MarketplaceSubscription, Plan } from \"ui-models/src/models/kafka\";\nimport type { Bytes } from \"../../../../../ui-models/src/types\";\nimport { DetailsTabAlert } from \"./DetailsTabAlert\";\n\n/**\n * All fields marked as accepting undefined will show a skeleton loader until the value is available.\n * This is to support fetching the data from different APIs.\n */\nexport type KafkaDetailsTabProps = {\n  id: string;\n  createdAt: Date;\n  updatedAt: Date;\n  expiryDate: Date | undefined;\n  owner: string;\n  provider: string;\n  region: string;\n  instanceType: Plan;\n  size: string | undefined;\n  ingress: number | undefined;\n  egress: number | undefined;\n  storage: Bytes | undefined;\n  maxPartitions: number | undefined;\n  connections: number | undefined;\n  connectionRate: number | undefined;\n  messageSize: Bytes | undefined;\n  billing: \"prepaid\" | MarketplaceSubscription | undefined;\n  kafkaVersion: string;\n};\n\nexport const KafkaDetailsTab: VoidFunctionComponent<KafkaDetailsTabProps> = ({\n  id,\n  createdAt,\n  updatedAt,\n  owner,\n  provider,\n  region,\n  expiryDate,\n  instanceType,\n  size,\n  ingress,\n  egress,\n  storage,\n  maxPartitions,\n  connections,\n  connectionRate,\n  messageSize,\n  billing,\n  kafkaVersion,\n}) => {\n  const { t } = useTranslation(\"kafka\");\n\n  const renderTextListItem = (title: string, value: ReactChild | undefined) => (\n    <>\n      <TextListItem component={TextListItemVariants.dt}>{title}</TextListItem>\n      {value ? (\n        <TextListItem component={TextListItemVariants.dd}>{value}</TextListItem>\n      ) : (\n        <Skeleton\n          width=\"50%\"\n          screenreaderText={t(\"common:skeleton_loader_screenreader_text\", {\n            contentName: title,\n          })}\n        />\n      )}\n    </>\n  );\n  return (\n    <div className=\"mas--details__drawer--tab-content\">\n      {instanceType !== \"standard\" && expiryDate && (\n        <DetailsTabAlert expiryDate={expiryDate} />\n      )}\n      <TextContent>\n        <TextList component={TextListVariants.dl}>\n          {instanceType === \"standard\" &&\n            renderTextListItem(\n              t(\"common:size\"),\n              size\n                ? t(\"create-kafka-instance:streaming_size_value\", {\n                    value: size,\n                  })\n                : undefined\n            )}\n          {renderTextListItem(\n            t(\"ingress\"),\n            ingress\n              ? t(\"create-kafka-instance:ingress_value\", {\n                  value: ingress,\n                })\n              : undefined\n          )}\n          {renderTextListItem(\n            t(\"egress\"),\n            egress\n              ? t(\"create-kafka-instance:egress_value\", {\n                  value: egress,\n                })\n              : undefined\n          )}\n          {renderTextListItem(\n            t(\"storage\"),\n            storage?.value\n              ? t(\"create-kafka-instance:storage_value\", {\n                  value: storage.value,\n                })\n              : undefined\n          )}\n          {renderTextListItem(\n            t(\"partitions\"),\n            maxPartitions\n              ? t(\"create-kafka-instance:partitions_value\", {\n                  value: maxPartitions,\n                })\n              : undefined\n          )}\n          {renderTextListItem(\n            t(\"client_connections\"),\n            connections\n              ? t(\"create-kafka-instance:client_connections_value\", {\n                  value: connections,\n                })\n              : undefined\n          )}\n          {renderTextListItem(\n            t(\"connection_rate\"),\n            connectionRate\n              ? t(\"create-kafka-instance:connection_rate_value\", {\n                  value: connectionRate,\n                })\n              : undefined\n          )}\n          {renderTextListItem(\n            t(\"message_size\"),\n            messageSize?.value\n              ? t(\"create-kafka-instance:message_size_value\", {\n                  value: messageSize.value,\n                })\n              : undefined\n          )}\n\n          {renderTextListItem(t(\"common:id\"), id)}\n          {renderTextListItem(t(\"common:kafka_version\"), kafkaVersion)}\n          {renderTextListItem(t(\"common:owner\"), owner)}\n          {renderTextListItem(\n            t(\"common:time_created\"),\n            <FormatDate date={createdAt} format={\"long\"} />\n          )}\n          {renderTextListItem(\n            t(\"common:time_updated\"),\n            <FormatDate date={updatedAt} format={\"long\"} />\n          )}\n          {renderTextListItem(t(\"common:cloud_provider\"), provider)}\n          {renderTextListItem(t(\"common:region\"), region)}\n          {renderTextListItem(\n            t(\"create-kafka-instance:billing.field_label\"),\n            (() => {\n              if (billing === undefined) {\n                return undefined;\n              } else if (billing === \"prepaid\") {\n                return t(\"create-kafka-instance:billing.prepaid_option\");\n              } else {\n                switch (billing.marketplace) {\n                  case \"aws\":\n                    return (\n                      <>\n                        {t(\"create-kafka-instance:billing.marketplace_aws\")}\n                        <br />\n                        {billing.subscription}\n                      </>\n                    );\n                  case \"azure\":\n                    return (\n                      <>\n                        {t(\"create-kafka-instance:billing.marketplace_azure\")}\n                        <br />\n                        {billing.subscription}\n                      </>\n                    );\n                  case \"gcp\":\n                    return (\n                      <>\n                        {t(\"create-kafka-instance:billing.marketplace_gcp\")}\n                        <br />\n                        {billing.subscription}\n                      </>\n                    );\n                  case \"rhm\":\n                    return (\n                      <>\n                        {t(\"create-kafka-instance:billing.marketplace_rh\")}\n                        <br />\n                        {billing.subscription}\n                      </>\n                    );\n                }\n              }\n            })()\n          )}\n        </TextList>\n      </TextContent>\n    </div>\n  );\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from \"@patternfly/react-core\";\nimport { ExclamationTriangleIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const SuspendedConnection: VoidFunctionComponent = () => {\n  const { t } = useTranslation(\"kafka\");\n  return (\n    <EmptyState variant={EmptyStateVariant.small}>\n      <EmptyStateIcon icon={ExclamationTriangleIcon} color={\"#f0ab00\"} />\n      <Title headingLevel={\"h1\"} size={TitleSizes.lg}>\n        {t(\"suspend_empty_state_title\")}\n      </Title>\n      <EmptyStateBody>{t(\"suspend_empty_state_body\")}</EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import {\n  Button,\n  ButtonVariant,\n  ClipboardCopy,\n  ExpandableSection,\n  Label,\n  Popover,\n  Skeleton,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { HelpIcon } from \"@patternfly/react-icons\";\nimport {\n  ExternalLink,\n  Trans,\n  useTranslation,\n} from \"@rhoas/app-services-ui-components\";\nimport type { FunctionComponent } from \"react\";\nimport { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { SuspendedConnection } from \"./SuspendedConnection\";\n\nexport type KafkaConnectionTabP2Props = {\n  isKafkaSuspended?: boolean;\n  isKafkaPending?: boolean;\n  externalServer?: string;\n  tokenEndPointUrl: string;\n  linkToServiceAccount: string;\n  linkToAccessTab: string;\n  adminAPIUrl: string | undefined;\n  showCreateServiceAccountModal: () => void;\n  kafkaFleetManagerUrl: string;\n};\n\nexport const KafkaConnectionTabP2: FunctionComponent<\n  KafkaConnectionTabP2Props\n> = ({\n  isKafkaSuspended,\n  isKafkaPending,\n  externalServer,\n  tokenEndPointUrl,\n  linkToServiceAccount,\n  linkToAccessTab,\n  adminAPIUrl,\n  kafkaFleetManagerUrl,\n  showCreateServiceAccountModal,\n}) => {\n  const { t } = useTranslation();\n\n  const [isExpanded, setIsExpanded] = useState<boolean>(false);\n\n  const onChangeExpandedSection = () => {\n    setIsExpanded(!isExpanded);\n  };\n\n  return isKafkaSuspended ? (\n    <SuspendedConnection />\n  ) : (\n    <div className=\"mas--details__drawer--tab-content\">\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.small}>\n          {t(\"connection-tab:drawer_resource_tab_body_description_1\")}\n        </Text>\n        <Text component={TextVariants.h3} className=\"pf-u-mt-xl\">\n          {t(\"connection-tab:bootstrap_server\")}\n        </Text>\n        <Text component={TextVariants.small}>\n          {t(\"connection-tab:bootstrap_server_description\")}\n        </Text>\n        {isKafkaPending ? (\n          <Skeleton fontSize=\"2xl\" />\n        ) : (\n          <ClipboardCopy\n            data-testid=\"drawerStreams-copyBootstrapURL\"\n            textAriaLabel={t(\"connection-tab:bootstrap_server\")}\n            isReadOnly\n          >\n            {externalServer}\n          </ClipboardCopy>\n        )}\n      </TextContent>\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.h3} className=\"pf-u-mt-xl\">\n          {t(\"connection-tab:service_accounts_small\")}\n        </Text>\n        <Text component={TextVariants.small}>\n          {\n            <Trans\n              i18nKey={\n                \"connection-tab:create_service_account_to_generate_credentials\"\n              }\n              components={{\n                value: (\n                  <Link\n                    to={linkToServiceAccount}\n                    data-testid=\"tableStreams-linkKafka\"\n                  ></Link>\n                ),\n              }}\n            />\n          }\n        </Text>\n      </TextContent>\n      <Button\n        variant={ButtonVariant.secondary}\n        isInline\n        onClick={showCreateServiceAccountModal}\n        data-testid=\"drawerStreams-buttonCreateServiceAccount\"\n      >\n        {t(\"connection-tab:create_service_account\")}\n      </Button>\n      <TextContent className=\"pf-u-pt-sm\">\n        <Text component={TextVariants.small}>\n          {\n            <Trans\n              i18nKey={\"connection-tab:current_instance\"}\n              components={{\n                value: <Link to={linkToAccessTab}></Link>,\n              }}\n            />\n          }\n        </Text>\n      </TextContent>\n      <TextContent className=\"pf-u-pb-sm\">\n        <ExpandableSection\n          toggleContent={\n            <div className=\"pf-c-content\">\n              <Text component={TextVariants.h3} className={\"pf-c-content\"}>\n                {t(\"connection-tab:rest_api_header\")}\n              </Text>\n            </div>\n          }\n          isExpanded={isExpanded}\n          onToggle={onChangeExpandedSection}\n          className=\"pf-u-mt-lg\"\n        >\n          <TextContent className=\"pf-u-pb-sm\">\n            <Text component={TextVariants.small}>\n              {t(\"connection-tab:rest_api_description\")}\n            </Text>\n          </TextContent>\n          <TextContent>\n            <strong>\n              {t(\"connection-tab:kafka_instance_url_label\")}\n              <Popover\n                headerContent={\n                  <div>\n                    {t(\"connection-tab:kafka_instance_url_popover_label\")}\n                  </div>\n                }\n                bodyContent={\n                  <TextContent>\n                    <p>{t(\"connection-tab:kafka_instance_url_popover_body\")}</p>\n                    <p>\n                      <Trans\n                        ns={\"connection-tab\"}\n                        i18nKey={\"popover_helper_text\"}\n                        components={[\n                          <Button\n                            isInline\n                            variant={ButtonVariant.link}\n                            component=\"a\"\n                            href=\"https://console.redhat.com/docs/api/kafkainstance?github-owner=redhat-developer&github-repo=app-services-sdk-core&github-content=kafka-admin-rest.yaml%3Fref%3Ddoc-portal&readonly=true\"\n                          />,\n                          <ExternalLink\n                            testId={\"customerPortal-link\"}\n                            href=\"https://access.redhat.com/documentation/en-us/red_hat_openshift_application_services/1/guide/2409253a-45ee-470e-bdc9-5db4bfcf9d0f\"\n                            className={\"pf-u-ml-xs\"}\n                          />,\n                        ]}\n                      />\n                    </p>\n                  </TextContent>\n                }\n              >\n                <Button\n                  variant={ButtonVariant.plain}\n                  aria-label={t(\n                    \"connection-tab:kafka_instance_url_button_aria_label\"\n                  )}\n                >\n                  <HelpIcon />\n                </Button>\n              </Popover>\n            </strong>\n            {adminAPIUrl ? (\n              <ClipboardCopy\n                textAriaLabel={t(\"connection-tab:kafka_instance_url_label\")}\n                isReadOnly\n              >\n                {adminAPIUrl}\n              </ClipboardCopy>\n            ) : (\n              <Skeleton fontSize=\"2xl\" />\n            )}\n            <TextContent className=\"pf-u-pt-sm\">\n              <Text component={TextVariants.small}>\n                {t(\"connection-tab:kafka_instance_url_description\")}\n              </Text>\n            </TextContent>\n          </TextContent>\n          <TextContent className=\"pf-u-mt-md\">\n            <strong>\n              {t(\"connection-tab:kafka_management_url\")}\n              <Popover\n                headerContent={\n                  <div>\n                    {t(\"connection-tab:kafka_management_popover_header\")}\n                  </div>\n                }\n                bodyContent={\n                  <TextContent>\n                    <p>{t(\"connection-tab:kafka_management_popover_body\")}</p>\n                    <p>\n                      <Trans\n                        ns={\"connection-tab\"}\n                        i18nKey={\"popover_helper_text\"}\n                        components={[\n                          <Button\n                            isInline\n                            variant={ButtonVariant.link}\n                            component=\"a\"\n                            href=\"https://console.redhat.com/docs/api/kafkamgmt?github-owner=redhat-developer&github-repo=app-services-sdk-core&github-content=kas-fleet-manager.yaml%3Fref%3Ddoc-portal\"\n                          />,\n                          <ExternalLink\n                            testId={\"customerPortal-link\"}\n                            href=\"https://access.redhat.com/documentation/en-us/red_hat_openshift_application_services/1/guide/2409253a-45ee-470e-bdc9-5db4bfcf9d0f\"\n                            className={\"pf-u-ml-xs\"}\n                          />,\n                        ]}\n                      />\n                    </p>\n                  </TextContent>\n                }\n              >\n                <Button\n                  variant={ButtonVariant.plain}\n                  aria-label={t(\n                    \"connection-tab:kafka_management_button_aria_label\"\n                  )}\n                >\n                  <HelpIcon />\n                </Button>\n              </Popover>\n            </strong>\n            {isKafkaPending ? (\n              <Skeleton fontSize=\"2xl\" />\n            ) : (\n              <ClipboardCopy\n                textAriaLabel={t(\"connection-tab:kafka_management_url\")}\n                isReadOnly\n              >\n                {kafkaFleetManagerUrl}\n              </ClipboardCopy>\n            )}\n            <TextContent className=\"pf-u-pt-sm\">\n              <Text component={TextVariants.small}>\n                {t(\"connection-tab:kafka_management_description\")}\n              </Text>\n            </TextContent>\n          </TextContent>\n        </ExpandableSection>\n      </TextContent>\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.h3} className=\"pf-u-mt-xl\">\n          {t(\"connection-tab:authentication_method\")}\n        </Text>\n        <Text component={TextVariants.h4} className=\"pf-u-mt-md\">\n          {t(\"connection-tab:sasl_oauthbearer\")}{\" \"}\n          <Label color=\"green\">{t(\"connection-tab:recommended\")}</Label>\n          <Popover\n            aria-label={t(\"connection-tab:sasl_oauthbearer\")}\n            bodyContent={\n              <div>{t(\"connection-tab:sasl_oauthbearer_popover_content\")}</div>\n            }\n          >\n            <Button\n              variant={ButtonVariant.plain}\n              aria-label={t(\"connection-tab:more_info_about_sasl_oauthbearer\")}\n            >\n              <HelpIcon />\n            </Button>\n          </Popover>\n        </Text>\n        <Text component={TextVariants.small}>\n          {t(\"connection-tab:sasl_oauthbearer_description\")}\n        </Text>\n        <strong>{t(\"connection-tab:token_endpoint_url\")}</strong>\n        {isKafkaPending ? (\n          <Skeleton fontSize=\"2xl\" />\n        ) : (\n          <ClipboardCopy\n            textAriaLabel={t(\"connection-tab:token_endpoint_url\")}\n            isReadOnly\n          >\n            {tokenEndPointUrl}\n          </ClipboardCopy>\n        )}\n      </TextContent>\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.h4} className=\"pf-u-mt-md\">\n          {t(\"connection-tab:sasl_plain\")}\n        </Text>\n        <Text component={TextVariants.small}>\n          {t(\"connection-tab:sasl_plain_description\")}\n        </Text>\n      </TextContent>\n    </div>\n  );\n};\n","import {\n  ClipboardCopyButton,\n  CodeBlock,\n  CodeBlockAction,\n  CodeBlockCode,\n  ExpandableSection,\n  ExpandableSectionToggle,\n} from \"@patternfly/react-core\";\nimport { useEffect, useState } from \"react\";\nimport type { VoidFunctionComponent } from \"react\";\n\nexport type ClientType = \"java\" | \"python\" | \"quarkus\" | \"springboot\";\n\nexport type SampleCodeSnippetProps = {\n  expandableCode?: string;\n  codeBlockCode: string;\n  codeSnippet?: ClientType;\n};\n\nexport const SampleCodeSnippet: VoidFunctionComponent<\n  SampleCodeSnippetProps\n> = ({ expandableCode, codeBlockCode, codeSnippet }) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  const [copied, setCopied] = useState<boolean>(false);\n\n  useEffect(() => {\n    setIsExpanded(false);\n  }, [codeSnippet]);\n\n  const clipboardCopyFunc = (_event: any, text: string) => {\n    navigator.clipboard\n      .writeText(text.toString())\n      .then(() => {\n        setCopied(true);\n      })\n      .catch(() => {\n        setCopied(false);\n      });\n  };\n\n  const onToggle = (isExpanded: boolean) => {\n    setIsExpanded(isExpanded);\n  };\n\n  const copyCode = expandableCode\n    ? codeBlockCode + \"\\n\" + expandableCode\n    : codeBlockCode;\n\n  const actions = (\n    <CodeBlockAction>\n      <ClipboardCopyButton\n        id=\"basic-copy-button\"\n        textId=\"code-content\"\n        aria-label=\"Copy to clipboard\"\n        exitDelay={600}\n        maxWidth=\"110px\"\n        variant=\"plain\"\n        onClick={(e) => clipboardCopyFunc(e, copyCode)}\n      >\n        {copied ? \"Successfully copied to clipboard!\" : \"Copy to clipboard\"}\n      </ClipboardCopyButton>\n    </CodeBlockAction>\n  );\n\n  return (\n    <CodeBlock actions={actions}>\n      <CodeBlockCode id=\"code-content\">\n        {codeBlockCode}\n\n        <ExpandableSection\n          isExpanded={isExpanded}\n          isDetached\n          contentId=\"code-block-expand\"\n        >\n          {expandableCode}\n        </ExpandableSection>\n      </CodeBlockCode>\n      {expandableCode ? (\n        <ExpandableSectionToggle\n          isExpanded={isExpanded}\n          onToggle={onToggle}\n          contentId=\"code-block-expand\"\n          direction=\"up\"\n        >\n          {isExpanded ? \"Show Less\" : \"Show More\"}\n        </ExpandableSectionToggle>\n      ) : null}\n    </CodeBlock>\n  );\n};\n","export const javaConfigCodeBlock = (\n  kafkaBootstrapUrl: string,\n  tokenEndpointUrl: string\n) => {\n  return `package org.example;\nimport org.apache.kafka.clients.producer.ProducerConfig;  \nimport java.util.Properties;\n    \npublic class KafkaConfig {\n    \n    static Properties properties() {\n    \n        String kafkaHost = \"${kafkaBootstrapUrl}\";\n        String rhoasClientID = \"<client_id>\";\n        String rhoasClientSecret = \"<client_secret>\";\n        String rhoasOauthTokenUrl = \"${tokenEndpointUrl}\";`;\n};\n\nexport const javaConfigExpandabledBlock = `\n        var properties= new Properties();\n\n        properties.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaHost);\n        properties.setProperty(\"security.protocol\", \"SASL_SSL\");\n        properties.setProperty(\"sasl.mechanism\", \"OAUTHBEARER\");\n\n        properties.setProperty(\"sasl.jaas.config\", \"org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required clientId=\\\\\"\" + rhoasClientID + \"\\\\\" clientSecret=\\\\\"\" + rhoasClientSecret + \"\\\\\" oauth.token.endpoint.uri=\\\\\"\" + rhoasOauthTokenUrl + \"\\\\\";\");\n\n        properties.setProperty(\"sasl.login.callback.handler.class\", \"org.apache.kafka.common.security.oauthbearer.secured.OAuthBearerLoginCallbackHandler\");\n        properties.setProperty(\"sasl.oauthbearer.token.endpoint.url\", rhoasOauthTokenUrl);\n        properties.setProperty(\"sasl.oauthbearer.scope.claim.name\", \"api.iam.service_accounts\");\n\n        return properties;\n    }\n}`;\n\nexport const javaProducerCodeBlock = `package org.example;\n \nimport org.apache.kafka.clients.producer.ProducerConfig;\nimport org.apache.kafka.clients.producer.ProducerRecord;\nimport org.apache.kafka.clients.producer.KafkaProducer;\nimport org.apache.kafka.common.serialization.StringSerializer;\n \npublic class ProducerExample {\n \n   public static void main(String[] args) {`;\n\nexport const javaProducerExpandableBlock = `\n   //Creating producer properties\n   var properties= KafkaConfig.properties();\n   properties.setProperty(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n   properties.setProperty(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n\n   KafkaProducer<String,String> producer= new KafkaProducer<String,String>(properties);\n\n   producer.send(new ProducerRecord<>(<\"topic\">, \"Test Message\"));\n   producer.flush();\n   producer.close();\n  }\n}`;\n\nexport const javaConsumerCodeBlock = `package org.example;\n \nimport java.util.Arrays;\n\nimport org.apache.kafka.clients.consumer.ConsumerConfig;\nimport org.apache.kafka.clients.consumer.KafkaConsumer;\nimport org.apache.kafka.common.serialization.StringDeserializer;\nimport org.apache.kafka.clients.consumer.ConsumerRecord;\nimport org.apache.kafka.clients.consumer.ConsumerRecords;\nimport java.time.Duration;`;\n\nexport const javaConsumerExpandableBlock = `\npublic class ConsumerExample {\n\n    public static void main(String[] args) {\n\n        var properties= KafkaConfig.properties();\n\n        properties.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n        properties.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n        properties.setProperty(ConsumerConfig.GROUP_ID_CONFIG,\"test_group_2\");\n        properties.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n\n        KafkaConsumer<String,String> consumer = new KafkaConsumer<String,String>(properties);\n\n        //Subscribing\n        consumer.subscribe(Arrays.asList(\"<topic>\"));\n\n        //polling\n        while(true){\n            ConsumerRecords<String,String> records=consumer.poll(Duration.ofMillis(100));\n            for(ConsumerRecord<String,String> record: records) {\n                System.out.println(\"Key: \"+ record.key() + \", Value:\" +record.value());\n                System.out.println(\"Partition:\" + record.partition()+\",Offset:\"+record.offset());\n            }\n        }\n    }\n}`;\n\nexport const pythonConfigCodeBlock = (tokenEndpointUrl: string) => {\n  return `import time\nimport requests\n    \ndef _get_token(config):\n    payload = {\"grant_type\": \"client_credentials\", \"scope\": \"api.iam.service_accounts\"}\n    resp = requests.post(\n        \"${tokenEndpointUrl}\",\n        auth=(\n            <client_id>,\n            <client_secret>,\n        ),\n        data=payload,\n    )`;\n};\n\nexport const pythonConfigExpandabledBlock = (kafkaBootstrapUrl: string) => {\n  return `\n    token = resp.json()\n    return token[\"access_token\"], time.time() + float(token[\"expires_in\"])\n    \n    common_config = {\n    'bootstrap.servers': \"${kafkaBootstrapUrl}\",\n    'security.protocol': 'SASL_SSL',\n    'sasl.mechanisms': 'OAUTHBEARER',\n    'oauth_cb': _get_token,\n    }\n    \n    topic=<topic>`;\n};\n\nexport const pythonProducer = `from confluent_kafka import Producer\n \nproducer = Producer(common_config)\n \nproducer.produce(topic=<topic>, value=b\"Sample Message\")\nproducer.flush()`;\n\nexport const pythonConsumerCodeBlock = `from confluent_kafka import Consumer\n \nconsumer_config = {\n    \"group.id\": \"test-group\",\n    'session.timeout.ms': 6000,\n    'auto.offset.reset': 'earliest',\n}\n\nconsumer = Consumer({ **consumer_config, **common_config })\n\nconsumer.subscribe([<topic>])`;\n\nexport const pythonConsumerExpandableBlock = `while True:\ntry:\n    msg = consumer.poll(1.0)\n    if msg is None:\n        continue\n\n    print(msg.value())\nexcept KeyboardInterrupt:\n    break\n\nconsumer.close()`;\n\nexport const quarkusConfigCodeBlock = `# Quarkus config\nquarkus.ssl.native=true\n\n# Configure the Kafka sink (we write to it)\nmp.messaging.outgoing.generated-price.connector=smallrye-kafka\nmp.messaging.outgoing.generated-price.topic=<topic>\nmp.messaging.outgoing.generated-price.value.serializer=org.apache.kafka.common.serialization.IntegerSerializer\n\n# Configure the Kafka source (we read from it)\nmp.messaging.incoming.prices.connector=smallrye-kafka\nmp.messaging.incoming.prices.topic=<topic>\nmp.messaging.incoming.prices.value.deserializer=org.apache.kafka.common.serialization.IntegerDeserializer`;\n\nexport const quarkusConfigExpandableBlock = (\n  kafkaBootstrapUrl: string,\n  tokenEndpointUrl: string\n) => {\n  return `\n# Configure docker config\nquarkus.container-image.builder=jib\nquarkus.kubernetes.deployment-target=kubernetes\nquarkus.container-image.build=false\nquarkus.container-image.push=false\n    \n## dev profile using user defined environment variables that uses SASL/OAUTHBEARER\n## ./mvnw quarkus:dev\n## ./mvnw package -Dquarkus.profile=dev\n    \n%dev.kafka.bootstrap.servers=\\${\"${kafkaBootstrapUrl}\"}\n%dev.kafka.security.protocol=SASL_SSL\n    \n%dev.kafka.sasl.mechanism=OAUTHBEARER\n%dev.kafka.sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\\\n    oauth.client.id=\"\\${<client_id>}\" \\\\\n    oauth.client.secret=\"\\${<client_secret>}\" \\\\\n    oauth.token.endpoint.uri=\"\\${\"${tokenEndpointUrl}\"}\" ;\n%dev.kafka.sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler`;\n};\n\nexport const quarkusProducerCodeBlock = `package org.acme.kafka;\nimport java.time.Duration;\nimport java.util.Random;\n\nimport javax.enterprise.context.ApplicationScoped;\n\nimport io.smallrye.mutiny.Multi;\nimport org.eclipse.microprofile.reactive.messaging.Outgoing;`;\n\nexport const quarkusProducerExpandableBlock = `\n/**\n* A bean producing random prices every 5 seconds.\n* The prices are written to a Kafka topic (prices). The Kafka configuration is specified in the application configuration.\n*/\n@ApplicationScoped\npublic class PriceGenerator {\n\n   private Random random = new Random();\n\n   @Outgoing(\"generated-price\")\n   public Multi<Integer> generate() {\n       return Multi.createFrom().ticks().every(Duration.ofSeconds(5))\n               .onOverflow().drop()\n               .map(tick -> random.nextInt(100));\n   }\n\n}`;\n\nexport const quarkusConsumerCodeBlock = `package org.acme.kafka;\nimport javax.enterprise.context.ApplicationScoped;\n\nimport org.eclipse.microprofile.reactive.messaging.Acknowledgment;\nimport org.eclipse.microprofile.reactive.messaging.Incoming;\nimport org.eclipse.microprofile.reactive.messaging.Outgoing;\n\nimport io.smallrye.reactive.messaging.annotations.Broadcast;\n\n/**\n * A bean consuming data from the \"prices\" Kafka topic and applying some conversion.\n * The result is pushed to the \"my-data-stream\" stream which is an in-memory stream.\n */\n@ApplicationScoped`;\n\nexport const quarkusConsumerExpandableBlock = `public class PriceConverter {\n\n    private static final double CONVERSION_RATE = 0.88;\n\n    // Consume from the \\`prices\\` channel and produce to the \\`my-data-stream\\` channel\n    @Incoming(\"prices\")\n    @Outgoing(\"my-data-stream\")\n    // Send to all subscribers\n    @Broadcast\n    // Acknowledge the messages before calling this method.\n    @Acknowledgment(Acknowledgment.Strategy.PRE_PROCESSING)\n    public double process(int priceInUsd) {\n        return priceInUsd * CONVERSION_RATE;\n    }\n\n}`;\n\nexport const springBootConfigCodeBlock = (\n  kafkaBootstrapUrl: string,\n  tokenEndpointUrl: string\n) => {\n  return `package com.example.kafkaconfig;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class KafkaConfig {\n\n   public static Map<String, Object> Config() {\n\n       Map<String, Object> config = new HashMap<>();\n\n       String kafkaHost = \"${kafkaBootstrapUrl}\";\n       String rhoasClientID = \"<client_id>\";\n       String rhoasClientSecret = \"<client_secret>\";\n       String rhoasOauthTokenUrl = \"${tokenEndpointUrl}\";`;\n};\n\nexport const springBootConfigExpandableBlock = `\n    config.put(\"bootstrap.servers\", kafkaHost);\n\n    config.put(\"security.protocol\", \"SASL_SSL\");\n    config.put(\"sasl.mechanism\", \"OAUTHBEARER\");\n\n    config.put(\"sasl.jaas.config\", \"org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required clientId=\\\\\"\" + rhoasClientID + \"\\\\\" clientSecret=\\\\\"\" + rhoasClientSecret + \"\\\\\" oauth.token.endpoint.uri=\\\\\"\" + rhoasOauthTokenUrl + \"\\\\\";\");\n    config.put(\"sasl.login.callback.handler.class\", \"org.apache.kafka.common.security.oauthbearer.secured.OAuthBearerLoginCallbackHandler\");\n    config.put(\"sasl.oauthbearer.token.endpoint.url\", rhoasOauthTokenUrl);\n    config.put(\"sasl.oauthbearer.scope.claim.name\", \"api.iam.service_accounts\");\n\n    return config;\n   }\n}`;\n\nexport const springBootProducerCodeBlock = `package com.example.kafkademo;\nimport org.apache.kafka.clients.producer.ProducerConfig;\nimport org.apache.kafka.common.serialization.StringSerializer;\nimport org.springframework.boot.ApplicationRunner;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.kafka.core.DefaultKafkaProducerFactory;\nimport org.springframework.kafka.core.KafkaTemplate;\nimport org.springframework.kafka.core.ProducerFactory;\nimport com.example.kafkaconfig.KafkaConfig;\n\nimport java.util.Map;`;\n\nexport const springBootProducerExpandableBlock = `\n@SpringBootApplication\npublic class KafkaProducerExample {\n\n  public static void main(String[] args) throws Exception {\n    SpringApplication.run(KafkaProducerExample.class, args);\n  }\n\n  @Bean\n  public ProducerFactory<String, String> producerFactory() {\n    Map<String, Object> config = KafkaConfig.Config();\n\n    config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n    config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n\n    return new DefaultKafkaProducerFactory<String, String>(config);\n  }\n\n  @Bean\n  public KafkaTemplate<String, String> kafkaTemplate() {\n    return new KafkaTemplate<>(producerFactory());\n  }\n\n  @Bean\n  public ApplicationRunner runner(KafkaTemplate<String, String> template) {\n    return args -> {\n      template.send(<\"topic\">, \"Test Message\");\n    };\n  }\n\n}`;\n\nexport const springBootListenerCodeBlock = `package com.example.kafkaconsumer.listener;\n\nimport com.example.kafkaconfig.KafkaConfig;\nimport org.apache.kafka.clients.consumer.ConsumerConfig;\nimport org.apache.kafka.common.serialization.StringDeserializer;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.kafka.annotation.KafkaListener;\nimport org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;\nimport org.springframework.kafka.core.ConsumerFactory;\nimport org.springframework.kafka.core.DefaultKafkaConsumerFactory;\nimport org.springframework.stereotype.Component;\n\nimport java.util.Map;`;\n\nexport const springBootListenerExpandableBlock = `@Component\npublic class Listener {\n\n    @KafkaListener(topics = <\"topic\">,\n            containerFactory = \"concurrentKafkaListenerContainerFactory\",\n            groupId = \"test_group\")\n\n    // Method\n    public void consume(String message)\n    {\n        // Print statement\n        System.out.println(message);\n    }\n}`;\n\nexport const springBootConsumerConfigCodeBlock = `package com.example.kafkaconsumer.config;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport com.example.kafkaconfig.KafkaConfig;\nimport org.apache.kafka.clients.consumer.ConsumerConfig;\nimport org.apache.kafka.common.serialization.StringDeserializer;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.kafka.annotation.EnableKafka;\nimport org.springframework.kafka.core.ConsumerFactory;\nimport org.springframework.kafka.core.DefaultKafkaConsumerFactory;\nimport org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;`;\n\nexport const springBootConsumerConfigExpandableBlock = `// Annotations\n@EnableKafka\n@Configuration\n\npublic class KafkaConsumerConfig {\n\n    @Bean\n    public ConsumerFactory<String, String> consumerFactory() {\n        Map<String, Object> config = KafkaConfig.Config();\n\n        config.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n        config.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n\n        return new DefaultKafkaConsumerFactory<>(config);\n    }\n\n    @Bean\n    public ConcurrentKafkaListenerContainerFactory concurrentKafkaListenerContainerFactory() {\n        ConcurrentKafkaListenerContainerFactory<\n                String, String> factory\n                = new ConcurrentKafkaListenerContainerFactory<>();\n        factory.setConsumerFactory(consumerFactory());\n        return factory;\n    }\n}`;\n\nexport const springBootConsumerExampleCodeBlock = `\npackage com.example.kafkaconsumer;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;`;\n\nexport const springBootConsumerExampleExpandableBlock = `\n@SpringBootApplication\npublic class KafkaConsumerExample {\n\n    public static void main(String[] args) {\n        SpringApplication.run(KafkaConsumerExample.class, args);\n    }\n\n}`;\n","import {\n  TextContent,\n  TextVariants,\n  Text,\n  ToggleGroup,\n  ToggleGroupItem,\n} from \"@patternfly/react-core\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useState } from \"react\";\nimport { SampleCodeSnippet } from \"./SampleCodeSnippet\";\nimport {\n  javaConfigCodeBlock,\n  javaConfigExpandabledBlock,\n  javaConsumerCodeBlock,\n  javaConsumerExpandableBlock,\n  javaProducerCodeBlock,\n  javaProducerExpandableBlock,\n  pythonConfigCodeBlock,\n  pythonConfigExpandabledBlock,\n  pythonConsumerCodeBlock,\n  pythonConsumerExpandableBlock,\n  pythonProducer,\n  quarkusConfigCodeBlock,\n  quarkusConfigExpandableBlock,\n  quarkusConsumerCodeBlock,\n  quarkusConsumerExpandableBlock,\n  quarkusProducerCodeBlock,\n  quarkusProducerExpandableBlock,\n  springBootConfigCodeBlock,\n  springBootConfigExpandableBlock,\n  springBootConsumerConfigCodeBlock,\n  springBootConsumerConfigExpandableBlock,\n  springBootConsumerExampleCodeBlock,\n  springBootConsumerExampleExpandableBlock,\n  springBootListenerCodeBlock,\n  springBootListenerExpandableBlock,\n  springBootProducerCodeBlock,\n  springBootProducerExpandableBlock,\n} from \"./CodeSnippets\";\n\nexport type ClientType = \"java\" | \"python\" | \"quarkus\" | \"springboot\";\n\nexport type KafkaSampleCodeProps = {\n  kafkaBootstrapUrl: string;\n  tokenEndpointUrl: string;\n};\n\nexport const KafkaSampleCode: VoidFunctionComponent<KafkaSampleCodeProps> = ({\n  kafkaBootstrapUrl,\n  tokenEndpointUrl,\n}) => {\n  const { t } = useTranslation(\"kafka\");\n\n  const [clientSelect, setClientSelect] = useState<ClientType>(\"java\");\n\n  const clientProvider: { [provider in ClientType]: string } = {\n    java: t(\"sample_code.clients.java\"),\n    python: t(\"sample_code.clients.python\"),\n    quarkus: t(\"sample_code.clients.quarkus\"),\n    springboot: t(\"sample_code.clients.spring_boot\"),\n  };\n\n  return (\n    <div className=\"mas--details__drawer--tab-content\">\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.small}>\n          {t(\"sample_code.code_snippet_description_1\")}\n        </Text>\n        <Text component={TextVariants.small}>\n          {t(\"sample_code.code_snippet_description_2\")}\n        </Text>\n        <ToggleGroup>\n          <ToggleGroupItem\n            text={clientProvider[\"java\"]}\n            value=\"java\"\n            buttonId=\"java\"\n            isSelected={clientSelect === \"java\"}\n            onChange={() => setClientSelect(\"java\")}\n          />\n          <ToggleGroupItem\n            text={clientProvider[\"python\"]}\n            value=\"python\"\n            buttonId=\"python\"\n            isSelected={clientSelect === \"python\"}\n            onChange={() => setClientSelect(\"python\")}\n          />\n          <ToggleGroupItem\n            text={clientProvider[\"quarkus\"]}\n            value=\"quarkus\"\n            buttonId=\"quarkus\"\n            isSelected={clientSelect === \"quarkus\"}\n            onChange={() => setClientSelect(\"quarkus\")}\n          />\n          <ToggleGroupItem\n            text={clientProvider[\"springboot\"]}\n            value=\"springboot\"\n            buttonId=\"springboot\"\n            isSelected={clientSelect === \"springboot\"}\n            onChange={() => setClientSelect(\"springboot\")}\n          />\n        </ToggleGroup>\n        <Text component={TextVariants.h3} className=\"pf-u-mt-xl\">\n          {t(\"sample_code.sample_configuration_code\")}\n        </Text>\n        <Text component={TextVariants.small}>\n          {t(\"sample_code.sample_configuration_code_description\")}\n        </Text>\n        <Text component={TextVariants.small}>\n          {t(\"sample_code.bracket_text\")}\n        </Text>\n        {(() => {\n          switch (clientSelect) {\n            case \"java\":\n              return (\n                <SampleCodeSnippet\n                  codeBlockCode={javaConfigCodeBlock(\n                    kafkaBootstrapUrl,\n                    tokenEndpointUrl\n                  )}\n                  expandableCode={javaConfigExpandabledBlock}\n                  codeSnippet={clientSelect}\n                />\n              );\n            case \"python\":\n              return (\n                <SampleCodeSnippet\n                  codeBlockCode={pythonConfigCodeBlock(tokenEndpointUrl)}\n                  expandableCode={pythonConfigExpandabledBlock(\n                    kafkaBootstrapUrl\n                  )}\n                  codeSnippet={clientSelect}\n                />\n              );\n            case \"quarkus\":\n              return (\n                <SampleCodeSnippet\n                  codeBlockCode={quarkusConfigCodeBlock}\n                  expandableCode={quarkusConfigExpandableBlock(\n                    kafkaBootstrapUrl,\n                    tokenEndpointUrl\n                  )}\n                  codeSnippet={clientSelect}\n                />\n              );\n            case \"springboot\":\n              return (\n                <SampleCodeSnippet\n                  codeBlockCode={springBootConfigCodeBlock(\n                    kafkaBootstrapUrl,\n                    tokenEndpointUrl\n                  )}\n                  expandableCode={springBootConfigExpandableBlock}\n                  codeSnippet={clientSelect}\n                />\n              );\n            default:\n              return null;\n          }\n        })()}\n        <Text component={TextVariants.h3} className=\"pf-u-mt-xl\">\n          {t(\"sample_code.sample_producer_code\")}\n        </Text>\n        {clientSelect === \"quarkus\" ? (\n          <>\n            <Text component={TextVariants.small}>\n              {t(\"sample_code.sample_producer_code_quarkus_description\")}\n            </Text>\n            <SampleCodeSnippet\n              codeBlockCode={quarkusProducerCodeBlock}\n              expandableCode={quarkusProducerExpandableBlock}\n              codeSnippet={clientSelect}\n            />\n          </>\n        ) : (\n          <>\n            <Text component={TextVariants.small}>\n              <Trans\n                ns={\"kafka\"}\n                i18nKey={\"sample_code.sample_producer_code_description\"}\n                values={{\n                  client_type: clientProvider[clientSelect],\n                }}\n              />\n            </Text>\n            <Text component={TextVariants.small}>\n              {t(\"sample_code.bracket_text\")}\n            </Text>\n            {(() => {\n              switch (clientSelect) {\n                case \"java\":\n                  return (\n                    <SampleCodeSnippet\n                      codeBlockCode={javaProducerCodeBlock}\n                      expandableCode={javaProducerExpandableBlock}\n                      codeSnippet={clientSelect}\n                    />\n                  );\n                case \"python\":\n                  return <SampleCodeSnippet codeBlockCode={pythonProducer} />;\n                case \"springboot\":\n                  return (\n                    <SampleCodeSnippet\n                      codeBlockCode={springBootProducerCodeBlock}\n                      expandableCode={springBootProducerExpandableBlock}\n                      codeSnippet={clientSelect}\n                    />\n                  );\n                default:\n                  return null;\n              }\n            })()}\n          </>\n        )}\n\n        <Text component={TextVariants.h3} className=\"pf-u-mt-xl\">\n          {t(\"sample_code.sample_consumer_code\")}\n        </Text>\n        {clientSelect === \"springboot\" ? (\n          <>\n            <Text component={TextVariants.small}>\n              {t(\"sample_code.spring_boot_sample_consumer_code_description\")}\n            </Text>\n            <Text component={TextVariants.h4} className=\"pf-u-mt-xl\">\n              {t(\"sample_code.spring_boot_consumer_configuration\")}\n            </Text>\n            <Text component={TextVariants.small}>\n              {t(\"sample_code.spring_boot_consumer_configuration_description\")}\n            </Text>\n            <SampleCodeSnippet\n              codeBlockCode={springBootConsumerConfigCodeBlock}\n              expandableCode={springBootConsumerConfigExpandableBlock}\n              codeSnippet={clientSelect}\n            />\n            <Text component={TextVariants.h4} className=\"pf-u-mt-xl\">\n              {t(\"sample_code.spring_boot_listener\")}\n            </Text>\n            <Text component={TextVariants.small}>\n              {t(\"sample_code.spring_boot_listener_description\")}\n            </Text>\n            <Text component={TextVariants.small}>\n              {t(\"sample_code.bracket_text\")}\n            </Text>\n            <SampleCodeSnippet\n              codeBlockCode={springBootListenerCodeBlock}\n              expandableCode={springBootListenerExpandableBlock}\n              codeSnippet={clientSelect}\n            />\n            <Text component={TextVariants.h4} className=\"pf-u-mt-xl\">\n              {t(\"sample_code.spring_boot_consumer\")}\n            </Text>\n            <Text component={TextVariants.small}>\n              {t(\"sample_code.spring_boot_consumer_description\")}\n            </Text>\n            <SampleCodeSnippet\n              codeBlockCode={springBootConsumerExampleCodeBlock}\n              expandableCode={springBootConsumerExampleExpandableBlock}\n              codeSnippet={clientSelect}\n            />\n          </>\n        ) : (\n          <>\n            <Text component={TextVariants.small}>\n              <Trans\n                ns={\"kafka\"}\n                i18nKey={\"sample_code.sample_consumer_code_description\"}\n                values={{\n                  client_type: clientProvider[clientSelect],\n                }}\n              />\n            </Text>\n            {clientSelect === \"quarkus\" ? null :\n              <Text component={TextVariants.small}>\n                {t(\"sample_code.bracket_text\")}\n              </Text>}\n            {(() => {\n              switch (clientSelect) {\n                case \"java\":\n                  return (\n                    <SampleCodeSnippet\n                      codeBlockCode={javaConsumerCodeBlock}\n                      expandableCode={javaConsumerExpandableBlock}\n                      codeSnippet={clientSelect}\n                    />\n                  );\n                case \"python\":\n                  return (\n                    <SampleCodeSnippet\n                      codeBlockCode={pythonConsumerCodeBlock}\n                      expandableCode={pythonConsumerExpandableBlock}\n                      codeSnippet={clientSelect}\n                    />\n                  );\n                case \"quarkus\":\n                  return (\n                    <SampleCodeSnippet\n                      codeBlockCode={quarkusConsumerCodeBlock}\n                      expandableCode={quarkusConsumerExpandableBlock}\n                      codeSnippet={clientSelect}\n                    />\n                  );\n                default:\n                  return null;\n              }\n            })()}\n          </>\n        )}\n      </TextContent>\n    </div>\n  );\n};\n","import type { TabsProps } from \"@patternfly/react-core\";\nimport {\n  Drawer,\n  DrawerActions,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerContentBody,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerPanelContent,\n  Tab,\n  Tabs,\n  TabTitleText,\n  Text,\n  TextContent,\n  TextVariants,\n  Title,\n  TitleSizes,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { parseISO } from \"date-fns\";\nimport type { FunctionComponent, VoidFunctionComponent } from \"react\";\nimport { useCallback, useMemo } from \"react\";\nimport type { Kafka } from \"ui-models/src/models/kafka\";\nimport { CreatingStatuses } from \"ui-models/src/models/kafka\";\nimport { useKafkaLabels } from \"../../hooks\";\nimport {\n  KafkaConnectionTabP2,\n  KafkaDetailsTab,\n  KafkaSampleCode,\n} from \"./components\";\n\nexport type KafkaInstanceDrawerProps = {\n  instance?: Kafka;\n  isExpanded: boolean;\n  activeTab: KafkaInstanceDrawerTab;\n  onTabChange: (tab: KafkaInstanceDrawerTab) => void;\n\n  onClose: () => void;\n};\n\nexport const KafkaInstanceDrawer: FunctionComponent<\n  KafkaInstanceDrawerProps\n> = ({ instance, activeTab, isExpanded, onTabChange, onClose, children }) => {\n  const content = useMemo(() => {\n    return (\n      <DrawerPanelContent>\n        {instance ? (\n          <KafkaInstanceDrawerPanel\n            instance={instance}\n            activeTab={activeTab}\n            onTabChange={onTabChange}\n            onClose={onClose}\n          />\n        ) : null}\n      </DrawerPanelContent>\n    );\n  }, [activeTab, instance, onClose, onTabChange]);\n  return (\n    <Drawer isExpanded={isExpanded} isInline={true}>\n      <DrawerContent panelContent={content}>\n        <DrawerContentBody\n          className={\"pf-u-display-flex pf-u-flex-direction-column\"}\n        >\n          {children}\n        </DrawerContentBody>\n      </DrawerContent>\n    </Drawer>\n  );\n};\n\nexport type KafkaInstanceDrawerTab = \"details\" | \"connections\";\n\nexport const KafkaInstanceDrawerPanel: VoidFunctionComponent<\n  Required<Omit<KafkaInstanceDrawerProps, \"isExpanded\">> & {\n    activeTab: KafkaInstanceDrawerTab;\n  }\n> = ({ instance, activeTab, onTabChange, onClose }) => {\n  const { t } = useTranslation([\"kafka\"]);\n  const labels = useKafkaLabels();\n\n  const handleSelect: TabsProps[\"onSelect\"] = useCallback(\n    (_, tab) => {\n      const t = tab as KafkaInstanceDrawerTab;\n      onTabChange(t);\n    },\n    [onTabChange]\n  );\n\n  const isKafkaPending = CreatingStatuses.includes(instance.status);\n\n  return (\n    <>\n      <DrawerHead>\n        <TextContent>\n          <Text component={TextVariants.small} className={\"pf-u-mb-0\"}>\n            {t(\"common:name\")}\n          </Text>\n          <Title\n            headingLevel={\"h1\"}\n            size={TitleSizes[\"xl\"]}\n            className={\"pf-u-mt-0\"}\n          >\n            {instance.name}\n          </Title>\n        </TextContent>\n        <DrawerActions>\n          <DrawerCloseButton onClick={onClose} />\n        </DrawerActions>\n      </DrawerHead>\n      <DrawerPanelBody>\n        <Tabs activeKey={activeTab} onSelect={handleSelect}>\n          <Tab\n            eventKey={\"details\"}\n            title={<TabTitleText>{t(\"drawer-tabs.details\")}</TabTitleText>}\n          >\n            <div className={\"pf-u-pt-md pf-u-pb-md\"}>\n              <KafkaDetailsTab\n                id={instance.id}\n                owner={instance.owner}\n                createdAt={parseISO(instance.createdAt)}\n                updatedAt={parseISO(instance.updatedAt)}\n                expiryDate={\n                  instance.expiryDate\n                    ? parseISO(instance.expiryDate)\n                    : undefined\n                }\n                size={instance.size}\n                ingress={instance.ingress}\n                egress={instance.egress}\n                storage={instance.storage}\n                maxPartitions={instance.maxPartitions}\n                connections={instance.connections}\n                connectionRate={instance.connectionRate}\n                messageSize={instance.messageSize}\n                provider={\n                  labels.providers[instance.provider] || instance.provider\n                }\n                region={\n                  labels.providerRegions[instance.provider][instance.region] ||\n                  instance.region\n                }\n                instanceType={instance.plan}\n                billing={instance.billing}\n                kafkaVersion={instance.version}\n              />\n            </div>\n          </Tab>\n          <Tab\n            eventKey={\"connections\"}\n            title={<TabTitleText>{t(\"drawer-tabs.connections\")}</TabTitleText>}\n            data-testid=\"drawerStreams-tabConnect\"\n          >\n            <div className={\"pf-u-pt-md pf-u-pb-md\"}>\n              <KafkaConnectionTabP2\n                isKafkaPending={isKafkaPending}\n                externalServer={getExternalServer(instance.bootstrapUrl)}\n                tokenEndPointUrl={\"TODO\"}\n                linkToServiceAccount={\"service-accounts\"}\n                linkToAccessTab={`TODO/acls`}\n                adminAPIUrl={getAdminServerUrl(instance.adminUrl)}\n                showCreateServiceAccountModal={() => {\n                  /* TODO */\n                }}\n                kafkaFleetManagerUrl={\n                  \"https://api.openshift.com/api/kafkas_mgmt/v1/openapi\"\n                }\n              />\n            </div>\n          </Tab>\n          <Tab\n            eventKey={\"samplecode\"}\n            title={<TabTitleText>{t(\"drawer-tabs.sample-code\")}</TabTitleText>}\n          >\n            <div className={\"pf-u-pt-md pf-u-pb-md\"}>\n              <KafkaSampleCode\n                kafkaBootstrapUrl={getExternalServer(instance.bootstrapUrl)!}\n                tokenEndpointUrl={\"TODO\"}\n              />\n            </div>\n          </Tab>\n        </Tabs>\n      </DrawerPanelBody>\n    </>\n  );\n};\n\nconst getExternalServer = (bootstrapUrl: string | undefined) => {\n  if (!bootstrapUrl) {\n    return undefined;\n  }\n  return bootstrapUrl?.endsWith(\":443\") ? bootstrapUrl : `${bootstrapUrl}:443`;\n};\n\nconst getAdminServerUrl = (adminUrl: string | undefined) => {\n  return adminUrl ? `${adminUrl}/openapi` : undefined;\n};\n","import {\n  Alert,\n  Button,\n  Flex,\n  FlexItem,\n  HelperText,\n  HelperTextItem,\n  Spinner,\n  Split,\n  SplitItem,\n} from \"@patternfly/react-core\";\nimport {\n  CheckCircleIcon,\n  ExclamationTriangleIcon,\n} from \"@patternfly/react-icons\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { forwardRef } from \"react\";\nimport type { Status } from \"ui-models/src/models/kafka\";\nimport {\n  CreatingStatuses,\n  DegradedStatuses,\n  DeletingStatuses,\n  ReadyStatuses,\n  ResumingStatuses,\n  SuspendedStatuses,\n  SuspendingStatuses,\n} from \"ui-models/src/models/kafka\";\nimport \"./StatusLabel.css\";\n\ntype StatusLabelProps = {\n  value: Status;\n  showWarning?: boolean;\n  showError?: boolean;\n  withPopover?: boolean;\n};\n\n/**\n *<strong> Introduction </strong>\n *These are the various statuses that can show in the Kafka instances table under the \"Status\" header.\n */\nexport const StatusLabel = forwardRef<HTMLButtonElement, StatusLabelProps>(\n  (\n    { value, showWarning = false, showError = false, withPopover = false },\n    ref\n  ) => {\n    const { t } = useTranslation(\"kafka\");\n\n    const buttonVariant = withPopover ? \"link\" : \"plain\";\n\n    switch (true) {\n      case ReadyStatuses.includes(value):\n        return (\n          <div>\n            <Split hasGutter className=\"mas-c-status\">\n              <SplitItem>\n                <CheckCircleIcon className=\"mas-m-ready\" />\n              </SplitItem>\n              <SplitItem>{t(\"statuses.ready\")}</SplitItem>\n            </Split>\n          </div>\n        );\n\n      case CreatingStatuses.includes(value):\n        switch (true) {\n          case showWarning:\n            return (\n              <div>\n                <Split hasGutter className=\"mas-c-status\">\n                  <SplitItem>\n                    <Spinner size=\"md\" />\n                  </SplitItem>\n                  <SplitItem>\n                    <Button ref={ref} variant={buttonVariant} isInline>\n                      {t(\"statuses.creating\")}\n                    </Button>\n                  </SplitItem>\n                </Split>\n                <Alert\n                  variant=\"warning\"\n                  isInline\n                  isPlain\n                  title=\"This is taking longer than expected.\"\n                />\n              </div>\n            );\n          case showError:\n            return (\n              <div>\n                <Split hasGutter className=\"mas-c-status\">\n                  <SplitItem>\n                    <Spinner size=\"md\" />\n                  </SplitItem>\n                  <SplitItem>\n                    <Button ref={ref} variant={buttonVariant} isInline>\n                      {t(\"statuses.creating\")}\n                    </Button>\n                  </SplitItem>\n                </Split>\n                <Alert\n                  variant=\"danger\"\n                  isInline\n                  isPlain\n                  title={t(\"status_warning_or_error_title\")}\n                />\n              </div>\n            );\n          default:\n            return (\n              <div>\n                <Split hasGutter className=\"mas-c-status\">\n                  <SplitItem>\n                    <Spinner size=\"md\" />\n                  </SplitItem>\n                  <SplitItem>\n                    <Button ref={ref} variant={buttonVariant} isInline>\n                      {t(\"statuses.creating\")}\n                    </Button>\n                    <Flex>\n                      <FlexItem>\n                        <HelperText>\n                          <HelperTextItem variant=\"indeterminate\">\n                            {t(\"status_created_shortly_help\")}\n                          </HelperTextItem>\n                        </HelperText>\n                      </FlexItem>\n                    </Flex>\n                  </SplitItem>\n                </Split>\n              </div>\n            );\n        }\n\n      case DegradedStatuses.includes(value):\n        return (\n          <div>\n            <Split hasGutter className=\"mas-c-status\">\n              <SplitItem>\n                <ExclamationTriangleIcon className=\"mas-m-degraded\" />\n              </SplitItem>\n              <SplitItem>{t(\"statuses.degraded\")}</SplitItem>\n            </Split>\n          </div>\n        );\n\n      case SuspendingStatuses.includes(value):\n        return (\n          <div>\n            <p className=\"mas-m-deleting\"> {t(\"statuses.suspending\")}</p>\n          </div>\n        );\n      case SuspendedStatuses.includes(value):\n        return (\n          <div>\n            <Split hasGutter className=\"mas-c-status\">\n              <SplitItem>\n                <ExclamationTriangleIcon className=\"mas-m-degraded\" />\n              </SplitItem>\n              <SplitItem>\n                <Button ref={ref} variant={buttonVariant} isInline>\n                  {t(\"statuses.suspended\")}\n                </Button>\n              </SplitItem>\n            </Split>\n          </div>\n        );\n      case ResumingStatuses.includes(value):\n        return (\n          <div>\n            <Split hasGutter className=\"mas-c-status\">\n              <SplitItem>\n                <Spinner size=\"md\" />\n              </SplitItem>\n              <SplitItem>{t(\"statuses.resuming\")}</SplitItem>\n            </Split>\n          </div>\n        );\n      case DeletingStatuses.includes(value):\n        return (\n          <div>\n            <p className=\"mas-m-deleting\"> {t(\"statuses.deleting\")}</p>\n          </div>\n        );\n      default:\n        return null;\n    }\n  }\n);\n","export type KafkaStatus =\n  | \"ready\"\n  | \"degraded\"\n  | \"accepted\"\n  | \"provisioning\"\n  | \"preparing\"\n  | \"deprovision\"\n  | \"deleting\"\n  | \"suspended\"\n  | \"suspending\"\n  | \"resuming\";\n\nexport type PopoverStatus =\n  | \"pending\"\n  | \"provisioning\"\n  | \"preparing\"\n  | \"ready\"\n  | \"suspended\";\n\nexport const PopoverStatusOrder: PopoverStatus[] = [\n  \"pending\",\n  \"preparing\",\n  \"provisioning\",\n];\n\nexport const KafkaToPopoverMapping: {\n  [status in KafkaStatus]: PopoverStatus | null;\n} = {\n  ready: null,\n  degraded: null,\n  accepted: \"pending\",\n  provisioning: \"provisioning\",\n  preparing: \"preparing\",\n  deprovision: null,\n  deleting: null,\n  suspended: \"suspended\",\n  suspending: null,\n  resuming: null,\n};\n","import { ProgressStep, ProgressStepper } from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { PopoverStatus } from \"../types\";\nimport { PopoverStatusOrder } from \"../types\";\n\ntype StatusProgressStepperProps = {\n  currentStatus: PopoverStatus;\n};\n\nexport const StatusProgressStepper: VoidFunctionComponent<\n  StatusProgressStepperProps\n> = ({ currentStatus }) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n\n  const currentStep = PopoverStatusOrder.findIndex((s) => s === currentStatus);\n\n  const getVariant = (index: number) =>\n    (currentStep === index && \"info\") ||\n    (currentStep > index && \"success\") ||\n    \"default\";\n\n  return (\n    <ProgressStepper isVertical={true}>\n      <ProgressStep\n        id={\"pending\"}\n        titleId={\"pending\"}\n        isCurrent={currentStatus === \"pending\"}\n        description={t(\"kafka_status_popover.pending.description\")}\n        aria-label={t(\"kafka_status_popover.pending.description\")}\n        variant={getVariant(0)}\n      >\n        {t(\"kafka_status_popover.pending.title\")}\n      </ProgressStep>\n\n      <ProgressStep\n        id={\"provisioning\"}\n        titleId={\"provisioning\"}\n        isCurrent={currentStatus === \"provisioning\"}\n        description={t(\"kafka_status_popover.provisioning.description\")}\n        aria-label={t(\"kafka_status_popover.provisioning.description\")}\n        variant={getVariant(1)}\n      >\n        {t(\"kafka_status_popover.provisioning.title\")}\n      </ProgressStep>\n      <ProgressStep\n        id={\"preparing\"}\n        titleId={\"preparing\"}\n        isCurrent={currentStatus === \"preparing\"}\n        description={t(\"kafka_status_popover.preparing.description\")}\n        aria-label={t(\"kafka_status_popover.preparing.description\")}\n        variant={getVariant(2)}\n      >\n        {t(\"kafka_status_popover.preparing.title\")}\n      </ProgressStep>\n    </ProgressStepper>\n  );\n};\n","import {\n  Alert,\n  Button,\n  ButtonVariant,\n  Stack,\n  StackItem,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { Trans, useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { PopoverStatus } from \"../types\";\nimport { PopoverStatusOrder } from \"../types\";\nimport { StatusProgressStepper } from \"./StatusProgressStepper\";\n\nexport type StatusPopoverContentProps = {\n  currentStatus: PopoverStatus;\n  showWarning?: boolean;\n  showError?: boolean;\n  onClickConnectionTabLink: () => void;\n  onClickSupportLink: () => void;\n};\n\nexport const StatusPopoverContent: VoidFunctionComponent<\n  StatusPopoverContentProps\n> = ({\n  currentStatus,\n  showWarning = false,\n  showError = false,\n  onClickConnectionTabLink,\n  onClickSupportLink,\n}) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n\n  const currentStep = PopoverStatusOrder.findIndex((s) => s === currentStatus);\n\n  return (\n    <div>\n      <Stack hasGutter>\n        <StackItem>\n          {showWarning && (\n            <Alert\n              variant=\"warning\"\n              isInline\n              isPlain\n              title={t(\"kafka_status_popover.warning_or_error_title\")}\n            >\n              <TextContent>\n                <Text component={TextVariants.small}>\n                  <Trans\n                    ns={[\"create-kafka-instance\"]}\n                    i18nKey=\"kafka_status_popover.header_content_with_warning\"\n                    components={[\n                      <Button\n                        key=\"btn-connetcion-tab\"\n                        variant={ButtonVariant.link}\n                        onClick={onClickConnectionTabLink}\n                        isInline\n                      />,\n                    ]}\n                  />\n                </Text>\n              </TextContent>\n            </Alert>\n          )}\n          {showError && (\n            <Alert\n              variant=\"danger\"\n              isInline\n              isPlain\n              title={t(\"kafka_status_popover.warning_or_error_title\")}\n            >\n              <TextContent>\n                <Text component={TextVariants.small}>\n                  <Trans\n                    ns={[\"create-kafka-instance\"]}\n                    i18nKey=\"kafka_status_popover.header_content_with_error\"\n                    components={[\n                      <Button\n                        key=\"btn-connetcion-tab\"\n                        variant={ButtonVariant.link}\n                        onClick={onClickConnectionTabLink}\n                        isInline\n                      />,\n                      <Button\n                        key=\"btn-support-case\"\n                        variant={ButtonVariant.link}\n                        onClick={onClickSupportLink}\n                        isInline\n                      />,\n                    ]}\n                  />\n                </Text>\n              </TextContent>\n            </Alert>\n          )}\n          {!showError && !showWarning && (\n            <TextContent>\n              <Text component={TextVariants.small}>\n                <Trans\n                  ns={[\"create-kafka-instance\"]}\n                  i18nKey=\"kafka_status_popover.header_content\"\n                  components={[\n                    <Button\n                      key=\"btn-connetcion-tab\"\n                      variant={ButtonVariant.link}\n                      onClick={onClickConnectionTabLink}\n                      isInline\n                    />,\n                  ]}\n                />\n              </Text>\n            </TextContent>\n          )}\n        </StackItem>\n        <StackItem>\n          {t(\"common:progress_stepper_current_step\", {\n            currentStep,\n            total: PopoverStatusOrder.length,\n          })}\n        </StackItem>\n        <StackItem>\n          <StatusProgressStepper currentStatus={currentStatus} />\n        </StackItem>\n      </Stack>\n    </div>\n  );\n};\n","import type { PopoverProps } from \"@patternfly/react-core\";\nimport { Popover } from \"@patternfly/react-core\";\nimport type { RefObject, VoidFunctionComponent } from \"react\";\nimport { useCallback, useState } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { PopoverStatus } from \"../types\";\nimport type { StatusPopoverContentProps } from \"./StatusPopoverContent\";\nimport { StatusPopoverContent } from \"./StatusPopoverContent\";\n\nexport type StatusPopoverProps = {\n  status: PopoverStatus;\n  initialOpen?: boolean;\n  showWarning?: boolean;\n  showError?: boolean;\n  children?: PopoverProps[\"children\"];\n  onClickConnectionTabLink: StatusPopoverContentProps[\"onClickConnectionTabLink\"];\n  onClickSupportLink: StatusPopoverContentProps[\"onClickSupportLink\"];\n  reference?: RefObject<HTMLButtonElement>;\n};\n\n/**\n * ## Introduction\n *\n * This is a popover that can be reached from the Kafka Instance table while the status of the instance in question is “Creating”.\n * A Kafka instance usually takes a few minutes to create. The purpose of this popover is to give the user some insights into\n * the creation process of their instance while they wait for it to be available to use.\n *\n * - The text at the top explains that the instance will be ready shortly & suggests that the user creates a service account while they wait.\n *  (Provides a link to the “Connections tab\" where this is done).\n *\n * - The steps shown in the progress stepper are statuses that show in the api. They have been grouped together under the one overall\n * “Creating status” in the table.There is some descriptive text accompanying each step too. When these steps are complete the instance will be ready for use\n *\n * - The popover is only available while instance creation is in progress.\n * - After creation is complete the table displays the ready status and the popover is no longer available.\n *\n */\nexport const StatusPopover: VoidFunctionComponent<StatusPopoverProps> = ({\n  initialOpen = false,\n  status,\n  showWarning = false,\n  showError = false,\n  onClickConnectionTabLink,\n  onClickSupportLink,\n  reference,\n  children,\n}) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n\n  const [isVisible, setIsVisible] = useState(initialOpen);\n  const onClose = () => setIsVisible(false);\n\n  const handleClickConnectionTabLink = useCallback(() => {\n    onClose();\n    onClickConnectionTabLink();\n  }, [onClickConnectionTabLink]);\n\n  const handleClickSupportLink = useCallback(() => {\n    onClose();\n    onClickSupportLink();\n  }, [onClickSupportLink]);\n\n  return (\n    <Popover\n      headerContent={t(\"kafka_status_popover.title\")}\n      bodyContent={\n        <StatusPopoverContent\n          currentStatus={status}\n          showWarning={showWarning}\n          showError={showError}\n          onClickConnectionTabLink={handleClickConnectionTabLink}\n          onClickSupportLink={handleClickSupportLink}\n        />\n      }\n      isVisible={isVisible}\n      shouldOpen={() => setIsVisible(true)}\n      shouldClose={() => setIsVisible(false)}\n      position={\"right\"}\n      enableFlip={true}\n      reference={reference}\n    >\n      {children}\n    </Popover>\n  );\n};\n","import type { PopoverProps } from \"@patternfly/react-core\";\nimport { Popover, TextContent } from \"@patternfly/react-core\";\nimport { ExclamationTriangleIcon } from \"@patternfly/react-icons\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { RefObject, VoidFunctionComponent } from \"react\";\n\nexport type SuspendedPopoverProps = {\n  children?: PopoverProps[\"children\"];\n  reference?: RefObject<HTMLButtonElement>;\n};\n\nexport const SuspendedPopover: VoidFunctionComponent<SuspendedPopoverProps> = ({\n  children,\n  reference,\n}) => {\n  const { t } = useTranslation(\"kafka\");\n  return (\n    <Popover\n      alertSeverityVariant={\"warning\"}\n      headerIcon={<ExclamationTriangleIcon />}\n      headerContent={t(\"suspend_popover_title\")}\n      bodyContent={\n        <TextContent>\n          <p>{t(\"suspend_popover_body_1\")}</p>\n        </TextContent>\n      }\n      position={\"right\"}\n      reference={reference}\n    >\n      {children}\n    </Popover>\n  );\n};\n","import { useInterval } from \"@rhoas/app-services-ui-components\";\nimport { differenceInMinutes } from \"date-fns\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback, useRef, useState } from \"react\";\nimport type { Status } from \"ui-models/src/models/kafka\";\nimport type { StatusPopoverProps } from \"./components\";\nimport { StatusLabel, StatusPopover, SuspendedPopover } from \"./components\";\nimport { KafkaToPopoverMapping } from \"./types\";\n\nexport type KafkaInstanceStatusProps = {\n  status: Status;\n  createdAt: Date;\n  warningAfterMinutes?: number;\n  errorAfterMinutes?: number;\n} & Pick<StatusPopoverProps, \"onClickConnectionTabLink\" | \"onClickSupportLink\">;\n\n/**\n * A component to show the status of a Kafka instance combining the\n * `StatusPopover` with the `StatusLabel`, with automatic handling of which\n * statuses should have a companion popover.\n */\nexport const KafkaInstanceStatus: VoidFunctionComponent<\n  KafkaInstanceStatusProps\n> = ({\n  status,\n  createdAt,\n  warningAfterMinutes = 15,\n  errorAfterMinutes = 30,\n  onClickConnectionTabLink,\n  onClickSupportLink,\n}) => {\n  const popoverStatus = KafkaToPopoverMapping[status];\n  const [alert, setAlert] = useState<\"warning\" | \"error\" | false>(false);\n  const labelRef = useRef<HTMLButtonElement>(null);\n\n  const checkCreatedAt = useCallback(() => {\n    const elapsed = differenceInMinutes(new Date(), createdAt);\n    if (elapsed > errorAfterMinutes) {\n      setAlert(\"error\");\n    } else if (elapsed > warningAfterMinutes) {\n      setAlert(\"warning\");\n    } else {\n      setAlert(false);\n    }\n  }, [createdAt, errorAfterMinutes, warningAfterMinutes]);\n\n  useInterval(checkCreatedAt, 5000);\n  const showWarning = alert === \"warning\";\n  const showError = alert === \"error\";\n  return (\n    <>\n      {popoverStatus === \"suspended\" ? (\n        <SuspendedPopover reference={labelRef} />\n      ) : (\n        popoverStatus && (\n          <StatusPopover\n            status={popoverStatus}\n            showWarning={showWarning}\n            showError={showError}\n            onClickConnectionTabLink={onClickConnectionTabLink}\n            onClickSupportLink={onClickSupportLink}\n            reference={labelRef}\n          />\n        )\n      )}\n      <StatusLabel\n        value={status}\n        showWarning={showWarning}\n        showError={showError}\n        withPopover={popoverStatus !== undefined}\n        ref={labelRef}\n      />\n    </>\n  );\n};\n","import {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { PlusCircleIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { Trans, useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport type EmptyStateNoInstancesProps = {\n  onCreate: () => void;\n  onQuickstartGuide: () => void;\n};\n\nexport const EmptyStateNoInstances: VoidFunctionComponent<\n  EmptyStateNoInstancesProps\n> = ({ onCreate, onQuickstartGuide }) => {\n  const { t } = useTranslation(\"kafka\");\n  return (\n    <EmptyState variant={EmptyStateVariant.xs}>\n      <EmptyStateIcon icon={PlusCircleIcon} />\n      <Title headingLevel=\"h2\" size=\"lg\">\n        {t(\"empty_state_no_instances_title\")}\n      </Title>\n      <EmptyStateBody>\n        <Trans\n          ns={\"kafka\"}\n          i18nKey={\"empty_state_no_instances_body\"}\n          components={[<a onClick={onQuickstartGuide} />]}\n        />\n      </EmptyStateBody>\n      <Button ouiaId=\"button-create\" variant=\"primary\" onClick={onCreate}>\n        {t(\"empty_state_no_instances_create_instance\")}\n      </Button>\n    </EmptyState>\n  );\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { SearchIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { Trans, useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport type EmptyStateNoResultsProps = {\n  onClearAllFilters: () => void;\n};\n\nexport const EmptyStateNoResults: VoidFunctionComponent<\n  EmptyStateNoResultsProps\n> = ({ onClearAllFilters }) => {\n  const { t } = useTranslation(\"kafka\");\n  return (\n    <EmptyState variant={EmptyStateVariant.xs}>\n      <EmptyStateIcon icon={SearchIcon} />\n      <Title headingLevel=\"h2\" size=\"lg\">\n        {t(\"empty_state_no_results_found_title\")}\n      </Title>\n      <EmptyStateBody>\n        <Trans\n          ns={\"kafka\"}\n          i18nKey={\"empty_state_no_results_found_body\"}\n          components={[<a onClick={onClearAllFilters} />]}\n        />\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import { Button, PageSection, Stack, StackItem } from \"@patternfly/react-core\";\nimport type { TableViewProps } from \"@rhoas/app-services-ui-components\";\nimport {\n  FormatDate,\n  TableView,\n  Trans,\n  useTranslation,\n} from \"@rhoas/app-services-ui-components\";\nimport { parseISO } from \"date-fns\";\nimport { Link } from \"react-router-dom\";\nimport type { Kafka, SimplifiedStatus } from \"ui-models/src/models/kafka\";\nimport { DeletingStatuses } from \"ui-models/src/models/kafka\";\nimport { useKafkaLabels } from \"../../hooks\";\nimport { KafkaInstanceActions } from \"../KafkaInstanceActions\";\nimport { KafkaInstanceStatus } from \"../KafkaInstanceStatus\";\nimport type {\n  EmptyStateNoInstancesProps,\n  EmptyStateNoResultsProps,\n} from \"./components\";\nimport { EmptyStateNoInstances, EmptyStateNoResults } from \"./components\";\n\nconst Columns = [\n  \"name\",\n  \"owner\",\n  \"createdAt\",\n  \"provider\",\n  \"region\",\n  \"status\",\n] as const;\n\nexport type KafkaInstancesProps<T extends Kafka = Kafka> = {\n  instances: Array<T> | undefined | null;\n  getUrlForInstance: (row: T) => string;\n  names: string[];\n  owners: string[];\n  statuses: string[];\n  onCreate: () => void;\n  onSearchName: (value: string) => void;\n  onRemoveNameChip: (value: string) => void;\n  onRemoveNameChips: () => void;\n  onSearchOwner: (value: string) => void;\n  onRemoveOwnerChip: (value: string) => void;\n  onRemoveOwnerChips: () => void;\n  onSearchStatus: (value: SimplifiedStatus) => void;\n  onRemoveStatusChip: (value: SimplifiedStatus) => void;\n  onRemoveStatusChips: () => void;\n  onDetails: (row: T) => void;\n  onConnection: (row: T) => void;\n  canChangeOwner: (row: T) => boolean;\n  onChangeOwner: (row: T) => void;\n  canDelete: (row: T) => boolean;\n  onDelete: (row: T) => void;\n  onClickConnectionTabLink: (row: T) => void;\n  onClickSupportLink: () => void;\n  onInstanceLinkClick: (row: T) => void;\n  canHaveInstanceLink: (row: T) => boolean;\n  canOpenConnection: (row: T) => boolean;\n} & Pick<\n  TableViewProps<T, typeof Columns[number]>,\n  | \"itemCount\"\n  | \"page\"\n  | \"perPage\"\n  | \"onPageChange\"\n  | \"isRowSelected\"\n  | \"isColumnSortable\"\n  | \"onClearAllFilters\"\n> &\n  EmptyStateNoInstancesProps &\n  EmptyStateNoResultsProps;\n\nexport const KafkaInstances = <T extends Kafka>({\n  instances,\n  itemCount,\n  page,\n  perPage,\n  names,\n  owners,\n  statuses,\n  getUrlForInstance,\n  isRowSelected,\n  isColumnSortable,\n  onPageChange,\n  onDetails,\n  onConnection,\n  canChangeOwner,\n  onChangeOwner,\n  canDelete,\n  onDelete,\n  onCreate,\n  onQuickstartGuide,\n  onClickConnectionTabLink,\n  onClickSupportLink,\n  onInstanceLinkClick,\n  onSearchName,\n  onRemoveNameChip,\n  onRemoveNameChips,\n  onSearchOwner,\n  onRemoveOwnerChip,\n  onRemoveOwnerChips,\n  onSearchStatus,\n  onRemoveStatusChip,\n  onRemoveStatusChips,\n  onClearAllFilters,\n\n  canHaveInstanceLink,\n  canOpenConnection,\n}: KafkaInstancesProps<T>) => {\n  const { t } = useTranslation(\"kafka\");\n  const labels = useKafkaLabels();\n  const breakpoint = \"lg\";\n\n  const isFiltered =\n    names.length > 0 || owners.length > 0 || statuses.length > 0;\n\n  return (\n    <PageSection isFilled={true}>\n      <TableView\n        data={instances}\n        columns={Columns}\n        renderHeader={({ column, Th, key }) => (\n          <Th key={key}>{labels.fields[column]}</Th>\n        )}\n        renderCell={({ column, row, Td, key }) => {\n          const timeCreatedDate = parseISO(row.createdAt);\n          const instanceLinkEnable = canHaveInstanceLink(row);\n          return (\n            <Td key={key} dataLabel={labels.fields[column]}>\n              {(() => {\n                switch (column) {\n                  case \"name\":\n                    return (\n                      <Button\n                        variant=\"link\"\n                        component={(props) => (\n                          <Link to={getUrlForInstance(row)} {...props}>\n                            {row.name}\n                          </Link>\n                        )}\n                        isInline={true}\n                        isAriaDisabled={!instanceLinkEnable}\n                        isDisabled={!instanceLinkEnable}\n                        onClick={() => onInstanceLinkClick(row)}\n                      />\n                    );\n                  case \"provider\":\n                    return labels.providers[row.provider];\n                  case \"createdAt\":\n                    return (\n                      <Stack>\n                        <StackItem>\n                          <FormatDate\n                            date={timeCreatedDate}\n                            format={\"distanceToNowWithAgo\"}\n                          />\n                        </StackItem>\n                        {row.expiryDate && (\n                          <StackItem>\n                            <Trans\n                              i18nKey=\"will_expire_short\"\n                              ns={[\"kafka\"]}\n                              components={{\n                                time: (\n                                  <FormatDate\n                                    date={parseISO(row.expiryDate)}\n                                    format=\"expiration\"\n                                  />\n                                ),\n                              }}\n                            />\n                          </StackItem>\n                        )}\n                      </Stack>\n                    );\n                  case \"status\":\n                    return (\n                      <KafkaInstanceStatus\n                        status={row[\"status\"]}\n                        createdAt={timeCreatedDate}\n                        onClickConnectionTabLink={() =>\n                          onClickConnectionTabLink(row)\n                        }\n                        onClickSupportLink={onClickSupportLink}\n                      />\n                    );\n                  default:\n                    return row[column];\n                }\n              })()}\n            </Td>\n          );\n        }}\n        renderActions={({ row }) => {\n          const changeOwnerEnabled = canChangeOwner(row);\n          const deleteEnabled = canDelete(row);\n          const openConnectionEnabled = canOpenConnection(row);\n          return (\n            <KafkaInstanceActions\n              onDetails={() => onDetails(row)}\n              onConnection={() => onConnection(row)}\n              canOpenConnection={openConnectionEnabled}\n              canChangeOwner={changeOwnerEnabled}\n              onChangeOwner={() => onChangeOwner(row)}\n              canDelete={deleteEnabled}\n              onDelete={() => onDelete(row)}\n            />\n          );\n        }}\n        onRowClick={({ row }) => onDetails(row)}\n        isColumnSortable={isColumnSortable}\n        isRowSelected={isRowSelected}\n        isRowDeleted={({ row }) => DeletingStatuses.includes(row[\"status\"])}\n        toolbarBreakpoint={breakpoint}\n        filters={{\n          [labels.fields.name]: {\n            type: \"search\",\n            chips: names,\n            onSearch: onSearchName,\n            onRemoveChip: onRemoveNameChip,\n            onRemoveGroup: onRemoveNameChips,\n            validate: (value) => /^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(value),\n            errorMessage: t(\"kafka:input_field_invalid_message\"),\n          },\n          [labels.fields.owner]: {\n            type: \"search\",\n            chips: owners,\n            onSearch: onSearchOwner,\n            onRemoveChip: onRemoveOwnerChip,\n            onRemoveGroup: onRemoveOwnerChips,\n            validate: (value: string) => !/[\"$^<>|+%/;:,\\s*=~#()]/.test(value),\n            errorMessage: t(\"kafka:input_field_invalid_message\"),\n          },\n          [labels.fields.status]: {\n            type: \"checkbox\",\n            chips: statuses,\n            options: labels.statusesSimplified,\n            onToggle: onSearchStatus,\n            onRemoveChip: onRemoveStatusChip,\n            onRemoveGroup: onRemoveStatusChips,\n          },\n        }}\n        actions={[\n          {\n            label: t(\"create_instance\"),\n            onClick: onCreate,\n            isPrimary: true,\n          },\n        ]}\n        itemCount={itemCount}\n        page={page}\n        perPage={perPage}\n        onPageChange={onPageChange}\n        onClearAllFilters={onClearAllFilters}\n        ariaLabel={t(\"table.title\")}\n        isFiltered={isFiltered}\n        emptyStateNoData={\n          <EmptyStateNoInstances\n            onCreate={onCreate}\n            onQuickstartGuide={onQuickstartGuide}\n          />\n        }\n        emptyStateNoResults={\n          <EmptyStateNoResults onClearAllFilters={onClearAllFilters} />\n        }\n      />\n    </PageSection>\n  );\n};\n","import type { DatePickerProps, TimePickerProps } from \"@patternfly/react-core\";\nimport { DatePicker, InputGroup, TimePicker } from \"@patternfly/react-core\";\nimport { formatISO, parseISO, setHours, setMinutes } from \"date-fns\";\nimport { formatInTimeZone } from \"date-fns-tz\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useState } from \"react\";\nimport type { DateIsoString } from \"../../../../../ui-models/src/types\";\n\nexport type DateTimePickerProps = {\n  isDisabled: boolean;\n  value: DateIsoString | undefined;\n  onChange: (value: DateIsoString) => void;\n};\nexport const DateTimePicker: VoidFunctionComponent<DateTimePickerProps> = ({\n  isDisabled,\n  value,\n  onChange,\n}) => {\n  const [timeSelected, setIsTimeSelected] = useState(false);\n  const date = value ? parseISO(value) : undefined;\n\n  const onSelectCalendar: DatePickerProps[\"onChange\"] = (_, newDate) => {\n    if (newDate) {\n      onChange(formatISO(newDate) as DateIsoString);\n    }\n  };\n\n  const onSelectTime: TimePickerProps[\"onChange\"] = (\n    time,\n    hour,\n    minute,\n    __,\n    isValid\n  ) => {\n    if (\n      isValid &&\n      date &&\n      hour != undefined &&\n      hour > 0 &&\n      (time.includes(\"AM\") || time.includes(\"PM\"))\n    ) {\n      let newDate = date;\n      if (hour !== undefined) {\n        newDate = setHours(newDate, hour);\n      }\n      if (minute !== undefined) {\n        newDate = setMinutes(newDate, minute);\n      }\n\n      onChange(formatISO(newDate) as DateIsoString);\n      setIsTimeSelected(true);\n    }\n  };\n\n  return (\n    <InputGroup>\n      <DatePicker\n        isDisabled={isDisabled}\n        value={date ? formatInTimeZone(date, \"UTC\", \"yyyy-MM-dd\") : undefined}\n        onChange={onSelectCalendar}\n      />\n      <TimePicker\n        isDisabled={!date || isDisabled}\n        time={timeSelected ? date : undefined}\n        onChange={onSelectTime}\n      />\n    </InputGroup>\n  );\n};\n","import {\n  Dropdown,\n  DropdownItem,\n  DropdownPosition,\n  DropdownSeparator,\n  DropdownToggle,\n  InputGroup,\n  TextInput,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useState } from \"react\";\nimport type { DateIsoString } from \"../../../../../ui-models/src/types\";\nimport { DateTimePicker } from \"./DateTimePicker\";\n\ntype Category = \"offset\" | \"timestamp\" | \"epoch\" | \"latest\";\nexport type FilterGroupProps = {\n  isDisabled: boolean;\n  offset: number | undefined;\n  epoch: number | undefined;\n  timestamp: DateIsoString | undefined;\n  onOffsetChange: (value: number | undefined) => void;\n  onTimestampChange: (value: DateIsoString | undefined) => void;\n  onEpochChange: (value: number | undefined) => void;\n  onLatest: () => void;\n};\nexport const FilterGroup: VoidFunctionComponent<FilterGroupProps> = ({\n  isDisabled,\n  offset,\n  epoch,\n  timestamp,\n  onOffsetChange,\n  onTimestampChange,\n  onEpochChange,\n  onLatest,\n}) => {\n  const { t } = useTranslation(\"message-browser\");\n  const [currentCategory, setCurrentCategory] = useState<Category>(\"latest\");\n  const [isOpen, setIsOpen] = useState(false);\n  const labels: { [key in Category]: string } = {\n    offset: t(\"filter.offset\"),\n    timestamp: t(\"filter.timestamp\"),\n    epoch: t(\"filter.epoch\"),\n    latest: t(\"filter.latest\"),\n  };\n  return (\n    <ToolbarItem>\n      <InputGroup>\n        <Dropdown\n          data-testid={\"filter-group-dropdown\"}\n          toggle={\n            <DropdownToggle\n              onToggle={setIsOpen}\n              isDisabled={isDisabled}\n              data-testid={\"filter-group\"}\n            >\n              {labels[currentCategory]}\n            </DropdownToggle>\n          }\n          position={DropdownPosition.left}\n          isOpen={isOpen}\n          onSelect={() => setIsOpen(false)}\n          dropdownItems={[\n            <DropdownItem\n              key=\"offset\"\n              value=\"offset\"\n              autoFocus={currentCategory === \"offset\"}\n              onClick={() => setCurrentCategory(\"offset\")}\n            >\n              {labels[\"offset\"]}\n            </DropdownItem>,\n            <DropdownItem\n              key=\"timestamp\"\n              value=\"timestamp\"\n              autoFocus={currentCategory === \"timestamp\"}\n              onClick={() => setCurrentCategory(\"timestamp\")}\n            >\n              {labels[\"timestamp\"]}\n            </DropdownItem>,\n            <DropdownItem\n              key=\"epoch\"\n              value=\"epoch\"\n              autoFocus={currentCategory === \"epoch\"}\n              onClick={() => setCurrentCategory(\"epoch\")}\n            >\n              {labels[\"epoch\"]}\n            </DropdownItem>,\n            <DropdownSeparator key={\"divider\"} />,\n            <DropdownItem\n              key=\"latest\"\n              value=\"latest\"\n              autoFocus={currentCategory === \"latest\"}\n              onClick={() => {\n                setCurrentCategory(\"latest\");\n                onLatest();\n              }}\n            >\n              {labels[\"latest\"]}\n            </DropdownItem>,\n          ]}\n        />\n        {currentCategory === \"offset\" && (\n          <TextInput\n            isDisabled={isDisabled}\n            type={\"number\"}\n            aria-label={t(\"filter.offset_aria_label\")}\n            placeholder={t(\"filter.offset_placeholder\")}\n            onChange={(value) => {\n              if (value !== \"\") {\n                const newOffset = parseInt(value, 10);\n                if (Number.isInteger(newOffset)) {\n                  onOffsetChange(newOffset);\n                }\n              } else {\n                onOffsetChange(undefined);\n              }\n            }}\n            value={offset === undefined ? \"\" : offset}\n          />\n        )}\n        {currentCategory === \"timestamp\" && (\n          <DateTimePicker\n            isDisabled={isDisabled}\n            value={timestamp}\n            onChange={onTimestampChange}\n          />\n        )}\n        {currentCategory === \"epoch\" && (\n          <TextInput\n            isDisabled={isDisabled}\n            type={\"number\"}\n            aria-label={t(\"filter.epoch_aria_label\")}\n            placeholder={t(\"filter.epoch_placeholder\")}\n            className=\"pf-u-flex-basis-auto pf-u-flex-grow-0 pf-u-w-initial\"\n            size={t(\"filter.epoch_placeholder\").length}\n            onChange={(value) => {\n              if (value !== \"\" && Number(value) >= 0)\n                onEpochChange(Number(value));\n              else onEpochChange(undefined);\n            }}\n            value={epoch == undefined ? \"\" : epoch}\n          />\n        )}\n      </InputGroup>\n    </ToolbarItem>\n  );\n};\n","import {\n  InputGroup,\n  InputGroupText,\n  Select,\n  SelectOption,\n} from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport type LimitSelectorProps = {\n  value: number;\n  isDisabled: boolean;\n  onChange: (value: number) => void;\n};\nexport const LimitSelector: VoidFunctionComponent<LimitSelectorProps> = ({\n  value,\n  isDisabled,\n  onChange,\n}) => {\n  const { t } = useTranslation(\"message-browser\");\n  const [isOpen, setIsOpen] = useState(false);\n  const toggleOpen = (isOpen: boolean) => setIsOpen(isOpen);\n  const titleId = \"limit-selector\";\n\n  return (\n    <InputGroup>\n      <InputGroupText className=\"pf-c-content\">\n        {t(\"limit_label\")}\n      </InputGroupText>\n      <div>\n        <span id={titleId} hidden>\n          Select a state\n        </span>\n\n        <Select\n          aria-label={t(\"per_page_aria_label\")}\n          onToggle={toggleOpen}\n          selections={value !== undefined ? [t(\"limit\", { value })] : undefined}\n          isOpen={isOpen}\n          isDisabled={isDisabled}\n          onSelect={() => setIsOpen(false)}\n          data-testid={\"limit-selector\"}\n        >\n          {[10, 20, 50].map((value, idx) => (\n            <SelectOption\n              key={idx}\n              value={t(\"limit\", { value })}\n              onClick={() => onChange(value)}\n            />\n          ))}\n        </Select>\n      </div>\n    </InputGroup>\n  );\n};\n","import type { Message } from \"ui-models/src/models/message\";\n\nexport function isSameMessage(m1: Message, m2: Message) {\n  return JSON.stringify(m1) === JSON.stringify(m2);\n}\n\nexport function beautifyUnknownValue(value: string): string {\n  try {\n    return JSON.stringify(JSON.parse(value), null, 2);\n  } catch (e) {\n    // noop\n  }\n  return value;\n}\n\nexport function truncate(value: string, length: number): [string, boolean] {\n  const shouldTruncate = value.length > length;\n  return [\n    shouldTruncate ? `${value.substring(0, length)}...` : value,\n    shouldTruncate,\n  ];\n}\n","export enum RetentionTimeUnits {\n  MILLISECOND = \"milliseconds\",\n  SECOND = \"seconds\",\n  MINUTE = \"minutes\",\n  HOUR = \"hours\",\n  DAY = \"days\",\n  WEEK = \"weeks\",\n  CUSTOM = \"custom\",\n  UNLIMITED = \"unlimited\",\n}\n\nexport enum RetentionSizeUnits {\n  BYTE = \"bytes\",\n  KIBIBYTE = \"kibibytes\",\n  MEBIBYTE = \"mebibytes\",\n  GIBIBYTE = \"gibibytes\",\n  TEBIBYTE = \"tebibytes\",\n  CUSTOM = \"custom\",\n  UNLIMITED = \"unlimited\",\n}\n\nexport const unitsToBytes = {\n  [RetentionSizeUnits.BYTE]: BigInt(\"1\"),\n  [RetentionSizeUnits.KIBIBYTE]: BigInt(\"1024\"),\n  [RetentionSizeUnits.MEBIBYTE]: BigInt(\"1048576\"),\n  [RetentionSizeUnits.GIBIBYTE]: BigInt(\"1073741824\"),\n  [RetentionSizeUnits.TEBIBYTE]: BigInt(\"1099511600000\"),\n};\n\nexport const unitsToMilliSecond = {\n  [RetentionTimeUnits.MILLISECOND]: BigInt(\"1\"),\n  [RetentionTimeUnits.SECOND]: BigInt(\"1000\"),\n  [RetentionTimeUnits.MINUTE]: BigInt(\"60000\"),\n  [RetentionTimeUnits.HOUR]: BigInt(\"3600000\"),\n  [RetentionTimeUnits.DAY]: BigInt(\"86400000\"),\n};\n\ntype ConversionUnit = {\n  value: bigint;\n  unit: string;\n};\n\nexport const millisecondsToTime = (value: bigint): ConversionUnit => {\n  if (value) {\n    if (value % unitsToMilliSecond.days == BigInt(0))\n      return { value: value / unitsToMilliSecond.days, unit: \"days\" };\n    if (value % unitsToMilliSecond.hours == BigInt(0))\n      return { value: value / unitsToMilliSecond.hours, unit: \"hours\" };\n    if (value % unitsToMilliSecond.minutes == BigInt(0))\n      return { value: value / unitsToMilliSecond.minutes, unit: \"minutes\" };\n    if (value % unitsToMilliSecond.seconds == BigInt(0))\n      return { value: value / unitsToMilliSecond.seconds, unit: \"seconds\" };\n  }\n\n  return { value, unit: \"milliseconds\" };\n};\n\nexport const formattedRetentionTime = (time: bigint): string => {\n  const { unit, value } = millisecondsToTime(time);\n  return Number(value) === -1 ? \"Unlimited\" : `${time} ms (${value} ${unit})`;\n};\n\nexport const formattedRetentionSize = (size: bigint): string => {\n  const { unit, value } = bytesToMemorySize(size);\n  return Number(value) === -1\n    ? \"Unlimited\"\n    : `${size} bytes (${value} ${unit})`;\n};\n\nexport const bytesToMemorySize = (value: bigint): ConversionUnit => {\n  if (value) {\n    if (value % unitsToBytes.tebibytes == BigInt(0))\n      return { value: value / unitsToBytes.tebibytes, unit: \"tebibytes\" };\n    if (value % unitsToBytes.gibibytes == BigInt(0))\n      return { value: value / unitsToBytes.gibibytes, unit: \"gibibytes\" };\n    if (value % unitsToBytes.mebibytes == BigInt(0))\n      return { value: value / unitsToBytes.mebibytes, unit: \"mebibytes\" };\n    if (value % unitsToBytes.kibibytes == BigInt(0))\n      return { value: value / unitsToBytes.kibibytes, unit: \"kibibytes\" };\n  }\n\n  return { value, unit: \"bytes\" };\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport type NoDataCellProps = {\n  columnLabel: string;\n};\nexport const NoDataCell: VoidFunctionComponent<NoDataCellProps> = ({\n  columnLabel,\n}) => {\n  const { t } = useTranslation(\"common\");\n  return (\n    <span className=\"pf-u-color-400\">\n      {t(\"table_cell_no_data\", { column: columnLabel })}\n    </span>\n  );\n};\n","import {\n  ClipboardCopy,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  DrawerActions,\n  DrawerCloseButton,\n  DrawerContentBody,\n  DrawerHead,\n  DrawerPanelContent,\n  Flex,\n  FlexItem,\n  Tab,\n  Tabs,\n  TabTitleText,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { FormatDate, useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { parseISO } from \"date-fns\";\nimport type { VoidFunctionComponent } from \"react\";\nimport type { Message } from \"ui-models/src/models/message\";\nimport { beautifyUnknownValue } from \"../utils\";\nimport { NoDataCell } from \"./NoDataCell\";\n\nexport type MessageDetailsProps = {\n  onClose: () => void;\n  defaultTab: MessageDetailsBodyProps[\"defaultTab\"];\n  message: Message | undefined;\n};\nexport const MessageDetails: VoidFunctionComponent<MessageDetailsProps> = ({\n  onClose,\n  defaultTab,\n  message,\n}) => {\n  const { t } = useTranslation(\"message-browser\");\n\n  return (\n    <DrawerPanelContent isResizable={true} minSize={\"400px\"}>\n      <DrawerHead>\n        <TextContent>\n          <Text component={TextVariants.h2}>{t(\"message\")}</Text>\n        </TextContent>\n        <DrawerActions>\n          <DrawerCloseButton onClick={onClose} />\n        </DrawerActions>\n      </DrawerHead>\n      <DrawerContentBody>\n        {message && (\n          <MessageDetailsBody\n            defaultTab={defaultTab}\n            messageKey={message.key}\n            {...message}\n          />\n        )}\n      </DrawerContentBody>\n    </DrawerPanelContent>\n  );\n};\n\nexport type MessageDetailsBodyProps = {\n  defaultTab: \"value\" | \"headers\";\n  messageKey: Message[\"key\"];\n} & Omit<Message, \"key\">;\n\nexport const MessageDetailsBody: VoidFunctionComponent<\n  MessageDetailsBodyProps\n> = ({ defaultTab, ...message }) => {\n  const { t } = useTranslation(\"message-browser\");\n\n  return (\n    <Flex direction={{ default: \"column\" }} data-testid={\"message-details\"}>\n      <FlexItem>\n        <DescriptionList isHorizontal isCompact>\n          <DescriptionListGroup>\n            <DescriptionListTerm>{t(\"field.partition\")}</DescriptionListTerm>\n            <DescriptionListDescription>\n              {message.partition}\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>{t(\"field.offset\")}</DescriptionListTerm>\n            <DescriptionListDescription>\n              {message.offset}\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>{t(\"field.timestamp\")}</DescriptionListTerm>\n            <DescriptionListDescription>\n              {message.timestamp ? (\n                <FormatDate\n                  date={parseISO(message.timestamp)}\n                  format={\"longWithMilliseconds\"}\n                />\n              ) : (\n                <NoDataCell columnLabel={t(\"field.timestamp\")} />\n              )}\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>{t(\"field.epoch\")}</DescriptionListTerm>\n            <DescriptionListDescription>\n              {message.timestamp ? (\n                <FormatDate\n                  date={parseISO(message.timestamp)}\n                  format={\"epoch\"}\n                />\n              ) : (\n                <NoDataCell columnLabel={t(\"field.epoch\")} />\n              )}\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>{t(\"field.key\")}</DescriptionListTerm>\n            <DescriptionListDescription>\n              {message.messageKey ? (\n                message.messageKey\n              ) : (\n                <NoDataCell columnLabel={t(\"field.key\")} />\n              )}\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n        </DescriptionList>\n      </FlexItem>\n      <FlexItem>\n        {/* set key to be a random number to force redraw the tabs in order to change the active tab from the outside */}\n        <Tabs defaultActiveKey={defaultTab} key={Math.random()}>\n          <Tab\n            eventKey={\"value\"}\n            title={<TabTitleText>{t(\"field.value\")}</TabTitleText>}\n          >\n            <ClipboardCopy isCode={true} isExpanded={true} isReadOnly={true}>\n              {beautifyUnknownValue(message.value || \"\")}\n            </ClipboardCopy>\n          </Tab>\n          <Tab\n            eventKey={\"headers\"}\n            title={<TabTitleText>{t(\"field.headers\")}</TabTitleText>}\n          >\n            <ClipboardCopy isCode={true} isExpanded={true} isReadOnly={true}>\n              {beautifyUnknownValue(JSON.stringify(message.headers) || \"\")}\n            </ClipboardCopy>\n          </Tab>\n        </Tabs>\n      </FlexItem>\n    </Flex>\n  );\n};\n","import {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { CubesIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const NoDataEmptyState: VoidFunctionComponent<{\n  onRefresh: () => void;\n}> = ({ onRefresh }) => {\n  const { t } = useTranslation(\"message-browser\");\n  return (\n    <EmptyState variant={EmptyStateVariant.large}>\n      <EmptyStateIcon icon={CubesIcon} />\n      <Title headingLevel=\"h4\" size=\"lg\">\n        {t(\"no_data_title\")}\n      </Title>\n      <EmptyStateBody>{t(\"no_data_body\")}</EmptyStateBody>\n      <Button onClick={onRefresh}>{t(\"no_data_refresh\")}</Button>\n    </EmptyState>\n  );\n};\n","import {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { SearchIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const NoResultsEmptyState: VoidFunctionComponent<{\n  onReset: () => void;\n}> = ({ onReset }) => {\n  const { t } = useTranslation(\"message-browser\");\n  return (\n    <EmptyState variant={EmptyStateVariant.large}>\n      <EmptyStateIcon icon={SearchIcon} />\n      <Title headingLevel=\"h4\" size=\"lg\">\n        {t(\"no_results_title\")}\n      </Title>\n      <EmptyStateBody>{t(\"no_results_body\")}</EmptyStateBody>\n      <Button variant={\"link\"} onClick={onReset}>\n        {t(\"no_results_reset\")}\n      </Button>\n    </EmptyState>\n  );\n};\n","import { Text, TextContent } from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const OffsetRange: VoidFunctionComponent<{\n  min: number;\n  max: number;\n}> = ({ min, max }) => {\n  const { t } = useTranslation(\"message-browser\");\n  return (\n    <TextContent className=\"pf-u-font-size\">\n      <Text>\n        {t(\"offset\")} <span className=\"custom-text\">{min}</span> -{\" \"}\n        <span className=\"custom-text\">{max}</span>\n      </Text>\n    </TextContent>\n  );\n};\n","import type { SelectProps } from \"@patternfly/react-core\";\nimport {\n  InputGroup,\n  InputGroupText,\n  InputGroupTextVariant,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback, useMemo, useState } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nconst MAX_OPTIONS = 20;\n\nexport type PartitionSelectorProps = {\n  value: number | undefined;\n  partitions: number | undefined;\n  isDisabled: boolean;\n  onChange: (value: number | undefined) => void;\n};\nexport const PartitionSelector: VoidFunctionComponent<\n  PartitionSelectorProps\n> = ({ value, partitions, isDisabled, onChange }) => {\n  const { t } = useTranslation(\"message-browser\");\n  const [isOpen, setIsOpen] = useState(false);\n  const toggleOpen = (isOpen: boolean) => setIsOpen(isOpen);\n  const titleId = \"partition-selector\";\n\n  const handleChange = useCallback(\n    (value: string) => {\n      if (value !== \"\") {\n        const valueAsNum = parseInt(value, 10);\n        if (Number.isInteger(valueAsNum)) {\n          onChange(valueAsNum);\n        }\n      }\n      setIsOpen(false);\n    },\n    [onChange]\n  );\n\n  const allPartitions = useMemo(() => {\n    return new Array(partitions).fill(0).map((_, index) => index.toString());\n  }, [partitions]);\n\n  const makeOptions = useCallback(\n    (values: string[]) => {\n      const options = values\n        .slice(0, MAX_OPTIONS)\n        .map((v) => <SelectOption key={v} value={v} />);\n      const hiddenOptionsCount = values.length - options.length;\n      return hiddenOptionsCount\n        ? [\n            ...options,\n            <SelectOption\n              key={\"more-info\"}\n              isDisabled={true}\n              description={t(\"partitions_hidden\", {\n                count: hiddenOptionsCount,\n              })}\n            />,\n          ]\n        : options;\n    },\n    [t]\n  );\n\n  const options = useMemo(() => {\n    return makeOptions(allPartitions);\n  }, [allPartitions, makeOptions]);\n\n  const handleFilter: SelectProps[\"onFilter\"] = useCallback(\n    (_, filter: string) => {\n      if (filter !== \"\") {\n        return makeOptions(\n          allPartitions.filter((partition) => partition.includes(filter))\n        );\n      }\n      return options;\n    },\n    [allPartitions, makeOptions, options]\n  );\n\n  return (\n    <InputGroup>\n      <InputGroupText className=\"pf-c-content\">\n        {t(\"field.partition\")}\n      </InputGroupText>\n      <div>\n        <span id={titleId} hidden>\n          {t(\"select_partition_aria_label\")}\n        </span>\n        <Select\n          variant={SelectVariant.typeahead}\n          typeAheadAriaLabel={t(\"select_partition_typeahead\")}\n          onToggle={toggleOpen}\n          onSelect={(_, value) => handleChange(value as string)}\n          selections={value !== undefined ? [`${value}`] : undefined}\n          isOpen={isOpen}\n          aria-labelledby={titleId}\n          maxHeight={200}\n          width={150}\n          onFilter={handleFilter}\n          isInputValuePersisted={false}\n          isDisabled={isDisabled}\n          placeholderText={t(\"partition_placeholder\")}\n          onClear={() => onChange(undefined)}\n          data-testid={\"partition-selector\"}\n        >\n          {options}\n        </Select>\n      </div>\n      <InputGroupText\n        id={`${titleId}-input`}\n        variant={InputGroupTextVariant.plain}\n        className=\"pf-c-content\"\n      >\n        {t(\"select_partition_of_count\", { partitions })}\n      </InputGroupText>\n    </InputGroup>\n  );\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { truncate } from \"../utils\";\nimport { Flex, FlexItem } from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nconst PREVIEW_LENGTH = 170;\n\nexport type UnknownValuePreviewProps = {\n  value: string;\n  truncateAt?: number;\n  onClick?: () => void;\n};\nexport const UnknownValuePreview: VoidFunctionComponent<\n  UnknownValuePreviewProps\n> = ({ value, truncateAt = PREVIEW_LENGTH, onClick }) => {\n  const { t } = useTranslation(\"message-browser\");\n  const [preview, truncated] = truncate(value, truncateAt);\n  return (\n    <Flex\n      direction={{ default: \"column\" }}\n      spaceItems={{ default: \"spaceItemsXs\" }}\n    >\n      <FlexItem>{preview}</FlexItem>\n      {truncated && (\n        <FlexItem>\n          <a\n            onClick={\n              onClick\n                ? (e) => {\n                    e.stopPropagation();\n                    onClick();\n                  }\n                : undefined\n            }\n          >\n            {t(\"show_more\")}\n          </a>\n        </FlexItem>\n      )}\n    </Flex>\n  );\n};\n","import type { Message } from \"ui-models/src/models/message\";\nimport { assign, createMachine } from \"xstate\";\nimport type { DateIsoString } from \"../../../../ui-models/src/types\";\nimport { isSameMessage } from \"./utils\";\n\nexport type MessageApiResponse = {\n  lastUpdated: Date;\n  messages: Message[];\n  partitions: number;\n  offsetMin: number;\n  offsetMax: number;\n\n  filter: {\n    partition: number | undefined;\n    offset: number | undefined;\n    timestamp: DateIsoString | undefined;\n    limit: number | undefined;\n    epoch: number | undefined;\n  };\n};\n\nexport const MessageBrowserMachine = createMachine(\n  {\n    id: \"message-browser\",\n    predictableActionArguments: true,\n    tsTypes: {} as import(\"./MessageBrowserMachine.typegen\").Typegen0,\n    schema: {\n      context: {} as {\n        // response\n        response: MessageApiResponse | undefined;\n\n        limit: number;\n        // optional input\n        partition: number | undefined;\n        offset: number | undefined;\n        epoch: number | undefined;\n        timestamp: DateIsoString | undefined;\n        selectedMessage: Message | undefined;\n      },\n      events: {} as\n        | {\n            type: \"fetchSuccess\";\n            messages: Message[];\n            partitions: number;\n            offsetMin: number;\n            offsetMax: number;\n          }\n        | { type: \"fetchFail\" }\n        | { type: \"refresh\" }\n        | { type: \"setPartition\"; value: number | undefined }\n        | { type: \"setOffset\"; value: number | undefined }\n        | { type: \"setTimestamp\"; value: DateIsoString | undefined }\n        | { type: \"setEpoch\"; value: number | undefined }\n        | { type: \"setLatest\" }\n        | { type: \"setLimit\"; value: number }\n        | { type: \"selectMessage\"; message: Message }\n        | { type: \"deselectMessage\" },\n    },\n    initial: \"initialLoading\",\n    context: {\n      // response\n      response: undefined,\n\n      limit: 10,\n      // optional input\n      partition: undefined,\n      offset: undefined,\n      timestamp: undefined,\n      selectedMessage: undefined,\n      epoch: undefined,\n    },\n    states: {\n      initialLoading: {\n        invoke: {\n          src: \"api\",\n        },\n        on: {\n          fetchSuccess: {\n            actions: \"setMessages\",\n            target: \"verifyMessages\",\n          },\n          fetchFail: \"error\",\n        },\n      },\n      verifyMessages: {\n        always: [{ cond: \"noMessages\", target: \"noData\" }, { target: \"ready\" }],\n      },\n      noData: {\n        on: {\n          refresh: \"initialLoading\",\n        },\n      },\n      error: {\n        on: {\n          refresh: \"initialLoading\",\n        },\n      },\n      ready: {\n        initial: \"pristine\",\n        states: {\n          pristine: {},\n          dirty: {\n            tags: \"dirty\",\n          },\n          shouldSearch: {\n            always: [\n              {\n                cond: \"areFiltersChanged\",\n                target: \"dirty\",\n              },\n              { target: \"pristine\" },\n            ],\n          },\n        },\n        always: [\n          {\n            cond: \"selectedMessageNotAvailable\",\n            actions: \"deselectMessage\",\n          },\n        ],\n        on: {\n          refresh: \"refreshing\",\n          setPartition: {\n            target: \".shouldSearch\",\n            actions: \"setPartition\",\n          },\n          setEpoch: {\n            actions: \"setEpoch\",\n            target: \".shouldSearch\",\n          },\n          setTimestamp: {\n            target: \".shouldSearch\",\n            actions: \"setTimestamp\",\n          },\n          setOffset: {\n            target: \".shouldSearch\",\n            actions: \"setOffset\",\n          },\n          setLatest: {\n            target: \".shouldSearch\",\n            actions: \"setLatest\",\n          },\n          setLimit: {\n            target: \".shouldSearch\",\n            actions: \"setLimit\",\n          },\n          selectMessage: {\n            actions: \"selectMessage\",\n          },\n          deselectMessage: {\n            actions: \"deselectMessage\",\n          },\n        },\n      },\n      refreshing: {\n        invoke: {\n          src: \"api\",\n        },\n        on: {\n          fetchSuccess: {\n            actions: \"setMessages\",\n            target: \"ready\",\n          },\n          fetchFail: {\n            target: \"ready\",\n          },\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      setMessages: assign(\n        (context, { messages, partitions, offsetMin, offsetMax }) => ({\n          response: {\n            lastUpdated: new Date(),\n            messages,\n            partitions,\n            offsetMin,\n            offsetMax,\n            filter: {\n              partition: context.partition,\n              timestamp: context.timestamp,\n              offset: context.offset,\n              limit: context.limit,\n              epoch: context.epoch,\n            },\n          },\n        })\n      ),\n      setPartition: assign((_, { value }) => ({ partition: value })),\n      setEpoch: assign((_, { value }) => ({\n        epoch: value,\n      })),\n      setTimestamp: assign((_, { value }) => ({\n        timestamp: value,\n      })),\n      setOffset: assign((_, { value }) => ({\n        offset: value,\n      })),\n      setLimit: assign((_, { value }) => ({\n        limit: value,\n      })),\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      setLatest: assign((_) => ({\n        timestamp: undefined,\n        offset: undefined,\n      })),\n      selectMessage: assign((_, { message }) => ({ selectedMessage: message })),\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      deselectMessage: assign((_) => ({ selectedMessage: undefined })),\n    },\n    guards: {\n      noMessages: ({ response }) =>\n        response === undefined || response.messages.length === 0,\n      selectedMessageNotAvailable: ({ response, selectedMessage }) =>\n        selectedMessage !== undefined &&\n        response?.messages.find((m) => isSameMessage(m, selectedMessage)) ===\n          undefined,\n      areFiltersChanged: (context) =>\n        context.response?.filter.limit !== context.limit ||\n        context.response?.filter.offset !== context.offset ||\n        context.response?.filter.partition !== context.partition ||\n        context.response?.filter.timestamp !== context.timestamp ||\n        context.response?.filter.epoch !== context.epoch,\n    },\n  }\n);\n","import {\n  Button,\n  Drawer,\n  DrawerContent,\n  PageSection,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n} from \"@patternfly/react-core\";\nimport { FilterIcon, SearchIcon } from \"@patternfly/react-icons\";\nimport type { BaseCellProps } from \"@patternfly/react-table\";\nimport {\n  InnerScrollContainer,\n  OuterScrollContainer,\n} from \"@patternfly/react-table\";\nimport {\n  FormatDate,\n  Loading,\n  RefreshButton,\n  ResponsiveTable,\n  useTranslation,\n} from \"@rhoas/app-services-ui-components\";\nimport { useMachine } from \"@xstate/react\";\nimport { parseISO } from \"date-fns\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useMemo, useState } from \"react\";\nimport type { Message } from \"ui-models/src/models/message\";\nimport type { DateIsoString } from \"../../../../ui-models/src/types\";\nimport type { MessageDetailsProps } from \"./components\";\nimport {\n  FilterGroup,\n  LimitSelector,\n  MessageDetails,\n  NoDataCell,\n  NoDataEmptyState,\n  NoResultsEmptyState,\n  OffsetRange,\n  PartitionSelector,\n  UnknownValuePreview,\n} from \"./components\";\nimport \"./KafkaMessageBrowser.css\";\nimport type { MessageApiResponse } from \"./MessageBrowserMachine\";\nimport { MessageBrowserMachine } from \"./MessageBrowserMachine\";\nimport { beautifyUnknownValue, isSameMessage } from \"./utils\";\n\nconst columns = [\n  \"partition\",\n  \"offset\",\n  \"timestamp\",\n  \"key\",\n  \"headers\",\n  \"value\",\n] as const;\n\nconst columnWidths: BaseCellProps[\"width\"][] = [10, 10, 15, 10, undefined, 30];\n\nexport type KafkaMessageBrowserProps = {\n  getMessages: (props: {\n    partition?: number;\n    offset?: number;\n    timestamp?: DateIsoString;\n    limit: number;\n  }) => Promise<{ messages: Message[]; partitions: number }>;\n};\nexport const KafkaMessageBrowser: VoidFunctionComponent<\n  KafkaMessageBrowserProps\n> = ({ getMessages }) => {\n  const [state, send] = useMachine(() => MessageBrowserMachine, {\n    devTools: true,\n    services: {\n      api: (context) => {\n        return (send) => {\n          getMessages({\n            partition: context.partition,\n            offset: context.offset,\n            timestamp: context.timestamp,\n            limit: context.limit,\n          })\n            .then(({ messages, partitions }) =>\n              send({\n                type: \"fetchSuccess\",\n                messages,\n                partitions,\n                offsetMin: context.offset || 0,\n                offsetMax: messages.reduce(\n                  (max, m) => Math.max(max, m.offset || 0),\n                  0\n                ),\n              })\n            )\n            .catch(() => send({ type: \"fetchFail\" }));\n        };\n      },\n    },\n  });\n\n  return (\n    <KafkaMessageBrowserConnected\n      isFirstLoad={state.matches(\"initialLoading\")}\n      isNoData={state.matches(\"noData\") || state.matches(\"error\")}\n      isRefreshing={state.matches(\"refreshing\")}\n      requiresSearch={state.hasTag(\"dirty\")}\n      selectedMessage={state.context.selectedMessage}\n      response={state.context.response}\n      lastUpdated={state.context.response?.lastUpdated}\n      partition={state.context.partition}\n      limit={state.context.limit}\n      filterOffset={state.context.offset}\n      filterEpoch={state.context.epoch}\n      filterTimestamp={state.context.timestamp}\n      setPartition={(value: number | undefined) =>\n        send({ type: \"setPartition\", value })\n      }\n      setOffset={(value: number | undefined) =>\n        send({ type: \"setOffset\", value })\n      }\n      setTimestamp={(value: DateIsoString | undefined) =>\n        send({ type: \"setTimestamp\", value })\n      }\n      setEpoch={(value: number | undefined) =>\n        send({ type: \"setEpoch\", value })\n      }\n      setLatest={() => send({ type: \"setLatest\" })}\n      setLimit={(value: number) => send({ type: \"setLimit\", value })}\n      refresh={() => send({ type: \"refresh\" })}\n      selectMessage={(message: Message) =>\n        send({ type: \"selectMessage\", message })\n      }\n      deselectMessage={() => send({ type: \"deselectMessage\" })}\n    />\n  );\n};\n\nexport type KafkaMessageBrowserConnectedProps = {\n  isFirstLoad: boolean;\n  isNoData: boolean;\n  isRefreshing: boolean;\n  requiresSearch: boolean;\n  selectedMessage: Message | undefined;\n  lastUpdated: Date | undefined;\n  response: MessageApiResponse | undefined;\n  partition: number | undefined;\n  limit: number;\n  filterOffset: number | undefined;\n  filterEpoch: number | undefined;\n  filterTimestamp: DateIsoString | undefined;\n  setPartition: (value: number | undefined) => void;\n  setOffset: (value: number | undefined) => void;\n  setTimestamp: (value: DateIsoString | undefined) => void;\n  setEpoch: (value: number | undefined) => void;\n  setLatest: () => void;\n  setLimit: (value: number) => void;\n  refresh: () => void;\n  selectMessage: (message: Message) => void;\n  deselectMessage: () => void;\n};\nexport const KafkaMessageBrowserConnected: VoidFunctionComponent<\n  KafkaMessageBrowserConnectedProps\n> = ({\n  isFirstLoad,\n  isNoData,\n  isRefreshing,\n  requiresSearch,\n  selectedMessage,\n  response,\n  partition,\n  limit,\n  filterOffset,\n  filterEpoch,\n  filterTimestamp,\n  setPartition,\n  setOffset,\n  setTimestamp,\n  setEpoch,\n  setLatest,\n  setLimit,\n  refresh,\n  selectMessage,\n  deselectMessage,\n}) => {\n  const { t } = useTranslation(\"message-browser\");\n  const [defaultTab, setDefaultTab] =\n    useState<MessageDetailsProps[\"defaultTab\"]>(\"value\");\n\n  const columnLabels: { [key in typeof columns[number]]: string } = useMemo(\n    () =>\n      ({\n        partition: t(\"field.partition\"),\n        offset: t(\"field.offset\"),\n        timestamp: t(\"field.timestamp\"),\n        key: t(\"field.key\"),\n        value: t(\"field.value\"),\n        headers: t(\"field.headers\"),\n      } as const),\n    [t]\n  );\n\n  switch (true) {\n    case isFirstLoad:\n      return <Loading />;\n    case isNoData:\n      return <NoDataEmptyState onRefresh={refresh} />;\n    default:\n      return (\n        <PageSection\n          isFilled={true}\n          hasOverflowScroll={true}\n          aria-label={\"TODO\"}\n        >\n          <Drawer isInline={true} isExpanded={selectedMessage !== undefined}>\n            <DrawerContent\n              panelContent={\n                <MessageDetails\n                  message={selectedMessage}\n                  defaultTab={defaultTab}\n                  onClose={deselectMessage}\n                />\n              }\n            >\n              <OuterScrollContainer>\n                <Toolbar\n                  className={\"mas-KafkaMessageBrowser-Toolbar\"}\n                  data-testid={\"message-browser-toolbar\"}\n                >\n                  <ToolbarContent>\n                    <ToolbarToggleGroup\n                      toggleIcon={<FilterIcon />}\n                      breakpoint=\"2xl\"\n                    >\n                      <ToolbarGroup variant=\"filter-group\">\n                        <ToolbarItem>\n                          <PartitionSelector\n                            value={partition}\n                            partitions={response?.partitions || 0}\n                            onChange={setPartition}\n                            isDisabled={isRefreshing}\n                          />\n                        </ToolbarItem>\n                      </ToolbarGroup>\n                      <ToolbarGroup variant=\"filter-group\">\n                        <FilterGroup\n                          isDisabled={isRefreshing}\n                          offset={filterOffset}\n                          epoch={filterEpoch}\n                          timestamp={filterTimestamp}\n                          onOffsetChange={setOffset}\n                          onTimestampChange={setTimestamp}\n                          onEpochChange={setEpoch}\n                          onLatest={setLatest}\n                        />\n                      </ToolbarGroup>\n                      <ToolbarGroup>\n                        <LimitSelector\n                          value={limit}\n                          onChange={setLimit}\n                          isDisabled={isRefreshing}\n                        />\n                      </ToolbarGroup>\n                    </ToolbarToggleGroup>\n                    <ToolbarGroup>\n                      <ToolbarItem>\n                        <Button\n                          variant={\"plain\"}\n                          isDisabled={!requiresSearch || isRefreshing}\n                          aria-label={t(\"common:search_button_label\")}\n                          onClick={refresh}\n                        >\n                          <SearchIcon />\n                        </Button>\n                      </ToolbarItem>\n                      <ToolbarItem>\n                        <RefreshButton\n                          onClick={refresh}\n                          isRefreshing={isRefreshing}\n                          isDisabled={requiresSearch}\n                        />\n                      </ToolbarItem>\n                    </ToolbarGroup>\n                    <ToolbarGroup alignment={{ default: \"alignRight\" }}>\n                      {response?.filter.partition !== undefined &&\n                        response?.messages.length > 0 && (\n                          <OffsetRange\n                            min={response?.offsetMin || 0}\n                            max={response?.offsetMax || 0}\n                          />\n                        )}\n                    </ToolbarGroup>\n                  </ToolbarContent>\n                </Toolbar>\n                <InnerScrollContainer>\n                  <ResponsiveTable\n                    ariaLabel={t(\"table_aria_label\")}\n                    columns={columns}\n                    data={response?.messages}\n                    expectedLength={response?.messages?.length}\n                    renderHeader={({ column, Th, key }) => (\n                      <Th key={key}>{columnLabels[column]}</Th>\n                    )}\n                    renderCell={({ column, row, colIndex, Td, key }) => (\n                      <Td\n                        key={key}\n                        dataLabel={columnLabels[column]}\n                        width={columnWidths[colIndex]}\n                      >\n                        {(() => {\n                          const empty = (\n                            <NoDataCell columnLabel={columnLabels[column]} />\n                          );\n                          switch (column) {\n                            case \"partition\":\n                              return row.partition;\n                            case \"offset\":\n                              return row.offset;\n                            case \"timestamp\":\n                              return row.timestamp ? (\n                                <FormatDate\n                                  date={parseISO(row.timestamp)}\n                                  format={\"longWithMilliseconds\"}\n                                />\n                              ) : (\n                                empty\n                              );\n                            case \"key\":\n                              return row.key ? (\n                                <UnknownValuePreview\n                                  value={row.key}\n                                  truncateAt={40}\n                                />\n                              ) : (\n                                empty\n                              );\n                            case \"headers\":\n                              return Object.keys(row.headers).length > 0 ? (\n                                <UnknownValuePreview\n                                  value={beautifyUnknownValue(\n                                    JSON.stringify(row.headers)\n                                  )}\n                                  onClick={() => {\n                                    setDefaultTab(\"headers\");\n                                    selectMessage(row);\n                                  }}\n                                />\n                              ) : (\n                                empty\n                              );\n                            case \"value\":\n                              return row.value ? (\n                                <UnknownValuePreview\n                                  value={beautifyUnknownValue(row.value || \"\")}\n                                  onClick={() => {\n                                    setDefaultTab(\"value\");\n                                    selectMessage(row);\n                                  }}\n                                />\n                              ) : (\n                                empty\n                              );\n                          }\n                        })()}\n                      </Td>\n                    )}\n                    isRowSelected={({ row }) =>\n                      selectedMessage !== undefined &&\n                      isSameMessage(row, selectedMessage)\n                    }\n                    onRowClick={({ row }) => {\n                      setDefaultTab(\"value\");\n                      selectMessage(row);\n                    }}\n                  >\n                    <NoResultsEmptyState\n                      onReset={() => {\n                        setLatest();\n                        setPartition(undefined);\n                        refresh();\n                      }}\n                    />\n                  </ResponsiveTable>\n                </InnerScrollContainer>\n              </OuterScrollContainer>\n            </DrawerContent>\n          </Drawer>\n        </PageSection>\n      );\n  }\n};\n","import {\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface CapacityTable {\n  name: string;\n  firstStreamingUnit: string;\n  secondStreamingUnit: string;\n}\n\nexport const KafkaInstanceCapacityTable: FunctionComponent = () => {\n  const { t } = useTranslation(\"kafkaoverview-v2\");\n\n  const capacityTable: CapacityTable[] = [\n    {\n      name: \"Ingress (MB/second)\",\n      firstStreamingUnit: \"up to 50\",\n      secondStreamingUnit: \"up to 100\",\n    },\n    {\n      name: \"Egress (MB/second)\",\n      firstStreamingUnit: \"up to 100\",\n      secondStreamingUnit: \"up to 200\",\n    },\n    {\n      name: \"Storage* (GB)\",\n      firstStreamingUnit: \"up to 1000\",\n      secondStreamingUnit: \"up to 2000\",\n    },\n    {\n      name: \"Topic partitions\",\n      firstStreamingUnit: \"up to 1500\",\n      secondStreamingUnit: \"up to 3000\",\n    },\n    {\n      name: \"Client connections\",\n      firstStreamingUnit: \"up to 3000\",\n      secondStreamingUnit: \"up to 6000\",\n    },\n    {\n      name: \"Connection rate (connections/second)\",\n      firstStreamingUnit: \"up to 100\",\n      secondStreamingUnit: \"up to 200\",\n    },\n    {\n      name: \"Message size (MB)\",\n      firstStreamingUnit: \"up to 1\",\n      secondStreamingUnit: \"up to 1\",\n    },\n  ];\n\n  const columnNames = {\n    name: \"\",\n    firstStreamingUnit: t(\"firstStreamingUnit\"),\n    secondStreamingUnit: t(\"secondStreamingUnit\"),\n  };\n\n  return (\n    <TableComposable>\n      <Thead>\n        <Tr>\n          <Th>{columnNames.name}</Th>\n          <Th>{columnNames.firstStreamingUnit}</Th>\n          <Th>{columnNames.secondStreamingUnit}</Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        {capacityTable.map((table) => {\n          return (\n            <Tr key={table.name}>\n              <Td dataLabel={columnNames.name}>{table.name}</Td>\n              <Td dataLabel={columnNames.firstStreamingUnit}>\n                {table.firstStreamingUnit}\n              </Td>\n              <Td dataLabel={columnNames.secondStreamingUnit}>\n                {table.secondStreamingUnit}\n              </Td>\n            </Tr>\n          );\n        })}\n      </Tbody>\n    </TableComposable>\n  );\n};\n","import {\n  Bullseye,\n  Card,\n  PageSection,\n  PageSectionVariants,\n  Stack,\n  StackItem,\n  Text,\n  TextVariants,\n  Title,\n} from \"@patternfly/react-core\";\nimport classNames from \"classnames\";\nimport type {\n  CSSProperties,\n  FunctionComponent,\n  ReactNode,\n  VoidFunctionComponent,\n} from \"react\";\nimport \"./MarketingPage.css\";\n\nexport type MarketingPageHeroProps = {\n  title: string;\n  tagLine: string;\n  description: string;\n  description2?: string;\n  heroImage: string;\n  heroImageSize: number;\n  heroImageCanRepeat?: boolean;\n  heroImagePositionY?: number;\n  cta?: ReactNode;\n  variant?: \"light\" | \"dark\";\n};\n\nexport const MarketingPageHero: VoidFunctionComponent<\n  MarketingPageHeroProps\n> = ({\n  title,\n  tagLine,\n  description,\n  description2,\n  heroImage,\n  heroImageSize,\n  heroImageCanRepeat = true,\n  heroImagePositionY = 0,\n  cta,\n  variant = \"light\",\n}) => {\n  const style = {\n    \"--appsrv-marketing--banner--before--BackgroundImage\": `url(${heroImage})`,\n    \"--appsrv-marketing--banner--before--BackgroundSize\": `${heroImageSize}px`,\n    \"--appsrv-marketing--banner--before--BackgroundRepeat\": heroImageCanRepeat\n      ? \"repeat\"\n      : \"no-repeat\",\n    \"--appsrv-marketing--banner--before--BackgroundPositionY\": `${heroImagePositionY}px`,\n  } as CSSProperties;\n  return (\n    <PageSection\n      className={classNames(\"appsrv-marketing--banner\", {\n        \"pf-u-background-color-dark-100\": variant === \"dark\",\n        \"pf-u-background-color-100\": variant === \"light\",\n      })}\n      variant={\n        variant === \"dark\"\n          ? PageSectionVariants.dark\n          : PageSectionVariants.light\n      }\n      style={style}\n    >\n      <Stack hasGutter>\n        <Title headingLevel=\"h1\" size=\"2xl\">\n          {title}\n        </Title>\n        <Text\n          className={`appsrv-marketing--banner__tagline ${\n            variant === \"dark\" ? \"\" : \"pf-u-color-200\"\n          }`}\n        >\n          {tagLine}\n        </Text>\n        <Text component={TextVariants.p}>{description}</Text>\n        {description2 && (\n          <Text component={TextVariants.p} className=\"pf-u-mt-md\">\n            {description2}\n          </Text>\n        )}\n        {cta && <StackItem>{cta}</StackItem>}\n      </Stack>\n    </PageSection>\n  );\n};\n\nexport const MarketingPageBanner: FunctionComponent = ({ children }) => {\n  return (\n    <PageSection\n      variant={PageSectionVariants.light}\n      className=\"appsrv-marketing--page-section--marketing pf-u-background-color-100\"\n    >\n      <Bullseye>\n        <Text\n          component={TextVariants.p}\n          className=\"appsrv-marketing--banner--text-only\"\n        >\n          {children}\n        </Text>\n      </Bullseye>\n    </PageSection>\n  );\n};\n\nexport type MarketingPageSectionProps = {\n  className?: string;\n};\n\nexport const MarketingPageSection: FunctionComponent<\n  MarketingPageSectionProps & {\n    variant?: \"dark\" | \"light\" | \"default\";\n  }\n> = ({\n  className = \"appsrv-marketing--page-section--marketing\",\n  variant = \"default\",\n  children,\n}) => (\n  <PageSection\n    isWidthLimited\n    className={classNames(className, {\n      \"pf-u-background-color-dark-100\": variant === \"dark\",\n      \"pf-u-background-color-100\": variant === \"light\",\n    })}\n    variant={\n      variant === \"dark\"\n        ? PageSectionVariants.dark\n        : variant === \"light\"\n        ? PageSectionVariants.light\n        : PageSectionVariants.default\n    }\n  >\n    {children}\n  </PageSection>\n);\n\nexport const MarketingPageVideoCard: VoidFunctionComponent<{\n  src: string;\n  title: string;\n}> = ({ src, title }) => (\n  <Card className=\"appsrv-marketing--video\">\n    <div className=\"appsrv-marketing--video__wrapper\">\n      <iframe\n        src={src}\n        title={title}\n        frameBorder=\"0\"\n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n        allowFullScreen\n      ></iframe>\n    </div>\n  </Card>\n);\n","import {\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n  CardHeaderMain,\n  CardTitle,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Divider,\n  Flex,\n  FlexItem,\n  Grid,\n  Split,\n  SplitItem,\n  Stack,\n  Text,\n  TextContent,\n  TextVariants,\n  Title,\n} from \"@patternfly/react-core\";\nimport {\n  AppSpeedKeyArt,\n  ExternalLink,\n} from \"@rhoas/app-services-ui-components\";\nimport type { FunctionComponent } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { KafkaInstanceCapacityTable } from \"./KafkaInstanceCapacityTable\";\nimport { LogoAWS, LogoAzure, LogoGCP } from \"./Logos/images\";\nimport { MarketingPageHero, MarketingPageSection } from \"./MarketingPage\";\n\nexport const KafkaPageV3: FunctionComponent = () => {\n  const { t } = useTranslation([\"kafkaoverview-v3\"]);\n  return (\n    <>\n      <MarketingPageHero\n        title={t(\"heroTitle\")}\n        tagLine={t(\"heroTagline\")}\n        description={t(\"heroDescription\")}\n        heroImage={AppSpeedKeyArt}\n        heroImageSize={478}\n        heroImageCanRepeat={false}\n        heroImagePositionY={-99}\n      />\n      <MarketingPageSection>\n        <Grid hasGutter lg={6}>\n          <Card\n            ouiaId=\"card-overview-purchase-now\"\n            aria-label={t(\"kafkaoverview:purchaseCardTitle\")}\n          >\n            <CardHeader>\n              <CardHeaderMain>\n                <CardTitle>\n                  <Title headingLevel=\"h2\">\n                    <Trans\n                      ns={\"kafkaoverview-v3\"}\n                      i18nKey={\"purchaseCardTitle\"}\n                    >\n                      <span className=\"pf-u-color-200 pf-u-font-size-sm\"></span>\n                    </Trans>\n                  </Title>\n                </CardTitle>\n              </CardHeaderMain>\n            </CardHeader>\n            <CardBody>{t(\"purchaseCardMainText\")}</CardBody>\n            <CardFooter>\n              <Flex spaceItems={{ default: \"spaceItems2xl\" }}>\n                <FlexItem>\n                  <ExternalLink\n                    href={\n                      \"https://marketplace.redhat.com/en-us/products/red-hat-openshift-streams-for-apache-kafka\"\n                    }\n                    testId={\"cardPurchase-buttonRH\"}\n                    className={\"pf-u-ml-md \"}\n                  >\n                    <Trans\n                      ns={\"kafkaoverview-v3\"}\n                      i18nKey={\"purchaseCardCallToActionButtonRedHat\"}\n                      components={{\n                        bold: <strong />,\n                        size: <span className=\"pf-u-font-size-lg\" />,\n                      }}\n                    />\n                  </ExternalLink>\n                </FlexItem>\n\n                <FlexItem>\n                  <ExternalLink\n                    href={\n                      \"https://aws.amazon.com/marketplace/pp/prodview-3xohcoyuwkumc\"\n                    }\n                    testId={\"cardPurchase-buttonAWS\"}\n                    className={\"pf-u-ml-md\"}\n                  >\n                    <Trans\n                      ns={\"kafkaoverview-v3\"}\n                      i18nKey={\"purchaseCardCallToActionButtonAWS\"}\n                      components={{\n                        bold: <strong />,\n                        size: <span className=\"pf-u-font-size-lg\" />,\n                      }}\n                    />\n                  </ExternalLink>\n                </FlexItem>\n              </Flex>\n            </CardFooter>\n          </Card>\n          <Card\n            ouiaId=\"card-overview-contact-sales\"\n            aria-label={t(\"kafkaoverview:contactSalesCardTitle\")}\n          >\n            <CardHeader>\n              <CardTitle>\n                <Title headingLevel=\"h2\">\n                  <Trans\n                    ns={\"kafkaoverview-v3\"}\n                    i18nKey={\"contactSalesCardTitle\"}\n                  >\n                    <span className=\"pf-u-color-200 pf-u-font-size-sm\"></span>\n                  </Trans>\n                </Title>\n              </CardTitle>\n            </CardHeader>\n            <CardBody>{t(\"contactSalesCardMainText\")}</CardBody>\n            <CardFooter>\n              <ExternalLink\n                href={\n                  \"https://www.redhat.com/en/technologies/cloud-computing/openshift/openshift-streams-for-apache-kafka#contact-us\"\n                }\n                testId={\"cardContactSales-buttonCTA\"}\n                className={\"pf-u-ml-md\"}\n              >\n                <Trans\n                  ns={\"kafkaoverview-v3\"}\n                  i18nKey={\"contactSalesCardCallToActionButton\"}\n                  components={{\n                    bold: <strong />,\n                    size: <span className=\"pf-u-font-size-lg\" />,\n                  }}\n                />\n              </ExternalLink>\n            </CardFooter>\n          </Card>\n        </Grid>\n      </MarketingPageSection>\n      <MarketingPageSection\n        className={\"kafka-overview--page-section--marketing\"}\n      >\n        <Card>\n          <CardTitle>\n            <Title headingLevel=\"h2\">{t(\"pricingModalTitle\")}</Title>\n          </CardTitle>\n          <CardBody>\n            <Flex spaceItems={{ default: \"spaceItemsXl\" }}>\n              <Flex\n                alignSelf={{ default: \"alignSelfCenter\" }}\n                justifyContent={{ default: \"justifyContentCenter\" }}\n                flex={{ default: \"flex_1\" }}\n              >\n                <FlexItem>\n                  <DescriptionList isHorizontal>\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>\n                        {t(\"steamingUnit\")}\n                      </DescriptionListTerm>\n                      <DescriptionListDescription>\n                        {t(\"streamingUnit_price\")}\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>\n                        {t(\"dataTransfer\")}\n                      </DescriptionListTerm>\n                      <DescriptionListDescription>\n                        {t(\"dataTransfer_price\")}\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>{t(\"storage\")}</DescriptionListTerm>\n                      <DescriptionListDescription>\n                        {t(\"storage_price\")}\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                  </DescriptionList>\n                </FlexItem>\n              </Flex>\n              <Divider isVertical />\n              <FlexItem flex={{ default: \"flex_1\" }}>\n                <TextContent>\n                  <Text component={TextVariants.p}>\n                    <Trans\n                      ns={\"kafkaoverview-v3\"}\n                      i18nKey={\"streamingUnitText\"}\n                      components={{ bold: <strong /> }}\n                    />\n                  </Text>\n                </TextContent>\n              </FlexItem>\n            </Flex>\n          </CardBody>\n        </Card>\n      </MarketingPageSection>\n      <MarketingPageSection\n        className={\"kafka-overview--page-section--marketing\"}\n      >\n        <Card>\n          <CardTitle>\n            <Title headingLevel=\"h2\">{t(\"kafkaInstanceCapacityTitle\")}</Title>\n          </CardTitle>\n          <CardBody>\n            <Stack hasGutter>\n              <Text component={TextVariants.p}>\n                {t(\"kafkaInstanceCapacityDescription\")}\n              </Text>\n              <KafkaInstanceCapacityTable />\n            </Stack>\n          </CardBody>\n          <CardFooter>\n            <TextContent className={\"pf-u-font-size-sm\"}>\n              <Trans\n                ns={\"kafkaoverview-v3\"}\n                i18nKey={\"kafkaInstanceCapacityfooter\"}\n                components={[\n                  <ExternalLink\n                    href={\"https://access.redhat.com/support\"}\n                    testId={\"SupportLink\"}\n                    className={\"pf-u-ml-xs\"}\n                  />,\n                  <ExternalLink\n                    href={\n                      \"https://access.redhat.com/documentation/en-us/red_hat_openshift_streams_for_apache_kafka/1/guide/aced8e5e-8229-4cb2-82f9-87a8caa24bb3\"\n                    }\n                    testId={\"MonitoringDiskSpaceLink\"}\n                    className={\"pf-u-ml-xs\"}\n                  />,\n                ]}\n              />\n            </TextContent>\n          </CardFooter>\n        </Card>\n      </MarketingPageSection>\n      <MarketingPageSection\n        className={\"kafka-overview--page-section--marketing\"}\n      >\n        <Card>\n          <CardTitle>\n            <Title headingLevel=\"h2\">{t(\"cloudProvidersTitle\")}</Title>\n          </CardTitle>\n          <CardBody>\n            <Flex\n              spaceItems={{ default: \"spaceItemsXl\" }}\n              direction={{ default: \"column\", xl: \"row\" }}\n            >\n              <Flex\n                justifyContent={{ default: \"justifyContentCenter\" }}\n                flex={{ default: \"flex_1\" }}\n              >\n                <FlexItem>\n                  <Split hasGutter>\n                    <SplitItem>\n                      <img src={LogoAWS} alt={\"\"} style={{ height: \"60px\" }} />\n                    </SplitItem>\n                    <SplitItem>\n                      <Title headingLevel=\"h2\" className={\"pf-u-pt-sm\"}>\n                        {t(\"awsWebServiceTitle\")}\n                      </Title>\n                    </SplitItem>\n                  </Split>\n                </FlexItem>\n              </Flex>\n              <Divider\n                orientation={{ default: \"horizontal\", xl: \"vertical\" }}\n              />\n              <Flex\n                justifyContent={{ default: \"justifyContentCenter\" }}\n                flex={{ default: \"flex_1\" }}\n              >\n                <FlexItem>\n                  <Split hasGutter>\n                    <SplitItem>\n                      <img src={LogoGCP} alt={\"\"} style={{ height: \"60px\" }} />\n                    </SplitItem>\n                    <SplitItem>\n                      <Title headingLevel=\"h2\" className={\"pf-u-pt-sm\"}>\n                        {t(\"googleCloudProviderTitle\")}\n                      </Title>\n                      <Text\n                        component={TextVariants.p}\n                        className={\"pf-u-color-200\"}\n                      >\n                        {t(\"googleCloudProviderDescription\")}\n                      </Text>\n                    </SplitItem>\n                  </Split>\n                </FlexItem>\n              </Flex>\n              <Divider\n                orientation={{ default: \"horizontal\", xl: \"vertical\" }}\n              />\n              <Flex\n                justifyContent={{ default: \"justifyContentCenter\" }}\n                flex={{ default: \"flex_1\" }}\n              >\n                <FlexItem>\n                  <Split hasGutter>\n                    <SplitItem>\n                      <img\n                        src={LogoAzure}\n                        alt={\"\"}\n                        style={{ height: \"60px\" }}\n                      />\n                    </SplitItem>\n                    <SplitItem>\n                      <Title headingLevel=\"h2\" className={\"pf-u-pt-sm\"}>\n                        {t(\"microsoftAzureTitle\")}\n                      </Title>\n                      <Text\n                        component={TextVariants.p}\n                        className={\"pf-u-color-200\"}\n                      >\n                        {t(\"microsoftAzureDescription\")}\n                      </Text>\n                    </SplitItem>\n                  </Split>\n                </FlexItem>\n              </Flex>\n            </Flex>\n          </CardBody>\n        </Card>\n      </MarketingPageSection>\n    </>\n  );\n};\n","import {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { PlusCircleIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nexport type EmptyStateNoTopicProps = {\n  onCreateTopic: () => void;\n};\n\nexport const EmptyStateNoTopic: VoidFunctionComponent<\n  EmptyStateNoTopicProps\n> = ({ onCreateTopic }) => {\n  const { t } = useTranslation(\"topic\");\n\n  return (\n    <EmptyState\n      data-ouia-page-id=\"emptyStateTopics\"\n      variant={EmptyStateVariant.large}\n    >\n      <EmptyStateIcon icon={PlusCircleIcon} />\n      <Title headingLevel=\"h2\" size=\"lg\">\n        {t(\"empty_topics_title\")}\n      </Title>\n      <EmptyStateBody>{t(\"empty_topics_body\")}</EmptyStateBody>\n      <Button\n        data-testid=\"actionCreateTopic\"\n        ouiaId=\"button-create\"\n        variant=\"primary\"\n        onClick={onCreateTopic}\n      >\n        {t(\"create_topic\")}\n      </Button>\n    </EmptyState>\n  );\n};\n","import type { ResourceOperationValue } from \"./components/ResourceOperation\";\nimport type { ResourcePermissionValue } from \"./components/ResourcePermission\";\nimport type { ResourcePrefixRuleValue } from \"./components/ResourcePrefixRule\";\nimport type { ResourceTypeValue } from \"./components/ResourceType\";\n\nexport type AclOperation =\n  | \"ALL\"\n  | \"READ\"\n  | \"WRITE\"\n  | \"CREATE\"\n  | \"DELETE\"\n  | \"ALTER\"\n  | \"DESCRIBE\"\n  | \"DESCRIBE_CONFIGS\"\n  | \"ALTER_CONFIGS\";\n\nexport type AclResourceType =\n  | \"GROUP\"\n  | \"TOPIC\"\n  | \"CLUSTER\"\n  | \"TRANSACTIONAL_ID\";\n\nexport type AclPatternType = \"LITERAL\" | \"PREFIXED\";\n\nexport type AclPermissionType = \"ALLOW\" | \"DENY\";\n\nexport interface AclBinding {\n  /**\n   *\n   * @type {AclResourceType}\n   * @memberof AclBinding\n   */\n  resourceType: AclResourceType;\n  /**\n   *\n   * @type {string}\n   * @memberof AclBinding\n   */\n  resourceName: string;\n  /**\n   *\n   * @type {AclPatternType}\n   * @memberof AclBinding\n   */\n  patternType: AclPatternType;\n  /**\n   * Identifies the user or service account to which an ACL entry is bound. The literal prefix value of `User:` is required. May be used to specify all users with value `User:*`.\n   * @type {string}\n   * @memberof AclBinding\n   */\n  principal: string;\n  /**\n   *\n   * @type {AclOperation}\n   * @memberof AclBinding\n   */\n  operation: AclOperation;\n  /**\n   *\n   * @type {AclPermissionType}\n   * @memberof AclBinding\n   */\n  permission: AclPermissionType;\n}\nexport enum PrincipalType {\n  UserAccount = \"USER_ACCOUNT\",\n  ServiceAccount = \"SERVICE_ACCOUNT\",\n}\n\nexport type Account = {\n  id: string;\n  principalType: PrincipalType;\n  displayName: string;\n};\n\ntype ManualAcl = {\n  resourceType: ResourceTypeValue | undefined;\n  resourcePrefix: ResourcePrefixRuleValue;\n  resourceName: string | undefined;\n  resourcePermission: ResourcePermissionValue;\n  resourceOperation: ResourceOperationValue | undefined;\n};\n\ntype ProduceTopicTemplate = {\n  prefixRuleValue: ResourcePrefixRuleValue;\n  resourceNameValue: string | undefined;\n};\n\ntype ConsumeTopicTemplate = {\n  consumerResourceName: string | undefined;\n  consumerResourcePrefixRule: ResourcePrefixRuleValue;\n  topicResourceName: string | undefined;\n  topicResourcePrefixRule: ResourcePrefixRuleValue;\n};\n\ntype ManageAccessTemplate = {\n  instanceName: string;\n};\nexport type AddAclType =\n  | ({ type: \"manual\" } & ManualAcl)\n  | ({ type: \"consume-topic\" } & ConsumeTopicTemplate)\n  | ({ type: \"produce-topic\" } & ProduceTopicTemplate)\n  | ({ type: \"manage-access\" } & ManageAccessTemplate);\n\nexport const createEmptyManualAcl = (): AddAclType => {\n  return {\n    type: \"manual\",\n    resourceName: undefined,\n    resourceType: undefined,\n    resourceOperation: undefined,\n    resourcePrefix: \"Is\",\n    resourcePermission: \"allow\",\n  };\n};\nexport const createEmptyProduceTopicAcl = (): AddAclType => {\n  return {\n    type: \"produce-topic\",\n    prefixRuleValue: \"Is\",\n    resourceNameValue: undefined,\n  };\n};\nexport const createEmptyConsumeTopicAcl = (): AddAclType => {\n  return {\n    type: \"consume-topic\",\n    consumerResourceName: undefined,\n    consumerResourcePrefixRule: \"Is\",\n    topicResourceName: undefined,\n    topicResourcePrefixRule: \"Is\",\n  };\n};\nexport const createEmptyManageAccessAcl = (kafkaName: string): AddAclType => {\n  return {\n    type: \"manage-access\",\n    instanceName: kafkaName,\n  };\n};\n","import { Button, PageSection } from \"@patternfly/react-core\";\nimport { TableVariant } from \"@patternfly/react-table\";\nimport type { TableViewProps } from \"@rhoas/app-services-ui-components\";\nimport {\n  EmptyStateNoResults,\n  TableView,\n} from \"@rhoas/app-services-ui-components\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport type { Topic, TopicField } from \"ui-models/src/models/topic\";\nimport { useTopicLabels } from \"../../hooks\";\nimport type { EmptyStateNoTopicProps } from \"./components\";\nimport { EmptyStateNoTopic } from \"./components\";\nimport { formattedRetentionSize, formattedRetentionTime } from \"./types\";\n\ntype SubUnion<T, U extends T> = U;\n\nconst Columns: SubUnion<\n  TopicField,\n  \"name\" | \"partitions\" | \"retention.ms\" | \"retention.bytes\"\n>[] = [\"name\", \"partitions\", \"retention.ms\", \"retention.bytes\"];\n\nexport type KafkaTopicsProps<T extends Topic> = {\n  topics: Array<T> | undefined;\n  getUrlFortopic: (row: T) => string;\n  onDelete: (row: T) => void;\n  onEdit: (row: T) => void;\n  topicName: string[];\n  onSearchTopic: (value: string) => void;\n  onRemoveTopicChip: (value: string) => void;\n  onRemoveTopicChips: () => void;\n  onTopicLinkClick: (row: T) => void;\n} & Pick<\n  TableViewProps<T, typeof Columns[number]>,\n  | \"itemCount\"\n  | \"page\"\n  | \"perPage\"\n  | \"onPageChange\"\n  | \"isRowSelected\"\n  | \"isColumnSortable\"\n  | \"onClearAllFilters\"\n> &\n  EmptyStateNoTopicProps;\n\nexport const KafkaTopics = <T extends Topic>({\n  topics,\n  onDelete,\n  onEdit,\n  isColumnSortable,\n  itemCount,\n  onSearchTopic,\n  topicName,\n  onClearAllFilters,\n  onCreateTopic,\n  page,\n  perPage,\n  onPageChange,\n  onRemoveTopicChip,\n  onRemoveTopicChips,\n  getUrlFortopic,\n  onTopicLinkClick,\n}: KafkaTopicsProps<T>) => {\n  const { t } = useTranslation(\"topic\");\n\n  const labels = useTopicLabels();\n\n  const isFiltered = topicName.length > 0;\n  return (\n    <PageSection isFilled={true} hasOverflowScroll={true} aria-label={\"TODO\"}>\n      <TableView\n        variant={TableVariant.compact}\n        tableOuiaId={\"card-table\"}\n        ariaLabel={t(\"topic_list_table\")}\n        data={topics}\n        columns={Columns}\n        renderHeader={({ column, Th, key }) => (\n          <Th key={key}>{labels.fields[column]}</Th>\n        )}\n        renderCell={({ column, row, Td, key }) => {\n          return (\n            <Td key={key} dataLabel={labels.fields[column]}>\n              {(() => {\n                switch (column) {\n                  case \"name\":\n                    return (\n                      <Button\n                        variant=\"link\"\n                        component={(props) => (\n                          <Link\n                            to={getUrlFortopic(row)}\n                            {...props}\n                            data-testid=\"tableTopics-linkTopic\"\n                            data-ouia-component-id=\"table-link\"\n                          >\n                            {row.name}\n                          </Link>\n                        )}\n                        onClick={() => onTopicLinkClick(row)}\n                        isInline\n                      />\n                    );\n                  case \"partitions\":\n                    return row.partitions.length;\n                  case \"retention.ms\":\n                    return formattedRetentionTime(row[\"retention.ms\"].value);\n                  case \"retention.bytes\":\n                    return formattedRetentionSize(row[\"retention.bytes\"].value);\n                }\n              })()}\n            </Td>\n          );\n        }}\n        renderActions={({ row, ActionsColumn }) => (\n          <ActionsColumn\n            items={[\n              {\n                title: t(\"table.actions.edit\"),\n                onClick: () => onEdit(row),\n              },\n              {\n                title: t(\"table.actions.delete\"),\n                onClick: () => onDelete(row),\n              },\n            ]}\n          />\n        )}\n        isColumnSortable={isColumnSortable}\n        filters={{\n          [labels.fields.name]: {\n            type: \"search\",\n            chips: topicName,\n            onSearch: onSearchTopic,\n            onRemoveChip: onRemoveTopicChip,\n            onRemoveGroup: onRemoveTopicChips,\n            validate: (value: string) => !/[\"$^<>|+%/;:,\\s*=~#()]/.test(value),\n            errorMessage: t(\"input_field_invalid_message\"),\n          },\n        }}\n        actions={[\n          {\n            label: t(\"create_topic\"),\n            onClick: onCreateTopic,\n            isPrimary: true,\n          },\n        ]}\n        itemCount={itemCount}\n        page={page}\n        onPageChange={onPageChange}\n        perPage={perPage}\n        isFiltered={isFiltered}\n        onClearAllFilters={onClearAllFilters}\n        emptyStateNoData={<EmptyStateNoTopic onCreateTopic={onCreateTopic} />}\n        emptyStateNoResults={<EmptyStateNoResults />}\n      />\n    </PageSection>\n  );\n};\n","import type { CardKafkaInstanceMetricsLimits } from \"./components\";\n\nexport type TimeSeriesMetrics = { [timestamp: string]: number };\nexport type PartitionBytesMetric = { [partition: string]: TimeSeriesMetrics };\n\nexport enum DurationOptions {\n  Last5minutes = 5,\n  Last15minutes = 15,\n  Last30minutes = 30,\n  Last1hour = 60,\n  Last3hours = 3 * 60,\n  Last6hours = 6 * 60,\n  Last12hours = 12 * 60,\n  Last24hours = 24 * 60,\n  Last2days = 2 * 24 * 60,\n  Last7days = 7 * 24 * 60,\n}\n\nexport type GetTopicsMetricsResponse = {\n  kafkaTopics: string[];\n  metricsTopics: string[];\n  bytesOutgoing: TimeSeriesMetrics;\n  bytesIncoming: TimeSeriesMetrics;\n  bytesPerPartition: PartitionBytesMetric;\n  incomingMessageRate: TimeSeriesMetrics;\n};\n\nexport type GetKafkaInstanceMetricsResponse = {\n  usedDiskSpaceMetrics: TimeSeriesMetrics;\n  clientConnectionsMetrics: TimeSeriesMetrics;\n  connectionAttemptRateMetrics: TimeSeriesMetrics;\n} & CardKafkaInstanceMetricsLimits;\n\nexport type GetMetricsKpiResponse = {\n  topics: number;\n  topicPartitions: number;\n  consumerGroups: number;\n  topicPartitionsLimit: number;\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateVariant,\n  PageSection,\n} from \"@patternfly/react-core\";\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\n\nexport const EmptyStateInitialLoading: VoidFunctionComponent = () => {\n  return (\n    <PageSection isFilled={true}>\n      <EmptyState variant={EmptyStateVariant.xs}>\n        <EmptyStateBody data-chromatic=\"ignore\">\n          <AppServicesLoading />\n        </EmptyStateBody>\n      </EmptyState>\n    </PageSection>\n  );\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  PageSection,\n  Title,\n} from \"@patternfly/react-core\";\nimport { TachometerAltIcon } from \"@patternfly/react-icons\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { FunctionComponent } from \"react\";\n\nexport const EmptyStateMetricsUnavailable: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <PageSection isFilled={true}>\n      <EmptyState variant={EmptyStateVariant.xs}>\n        <EmptyStateIcon icon={TachometerAltIcon} />\n        <Title headingLevel=\"h3\" size=\"lg\">\n          {t(\"metrics:empty_state_no_data_title\")}\n        </Title>\n        <EmptyStateBody>{t(\"metrics:empty_state_no_data_body\")}</EmptyStateBody>\n      </EmptyState>\n    </PageSection>\n  );\n};\n","import { Grid, GridItem, PageSection } from \"@patternfly/react-core\";\nimport type { FunctionComponent, ReactElement } from \"react\";\n\ntype MetricsLayoutProps = {\n  metricsLagAlert: ReactElement;\n  topicsKpi: ReactElement;\n  topicPartitionsKpi: ReactElement;\n  consumerGroupKpi: ReactElement;\n  diskSpaceMetrics: ReactElement;\n  topicMetrics: ReactElement;\n};\nexport const MetricsLayout: FunctionComponent<MetricsLayoutProps> = ({\n  metricsLagAlert,\n  topicsKpi,\n  topicPartitionsKpi,\n  consumerGroupKpi,\n  diskSpaceMetrics,\n  topicMetrics,\n}) => {\n  return (\n    <PageSection\n      hasOverflowScroll={true}\n      aria-label={\"TODO\"}\n      padding={{ default: \"noPadding\" }}\n      className={\n        \"pf-u-px-lg-on-xl pf-u-pt-sm-on-xl pf-u-pb-lg-on-xl pf-u-px-md pf-u-pb-md\"\n      }\n    >\n      <Grid hasGutter>\n        <GridItem>{metricsLagAlert}</GridItem>\n        <GridItem sm={4}>{topicsKpi}</GridItem>\n        <GridItem sm={4}>{topicPartitionsKpi}</GridItem>\n        <GridItem sm={4}>{consumerGroupKpi}</GridItem>\n        <GridItem lg={6}>{diskSpaceMetrics}</GridItem>\n        <GridItem lg={6}>{topicMetrics}</GridItem>\n      </Grid>\n    </PageSection>\n  );\n};\n","import { CardBody, Bullseye, Spinner } from \"@patternfly/react-core\";\nimport type { FunctionComponent } from \"react\";\n\nexport const CardBodyLoading: FunctionComponent = () => (\n  <CardBody>\n    <Bullseye>\n      <Spinner isSVG data-chromatic=\"ignore\" />\n    </Bullseye>\n  </CardBody>\n);\n","import { DurationOptions } from \"./types\";\n\nexport const timeIntervalsMapping = {\n  [DurationOptions.Last5minutes]: {\n    interval: 1 * 60,\n    ticks: 6,\n    showDate: false,\n  },\n  [DurationOptions.Last15minutes]: {\n    interval: 3 * 60,\n    ticks: 6,\n    showDate: false,\n  },\n  [DurationOptions.Last30minutes]: {\n    interval: 5 * 60,\n    ticks: 7,\n    showDate: false,\n  },\n  [DurationOptions.Last1hour]: { interval: 10 * 60, ticks: 6, showDate: false },\n  [DurationOptions.Last3hours]: {\n    interval: 30 * 60,\n    ticks: 7,\n    showDate: false,\n  },\n  [DurationOptions.Last6hours]: {\n    interval: 1 * 60 * 60,\n    ticks: 7,\n    showDate: false,\n  },\n  [DurationOptions.Last12hours]: {\n    interval: 2 * 60 * 60,\n    ticks: 7,\n    showDate: false,\n  },\n  [DurationOptions.Last24hours]: {\n    interval: 4 * 60 * 60,\n    ticks: 7,\n    showDate: true,\n  },\n  [DurationOptions.Last2days]: {\n    interval: 8 * 60 * 60,\n    ticks: 7,\n    showDate: true,\n  },\n  [DurationOptions.Last7days]: {\n    interval: 24 * 60 * 60,\n    ticks: 8,\n    showDate: true,\n  },\n} as const;\n\nexport const chartHeight = 350;\nexport const chartPadding = {\n  bottom: 110, // Adjusted to accomodate legend\n  left: 120,\n  right: 40,\n  top: 10,\n};\n","import { Flex, FlexItem, Skeleton } from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { chartHeight, chartPadding } from \"../consts\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const ChartSkeletonLoader: VoidFunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <Flex direction={{ default: \"column\" }} data-chromatic=\"ignore\">\n      <FlexItem>\n        <Skeleton\n          height={`${chartHeight - chartPadding.bottom}px`}\n          screenreaderText={t(\"common:skeleton_loader_screenreader_text\")}\n        />\n      </FlexItem>\n      <FlexItem>\n        <Skeleton height={`${chartPadding.bottom / 2 - 12.5}px`} width=\"20%\" />\n      </FlexItem>\n      <FlexItem>\n        <Skeleton height={`${chartPadding.bottom / 2 - 12.5}px`} width=\"40%\" />\n      </FlexItem>\n    </Flex>\n  );\n};\n","import type { RefObject } from \"react\";\nimport { useEffect, useLayoutEffect, useRef, useState } from \"react\";\n\nexport function useChartWidth(): [RefObject<HTMLDivElement>, number] {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [width, setWidth] = useState<number>(0);\n\n  const handleResize = () =>\n    containerRef.current && setWidth(containerRef.current.clientWidth);\n\n  useLayoutEffect(() => {\n    handleResize();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n  return [containerRef, width];\n}\n","import byteSize from \"byte-size\";\nimport { fromUnixTime, sub } from \"date-fns\";\nimport { formatInTimeZone } from \"date-fns-tz\";\nimport { timeIntervalsMapping } from \"../consts\";\nimport type { DurationOptions } from \"../types\";\n\nexport function formatBytes(bytes: number): string {\n  return byteSize(bytes, { units: \"iec\" }).toString();\n}\n\nexport const shouldShowDate = (timeDuration: DurationOptions): boolean => {\n  return timeIntervalsMapping[timeDuration].showDate;\n};\n\nexport const dateToChartValue = (\n  timestamp: number,\n  { showDate }: { showDate: boolean } = { showDate: false }\n): string => {\n  const date = fromUnixTime(timestamp / 1000);\n  return formatInTimeZone(date, \"utc\", showDate ? \"HH:mm'\\n'MMM dd\" : \"HH:mm\");\n};\n\nexport function timestampsToTicks(\n  timestamps: string[],\n  duration: DurationOptions\n): number[] {\n  const allTimestamps = [...timestamps];\n  allTimestamps.sort();\n  const mostRecentTs =\n    parseInt(allTimestamps[allTimestamps.length - 1]) || Date.now();\n  return new Array(\n    Math.max(timeIntervalsMapping[duration].ticks, allTimestamps.length)\n  )\n    .fill(mostRecentTs)\n    .map((d: number, index) =>\n      sub(new Date(d), {\n        seconds: timeIntervalsMapping[duration].interval * index,\n      }).getTime()\n    );\n}\n","import type { ChartVoronoiContainerProps } from \"@patternfly/react-charts\";\nimport {\n  Chart,\n  ChartArea,\n  ChartAxis,\n  ChartGroup,\n  ChartLegend,\n  ChartThemeColor,\n  ChartThreshold,\n  ChartVoronoiContainer,\n} from \"@patternfly/react-charts\";\nimport {\n  chart_color_black_500,\n  chart_color_blue_300,\n} from \"@patternfly/react-tokens\";\nimport type { ReactElement, VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { chartHeight, chartPadding } from \"../consts\";\nimport type { DurationOptions, TimeSeriesMetrics } from \"../types\";\nimport { ChartSkeletonLoader } from \"./ChartSkeletonLoader\";\nimport { useChartWidth } from \"./useChartWidth\";\nimport { dateToChartValue, shouldShowDate, timestampsToTicks } from \"./utils\";\n\ntype ChartData = {\n  areaColor: string;\n  softLimitColor: string;\n  area: BrokerChartData[];\n  softLimit: BrokerChartData[];\n};\n\ntype BrokerChartData = {\n  name: string;\n  x: number;\n  y: number;\n};\n\ntype LegendData = {\n  name: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n};\n\ntype ChartLinearWithOptionalLimitProps = {\n  metrics: TimeSeriesMetrics;\n  duration: DurationOptions;\n  chartName: string;\n  xLabel?: string;\n  yLabel?: string;\n  usageLimit?: number;\n  formatValue?: (d: number) => string;\n  isLoading: boolean;\n  emptyState: ReactElement;\n};\n\nexport const ChartLinearWithOptionalLimit: VoidFunctionComponent<\n  ChartLinearWithOptionalLimitProps\n> = ({\n  metrics,\n  duration,\n  chartName,\n  xLabel,\n  yLabel,\n  usageLimit,\n  formatValue = (d) => `${d}`,\n  isLoading,\n  emptyState,\n}) => {\n  const { t } = useTranslation();\n  const [containerRef, width] = useChartWidth();\n\n  const itemsPerRow = width && width > 650 ? 6 : 3;\n\n  const { chartData, legendData, tickValues } = getChartData(\n    metrics,\n    duration,\n    chartName,\n    t(\"metrics:limit\"),\n    usageLimit\n  );\n\n  const hasMetrics = Object.keys(metrics).length > 0;\n  const showDate = shouldShowDate(duration);\n\n  switch (true) {\n    case isLoading:\n      return <ChartSkeletonLoader />;\n    case !hasMetrics:\n      return emptyState;\n    default: {\n      const labels: ChartVoronoiContainerProps[\"labels\"] = ({ datum }) =>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/restrict-template-expressions,@typescript-eslint/no-unsafe-argument\n        `${datum.name}: ${formatValue(datum.y)}`;\n      return (\n        <div ref={containerRef}>\n          <Chart\n            ariaTitle={chartName}\n            containerComponent={\n              <ChartVoronoiContainer labels={labels} constrainToVisibleArea />\n            }\n            legendPosition=\"bottom-left\"\n            legendComponent={\n              <ChartLegend\n                orientation={\"horizontal\"}\n                data={legendData}\n                itemsPerRow={itemsPerRow}\n              />\n            }\n            height={chartHeight}\n            padding={chartPadding}\n            themeColor={ChartThemeColor.multiUnordered}\n            width={width}\n            legendAllowWrap={true}\n          >\n            <ChartAxis\n              label={\"\\n\" + (xLabel || t(\"metrics:axis-label-time\") || \"\")}\n              tickValues={tickValues}\n              tickFormat={(d: number) =>\n                dateToChartValue(d, {\n                  showDate,\n                })\n              }\n            />\n            <ChartAxis\n              label={\"\\n\\n\\n\\n\\n\" + (yLabel || chartName)}\n              dependentAxis\n              tickFormat={formatValue}\n            />\n            <ChartGroup>\n              {chartData.map((value, index) => (\n                <ChartArea\n                  key={`chart-area-${index}`}\n                  data={value.area}\n                  style={{\n                    data: {\n                      // TODO: check if this is needed\n                      // stroke: value.color,\n                    },\n                  }}\n                />\n              ))}\n            </ChartGroup>\n            <ChartThreshold\n              key={`chart-softlimit`}\n              data={chartData[0].softLimit}\n              style={{\n                data: {\n                  stroke: chartData[0].softLimitColor,\n                },\n              }}\n            />\n          </Chart>\n        </div>\n      );\n    }\n  }\n};\n\nfunction getChartData(\n  metrics: TimeSeriesMetrics,\n  duration: number,\n  lineLabel: string,\n  limitLabel: string,\n  usageLimit?: number\n): {\n  legendData: Array<LegendData>;\n  chartData: Array<ChartData>;\n  tickValues: number[];\n} {\n  const legendData = [\n    usageLimit\n      ? {\n          name: limitLabel,\n          symbol: { fill: chart_color_black_500.value, type: \"threshold\" },\n        }\n      : undefined,\n    { name: lineLabel, symbol: { fill: chart_color_blue_300.value } },\n  ].filter((d) => !!d) as Array<LegendData>;\n\n  const areaColor = chart_color_blue_300.value;\n  const softLimitColor = chart_color_black_500.value;\n  const chartData: Array<ChartData> = [];\n  const area: Array<BrokerChartData> = [];\n  const softLimit: Array<BrokerChartData> = [];\n\n  Object.entries(metrics).map(([timestamp, bytes]) => {\n    area.push({ name: lineLabel, x: parseInt(timestamp, 10), y: bytes });\n  });\n  chartData.push({ areaColor, softLimitColor, area, softLimit });\n\n  const tickValues = timestampsToTicks(Object.keys(metrics), duration);\n\n  if (usageLimit) {\n    tickValues.forEach((timestamp) =>\n      softLimit.push({\n        name: limitLabel,\n        x: timestamp,\n        y: usageLimit,\n      })\n    );\n  }\n\n  return {\n    legendData,\n    chartData,\n    tickValues,\n  };\n}\n","import type { ChartVoronoiContainerProps } from \"@patternfly/react-charts\";\nimport {\n  Chart,\n  ChartArea,\n  ChartAxis,\n  ChartGroup,\n  ChartLegend,\n  ChartThemeColor,\n  ChartVoronoiContainer,\n} from \"@patternfly/react-charts\";\nimport {\n  chart_color_blue_300,\n  chart_color_cyan_300,\n} from \"@patternfly/react-tokens\";\nimport type { FunctionComponent, ReactElement } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { chartHeight, chartPadding } from \"../consts\";\nimport type { PartitionBytesMetric } from \"../types\";\nimport { ChartSkeletonLoader } from \"./ChartSkeletonLoader\";\nimport { useChartWidth } from \"./useChartWidth\";\nimport {\n  dateToChartValue,\n  formatBytes,\n  shouldShowDate,\n  timestampsToTicks,\n} from \"./utils\";\n\nconst colors = [chart_color_cyan_300.value, chart_color_blue_300.value];\n\ntype ChartData = {\n  color: string;\n  area: PartitionChartData[];\n};\n\ntype PartitionChartData = {\n  name: string;\n  x: number;\n  y: number;\n};\n\ntype LegendData = {\n  name: string;\n};\n\nexport type ChartLogSizePerPartitionProps = {\n  partitions: PartitionBytesMetric;\n  topic: string | undefined;\n  duration: number;\n  isLoading: boolean;\n  emptyState: ReactElement;\n};\nexport const ChartLogSizePerPartition: FunctionComponent<\n  ChartLogSizePerPartitionProps\n> = ({ partitions, topic, duration, isLoading, emptyState }) => {\n  const { t } = useTranslation();\n  const [containerRef, width] = useChartWidth();\n\n  const itemsPerRow = width && width > 650 ? 6 : 3;\n\n  const { chartData, legendData, tickValues } = getChartData(\n    partitions,\n    topic,\n    duration\n  );\n\n  const hasMetrics = Object.keys(partitions).length > 0;\n\n  const showDate = shouldShowDate(duration);\n\n  return (\n    <div ref={containerRef}>\n      {(() => {\n        switch (true) {\n          case isLoading:\n            return <ChartSkeletonLoader />;\n          case !hasMetrics:\n            return emptyState;\n          default: {\n            const labels: ChartVoronoiContainerProps[\"labels\"] = ({ datum }) =>\n              // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/restrict-template-expressions,@typescript-eslint/no-unsafe-argument\n              `${datum.name}: ${formatBytes(datum.y)}`;\n\n            return (\n              <Chart\n                ariaTitle={t(\"metrics:log_size_per_partition\")}\n                containerComponent={\n                  <ChartVoronoiContainer\n                    labels={labels}\n                    constrainToVisibleArea\n                  />\n                }\n                legendPosition=\"bottom-left\"\n                legendComponent={\n                  <ChartLegend data={legendData} itemsPerRow={itemsPerRow} />\n                }\n                height={chartHeight}\n                padding={chartPadding}\n                themeColor={ChartThemeColor.multiOrdered}\n                width={width}\n                legendAllowWrap={true}\n              >\n                <ChartAxis\n                  label={\"\\n\" + t(\"metrics:axis-label-time\")}\n                  tickValues={tickValues}\n                  tickFormat={(d: number) =>\n                    dateToChartValue(d, {\n                      showDate,\n                    })\n                  }\n                />\n                <ChartAxis\n                  label={\"\\n\\n\\n\\n\\n\" + t(\"metrics:axis-label-bytes\")}\n                  dependentAxis\n                  tickFormat={formatBytes}\n                />\n                <ChartGroup>\n                  {chartData.map((value, index) => (\n                    <ChartArea key={`chart-area-${index}`} data={value.area} />\n                  ))}\n                </ChartGroup>\n              </Chart>\n            );\n          }\n        }\n      })()}\n    </div>\n  );\n};\n\nexport function getChartData(\n  partitions: PartitionBytesMetric,\n  topic: string | undefined,\n  duration: number\n): {\n  legendData: Array<LegendData>;\n  chartData: Array<ChartData>;\n  tickValues: number[];\n} {\n  const legendData: Array<LegendData> = [];\n  const chartData: Array<ChartData> = [];\n  Object.entries(partitions).map(([partition, dataMap], index) => {\n    const name = topic ? `${topic}: ${partition}` : partition;\n    const color = colors[index];\n    legendData.push({\n      name,\n    });\n    const area: Array<PartitionChartData> = [];\n\n    Object.entries(dataMap).map(([timestamp, value]) => {\n      area.push({ name, x: parseInt(timestamp, 10), y: value });\n    });\n    chartData.push({ color, area });\n  });\n\n  const allTimestamps = Array.from(\n    new Set(Object.values(partitions).flatMap((m) => Object.keys(m)))\n  );\n  const tickValues = timestampsToTicks(allTimestamps, duration);\n\n  return {\n    legendData,\n    chartData,\n    tickValues,\n  };\n}\n","import { Popover } from \"@patternfly/react-core\";\nimport { OutlinedQuestionCircleIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\ntype ChartPopoverProps = {\n  title: string;\n  description: string;\n};\n\nexport const ChartPopover: VoidFunctionComponent<ChartPopoverProps> = ({\n  title,\n  description,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <Popover\n      aria-label={title}\n      headerContent={<div>{title}</div>}\n      bodyContent={<div>{description}</div>}\n    >\n      <OutlinedQuestionCircleIcon\n        aria-label={t(\"metrics:chart-popover-icon-screenreader-text\", {\n          title,\n        })}\n      />\n    </Popover>\n  );\n};\n","import type { ChartVoronoiContainerProps } from \"@patternfly/react-charts\";\nimport {\n  Chart,\n  ChartAxis,\n  ChartGroup,\n  ChartLegend,\n  ChartLine,\n  ChartThemeColor,\n  ChartVoronoiContainer,\n} from \"@patternfly/react-charts\";\nimport {\n  chart_color_blue_300,\n  chart_color_green_300,\n} from \"@patternfly/react-tokens\";\nimport type { FunctionComponent, ReactElement } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { chartHeight, chartPadding, timeIntervalsMapping } from \"../consts\";\nimport type { TimeSeriesMetrics } from \"../types\";\nimport { ChartSkeletonLoader } from \"./ChartSkeletonLoader\";\nimport { useChartWidth } from \"./useChartWidth\";\nimport {\n  dateToChartValue,\n  formatBytes,\n  shouldShowDate,\n  timestampsToTicks,\n} from \"./utils\";\n\ntype ChartData = {\n  color: string;\n  line: TopicChartData[];\n};\n\ntype TopicChartData = {\n  name: string;\n  x: number;\n  y: number;\n};\n\ntype LegendData = {\n  name: string;\n  symbol: {\n    fill: string;\n    type?: string;\n  };\n};\n\ntype ChartTotalBytesProps = {\n  incomingTopicsData: TimeSeriesMetrics;\n  outgoingTopicsData: TimeSeriesMetrics;\n  selectedTopic: string | undefined;\n  duration: number;\n  isLoading: boolean;\n  emptyState: ReactElement;\n};\nexport const ChartTotalBytes: FunctionComponent<ChartTotalBytesProps> = ({\n  incomingTopicsData,\n  outgoingTopicsData,\n  selectedTopic,\n  duration,\n  isLoading,\n  emptyState,\n}) => {\n  const { t } = useTranslation();\n  const [containerRef, width] = useChartWidth();\n\n  const itemsPerRow = width && width > 650 ? 6 : 3;\n\n  const { chartData, legendData, tickValues } = getBytesChartData(\n    incomingTopicsData,\n    outgoingTopicsData,\n    duration,\n    selectedTopic\n      ? t(\"metrics:incoming_bytes\", {\n          topic: selectedTopic,\n        })\n      : t(\"metrics:incoming_bytes_all_topics\"),\n    selectedTopic\n      ? t(\"metrics:outgoing_bytes\", {\n          topic: selectedTopic,\n        })\n      : t(\"metrics:outgoing_bytes_all_topics\")\n  );\n\n  const hasMetrics =\n    Object.keys(incomingTopicsData).length > 0 ||\n    Object.keys(outgoingTopicsData).length > 0;\n\n  const showDate = shouldShowDate(duration);\n\n  switch (true) {\n    case isLoading:\n      return <ChartSkeletonLoader />;\n    case !hasMetrics:\n      return emptyState;\n    default: {\n      const labels: ChartVoronoiContainerProps[\"labels\"] =\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/restrict-template-expressions,@typescript-eslint/no-unsafe-argument\n        ({ datum }) => `${datum.name}: ${formatBytes(datum.y)}`;\n      return (\n        <div ref={containerRef}>\n          <Chart\n            ariaTitle={t(\"metrics:total_bytes\")}\n            containerComponent={\n              <ChartVoronoiContainer labels={labels} constrainToVisibleArea />\n            }\n            legendAllowWrap={true}\n            legendPosition=\"bottom-left\"\n            legendComponent={\n              <ChartLegend data={legendData} itemsPerRow={itemsPerRow} />\n            }\n            height={chartHeight}\n            padding={chartPadding}\n            themeColor={ChartThemeColor.multiUnordered}\n            width={width}\n          >\n            <ChartAxis\n              label={\"\\n\" + t(\"metrics:axis-label-time\")}\n              tickValues={tickValues}\n              tickCount={timeIntervalsMapping[duration].ticks}\n              tickFormat={(d: number) =>\n                dateToChartValue(d, {\n                  showDate,\n                })\n              }\n            />\n            <ChartAxis\n              label={\"\\n\\n\\n\\n\\n\" + t(\"metrics:axis-label-bytes\")}\n              dependentAxis\n              tickFormat={formatBytes}\n            />\n            <ChartGroup>\n              {chartData.map((value, index) => (\n                <ChartLine\n                  key={`chart-line-${index}`}\n                  data={value.line}\n                  style={{\n                    data: {\n                      stroke: value.color,\n                    },\n                  }}\n                />\n              ))}\n            </ChartGroup>\n          </Chart>\n        </div>\n      );\n    }\n  }\n};\n\nexport function getBytesChartData(\n  incomingTopic: TimeSeriesMetrics,\n  outgoingTopic: TimeSeriesMetrics,\n  duration: number,\n  incomingTopicName: string,\n  outgoingTopicName: string\n): {\n  legendData: Array<LegendData>;\n  chartData: Array<ChartData>;\n  tickValues: number[];\n} {\n  const legendData: Array<LegendData> = [];\n  const chartData: Array<ChartData> = [];\n\n  const incomingLine = metricsToLine(incomingTopic, incomingTopicName);\n  if (incomingLine.length > 0) {\n    const color = chart_color_blue_300.value;\n    chartData.push({ color, line: incomingLine });\n    legendData.push({\n      name: incomingTopicName,\n      symbol: {\n        fill: color,\n      },\n    });\n  }\n\n  const outgoingLine = metricsToLine(outgoingTopic, outgoingTopicName);\n  if (outgoingLine.length > 0) {\n    const color = chart_color_green_300.value;\n    chartData.push({ color, line: outgoingLine });\n    legendData.push({\n      name: outgoingTopicName,\n      symbol: {\n        fill: color,\n      },\n    });\n  }\n  const allTimestamps = Array.from(\n    new Set([...Object.keys(incomingTopic), ...Object.keys(outgoingTopic)])\n  );\n  const tickValues = timestampsToTicks(allTimestamps, duration);\n\n  return {\n    legendData,\n    chartData,\n    tickValues,\n  };\n}\n\nexport function metricsToLine(\n  metrics: TimeSeriesMetrics,\n  name: string\n): Array<TopicChartData> {\n  const line: Array<TopicChartData> = [];\n\n  Object.entries(metrics).map(([timestamp, bytes]) => {\n    line.push({ name, x: parseInt(timestamp, 10), y: bytes });\n  });\n  return line;\n}\n","import {\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { ExclamationTriangleIcon } from \"@patternfly/react-icons\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const EmptyStateNoMetricsData: FunctionComponent = () => {\n  const { t } = useTranslation([\"metrics\"]);\n  return (\n    <EmptyState variant={EmptyStateVariant.xs}>\n      <EmptyStateIcon\n        icon={ExclamationTriangleIcon}\n        color=\"var(--pf-global--warning-color--100)\"\n      />\n      <Title headingLevel=\"h3\" size=\"md\">\n        {t(\"metric_not_available\")}\n      </Title>\n    </EmptyState>\n  );\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { SearchIcon } from \"@patternfly/react-icons\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const EmptyStateNoMetricsDataForSelection: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState variant={EmptyStateVariant.xs}>\n      <EmptyStateIcon icon={SearchIcon} />\n      <Title headingLevel=\"h3\" size=\"lg\">\n        {t(\"metrics:empty_state_no_metrics_data_title\")}\n      </Title>\n      <EmptyStateBody>\n        {t(\"metrics:empty_state_no_metrics_data_body\")}\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { WrenchIcon } from \"@patternfly/react-icons\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\ntype EmptyStateNoTopicsProps = {\n  onCreateTopic?: () => void;\n};\nexport const EmptyStateNoTopics: FunctionComponent<EmptyStateNoTopicsProps> = ({\n  onCreateTopic,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState variant={EmptyStateVariant.xs}>\n      <EmptyStateIcon icon={WrenchIcon} />\n      <Title headingLevel=\"h3\" size=\"lg\">\n        {t(\"metrics:empty_state_no_topics_title\")}\n      </Title>\n      <EmptyStateBody>{t(\"metrics:empty_state_no_topics_body\")}</EmptyStateBody>\n      {onCreateTopic && (\n        <Button\n          ouiaId=\"button-create\"\n          variant=\"primary\"\n          onClick={onCreateTopic}\n        >\n          {t(\"metrics:empty_state_no_topics_create_topic\")}\n        </Button>\n      )}\n    </EmptyState>\n  );\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { FilterIcon } from \"@patternfly/react-icons\";\nimport { Trans, useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\n\nexport const EmptyStateNoTopicSelected: VoidFunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState variant={EmptyStateVariant.xs}>\n      <EmptyStateIcon icon={FilterIcon} />\n      <Title headingLevel=\"h3\" size=\"lg\">\n        {t(\"metrics:empty_state_no_filter_title\")}\n      </Title>\n      <EmptyStateBody>\n        <Trans\n          ns={\"metrics\"}\n          i18nKey={\"empty_state_no_filter_body\"}\n          components={{ bold: <strong /> }}\n        />\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { useState } from \"react\";\nimport type { SelectProps } from \"@patternfly/react-core\";\nimport {\n  ToolbarItem,\n  Select,\n  SelectVariant,\n  SelectGroup,\n  SelectOption,\n} from \"@patternfly/react-core\";\nimport { DurationOptions } from \"../types\";\n\nexport const DurationOptionsMap = {\n  [DurationOptions.Last5minutes]: \"Last 5 minutes\",\n  [DurationOptions.Last15minutes]: \"Last 15 minutes\",\n  [DurationOptions.Last30minutes]: \"Last 30 minutes\",\n  [DurationOptions.Last1hour]: \"Last 1 hour\",\n  [DurationOptions.Last3hours]: \"Last 3 hours\",\n  [DurationOptions.Last6hours]: \"Last 6 hours\",\n  [DurationOptions.Last12hours]: \"Last 12 hours\",\n  [DurationOptions.Last24hours]: \"Last 24 hours\",\n  [DurationOptions.Last2days]: \"Last 2 days\",\n  [DurationOptions.Last7days]: \"Last 7 days\",\n} as const;\n\ntype FilterByTimeProps = {\n  duration: DurationOptions;\n  onDurationChange: (value: DurationOptions) => void;\n  keyText: string;\n  ariaLabel: string;\n  disableToolbar: boolean;\n};\n\nexport const FilterByTime: VoidFunctionComponent<FilterByTimeProps> = ({\n  duration,\n  keyText,\n  ariaLabel,\n  disableToolbar,\n  onDurationChange,\n}) => {\n  const [isTimeSelectOpen, setIsTimeSelectOpen] = useState<boolean>(false);\n\n  const onTimeToggle = (isTimeSelectOpen: boolean) => {\n    setIsTimeSelectOpen(isTimeSelectOpen);\n  };\n\n  const onTimeSelect: SelectProps[\"onSelect\"] = (_, selection) => {\n    const mapping = Object.entries(DurationOptionsMap).find(\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      ([_, value]) => value === selection\n    );\n    if (mapping) {\n      onDurationChange(parseInt(mapping[0], 10) as DurationOptions);\n    }\n    setIsTimeSelectOpen(false);\n  };\n\n  const timeOptions = (keyText: string) => [\n    <SelectGroup label=\"Relative time ranges\" key={`${keyText}-group`}>\n      {Object.values(DurationOptionsMap).map((label, idx) => (\n        <SelectOption key={`${keyText}-${idx}`} value={label} />\n      ))}\n    </SelectGroup>,\n  ];\n  const ariaId = `filter-by-time-${Date.now()}`;\n  return (\n    <ToolbarItem>\n      <label hidden id={ariaId}>\n        {ariaLabel}\n      </label>\n      <Select\n        variant={SelectVariant.single}\n        aria-labelledby={ariaId}\n        onToggle={onTimeToggle}\n        onSelect={onTimeSelect}\n        selections={DurationOptionsMap[duration]}\n        isOpen={isTimeSelectOpen}\n        isDisabled={disableToolbar}\n      >\n        {timeOptions(keyText)}\n      </Select>\n    </ToolbarItem>\n  );\n};\n","import type { SelectProps } from \"@patternfly/react-core\";\nimport {\n  Select,\n  SelectGroup,\n  SelectOption,\n  SelectVariant,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { FilterIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport \"./FilterByTopic.css\";\n\nconst widths = {\n  default: \"150px\",\n  sm: \"150px\",\n  md: \"150px\",\n  lg: \"200px\",\n  xl: \"200px\",\n  \"2xl\": \"200px\",\n};\n\ntype FilterByTopicProps = {\n  selectedTopic: string | undefined;\n  topicList: string[];\n  disableToolbar: boolean;\n  ariaLabel: string;\n  onSetSelectedTopic: (value: string | undefined) => void;\n};\n\nexport const FilterByTopic: VoidFunctionComponent<FilterByTopicProps> = ({\n  selectedTopic,\n  topicList = [],\n  disableToolbar,\n  ariaLabel,\n  onSetSelectedTopic,\n}) => {\n  const { t } = useTranslation();\n  const [isTopicSelectOpen, setIsTopicSelectOpen] = useState<boolean>(false);\n  const [selectKey, setSelectKey] = useState(Math.random());\n\n  useEffect(() => setSelectKey(Math.random()), [topicList]);\n\n  const allTopicsLabel = t(\"metrics:all_topics\");\n\n  const onTopicToggle = (isTopicSelectOpen: boolean) => {\n    setIsTopicSelectOpen(isTopicSelectOpen);\n  };\n\n  const onTopicSelect: SelectProps[\"onSelect\"] = (_, selection) => {\n    selection !== allTopicsLabel\n      ? onSetSelectedTopic(selection as string)\n      : onSetSelectedTopic(undefined);\n    setIsTopicSelectOpen(false);\n  };\n\n  const onTopicFilter = (_: unknown, textInput: string) => {\n    const filteredTopics =\n      topicList.filter((topic) => topic.indexOf(textInput) != -1) || [];\n    return topicOptions(filteredTopics);\n  };\n\n  const topicOptions = (topicList: string[]) => [\n    <SelectOption key={\"topic-filter-0\"} value={allTopicsLabel} />,\n    <SelectGroup label=\"Filter by topic\" key=\"topic-filter-group\">\n      {topicList.map((topic, index) => (\n        <SelectOption\n          key={`topic-filter-${index + 1}`}\n          value={topic}\n          title={topic}\n        />\n      ))}\n    </SelectGroup>,\n  ];\n\n  const isDisabled = disableToolbar || topicList.length === 0;\n  const ariaId = `filter-by-topic-${Date.now()}`;\n\n  return (\n    <ToolbarItem widths={widths}>\n      <label hidden id={ariaId}>\n        {ariaLabel}\n      </label>\n      <Select\n        key={selectKey}\n        variant={SelectVariant.single}\n        onToggle={onTopicToggle}\n        onSelect={onTopicSelect}\n        selections={selectedTopic || allTopicsLabel}\n        isOpen={isTopicSelectOpen}\n        placeholderText={\n          <>\n            <FilterIcon /> {allTopicsLabel}\n          </>\n        }\n        aria-labelledby={ariaId}\n        onFilter={onTopicFilter}\n        isGrouped\n        hasInlineFilter\n        isDisabled={isDisabled}\n        position=\"left\"\n        className={\"appserv-metrics-filterbytopic\"}\n      >\n        {topicOptions(topicList)}\n      </Select>\n    </ToolbarItem>\n  );\n};\n","import { ToolbarItem } from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { FormatDate, RefreshButton } from \"@rhoas/app-services-ui-components\";\n\nexport type ToolbarRefreshProps = {\n  isRefreshing: boolean;\n  lastUpdated: Date | undefined;\n  ariaLabel: string;\n  onRefresh: () => void;\n};\n\nexport const ToolbarRefresh: VoidFunctionComponent<ToolbarRefreshProps> = ({\n  isRefreshing,\n  lastUpdated = new Date(),\n  ariaLabel,\n  onRefresh,\n}) => {\n  const { t } = useTranslation([\"metrics\"]);\n\n  return (\n    <>\n      <ToolbarItem>\n        <RefreshButton\n          ariaLabel={ariaLabel}\n          onClick={onRefresh}\n          isRefreshing={isRefreshing}\n        />\n      </ToolbarItem>\n      <ToolbarItem\n        alignment={{ default: \"alignRight\" }}\n        style={{ color: \"var(--pf-global--Color--200)\" }}\n      >\n        <div className=\"pf-u-font-size-xs\">\n          {isRefreshing ? (\n            t(\"metrics:refreshing\")\n          ) : (\n            <>\n              {t(\"metrics:last-refresh\")}\n              <br />\n              <FormatDate date={lastUpdated} format=\"distanceToNow\" />\n              {t(\"metrics:last-refresh-distance\")}\n            </>\n          )}\n        </div>\n      </ToolbarItem>\n    </>\n  );\n};\n","import {\n  CardHeader,\n  CardTitle,\n  Divider,\n  Toolbar,\n  ToolbarContent,\n} from \"@patternfly/react-core\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { DurationOptions } from \"../types\";\nimport { FilterByTime } from \"./FilterByTime\";\nimport { FilterByTopic } from \"./FilterByTopic\";\nimport type { ToolbarRefreshProps } from \"./ToolbarRefresh\";\nimport { ToolbarRefresh } from \"./ToolbarRefresh\";\n\ntype ToolbarTopicsMetricsProps = {\n  title: string;\n  selectedTopic: string | undefined;\n  topicList: string[];\n  duration: DurationOptions;\n  isDisabled: boolean;\n  onSetTimeDuration: (value: DurationOptions) => void;\n  onSetSelectedTopic: (value: string | undefined) => void;\n} & Omit<ToolbarRefreshProps, \"ariaLabel\">;\nexport const ToolbarTopicsMetrics: FunctionComponent<\n  ToolbarTopicsMetricsProps\n> = ({\n  title,\n  selectedTopic,\n  topicList,\n  duration,\n  isDisabled,\n  isRefreshing,\n  lastUpdated,\n  onSetTimeDuration,\n  onRefresh,\n  onSetSelectedTopic,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <CardHeader>\n        <CardTitle component=\"h2\">{title}</CardTitle>\n      </CardHeader>\n      <Divider />\n      <Toolbar>\n        <ToolbarContent>\n          <FilterByTopic\n            ariaLabel={t(\"metrics:topics_filter_by_topic\")}\n            selectedTopic={selectedTopic}\n            onSetSelectedTopic={onSetSelectedTopic}\n            topicList={topicList}\n            disableToolbar={isDisabled}\n          />\n          <FilterByTime\n            ariaLabel={t(\"metrics:topics_filter_by_time\")}\n            duration={duration}\n            onDurationChange={onSetTimeDuration}\n            disableToolbar={isDisabled}\n            keyText={\"topic-metrics-time-filter\"}\n          />\n          <ToolbarRefresh\n            isRefreshing={isRefreshing}\n            lastUpdated={lastUpdated}\n            onRefresh={onRefresh}\n            ariaLabel={t(\"metrics:topics_refresh\")}\n          />\n        </ToolbarContent>\n      </Toolbar>\n      <Divider />\n    </>\n  );\n};\n","import { Card, CardBody, CardTitle, Divider } from \"@patternfly/react-core\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type {\n  DurationOptions,\n  PartitionBytesMetric,\n  TimeSeriesMetrics,\n} from \"../types\";\nimport { CardBodyLoading } from \"./CardBodyLoading\";\nimport { ChartLinearWithOptionalLimit } from \"./ChartLinearWithOptionalLimit\";\nimport { ChartLogSizePerPartition } from \"./ChartLogSizePerPartition\";\nimport { ChartPopover } from \"./ChartPopover\";\nimport { ChartTotalBytes } from \"./ChartTotalBytes\";\nimport { EmptyStateNoMetricsData } from \"./EmptyStateNoMetricsData\";\nimport { EmptyStateNoMetricsDataForSelection } from \"./EmptyStateNoMetricsDataForSelection\";\nimport { EmptyStateNoTopics } from \"./EmptyStateNoTopics\";\nimport { EmptyStateNoTopicSelected } from \"./EmptyStateNoTopicSelected\";\nimport type { ToolbarRefreshProps } from \"./ToolbarRefresh\";\nimport { ToolbarTopicsMetrics } from \"./ToolbarTopicsMetrics\";\n\ntype CardTopicsMetricsProps = {\n  topics: string[];\n  incomingTopicsData: TimeSeriesMetrics;\n  outgoingTopicsData: TimeSeriesMetrics;\n  partitions: PartitionBytesMetric;\n  incomingMessageRate: TimeSeriesMetrics;\n  duration: DurationOptions;\n  backendUnavailable: boolean;\n  isInitialLoading: boolean;\n  isLoading: boolean;\n  isJustCreated: boolean;\n  selectedTopic: string | undefined;\n  onCreateTopic: () => void;\n  onSelectedTopic: (topic: string | undefined) => void;\n  onDurationChange: (duration: DurationOptions) => void;\n} & Omit<ToolbarRefreshProps, \"ariaLabel\">;\n\nexport const CardTopicsMetrics: FunctionComponent<CardTopicsMetricsProps> = ({\n  topics,\n  incomingTopicsData,\n  outgoingTopicsData,\n  incomingMessageRate,\n  selectedTopic,\n  duration,\n  partitions,\n  backendUnavailable,\n  isInitialLoading,\n  isLoading,\n  isRefreshing,\n  isJustCreated,\n  lastUpdated,\n  onCreateTopic,\n  onRefresh,\n  onSelectedTopic,\n  onDurationChange,\n}) => {\n  const { t } = useTranslation();\n  const noTopics = topics.length === 0;\n  const selectedTopicNotInList =\n    selectedTopic !== undefined &&\n    topics.find((t) => t === selectedTopic) === undefined;\n  const chartEmptyState = selectedTopicNotInList ? (\n    <EmptyStateNoMetricsDataForSelection />\n  ) : (\n    <EmptyStateNoMetricsData />\n  );\n  return (\n    <Card data-testid={\"metrics-topics\"}>\n      <ToolbarTopicsMetrics\n        title={t(\"metrics:topic_metrics\")}\n        duration={duration}\n        onSetTimeDuration={onDurationChange}\n        isDisabled={\n          backendUnavailable || isJustCreated || noTopics || isLoading\n        }\n        isRefreshing={isRefreshing}\n        selectedTopic={selectedTopic}\n        onSetSelectedTopic={onSelectedTopic}\n        onRefresh={onRefresh}\n        topicList={topics}\n        lastUpdated={lastUpdated}\n      />\n      {(() => {\n        switch (true) {\n          case isInitialLoading:\n            return <CardBodyLoading />;\n\n          case backendUnavailable:\n            return (\n              <CardBody>\n                <EmptyStateNoMetricsData />\n              </CardBody>\n            );\n\n          case isJustCreated && !noTopics:\n            return (\n              <CardBody>\n                <EmptyStateNoTopics />\n              </CardBody>\n            );\n\n          case isJustCreated && noTopics:\n            return (\n              <CardBody>\n                <EmptyStateNoTopics onCreateTopic={onCreateTopic} />\n              </CardBody>\n            );\n\n          case selectedTopic !== undefined:\n            return (\n              <>\n                <TotalBytesTitle />\n                <CardBody>\n                  <ChartTotalBytes\n                    incomingTopicsData={incomingTopicsData}\n                    outgoingTopicsData={outgoingTopicsData}\n                    selectedTopic={selectedTopic}\n                    duration={duration}\n                    isLoading={isLoading}\n                    emptyState={chartEmptyState}\n                  />\n                </CardBody>\n                <Divider />\n                <IncomingMessageRate />\n                <CardBody>\n                  <ChartLinearWithOptionalLimit\n                    chartName={t(\"metrics:topic_incoming_message_rate\")}\n                    yLabel={t(\"metrics:topic_incoming_message_rate_y_axis\")}\n                    metrics={incomingMessageRate}\n                    duration={duration}\n                    isLoading={isLoading}\n                    emptyState={chartEmptyState}\n                  />\n                </CardBody>\n                <Divider />\n                <PartitionSizeTitle />\n                <CardBody>\n                  <ChartLogSizePerPartition\n                    partitions={partitions}\n                    topic={selectedTopic}\n                    duration={duration}\n                    isLoading={isLoading}\n                    emptyState={chartEmptyState}\n                  />\n                </CardBody>\n              </>\n            );\n\n          default:\n            return (\n              <>\n                <TotalBytesTitle />\n                <CardBody>\n                  <ChartTotalBytes\n                    incomingTopicsData={incomingTopicsData}\n                    outgoingTopicsData={outgoingTopicsData}\n                    selectedTopic={selectedTopic}\n                    duration={duration}\n                    isLoading={isLoading}\n                    emptyState={chartEmptyState}\n                  />\n                </CardBody>\n                <Divider />\n                <IncomingMessageRate />\n                <CardBody>\n                  <ChartLinearWithOptionalLimit\n                    chartName={t(\"metrics:topic_incoming_message_rate\")}\n                    yLabel={t(\"metrics:topic_incoming_message_rate_y_axis\")}\n                    metrics={incomingMessageRate}\n                    duration={duration}\n                    isLoading={isLoading}\n                    emptyState={chartEmptyState}\n                  />\n                </CardBody>\n                <Divider />\n                <PartitionSizeTitle />\n                <CardBody>\n                  <EmptyStateNoTopicSelected />\n                </CardBody>\n              </>\n            );\n        }\n      })()}\n    </Card>\n  );\n};\n\nconst TotalBytesTitle: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <CardTitle component=\"h3\">\n      {t(\"metrics:total_bytes\")}{\" \"}\n      <ChartPopover\n        title={t(\"metrics:total_bytes_popover_header\")}\n        description={t(\"metrics:topic_metrics_help_text\")}\n      />\n    </CardTitle>\n  );\n};\n\nconst PartitionSizeTitle: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <CardTitle component=\"h3\">\n      {t(\"metrics:topic_partition_size\")}{\" \"}\n      <ChartPopover\n        title={t(\"metrics:topic_partition_size_popover_header\")}\n        description={t(\"metrics:topic_partition_size_help_text\")}\n      />\n    </CardTitle>\n  );\n};\n\nconst IncomingMessageRate: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <CardTitle component=\"h3\">\n      {t(\"metrics:topic_incoming_message_rate\")}{\" \"}\n      <ChartPopover\n        title={t(\"metrics:topic_incoming_message_rate_popover_header\")}\n        description={t(\"metrics:topic_incoming_message_rate_help_text\")}\n      />\n    </CardTitle>\n  );\n};\n","import type { FunctionComponent } from \"react\";\nimport {\n  CardHeader,\n  CardTitle,\n  Divider,\n  Toolbar,\n  ToolbarContent,\n} from \"@patternfly/react-core\";\nimport { FilterByTime } from \"./FilterByTime\";\nimport type { DurationOptions } from \"../types\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { ToolbarRefreshProps } from \"./ToolbarRefresh\";\nimport { ToolbarRefresh } from \"./ToolbarRefresh\";\n\ntype ToolbarKafkaInstanceMetricProps = {\n  title: string;\n  isDisabled: boolean;\n  duration: DurationOptions;\n  onSetTimeDuration: (value: DurationOptions) => void;\n} & Omit<ToolbarRefreshProps, \"ariaLabel\">;\nexport const ToolbarKafkaInstanceMetric: FunctionComponent<\n  ToolbarKafkaInstanceMetricProps\n> = ({\n  title,\n  isDisabled,\n  isRefreshing,\n  lastUpdated,\n  duration,\n  onSetTimeDuration,\n  onRefresh,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <CardHeader>\n        <CardTitle component=\"h2\">{title}</CardTitle>\n      </CardHeader>\n      <Divider />\n      <Toolbar>\n        <ToolbarContent>\n          <FilterByTime\n            ariaLabel={t(\"metrics:kafka_instance_filter_by_time\")}\n            duration={duration}\n            onDurationChange={onSetTimeDuration}\n            keyText={\"kafka-metrics-time-filter\"}\n            disableToolbar={isDisabled}\n          />\n          <ToolbarRefresh\n            isRefreshing={isRefreshing}\n            lastUpdated={lastUpdated}\n            onRefresh={onRefresh}\n            ariaLabel={t(\"metrics:kafka_instance_refresh\")}\n          />\n        </ToolbarContent>\n      </Toolbar>\n      <Divider />\n    </>\n  );\n};\n","import { Card, CardBody, CardTitle, Divider } from \"@patternfly/react-core\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { DurationOptions, TimeSeriesMetrics } from \"../types\";\nimport { CardBodyLoading } from \"./CardBodyLoading\";\nimport { ChartPopover } from \"./ChartPopover\";\nimport { ChartLinearWithOptionalLimit } from \"./ChartLinearWithOptionalLimit\";\nimport { EmptyStateMetricsUnavailable } from \"./EmptyStateMetricsUnavailable\";\nimport { ToolbarKafkaInstanceMetric } from \"./ToolbarKafkaInstanceMetric\";\nimport { formatBytes } from \"./utils\";\nimport { EmptyStateNoMetricsData } from \"./EmptyStateNoMetricsData\";\nimport type { ToolbarRefreshProps } from \"./ToolbarRefresh\";\n\nexport type CardKafkaInstanceMetricsLimits = {\n  diskSpaceLimit: number;\n  connectionsLimit: number;\n  connectionRateLimit: number;\n};\n\nexport type CardKafkaInstanceMetricsProps = {\n  usedDiskMetrics: TimeSeriesMetrics;\n  clientConnectionsMetrics: TimeSeriesMetrics;\n  connectionAttemptRateMetrics: TimeSeriesMetrics;\n  duration: DurationOptions;\n  lastUpdated: Date | undefined;\n  backendUnavailable: boolean;\n  isInitialLoading: boolean;\n  isLoading: boolean;\n  isJustCreated: boolean;\n  onDurationChange: (duration: DurationOptions) => void;\n} & Omit<ToolbarRefreshProps, \"ariaLabel\"> &\n  CardKafkaInstanceMetricsLimits;\n\ntype ChartTitleProps = {\n  title: string;\n  helperText: string;\n};\n\nexport const CardKafkaInstanceMetrics: FunctionComponent<\n  CardKafkaInstanceMetricsProps\n> = ({\n  usedDiskMetrics,\n  clientConnectionsMetrics,\n  connectionAttemptRateMetrics,\n  duration,\n  lastUpdated,\n  backendUnavailable,\n  isInitialLoading,\n  isLoading,\n  isRefreshing,\n  isJustCreated,\n  diskSpaceLimit,\n  connectionsLimit,\n  connectionRateLimit,\n  onRefresh,\n  onDurationChange,\n}) => {\n  const { t } = useTranslation(\"metrics\");\n\n  return (\n    <Card data-testid={\"metrics-kafka-instance\"}>\n      <ToolbarKafkaInstanceMetric\n        title={t(\"kafka_instance_metrics\")}\n        duration={duration}\n        lastUpdated={lastUpdated}\n        onSetTimeDuration={onDurationChange}\n        isDisabled={backendUnavailable || isJustCreated || isLoading}\n        isRefreshing={isRefreshing}\n        onRefresh={onRefresh}\n      />\n      {(() => {\n        switch (true) {\n          case isInitialLoading:\n            return <CardBodyLoading />;\n\n          case backendUnavailable:\n            return (\n              <CardBody>\n                <EmptyStateNoMetricsData />\n              </CardBody>\n            );\n\n          case isJustCreated:\n            return (\n              <CardBody>\n                <EmptyStateMetricsUnavailable />\n              </CardBody>\n            );\n\n          default:\n            return (\n              <>\n                <ChartTitle\n                  title={t(\"used_disk_space\")}\n                  helperText={t(\"used_disk_space_help_text\")}\n                />\n                <CardBody>\n                  <ChartLinearWithOptionalLimit\n                    chartName={t(\"used_disk_space\")}\n                    yLabel={t(\"axis-label-bytes\")}\n                    metrics={usedDiskMetrics}\n                    duration={duration}\n                    formatValue={formatBytes}\n                    usageLimit={diskSpaceLimit}\n                    isLoading={isLoading}\n                    emptyState={<EmptyStateNoMetricsData />}\n                  />\n                </CardBody>\n                <Divider />\n                <ChartTitle\n                  title={t(\"client_connections\")}\n                  helperText={t(\"client_connections_helper_text\")}\n                />\n                <CardBody>\n                  <ChartLinearWithOptionalLimit\n                    chartName={t(\"client_connections\")}\n                    yLabel={t(\"client_connections_y_axis\")}\n                    metrics={clientConnectionsMetrics}\n                    duration={duration}\n                    usageLimit={connectionsLimit}\n                    isLoading={isLoading}\n                    emptyState={<EmptyStateNoMetricsData />}\n                  />\n                </CardBody>\n                <Divider />\n                <ChartTitle\n                  title={t(\"connection_attempt_rate\")}\n                  helperText={t(\"connection_attempt_rate_help_text\")}\n                />\n                <CardBody>\n                  <ChartLinearWithOptionalLimit\n                    chartName={t(\"connection_attempt_rate\")}\n                    yLabel={t(\"connection_attempt_rate_yaxis\")}\n                    metrics={connectionAttemptRateMetrics}\n                    duration={duration}\n                    usageLimit={connectionRateLimit}\n                    isLoading={isLoading}\n                    emptyState={<EmptyStateNoMetricsData />}\n                  />\n                </CardBody>\n              </>\n            );\n        }\n      })()}\n    </Card>\n  );\n};\n\nexport const ChartTitle: FunctionComponent<ChartTitleProps> = ({\n  title,\n  helperText,\n}) => {\n  return (\n    <CardTitle component=\"h3\">\n      {title} <ChartPopover title={title} description={helperText} />\n    </CardTitle>\n  );\n};\n","import {\n  Bullseye,\n  Card,\n  CardBody,\n  CardTitle,\n  Skeleton,\n  Title,\n} from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { ChartPopover } from \"./ChartPopover\";\nimport { EmptyStateNoMetricsData } from \"./EmptyStateNoMetricsData\";\n\ntype CardKpiProps = {\n  metric: string | number | undefined;\n  name: string;\n  popover: string;\n  isLoading: boolean;\n};\n\nexport const CardKpi: VoidFunctionComponent<CardKpiProps> = ({\n  metric,\n  name,\n  popover,\n  isLoading,\n}) => {\n  return (\n    <Card isFullHeight data-testid={name}>\n      <CardTitle component=\"h3\">\n        {name} <ChartPopover title={name} description={popover} />\n      </CardTitle>\n      <CardBody>\n        {!isLoading &&\n          (metric === undefined ? (\n            <Bullseye>\n              <EmptyStateNoMetricsData />\n            </Bullseye>\n          ) : (\n            <Title\n              headingLevel=\"h3\"\n              size=\"4xl\"\n              aria-valuetext={`${metric} ${name}`}\n            >\n              {metric}\n            </Title>\n          ))}\n        {isLoading && <Skeleton width=\"50px\" shape=\"square\" />}\n      </CardBody>\n    </Card>\n  );\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { Alert, AlertActionCloseButton } from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport type MetricsLagAlertProps = {\n  isClosed: boolean;\n  onClickClose: () => void;\n};\n\nexport const MetricsLagAlert: VoidFunctionComponent<MetricsLagAlertProps> = ({\n  isClosed,\n  onClickClose,\n}) => {\n  const { t } = useTranslation(\"metrics\");\n\n  if (!isClosed) {\n    return (\n      <Alert\n        isInline\n        variant=\"info\"\n        title={t(\"metrics_lag_title\")}\n        actionClose={<AlertActionCloseButton onClose={onClickClose} />}\n      >\n        <p>{t(\"metrics_lag_description\")}</p>\n      </Alert>\n    );\n  } else {\n    return <> </>;\n  }\n};\n","import {\n  Alert,\n  AlertVariant,\n  Bullseye,\n  Card,\n  CardBody,\n  CardFooter,\n  CardTitle,\n  Skeleton,\n  Text,\n  TextContent,\n  Title,\n} from \"@patternfly/react-core\";\nimport {\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n} from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { ChartPopover } from \"./ChartPopover\";\nimport { EmptyStateNoMetricsData } from \"./EmptyStateNoMetricsData\";\n\ntype PartitionCardProps = {\n  metric: number | undefined;\n  isLoading: boolean;\n  topicPartitionsLimit: number | undefined;\n};\n\nexport const PartitionCard: VoidFunctionComponent<PartitionCardProps> = ({\n  metric,\n  isLoading,\n  topicPartitionsLimit = 0,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <Card\n      isFullHeight\n      data-testid={t(\"metrics:metric_kpi_topicPartitions_name\")}\n    >\n      <CardTitle component=\"h3\">\n        {t(\"metrics:metric_kpi_topicPartitions_name\")}{\" \"}\n        <ChartPopover\n          title={t(\"metrics:metric_kpi_topicPartitions_name\")}\n          description={t(\"metrics:metric_kpi_topicPartitions_description\")}\n        />\n      </CardTitle>\n      <CardBody>\n        {!isLoading &&\n          (metric === undefined ? (\n            <Bullseye>\n              <EmptyStateNoMetricsData />\n            </Bullseye>\n          ) : (\n            <>\n              <Title\n                headingLevel=\"h3\"\n                size=\"4xl\"\n                aria-valuetext={`${metric} ${t(\n                  \"metrics:metric_kpi_topicPartitions_name\"\n                )}`}\n              >\n                {metric}{\" \"}\n                {(() => {\n                  if (metric >= topicPartitionsLimit) {\n                    return (\n                      <ExclamationCircleIcon color=\"var(--pf-global--danger-color--100)\" />\n                    );\n                  } else if (metric >= topicPartitionsLimit * 0.95) {\n                    return (\n                      <ExclamationTriangleIcon color=\"var(--pf-global--warning-color--100)\" />\n                    );\n                  } else {\n                    return \"\";\n                  }\n                })()}\n              </Title>\n              <TextContent>\n                <Text>\n                  {t(\"metrics:partition_limit\", {\n                    topic: topicPartitionsLimit,\n                  })}\n                </Text>\n              </TextContent>\n            </>\n          ))}\n        {isLoading && <Skeleton width=\"50px\" shape=\"square\" />}\n      </CardBody>\n      {(() => {\n        if (metric && metric >= topicPartitionsLimit) {\n          return (\n            <CardFooter>\n              <Alert\n                isExpandable\n                isInline\n                variant={AlertVariant.danger}\n                title={t(\"metrics:partition_limit_reached_title\")}\n              >\n                <p>{t(\"metrics:partition_limit_reached_description_1\")}</p>\n                <p>{t(\"metrics:partition_limit_reached_description_2\")}</p>\n              </Alert>\n            </CardFooter>\n          );\n        } else if (metric && metric >= topicPartitionsLimit * 0.95) {\n          return (\n            <CardFooter>\n              <Alert\n                role={\"alert\"}\n                isExpandable\n                isInline\n                variant={AlertVariant.warning}\n                title={t(\"metrics:partition_limit_approaching_title\")}\n              >\n                <p>\n                  {t(\"metrics:partition_limit_approaching_description_1\", {\n                    limit: topicPartitionsLimit,\n                  })}\n                </p>\n                <p>{t(\"metrics:partition_limit_approaching_description_2\")}</p>\n              </Alert>\n            </CardFooter>\n          );\n        } else {\n          return \" \";\n        }\n      })()}\n    </Card>\n  );\n};\n","import { assign, createMachine } from \"xstate\";\nimport type {\n  GetKafkaInstanceMetricsResponse,\n  TimeSeriesMetrics,\n} from \"../types\";\nimport { DurationOptions } from \"../types\";\n\nconst MAX_RETRIES = 3;\n\nconst apiState = {\n  initial: \"loading\",\n  states: {\n    loading: {\n      invoke: {\n        src: \"api\",\n      },\n      on: {\n        fetchFail: {\n          actions: \"incrementRetries\",\n          target: \"failure\",\n        },\n      },\n    },\n    failure: {\n      after: {\n        1000: [\n          { cond: \"canRetryFetching\", target: \"loading\" },\n          { target: \"#kafkaInstanceMetrics.criticalFail\" },\n        ],\n      },\n    },\n  },\n};\n\nexport type KafkaInstanceMetricsMachineContext = {\n  lastUpdated: Date | undefined;\n\n  // from the UI elements\n  duration: DurationOptions;\n\n  // from the api\n  usedDiskSpaceMetrics: TimeSeriesMetrics;\n  clientConnectionsMetrics: TimeSeriesMetrics;\n  connectionAttemptRateMetrics: TimeSeriesMetrics;\n  diskSpaceLimit: number | undefined;\n  connectionsLimit: number | undefined;\n  connectionRateLimit: number | undefined;\n  // how many time did we try a fetch (that combines more api)\n  fetchFailures: number;\n};\n\nexport const KafkaInstanceMetricsMachine = createMachine(\n  {\n    predictableActionArguments: true,\n    tsTypes: {} as import(\"./KafkaInstanceMetricsMachine.typegen\").Typegen0,\n    schema: {\n      context: {} as KafkaInstanceMetricsMachineContext,\n      events: {} as\n        | ({ type: \"fetchSuccess\" } & GetKafkaInstanceMetricsResponse)\n        | { type: \"fetchFail\" }\n        // to refresh the data\n        | { type: \"refresh\" }\n        // from the UI elements\n        | { type: \"selectTopic\"; topic: string | undefined }\n        | { type: \"selectDuration\"; duration: DurationOptions },\n    },\n    id: \"kafkaInstanceMetrics\",\n    context: {\n      lastUpdated: undefined,\n      duration: DurationOptions.Last1hour,\n      usedDiskSpaceMetrics: {},\n      clientConnectionsMetrics: {},\n      connectionAttemptRateMetrics: {},\n      diskSpaceLimit: undefined,\n      connectionsLimit: undefined,\n      connectionRateLimit: undefined,\n      fetchFailures: 0,\n    },\n    initial: \"initialLoading\",\n    states: {\n      initialLoading: {\n        ...apiState,\n        tags: \"initialLoading\",\n        entry: \"setFetchTimestamp\",\n        on: {\n          fetchSuccess: [\n            {\n              cond: \"isJustCreated\",\n              actions: \"setMetrics\",\n              target: \"#kafkaInstanceMetrics.withResponse\",\n            },\n            { actions: \"setMetrics\", target: \"justCreated\" },\n          ],\n        },\n      },\n      callApi: {\n        ...apiState,\n        tags: \"loading\",\n        entry: \"setFetchTimestamp\",\n        on: {\n          fetchSuccess: {\n            actions: \"setMetrics\",\n            target: \"#kafkaInstanceMetrics.withResponse\",\n          },\n        },\n      },\n      criticalFail: {\n        tags: \"failed\",\n        on: {\n          refresh: {\n            actions: \"resetRetries\",\n            target: \"callApi\",\n          },\n        },\n      },\n      justCreated: {\n        tags: \"justCreated\",\n        on: {\n          refresh: {\n            target: \"initialLoading\",\n          },\n        },\n      },\n      withResponse: {\n        tags: \"withResponse\",\n        on: {\n          refresh: {\n            target: \"refreshing\",\n          },\n          selectDuration: {\n            actions: \"setDuration\",\n            target: \"callApi\",\n          },\n        },\n      },\n      refreshing: {\n        tags: \"refreshing\",\n        entry: \"setFetchTimestamp\",\n        invoke: {\n          src: \"api\",\n        },\n        on: {\n          fetchSuccess: {\n            actions: \"setMetrics\",\n            target: \"withResponse\",\n          },\n          fetchFail: {\n            // 👀 we silently ignore this happened and go back to the right\n            // state depending on the previous data\n            target: \"withResponse\",\n          },\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      setFetchTimestamp: assign({\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        lastUpdated: (_context) => new Date(),\n      }),\n      setMetrics: assign((_, event) => {\n        const {\n          usedDiskSpaceMetrics,\n          clientConnectionsMetrics,\n          connectionAttemptRateMetrics,\n          diskSpaceLimit,\n          connectionsLimit,\n          connectionRateLimit,\n        } = event;\n        return {\n          usedDiskSpaceMetrics,\n          clientConnectionsMetrics,\n          connectionAttemptRateMetrics,\n          diskSpaceLimit: diskSpaceLimit * 1024 ** 3, // convert it to GiB\n          connectionsLimit,\n          connectionRateLimit,\n        };\n      }),\n      incrementRetries: assign({\n        fetchFailures: (context) => context.fetchFailures + 1,\n      }),\n      resetRetries: assign({\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        fetchFailures: (_context) => 0,\n      }),\n      setDuration: assign((_context, event) => ({\n        duration: event.duration,\n        usedDiskSpaceMetrics: {},\n        clientConnectionsMetrics: {},\n        connectionAttemptRateMetrics: {},\n      })),\n    },\n    guards: {\n      canRetryFetching: (context) => context.fetchFailures < MAX_RETRIES,\n      isJustCreated: (_, event) => {\n        if (event.type === \"fetchSuccess\") {\n          return (\n            Object.keys(event.clientConnectionsMetrics).length > 0 ||\n            Object.keys(event.connectionAttemptRateMetrics).length > 0 ||\n            Object.keys(event.usedDiskSpaceMetrics).length > 0\n          );\n        }\n        return false;\n      },\n    },\n  }\n);\n\nexport type KafkaInstanceMetricsMachineType =\n  typeof KafkaInstanceMetricsMachine;\n","import { assign, createMachine } from \"xstate\";\nimport type {\n  GetTopicsMetricsResponse,\n  PartitionBytesMetric,\n  TimeSeriesMetrics,\n} from \"../types\";\nimport { DurationOptions } from \"../types\";\n\nconst MAX_RETRIES = 3;\n\nconst apiState = {\n  initial: \"loading\",\n  states: {\n    loading: {\n      invoke: {\n        src: \"api\",\n      },\n      on: {\n        fetchFail: {\n          actions: \"incrementRetries\",\n          target: \"failure\",\n        },\n      },\n    },\n    failure: {\n      after: {\n        1000: [\n          { cond: \"canRetryFetching\", target: \"loading\" },\n          { target: \"#topicsMetrics.criticalFail\" },\n        ],\n      },\n    },\n  },\n};\n\nexport type TopicsMetricsMachineContext = {\n  lastUpdated: Date | undefined;\n\n  // from the UI elements\n  selectedTopic: string | undefined;\n  duration: DurationOptions;\n\n  // from the api\n  kafkaTopics: string[];\n  metricsTopics: string[];\n  bytesOutgoing: TimeSeriesMetrics;\n  bytesIncoming: TimeSeriesMetrics;\n  bytesPerPartition: PartitionBytesMetric;\n  incomingMessageRate: TimeSeriesMetrics;\n\n  // how many time did we try a fetch (that combines more api)\n  fetchFailures: number;\n};\n\nexport const TopicsMetricsMachine = createMachine(\n  {\n    tsTypes: {} as import(\"./TopicsMetricsMachine.typegen\").Typegen0,\n    predictableActionArguments: true,\n    schema: {\n      context: {} as TopicsMetricsMachineContext,\n      events: {} as  // called when a new kafka id has been specified\n        | ({ type: \"fetchSuccess\" } & GetTopicsMetricsResponse)\n        | { type: \"fetchFail\" }\n\n        // to refresh the data\n        | { type: \"refresh\" }\n\n        // from the UI elements\n        | { type: \"selectTopic\"; topic: string | undefined }\n        | { type: \"selectDuration\"; duration: DurationOptions },\n    },\n    id: \"topicsMetrics\",\n    context: {\n      lastUpdated: undefined,\n\n      // from the UI elements\n      selectedTopic: undefined,\n      duration: DurationOptions.Last1hour,\n\n      // from the api\n      kafkaTopics: [],\n      metricsTopics: [],\n      bytesOutgoing: {},\n      bytesIncoming: {},\n      bytesPerPartition: {},\n      incomingMessageRate: {},\n\n      // how many time did we try a fetch (that combines more api)\n      fetchFailures: 0,\n    },\n    initial: \"initialLoading\",\n    states: {\n      initialLoading: {\n        ...apiState,\n        tags: \"initialLoading\",\n        entry: \"setFetchTimestamp\",\n        on: {\n          fetchSuccess: [\n            {\n              cond: \"isJustCreated\",\n              actions: \"setMetrics\",\n              target: \"#topicsMetrics.withResponse\",\n            },\n            { actions: \"setMetrics\", target: \"justCreated\" },\n          ],\n        },\n      },\n      callApi: {\n        ...apiState,\n        tags: \"loading\",\n        entry: \"setFetchTimestamp\",\n        on: {\n          fetchSuccess: {\n            actions: \"setMetrics\",\n            target: \"#topicsMetrics.withResponse\",\n          },\n        },\n      },\n      criticalFail: {\n        tags: \"failed\",\n        on: {\n          refresh: {\n            actions: \"resetRetries\",\n            target: \"callApi\",\n          },\n        },\n      },\n      justCreated: {\n        tags: \"justCreated\",\n        on: {\n          refresh: {\n            target: \"initialLoading\",\n          },\n        },\n      },\n      withResponse: {\n        tags: \"withResponse\",\n        initial: \"idle\",\n        states: {\n          idle: {},\n          refreshing: {\n            tags: \"refreshing\",\n            entry: \"setFetchTimestamp\",\n            invoke: {\n              src: \"api\",\n            },\n            on: {\n              fetchSuccess: {\n                actions: \"setMetrics\",\n                target: \"#topicsMetrics.withResponse\",\n              },\n              fetchFail: {\n                // 👀 we silently ignore this happened\n                target: \"#topicsMetrics.withResponse\",\n              },\n            },\n          },\n        },\n        on: {\n          refresh: {\n            target: \"#topicsMetrics.withResponse.refreshing\",\n          },\n          selectTopic: {\n            actions: \"setTopic\",\n            target: \"callApi\",\n          },\n          selectDuration: {\n            actions: \"setDuration\",\n            target: \"callApi\",\n          },\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      setFetchTimestamp: assign({\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        lastUpdated: (_context) => new Date(),\n      }),\n      setMetrics: assign((_context, event) => {\n        const {\n          kafkaTopics,\n          metricsTopics,\n          bytesPerPartition,\n          bytesIncoming,\n          bytesOutgoing,\n          incomingMessageRate,\n        } = event;\n        return {\n          kafkaTopics,\n          metricsTopics,\n          bytesPerPartition,\n          bytesIncoming,\n          bytesOutgoing,\n          incomingMessageRate,\n        };\n      }),\n      incrementRetries: assign({\n        fetchFailures: (context) => context.fetchFailures + 1,\n      }),\n      resetRetries: assign({\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        fetchFailures: (_context) => 0,\n      }),\n      setTopic: assign({\n        selectedTopic: (_context, event) => event.topic,\n      }),\n      setDuration: assign({\n        duration: (_, event) => event.duration,\n      }),\n    },\n    guards: {\n      canRetryFetching: (context) => context.fetchFailures < MAX_RETRIES,\n      isJustCreated: (_, event) => {\n        if (event.type === \"fetchSuccess\") {\n          return (\n            Object.keys(event.bytesIncoming).length > 0 ||\n            Object.keys(event.bytesOutgoing).length > 0 ||\n            Object.keys(event.bytesPerPartition).length > 0 ||\n            Object.keys(event.incomingMessageRate).length > 0\n          );\n        }\n        return false;\n      },\n    },\n  }\n);\n\nexport type TopicsMetricsMachineType = typeof TopicsMetricsMachine;\n","import { assign, createMachine } from \"xstate\";\nimport type { GetMetricsKpiResponse } from \"../types\";\n\nconst MAX_RETRIES = 3;\n\nconst apiState = {\n  initial: \"loading\",\n  states: {\n    loading: {\n      invoke: {\n        src: \"api\",\n      },\n      on: {\n        fetchFail: {\n          actions: \"incrementRetries\",\n          target: \"failure\",\n        },\n      },\n    },\n    failure: {\n      after: {\n        1000: [\n          { cond: \"canRetryFetching\", target: \"loading\" },\n          { target: \"#kpis.criticalFail\" },\n        ],\n      },\n    },\n  },\n};\n\nexport type MetricsKpiMachineContext = {\n  // from the api\n  topics: number | undefined;\n  topicPartitions: number | undefined;\n  consumerGroups: number | undefined;\n  topicPartitionsLimit: number | undefined;\n\n  // how many time did we try a fetch (that combines more api)\n  fetchFailures: number;\n};\n\nexport const MetricsKpiMachine = createMachine(\n  {\n    tsTypes: {} as import(\"./MetricsKpiMachine.typegen\").Typegen0,\n    predictableActionArguments: true,\n    schema: {\n      context: {} as MetricsKpiMachineContext,\n      events: {} as\n        | { type: \"fetch\" }\n        | ({ type: \"fetchSuccess\" } & GetMetricsKpiResponse)\n        | { type: \"fetchFail\" }\n        | { type: \"refresh\" },\n    },\n    id: \"kpis\",\n    context: {\n      topics: undefined,\n      topicPartitions: undefined,\n      consumerGroups: undefined,\n      topicPartitionsLimit: undefined,\n      fetchFailures: 0,\n    },\n    initial: \"initialLoading\",\n    states: {\n      initialLoading: {\n        ...apiState,\n        tags: \"initialLoading\",\n        on: {\n          fetchSuccess: [\n            {\n              cond: \"isJustCreated\",\n              actions: \"setMetrics\",\n              target: \"#kpis.withResponse\",\n            },\n            { actions: \"setMetrics\", target: \"justCreated\" },\n          ],\n        },\n      },\n      callApi: {\n        ...apiState,\n        tags: \"loading\",\n        on: {\n          fetchSuccess: {\n            actions: \"setMetrics\",\n            target: \"#kpis.withResponse\",\n          },\n        },\n      },\n      criticalFail: {\n        tags: \"failed\",\n        on: {\n          refresh: {\n            actions: \"resetRetries\",\n            target: \"callApi\",\n          },\n        },\n      },\n      justCreated: {\n        tags: \"justCreated\",\n        on: {\n          refresh: {\n            target: \"initialLoading\",\n          },\n        },\n      },\n      withResponse: {\n        tags: \"withResponse\",\n        initial: \"idle\",\n        states: {\n          idle: {},\n          refreshing: {\n            tags: \"refreshing\",\n            invoke: {\n              src: \"api\",\n            },\n            on: {\n              fetchSuccess: {\n                actions: \"setMetrics\",\n                target: \"#kpis.withResponse\",\n              },\n              fetchFail: {\n                // 👀 we silently ignore this happened\n                target: \"#kpis.withResponse\",\n              },\n            },\n          },\n        },\n        on: {\n          refresh: {\n            target: \"#kpis.withResponse.refreshing\",\n          },\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      setMetrics: assign((_, event) => {\n        const {\n          topics,\n          topicPartitions,\n          consumerGroups,\n          topicPartitionsLimit,\n        } = event;\n        return {\n          topics,\n          topicPartitions,\n          consumerGroups,\n          topicPartitionsLimit,\n        };\n      }),\n\n      incrementRetries: assign({\n        fetchFailures: (context) => context.fetchFailures + 1,\n      }),\n\n      resetRetries: assign({\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        fetchFailures: (_context) => 0,\n      }),\n    },\n    guards: {\n      canRetryFetching: (context) => context.fetchFailures < MAX_RETRIES,\n      isJustCreated: (_, event) => {\n        if (event.type === \"fetchSuccess\") {\n          return (\n            event.topics !== undefined ||\n            event.topicPartitions !== undefined ||\n            event.consumerGroups !== undefined ||\n            event.topicPartitionsLimit !== undefined\n          );\n        }\n        return false;\n      },\n    },\n  }\n);\n\nexport type MetricsKpiMachineType = typeof MetricsKpiMachine;\n","import { useInterpret } from \"@xstate/react\";\nimport type { FunctionComponent } from \"react\";\nimport { createContext } from \"react\";\nimport type { ActorRefFrom } from \"xstate\";\nimport { timeIntervalsMapping } from \"./consts\";\nimport type { KafkaInstanceMetricsMachineType } from \"./machines\";\nimport { KafkaInstanceMetricsMachine } from \"./machines\";\nimport type { DurationOptions, GetKafkaInstanceMetricsResponse } from \"./types\";\n\nexport const KafkaInstanceMetricsContext = createContext<{\n  service: ActorRefFrom<KafkaInstanceMetricsMachineType>;\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n}>(null!);\n\nexport type KafkaInstanceMetricsProviderProps = {\n  getKafkaInstanceMetrics: (options: {\n    duration: DurationOptions;\n    interval: number;\n  }) => Promise<GetKafkaInstanceMetricsResponse>;\n};\nexport const KafkaInstanceMetricsProvider: FunctionComponent<\n  KafkaInstanceMetricsProviderProps\n> = ({ children, getKafkaInstanceMetrics }) => {\n  const service = useInterpret(\n    () =>\n      KafkaInstanceMetricsMachine.withConfig({\n        services: {\n          api: (context) => {\n            return (callback) => {\n              getKafkaInstanceMetrics({\n                duration: context.duration,\n                interval: timeIntervalsMapping[context.duration].interval,\n              })\n                .then((results) =>\n                  callback({ type: \"fetchSuccess\", ...results })\n                )\n                .catch((e) => {\n                  console.error(\"Failed fetching data\", e);\n                  callback(\"fetchFail\");\n                });\n            };\n          },\n        },\n      }),\n    {\n      devTools: true,\n    }\n  );\n  return (\n    <KafkaInstanceMetricsContext.Provider\n      value={{\n        service,\n      }}\n    >\n      {children}\n    </KafkaInstanceMetricsContext.Provider>\n  );\n};\n","import { useInterpret } from \"@xstate/react\";\nimport type { FunctionComponent } from \"react\";\nimport { createContext } from \"react\";\nimport type { ActorRefFrom } from \"xstate\";\nimport type { MetricsKpiMachineType } from \"./machines\";\nimport { MetricsKpiMachine } from \"./machines\";\nimport type { GetMetricsKpiResponse } from \"./types\";\n\nexport const MetricsKpiContext = createContext<{\n  service: ActorRefFrom<MetricsKpiMachineType>;\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n}>(null!);\n\nexport type MetricsKpiProviderProps = {\n  getMetricsKpi: () => Promise<GetMetricsKpiResponse>;\n};\nexport const MetricsKpiProvider: FunctionComponent<MetricsKpiProviderProps> = ({\n  children,\n  getMetricsKpi,\n}) => {\n  const service = useInterpret(\n    () =>\n      MetricsKpiMachine.withConfig({\n        services: {\n          api: () => {\n            return (callback) => {\n              getMetricsKpi()\n                .then((results) =>\n                  callback({ type: \"fetchSuccess\", ...results })\n                )\n                .catch((e) => {\n                  console.error(\"Failed fetching data\", e);\n                  callback(\"fetchFail\");\n                });\n            };\n          },\n        },\n      }),\n    {\n      devTools: true,\n    }\n  );\n  return (\n    <MetricsKpiContext.Provider\n      value={{\n        service,\n      }}\n    >\n      {children}\n    </MetricsKpiContext.Provider>\n  );\n};\n","import { useInterpret } from \"@xstate/react\";\nimport type { FunctionComponent } from \"react\";\nimport { createContext } from \"react\";\nimport type { ActorRefFrom } from \"xstate\";\nimport { timeIntervalsMapping } from \"./consts\";\nimport type { TopicsMetricsMachineType } from \"./machines\";\nimport { TopicsMetricsMachine } from \"./machines\";\nimport type { DurationOptions, GetTopicsMetricsResponse } from \"./types\";\n\nexport const TopicsMetricsContext = createContext<{\n  service: ActorRefFrom<TopicsMetricsMachineType>;\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n}>(null!);\n\nexport type TopicsMetricsProviderProps = {\n  getTopicsMetrics: (options: {\n    duration: DurationOptions;\n    interval: number;\n    selectedTopic: string | undefined;\n  }) => Promise<GetTopicsMetricsResponse>;\n};\nexport const TopicsMetricsProvider: FunctionComponent<\n  TopicsMetricsProviderProps\n> = ({ children, getTopicsMetrics }) => {\n  const service = useInterpret(\n    () =>\n      TopicsMetricsMachine.withConfig({\n        services: {\n          api: (context) => {\n            return (callback) => {\n              getTopicsMetrics({\n                selectedTopic: context.selectedTopic,\n                duration: context.duration,\n                interval: timeIntervalsMapping[context.duration].interval,\n              })\n                .then((results) =>\n                  callback({ type: \"fetchSuccess\", ...results })\n                )\n                .catch((e) => {\n                  console.error(\"Failed fetching data\", e);\n                  callback(\"fetchFail\");\n                });\n            };\n          },\n        },\n      }),\n    {\n      devTools: true,\n    }\n  );\n  return (\n    <TopicsMetricsContext.Provider\n      value={{\n        service,\n      }}\n    >\n      {children}\n    </TopicsMetricsContext.Provider>\n  );\n};\n","import { useSelector } from \"@xstate/react\";\nimport { useCallback, useContext } from \"react\";\nimport { KafkaInstanceMetricsContext } from \"./KafkaInstanceMetricsProvider\";\nimport type { KafkaInstanceMetricsMachineContext } from \"./machines\";\nimport type { DurationOptions } from \"./types\";\n\ntype SeletorReturn = KafkaInstanceMetricsMachineContext & {\n  isInitialLoading: boolean;\n  isRefreshing: boolean;\n  isLoading: boolean;\n  isFailed: boolean;\n  isJustCreated: boolean;\n};\n\nexport function useKafkaInstanceMetrics() {\n  const { service } = useContext(KafkaInstanceMetricsContext);\n\n  const {\n    usedDiskSpaceMetrics,\n    clientConnectionsMetrics,\n    connectionAttemptRateMetrics,\n    diskSpaceLimit,\n    connectionsLimit,\n    connectionRateLimit,\n    duration,\n    lastUpdated,\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n  } = useSelector<typeof service, SeletorReturn>(\n    service,\n    useCallback(\n      (state) => ({\n        ...state.context,\n        isInitialLoading: state.hasTag(\"initialLoading\"),\n        isRefreshing: state.hasTag(\"refreshing\"),\n        isLoading: state.hasTag(\"loading\"),\n        isFailed: state.hasTag(\"failed\"),\n        isJustCreated: state.hasTag(\"justCreated\"),\n      }),\n      []\n    )\n  );\n\n  const onDurationChange = useCallback(\n    (duration: DurationOptions) =>\n      service.send({ type: \"selectDuration\", duration }),\n    [service]\n  );\n\n  const onRefresh = useCallback(() => service.send(\"refresh\"), [service]);\n\n  return {\n    usedDiskSpaceMetrics,\n    clientConnectionsMetrics,\n    connectionAttemptRateMetrics,\n    diskSpaceLimit,\n    connectionsLimit,\n    connectionRateLimit,\n    lastUpdated,\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n    duration,\n    onDurationChange,\n    onRefresh,\n  };\n}\n","import { useSelector } from \"@xstate/react\";\nimport { useCallback, useContext, useMemo } from \"react\";\nimport type { TopicsMetricsMachineContext } from \"./machines\";\nimport { TopicsMetricsContext } from \"./TopicsMetricsProvider\";\nimport type { DurationOptions } from \"./types\";\n\ntype SelectorReturn = TopicsMetricsMachineContext & {\n  isInitialLoading: boolean;\n  isRefreshing: boolean;\n  isLoading: boolean;\n  isFailed: boolean;\n  isJustCreated: boolean;\n};\n\nexport function useTopicsMetrics() {\n  const { service } = useContext(TopicsMetricsContext);\n\n  const {\n    selectedTopic,\n    duration,\n    kafkaTopics,\n    metricsTopics,\n    bytesIncoming,\n    bytesOutgoing,\n    bytesPerPartition,\n    incomingMessageRate,\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n    lastUpdated,\n  } = useSelector<typeof service, SelectorReturn>(\n    service,\n    useCallback(\n      (state) => ({\n        ...state.context,\n        isInitialLoading: state.hasTag(\"initialLoading\"),\n        isRefreshing: state.hasTag(\"refreshing\"),\n        isLoading: state.hasTag(\"loading\"),\n        isFailed: state.hasTag(\"failed\"),\n        isJustCreated: state.hasTag(\"justCreated\"),\n      }),\n      []\n    )\n  );\n\n  const onTopicChange = useCallback(\n    (topic: string | undefined) => service.send({ type: \"selectTopic\", topic }),\n    [service]\n  );\n\n  const onDurationChange = useCallback(\n    (duration: DurationOptions) =>\n      service.send({ type: \"selectDuration\", duration }),\n    [service]\n  );\n\n  const onRefresh = useCallback(() => service.send(\"refresh\"), [service]);\n\n  const mergedTopics = useMemo((): string[] => {\n    const topics = Array.from(\n      new Set<string>([...kafkaTopics, ...metricsTopics])\n    );\n    topics.sort((a, b) => a.localeCompare(b));\n    return topics;\n  }, [kafkaTopics, metricsTopics]);\n\n  return {\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n    lastUpdated,\n    topics: mergedTopics,\n    selectedTopic,\n    duration,\n    bytesIncoming,\n    bytesOutgoing,\n    bytesPerPartition,\n    incomingMessageRate,\n    onTopicChange,\n    onDurationChange,\n    onRefresh,\n  };\n}\n","import { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport {\n  CardKafkaInstanceMetrics,\n  CardTopicsMetrics,\n  EmptyStateInitialLoading,\n  EmptyStateMetricsUnavailable,\n  MetricsLayout,\n} from \"./components\";\nimport { CardKpi } from \"./components/CardKpi\";\nimport { MetricsLagAlert } from \"./components/MetricsLagAlert\";\nimport { PartitionCard } from \"./components/PartitionCard\";\nimport type { KafkaInstanceMetricsProviderProps } from \"./KafkaInstanceMetricsProvider\";\nimport { KafkaInstanceMetricsProvider } from \"./KafkaInstanceMetricsProvider\";\nimport type { MetricsKpiProviderProps } from \"./MetricsKpiProvider\";\nimport { MetricsKpiProvider } from \"./MetricsKpiProvider\";\nimport type { TopicsMetricsProviderProps } from \"./TopicsMetricsProvider\";\nimport { TopicsMetricsProvider } from \"./TopicsMetricsProvider\";\nimport { useKafkaInstanceMetrics } from \"./useKafkaInstanceMetrics\";\nimport { useMetricsKpi } from \"./useMetricsKpi\";\nimport { useTopicsMetrics } from \"./useTopicsMetrics\";\n\nexport type MetricsProps = {\n  onCreateTopic: () => void;\n  onAlertClose: () => void;\n  hasUserAlreadyClosedAlert: boolean;\n} & KafkaInstanceMetricsProviderProps &\n  TopicsMetricsProviderProps &\n  MetricsKpiProviderProps;\n\nexport const Metrics: VoidFunctionComponent<MetricsProps> = ({\n  getKafkaInstanceMetrics,\n  getTopicsMetrics,\n  getMetricsKpi,\n  onCreateTopic,\n  onAlertClose,\n  hasUserAlreadyClosedAlert,\n}) => {\n  return (\n    <TopicsMetricsProvider getTopicsMetrics={getTopicsMetrics}>\n      <KafkaInstanceMetricsProvider\n        getKafkaInstanceMetrics={getKafkaInstanceMetrics}\n      >\n        <MetricsKpiProvider getMetricsKpi={getMetricsKpi}>\n          <ConnectedMetrics\n            onCreateTopic={onCreateTopic}\n            onClickClose={onAlertClose}\n            isClosed={hasUserAlreadyClosedAlert}\n          />\n        </MetricsKpiProvider>\n      </KafkaInstanceMetricsProvider>\n    </TopicsMetricsProvider>\n  );\n};\n\ntype ConnectedMetricsProps = {\n  onCreateTopic: () => void;\n  onClickClose: () => void;\n  isClosed: boolean;\n};\nconst ConnectedMetrics: VoidFunctionComponent<ConnectedMetricsProps> = ({\n  onCreateTopic,\n  onClickClose,\n  isClosed,\n}) => {\n  const { t } = useTranslation();\n  const kafkaInstanceMetrics = useKafkaInstanceMetrics();\n  const topicsMetrics = useTopicsMetrics();\n  const metricsKpi = useMetricsKpi();\n\n  switch (true) {\n    case kafkaInstanceMetrics.isInitialLoading ||\n      topicsMetrics.isInitialLoading ||\n      metricsKpi.isInitialLoading:\n      return <EmptyStateInitialLoading />;\n    case kafkaInstanceMetrics.isFailed &&\n      topicsMetrics.isFailed &&\n      topicsMetrics.isFailed:\n    case kafkaInstanceMetrics.isJustCreated &&\n      topicsMetrics.isJustCreated &&\n      metricsKpi.isJustCreated:\n      return <EmptyStateMetricsUnavailable />;\n    default:\n      return (\n        <MetricsLayout\n          metricsLagAlert={\n            <MetricsLagAlert onClickClose={onClickClose} isClosed={isClosed} />\n          }\n          topicsKpi={\n            <CardKpi\n              metric={metricsKpi.topics}\n              isLoading={metricsKpi.isInitialLoading || metricsKpi.isLoading}\n              name={t(\"metrics:metric_kpi_topics_name\")}\n              popover={t(\"metrics:metric_kpi_topics_description\")}\n            />\n          }\n          topicPartitionsKpi={\n            <PartitionCard\n              metric={metricsKpi.topicPartitions}\n              isLoading={metricsKpi.isInitialLoading || metricsKpi.isLoading}\n              topicPartitionsLimit={metricsKpi.topicPartitionsLimit}\n            />\n          }\n          consumerGroupKpi={\n            <CardKpi\n              metric={metricsKpi.consumerGroups}\n              isLoading={metricsKpi.isInitialLoading || metricsKpi.isLoading}\n              name={t(\"metrics:metric_kpi_consumerGroup_name\")}\n              popover={t(\"metrics:metric_kpi_consumerGroup_description\")}\n            />\n          }\n          diskSpaceMetrics={<ConnectedKafkaInstanceMetrics />}\n          topicMetrics={\n            <ConnectedTopicsMetrics onCreateTopic={onCreateTopic} />\n          }\n        />\n      );\n  }\n};\n\nconst ConnectedKafkaInstanceMetrics: VoidFunctionComponent = () => {\n  const {\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n    duration,\n    lastUpdated,\n    usedDiskSpaceMetrics,\n    clientConnectionsMetrics,\n    connectionAttemptRateMetrics,\n    diskSpaceLimit,\n    connectionsLimit,\n    connectionRateLimit,\n    onDurationChange,\n    onRefresh,\n  } = useKafkaInstanceMetrics();\n\n  return (\n    <CardKafkaInstanceMetrics\n      usedDiskMetrics={usedDiskSpaceMetrics}\n      clientConnectionsMetrics={clientConnectionsMetrics}\n      connectionAttemptRateMetrics={connectionAttemptRateMetrics}\n      duration={duration}\n      backendUnavailable={isFailed}\n      isInitialLoading={isInitialLoading}\n      isLoading={isLoading}\n      isRefreshing={isRefreshing}\n      isJustCreated={isJustCreated}\n      lastUpdated={lastUpdated}\n      onRefresh={onRefresh}\n      onDurationChange={onDurationChange}\n      diskSpaceLimit={diskSpaceLimit || 0}\n      connectionsLimit={connectionsLimit || 0}\n      connectionRateLimit={connectionRateLimit || 0}\n    />\n  );\n};\n\ntype ConnectedTopicsMetricsProps = {\n  onCreateTopic: () => void;\n};\nconst ConnectedTopicsMetrics: VoidFunctionComponent<\n  ConnectedTopicsMetricsProps\n> = ({ onCreateTopic }) => {\n  const {\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n    lastUpdated,\n    selectedTopic,\n    duration,\n    topics,\n    bytesIncoming,\n    bytesOutgoing,\n    bytesPerPartition,\n    incomingMessageRate,\n    onDurationChange,\n    onTopicChange,\n    onRefresh,\n  } = useTopicsMetrics();\n\n  return (\n    <CardTopicsMetrics\n      backendUnavailable={isFailed}\n      topics={topics}\n      incomingTopicsData={bytesIncoming}\n      outgoingTopicsData={bytesOutgoing}\n      partitions={bytesPerPartition}\n      incomingMessageRate={incomingMessageRate}\n      duration={duration}\n      isInitialLoading={isInitialLoading}\n      isLoading={isLoading}\n      isRefreshing={isRefreshing}\n      isJustCreated={isJustCreated}\n      lastUpdated={lastUpdated}\n      selectedTopic={selectedTopic}\n      onRefresh={onRefresh}\n      onSelectedTopic={onTopicChange}\n      onDurationChange={onDurationChange}\n      onCreateTopic={onCreateTopic}\n    />\n  );\n};\n","import { useSelector } from \"@xstate/react\";\nimport { useCallback, useContext } from \"react\";\nimport type { MetricsKpiMachineContext } from \"./machines\";\nimport { MetricsKpiContext } from \"./MetricsKpiProvider\";\n\ntype SelectorReturn = MetricsKpiMachineContext & {\n  isInitialLoading: boolean;\n  isRefreshing: boolean;\n  isLoading: boolean;\n  isFailed: boolean;\n  isJustCreated: boolean;\n};\n\nexport function useMetricsKpi() {\n  const { service } = useContext(MetricsKpiContext);\n\n  const {\n    topics,\n    topicPartitions,\n    topicPartitionsLimit,\n    consumerGroups,\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n  } = useSelector<typeof service, SelectorReturn>(\n    service,\n    useCallback(\n      (state) => ({\n        ...state.context,\n        isInitialLoading: state.hasTag(\"initialLoading\"),\n        isRefreshing: state.hasTag(\"refreshing\"),\n        isLoading: state.hasTag(\"loading\"),\n        isFailed: state.hasTag(\"failed\"),\n        isJustCreated: state.hasTag(\"justCreated\"),\n      }),\n      []\n    )\n  );\n\n  const onRefresh = useCallback(() => service.send(\"refresh\"), [service]);\n\n  return {\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n    topics,\n    topicPartitions,\n    consumerGroups,\n    topicPartitionsLimit,\n    onRefresh,\n  };\n}\n","import {\n  Button,\n  Card,\n  CardBody,\n  Flex,\n  FlexItem,\n  Modal,\n  ModalVariant,\n  PageSection,\n  Spinner,\n  Stack,\n  StackItem,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { FunctionComponent } from \"react\";\nimport { useState } from \"react\";\nimport \"./Settings.css\";\nimport type { SettingsStatus } from \"./types\";\n\nexport type SettingsProps = {\n  onSubmitReAuthentication: (\n    reauthenticationEnabled: boolean\n  ) => Promise<boolean>;\n  reauthenticationEnabled: boolean;\n};\n\nexport const Settings: FunctionComponent<SettingsProps> = ({\n  onSubmitReAuthentication,\n  reauthenticationEnabled,\n}) => {\n  const { t } = useTranslation(\"kafka\");\n  //states\n  const [connectionStatus, setConnectionStatus] = useState<SettingsStatus>(\n    reauthenticationEnabled ? \"On\" : \"Off\"\n  );\n  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n\n  const onClose = () => {\n    setIsModalOpen(false);\n  };\n\n  const onChangeSwitch = (checked: boolean) => {\n    if (connectionStatus === \"On\") {\n      setIsModalOpen(true);\n    } else {\n      handleReAuthentication(checked);\n    }\n  };\n\n  const handleReAuthentication = (reAuthValue: boolean) => {\n    setConnectionStatus(reAuthValue ? \"TurningOn\" : \"TurningOff\");\n\n    onSubmitReAuthentication(reAuthValue)\n      .then((reauthentication) => {\n        setConnectionStatus(reauthentication ? \"On\" : \"Off\");\n\n        // TODO: send notification\n        // addAlert({\n        //   variant: \"success\",\n        //   title: t(\"settings.success_alert\", {\n        //     status: reauthentication ? \"on\" : \"off\",\n        //   }),\n        // });\n      })\n      .catch(() => {\n        setConnectionStatus(!reAuthValue ? \"On\" : \"Off\");\n\n        // TODO: send notification\n        // addAlert({\n        //   variant: \"danger\",\n        //   title: t(\"settings.error_alert_title\"),\n        //   description: t(\"settings.error_alert_title_description\"),\n        // });\n      });\n  };\n\n  const onTurnOff = () => {\n    setIsModalOpen(false);\n    handleReAuthentication(false);\n  };\n\n  return (\n    <PageSection isFilled={true} hasOverflowScroll={true} aria-label={\"TODO\"}>\n      <Stack hasGutter>\n        <StackItem>\n          <Card>\n            <CardBody>{t(\"settings.kafka_instance_settings_label\")}</CardBody>\n          </Card>\n        </StackItem>\n        <StackItem>\n          <Card className={\"mas--settings__card\"}>\n            <CardBody>\n              <Flex flexWrap={{ default: \"nowrap\" }}>\n                <FlexItem grow={{ default: \"grow\" }}>\n                  <Flex>\n                    <FlexItem\n                      component={\"span\"}\n                      spacer={{ default: \"spacerSm\" }}\n                    >\n                      <strong>\n                        {t(\"settings.connection_re_authentication_label\")}\n                        {\":\"}\n                      </strong>\n                    </FlexItem>\n                    <FlexItem>\n                      {(() => {\n                        switch (connectionStatus) {\n                          case \"On\":\n                            return t(\n                              \"settings.Connection_re_authentication_states.on\"\n                            );\n                          case \"TurningOff\":\n                            return (\n                              <>\n                                <Spinner\n                                  size=\"md\"\n                                  aria-valuetext={t(\n                                    \"settings.Connection_re_authentication_states.turning_off\"\n                                  )}\n                                  aria-label={t(\n                                    \"settings.connection_re_authentication_label\"\n                                  )}\n                                />{\" \"}\n                                {t(\n                                  \"settings.Connection_re_authentication_states.turning_off\"\n                                )}\n                              </>\n                            );\n                          case \"Off\":\n                            return t(\n                              \"settings.Connection_re_authentication_states.off\"\n                            );\n                          case \"TurningOn\":\n                            return (\n                              <>\n                                <Spinner\n                                  size=\"md\"\n                                  aria-valuetext={\n                                    \"settings.Connection_re_authentication_states.turning_on\"\n                                  }\n                                  aria-label={t(\n                                    \"settings.connection_re_authentication_label\"\n                                  )}\n                                />{\" \"}\n                                {t(\n                                  \"settings.Connection_re_authentication_states.turning_on\"\n                                )}\n                              </>\n                            );\n                          default:\n                            return null;\n                        }\n                      })()}\n                    </FlexItem>\n                  </Flex>\n                </FlexItem>\n                <FlexItem>\n                  <Switch\n                    id=\"Connection-re-authentication-switch\"\n                    aria-label={t(\n                      \"settings.connection_re_authentication_label\"\n                    )}\n                    isChecked={\n                      connectionStatus === \"On\" ||\n                      connectionStatus === \"TurningOff\"\n                    }\n                    isDisabled={\n                      connectionStatus === \"TurningOff\" ||\n                      connectionStatus === \"TurningOn\"\n                    }\n                    onChange={onChangeSwitch}\n                  />\n                </FlexItem>\n                <Modal\n                  variant={ModalVariant.small}\n                  isOpen={isModalOpen}\n                  title={t(\"settings.warning_title\")}\n                  titleIconVariant={\"warning\"}\n                  actions={[\n                    <Button\n                      key={\"confirm\"}\n                      variant=\"primary\"\n                      onClick={onTurnOff}\n                    >\n                      {t(\"settings.turn_off_button_label\")}\n                    </Button>,\n                    <Button key={\"cancel\"} variant=\"link\" onClick={onClose}>\n                      {t(\"common:cancel\")}\n                    </Button>,\n                  ]}\n                  onClose={onClose}\n                >\n                  {t(\"settings.warning_description\")}\n                </Modal>\n              </Flex>\n            </CardBody>\n          </Card>\n        </StackItem>\n      </Stack>\n    </PageSection>\n  );\n};\n","export type SelectOptions = {\n  key: string;\n  value: string;\n  isPlaceholder?: boolean;\n  isDisabled?: boolean;\n};\n\nexport const retentionTimeSelectOptions: SelectOptions[] = [\n  { key: \"days\", value: \"days\", isPlaceholder: true },\n  { key: \"hours\", value: \"hours\" },\n  { key: \"minutes\", value: \"minutes\" },\n  { key: \"seconds\", value: \"seconds\" },\n  { key: \"milliseconds\", value: \"milliseconds\" },\n];\n\nexport const retentionSizeSelectOptions: SelectOptions[] = [\n  { key: \"bytes\", value: \"bytes\", isPlaceholder: true },\n  { key: \"kibibytes\", value: \"kibibytes\" },\n  { key: \"mebibytes\", value: \"mebibytes\" },\n  { key: \"gibibytes\", value: \"gibibytes\" },\n  { key: \"tebibytes\", value: \"tebibytes\" },\n];\n\nexport type IDropdownOption = {\n  value?: string;\n  label?: string;\n  key?: string;\n  isDisabled?: boolean;\n};\n","import { FormGroup, Popover, TextInput } from \"@patternfly/react-core\";\nimport { HelpIcon } from \"@patternfly/react-icons\";\nimport type { FunctionComponent } from \"react\";\n\nexport interface TextWithLabelPopoverProps {\n  fieldId: string;\n  fieldLabel: string;\n  fieldValue?: string;\n  popoverHeader: string;\n  popoverBody: string;\n  btnAriaLabel: string;\n  showUnlimited?: boolean;\n}\n\nexport const TextWithLabelPopover: FunctionComponent<\n  TextWithLabelPopoverProps\n> = ({\n  fieldId,\n  fieldLabel,\n  btnAriaLabel,\n  fieldValue,\n  popoverBody,\n  popoverHeader,\n  showUnlimited,\n}) => {\n  let displayText = \"-\";\n\n  if (\n    showUnlimited === true &&\n    fieldValue !== undefined &&\n    parseInt(fieldValue) < 0\n  ) {\n    displayText = \"Unlimited\"; // TODO i18n\n  } else if (fieldValue) {\n    displayText = fieldValue;\n  }\n\n  return (\n    <FormGroup\n      fieldId={fieldId}\n      label={fieldLabel}\n      className=\"kafka-ui-form-group--readonly\"\n      labelIcon={\n        <Popover\n          headerContent={<div>{popoverHeader}</div>}\n          bodyContent={<div>{popoverBody}</div>}\n        >\n          <button\n            aria-label={btnAriaLabel}\n            onClick={(event) => event.preventDefault()}\n            className=\"pf-c-form__group-label-help\"\n          >\n            <HelpIcon noVerticalAlign />\n          </button>\n        </Popover>\n      }\n    >\n      <TextInput\n        readOnlyVariant={\"plain\"}\n        type=\"text\"\n        id={fieldId}\n        name={fieldId}\n        value={displayText}\n      />\n    </FormGroup>\n  );\n};\n","import {\n  FormSection,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport convert from \"convert\";\nimport type React from \"react\";\nimport { TextWithLabelPopover } from \"./TextWithLabelPopover\";\n\ntype CleanupProps = {\n  defaultLogSegmentSize: bigint;\n  defaultSegmentTime: bigint;\n  defaultSegmentJitterTime: bigint;\n  defaultFileDeleteDelay: bigint;\n};\n\nconst Cleanup: React.FC<CleanupProps> = ({\n  defaultFileDeleteDelay,\n  defaultLogSegmentSize,\n  defaultSegmentJitterTime,\n  defaultSegmentTime,\n}) => {\n  const { t } = useTranslation([\"create-topic\", \"common\"]);\n\n  return (\n    <FormSection title={t(\"cleanup\")} id=\"cleanup\" titleElement={\"h2\"}>\n      <TextContent>\n        <Text component={TextVariants.p} className=\"section-info\">\n          {t(\"cleanup_section_info\")}\n        </Text>\n      </TextContent>\n\n      <TextWithLabelPopover\n        fieldId=\"log-segment-size\"\n        btnAriaLabel={t(\"log_segment_size\")}\n        fieldLabel={t(\"log_segment_size\")}\n        fieldValue={t(\"bytes_to_gibibyte\", {\n          bytes: defaultLogSegmentSize,\n          gibibyte: convert(Number(defaultLogSegmentSize), \"bytes\").to(\n            \"gibibytes\"\n          ),\n        })}\n        popoverBody={t(\"log_segment_size\")}\n        popoverHeader={t(\"log_segment_size_description\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"segement-time\"\n        btnAriaLabel={t(\"segement_time\")}\n        fieldLabel={t(\"segement_time\")}\n        fieldValue={t(\"milliseconds_to_days\", {\n          milliseconds: defaultSegmentTime,\n          days: convert(Number(defaultSegmentTime), \"milliseconds\").to(\"days\"),\n        })}\n        popoverBody={t(\"segement_time_description\")}\n        popoverHeader={t(\"segement_time\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"segment-jitter-time\"\n        btnAriaLabel={t(\"segment_jitter_time\")}\n        fieldLabel={t(\"segment_jitter_time\")}\n        fieldValue={t(\"milliseconds_time\", { value: defaultSegmentJitterTime })}\n        popoverBody={t(\"segment_jitter_time_description\")}\n        popoverHeader={t(\"segment_jitter_time\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"file-delete-delay\"\n        btnAriaLabel={t(\"file_delete_delay\")}\n        fieldLabel={t(\"file_delete_delay\")}\n        fieldValue={t(\"milliseconds_to_minute\", {\n          milliseconds: defaultFileDeleteDelay,\n          minute: convert(Number(defaultFileDeleteDelay), \"milliseconds\").to(\n            \"minutes\"\n          ),\n        })}\n        popoverBody={t(\"file_delete_delay_description\")}\n        popoverHeader={t(\"file_delete_delay\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"preallocate-log-segment-files\"\n        btnAriaLabel={t(\"preallocate_log_segment_files\")}\n        fieldLabel={t(\"preallocate_log_segment_files\")}\n        fieldValue={t(\"common:disabled\")}\n        popoverBody={t(\"preallocate_log_segment_files_description\")}\n        popoverHeader={t(\"preallocate_log_segment_files\")}\n      />\n    </FormSection>\n  );\n};\n\nexport { Cleanup };\n","import type { NumberInputProps, SelectProps } from \"@patternfly/react-core\";\nimport {\n  Flex,\n  FlexItem,\n  NumberInput,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport type React from \"react\";\nimport type { Topic } from \"ui-models/src/models/topic\";\nimport { RetentionTimeUnits } from \"../../KafkaTopics/types\";\nimport type { SelectOptions } from \"./types\";\n\nexport type CustomRetentionMessageProps = NumberInputProps &\n  SelectProps & {\n    id?: string;\n    selectOptions: SelectOptions[];\n    topicData: Topic;\n    setTopicData: (data: Topic) => void;\n  };\n\nconst CustomRetentionMessage: React.FC<CustomRetentionMessageProps> = ({\n  onToggle,\n  isOpen,\n  selectOptions,\n  topicData,\n  setTopicData,\n}) => {\n  const onSelect: SelectProps[\"onSelect\"] = (event, value) => {\n    // setTopicData({\n    //   ...topicData,\n    //   customRetentionTimeUnit: value as RetentionTimeUnits,\n    // });\n\n    //}\n\n    onToggle(false, event);\n  };\n\n  const handleTouchSpin = (operator: string) => {\n    if (operator === \"+\") {\n      // setTopicData({\n      //   ...topicData,\n      //   retentionTime: topicData.retentionTime + 1,\n      // });\n    } else if (operator === \"-\") {\n      // setTopicData({\n      //   ...topicData,\n      //   retentionTime: topicData.retentionTime - 1,\n      // });\n    }\n  };\n\n  const onChangeTouchSpin = (event: React.FormEvent<HTMLInputElement>) => {\n    // setTopicData({\n    //   ...topicData,\n    //   retentionTime: Number(event.currentTarget.value),\n    // });\n  };\n\n  return (\n    <div className=\"kafka-ui--radio__parameters\">\n      <Flex>\n        <FlexItem>\n          <NumberInput\n            onMinus={() => handleTouchSpin(\"-\")}\n            onPlus={() => handleTouchSpin(\"+\")}\n            value={\n              Number(\n                topicData[\"retention.ms\"].value\n              ) /* TODO precision loss from BigInt to Number, handle this as a string */\n            }\n            onChange={(event) => onChangeTouchSpin(event)}\n            min={0}\n          />\n        </FlexItem>\n        <FlexItem>\n          <Select\n            variant={SelectVariant.single}\n            aria-label=\"Select Input\"\n            onToggle={onToggle}\n            onSelect={onSelect}\n            selections={RetentionTimeUnits.MILLISECOND /* TODO */}\n            isOpen={isOpen}\n          >\n            {selectOptions?.map((s) => (\n              <SelectOption\n                key={s.key}\n                value={s.value}\n                isPlaceholder={s.isPlaceholder}\n              />\n            ))}\n          </Select>\n        </FlexItem>\n      </Flex>\n    </div>\n  );\n};\n\nexport { CustomRetentionMessage };\n","import type { NumberInputProps, SelectProps } from \"@patternfly/react-core\";\nimport {\n  Flex,\n  FlexItem,\n  NumberInput,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport type React from \"react\";\nimport type { Topic } from \"ui-models/src/models/topic\";\nimport { RetentionSizeUnits } from \"../../KafkaTopics/types\";\nimport type { SelectOptions } from \"./types\";\n\nexport type CustomRetentionSizeProps = NumberInputProps &\n  SelectProps & {\n    id?: string;\n    selectOptions: SelectOptions[];\n    topicData: Topic;\n    setTopicData: (data: Topic) => void;\n  };\n\nconst CustomRetentionSize: React.FC<CustomRetentionSizeProps> = ({\n  onToggle,\n  isOpen,\n  selectOptions,\n  topicData,\n  setTopicData,\n}) => {\n  const onSelect: SelectProps[\"onSelect\"] = (event, value) => {\n    // setTopicData({\n    //   ...topicData,\n    //   customRetentionSizeUnit: value as RetentionSizeUnits,\n    // });\n\n    //}\n\n    onToggle(false, event);\n  };\n\n  const handleTouchSpin = (operator: string) => {\n    if (operator === \"+\") {\n      // setTopicData({\n      //   ...topicData,\n      //   retentionBytes: topicData.retentionBytes + 1,\n      // });\n    } else if (operator === \"-\") {\n      // setTopicData({\n      //   ...topicData,\n      //   retentionBytes: topicData.retentionBytes - 1,\n      // });\n    }\n  };\n\n  const onChangeTouchSpin = (event: React.FormEvent<HTMLInputElement>) => {\n    // setTopicData({\n    //   ...topicData,\n    //   retentionBytes: Number(event.currentTarget.value),\n    // });\n  };\n\n  return (\n    <div className=\"kafka-ui--radio__parameters\">\n      <Flex>\n        <FlexItem>\n          <NumberInput\n            onMinus={() => handleTouchSpin(\"-\")}\n            onPlus={() => handleTouchSpin(\"+\")}\n            value={\n              Number(\n                topicData[\"retention.bytes\"].value\n              ) /* TODO precision loss from BigInt to Number */\n            }\n            onChange={(event) => onChangeTouchSpin(event)}\n            min={0}\n          />\n        </FlexItem>\n        <FlexItem>\n          <Select\n            variant={SelectVariant.single}\n            aria-label=\"Select Input\"\n            onToggle={onToggle}\n            onSelect={onSelect}\n            selections={RetentionSizeUnits.BYTE /* TODO */}\n            isOpen={isOpen}\n          >\n            {selectOptions?.map((s) => (\n              <SelectOption\n                key={s.key}\n                value={s.value}\n                isPlaceholder={s.isPlaceholder}\n              />\n            ))}\n          </Select>\n        </FlexItem>\n      </Flex>\n    </div>\n  );\n};\n\nexport { CustomRetentionSize };\n","import type { NumberInputProps } from \"@patternfly/react-core\";\nimport {\n  FormSection,\n  NumberInput,\n  Radio,\n  Stack,\n  Text,\n  TextContent,\n  TextInput,\n  TextVariants,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport {\n  FormGroupWithPopover,\n  useTranslation,\n} from \"@rhoas/app-services-ui-components\";\nimport type { FunctionComponent } from \"react\";\nimport { useCallback, useState } from \"react\";\nimport type { Topic } from \"ui-models/src/models/topic\";\nimport {\n  RetentionSizeUnits,\n  RetentionTimeUnits,\n} from \"../../KafkaTopics/types\";\nimport { CustomRetentionMessage } from \"./CustomRetentionMessage\";\nimport { CustomRetentionSize } from \"./CustomRetentionSize\";\nimport { TextWithLabelPopover } from \"./TextWithLabelPopover\";\nimport {\n  retentionSizeSelectOptions,\n  retentionTimeSelectOptions,\n} from \"./types\";\nimport { useValidateTopic } from \"./useValidateTopic\";\n\nexport type CoreConfigurationProps = {\n  isCreate?: boolean;\n  topicData: Topic;\n  setTopicData: (data: Topic) => void;\n  checkTopicName: (value: string) => Promise<boolean>;\n  //initialPartition: number | undefined;\n  invalidText: string;\n  setInvalidText: (message: string) => void;\n  setTopicValidated: (error: ValidatedOptions) => void;\n  topicValidated: ValidatedOptions;\n  setWarning: (isWarning: boolean) => void;\n  warning: boolean;\n  availablePartitionLimit: number;\n};\n\nconst CoreConfiguration: FunctionComponent<CoreConfigurationProps> = ({\n  isCreate,\n  topicData,\n  setTopicData,\n  invalidText,\n  setInvalidText,\n  setTopicValidated,\n  topicValidated,\n  availablePartitionLimit,\n}) => {\n  const { t } = useTranslation([\"create-topic\"]);\n  const { validateName } = useValidateTopic();\n  const [retentionSizeUnit, setRetentionSizeUnit] =\n    useState<RetentionSizeUnits>(RetentionSizeUnits.BYTE);\n  const [retentionTimeUnit, setRetentionTimeUnit] =\n    useState<RetentionTimeUnits>(RetentionTimeUnits.MILLISECOND);\n  const [isRetentionTimeSelectOpen, setIsRetentionTimeSelectOpen] =\n    useState<boolean>();\n  const [isRetentionSizeSelectOpen, setIsRetentionSizeSelectOpen] =\n    useState<boolean>();\n\n  const validationCheck = useCallback(\n    (value: string) => {\n      const errorMessage = validateName(value);\n      if (errorMessage) {\n        setInvalidText(errorMessage);\n        setTopicValidated(ValidatedOptions.error);\n      } else {\n        setTopicValidated(ValidatedOptions.default);\n      }\n    },\n    [setInvalidText, setTopicValidated, validateName]\n  );\n\n  const handleRetentionMessageSize = (value: string) => {\n    switch (value) {\n      case RetentionSizeUnits.CUSTOM:\n        setRetentionSizeUnit(RetentionSizeUnits.CUSTOM);\n        break;\n      case RetentionTimeUnits.UNLIMITED:\n        setRetentionSizeUnit(RetentionSizeUnits.UNLIMITED);\n    }\n  };\n\n  const onRetentionTimeToggle = (isOpen: boolean) => {\n    setIsRetentionTimeSelectOpen(isOpen);\n  };\n\n  const onRetentionSizeToggle = (isOpen: boolean) => {\n    setIsRetentionSizeSelectOpen(isOpen);\n  };\n\n  const handleRetentionMessageTime = (value: string) => {\n    switch (value) {\n      case RetentionTimeUnits.CUSTOM:\n        setRetentionTimeUnit(RetentionTimeUnits.CUSTOM);\n        break;\n      case RetentionTimeUnits.UNLIMITED:\n        setRetentionTimeUnit(RetentionTimeUnits.UNLIMITED);\n    }\n  };\n\n  const handleTextInputChange = (value: string) => {\n    validationCheck(value);\n    setTopicData({ ...topicData, name: value });\n  };\n\n  const onPartitionsChange: NumberInputProps[\"onChange\"] = (event) => {\n    // setTopicData({\n    //   ...topicData,\n    //   partitions.length: Number((event.target as HTMLInputElement).value),\n    // });\n  };\n  const handleOnPlus = () => {\n    // setTopicData({\n    //   ...topicData,\n    //   partitions.length: topicData.partitions.length + 1,\n    // });\n  };\n\n  const handleOnMinus = () => {\n    // setTopicData({\n    //   ...topicData,\n    //   partitions.length: topicData.partitions.length - 1,\n    // });\n  };\n\n  const retentionTimeInput = (\n    <CustomRetentionMessage\n      toggleId=\"core-config-retention-dropdowntoggle\"\n      name=\"retention-ms\"\n      topicData={topicData}\n      setTopicData={setTopicData}\n      onToggle={onRetentionTimeToggle}\n      isOpen={isRetentionTimeSelectOpen}\n      selectOptions={retentionTimeSelectOptions}\n    />\n  );\n\n  const retentionSizeInput = (\n    <CustomRetentionSize\n      toggleId=\"core-config-retention-size-dropdowntoggle\"\n      name=\"retention-bytes\"\n      topicData={topicData}\n      setTopicData={setTopicData}\n      onToggle={onRetentionSizeToggle}\n      isOpen={isRetentionSizeSelectOpen}\n      selectOptions={retentionSizeSelectOptions}\n    />\n  );\n\n  return (\n    <FormSection\n      title={t(\"core_configuration\")}\n      id=\"core-configuration\"\n      titleElement={\"h2\"}\n    >\n      <TextContent>\n        <Text component={TextVariants.p} className=\"section-info\">\n          {t(\"core_config_info\")}\n        </Text>\n      </TextContent>\n      {isCreate ? (\n        <FormGroupWithPopover\n          labelHead={t(\"topic_name\")}\n          fieldId=\"create-topic-name\"\n          fieldLabel={t(\"topic_name\")}\n          labelBody={t(\"topic_name_description\")}\n          buttonAriaLabel=\"More info for topic name field\"\n          helperTextInvalid={invalidText}\n          validated={topicValidated}\n          isRequired={true}\n          helperText={t(\"topic_name_helper_text\")}\n        >\n          <TextInput\n            isRequired\n            type=\"text\"\n            id=\"create-topic-name\"\n            name=\"name\"\n            value={topicData.name}\n            onChange={handleTextInputChange}\n            label={t(\"topic_name\")}\n            placeholder={t(\"enter_name\")}\n            validated={topicValidated}\n          />\n        </FormGroupWithPopover>\n      ) : (\n        <TextWithLabelPopover\n          fieldId=\"topic-name\"\n          btnAriaLabel=\"topic detail name\"\n          fieldLabel=\"Name\"\n          fieldValue={topicData.name}\n          popoverBody={t(\"topic_name_description\")}\n          popoverHeader={t(\"topic_name\")}\n        />\n      )}\n\n      <FormGroupWithPopover\n        fieldId=\"create-topic-partitions\"\n        fieldLabel=\"Partitions\"\n        labelHead={t(\"partitions\")}\n        labelBody={t(\"partitions_description\")}\n        buttonAriaLabel=\"More info for partitions field\"\n        helperText={\n          topicData.partitions.length >= availablePartitionLimit\n            ? t(\"partitions_warning\")\n            : t(\"partition_helper_text\")\n        }\n        validated={\n          topicData.partitions.length >= availablePartitionLimit\n            ? \"warning\"\n            : \"default\"\n        }\n      >\n        <NumberInput\n          id=\"create-topic-partitions\"\n          inputName=\"num-partitions\"\n          onChange={onPartitionsChange}\n          data-testid={t(\"partitions\")}\n          onPlus={handleOnPlus}\n          onMinus={handleOnMinus}\n          value={topicData.partitions.length}\n          plusBtnProps={{ name: \"num-partitions\" }}\n          minusBtnProps={{ name: \"num-partitions\" }}\n          min={0}\n        />\n      </FormGroupWithPopover>\n\n      <TextWithLabelPopover\n        fieldId=\"replicas\"\n        btnAriaLabel={t(\"replicas\")}\n        fieldLabel={t(\"replicas\")}\n        fieldValue={\"3\" /* TODO */}\n        popoverBody={t(\"replicas_description\")}\n        popoverHeader={t(\"replicas\")}\n      />\n      <TextWithLabelPopover\n        fieldId=\"min-insync-replicas\"\n        btnAriaLabel=\"topic detail min-in-sync replica\"\n        fieldLabel=\"Minimum in-sync replicas\"\n        fieldValue={topicData[\"min.insync.replicas\"].toString()}\n        popoverBody={t(\"min_insync_replicas_description\")}\n        popoverHeader={t(\"min_insync_replicas\")}\n      />\n      <FormGroupWithPopover\n        fieldId=\"retention\"\n        fieldLabel=\"Retention time\"\n        labelHead={t(\"retention_time\")}\n        labelBody={t(\"retention_time_description\")}\n        buttonAriaLabel=\"More info for retention time field\"\n      >\n        <Stack hasGutter>\n          <Radio\n            isChecked={\n              retentionTimeUnit === RetentionTimeUnits.DAY ||\n              retentionTimeUnit === RetentionTimeUnits.WEEK ||\n              retentionTimeUnit === RetentionTimeUnits.CUSTOM\n            }\n            name=\"custom-retention-time\"\n            onChange={() =>\n              handleRetentionMessageTime(RetentionTimeUnits.CUSTOM)\n            }\n            label={retentionTimeInput}\n            className=\"kafka-ui--radio-label__number-input\"\n            aria-label=\"custom duration\"\n            id=\"custom-retention-time\"\n            value={RetentionTimeUnits.CUSTOM}\n          />\n          <Radio\n            isChecked={retentionTimeUnit === RetentionTimeUnits.UNLIMITED}\n            name=\"unlimited-retention-time\"\n            onChange={() =>\n              handleRetentionMessageTime(RetentionTimeUnits.UNLIMITED)\n            }\n            label=\"Unlimited time\"\n            aria-label=\"Unlimited\"\n            id=\"unlimited-retention-time\"\n            value={RetentionTimeUnits.UNLIMITED}\n          />\n        </Stack>\n      </FormGroupWithPopover>\n      <FormGroupWithPopover\n        fieldId=\"retention-size\"\n        fieldLabel=\"Retention size\"\n        labelHead={t(\"retention_size\")}\n        labelBody={t(\"retention_size_description\")}\n        buttonAriaLabel=\"More info for retention size field\"\n      >\n        <Stack hasGutter>\n          <Radio\n            isChecked={retentionSizeUnit === RetentionSizeUnits.CUSTOM}\n            name=\"custom-retention-size\"\n            onChange={() =>\n              handleRetentionMessageSize(RetentionSizeUnits.CUSTOM)\n            }\n            label={retentionSizeInput}\n            className=\"kafka-ui--radio-label__number-input\"\n            aria-label=\"custom size\"\n            id=\"custom-retention-size\"\n            value={RetentionSizeUnits.CUSTOM}\n          />\n          <Radio\n            isChecked={retentionSizeUnit === RetentionSizeUnits.UNLIMITED}\n            name=\"unlimited-retention-size\"\n            onChange={() =>\n              handleRetentionMessageSize(RetentionSizeUnits.UNLIMITED)\n            }\n            label=\"Unlimited size\"\n            aria-label=\"Unlimited\"\n            id=\"unlimited-retention-size\"\n            value={RetentionSizeUnits.UNLIMITED}\n          />\n        </Stack>\n      </FormGroupWithPopover>\n    </FormSection>\n  );\n};\n\nexport { CoreConfiguration };\n","import { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { useCallback } from \"react\";\n\nexport const useValidateTopic = (): {\n  validateName: (name: string) => string | undefined;\n} => {\n  const { t } = useTranslation([\"create-topic\"]);\n\n  return {\n    validateName: useCallback(\n      (name) => {\n        const legalNameChars = new RegExp(\"^[a-zA-Z0-9._-]+$\");\n        if (name.length && !legalNameChars.test(name)) {\n          return t(\"topic_name_helper_text\");\n        } else if (name.length > 249) {\n          return t(\"cannot_exceed_characters\");\n        } else if (name === \".\" || name === \"..\") {\n          return t(\"invalid_name_with_dot\");\n        }\n        return undefined;\n      },\n      [t]\n    ),\n  };\n};\n","import {\n  FormSection,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type React from \"react\";\nimport { TextWithLabelPopover } from \"./TextWithLabelPopover\";\n\ntype FlushProps = {\n  defaultFlushIntervalMessages: bigint;\n  defaultFlushIntervalTime: bigint;\n};\n\nconst Flush: React.FC<FlushProps> = ({\n  defaultFlushIntervalMessages,\n  defaultFlushIntervalTime,\n}) => {\n  const { t } = useTranslation([\"create-topic\"]);\n\n  return (\n    <FormSection title={t(\"flush\")} id=\"flush\" titleElement={\"h2\"}>\n      <TextContent>\n        <Text component={TextVariants.p} className=\"section-info\">\n          {t(\"flush_section_info\")}\n        </Text>\n      </TextContent>\n\n      <TextWithLabelPopover\n        fieldId=\"flush-interval-messages\"\n        btnAriaLabel={t(\"flush_interval_messages\")}\n        fieldLabel={t(\"flush_interval_messages\")}\n        fieldValue={t(\"messages_time\", {\n          value: defaultFlushIntervalMessages,\n        })}\n        popoverBody={t(\"flush_interval_messages_description\")}\n        popoverHeader={t(\"flush_interval_messages\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"flush-interval-time\"\n        btnAriaLabel={t(\"flush_interval_time\")}\n        fieldLabel={t(\"flush_interval_time\")}\n        fieldValue={t(\"milliseconds_time\", { value: defaultFlushIntervalTime })}\n        popoverBody={t(\"flush_interval_time_description\")}\n        popoverHeader={t(\"flush_interval_time\")}\n      />\n    </FormSection>\n  );\n};\n\nexport { Flush };\n","import {\n  FormSection,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport {\n  DropdownWithToggle,\n  FormGroupWithPopover,\n  useTranslation,\n} from \"@rhoas/app-services-ui-components\";\nimport convert from \"convert\";\nimport type React from \"react\";\nimport type { Topic } from \"ui-models/src/models/topic\";\nimport { TextWithLabelPopover } from \"./TextWithLabelPopover\";\nimport type { IDropdownOption } from \"./types\";\n\nexport type LogProps = {\n  topicData: Topic;\n  setTopicData: (data: Topic) => void;\n  defaultDeleteRetentionTime: bigint;\n  defaultMinCleanbleRatio: number;\n  defaultMinimumCompactionLagTime: bigint;\n};\n\nconst Log: React.FC<LogProps> = ({\n  topicData,\n  setTopicData,\n  defaultDeleteRetentionTime,\n  defaultMinCleanbleRatio,\n  defaultMinimumCompactionLagTime,\n}) => {\n  const { t } = useTranslation([\"create-topic\", \"common\"]);\n\n  const cleanupPolicyOptions: IDropdownOption[] = [\n    {\n      key: \"compact\",\n      value: \"compact\",\n      label: t(\"compact\"),\n      isDisabled: false,\n    },\n    {\n      key: \"delete\",\n      value: \"delete\",\n      label: t(\"common:delete\"),\n      isDisabled: false,\n    },\n    {\n      key: \"compact-delete\",\n      value: \"compact,delete\",\n      label: `${t(\"compact\")},${t(\"common:delete\")}`,\n      isDisabled: false,\n    },\n  ];\n\n  const onSelectOption = (value: string) => {\n    // setTopicData({ ...topicData, cleanupPolicy: value });\n  };\n\n  return (\n    <FormSection title={t(\"log\")} id=\"log\" titleElement={\"h2\"}>\n      <TextContent>\n        <Text component={TextVariants.p}>{t(\"log_section_info\")}</Text>\n        <Text component={TextVariants.small}>{t(\"log_section_info_note\")}</Text>\n      </TextContent>\n\n      <FormGroupWithPopover\n        fieldId=\"cleanup-policy\"\n        fieldLabel={t(\"cleanup_policy\")}\n        labelHead={t(\"cleanup_policy\")}\n        labelBody={t(\"cleanup_policy_description\")}\n        buttonAriaLabel={t(\"cleanup_policy\")}\n      >\n        <DropdownWithToggle\n          id=\"log-section-policy-type-dropdown\"\n          toggleId=\"log-section-policy-type-dropdowntoggle\"\n          ariaLabel={t(\"select_policy\")}\n          onSelectOption={onSelectOption}\n          items={cleanupPolicyOptions}\n          name=\"cleanup-policy\"\n          value={topicData[\"cleanup.policy\"]}\n          isLabelAndValueNotSame={true}\n        />\n      </FormGroupWithPopover>\n\n      <TextWithLabelPopover\n        fieldId=\"delete-retention-time\"\n        btnAriaLabel={t(\"delete_retention_time\")}\n        fieldLabel={t(\"delete_retention_time\")}\n        fieldValue={t(\"milliseconds_time_to_day\", {\n          value: defaultDeleteRetentionTime,\n          days: convert(Number(defaultDeleteRetentionTime), \"milliseconds\").to(\n            \"days\"\n          ),\n        })}\n        popoverBody={t(\"delete_retention_time_description\")}\n        popoverHeader={t(\"delete_retention_time\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"min-cleanable-ratio\"\n        btnAriaLabel={t(\"min_cleanable_ratio\")}\n        fieldLabel={t(\"min_cleanable_ratio\")}\n        fieldValue={String(defaultMinCleanbleRatio)}\n        popoverBody={t(\"min_cleanable_ratio_description\")}\n        popoverHeader={t(\"min_cleanable_ratio\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"min-compaction-lag-time-description\"\n        btnAriaLabel={t(\"min_compaction_lag_time\")}\n        fieldLabel={t(\"min_compaction_lag_time\")}\n        fieldValue={t(\"milliseconds_time\", {\n          value: defaultMinimumCompactionLagTime,\n        })}\n        popoverBody={t(\"min_compaction_lag_time_description\")}\n        popoverHeader={t(\"min_compaction_lag_time\")}\n      />\n    </FormSection>\n  );\n};\n\nexport { Log };\n","import {\n  FormSection,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type React from \"react\";\nimport { TextWithLabelPopover } from \"./TextWithLabelPopover\";\n\ntype MessageProps = {\n  defaultMaximumMessageBytes: bigint;\n  defaultMessageTimestampType: string;\n  defaultMaxMessageTimestampDiff: bigint;\n};\n\nconst Message: React.FC<MessageProps> = ({\n  defaultMaximumMessageBytes,\n  defaultMessageTimestampType,\n  defaultMaxMessageTimestampDiff,\n}) => {\n  const { t } = useTranslation([\"create-topic\"]);\n\n  return (\n    <FormSection title={t(\"messages\")} id=\"messages\" titleElement={\"h2\"}>\n      <TextContent>\n        <Text component={TextVariants.p} className=\"section-info\">\n          {t(\"message_section_info\")}\n        </Text>\n      </TextContent>\n\n      <TextWithLabelPopover\n        fieldId=\"max-message-size\"\n        btnAriaLabel={t(\"max_message_size\")}\n        fieldLabel={t(\"max_message_size\")}\n        fieldValue={t(\"bytes_size\", { value: defaultMaximumMessageBytes })}\n        popoverBody={t(\"max_message_size_description\")}\n        popoverHeader={t(\"max_message_size\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"message-timestamp-type\"\n        btnAriaLabel={t(\"message_timestamp_type\")}\n        fieldLabel={t(\"message_timestamp_type\")}\n        fieldValue={String(defaultMessageTimestampType)}\n        popoverBody={t(\"message_timestamp_type_description\")}\n        popoverHeader={t(\"message_timestamp_type\")}\n      />\n      <TextWithLabelPopover\n        fieldId=\"max-message-timestamp-diff\"\n        btnAriaLabel={t(\"max_message_timestamp_diff\")}\n        fieldLabel={t(\"max_message_timestamp_diff\")}\n        fieldValue={t(\"milliseconds_time\", {\n          value: defaultMaxMessageTimestampDiff,\n        })}\n        popoverBody={t(\"max_message_timestamp_diff_description\")}\n        popoverHeader={t(\"max_message_timestamp_diff\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"compression-type\"\n        btnAriaLabel={t(\"compression_type\")}\n        fieldLabel={t(\"compression_type\")}\n        fieldValue={\"Producer\"}\n        popoverBody={t(\"compression_type_description\")}\n        popoverHeader={t(\"compression_type\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"message-format\"\n        btnAriaLabel={t(\"message_format\")}\n        fieldLabel={t(\"message_format\")}\n        fieldValue={\"2.7-IV2\"}\n        popoverBody={t(\"message_format_description\")}\n        popoverHeader={t(\"message_format\")}\n      />\n    </FormSection>\n  );\n};\n\nexport { Message };\n","import {\n  FormSection,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type React from \"react\";\nimport { TextWithLabelPopover } from \"./TextWithLabelPopover\";\n\nconst Replication: React.FC = () => {\n  const { t } = useTranslation([\"create-topic\", \"common\"]);\n\n  return (\n    <FormSection title={t(\"replication\")} id=\"replication\" titleElement={\"h2\"}>\n      <TextContent>\n        <Text component={TextVariants.p}>\n          {t(\"replication_section_info\")}\n          <Text component={TextVariants.small}>\n            {t(\"replication_section_info_note\")}\n          </Text>\n        </Text>\n      </TextContent>\n\n      <TextWithLabelPopover\n        fieldId=\"unclean-leader-election\"\n        btnAriaLabel={t(\"unclean_leader_election\")}\n        fieldLabel={t(\"unclean_leader_election\")}\n        fieldValue={t(\"common:disabled\")}\n        popoverBody={t(\"unclean_leader_election_description\")}\n        popoverHeader={t(\"unclean_leader_election\")}\n      />\n    </FormSection>\n  );\n};\n\nexport { Replication };\n","import {\n  FormSection,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport convert from \"convert\";\nimport type React from \"react\";\nimport { TextWithLabelPopover } from \"./TextWithLabelPopover\";\n\ntype TopicAdavanceIndexProps = {\n  defaultIndexIntervalSize: bigint;\n  defaultSegmentIndexSize: bigint;\n};\n\nconst TopicAdvanceIndex: React.FC<TopicAdavanceIndexProps> = ({\n  defaultIndexIntervalSize,\n  defaultSegmentIndexSize,\n}) => {\n  const { t } = useTranslation([\"create-topic\"]);\n\n  return (\n    <FormSection title={t(\"index\")} id=\"index\" titleElement={\"h2\"}>\n      <TextContent>\n        <Text component={TextVariants.p} className=\"section-info\">\n          {t(\"index_section_info\")}\n        </Text>\n      </TextContent>\n\n      <TextWithLabelPopover\n        fieldId=\"index-interval-size\"\n        btnAriaLabel={t(\"index_interval_size\")}\n        fieldLabel={t(\"index_interval_size\")}\n        fieldValue={t(\"bytes_to_kibibytes\", {\n          bytes: defaultIndexIntervalSize,\n          kibibytes: convert(Number(defaultIndexIntervalSize), \"bytes\").to(\n            \"kibibytes\"\n          ),\n        })}\n        popoverBody={t(\"index_interval_size_description\")}\n        popoverHeader={t(\"index_interval_size\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"segment-index-size\"\n        btnAriaLabel={t(\"segment_index_size\")}\n        fieldLabel={t(\"segment_index_size\")}\n        fieldValue={t(\"bytes_to_mebibytes\", {\n          bytes: defaultSegmentIndexSize,\n          mebibytes: convert(Number(defaultIndexIntervalSize), \"bytes\").to(\n            \"mebibytes\"\n          ),\n        })}\n        popoverBody={t(\"segment_index_size_description\")}\n        popoverHeader={t(\"segment_index_size\")}\n      />\n    </FormSection>\n  );\n};\n\nexport { TopicAdvanceIndex };\n","import { JumpLinks, JumpLinksItem, SidebarPanel } from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type React from \"react\";\n\nexport type TopicAdvanceJumpLinksProps = {\n  canHaveDelete?: boolean;\n};\nconst TopicAdvanceJumpLinks: React.FC<TopicAdvanceJumpLinksProps> = ({\n  canHaveDelete,\n}) => {\n  const { t } = useTranslation([\"create-topic\"]);\n\n  return (\n    <SidebarPanel variant=\"sticky\">\n      <JumpLinks\n        isVertical\n        label={t(\"jump_to_section\")}\n        scrollableSelector=\".topic-properties\"\n        style={{ position: \"sticky\" }}\n        // offset={-164} // for header\n      >\n        <JumpLinksItem key={0} href=\"#core-configuration\">\n          {t(\"core_configuration\")}\n        </JumpLinksItem>\n        <JumpLinksItem key={1} href=\"#messages\">\n          {t(\"messages\")}\n        </JumpLinksItem>\n        <JumpLinksItem key={2} href=\"#log\">\n          {t(\"log\")}\n        </JumpLinksItem>\n        <JumpLinksItem key={3} href=\"#replication\">\n          {t(\"replication\")}\n        </JumpLinksItem>\n        <JumpLinksItem key={4} href=\"#cleanup\">\n          {t(\"cleanup\")}\n        </JumpLinksItem>\n        <JumpLinksItem key={5} href=\"#index\">\n          {t(\"index\")}\n        </JumpLinksItem>\n        <JumpLinksItem key={6} href=\"#flush\">\n          {t(\"flush\")}\n        </JumpLinksItem>\n        {canHaveDelete ? (\n          <JumpLinksItem key={7} href=\"#delete\">\n            {t(\"delete\")}\n          </JumpLinksItem>\n        ) : (\n          <></>\n        )}\n      </JumpLinks>\n    </SidebarPanel>\n  );\n};\n\nexport { TopicAdvanceJumpLinks };\n","import {\n  ActionGroup,\n  Button,\n  Divider,\n  Form,\n  PageGroup,\n  PageSection,\n  Sidebar,\n  SidebarContent,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type React from \"react\";\nimport { useState } from \"react\";\nimport type { Topic } from \"ui-models/src/models/topic\";\nimport { Cleanup } from \"./Cleanup\";\nimport { CoreConfiguration } from \"./CoreConfiguration\";\nimport { Flush } from \"./Flush\";\nimport { Log } from \"./Log\";\nimport { Message } from \"./Message\";\nimport { Replication } from \"./Replication\";\nimport { TopicAdvanceIndex } from \"./TopicAdvanceIndex\";\nimport { TopicAdvanceJumpLinks } from \"./TopicAdvanceJumpLinks\";\n\nexport type TopicAdvancePageProps = {\n  isCreate: boolean;\n  onConfirm: () => void;\n  handleCancel?: () => void;\n  topicData: Topic;\n  setTopicData: (val: Topic) => void;\n  checkTopicName: (value: string) => Promise<boolean>;\n  availablePartitionLimit: number;\n};\n\nexport const TopicAdvancePage: React.FunctionComponent<\n  TopicAdvancePageProps\n> = ({\n  isCreate,\n  onConfirm,\n  handleCancel,\n  topicData,\n  setTopicData,\n  checkTopicName,\n  availablePartitionLimit,\n}) => {\n  const { t } = useTranslation([\"create-topic\", \"common\"]);\n  const actionText = isCreate ? t(\"create_topic\") : t(\"common:save\");\n\n  //states\n\n  const [topicValidated, setTopicValidated] = useState<ValidatedOptions>(\n    ValidatedOptions.default\n  );\n  const [invalidText, setInvalidText] = useState(\"\");\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [warning, setWarning] = useState<boolean>(false);\n  const onValidateTopic = () => {\n    if (topicData?.name.length < 1) {\n      setInvalidText(t(\"common:required\"));\n      setTopicValidated(ValidatedOptions.error);\n    } else {\n      setIsLoading(true);\n\n      checkTopicName(topicData?.name)\n        .then((value) =>\n          value == false\n            ? (setInvalidText(t(\"already_exists\", { name: topicData?.name })),\n              setTopicValidated(ValidatedOptions.error))\n            : onConfirm()\n        )\n        .finally(() => setIsLoading(false));\n    }\n  };\n\n  return (\n    <PageSection padding={{ default: \"noPadding\" }}>\n      <Sidebar hasGutter>\n        <TopicAdvanceJumpLinks />\n        <SidebarContent>\n          <PageGroup\n            hasOverflowScroll={true}\n            id=\"topic-detail-view\"\n            aria-label={\"TODO\"}\n          >\n            <PageSection padding={{ default: \"noPadding\" }}>\n              <Form>\n                <CoreConfiguration\n                  isCreate={isCreate}\n                  topicData={topicData}\n                  setTopicData={setTopicData}\n                  checkTopicName={checkTopicName}\n                  availablePartitionLimit={availablePartitionLimit}\n                  invalidText={invalidText}\n                  setInvalidText={setInvalidText}\n                  setTopicValidated={setTopicValidated}\n                  topicValidated={topicValidated}\n                  setWarning={setWarning}\n                  warning={warning}\n                />\n                <Message\n                  defaultMaximumMessageBytes={\n                    topicData[\"max.message.bytes\"].value\n                  }\n                  defaultMessageTimestampType={\n                    topicData[\"message.timestamp.type\"]\n                  }\n                  defaultMaxMessageTimestampDiff={\n                    topicData[\"message.timestamp.difference.max.ms\"].value\n                  }\n                />\n                <Log\n                  topicData={topicData}\n                  setTopicData={setTopicData}\n                  defaultDeleteRetentionTime={topicData[\"retention.ms\"].value}\n                  defaultMinCleanbleRatio={\n                    topicData[\"min.cleanable.dirty.ratio\"]\n                  }\n                  defaultMinimumCompactionLagTime={\n                    topicData[\"min.compaction.lag.ms\"].value\n                  }\n                />\n                <Replication />\n                <Cleanup\n                  defaultLogSegmentSize={topicData[\"segment.bytes\"].value}\n                  defaultSegmentTime={topicData[\"segment.ms\"].value}\n                  defaultSegmentJitterTime={\n                    topicData[\"segment.jitter.ms\"].value\n                  }\n                  defaultFileDeleteDelay={\n                    topicData[\"file.delete.delay.ms\"].value\n                  }\n                />\n                <TopicAdvanceIndex\n                  defaultIndexIntervalSize={\n                    topicData[\"index.interval.bytes\"].value\n                  }\n                  defaultSegmentIndexSize={\n                    topicData[\"segment.index.bytes\"].value\n                  }\n                />\n                <Flush\n                  defaultFlushIntervalMessages={\n                    topicData[\"flush.messages\"].value\n                  }\n                  defaultFlushIntervalTime={topicData[\"flush.ms\"].value}\n                />\n              </Form>\n\n              <ActionGroup className=\"kafka-ui--sticky-footer\">\n                <Divider className=\"kafka-ui--divider--FlexShrink\" />\n                <Button\n                  isLoading={isLoading}\n                  onClick={onValidateTopic}\n                  variant=\"primary\"\n                  data-testid={\n                    isCreate\n                      ? \"topicAdvanceCreate-actionCreate\"\n                      : \"tabProperties-actionSave\"\n                  }\n                  isDisabled={topicValidated !== \"default\"}\n                >\n                  {actionText}\n                </Button>\n                <Button\n                  onClick={handleCancel}\n                  variant=\"link\"\n                  data-testid={\n                    isCreate\n                      ? \"topicAdvanceCreate-actionCancel\"\n                      : \"tabProperties-actionCancel\"\n                  }\n                >\n                  {t(\"common:cancel\")}\n                </Button>\n              </ActionGroup>\n            </PageSection>\n          </PageGroup>\n        </SidebarContent>\n      </Sidebar>\n    </PageSection>\n  );\n};\n","import { PageSection } from \"@patternfly/react-core\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport type { Topic } from \"ui-models/src/models/topic\";\nimport { TopicAdvancePage } from \"../components/TopicAdvancePage\";\n\nexport type EditTopicPropertiesProps = {\n  topic: Topic;\n  onCancel: () => void;\n};\n\nexport const EditTopicProperties: FunctionComponent<\n  EditTopicPropertiesProps\n> = ({ topic }) => {\n  const { t } = useTranslation([\"create-topic\"]);\n  return (\n    <PageSection\n      variant={\"light\"}\n      className={\"topic-properties\"}\n      hasOverflowScroll={true}\n      aria-label={\"TODO\"}\n    >\n      <TopicAdvancePage\n        isCreate={false}\n        onConfirm={() => {}}\n        handleCancel={() => {}}\n        topicData={topic}\n        setTopicData={() => {}}\n        checkTopicName={() => Promise.resolve(true)}\n        availablePartitionLimit={3}\n      />\n    </PageSection>\n  );\n};\n","import {\n  Button,\n  Divider,\n  Form,\n  FormSection,\n  PageGroup,\n  PageSection,\n  Sidebar,\n  SidebarContent,\n  Split,\n  SplitItem,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport type React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport type { Topic } from \"ui-models/src/models/topic\";\nimport {\n  formattedRetentionSize,\n  formattedRetentionTime,\n} from \"../../KafkaTopics/types\";\nimport { TextWithLabelPopover } from \"../components\";\nimport { Cleanup } from \"../components/Cleanup\";\nimport { Flush } from \"../components/Flush\";\nimport { Message } from \"../components/Message\";\nimport { Replication } from \"../components/Replication\";\nimport { TopicAdvanceIndex } from \"../components/TopicAdvanceIndex\";\nimport { TopicAdvanceJumpLinks } from \"../components/TopicAdvanceJumpLinks\";\n\nexport type TopicViewDetailProps = {\n  topic: Topic;\n  deleteTopicHref: string;\n  updateTopicHref: string;\n};\n\nexport const TopicProperties: React.FunctionComponent<TopicViewDetailProps> = ({\n  topic,\n  deleteTopicHref,\n  updateTopicHref,\n}) => {\n  const { t } = useTranslation([\"create-topic\"]);\n  return (\n    <PageSection\n      variant={\"light\"}\n      className={\"topic-properties\"}\n      hasOverflowScroll={true}\n      aria-label={\"TODO\"}\n    >\n      <Sidebar hasGutter>\n        <TopicAdvanceJumpLinks canHaveDelete={true} />\n        <SidebarContent>\n          <PageGroup\n            hasOverflowScroll={true}\n            aria-label={\"TODO\"}\n            id=\"topic-detail-view\"\n            className={\"pf-u-mb-4xl\"}\n          >\n            <PageSection padding={{ default: \"noPadding\" }}>\n              <Split>\n                <SplitItem isFilled>\n                  <Form id=\"topic-form\">\n                    <FormSection\n                      title={t(\"core_configuration\")}\n                      id=\"core-configuration\"\n                      titleElement={\"h2\"}\n                    >\n                      <TextContent>\n                        <Text\n                          component={TextVariants.p}\n                          className=\"section-info\"\n                        >\n                          {t(\"core_config_info\")}\n                        </Text>\n                      </TextContent>\n\n                      <TextWithLabelPopover\n                        fieldId=\"topic-name\"\n                        btnAriaLabel={t(\"name\")}\n                        fieldLabel={t(\"topic_name\")}\n                        fieldValue={topic.name}\n                        popoverBody={t(\"topic_name_description\")}\n                        popoverHeader={t(\"topic_name\")}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId=\"partitions\"\n                        btnAriaLabel={t(\"partitions\")}\n                        fieldLabel={t(\"partitions\")}\n                        fieldValue={topic.partitions.length.toString()}\n                        popoverBody={t(\"partitions_description\")}\n                        popoverHeader={t(\"partitions\")}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId=\"replicas\"\n                        btnAriaLabel={t(\"replicas\")}\n                        fieldLabel={t(\"replicas\")}\n                        fieldValue={\n                          \"TODO\" /* TODO this is a config from the Kafka instance itself, should we be showing it? */\n                        }\n                        popoverBody={t(\"replicas_description\")}\n                        popoverHeader={t(\"replicas\")}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId=\"min-insync-replicas\"\n                        btnAriaLabel={t(\"min_insync_replicas\")}\n                        fieldLabel={t(\"min_insync_replicas\")}\n                        fieldValue={topic[\"min.insync.replicas\"].toString()}\n                        popoverBody={t(\"min_insync_replicas_description\")}\n                        popoverHeader={t(\"min_insync_replicas\")}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId=\"retention-time\"\n                        btnAriaLabel={t(\"retention_time\")}\n                        fieldLabel={t(\"retention_time\")}\n                        fieldValue={formattedRetentionTime(\n                          topic[\"retention.ms\"].value\n                        )}\n                        popoverBody={t(\"retention_time_description\")}\n                        popoverHeader={t(\"retention_time\")}\n                        showUnlimited={true}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId=\"retention-size\"\n                        btnAriaLabel={t(\"retention_size\")}\n                        fieldLabel={t(\"retention_size\")}\n                        fieldValue={formattedRetentionSize(\n                          topic[\"retention.bytes\"].value\n                        )}\n                        popoverHeader={t(\"retention_size\")}\n                        popoverBody={t(\"retention_size_description\")}\n                        showUnlimited={true}\n                      />\n                    </FormSection>\n                    <Message\n                      defaultMaximumMessageBytes={\n                        topic[\"max.message.bytes\"].value\n                      }\n                      defaultMessageTimestampType={\n                        topic[\"message.timestamp.type\"]\n                      }\n                      defaultMaxMessageTimestampDiff={\n                        topic[\"message.timestamp.difference.max.ms\"].value\n                      }\n                    />\n                    <FormSection title={t(\"log\")} id=\"log\" titleElement={\"h2\"}>\n                      <TextContent>\n                        <Text component={TextVariants.p}>\n                          {t(\"log_section_info\")}\n                          <Text\n                            component={TextVariants.small}\n                            className=\"section-info-note\"\n                          >\n                            {t(\"log_section_info_note\")}\n                          </Text>\n                        </Text>\n                      </TextContent>\n\n                      <TextWithLabelPopover\n                        fieldId=\"cleanup-policy\"\n                        btnAriaLabel={t(\"cleanup_policy\")}\n                        fieldLabel={t(\"cleanup_policy\")}\n                        fieldValue={topic[\"cleanup.policy\"]}\n                        popoverBody={t(\"cleanup_policy_description\")}\n                        popoverHeader={t(\"cleanup_policy\")}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId=\"delete-retention-time\"\n                        btnAriaLabel={t(\"delete_retention_time\")}\n                        fieldLabel={t(\"delete_retention_time\")}\n                        fieldValue={topic[\n                          \"delete.retention.ms\"\n                        ].value.toString()}\n                        popoverBody={t(\"delete_retention_time_description\")}\n                        popoverHeader={t(\"delete_retention_time\")}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId=\"min-cleanable-ratio\"\n                        btnAriaLabel={t(\"min_cleanable_ratio\")}\n                        fieldLabel={t(\"min_cleanable_ratio\")}\n                        fieldValue={topic[\n                          \"min.cleanable.dirty.ratio\"\n                        ].toString()}\n                        popoverBody={t(\"min_cleanable_ratio_description\")}\n                        popoverHeader={t(\"min_cleanable_ratio\")}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId=\"min-compaction-lag-time\"\n                        btnAriaLabel={t(\"min_compaction_lag_time\")}\n                        fieldLabel={t(\"min_compaction_lag_time\")}\n                        fieldValue={topic[\n                          \"min.compaction.lag.ms\"\n                        ].value.toString()}\n                        popoverBody={t(\"min_compaction_lag_time_description\")}\n                        popoverHeader={t(\"min_compaction_lag_time\")}\n                      />\n                    </FormSection>\n                    <Replication />\n                    <Cleanup\n                      defaultLogSegmentSize={topic[\"segment.bytes\"].value}\n                      defaultSegmentTime={topic[\"segment.ms\"].value}\n                      defaultSegmentJitterTime={\n                        topic[\"segment.jitter.ms\"].value\n                      }\n                      defaultFileDeleteDelay={\n                        topic[\"file.delete.delay.ms\"].value\n                      }\n                    />\n                    <TopicAdvanceIndex\n                      defaultIndexIntervalSize={\n                        topic[\"index.interval.bytes\"].value\n                      }\n                      defaultSegmentIndexSize={\n                        topic[\"segment.index.bytes\"].value\n                      }\n                    />\n                    <Flush\n                      defaultFlushIntervalMessages={\n                        topic[\"flush.messages\"].value\n                      }\n                      defaultFlushIntervalTime={topic[\"flush.ms\"].value}\n                    />\n                  </Form>\n\n                  <Divider className=\"pf-u-mt-2xl pf-u-mb-2xl\" />\n\n                  <TextContent>\n                    <Text component={TextVariants.h2} id=\"delete\">\n                      {t(\"delete_topic_irreversible\")}\n                    </Text>\n                    <Text component={TextVariants.p} className=\"section-info\">\n                      {t(\"delete_topic_info\")}\n                    </Text>\n                    <Button\n                      variant=\"danger\"\n                      data-testid=\"tabProperties-actionDelete\"\n                      component={(props) => (\n                        <Link {...props} to={deleteTopicHref}>\n                          {t(\"delete_topic\")}\n                        </Link>\n                      )}\n                    />\n                  </TextContent>\n                </SplitItem>\n                <SplitItem>\n                  <Button\n                    variant=\"primary\"\n                    data-testid=\"tabProperties-actionEdit\"\n                    component={(props) => (\n                      <Link {...props} to={updateTopicHref}>\n                        {t(\"edit_props\")}\n                      </Link>\n                    )}\n                  />\n                </SplitItem>\n              </Split>\n            </PageSection>\n          </PageGroup>\n        </SidebarContent>\n      </Sidebar>\n    </PageSection>\n  );\n};\n"],"names":["NewInstanceSegment","ClusterSegment","ControlPlaneSpecialSegments","ControlPlaneRouteRoot","ControlPlaneRoutePath","ControlPlaneNewInstancePath","ControlPlaneDeleteInstancePath","ControlPlaneChangeOwnerPath","DedicatedControlPlaneRouteRoot","DedicatedControlPlaneRoutePath","DedicatedControlPlaneClustersPath","DedicatedControlPlaneNewInstancePath","DedicatedControlPlaneDeleteInstancePath","DedicatedControlPlaneChangeOwnerPath","DrawerContext","createContext","DrawerProvider","children","standardMatch","useRouteMatch","dedicatedMatch","match","Error","selectedInstance","params","id","includes","undefined","section","instance","useState","isExact","isExpanded","setIsExpanded","activeTab","setActiveTab","onClose","useRef","toggleExpanded","useCallback","newValue","prev","current","useEffect","value","useMemo","Provider","onTabChange","useDrawer","context","useContext","RedirectOnGateError","redirectUrl","key","useLocation","ErrorBoundary","resetKeys","fallbackRender","RedirectAndResetError","reset","Redirect","to","ConnectedControlPlaneHeader","activeSection","sectionsHref","standard","dedicated","clusters","useKafkaInstancesTable","instancesHref","instanceSelectedHref","instanceCreationHref","instanceDeletionHref","instanceChangeOwnerHref","history","useHistory","setActiveQuickStart","QuickStartContext","replace","labels","usePaginationSearchParams","page","perPage","setPagination","setPaginationQuery","resetPaginationQuery","namesChips","useURLSearchParamsChips","ownersChips","statusesChips","useSortableSearchParams","fields","isColumnSortable","sort","sortDirection","onClearAllFilters","clearChained","openDrawer","tab","onDetailsClick","onConnectionsClick","onCreate","push","onDelete","onChangeOwner","onQuickstartGuide","KafkaInstancesRoute","getUrlForInstance","data","name","chips","owner","status","direction","deployment","instances","itemCount","count","names","owners","statuses","onPageChange","onSearchName","add","onRemoveNameChip","remove","onRemoveNameChips","clear","onSearchOwner","onRemoveOwnerChip","onRemoveOwnerChips","onSearchStatus","toggle","onRemoveStatusChip","onRemoveStatusChips","isRowSelected","onDetails","onConnection","onClickConnectionTabLink","onClickSupportLink","onInstanceLinkClick","canHaveInstanceLink","canOpenConnection","canChangeOwner","canDelete","CreateKafkaInstanceRoute","callbacks","auth","useChrome","getUsername","getUser","username","identity","user","Promise","reject","checkDeveloperAvailabilityQuery","standardQuotaQuery","providersWithRegionsQuery","getProvidersInfo","getProviderRegionsSizes","checkDeveloperAvailability","onAvailable","onUsed","onUnavailable","checkStandardQuota","onQuotaAvailable","onNoQuotaAvailable","onOutOfQuota","hasTrialQuota","remainingPrepaidQuota","remainingMarketplaceQuota","marketplaceSubscriptions","quota","fetchProvidersWithRegions","plan","providers","getStandardSizes","provider","region","providersInfo","providerInfo","find","p","getTrialSizes","standardSizes","length","displayName","trialSizes","trial","useCreateKafkaCallbacks","createKafkaInstance","qsContext","onClickKafkaOverview","onClickQuickStart","onSuccess","onError","mutateAsync","onCancel","CreateKafkaInstance","isModalOpen","onClickContactUs","onLearnHowToAddStreamingUnits","onLearnMoreAboutSizes","subscriptionOptionsHref","document","location","href","appendTo","getElementById","body","useControlPlaneGate","enterpriseMatch","DeleteKafkaInstanceRoute","isDeleting","instanceName","ChangeOwnerRoute","accounts","updateInstance","onConfirm","newOwner","mutate","updates","savingState","isLoading","isError","error","type","currentOwner","map","a","ControlPlaneRoutes","Route","path","exact","DedicatedClustersRoute","DedicatedKafkaInstancesRoute","DedicatedControlPlaneRoutes","Switch","DataPlaneRoutePath","DataPlaneTopicRoutePath","DataPlaneConsumerGroupRoutePath","DataPlaneTopicConsumerGroupRoutePath","DedicatedDataPlaneRoutePath","DedicatedDataPlaneTopicRoutePath","DedicatedDataPlaneTopicConsumerGroupRoutePath","useDataPlaneGate","DataPlaneHeaderConnected","url","dashboard","topics","consumer","permissions","settings","AclsRoute","PageSection","TopicsRoute","topicChips","adminUrl","filter","topicName","getUrlFortopic","row","onEdit","onSearchTopic","onCreateTopic","onRemoveTopicChip","onRemoveTopicChips","onTopicLinkClick","SettingsRoute","onSubmitReAuthentication","reauthenticationEnabled","reauthentication_enabled","request","DashboardRoute","hasUserAlreadyClosedAlert","setHasUserAlreadyClosedAlert","onAlertClose","queryInstance","queryKpisMetrics","queryInstanceMetrics","queryTopicMetrics","queryTopics","getMetricsKpi","kpis","topicPartitionsLimit","maxPartitions","getKafkaInstanceMetrics","interval","duration","all","metrics","diskSpaceLimit","max_data_retention_size","bytes","connectionsLimit","connections","connectionRateLimit","connectionRate","getTopicsMetrics","selectedTopic","kafkaTopics","t","ConsumerGroupsRoute","instanceConsumerGroupsHref","groupId","consumerName","onDeletConsumerGroup","onViewPartition","onClickResetOffset","consumers","groups","onSearchConsumer","onRemoveConsumerChip","onRemoveConsumerChips","onViewResetOffset","useTopicGate","topic","DataPlaneTopicHeaderConnected","instanceDetailsHref","instanceTopicsHref","tabsHref","messages","properties","schemas","instanceDetailHref","TopicConsumerGroupsRoute","TopicMessagesGroupsRoute","kafkaTopicMessagesFetchQuery","getMessages","partitions","TopicPropertiesRoute","deleteTopicHref","updateTopicHref","TopicSchemasRoute","chrome","processor2","entry","e","basename","srs","getToken","AuthContext","ConfigContext","apiBasePath","I18nProvider","lng","resources","en","common","srsTemporaryFixMe","debug","ScalprumComponent","appName","module","scope","ErrorComponent","processor","renderSchema","registry","version","registryId","useConsumerGroupGate","consumerGroup","consumerGroupId","ConsumerGroupDeleteRoute","instanceId","onDeleteConsumer","state","ConsumerGroupResetOffsetRoute","onConfirmResetOffset","offset","customOffsetValue","Array","from","Set","onClickClose","ConsumerGroupViewPartitionRoute","viewPartitionConsumerGroupHref","consumerGroupByTopic","activeMembers","activeConsumers","partitionsWithLag","laggingPartitions","onSelectDeleteConsumerGroup","onSelectResetOffsetConsumerGroup","useTopicConsumerGroupGate","TopicConsumerGroupDeleteRoute","instanceTopicConsumerGroupsHref","TopicConsumerGroupResetOffsetRoute","TopicConsumerGroupViewPartitionRoute","viewTopicPartitionConsumerGroupHref","DeleteKafkaTopic","props","useTranslation","DeleteModal","variant","title","confirmationValue","Trans","ns","i18nKey","components","values","TopicDeleteRoute","topicHref","TopicEditPropertiesRoute","instanceTopicConsumerGroupHref","DataPlaneRoutes","render","InvalidObject","DedicatedDataPlaneRoutes","useDedicatedGate","refetchInterval","ams","account","useApi","useQuery","queryKey","queryFn","apiAccountsMgmtV1CurrentAccountGet","args","organization","apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet","useStandardQuota","refetch","isSuccess","hasStandardQuota","isFetched","DedicatedUsersGate","gate","Loading","OverviewRoute","redirected","StandardUsersGate","Routes","memo","updateDocumentTitle","on","register","notifications","unregister","event","console","dir","navId","basePath","getPath","QuickstartLoader","loaded","setLoaded","quickStarts","AssetsContext","showDrafts","onLoad","qs","set","init","errorDescriptionKey","middleware","useConsumerGroup","suspense","consumerGroups","api","getConsumerGroupById","enabled","Boolean","useConsumerGroups","getConsumerGroups","useDedicatedClusters","dedicatedClusters","getEnterpriseOsdClusters","refetchOnWindowFocus","refetchOnReconnect","refetchOnMount","retry","kafkaRequestToKafkaInstanceEnhanched","developerPlanInstanceLimits","standardPlanInstanceLimits","enhancedInstance","billing","createdAt","created_at","Date","toISOString","egress","expiryDate","expires_at","ingress","messageSize","BigInt","billing_model","cloud_provider","size","accepted","preparing","provisioning","ready","failed","deprovision","deleting","storage","updatedAt","updated_at","bootstrapUrl","bootstrap_server_host","admin_api_server_url","marketplaceForBilling","ms","subscriptions","s","billing_cloud_account_id","marketplace","subscription","warn","thisInstanceLimits","instance_type","l","size_id","APIErrorCodes","useKafkaInstanceTransformer","getStandardQuotaQuery","useStandardQuotaFetchQuery","useProvidersWithRegionsFetchQuery","useProviderRegionSizesFetchQuery","JSON","stringify","standardQuota","standardPlanLimitsQuery","developerPlanLimitsQuery","standardPlanLimits","developerPlanLimits","useKafka","dataMapper","kafkasFleet","getKafkaById","useKafkas","queryClient","clusterIds","c","getKafkas","res","forEach","i","setQueryData","useTopic","getTopic","useTopics","getTopics","useUserAccounts","userAccounts","getUserAccounts","listPrincipals","useDeveloperInstanceAvailabilityFetchQuery","fleetApi","clustersApi","fetchQuery","clusterResponse","staleTime","Infinity","some","k","useKafkaFetchQuery","useKafkaKpisFetchQuery","getMetricsByInstantQuery","useKafkaMetricsFetchQuery","getMetricsByRangeQuery","useTopicsMetricsFetchQuery","useTopicsFetchQuery","useMessagesFetchQuery","records","consumeRecords","kms","getInstanceTypesByCloudProviderAndRegion","getCloudProviders","getCloudProviderRegions","skipCache","useCreateKafkaMutation","useMutation","kafkaRequest","sizeId","createKafka","isServiceApiError","code","response","DUPLICATE_INSTANCE_NAME","INTERNAL_CAPACITY_ERROR","INSUFFICIENT_QUOTA","invalidateQueries","UNAUTHORIZED_USER","TRIAL_USED","FAILED_TO_CHECK_QUOTA","OWNER_DOES_NOT_EXIST","useDeleteKafkaMutation","deleteKafkaById","message","useDeleteTopicMutation","deleteTopic","_","useUpdateKafkaMutation","updateKafkaById","getErrorCode","reason","AxiosError","useDeleteConsumerGroupMutation","deleteConsumerGroupById","useResetConsumerGroupMutation","resetConsumerGroupOffset","KafkaInstancesSortableColumns","KafkaTopicsSortableColumns","Object","TopicOrderKey","KafkaConsumerGroupSortableColumns","ConsumerGroupOrderKey","ReactQueryDevtoolsProduction","lazy","then","d","default","ReactQueryDevtools","ApiContext","ApiProvider","showDevTools","client","Suspense","fallback","useApiConfiguration","consumerGroupTransformer","stateMapping","lag","memberId","partition","logEndOffset","unassignedPartitions","DEAD","EMPTY","STABLE","UNKNOWN","COMPLETING_REBALANCE","PREPARING_REBALANCE","fetchConsumerGroup","fetchConsumerGroups","items","total","dedicatedClusterTransformer","cluster_id","fetchDedicatedClusters","MissingDedicatedEntitlement","fetchKafkaKpis","topicPartitions","metric","fetchKafkaMetrics","safeMetrics","m","persistentvolumeclaim","usedDiskSpaceMetrics","connectionAttemptRateMetrics","clientConnectionsMetrics","addAggregatedValuesTo","timestamp","valuesToQuery","field","comparison","join","v","trim","uiColumnMapping","fetchKafkas","search","flatMap","q","filtersToSearch","toString","rawInstances","fetchMessages","limit","headers","fetchOrganization","fetchProviderRegionSizes","instanceType","regions","regionInfo","r","availableSizes","capacity","available_sizes","sizes","instance_types","apiSizeToComponentSize","bind","isDisabled","apiSize","display_name","quota_consumed","ingress_throughput_per_sec","egress_throughput_per_sec","Math","round","total_max_connections","max_connection_attempts_per_sec","max_partitions","max_message_size","maturity_status","trialDurationHours","lifespan_seconds","allProviders","fetchProviderRegions","firstProvider","defaultProvider","max_capacity_reached","resourceName","isStandardQuota","related_resources","isMarketplaceQuota","fetchStandardQuota","organizationId","quotaResponse","statusText","standardQuotas","resource_name","product","prepaidQuota","marketplaceQuotas","allowed","consumed","reduce","agg","unaggregatedSubscriptions","cloud_accounts","subscriptionMarketplaces","cloud_provider_id","cloud_account_id","developerDefaults","preallocate","standardDefaults","topicTransformerFactory","cm","fromEntries","config","configValueToMilliseconds","configValueToBytes","configValueToBoolean","configValueToNumber","defaultIfEmpty","defaultIfError","parseInt","parse","fetchTopic","fetchTopics","fetchTopicsMetrics","filteredMetrics","bytesIncoming","bytesOutgoing","bytesPerPartition","incomingMessageRate","addAggregatedTotalBytesTo","metricsTopics","fetchUserAccounts","fullObject","first_name","last_name","email","isOrgAdmin","is_org_admin","masQueries","_root","entity","available","subentity","developerAvailability","standardAvailability","kafkaQueries","list","details","topicMessages","kpi","providerQueries","limits","developer","accessToken","DefaultApi","Configuration","token","PrincipalApi","AppServicesApi","TopicsApi","GroupsApi","RecordsApi","EnterpriseDataplaneClustersApi","METRICS_LAG_ALERT","isReactQueryDevToolsEanbled","localStorage","getItem","metricsIsLagAlertsDismissed","metricsDismissLagAlerts","setItem","CreatingStatuses","ReadyStatuses","DegradedStatuses","SuspendingStatuses","SuspendedStatuses","DeletingStatuses","ResumingStatuses","SimplifiedStatuses","creating","degraded","suspended","resuming","suspending","SelectOwner","isOpen","setIsOpen","selectOptions","filterRegExp","RegExp","test","SelectOption","description","Select","SelectVariant","onToggle","placeholderText","isCreatable","createText","menuAppendTo","maxHeight","selections","onSelect","onFilter","ChangeKafkaOwner","setAccount","submittedAccount","isSaving","onConfirmOwner","Modal","position","actions","Button","onClick","Form","onSubmit","preventDefault","Alert","AlertVariant","isInline","renderAlert","FormGroup","fieldId","label","Skeleton","width","ConsumerGroupPopover","Popover","headerContent","bodyContent","OutlinedQuestionCircleIcon","ConsumerGroupStateLabel","ConsumerGroupByKafka","columnNames","consumer_id","current_offset","log_end_offset","offset_lag","Stack","hasGutter","DescriptionList","columnModifier","lg","className","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","TableComposable","TableVariant","Thead","noWrap","Tr","Th","Tbody","Td","dataLabel","ConsumerGroupByTopic","ConsumerGroupDetails","ConsumerGroupEmptyState","EmptyState","EmptyStateVariant","EmptyStateIcon","icon","CubesIcon","Title","headingLevel","TitleSizes","EmptyStateBody","OffsetSelect","onChange","offsetValueOption","absolute","latest","earliest","toggleAriaLabel","selection","entries","TopicSelect","index","ConsumerGroupResetOffset","disableFocusTrap","setSelectedTopic","selectedOffset","setSelectedOffset","setcustomOffsetValue","isResetAccepted","setIsResetAccepted","selectedConsumer","setSelectedConsumer","isDisconnected","consumerList","isResetOffsetDisabled","tableColumns","clientId","new_offset","areAllConsumerSelected","isConsumerSelected","onResetOffset","ModalVariant","showClose","StackItem","isHorizontal","TextInput","readOnlyVariant","select","_event","isSelecting","onSelectAllConsumer","isSelected","rowIndex","String","Checkbox","isChecked","DeleteConsumerGroup","isConsumerConnected","Text","ConsumerGroupDrawer","dropdownItems","DropdownItem","panelContent","DrawerPanelContent","widths","DrawerHead","TextContent","component","TextVariants","DrawerActions","Dropdown","KebabToggle","isPlain","DropdownPosition","DrawerCloseButton","DrawerPanelBody","Drawer","DrawerContent","DrawerContentBody","useKafkaLabels","statusesSimplified","aws","gcp","azure","providerRegions","useTopicLabels","useConsumerGroupLabels","Columns","ConsumerGroups","isFiltered","isFilled","hasOverflowScroll","TableView","tableOuiaId","ariaLabel","columns","renderHeader","column","info","popover","popoverProps","renderCell","renderActions","ActionsColumn","filters","onSearch","onRemoveChip","onRemoveGroup","validate","errorMessage","emptyStateNoData","emptyStateNoResults","EmptyStateNoResults","ControlPlaneHeader","PageSectionVariants","Level","LevelItem","padding","hasShadowBottom","Nav","NavList","NavItem","style","borderTop","ouiaId","isActive","Link","onProviderChange","selectedProvider","defaultRegion","capabilities","form","creationError","tsTypes","predictableActionArguments","schema","events","services","initial","states","verifyAvailability","always","cond","target","overQuota","tags","instanceUnavailable","regionsUnavailable","configuring","unsubmitted","submitted","create","invalid","valid","fieldInvalid","submit","saving","createSuccess","createError","saved","empty","nameChange","providerChange","regionChange","idle","disabled","waitingForQuota","loading","invoke","src","onDone","sizeChange","billingChange","prepaidOnly","singleSubscription","onlySubscriptions","selectSubscription","prepaidAndSubscriptions","prepaid","selectPrepaid","setInitialContext","availableProviders","setName","setProvider","setRegion","setSize","setSizes","smallestSize","b","resetCreationErrorMessage","_context","setCreationError","triggerSave","triggerSubmit","triggerBillingChange","setBillingToPrepaid","setBillingToSubscription","unsetSubscription","guards","isOverQuota","instanceAvailability","isInstanceUnavailable","isRegionsUnavailable","nameIsEmpty","nameIsValid","providerIsValid","selectedProviderInfo","regionIsValid","noProviderOrRegion","noSizes","emptySizes","sizeIsDisabled","billingRequiredButNotSelected","meta","hasTag","sizeIsOverQuota","availableQuota","didProviderChange","didRegionChange","didSizeChange","onlyPrepaid","matchesSelectedProviderOrRHMarketplaceAndHasQuota","hasPrepaidQuota","noSelectedProvider","trialUsed","trialUnavailable","isTrialUsed","isTrialUnavailable","noProviderAndRegion","save","complete","setDeveloperAvailable","setDeveloperUnavailable","setDeveloperUsed","setStandardAvailable","setStandardOutOfQuota","setStandardUnavailable","setProviders","setProvidersOrRegionsUnavailable","setCapabilities","notifyCreateErrorToStandardPlan","notifyCreateErrorToTrialPlan","LogoAWS","URL","LogoAzure","LogoGCP","LogoRedhat","AWSLogo","alt","height","AzureLogo","GCPLogo","KafkaInstanceActions","rowData","hackZIndex","customChild","DropdownGroup","tooltipProps","content","tooltip","pointerEvents","cursor","isSeparator","actionProps","zIndex","DataPlaneHeader","actionsProps","Breadcrumb","BreadcrumbItem","DataPlaneTopicHeader","DedicatedClusters","toolbarBreakpoint","DeleteKafkaInstance","kafka","cluster","it","resolve","delete","DetailsTabAlert","hoursLeft","differenceInHours","now","time","FormatDate","date","format","KafkaDetailsTab","kafkaVersion","renderTextListItem","TextListItem","TextListItemVariants","screenreaderText","contentName","TextList","TextListVariants","SuspendedConnection","ExclamationTriangleIcon","color","KafkaConnectionTabP2","isKafkaSuspended","isKafkaPending","externalServer","tokenEndPointUrl","linkToServiceAccount","linkToAccessTab","adminAPIUrl","kafkaFleetManagerUrl","showCreateServiceAccountModal","fontSize","ClipboardCopy","textAriaLabel","isReadOnly","ButtonVariant","ExpandableSection","toggleContent","testId","HelpIcon","Label","SampleCodeSnippet","expandableCode","codeBlockCode","codeSnippet","copied","setCopied","copyCode","CodeBlockAction","ClipboardCopyButton","textId","exitDelay","maxWidth","text","navigator","clipboard","writeText","catch","CodeBlock","CodeBlockCode","isDetached","contentId","ExpandableSectionToggle","javaConfigCodeBlock","kafkaBootstrapUrl","tokenEndpointUrl","pythonConfigCodeBlock","pythonConfigExpandabledBlock","quarkusConfigExpandableBlock","springBootConfigCodeBlock","KafkaSampleCode","clientSelect","setClientSelect","clientProvider","java","python","quarkus","springboot","ToggleGroup","ToggleGroupItem","buttonId","client_type","KafkaInstanceDrawer","KafkaInstanceDrawerPanel","handleSelect","Tabs","activeKey","Tab","eventKey","TabTitleText","parseISO","getExternalServer","getAdminServerUrl","endsWith","StatusLabel","forwardRef","ref","showWarning","showError","withPopover","buttonVariant","Split","SplitItem","CheckCircleIcon","Spinner","Flex","FlexItem","HelperText","HelperTextItem","PopoverStatusOrder","KafkaToPopoverMapping","StatusProgressStepper","currentStatus","currentStep","findIndex","getVariant","ProgressStepper","isVertical","ProgressStep","titleId","isCurrent","StatusPopoverContent","StatusPopover","initialOpen","reference","isVisible","setIsVisible","handleClickConnectionTabLink","handleClickSupportLink","shouldOpen","shouldClose","enableFlip","SuspendedPopover","alertSeverityVariant","headerIcon","KafkaInstanceStatus","warningAfterMinutes","errorAfterMinutes","popoverStatus","alert","setAlert","labelRef","checkCreatedAt","elapsed","differenceInMinutes","useInterval","EmptyStateNoInstances","PlusCircleIcon","SearchIcon","KafkaInstances","timeCreatedDate","instanceLinkEnable","isAriaDisabled","changeOwnerEnabled","deleteEnabled","openConnectionEnabled","onRowClick","isRowDeleted","options","isPrimary","DateTimePicker","timeSelected","setIsTimeSelected","InputGroup","DatePicker","formatInTimeZone","newDate","formatISO","TimePicker","hour","minute","__","isValid","setHours","setMinutes","FilterGroup","epoch","onOffsetChange","onTimestampChange","onEpochChange","onLatest","currentCategory","setCurrentCategory","ToolbarItem","DropdownToggle","autoFocus","DropdownSeparator","placeholder","newOffset","Number","isInteger","LimitSelector","InputGroupText","hidden","idx","isSameMessage","m1","m2","beautifyUnknownValue","RetentionSizeUnits","RetentionTimeUnits","NoDataCell","columnLabel","MessageDetails","defaultTab","isResizable","minSize","MessageDetailsBody","messageKey","isCompact","defaultActiveKey","isCode","random","NoDataEmptyState","onRefresh","NoResultsEmptyState","onReset","OffsetRange","min","max","PartitionSelector","handleChange","valueAsNum","allPartitions","fill","makeOptions","slice","hiddenOptionsCount","handleFilter","typeAheadAriaLabel","isInputValuePersisted","onClear","InputGroupTextVariant","UnknownValuePreview","truncateAt","shouldTruncate","substring","truncate","preview","truncated","spaceItems","stopPropagation","MessageBrowserMachine","selectedMessage","initialLoading","fetchSuccess","fetchFail","verifyMessages","noData","refresh","pristine","dirty","shouldSearch","setPartition","setEpoch","setTimestamp","setOffset","setLatest","setLimit","selectMessage","deselectMessage","refreshing","setMessages","offsetMin","offsetMax","lastUpdated","noMessages","selectedMessageNotAvailable","areFiltersChanged","columnWidths","KafkaMessageBrowser","useMachine","devTools","send","KafkaMessageBrowserConnected","isFirstLoad","matches","isNoData","isRefreshing","requiresSearch","filterOffset","filterEpoch","filterTimestamp","setDefaultTab","columnLabels","OuterScrollContainer","Toolbar","ToolbarContent","ToolbarToggleGroup","toggleIcon","FilterIcon","breakpoint","ToolbarGroup","RefreshButton","alignment","InnerScrollContainer","ResponsiveTable","expectedLength","colIndex","keys","KafkaInstanceCapacityTable","firstStreamingUnit","secondStreamingUnit","table","MarketingPageHero","tagLine","description2","heroImage","heroImageSize","heroImageCanRepeat","heroImagePositionY","cta","MarketingPageSection","isWidthLimited","KafkaPageV3","Grid","Card","CardHeader","CardHeaderMain","CardTitle","CardBody","CardFooter","bold","alignSelf","justifyContent","flex","Divider","xl","orientation","EmptyStateNoTopic","PrincipalType","unitsToBytes","BYTE","KIBIBYTE","MEBIBYTE","GIBIBYTE","TEBIBYTE","unitsToMilliSecond","MILLISECOND","SECOND","MINUTE","HOUR","DAY","formattedRetentionTime","days","unit","hours","minutes","seconds","millisecondsToTime","formattedRetentionSize","bytesToMemorySize","tebibytes","gibibytes","mebibytes","kibibytes","KafkaTopics","DurationOptions","EmptyStateInitialLoading","EmptyStateMetricsUnavailable","TachometerAltIcon","MetricsLayout","metricsLagAlert","topicsKpi","topicPartitionsKpi","consumerGroupKpi","diskSpaceMetrics","topicMetrics","GridItem","sm","CardBodyLoading","Bullseye","isSVG","timeIntervalsMapping","Last5minutes","ticks","showDate","Last15minutes","Last30minutes","Last1hour","Last3hours","Last6hours","Last12hours","Last24hours","Last2days","Last7days","chartHeight","chartPadding","bottom","left","right","top","ChartSkeletonLoader","useChartWidth","containerRef","setWidth","handleResize","clientWidth","useLayoutEffect","window","addEventListener","removeEventListener","formatBytes","units","shouldShowDate","timeDuration","dateToChartValue","fromUnixTime","timestampsToTicks","timestamps","allTimestamps","mostRecentTs","sub","getTime","ChartLinearWithOptionalLimit","chartName","xLabel","yLabel","usageLimit","formatValue","emptyState","itemsPerRow","lineLabel","limitLabel","legendData","symbol","chart_color_black_500","chart_color_blue_300","areaColor","softLimitColor","chartData","area","softLimit","x","y","tickValues","getChartData","hasMetrics","Chart","ariaTitle","containerComponent","ChartVoronoiContainer","datum","constrainToVisibleArea","legendPosition","legendComponent","ChartLegend","themeColor","ChartTheme","legendAllowWrap","ChartAxis","C","tickFormat","dependentAxis","ChartGroup","ChartArea","ChartThreshold","stroke","colors","chart_color_cyan_300","ChartLogSizePerPartition","dataMap","ChartPopover","ChartTotalBytes","incomingTopicsData","outgoingTopicsData","incomingTopic","outgoingTopic","incomingTopicName","outgoingTopicName","incomingLine","metricsToLine","line","outgoingLine","chart_color_green_300","getBytesChartData","tickCount","ChartLine","EmptyStateNoMetricsData","EmptyStateNoMetricsDataForSelection","EmptyStateNoTopics","WrenchIcon","EmptyStateNoTopicSelected","DurationOptionsMap","FilterByTime","keyText","disableToolbar","onDurationChange","isTimeSelectOpen","setIsTimeSelectOpen","ariaId","mapping","SelectGroup","timeOptions","md","FilterByTopic","topicList","onSetSelectedTopic","isTopicSelectOpen","setIsTopicSelectOpen","selectKey","setSelectKey","allTopicsLabel","topicOptions","textInput","filteredTopics","indexOf","isGrouped","hasInlineFilter","ToolbarRefresh","ToolbarTopicsMetrics","onSetTimeDuration","CardTopicsMetrics","backendUnavailable","isInitialLoading","isJustCreated","onSelectedTopic","noTopics","selectedTopicNotInList","chartEmptyState","TotalBytesTitle","IncomingMessageRate","PartitionSizeTitle","ToolbarKafkaInstanceMetric","CardKafkaInstanceMetrics","usedDiskMetrics","ChartTitle","helperText","CardKpi","isFullHeight","shape","MetricsLagAlert","isClosed","actionClose","AlertActionCloseButton","PartitionCard","ExclamationCircleIcon","isExpandable","role","apiState","failure","after","KafkaInstanceMetricsMachine","fetchFailures","callApi","criticalFail","justCreated","withResponse","selectDuration","setFetchTimestamp","setMetrics","incrementRetries","resetRetries","setDuration","canRetryFetching","TopicsMetricsMachine","selectTopic","setTopic","MetricsKpiMachine","KafkaInstanceMetricsContext","KafkaInstanceMetricsProvider","service","callback","results","MetricsKpiContext","MetricsKpiProvider","TopicsMetricsContext","TopicsMetricsProvider","useKafkaInstanceMetrics","isFailed","useTopicsMetrics","onTopicChange","localeCompare","Metrics","ConnectedMetrics","kafkaInstanceMetrics","topicsMetrics","metricsKpi","useMetricsKpi","ConnectedKafkaInstanceMetrics","ConnectedTopicsMetrics","Settings","connectionStatus","setConnectionStatus","setIsModalOpen","handleReAuthentication","reAuthValue","reauthentication","flexWrap","grow","spacer","checked","titleIconVariant","retentionTimeSelectOptions","isPlaceholder","retentionSizeSelectOptions","fieldLabel","btnAriaLabel","fieldValue","popoverBody","popoverHeader","displayText","labelIcon","noVerticalAlign","Cleanup","defaultFileDeleteDelay","defaultLogSegmentSize","defaultSegmentJitterTime","defaultSegmentTime","FormSection","titleElement","gibibyte","milliseconds","CustomRetentionMessage","topicData","NumberInput","onMinus","onPlus","CustomRetentionSize","CoreConfiguration","isCreate","setTopicData","invalidText","setInvalidText","setTopicValidated","topicValidated","availablePartitionLimit","validateName","legalNameChars","retentionSizeUnit","setRetentionSizeUnit","retentionTimeUnit","setRetentionTimeUnit","isRetentionTimeSelectOpen","setIsRetentionTimeSelectOpen","isRetentionSizeSelectOpen","setIsRetentionSizeSelectOpen","validationCheck","ValidatedOptions","handleRetentionMessageSize","handleRetentionMessageTime","retentionTimeInput","toggleId","retentionSizeInput","labelHead","labelBody","buttonAriaLabel","helperTextInvalid","validated","isRequired","inputName","plusBtnProps","minusBtnProps","Radio","Flush","defaultFlushIntervalMessages","defaultFlushIntervalTime","Log","defaultDeleteRetentionTime","defaultMinCleanbleRatio","defaultMinimumCompactionLagTime","cleanupPolicyOptions","DropdownWithToggle","onSelectOption","isLabelAndValueNotSame","Message","defaultMaximumMessageBytes","defaultMessageTimestampType","defaultMaxMessageTimestampDiff","Replication","TopicAdvanceIndex","defaultIndexIntervalSize","defaultSegmentIndexSize","TopicAdvanceJumpLinks","canHaveDelete","SidebarPanel","JumpLinks","scrollableSelector","JumpLinksItem","handleCancel","checkTopicName","actionText","setIsLoading","warning","setWarning","Sidebar","SidebarContent","PageGroup","ActionGroup","finally","EditTopicProperties","TopicProperties","showUnlimited"],"sourceRoot":""}