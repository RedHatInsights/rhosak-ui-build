{"version":3,"file":"js/566.1671024261823.c4d4fb8ca337e6b8a618.js","mappings":"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","sources":["webpack:///./src/routes/streams/routes.ts","webpack:///./src/DrawerProvider.tsx","webpack:///./src/routes/overview/OverviewRoute.tsx","webpack:///./src/routes/streams/detail/useDataPlaneInstance.tsx","webpack:///./src/routes/streams/detail/DataPlaneHeaderConnected.tsx","webpack:///./src/routes/streams/detail/AclsRoute.tsx","webpack:///./src/routes/streams/detail/ConsumerGroupsRoute.tsx","webpack:///./src/routes/streams/detail/DashboardRoute.tsx","webpack:///./src/routes/streams/detail/DataPlaneGate.tsx","webpack:///./src/routes/streams/detail/SettingsRoute.tsx","webpack:///./src/routes/streams/detail/TopicsRoute.tsx","webpack:///./src/routes/streams/kafka-instances/CreateKafkaInstanceRoute.tsx","webpack:///./src/routes/streams/kafka-instances/useCreateKafkaCallbacks.ts","webpack:///./src/routes/streams/kafka-instances/DeleteKafkaInstanceRoute.tsx","webpack:///./src/routes/streams/kafka-instances/KafkaInstancesRoute.tsx","webpack:///./src/routes/StreamsRoutes.tsx","webpack:///./src/App.tsx","webpack:///./src/store/index.ts","webpack:///../../packages/consoledot-api/src/ApiProvider.tsx","webpack:///../../packages/consoledot-api/src/queryKeys.ts","webpack:///../../packages/consoledot-api/src/useApi.ts","webpack:///../../packages/consoledot-api/src/transformers/kafkaRequestToKafkaInstanceEnhanched.ts","webpack:///../../packages/consoledot-api/src/queries/useKafkaInstanceTransformer.ts","webpack:///../../packages/consoledot-api/src/queries/useKafkaInstance.ts","webpack:///../../packages/consoledot-api/src/queries/useCreateInstance.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchKafkaTopics.ts","webpack:///../../packages/consoledot-api/src/utilsAndConstants.ts","webpack:///../../packages/consoledot-api/src/fetchers/valuesToQuery.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchKafkaInstances.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchKafkaKpiMetrics.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchKafkaTopicMetrics.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchKafkaConsumerGroups.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchProviderRegionSizes.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchKafkaInstanceMetrics.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchProvidersWithRegions.ts","webpack:///../../packages/consoledot-api/src/queries/useKafkaInstances.ts","webpack:///../../packages/consoledot-api/src/queries/useKafkaInstanceTopics.ts","webpack:///../../packages/consoledot-api/src/queries/useKafkaInstanceConsumerGroups.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useKafkaInstanceFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useStandardQuotaFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchOrganization.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchStandardQuota.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useKafkaInstanceTopicsFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useKafkaInstanceMetricsFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useProviderRegionSizesFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useProvidersWithRegionsFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useKafkaInstanceKpiMetricsFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useKafkaInstanceTopicMetricsFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useDeveloperInstanceAvailabilityFetchQuery.ts","webpack:///../../packages/consoledot-api/src/mutations/useKafkaCreateInstanceMutation.ts","webpack:///../../packages/consoledot-api/src/mutations/useKafkaDeleteInstanceMutation.ts","webpack:///../../packages/consoledot-api/src/types.ts","webpack:///../../packages/local-storage-helpers/index.ts","webpack:///../../packages/ui/src/components/ConsumerGroups/components/ConsumerGroupState.tsx","webpack:///../../packages/ui/src/components/ConsumerGroups/components/ConsumerGroupEmptyState.tsx","webpack:///../../packages/ui/src/components/ConsumerGroups/ConsumerGroups.tsx","webpack:///../../packages/ui/src/components/ControlPlaneHeader.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/machines/shared.ts","webpack:///../../packages/ui/src/components/CreateKafkaInstance/machines/StandardPlanMachine.ts","webpack:///../../packages/ui/src/components/CreateKafkaInstance/machines/TrialPlanMachine.ts","webpack:///../../packages/ui/src/components/CreateKafkaInstance/machines/CreateKafkaInstanceMachine.ts","webpack:///../../packages/ui/src/components/CreateKafkaInstance/machines/CreateKafkaInstanceProvider.tsx","webpack:///../../packages/ui/src/components/Logos/images.ts","webpack:///../../packages/ui/src/components/Logos/AWSLogo.tsx","webpack:///../../packages/ui/src/components/Logos/AzureLogo.tsx","webpack:///../../packages/ui/src/components/Logos/GCPLogo.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/components/BillingTiles.tsx","webpack:///../../packages/ui/src/components/Logos/RedhatLogo.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/components/CloudProviderTiles.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/StandardInstanceForm.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceActions.tsx","webpack:///../../packages/ui/src/components/DataPlaneHeader.tsx","webpack:///../../packages/ui/src/components/DeleteKafKaInstance/DeleteKafkaInstance.tsx","webpack:///../../packages/ui/src/components/I18nProvider.tsx","webpack:///../../packages/ui/src/hooks/useKafkaLabels.ts","webpack:///../../packages/ui/src/types.ts","webpack:///../../packages/ui/src/components/KafkaInstanceDrawer/components/DetailsTabAlert.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceDrawer/components/KafkaDetailsTab.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceDrawer/components/SuspendedConnection.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceDrawer/components/KafkaConnectionTabP2.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceDrawer/KafkaInstanceDrawer.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/components/StatusLabel.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/types.ts","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/components/StatusProgressStepper.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/components/StatusPopoverContent.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/components/StatusPopover.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/components/SuspendedPopover.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/KafkaInstanceStatus.tsx","webpack:///../../packages/ui/src/components/KafkaInstances/components/EmptyStateNoInstances.tsx","webpack:///../../packages/ui/src/components/KafkaInstances/components/EmptyStateNoResults.tsx","webpack:///../../packages/ui/src/components/KafkaInstances/KafkaInstances.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/MessageBrowserMachine.ts","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/utils.ts","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/types.ts","webpack:///../../packages/ui/src/components/KafkaInstanceCapacityTable.tsx","webpack:///../../packages/ui/src/components/MarketingPage.tsx","webpack:///../../packages/ui/src/components/KafkaPageV3.tsx","webpack:///../../packages/ui/src/components/KafkaTopics/components/EmptyStateNoTopic.tsx","webpack:///../../packages/ui/src/components/KafkaTopics/types.ts","webpack:///../../packages/ui/src/components/KafkaTopics/KafkaTopics.tsx","webpack:///../../packages/ui/src/components/Metrics/types.ts","webpack:///../../packages/ui/src/components/Metrics/components/EmptyStateInitialLoading.tsx","webpack:///../../packages/ui/src/components/Metrics/components/EmptyStateMetricsUnavailable.tsx","webpack:///../../packages/ui/src/components/Metrics/components/MetricsLayout.tsx","webpack:///../../packages/ui/src/components/Metrics/components/CardBodyLoading.tsx","webpack:///../../packages/ui/src/components/Metrics/consts.ts","webpack:///../../packages/ui/src/components/Metrics/components/ChartSkeletonLoader.tsx","webpack:///../../packages/ui/src/components/Metrics/components/useChartWidth.tsx","webpack:///../../packages/ui/src/components/Metrics/components/utils.ts","webpack:///../../packages/ui/src/components/Metrics/components/ChartLinearWithOptionalLimit.tsx","webpack:///../../packages/ui/src/components/Metrics/components/ChartLogSizePerPartition.tsx","webpack:///../../packages/ui/src/components/Metrics/components/ChartPopover.tsx","webpack:///../../packages/ui/src/components/Metrics/components/ChartTotalBytes.tsx","webpack:///../../packages/ui/src/components/Metrics/components/EmptyStateNoMetricsData.tsx","webpack:///../../packages/ui/src/components/Metrics/components/EmptyStateNoMetricsDataForSelection.tsx","webpack:///../../packages/ui/src/components/Metrics/components/EmptyStateNoTopics.tsx","webpack:///../../packages/ui/src/components/Metrics/components/EmptyStateNoTopicSelected.tsx","webpack:///../../packages/ui/src/components/Metrics/components/FilterByTime.tsx","webpack:///../../packages/ui/src/components/Metrics/components/FilterByTopic.tsx","webpack:///../../packages/ui/src/components/Metrics/components/ToolbarRefresh.tsx","webpack:///../../packages/ui/src/components/Metrics/components/ToolbarTopicsMetrics.tsx","webpack:///../../packages/ui/src/components/Metrics/components/CardTopicsMetrics.tsx","webpack:///../../packages/ui/src/components/Metrics/components/ToolbarKafkaInstanceMetric.tsx","webpack:///../../packages/ui/src/components/Metrics/components/CardKafkaInstanceMetrics.tsx","webpack:///../../packages/ui/src/components/Metrics/components/CardKpi.tsx","webpack:///../../packages/ui/src/components/Metrics/components/MetricsLagAlert.tsx","webpack:///../../packages/ui/src/components/Metrics/components/PartitionCard.tsx","webpack:///../../packages/ui/src/components/Metrics/machines/KafkaInstanceMetricsMachine.ts","webpack:///../../packages/ui/src/components/Metrics/machines/TopicsMetricsMachine.ts","webpack:///../../packages/ui/src/components/Metrics/machines/MetricsKpiMachine.ts","webpack:///../../packages/ui/src/components/Metrics/KafkaInstanceMetricsProvider.tsx","webpack:///../../packages/ui/src/components/Metrics/MetricsKpiProvider.tsx","webpack:///../../packages/ui/src/components/Metrics/TopicsMetricsProvider.tsx","webpack:///../../packages/ui/src/components/Metrics/useKafkaInstanceMetrics.tsx","webpack:///../../packages/ui/src/components/Metrics/useTopicsMetrics.tsx","webpack:///../../packages/ui/src/components/Metrics/Metrics.tsx","webpack:///../../packages/ui/src/components/Metrics/useMetricsKpi.tsx","webpack:///../../packages/ui/src/components/Settings/Settings.tsx"],"sourcesContent":["import type { DataPlaneHeaderProps } from \"ui\";\n\nexport const ControlPlaneRouteRoot = \"/kafkas\" as const;\nconst NewInstanceSegment = \"create\";\nexport const ControlPlaneSpecialSegments = [NewInstanceSegment];\n\nexport const ControlPlaneRoutePath =\n  `${ControlPlaneRouteRoot}/:id?/:section(delete)?` as const;\nexport const ControlPlaneNewInstancePath = `${ControlPlaneRouteRoot}/${NewInstanceSegment}`;\nexport const ControlPlaneDeleteInstancePath = `${ControlPlaneRouteRoot}/:id/delete`;\nexport type ControlPlaneRouteParams = { id?: string; section?: \"delete\" };\n\nexport const DataPlaneRoutePath =\n  `${ControlPlaneRouteRoot}/:id/details` as const;\nexport type DataPlaneRouteParams = { id: string };\nexport type NavigationProps = {\n  instancesHref: DataPlaneHeaderProps[\"instancesHref\"];\n};\n","import type { FunctionComponent, MutableRefObject } from \"react\";\nimport {\n  createContext,\n  useCallback,\n  useContext,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport type { KafkaInstanceDrawerTab } from \"ui\";\nimport type { ControlPlaneRouteParams } from \"./routes/streams/routes\";\nimport {\n  ControlPlaneRoutePath,\n  ControlPlaneSpecialSegments,\n} from \"./routes/streams/routes\";\n\ntype DrawerContextProps = {\n  selectedInstance: string | undefined;\n  activeTab: KafkaInstanceDrawerTab;\n  setActiveTab: (tab: KafkaInstanceDrawerTab) => void;\n  isExpanded: boolean;\n  toggleExpanded: (newState?: boolean) => void;\n  onClose: MutableRefObject<(() => void) | undefined>;\n};\nconst DrawerContext = createContext<DrawerContextProps>(null!);\n\nexport const DrawerProvider: FunctionComponent = ({ children }) => {\n  const match = useRouteMatch<ControlPlaneRouteParams>(ControlPlaneRoutePath);\n  if (!match) {\n    throw Error(\"DrawerProvider used outside the expected route\");\n  }\n  const selectedInstance =\n    (match.params.id &&\n      ControlPlaneSpecialSegments.includes(match.params.id)) ||\n    match.params.section !== undefined\n      ? undefined\n      : match.params.id;\n  const [isExpanded, setIsExpanded] = useState(\n    selectedInstance !== undefined && match.isExact\n  );\n  const [activeTab, setActiveTab] = useState<KafkaInstanceDrawerTab>(\"details\");\n  const onClose = useRef<() => void | undefined>();\n\n  const toggleExpanded = useCallback((newValue: boolean | undefined) => {\n    setIsExpanded((prev) => {\n      const isExpanded = newValue !== undefined ? newValue : !prev;\n      if (isExpanded === false && onClose.current) {\n        onClose.current();\n      }\n      return isExpanded;\n    });\n  }, []);\n\n  const value = useMemo(() => {\n    const shouldBeExpanded = selectedInstance !== undefined && isExpanded;\n\n    return {\n      selectedInstance: selectedInstance,\n      activeTab,\n      setActiveTab,\n      isExpanded: shouldBeExpanded,\n      toggleExpanded,\n      onClose,\n    };\n  }, [activeTab, isExpanded, selectedInstance, toggleExpanded]);\n\n  return (\n    <DrawerContext.Provider value={value}>{children}</DrawerContext.Provider>\n  );\n};\n\nexport function useDrawer(onClose?: () => void) {\n  const context = useContext(DrawerContext);\n  context.onClose.current = onClose;\n  return context;\n}\n","import type { VoidFunctionComponent } from \"react\";\nimport { KafkaPageV3 } from \"ui\";\n\nexport const OverviewRoute: VoidFunctionComponent = () => {\n  return <KafkaPageV3 />;\n};\n","import { useKafkaInstance } from \"consoledot-api\";\nimport { useEffect } from \"react\";\nimport { useHistory, useRouteMatch } from \"react-router-dom\";\nimport type { DataPlaneRouteParams } from \"../routes\";\nimport { DataPlaneRoutePath } from \"../routes\";\n\nexport function useDataPlaneInstance(instancesHref: string) {\n  const history = useHistory();\n\n  const match = useRouteMatch<DataPlaneRouteParams>(DataPlaneRoutePath);\n\n  if (!match) {\n    throw Error(\"useDataPlaneInstance used outside the expected route\");\n  }\n  const { data: instance, isError } = useKafkaInstance(match.params.id);\n\n  useEffect(() => {\n    if (isError) {\n      history.replace(instancesHref);\n    }\n  }, [history, instancesHref, isError]);\n\n  return { instance, match };\n}\n","import type { VoidFunctionComponent } from \"react\";\nimport type { DataPlaneHeaderProps } from \"ui\";\nimport { DataPlaneHeader, ReadyStatuses } from \"ui\";\nimport { useDrawer } from \"../../../DrawerProvider\";\nimport type { NavigationProps } from \"../routes\";\nimport { useDataPlaneInstance } from \"./useDataPlaneInstance\";\n\nexport const DataPlaneHeaderConnected: VoidFunctionComponent<\n  NavigationProps & Pick<DataPlaneHeaderProps, \"activeSection\">\n> = ({ instancesHref, activeSection }) => {\n  const { setActiveTab, toggleExpanded } = useDrawer();\n\n  const {\n    instance,\n    match: { url },\n  } = useDataPlaneInstance(instancesHref);\n\n  const sectionsHref = {\n    dashboard: `${url}/dashboard`,\n    topics: `${url}/topics`,\n    consumer: `${url}/consumer-groups`,\n    permissions: `${url}/acls`,\n    settings: `${url}/settings`,\n  };\n\n  return (\n    <DataPlaneHeader\n      instancesHref={instancesHref}\n      instanceName={instance?.name || \"\"}\n      activeSection={activeSection}\n      sectionsHref={sectionsHref}\n      onDetails={() => {\n        setActiveTab(\"details\");\n        toggleExpanded(true);\n      }}\n      onConnection={() => {\n        setActiveTab(\"connections\");\n        toggleExpanded(true);\n      }}\n      canOpenConnection={\n        instance ? ReadyStatuses.includes(instance?.status) : false\n      }\n      canChangeOwner={true /* TODO */}\n      onChangeOwner={() => false /* TODO */}\n      canDelete={true /* TODO */}\n      onDelete={() => false /* TODO */}\n    />\n  );\n};\n","import { PageSection } from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport type { NavigationProps } from \"../routes\";\nimport { DataPlaneHeaderConnected } from \"./DataPlaneHeaderConnected\";\n\nexport const AclsRoute: VoidFunctionComponent<NavigationProps> = ({\n  instancesHref,\n}) => {\n  return (\n    <>\n      <DataPlaneHeaderConnected\n        instancesHref={instancesHref}\n        activeSection={\"permissions\"}\n      />\n      <PageSection>TODO</PageSection>\n    </>\n  );\n};\n","import {\n  usePaginationSearchParams,\n  useSortableSearchParams,\n  useURLSearchParamsChips,\n} from \"@rhoas/app-services-ui-components\";\nimport {\n  KafkaConsumerGroupSortableColumns,\n  useKafkaInstanceConsumerGroups,\n} from \"consoledot-api\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { ConsumerGroups } from \"ui\";\nimport type { NavigationProps } from \"../routes\";\nimport { DataPlaneHeaderConnected } from \"./DataPlaneHeaderConnected\";\nimport { useDataPlaneInstance } from \"./useDataPlaneInstance\";\n\nexport const ConsumerGroupsRoute: VoidFunctionComponent<NavigationProps> = ({\n  instancesHref,\n}) => {\n  const { instance } = useDataPlaneInstance(instancesHref);\n  const { page, perPage, setPagination, setPaginationQuery } =\n    usePaginationSearchParams();\n  const resetPaginationQuery = useCallback(\n    () => setPaginationQuery(1, perPage),\n    [perPage, setPaginationQuery]\n  );\n\n  const consumerName = useURLSearchParamsChips(\n    \"consumer\",\n    resetPaginationQuery\n  );\n  const [isColumnSortable, sort, sortDirection] = useSortableSearchParams(\n    KafkaConsumerGroupSortableColumns,\n    {\n      name: \"TODO name\",\n    },\n    \"name\",\n    \"desc\"\n  );\n  const { data } = useKafkaInstanceConsumerGroups({\n    id: instance?.id,\n    adminUrl: instance?.adminUrl,\n    page,\n    perPage,\n    sort: sort!,\n    direction: sortDirection,\n    groupId: consumerName.chips[0],\n  });\n  return (\n    <>\n      <DataPlaneHeaderConnected\n        instancesHref={instancesHref}\n        activeSection={\"consumer\"}\n      />\n      <ConsumerGroups\n        consumers={data?.groups}\n        itemCount={data?.count}\n        page={page}\n        perPage={perPage}\n        consumerName={consumerName.chips}\n        isRowSelected={() => false}\n        isColumnSortable={isColumnSortable}\n        onDelete={() => {}}\n        onSearchConsumer={(value) => {\n          consumerName.clear();\n          consumerName.toggle(value);\n        }}\n        onClearAllFilters={consumerName.clear}\n        onPageChange={setPagination}\n        onRemoveConsumerChip={consumerName.clear}\n        onRemoveConsumerChips={consumerName.clear}\n        onViewPartition={() => {}}\n        onViewResetOffset={() => {}}\n      />\n    </>\n  );\n};\n","import {\n  useKafkaInstanceFetchQuery,\n  useKafkaInstanceKpiMetricsFetchQuery,\n  useKafkaInstanceMetricsFetchQuery,\n  useKafkaInstanceTopicMetricsFetchQuery,\n  useKafkaInstanceTopicsFetchQuery,\n} from \"consoledot-api\";\nimport {\n  metricsDismissLagAlerts,\n  metricsIsLagAlertsDismissed,\n} from \"local-storage-helpers\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback, useState } from \"react\";\nimport type { MetricsProps } from \"ui\";\nimport { Metrics } from \"ui\";\nimport type { NavigationProps } from \"../routes\";\nimport { DataPlaneHeaderConnected } from \"./DataPlaneHeaderConnected\";\nimport { useDataPlaneInstance } from \"./useDataPlaneInstance\";\n\nexport const DashboardRoute: VoidFunctionComponent<NavigationProps> = ({\n  instancesHref,\n}) => {\n  const {\n    instance,\n    match: { params },\n  } = useDataPlaneInstance(instancesHref);\n  const [hasUserAlreadyClosedAlert, setHasUserAlreadyClosedAlert] = useState(\n    metricsIsLagAlertsDismissed()\n  );\n\n  const onAlertClose = useCallback(() => {\n    setHasUserAlreadyClosedAlert(true);\n    metricsDismissLagAlerts();\n  }, []);\n\n  const queryInstance = useKafkaInstanceFetchQuery();\n  const queryKpisMetrics = useKafkaInstanceKpiMetricsFetchQuery();\n  const queryInstanceMetrics = useKafkaInstanceMetricsFetchQuery();\n  const queryTopicMetrics = useKafkaInstanceTopicMetricsFetchQuery();\n  const queryTopics = useKafkaInstanceTopicsFetchQuery();\n\n  const getMetricsKpi: MetricsProps[\"getMetricsKpi\"] = useCallback(async () => {\n    const kpis = await queryKpisMetrics(params.id);\n    return {\n      ...kpis,\n      topicPartitionsLimit: instance!.maxPartitions || 0,\n    };\n  }, [instance, params.id, queryKpisMetrics]);\n\n  const getKafkaInstanceMetrics: MetricsProps[\"getKafkaInstanceMetrics\"] =\n    useCallback(\n      async ({ interval, duration }) => {\n        const [instance, metrics] = await Promise.all([\n          queryInstance(params.id),\n          queryInstanceMetrics({ id: params.id, duration, interval }),\n        ]);\n        if (!instance) {\n          return Promise.reject(\"Can't retrieve instance\");\n        }\n        return {\n          ...metrics,\n          diskSpaceLimit:\n            (instance.request.max_data_retention_size?.bytes || 0) / 1073741824,\n          connectionsLimit: instance.connections || 0,\n          connectionRateLimit: instance.connectionRate || 0,\n        };\n      },\n      [params.id, queryInstance, queryInstanceMetrics]\n    );\n\n  const getTopicsMetrics: MetricsProps[\"getTopicsMetrics\"] = useCallback(\n    async ({ interval, duration, selectedTopic }) => {\n      const [instance, metrics] = await Promise.all([\n        queryInstance(params.id),\n        queryTopicMetrics({ id: params.id, duration, interval, selectedTopic }),\n      ]);\n      if (!instance || !instance.adminUrl) {\n        return Promise.reject(\"Can't retrieve instance\");\n      }\n      const kafkaTopics = (\n        await queryTopics({\n          id: instance.id,\n          adminUrl: instance.adminUrl,\n          page: 1,\n          perPage: 1000,\n        })\n      ).topics.map((t) => t.topic_name);\n      return {\n        ...metrics,\n        kafkaTopics,\n      };\n    },\n    [params.id, queryInstance, queryTopicMetrics, queryTopics]\n  );\n\n  return (\n    <>\n      <DataPlaneHeaderConnected\n        instancesHref={instancesHref}\n        activeSection={\"dashboard\"}\n      />\n      <Metrics\n        onCreateTopic={() => {}}\n        onAlertClose={onAlertClose}\n        hasUserAlreadyClosedAlert={hasUserAlreadyClosedAlert}\n        getKafkaInstanceMetrics={getKafkaInstanceMetrics}\n        getTopicsMetrics={getTopicsMetrics}\n        getMetricsKpi={getMetricsKpi}\n      />\n    </>\n  );\n};\n","import { Loading } from \"@rhoas/app-services-ui-components\";\nimport type { FunctionComponent } from \"react\";\nimport type { NavigationProps } from \"../routes\";\nimport { useDataPlaneInstance } from \"./useDataPlaneInstance\";\n\nexport const DataPlaneGate: FunctionComponent<NavigationProps> = ({\n  instancesHref,\n  children,\n}) => {\n  const { instance } = useDataPlaneInstance(instancesHref);\n\n  return instance ? <>{children}</> : <Loading />;\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { Settings as SettingsComp } from \"ui\";\nimport type { NavigationProps } from \"../routes\";\nimport { DataPlaneHeaderConnected } from \"./DataPlaneHeaderConnected\";\n\nexport const SettingsRoute: VoidFunctionComponent<NavigationProps> = ({\n  instancesHref,\n}) => {\n  return (\n    <>\n      <DataPlaneHeaderConnected\n        instancesHref={instancesHref}\n        activeSection={\"settings\"}\n      />\n      <SettingsComp\n        onSubmitReAuthentication={() => Promise.resolve(true)}\n        reauthenticationEnabled={false}\n      />\n    </>\n  );\n};\n","import {\n  usePaginationSearchParams,\n  useSortableSearchParams,\n  useURLSearchParamsChips,\n} from \"@rhoas/app-services-ui-components\";\nimport {\n  KafkaTopicsSortableColumns,\n  useKafkaInstanceTopics,\n} from \"consoledot-api\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { KafkaTopics } from \"ui\";\nimport type { NavigationProps } from \"../routes\";\nimport { DataPlaneHeaderConnected } from \"./DataPlaneHeaderConnected\";\nimport { useDataPlaneInstance } from \"./useDataPlaneInstance\";\n\nexport const TopicsRoute: VoidFunctionComponent<NavigationProps> = ({\n  instancesHref,\n}) => {\n  const { instance } = useDataPlaneInstance(instancesHref);\n  const { page, perPage, setPagination, setPaginationQuery } =\n    usePaginationSearchParams();\n  const resetPaginationQuery = useCallback(\n    () => setPaginationQuery(1, perPage),\n    [perPage, setPaginationQuery]\n  );\n\n  const topicChips = useURLSearchParamsChips(\"topic\", resetPaginationQuery);\n  const [isColumnSortable, sort, sortDirection] = useSortableSearchParams(\n    KafkaTopicsSortableColumns,\n    {\n      name: \"TODO name\",\n      partitions: \"TODO partitions\",\n      \"retention.bytes\": \"TODO retention bytes\",\n      \"retention.ms\": \"TODO retention ms\",\n    },\n    \"name\",\n    \"desc\"\n  );\n  const { data } = useKafkaInstanceTopics({\n    id: instance?.id,\n    adminUrl: instance?.adminUrl,\n    page,\n    perPage,\n    sort: sort!,\n    direction: sortDirection,\n    filter: topicChips.chips[0],\n  });\n  return (\n    <>\n      <DataPlaneHeaderConnected\n        instancesHref={instancesHref}\n        activeSection={\"topics\"}\n      />\n      <KafkaTopics\n        topics={data?.topics}\n        itemCount={data?.count}\n        page={page}\n        perPage={perPage}\n        topicName={topicChips.chips}\n        getUrlFortopic={(row) => `./topic/${row.topic_name}`}\n        isColumnSortable={isColumnSortable}\n        onDelete={() => {}}\n        onEdit={() => {}}\n        onSearchTopic={(value) => {\n          topicChips.clear();\n          topicChips.toggle(value);\n        }}\n        onClearAllFilters={topicChips.clear}\n        onCreateTopic={() => {}}\n        onPageChange={setPagination}\n        onRemoveTopicChip={topicChips.clear}\n        onRemoveTopicChips={topicChips.clear}\n        onTopicLinkClick={() => {}}\n      />\n    </>\n  );\n};\n","import { QuickStartContext } from \"@patternfly/quickstarts\";\nimport type { CreateKafkaInstanceServices } from \"@rhoas/app-services-ui-components\";\nimport { CreateKafkaInstance } from \"@rhoas/app-services-ui-components\";\nimport { useKafkaCreateInstanceMutation } from \"consoledot-api\";\nimport type { FunctionComponent } from \"react\";\nimport { useCallback, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport type { NavigationProps } from \"../routes\";\nimport { ControlPlaneRoutePath } from \"../routes\";\nimport { useCreateKafkaCallbacks } from \"./useCreateKafkaCallbacks\";\n\nexport const CreateKafkaInstanceRoute: FunctionComponent<NavigationProps> = ({\n  instancesHref,\n}) => {\n  const history = useHistory();\n  const callbacks = useCreateKafkaCallbacks();\n  const createKafkaInstance = useKafkaCreateInstanceMutation();\n  const qsContext = useContext(QuickStartContext);\n\n  const onClickKafkaOverview = () => {\n    history.push(`overview`);\n  };\n\n  const onClickQuickStart = useCallback(() => {\n    qsContext.setActiveQuickStart &&\n      qsContext.setActiveQuickStart(\"getting-started\");\n  }, [qsContext]);\n\n  const onCreate = useCallback<CreateKafkaInstanceServices[\"onCreate\"]>(\n    function (instance, onSuccess, onError) {\n      const onOnSuccess = () => {\n        onSuccess();\n        history.push(ControlPlaneRoutePath);\n      };\n      void createKafkaInstance.mutateAsync({\n        instance,\n        onSuccess: onOnSuccess,\n        onError,\n      });\n    },\n    [createKafkaInstance, history]\n  );\n\n  const onCancel = useCallback(() => {\n    history.push(instancesHref);\n  }, [history, instancesHref]);\n\n  return (\n    <CreateKafkaInstance\n      {...callbacks}\n      isModalOpen={true}\n      onCancel={onCancel}\n      onClickContactUs={onClickKafkaOverview}\n      onClickKafkaOverview={onClickKafkaOverview}\n      onClickQuickStart={onClickQuickStart}\n      onCreate={onCreate}\n      onLearnHowToAddStreamingUnits={onClickKafkaOverview}\n      onLearnMoreAboutSizes={onClickKafkaOverview}\n      subscriptionOptionsHref={document.location.href + \"/../overview\"}\n      appendTo={() =>\n        (document.getElementById(\"chrome-app-render-root\") as HTMLElement) ||\n        document.body\n      }\n    />\n  );\n};\n","import { useChrome } from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport {\n  useDeveloperInstanceAvailabilityFetchQuery,\n  useProviderRegionSizesFetchQuery,\n  useProvidersWithRegionsFetchQuery,\n  useStandardQuotaFetchQuery,\n} from \"consoledot-api\";\nimport { useCallback } from \"react\";\nimport type { CreateKafkaInstanceProps, StandardSizes } from \"ui\";\n\nexport function useCreateKafkaCallbacks() {\n  const { auth } = useChrome();\n\n  const getUsername = useCallback(async () => {\n    const username = (await auth.getUser()).identity.user?.username;\n    if (!username) {\n      return Promise.reject(\"Invalid user\");\n    }\n    return username;\n  }, [auth]);\n\n  const checkDeveloperAvailabilityQuery =\n    useDeveloperInstanceAvailabilityFetchQuery();\n\n  const standardQuotaQuery = useStandardQuotaFetchQuery();\n  const providersWithRegionsQuery = useProvidersWithRegionsFetchQuery();\n  const getProvidersInfo = useProvidersWithRegionsFetchQuery();\n  const getProviderRegionsSizes = useProviderRegionSizesFetchQuery();\n\n  const checkDeveloperAvailability = useCallback<\n    CreateKafkaInstanceProps[\"checkDeveloperAvailability\"]\n  >(\n    async ({ onAvailable, onUsed, onUnavailable }) => {\n      try {\n        const available = await checkDeveloperAvailabilityQuery(getUsername);\n\n        if (available) {\n          onAvailable();\n        } else {\n          onUsed();\n        }\n      } catch {\n        onUnavailable();\n      }\n    },\n    [checkDeveloperAvailabilityQuery, getUsername]\n  );\n\n  const checkStandardQuota = useCallback<\n    CreateKafkaInstanceProps[\"checkStandardQuota\"]\n  >(\n    async ({ onQuotaAvailable, onNoQuotaAvailable, onOutOfQuota }) => {\n      try {\n        const {\n          hasTrialQuota,\n          remainingPrepaidQuota,\n          remainingMarketplaceQuota,\n          marketplaceSubscriptions,\n        } = await standardQuotaQuery();\n\n        if (\n          remainingMarketplaceQuota !== undefined ||\n          remainingPrepaidQuota !== undefined\n        ) {\n          if (\n            (remainingMarketplaceQuota || 0) === 0 &&\n            (remainingPrepaidQuota || 0) === 0\n          ) {\n            onOutOfQuota({\n              quota: {\n                marketplaceSubscriptions,\n              },\n            });\n          } else {\n            onQuotaAvailable({\n              quota: {\n                remainingPrepaidQuota,\n                remainingMarketplaceQuota,\n                marketplaceSubscriptions,\n              },\n            });\n          }\n        } else {\n          onNoQuotaAvailable({ hasTrialQuota });\n        }\n      } catch (e) {\n        onNoQuotaAvailable({ hasTrialQuota: false });\n      }\n    },\n    [standardQuotaQuery]\n  );\n\n  const fetchProvidersWithRegions = useCallback<\n    CreateKafkaInstanceProps[\"fetchProvidersWithRegions\"]\n  >(\n    async (plan, { onAvailable, onUnavailable }) => {\n      try {\n        const providers = await providersWithRegionsQuery(plan);\n        onAvailable(providers);\n      } catch {\n        onUnavailable();\n      }\n    },\n    [providersWithRegionsQuery]\n  );\n\n  const getStandardSizes = useCallback<\n    CreateKafkaInstanceProps[\"getStandardSizes\"]\n  >(\n    async (provider, region) => {\n      const providersInfo = await getProvidersInfo(\"standard\");\n      const providerInfo = providersInfo.providers.find(\n        (p) => p.id === provider\n      );\n      if (!providerInfo) {\n        return Promise.reject(\"Invalid cloud provider\");\n      }\n      return getProviderRegionsSizes(providerInfo, region, \"standard\");\n    },\n    [getProviderRegionsSizes, getProvidersInfo]\n  );\n\n  const getTrialSizes = useCallback<CreateKafkaInstanceProps[\"getTrialSizes\"]>(\n    async (provider, region) => {\n      let standardSizes: StandardSizes;\n\n      try {\n        standardSizes = await getStandardSizes(provider, region);\n      } catch {\n        // It can happen that the selected provider doesn't support standard instances.\n        // In this case we provide a faux sample list of sizes just to make the slider happy.\n        standardSizes = [\n          { id: \"1\", displayName: \"1\" },\n          { id: \"2\", displayName: \"2\" },\n        ] as StandardSizes;\n      }\n      const providersInfo = await getProvidersInfo(\"developer\");\n      const providerInfo = providersInfo.providers.find(\n        (p) => p.id === provider\n      );\n      if (!providerInfo) {\n        return Promise.reject(\"Invalid cloud provider\");\n      }\n      const trialSizes = await getProviderRegionsSizes(\n        providerInfo,\n        region,\n        \"developer\"\n      );\n      return {\n        standard: standardSizes,\n        trial: trialSizes[0],\n      };\n    },\n    [getProviderRegionsSizes, getProvidersInfo, getStandardSizes]\n  );\n  return {\n    checkDeveloperAvailability,\n    checkStandardQuota,\n    fetchProvidersWithRegions,\n    getStandardSizes,\n    getTrialSizes,\n  };\n}\n","import {\n  useKafkaDeleteInstanceMutation,\n  useKafkaInstance,\n} from \"consoledot-api\";\nimport type { FunctionComponent } from \"react\";\nimport { useCallback, useEffect } from \"react\";\nimport { useHistory, useRouteMatch } from \"react-router-dom\";\nimport { DeleteKafkaInstance, ReadyStatuses } from \"ui\";\nimport type { ControlPlaneRouteParams, NavigationProps } from \"../routes\";\nimport { ControlPlaneRoutePath } from \"../routes\";\n\nexport const DeleteKafkaInstanceRoute: FunctionComponent<NavigationProps> = ({\n  instancesHref,\n}) => {\n  const history = useHistory();\n  const match = useRouteMatch<ControlPlaneRouteParams>(ControlPlaneRoutePath);\n\n  const { data: instance, isError } = useKafkaInstance(match?.params.id);\n  const { mutateAsync, isLoading: isDeleting } =\n    useKafkaDeleteInstanceMutation();\n\n  const onCancel = useCallback(() => {\n    history.push(instancesHref);\n  }, [history, instancesHref]);\n\n  const onDelete = useCallback(() => {\n    if (instance?.id) {\n      void mutateAsync({\n        id: instance.id,\n        onError: () => {\n          // TODO: alert\n        },\n        onSuccess: () => {\n          history.replace(instancesHref);\n        },\n      });\n    }\n  }, [mutateAsync, history, instance?.id, instancesHref]);\n\n  useEffect(() => {\n    if (isError) {\n      history.replace(instancesHref);\n    }\n  }, [history, instancesHref, isError]);\n\n  if (!instance) {\n    return null;\n  }\n\n  return (\n    <DeleteKafkaInstance\n      isModalOpen={true}\n      isDeleting={isDeleting}\n      onCancel={onCancel}\n      onDelete={onDelete}\n      instanceName={\n        ReadyStatuses.includes(instance.status) ? instance.name : undefined\n      }\n      appendTo={() =>\n        (document.getElementById(\"chrome-app-render-root\") as HTMLElement) ||\n        document.body\n      }\n    />\n  );\n};\n","import {\n  usePaginationSearchParams,\n  useSortableSearchParams,\n  useURLSearchParamsChips,\n} from \"@rhoas/app-services-ui-components\";\nimport {\n  KafkaInstancesSortableColumns,\n  useKafkaInstances,\n} from \"consoledot-api\";\nimport type { FunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport type {\n  KafkaInstance,\n  KafkaInstanceDrawerTab,\n  KafkaInstancesProps,\n  SimplifiedStatus,\n} from \"ui\";\nimport {\n  ControlPlaneHeader,\n  KafkaInstances,\n  ReadyStatuses,\n  useKafkaLabels,\n} from \"ui\";\nimport { useDrawer } from \"../../../DrawerProvider\";\nimport { ControlPlaneNewInstancePath, ControlPlaneRouteRoot } from \"../routes\";\n\nexport type KafkaInstancesRoute = Pick<\n  KafkaInstancesProps<KafkaInstance>,\n  \"getUrlForInstance\"\n>;\n\nexport const KafkaInstancesRoute: FunctionComponent<KafkaInstancesRoute> = ({\n  getUrlForInstance,\n}) => {\n  const history = useHistory();\n\n  const { selectedInstance, toggleExpanded, setActiveTab, isExpanded } =\n    useDrawer(\n      useCallback(() => history.replace(`${ControlPlaneRouteRoot}`), [history])\n    );\n\n  const labels = useKafkaLabels();\n\n  const { page, perPage, setPagination, setPaginationQuery } =\n    usePaginationSearchParams();\n  const resetPaginationQuery = useCallback(\n    () => setPaginationQuery(1, perPage),\n    [perPage, setPaginationQuery]\n  );\n\n  const namesChips = useURLSearchParamsChips(\"names\", resetPaginationQuery);\n  const ownersChips = useURLSearchParamsChips(\"owners\", resetPaginationQuery);\n  const statusesChips = useURLSearchParamsChips<SimplifiedStatus>(\n    \"statuses\",\n    resetPaginationQuery\n  );\n\n  const [isColumnSortable, sort, sortDirection] = useSortableSearchParams(\n    KafkaInstancesSortableColumns,\n    labels.fields,\n    \"createdAt\",\n    \"desc\"\n  );\n\n  const { data } = useKafkaInstances({\n    page,\n    perPage,\n    name: namesChips.chips,\n    owner: ownersChips.chips,\n    status: statusesChips.chips,\n    sort: sort!,\n    direction: sortDirection,\n  });\n\n  const onClearAllFilters = useCallback(() => {\n    namesChips.clearChained(\n      ownersChips.clearChained(\n        statusesChips.clearChained(setPaginationQuery(1, perPage))\n      ),\n      true\n    );\n  }, [namesChips, ownersChips, perPage, setPaginationQuery, statusesChips]);\n\n  const openDrawer = useCallback(\n    (id: string, tab: KafkaInstanceDrawerTab) => {\n      if (selectedInstance === id && isExpanded) {\n        toggleExpanded(false);\n      } else {\n        history.replace(`${ControlPlaneRouteRoot}/${id}`);\n        toggleExpanded(true);\n        setActiveTab(tab);\n      }\n    },\n    [history, isExpanded, selectedInstance, setActiveTab, toggleExpanded]\n  );\n\n  const onDetailsClick: KafkaInstancesProps<KafkaInstance>[\"onDetails\"] =\n    useCallback(\n      (instance) => {\n        openDrawer(instance.id, \"details\");\n      },\n      [openDrawer]\n    );\n\n  const onConnectionsClick: KafkaInstancesProps<KafkaInstance>[\"onDetails\"] =\n    useCallback(\n      (instance) => {\n        openDrawer(instance.id, \"connections\");\n      },\n      [openDrawer]\n    );\n\n  const onCreate = useCallback(() => {\n    history.push(`${ControlPlaneNewInstancePath}`);\n  }, [history]);\n\n  const onDelete = useCallback(\n    ({ id }) => {\n      history.push(`${ControlPlaneRouteRoot}/${id}/delete`);\n    },\n    [history]\n  );\n\n  return (\n    <>\n      <ControlPlaneHeader />\n      <KafkaInstances\n        instances={data?.instances}\n        itemCount={data?.count}\n        page={page}\n        perPage={perPage}\n        names={namesChips.chips}\n        owners={ownersChips.chips}\n        statuses={statusesChips.chips}\n        isColumnSortable={isColumnSortable}\n        onPageChange={setPagination}\n        onSearchName={namesChips.add}\n        onRemoveNameChip={namesChips.remove}\n        onRemoveNameChips={namesChips.clear}\n        onSearchOwner={ownersChips.add}\n        onRemoveOwnerChip={ownersChips.remove}\n        onRemoveOwnerChips={ownersChips.clear}\n        onSearchStatus={statusesChips.toggle}\n        onRemoveStatusChip={statusesChips.remove}\n        onRemoveStatusChips={statusesChips.clear}\n        onClearAllFilters={onClearAllFilters}\n        onChangeOwner={(row) => {}}\n        onDelete={onDelete}\n        onCreate={onCreate}\n        isRowSelected={({ row }) => row.id === selectedInstance}\n        getUrlForInstance={getUrlForInstance}\n        onDetails={onDetailsClick}\n        onConnection={onConnectionsClick}\n        onClickConnectionTabLink={() => {}}\n        onClickSupportLink={() => {}}\n        onInstanceLinkClick={() => {}}\n        onQuickstartGuide={() => {}}\n        canHaveInstanceLink={({ status }) => ReadyStatuses.includes(status)}\n        canOpenConnection={({ status }) => ReadyStatuses.includes(status)}\n        canChangeOwner={() => true}\n        canDelete={() => true}\n      />\n    </>\n  );\n};\n","import { useKafkaInstance } from \"consoledot-api\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { Suspense } from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport { KafkaInstanceDrawer } from \"ui\";\nimport { useDrawer } from \"../DrawerProvider\";\nimport { AclsRoute } from \"./streams/detail/AclsRoute\";\nimport { ConsumerGroupsRoute } from \"./streams/detail/ConsumerGroupsRoute\";\nimport { DashboardRoute } from \"./streams/detail/DashboardRoute\";\nimport { DataPlaneGate } from \"./streams/detail/DataPlaneGate\";\nimport { SettingsRoute } from \"./streams/detail/SettingsRoute\";\nimport { TopicsRoute } from \"./streams/detail/TopicsRoute\";\nimport { CreateKafkaInstanceRoute } from \"./streams/kafka-instances/CreateKafkaInstanceRoute\";\nimport { DeleteKafkaInstanceRoute } from \"./streams/kafka-instances/DeleteKafkaInstanceRoute\";\nimport { KafkaInstancesRoute } from \"./streams/kafka-instances/KafkaInstancesRoute\";\nimport {\n  ControlPlaneDeleteInstancePath,\n  ControlPlaneNewInstancePath,\n  ControlPlaneRoutePath,\n  DataPlaneRoutePath,\n} from \"./streams/routes\";\n\nexport const StreamsRoutes: VoidFunctionComponent = () => {\n  const {\n    selectedInstance,\n    activeTab,\n    setActiveTab,\n    isExpanded,\n    toggleExpanded,\n  } = useDrawer();\n  const { data: drawerInstance } = useKafkaInstance(selectedInstance);\n\n  return (\n    <KafkaInstanceDrawer\n      instance={drawerInstance}\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      isExpanded={isExpanded}\n      onClose={() => toggleExpanded(false)}\n    >\n      <Suspense fallback={Fallback}>\n        <Switch>\n          {/* CONTROL PLANE */}\n          <Route path={ControlPlaneRoutePath} exact>\n            <Route path={ControlPlaneNewInstancePath}>\n              <CreateKafkaInstanceRoute instancesHref={\"/kafkas\"} />\n            </Route>\n            <Route path={ControlPlaneDeleteInstancePath}>\n              <DeleteKafkaInstanceRoute instancesHref={\"/kafkas\"} />\n            </Route>\n            <KafkaInstancesRoute\n              getUrlForInstance={(instance) => `/kafkas/${instance.id}/details`}\n            />\n          </Route>\n\n          {/* DATA PLANE*/}\n          <Route path={DataPlaneRoutePath}>\n            <DataPlaneGate instancesHref={\"/kafkas\"}>\n              <Switch>\n                <Route path={`${DataPlaneRoutePath}/dashboard`} exact>\n                  <DashboardRoute instancesHref={\"/kafkas\"} />\n                </Route>\n                <Route path={`${DataPlaneRoutePath}/topics`} exact>\n                  <TopicsRoute instancesHref={\"/kafkas\"} />\n                </Route>\n\n                <Route path={`${DataPlaneRoutePath}/consumer-groups`} exact>\n                  <ConsumerGroupsRoute instancesHref={\"/kafkas\"} />\n                </Route>\n                <Route path={`${DataPlaneRoutePath}/acls`} exact>\n                  <AclsRoute instancesHref={\"/kafkas\"} />\n                </Route>\n                <Route path={`${DataPlaneRoutePath}/settings`} exact>\n                  <SettingsRoute instancesHref={\"/kafkas\"} />\n                </Route>\n                <Route path={`${DataPlaneRoutePath}/topics/:topicName`} exact>\n                  <TopicsRoute instancesHref={\"/kafkas\"} />\n                </Route>\n\n                <Redirect\n                  from={`${DataPlaneRoutePath}`}\n                  to={`${DataPlaneRoutePath}/dashboard`}\n                  exact\n                />\n              </Switch>\n            </DataPlaneGate>\n          </Route>\n          <Route>404</Route>\n        </Switch>\n      </Suspense>\n    </KafkaInstanceDrawer>\n  );\n};\n\nconst Fallback = () => {\n  return \"⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️⚠️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️️\";\n};\n","import NotificationsPortal from \"@redhat-cloud-services/frontend-components-notifications/NotificationPortal\";\nimport { notificationsReducer } from \"@redhat-cloud-services/frontend-components-notifications/redux\";\nimport { getRegistry } from \"@redhat-cloud-services/frontend-components-utilities/Registry\";\nimport { useChrome } from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { memo, useEffect } from \"react\";\nimport { Redirect, Route, Switch, useHistory } from \"react-router-dom\";\nimport type { Reducer } from \"redux\";\n\nimport \"./App.scss\";\nimport { DrawerProvider } from \"./DrawerProvider\";\nimport { OverviewRoute } from \"./routes/overview/OverviewRoute\";\n\nimport { StreamsRoutes } from \"./routes/StreamsRoutes\";\n\nconst App = memo(() => {\n  const history = useHistory();\n  const { updateDocumentTitle, on } = useChrome();\n\n  const { t } = useTranslation();\n  const title = t(\"kafka:rhosakTitle\");\n\n  useEffect(() => {\n    const registry = getRegistry();\n    registry.register({ notifications: notificationsReducer as Reducer });\n\n    updateDocumentTitle(title);\n\n    const unregister = on(\"APP_NAVIGATION\", (event) => {\n      console.dir(event);\n      event.navId && history.push(\"/\" + event.navId === \"/\" ? \"\" : event.navId);\n    });\n    return () => {\n      if (unregister) {\n        unregister();\n      }\n    };\n  }, [history, on, title, updateDocumentTitle]);\n\n  return (\n    <>\n      <NotificationsPortal />\n      <Switch>\n        <Route path={\"/overview\"} exact>\n          <OverviewRoute />\n        </Route>\n        <Redirect from={\"/\"} to={\"/kafkas\"} exact />\n        <Route path={\"/kafkas\"}>\n          <DrawerProvider>\n            <StreamsRoutes />\n          </DrawerProvider>\n        </Route>\n        <Route path={\"\"} exact></Route>\n      </Switch>\n    </>\n  );\n});\n\nexport default App;\n","import { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { Middleware } from 'redux';\n\nexport let registry: ReducerRegistry<any>;\n\nexport function init(...middleware: Middleware[]) {\n  registry = getRegistry({}, [\n    promiseMiddleware,\n    notificationsMiddleware({ errorDescriptionKey: ['detail', 'stack'] }),\n    ...middleware,\n  ]);\n  return registry;\n}\n","import type { ConfigurationParameters } from \"@rhoas/kafka-management-sdk\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { ReactQueryDevtools } from \"@tanstack/react-query-devtools\";\nimport { isReactQueryDevToolsEanbled } from \"local-storage-helpers\";\nimport type { FunctionComponent } from \"react\";\nimport { createContext, lazy, Suspense, useContext } from \"react\";\n\nconst ReactQueryDevtoolsProduction = lazy(() =>\n  import(\"@tanstack/react-query-devtools/build/lib/index.prod.js\").then(\n    (d) => ({\n      default: d.ReactQueryDevtools,\n    })\n  )\n);\n\ntype ApiContextProps = Pick<\n  ConfigurationParameters,\n  \"accessToken\" | \"basePath\"\n> & {\n  refetchInterval: number;\n};\n\nconst ApiContext = createContext<ApiContextProps>(null!);\n\nconst queryClient = new QueryClient();\n\nexport const ApiProvider: FunctionComponent<ApiContextProps> = ({\n  children,\n  ...context\n}) => {\n  const showDevTools = isReactQueryDevToolsEanbled();\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ApiContext.Provider value={context}>\n        {children}\n        <ReactQueryDevtools initialIsOpen />\n        {showDevTools && (\n          <Suspense fallback={null}>\n            <ReactQueryDevtoolsProduction />\n          </Suspense>\n        )}\n      </ApiContext.Provider>\n    </QueryClientProvider>\n  );\n};\n\nexport function useApiConfiguration() {\n  return useContext(ApiContext);\n}\n","import type { FetchKafkaConsumerGroupsParams } from \"./fetchers/fetchKafkaConsumerGroups\";\nimport type { FetchKafkaInstanceMetricsProps } from \"./fetchers/fetchKafkaInstanceMetrics\";\nimport type { FetchKafkaInstancesParams } from \"./fetchers/fetchKafkaInstances\";\nimport type { FetchTopicsMetricsProps } from \"./fetchers/fetchKafkaTopicMetrics\";\nimport type { FetchKafkaTopicsParams } from \"./fetchers/fetchKafkaTopics\";\n\nexport const masQueries = {\n  _root: () => ({ scope: \"mas\" } as const),\n  organization: () =>\n    [{ ...masQueries._root(), entity: \"organization\" }] as const,\n  quota: {\n    _root: () => ({ ...masQueries._root(), entity: \"quota\" } as const),\n    available: (params: { organization?: string }) =>\n      [\n        { ...masQueries.quota._root(), subentity: \"available\", ...params },\n      ] as const,\n    developerAvailability: () =>\n      [\n        { ...masQueries.quota._root(), subentity: \"developerAvailability\" },\n      ] as const,\n    standardAvailability: () =>\n      [\n        { ...masQueries.quota._root(), subentity: \"standardAvailability\" },\n      ] as const,\n  },\n} as const;\n\nexport const kafkaQueries = {\n  _root: () => ({ scope: \"kafka\" } as const),\n  list: (params: Omit<FetchKafkaInstancesParams, \"dataMapper\" | \"getKafkas\">) =>\n    [\n      {\n        ...kafkaQueries._root(),\n        entity: \"list\",\n      },\n      params,\n    ] as const,\n  instance: {\n    _root: ({ id }: { id?: string }) =>\n      ({ ...kafkaQueries._root(), entity: \"instance\", id } as const),\n    details: (params: { id?: string }) =>\n      [\n        { ...kafkaQueries.instance._root(params), subentity: \"details\" },\n      ] as const,\n    topics: (\n      params: { id?: string; adminUrl?: string } & Omit<\n        FetchKafkaTopicsParams,\n        \"getTopics\"\n      >\n    ) =>\n      [\n        {\n          ...kafkaQueries.instance._root(params),\n          subentity: \"topics\",\n        },\n        params,\n      ] as const,\n    consumerGroups: (\n      params: { id?: string; adminUrl?: string } & Omit<\n        FetchKafkaConsumerGroupsParams,\n        \"getConsumerGroups\"\n      >\n    ) =>\n      [\n        {\n          ...kafkaQueries.instance._root(params),\n          subentity: \"consumer-groups\",\n        },\n        params,\n      ] as const,\n    metrics: {\n      _root: ({ id }: { id: string }) =>\n        ({\n          ...kafkaQueries.instance._root({ id }),\n          subentity: \"metrics\",\n          id,\n        } as const),\n      kpi: (params: { id: string }) =>\n        [{ ...kafkaQueries.instance._root(params), type: \"kpi\" }] as const,\n      instance: ({\n        id,\n        ...params\n      }: Omit<FetchKafkaInstanceMetricsProps, \"getMetricsByRangeQuery\">) =>\n        [\n          {\n            ...kafkaQueries.instance._root({ id }),\n            type: \"instance\",\n          },\n          params,\n        ] as const,\n      topic: ({\n        id,\n        ...params\n      }: Omit<FetchTopicsMetricsProps, \"getMetricsByRangeQuery\">) =>\n        [\n          {\n            ...kafkaQueries.instance._root({ id }),\n            type: \"topic\",\n          },\n          params,\n        ] as const,\n    },\n  },\n} as const;\n\nexport const providerQueries = {\n  _root: () => ({ scope: \"providers\" }),\n  list: (params: { plan?: string }) =>\n    [{ ...providerQueries._root(), entity: \"list\", ...params }] as const,\n  limits: {\n    _root: ({ provider }: { provider?: string }) =>\n      ({\n        ...providerQueries._root(),\n        entity: \"limits\",\n        provider,\n      } as const),\n    standard: (params: { provider?: string }) => [\n      { ...providerQueries.limits._root({ ...params }), plan: \"standard\" },\n    ],\n    developer: (params: { provider?: string }) => [\n      {\n        ...providerQueries.limits._root({ ...params }),\n        plan: \"developer\",\n      },\n    ],\n  },\n} as const;\n","import { AppServicesApi } from \"@rhoas/account-management-sdk\";\nimport { GroupsApi, TopicsApi } from \"@rhoas/kafka-instance-sdk\";\nimport { Configuration, DefaultApi } from \"@rhoas/kafka-management-sdk\";\nimport { useCallback } from \"react\";\nimport { useApiConfiguration } from \"./ApiProvider\";\n\nexport const useApi = () => {\n  const { accessToken, basePath } = useApiConfiguration();\n  const kafkasFleet = useCallback(\n    () =>\n      new DefaultApi(\n        new Configuration({\n          accessToken,\n          basePath,\n        })\n      ),\n    [accessToken, basePath]\n  );\n  const account = useCallback(\n    () =>\n      new AppServicesApi(\n        new Configuration({\n          accessToken,\n          basePath,\n        })\n      ),\n    [accessToken, basePath]\n  );\n  const topics = useCallback(\n    (adminUrl: string) =>\n      new TopicsApi(\n        new Configuration({\n          accessToken,\n          basePath: adminUrl,\n        })\n      ),\n    [accessToken]\n  );\n  const consumerGroups = useCallback(\n    (adminUrl: string) =>\n      new GroupsApi(\n        new Configuration({\n          accessToken,\n          basePath: adminUrl,\n        })\n      ),\n    [accessToken]\n  );\n  return {\n    kafkasFleet,\n    account,\n    topics,\n    consumerGroups,\n  };\n};\n","import type { KafkaRequest } from \"@rhoas/kafka-management-sdk\";\nimport type {\n  CloudProvider,\n  KafkaInstance,\n  MarketPlaceSubscriptions,\n  Plan,\n  Status,\n} from \"ui\";\nimport type { SizeWithLimits } from \"../fetchers\";\n\nexport type KafkaInstanceEnhanced = Required<KafkaInstance> & {\n  request: KafkaRequest;\n};\n\nexport function kafkaRequestToKafkaInstanceEnhanched(\n  instance: KafkaRequest,\n  marketplaceSubscriptions: MarketPlaceSubscriptions[],\n  developerPlanInstanceLimits: SizeWithLimits[],\n  standardPlanInstanceLimits: SizeWithLimits[]\n): KafkaInstanceEnhanced {\n  const enhancedInstance: KafkaInstanceEnhanced = {\n    billing: undefined,\n    connectionRate: 0,\n    connections: 0,\n    createdAt: instance.created_at || new Date().toISOString(),\n    egress: 0,\n    expiryDate: instance.expires_at as string | undefined,\n    id: instance.id,\n    ingress: 0,\n    maxPartitions: 0,\n    messageSize: 0,\n    name: instance.name || \"\",\n    owner: instance.owner || \"\",\n    plan: instance.billing_model as Plan,\n    provider: instance.cloud_provider as CloudProvider,\n    region: instance.region || \"\",\n    size: \"1\",\n    status: apiStatusToUIStatus(instance.status || \"\"),\n    storage: 0,\n    updatedAt: instance.updated_at || new Date().toISOString(),\n    request: instance,\n    version: instance.version || \"\",\n    bootstrapUrl: instance.bootstrap_server_host,\n    adminUrl: instance.admin_api_server_url,\n  };\n\n  // update the billing info\n  try {\n    const marketplaceForBilling = marketplaceSubscriptions.find((ms) =>\n      ms.subscriptions.find((s) => s === instance.billing_cloud_account_id)\n    )?.marketplace;\n\n    const billing: KafkaInstanceEnhanced[\"billing\"] =\n      instance.billing_model === \"standard\"\n        ? \"prepaid\"\n        : marketplaceForBilling && instance.billing_cloud_account_id\n        ? {\n            marketplace: marketplaceForBilling,\n            subscription: instance.billing_cloud_account_id,\n          }\n        : undefined;\n    enhancedInstance.billing = billing;\n  } catch (e) {\n    console.warn(\n      \"kafkaRequestToKafkaInstance\",\n      `couldn't retrieve the billing info for`,\n      instance\n    );\n  }\n\n  // update the limits\n  try {\n    const limits =\n      instance.instance_type === \"developer\"\n        ? developerPlanInstanceLimits\n        : standardPlanInstanceLimits;\n    const thisInstanceLimits = limits.find((l) => l.id === instance.size_id);\n    if (thisInstanceLimits) {\n      enhancedInstance.size = thisInstanceLimits.displayName;\n      enhancedInstance.ingress = thisInstanceLimits.ingress;\n      enhancedInstance.egress = thisInstanceLimits.egress;\n      enhancedInstance.storage = instance.max_data_retention_size?.bytes;\n      enhancedInstance.connections = thisInstanceLimits.connections;\n      enhancedInstance.connectionRate = thisInstanceLimits.connectionRate;\n      enhancedInstance.maxPartitions = thisInstanceLimits.maxPartitions;\n      enhancedInstance.messageSize = thisInstanceLimits.messageSize;\n    }\n  } catch (e) {\n    console.warn(\n      \"kafkaRequestToKafkaInstance\",\n      `couldn't retrieve the limits info for`,\n      instance\n    );\n  }\n\n  return enhancedInstance;\n}\n\nfunction apiStatusToUIStatus(status: string): Status {\n  const mapping: { [key: string]: Status } = {\n    accepted: \"accepted\",\n    preparing: \"preparing\",\n    provisioning: \"provisioning\",\n    ready: \"ready\",\n    failed: \"degraded\",\n    deprovision: \"deprovision\",\n    deleting: \"deleting\",\n  };\n  return mapping[status] || \"degraded\";\n}\n","import type { KafkaRequest } from \"@rhoas/kafka-management-sdk\";\nimport {\n  useProviderRegionSizesFetchQuery,\n  useProvidersWithRegionsFetchQuery,\n  useStandardQuotaFetchQuery,\n} from \"../fetchQueries\";\nimport { kafkaRequestToKafkaInstanceEnhanched } from \"../transformers/kafkaRequestToKafkaInstanceEnhanched\";\n\nexport function useKafkaInstanceTransformer() {\n  const getStandardQuotaQuery = useStandardQuotaFetchQuery();\n  const getProvidersInfo = useProvidersWithRegionsFetchQuery();\n  const getProviderRegionsSizes = useProviderRegionSizesFetchQuery();\n\n  return async function kafkaInstanceTransformer(instance: KafkaRequest) {\n    const standardQuota = await getStandardQuotaQuery();\n\n    const providersInfo = await getProvidersInfo(\n      instance.billing_model !== \"standard\" ? \"developer\" : \"standard\"\n    );\n    const providerInfo = providersInfo.providers.find(\n      (p) => p.id === instance.cloud_provider\n    );\n    if (!providerInfo) {\n      return Promise.reject(\"Invalid cloud provider\");\n    }\n    const standardPlanLimitsQuery = getProviderRegionsSizes(\n      providerInfo,\n      instance.region!,\n      \"standard\"\n    );\n    const developerPlanLimitsQuery = getProviderRegionsSizes(\n      providerInfo,\n      instance.region!,\n      \"developer\"\n    );\n    const [standardPlanLimits, developerPlanLimits] = await Promise.all([\n      standardPlanLimitsQuery,\n      developerPlanLimitsQuery,\n    ]);\n    return kafkaRequestToKafkaInstanceEnhanched(\n      instance,\n      standardQuota.marketplaceSubscriptions,\n      developerPlanLimits,\n      standardPlanLimits\n    );\n  };\n}\n","import { useQuery } from \"@tanstack/react-query\";\nimport { useApiConfiguration } from \"../ApiProvider\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\nimport { useKafkaInstanceTransformer } from \"./useKafkaInstanceTransformer\";\n\nexport function useKafkaInstance(id: string | undefined) {\n  const { refetchInterval } = useApiConfiguration();\n  const dataMapper = useKafkaInstanceTransformer();\n  const { kafkasFleet } = useApi();\n  const api = kafkasFleet();\n\n  return useQuery({\n    enabled: Boolean(id),\n    queryKey: kafkaQueries.instance.details({ id }),\n    queryFn: async () => {\n      if (!id) {\n        return Promise.reject(\"Invalid Kafka instance id\");\n      }\n      const instance = await api.getKafkaById(id);\n      return dataMapper(instance.data);\n    },\n    refetchInterval,\n  });\n}\n","import type { KafkaRequestPayload } from \"@rhoas/kafka-management-sdk\";\nimport { APIErrorCodes, isServiceApiError } from \"@rhoas/kafka-management-sdk\";\nimport type { CreateKafkaInstanceServices } from \"ui\";\nimport { useApi } from \"../useApi\";\n\nconst ErrorCodes = {\n  /** Forbidden to perform this action*/\n  UNAUTHORIZED_USER: APIErrorCodes.ERROR_4,\n  /** Kafka cluster name is already used*/\n  DUPLICATE_INSTANCE_NAME: APIErrorCodes.ERROR_36,\n  /** The maximum number of allowed kafka instances has been reached*/\n  INTERNAL_CAPACITY_ERROR: APIErrorCodes.ERROR_24,\n  /** Insufficient quota*/\n  INSUFFICIENT_QUOTA: APIErrorCodes.ERROR_120,\n  /** Forbidden to create more instances than the maximum allowed*/\n  TRIAL_USED: APIErrorCodes.ERROR_5,\n  /** Failed to check quota*/\n  FAILED_TO_CHECK_QUOTA: APIErrorCodes.ERROR_121,\n  /** Bad request*/\n  OWNER_DOES_NOT_EXIST: APIErrorCodes.ERROR_21,\n};\n\n/**\n * Create Kafka instance hook that creates kafka instance\n * @param currentAMSPlan\n * @returns\n */\nexport const useCreateInstance =\n  (): CreateKafkaInstanceServices[\"onCreate\"] => {\n    const { kafkasFleet } = useApi();\n\n    return async (data, onSuccess, onError) => {\n      const apisService = kafkasFleet();\n\n      try {\n        const kafkaRequest = {} as KafkaRequestPayload;\n        kafkaRequest.name = data.name;\n        kafkaRequest.cloud_provider = data.provider;\n        kafkaRequest.region = data.region;\n        kafkaRequest.plan = data.plan + \".\" + data.sizeId;\n        kafkaRequest.billing_model =\n          data.billing === \"prepaid\"\n            ? \"standard\"\n            : data.billing !== undefined\n            ? \"marketplace\"\n            : null;\n        kafkaRequest.billing_cloud_account_id =\n          data.billing && data.billing !== \"prepaid\"\n            ? data.billing.subscription\n            : null;\n        await apisService.createKafka(true, kafkaRequest);\n        onSuccess();\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const { code } = error?.response?.data || {};\n\n          switch (data.plan) {\n            case \"developer\":\n              switch (code) {\n                case ErrorCodes.DUPLICATE_INSTANCE_NAME:\n                  onError(\"name-taken\");\n                  break;\n\n                // regardless of the error, let's not give too many details to trial users\n                default:\n                  onError(\"developer-unavailable\");\n                  break;\n              }\n              break;\n\n            case \"standard\":\n              switch (code) {\n                case ErrorCodes.DUPLICATE_INSTANCE_NAME:\n                  onError(\"name-taken\");\n                  break;\n\n                case ErrorCodes.INTERNAL_CAPACITY_ERROR:\n                  onError(\"region-unavailable\");\n                  break;\n\n                case ErrorCodes.INSUFFICIENT_QUOTA:\n                  onError(\"insufficient-quota\");\n                  break;\n\n                default:\n                  console.error(\n                    \"useAvailableProvidersAndDefault\",\n                    \"createKafka unknown error\",\n                    error\n                  );\n                  onError(\"unknown\");\n              }\n              break;\n          }\n        } else {\n          console.error(\n            \"useAvailableProvidersAndDefault\",\n            \"createKafka unexpected error\",\n            error\n          );\n        }\n      }\n    };\n  };\n","import type {\n  SortDirection,\n  Topic,\n  TopicsApi,\n} from \"@rhoas/kafka-instance-sdk\";\nimport type { KafkaTopic } from \"ui\";\nimport type { KafkaTopicsSortableColumn } from \"../types\";\n\nexport type FetchKafkaTopicsParams = {\n  getTopics: TopicsApi[\"getTopics\"];\n  page?: number;\n  perPage?: number;\n  sort?: KafkaTopicsSortableColumn;\n  direction?: SortDirection;\n  filter?: string;\n};\n\nexport async function fetchKafkaTopics({\n  getTopics,\n  page,\n  perPage,\n  filter,\n  sort,\n  direction,\n}: FetchKafkaTopicsParams): Promise<{ topics: KafkaTopic[]; count: number }> {\n  const response = await getTopics(\n    undefined,\n    undefined,\n    perPage,\n    filter,\n    page,\n    direction,\n    sort\n  );\n  const topics = (response.data.items || []).map((t: Topic) => ({\n    topic_name: t.name!,\n    partitions: t.partitions?.length || 0,\n    retention_size:\n      t.config?.find(({ key }) => key === \"retention.bytes\")?.value || \"\",\n    retention_time:\n      t.config?.find(({ key }) => key === \"retention.ms\")?.value || \"\",\n  }));\n  const count = response.data.total;\n  return { count, topics };\n}\n","import type { QuotaCost } from \"@rhoas/account-management-sdk\";\n\nexport const standardId = \"RHOSAK\" as const;\nexport const developerId = \"RHOSAKTrial\" as const;\nexport const resourceName = \"rhosak\" as const;\n\nexport function isStandardQuota(q: QuotaCost) {\n  return q.related_resources?.find((r) => r.billing_model === \"standard\");\n}\n\nexport function isMarketplaceQuota(q: QuotaCost) {\n  return q.related_resources?.find((r) => r.billing_model === \"marketplace\");\n}\n","export function valuesToQuery(\n  field: string,\n  values: string[],\n  comparison: \"%\" | \"=\"\n): string | undefined {\n  return values\n    .map((v) =>\n      comparison === \"%\"\n        ? `${field} like %${v.trim()}%`\n        : `${field} = ${v.trim()}`\n    )\n    .join(\" or \");\n}\n","import type { DefaultApi, KafkaRequest } from \"@rhoas/kafka-management-sdk\";\nimport type { SimplifiedStatus } from \"ui\";\nimport { SimplifiedStatuses } from \"ui\";\nimport type { KafkaInstanceEnhanced } from \"../transformers/kafkaRequestToKafkaInstanceEnhanched\";\nimport type { KafkaInstancesSortableColumn } from \"../types\";\nimport { valuesToQuery } from \"./valuesToQuery\";\n\nconst uiColumnMapping: {\n  [key in KafkaInstancesSortableColumn]: keyof KafkaRequest;\n} = {\n  name: \"name\",\n  owner: \"owner\",\n  provider: \"cloud_provider\",\n  region: \"region\",\n  createdAt: \"created_at\",\n};\nexport type FetchKafkaInstancesParams = {\n  getKafkas: DefaultApi[\"getKafkas\"];\n  dataMapper: (data: KafkaRequest) => Promise<KafkaInstanceEnhanced>;\n  page: number;\n  perPage: number;\n  name: string[];\n  owner: string[];\n  status: SimplifiedStatus[];\n  sort: KafkaInstancesSortableColumn;\n  direction: \"asc\" | \"desc\";\n};\n\nexport async function fetchKafkaInstances(\n  params: FetchKafkaInstancesParams\n): Promise<{\n  instances: KafkaInstanceEnhanced[];\n  count: number;\n}> {\n  const {\n    name,\n    status,\n    owner,\n    sort,\n    direction,\n    page,\n    perPage,\n    dataMapper,\n    getKafkas,\n  } = params;\n  const search = filtersToSearch(name, owner, status);\n\n  const res = await getKafkas(\n    page.toString(10),\n    perPage.toString(10),\n    sort ? `${uiColumnMapping[sort]} ${direction}` : undefined,\n    search\n  );\n  const rawInstances = res.data.items;\n  const count = res.data.total;\n  const instances = await Promise.all(rawInstances.map(dataMapper));\n  return {\n    instances,\n    count,\n  };\n}\n\nexport function filtersToSearch(\n  name: string[],\n  owner: string[],\n  status: SimplifiedStatus[]\n): string {\n  const querystring = [\n    valuesToQuery(\"name\", name, \"%\"),\n    valuesToQuery(\"owner\", owner, \"%\"),\n    valuesToQuery(\n      \"status\",\n      status.flatMap((s) => SimplifiedStatuses[s]),\n      \"=\"\n    ),\n  ]\n    .filter(Boolean)\n    .map((q) => `(${q!})`)\n    .join(\" and \");\n  return querystring;\n}\n","import type { DefaultApi, InstantQuery } from \"@rhoas/kafka-management-sdk\";\nimport type { NoUndefinedField } from \"../types\";\n\nexport async function fetchKafkaKpiMetrics(\n  getMetricsByInstantQuery: DefaultApi[\"getMetricsByInstantQuery\"],\n  id: string\n) {\n  let topics = 0,\n    topicPartitions = 0,\n    consumerGroups = 0;\n\n  const response = await getMetricsByInstantQuery(id, [\n    \"kafka_topic:kafka_topic_partitions:sum\", // (Number of topic partitions)\n    \"kafka_topic:kafka_topic_partitions:count\", // (Number of topics)\n    \"consumergroup:kafka_consumergroup_members:count\", // (number of consumer groups - note that this metric will appear after a consumer group is created. There should be handled by the UI in a way that the metric isn't visible if no consumer groups are created)\n  ]);\n\n  const safeMetrics: NoUndefinedField<InstantQuery[]> = (response.data.items ||\n    []) as NoUndefinedField<InstantQuery[]>;\n\n  safeMetrics.forEach(({ metric, value }) => {\n    const { __name__: name } = metric;\n\n    switch (name) {\n      case \"kafka_topic:kafka_topic_partitions:sum\":\n        topicPartitions = value;\n        break;\n      case \"kafka_topic:kafka_topic_partitions:count\":\n        topics = value;\n        break;\n      case \"consumergroup:kafka_consumergroup_members:count\":\n        consumerGroups = value;\n        break;\n    }\n  });\n  return {\n    consumerGroups,\n    topicPartitions,\n    topics,\n  };\n}\n","import type {\n  GetTopicsMetricsResponse,\n  PartitionBytesMetric,\n  TimeSeriesMetrics,\n} from \"@rhoas/app-services-ui-components\";\nimport type { DefaultApi } from \"@rhoas/kafka-management-sdk\";\nimport type { SafeRangeQuery } from \"../types\";\n\nexport type FetchTopicsMetricsProps = {\n  getMetricsByRangeQuery: DefaultApi[\"getMetricsByRangeQuery\"];\n  id: string;\n  duration: number;\n  interval: number;\n  selectedTopic: string | undefined;\n};\n\nexport async function fetchKafkaTopicMetrics({\n  getMetricsByRangeQuery,\n  id,\n  duration,\n  interval,\n  selectedTopic,\n}: FetchTopicsMetricsProps): Promise<\n  Omit<GetTopicsMetricsResponse, \"kafkaTopics\">\n> {\n  const response = await getMetricsByRangeQuery(id, duration, interval, [\n    \"kafka_topic:kafka_server_brokertopicmetrics_bytes_in_total:rate5m\",\n    \"kafka_topic:kafka_server_brokertopicmetrics_bytes_out_total:rate5m\",\n    \"kafka_topic:kafka_log_log_size:sum\",\n    \"kafka_topic:kafka_server_brokertopicmetrics_messages_in_total:rate5m\",\n  ]);\n\n  // Remove all results with no data. Not sure this can really  happen but since\n  // the types allow for undefined we need to do a bit of defensive programming.\n  const safeMetrics: SafeRangeQuery[] = (response.data.items || []).filter(\n    (m) =>\n      // defensive programming\n      !(m.values && m.metric && m.metric.topic && m.metric.name)\n  ) as SafeRangeQuery[];\n\n  // Also filter for metrics about the selectedTopic, if specified\n  const filteredMetrics = safeMetrics.filter((m) =>\n    // filter for metrics for the selectedTopic, if needed\n    selectedTopic !== undefined ? m.metric?.topic === selectedTopic : true\n  );\n\n  // get the unique topics we have metrics for in the selected time range\n  const topics = Array.from(new Set(safeMetrics.map((m) => m.metric.topic)));\n\n  const bytesIncoming: TimeSeriesMetrics = {};\n  const bytesOutgoing: TimeSeriesMetrics = {};\n  const bytesPerPartition: PartitionBytesMetric = {};\n  const incomingMessageRate: TimeSeriesMetrics = {};\n\n  filteredMetrics.forEach((m) => {\n    const { __name__: name, topic } = m.metric;\n\n    function addAggregatedTotalBytesTo(metric: TimeSeriesMetrics) {\n      m.values.forEach(\n        ({ value, timestamp }) =>\n          (metric[timestamp] = value + (metric[timestamp] || 0))\n      );\n    }\n\n    function addAggregatePartitionBytes() {\n      const partition = bytesPerPartition[topic] || {};\n      m.values.forEach(\n        ({ value, timestamp }) =>\n          (partition[timestamp] = value + (partition[timestamp] || 0))\n      );\n      bytesPerPartition[topic] = partition;\n    }\n\n    switch (name) {\n      case \"kafka_topic:kafka_server_brokertopicmetrics_bytes_in_total:rate5m\":\n        addAggregatedTotalBytesTo(bytesIncoming);\n        break;\n      case \"kafka_topic:kafka_server_brokertopicmetrics_bytes_out_total:rate5m\":\n        addAggregatedTotalBytesTo(bytesOutgoing);\n        break;\n      case \"kafka_topic:kafka_log_log_size:sum\":\n        addAggregatePartitionBytes();\n        break;\n      case \"kafka_topic:kafka_server_brokertopicmetrics_messages_in_total:rate5m\":\n        addAggregatedTotalBytesTo(incomingMessageRate);\n        break;\n    }\n  });\n\n  return {\n    metricsTopics: topics,\n    bytesOutgoing,\n    bytesIncoming,\n    bytesPerPartition,\n    incomingMessageRate,\n  };\n}\n","import type {\n  ConsumerGroupState,\n  GroupsApi,\n  SortDirection,\n} from \"@rhoas/kafka-instance-sdk\";\nimport type { ConsumerGroup } from \"ui\";\nimport type { KafkaConsumerGroupSortableColumn } from \"../types\";\n\nexport type FetchKafkaConsumerGroupsParams = {\n  getConsumerGroups: GroupsApi[\"getConsumerGroups\"];\n  page?: number;\n  perPage?: number;\n  sort?: KafkaConsumerGroupSortableColumn;\n  direction?: SortDirection;\n  topic?: string;\n  groupId?: string;\n};\n\nexport async function fetchKafkaConsumerGroups({\n  getConsumerGroups,\n  page,\n  perPage,\n  topic,\n  groupId,\n  sort,\n  direction,\n}: FetchKafkaConsumerGroupsParams): Promise<{\n  groups: ConsumerGroup[];\n  count: number;\n}> {\n  const response = await getConsumerGroups(\n    undefined,\n    undefined,\n    perPage,\n    page,\n    topic,\n    groupId,\n    direction,\n    sort\n  );\n  const groups = (response.data.items || []).map<ConsumerGroup>((t) => ({\n    consumerGroupId: t.groupId || \"\",\n    activeMembers: t.metrics?.activeConsumers || 0,\n    partitionsWithLag: t.metrics?.laggingPartitions || 0,\n    state: stateMapping[t.state as ConsumerGroupState],\n  }));\n  const count = response.data.total;\n  return { count, groups };\n}\n\nconst stateMapping: { [state in ConsumerGroupState]: ConsumerGroup[\"state\"] } =\n  {\n    DEAD: \"Dead\",\n    EMPTY: \"Empty\",\n    STABLE: \"Stable\",\n    UNKNOWN: \"Unknown\",\n    COMPLETING_REBALANCE: \"CompletingRebalance\",\n    PREPARING_REBALANCE: \"PreparingRebalance\",\n  };\n","import type { Size } from \"@rhoas/app-services-ui-components\";\nimport type {\n  DefaultApi,\n  SupportedKafkaSize,\n} from \"@rhoas/kafka-management-sdk\";\nimport type { Plan } from \"ui\";\nimport type { CloudProviderInfoWithRegionsCapacity } from \"./fetchProvidersWithRegions\";\n\nexport type SizeWithLimits = Size & { trialDurationHours: number };\n\nexport async function fetchProviderRegionSizes(\n  api: DefaultApi[\"getInstanceTypesByCloudProviderAndRegion\"],\n  providerInfo: CloudProviderInfoWithRegionsCapacity,\n  region: string,\n  instanceType: Plan\n) {\n  const regions = providerInfo.regions;\n  const regionInfo = regions.find((r) => r.id === region);\n  const availableSizes =\n    regionInfo?.capacity.flatMap((c) =>\n      c.available_sizes.map((s) => `${c.instance_type}.${s}`)\n    ) || [];\n  const sizes = await api(providerInfo.id, region);\n  if (!sizes?.data?.instance_types) {\n    throw new Error(`No instance_types from backend`);\n  }\n\n  const standardSizes =\n    sizes?.data?.instance_types.find((i) => i.id === instanceType)?.sizes || [];\n\n  return standardSizes.map(\n    apiSizeToComponentSize.bind(\n      undefined,\n      (id) => !availableSizes.includes(`${instanceType}.${id}`)\n    )\n  );\n}\n\n//\n// export async function fetchProviderRegionSizesForPlanStandard (\n//   api: DefaultApi['getInstanceTypesByCloudProviderAndRegion'], providerInfo: CloudProviderInfoWithRegionsCapacity, region: string\n// )  {\n//   return fetchProviderRegionSizes(api, providerInfo, region, \"standard\");\n// };\n//\n// export const fetchProviderRegionSizesForPlanDeveloper = (\n//   api: DefaultApi['getInstanceTypesByCloudProviderAndRegion'], providerInfo: CloudProviderInfoWithRegionsCapacity, region: string\n//\n// ) => {\n//   const { data: standardSizes, isError } = await fetchProviderRegionSizes(\n//     provider,\n//     region,\n//     \"standard\"\n//   );\n//   const { data: developerSizes } = fetchProviderRegionSizes(\n//     provider,\n//     region,\n//     \"developer\"\n//   );\n//   return useQuery({\n//     queryKey: [],\n//     queryFn: () => {\n//       return {\n//         standard:\n//           standardSizes ||\n//           ([\n//             { id: \"1\", displayName: \"1\" },\n//             { id: \"2\", displayName: \"2\" },\n//           ] as StandardSizes),\n//         trial: developerSizes![0],\n//       };\n//     },\n//     enabled: (!!standardSizes || isError) && !!developerSizes,\n//   });\n// };\n\nfunction apiSizeToComponentSize(\n  isDisabled: (id: string) => boolean,\n  apiSize: SupportedKafkaSize\n): SizeWithLimits {\n  const s = apiSize as Required<SupportedKafkaSize>;\n  return {\n    id: s.id,\n    displayName: s.display_name,\n    quota: s.quota_consumed,\n    ingress: (s.ingress_throughput_per_sec.bytes || 0) / 1048576,\n    egress: (s.egress_throughput_per_sec.bytes || 0) / 1048576,\n    storage: Math.round((s.max_data_retention_size.bytes || 0) / 1073741824),\n    connections: s.total_max_connections,\n    connectionRate: s.max_connection_attempts_per_sec,\n    maxPartitions: s.max_partitions,\n    messageSize: (s.max_message_size.bytes || 0) / 1048576,\n    status: s.maturity_status === \"stable\" ? \"stable\" : \"preview\",\n    trialDurationHours: s.lifespan_seconds ? s.lifespan_seconds / 60 / 60 : 0,\n    isDisabled: isDisabled(s.id),\n  };\n}\n","import type { DefaultApi } from \"@rhoas/kafka-management-sdk\";\nimport type { GetKafkaInstanceMetricsResponse, TimeSeriesMetrics } from \"ui\";\nimport type { SafeRangeQuery } from \"../types\";\n\nexport type FetchKafkaInstanceMetricsProps = {\n  getMetricsByRangeQuery: DefaultApi[\"getMetricsByRangeQuery\"];\n  id: string;\n  duration: number;\n  interval: number;\n};\n\nexport async function fetchKafkaInstanceMetrics({\n  getMetricsByRangeQuery,\n  id,\n  duration,\n  interval,\n}: FetchKafkaInstanceMetricsProps): Promise<GetKafkaInstanceMetricsResponse> {\n  const response = await getMetricsByRangeQuery(id, duration, interval, [\n    \"kubelet_volume_stats_used_bytes\",\n    \"kafka_namespace:kafka_server_socket_server_metrics_connection_creation_rate:sum\",\n    \"kafka_namespace:kafka_server_socket_server_metrics_connection_count:sum\",\n  ]);\n\n  // Remove all results with no data. Not sure this can really  happen but since\n  // the types allow for undefined we need to do a bit of defensive programming.\n  const safeMetrics: SafeRangeQuery[] = (response.data.items || []).filter(\n    (m) =>\n      // defensive programming\n      !(\n        m.values &&\n        m.metric &&\n        m.metric.topic &&\n        m.metric.name &&\n        m.metric.persistentvolumeclaim &&\n        m.metric.persistentvolumeclaim.includes(\"zookeeper\")\n      )\n  ) as SafeRangeQuery[];\n\n  const usedDiskSpaceMetrics: TimeSeriesMetrics = {};\n  const connectionAttemptRateMetrics: TimeSeriesMetrics = {};\n  const clientConnectionsMetrics: TimeSeriesMetrics = {};\n\n  const connectionRateLimit = 0,\n    connectionsLimit = 0,\n    diskSpaceLimit = 0;\n\n  safeMetrics.forEach((m) => {\n    const { __name__: name } = m.metric;\n\n    function addAggregatedValuesTo(metric: TimeSeriesMetrics) {\n      m.values.forEach(\n        ({ value, timestamp }) =>\n          (metric[timestamp] = value + (metric[timestamp] || 0))\n      );\n    }\n\n    switch (name) {\n      case \"kubelet_volume_stats_used_bytes\":\n        addAggregatedValuesTo(usedDiskSpaceMetrics);\n        break;\n      case \"kafka_namespace:kafka_server_socket_server_metrics_connection_creation_rate:sum\":\n        addAggregatedValuesTo(connectionAttemptRateMetrics);\n        break;\n      case \"kafka_namespace:kafka_server_socket_server_metrics_connection_count:sum\":\n        addAggregatedValuesTo(clientConnectionsMetrics);\n        break;\n    }\n  });\n\n  return {\n    usedDiskSpaceMetrics,\n    clientConnectionsMetrics,\n    connectionAttemptRateMetrics,\n    diskSpaceLimit,\n    connectionRateLimit,\n    connectionsLimit,\n  };\n}\n","import type {\n  CloudProvider,\n  CloudProviderInfo,\n} from \"@rhoas/app-services-ui-components\";\nimport type { DefaultApi } from \"@rhoas/kafka-management-sdk\";\nimport type { Plan } from \"ui\";\n\nexport type CloudProviderInfoWithRegionsCapacity = Omit<\n  CloudProviderInfo,\n  \"regions\"\n> & {\n  regions: Awaited<ReturnType<typeof fetchProviderRegions>>;\n};\n\nexport async function fetchProvidersWithRegions(\n  getCloudProviders: DefaultApi[\"getCloudProviders\"],\n  getCloudProviderRegions: DefaultApi[\"getCloudProviderRegions\"],\n  plan: Plan\n) {\n  const res = await getCloudProviders();\n  const allProviders = res?.data?.items || [];\n\n  const providers = await Promise.all(\n    allProviders\n      .filter((p) => p.enabled)\n      .map(async (provider) => {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const regions = await fetchProviderRegions(\n          getCloudProviderRegions,\n          provider.id!,\n          plan\n        );\n        const providerInfo: CloudProviderInfoWithRegionsCapacity = {\n          id: provider.id as CloudProvider,\n          displayName: provider.display_name!,\n          regions,\n        };\n        return providerInfo;\n      })\n  );\n  const firstProvider = providers[0];\n  return { providers, defaultProvider: firstProvider?.id };\n}\n\nexport async function fetchProviderRegions(\n  getCloudProviderRegions: DefaultApi[\"getCloudProviderRegions\"],\n  provider: string,\n  instanceType: Plan\n) {\n  const res = await getCloudProviderRegions(provider);\n\n  if (!res?.data?.items) {\n    return Promise.reject(\"Invalid provider\");\n  }\n\n  const regionsForInstance = res.data.items.filter(\n    (region) =>\n      region.enabled &&\n      region.capacity.some((c) => c.instance_type === instanceType)\n  );\n\n  return regionsForInstance.map((r) => {\n    const max_capacity_reached = r.capacity?.some(\n      (c) => c.instance_type === instanceType && c.available_sizes?.length === 0\n    );\n\n    return {\n      id: r.id as CloudProvider,\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      displayName: r.display_name!,\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      isDisabled: max_capacity_reached,\n      capacity: r.capacity,\n    };\n  });\n}\n","import { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useApiConfiguration } from \"../ApiProvider\";\nimport type { FetchKafkaInstancesParams } from \"../fetchers\";\nimport { fetchKafkaInstances } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\nimport { useKafkaInstanceTransformer } from \"./useKafkaInstanceTransformer\";\n\nexport function useKafkaInstances(\n  params: Omit<FetchKafkaInstancesParams, \"dataMapper\" | \"getKafkas\">\n) {\n  const { refetchInterval } = useApiConfiguration();\n  const queryClient = useQueryClient();\n  const dataMapper = useKafkaInstanceTransformer();\n  const { kafkasFleet } = useApi();\n  const api = kafkasFleet();\n\n  return useQuery({\n    queryKey: kafkaQueries.list(params),\n    queryFn: async () => {\n      const res = await fetchKafkaInstances({\n        getKafkas: (...args) => api.getKafkas(...args),\n        dataMapper,\n        ...params,\n      });\n      res.instances.forEach((i) =>\n        queryClient.setQueryData(kafkaQueries.instance.details({ id: i.id }), i)\n      );\n      return res;\n    },\n    refetchInterval,\n  });\n}\n","import { useQuery } from \"@tanstack/react-query\";\nimport { useApiConfiguration } from \"../ApiProvider\";\nimport type { FetchKafkaTopicsParams } from \"../fetchers\";\nimport { fetchKafkaTopics } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useKafkaInstanceTopics(\n  params: { id?: string; adminUrl?: string } & Omit<\n    FetchKafkaTopicsParams,\n    \"getTopics\"\n  >\n) {\n  const { refetchInterval } = useApiConfiguration();\n  const { topics } = useApi();\n\n  return useQuery({\n    queryKey: kafkaQueries.instance.topics(params),\n    queryFn: () => {\n      if (!params.id) {\n        return Promise.reject(\"Invalid id\");\n      }\n      if (!params.adminUrl) {\n        return Promise.reject(\"Invalid adminUrl\");\n      }\n      const api = topics(params.adminUrl);\n\n      return fetchKafkaTopics({\n        getTopics: (...args) => api.getTopics(...args),\n        ...params,\n      });\n    },\n    enabled: Boolean(params.adminUrl) && Boolean(params.id),\n    refetchInterval,\n  });\n}\n","import { useQuery } from \"@tanstack/react-query\";\nimport { useApiConfiguration } from \"../ApiProvider\";\nimport type { FetchKafkaConsumerGroupsParams } from \"../fetchers\";\nimport { fetchKafkaConsumerGroups } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useKafkaInstanceConsumerGroups(\n  params: { id?: string; adminUrl?: string } & Omit<\n    FetchKafkaConsumerGroupsParams,\n    \"getConsumerGroups\"\n  >\n) {\n  const { refetchInterval } = useApiConfiguration();\n  const { consumerGroups } = useApi();\n\n  return useQuery({\n    queryKey: kafkaQueries.instance.consumerGroups(params),\n    queryFn: () => {\n      if (!params.id) {\n        return Promise.reject(\"Invalid id\");\n      }\n      if (!params.adminUrl) {\n        return Promise.reject(\"Invalid adminUrl\");\n      }\n      const api = consumerGroups(params.adminUrl);\n\n      return fetchKafkaConsumerGroups({\n        getConsumerGroups: (...args) => api.getConsumerGroups(...args),\n        ...params,\n      });\n    },\n    enabled: Boolean(params.adminUrl) && Boolean(params.id),\n    refetchInterval,\n  });\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport { useKafkaInstanceTransformer } from \"../queries\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useKafkaInstanceFetchQuery() {\n  const queryClient = useQueryClient();\n  const dataMapper = useKafkaInstanceTransformer();\n  const { kafkasFleet } = useApi();\n  return async (id: string) => {\n    const api = kafkasFleet();\n    return queryClient.fetchQuery({\n      queryKey: kafkaQueries.instance.details({ id }),\n      queryFn: async () => {\n        const instance = await api.getKafkaById(id);\n        return dataMapper(instance.data);\n      },\n    });\n  };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport { fetchOrganization, fetchStandardQuota } from \"../fetchers\";\nimport { masQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useStandardQuotaFetchQuery() {\n  const queryClient = useQueryClient();\n  const { account } = useApi();\n  const ams = account();\n\n  return async () => {\n    const organization = await queryClient.fetchQuery({\n      queryKey: masQueries.organization(),\n      queryFn: () =>\n        fetchOrganization((...args) =>\n          ams.apiAccountsMgmtV1CurrentAccountGet(...args)\n        ),\n      staleTime: Infinity,\n    });\n    if (!organization) {\n      return Promise.reject(\"Missing organization id\");\n    }\n    return queryClient.fetchQuery({\n      queryKey: masQueries.quota.available({ organization }),\n      queryFn: () =>\n        fetchStandardQuota(\n          (...args) =>\n            ams.apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(...args),\n          organization\n        ),\n      staleTime: Infinity,\n    });\n  };\n}\n","import type { AppServicesApi } from \"@rhoas/account-management-sdk\";\n\nexport async function fetchOrganization(\n  api: AppServicesApi[\"apiAccountsMgmtV1CurrentAccountGet\"]\n) {\n  const account = await api();\n  const orgId = account?.data?.organization?.id;\n  return orgId;\n}\n","import type { AppServicesApi } from \"@rhoas/account-management-sdk\";\nimport type {\n  MarketPlace,\n  MarketPlaceSubscriptions,\n} from \"@rhoas/app-services-ui-components\";\nimport {\n  developerId,\n  isMarketplaceQuota,\n  isStandardQuota,\n  resourceName,\n  standardId,\n} from \"../utilsAndConstants\";\n\nexport type StandardQuota = {\n  hasTrialQuota: boolean;\n  remainingPrepaidQuota: number | undefined;\n  remainingMarketplaceQuota: number | undefined;\n  marketplaceSubscriptions: MarketPlaceSubscriptions[];\n};\nexport const fetchStandardQuota = async (\n  api: AppServicesApi[\"apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet\"],\n  organizationId: string\n) => {\n  const quotaResponse = await api(\n    organizationId,\n    undefined,\n    true,\n    undefined,\n    true\n  );\n  if (quotaResponse.status !== 200) {\n    throw new Error(quotaResponse.statusText);\n  }\n  const standardQuotas = quotaResponse.data.items?.filter((q) =>\n    q.related_resources?.find(\n      (r) => r.resource_name === resourceName && r.product === standardId\n    )\n  );\n\n  const prepaidQuota = standardQuotas?.find(isStandardQuota);\n\n  const marketplaceQuotas = standardQuotas?.some(isMarketplaceQuota)\n    ? standardQuotas?.filter(isMarketplaceQuota)\n    : undefined;\n\n  const hasTrialQuota =\n    (prepaidQuota === undefined &&\n      marketplaceQuotas === undefined &&\n      quotaResponse.data.items?.some((q) =>\n        q.related_resources?.find(\n          (r) => r.resource_name === resourceName && r.product === developerId\n        )\n      )) ||\n    false;\n\n  const remainingPrepaidQuota = prepaidQuota\n    ? prepaidQuota.allowed - prepaidQuota.consumed\n    : undefined;\n  const remainingMarketplaceQuota = marketplaceQuotas\n    ? marketplaceQuotas.reduce((agg, q) => q.allowed - q.consumed + agg, 0)\n    : undefined;\n  const unaggregatedSubscriptions = marketplaceQuotas\n    ?.filter((q) => q.cloud_accounts !== undefined)\n    .flatMap((q) => q.cloud_accounts!);\n  const subscriptionMarketplaces = Array.from(\n    new Set(\n      unaggregatedSubscriptions?.map((s) => s.cloud_provider_id as MarketPlace)\n    )\n  );\n  const marketplaceSubscriptions: MarketPlaceSubscriptions[] =\n    unaggregatedSubscriptions\n      ? subscriptionMarketplaces.map((marketplace) => ({\n          marketplace,\n          subscriptions: unaggregatedSubscriptions\n            .filter((s) => s.cloud_provider_id === marketplace)\n            .map((s) => s.cloud_account_id!),\n        }))\n      : [];\n\n  return {\n    hasTrialQuota,\n    remainingPrepaidQuota,\n    remainingMarketplaceQuota,\n    marketplaceSubscriptions,\n  };\n};\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport type { FetchKafkaTopicsParams } from \"../fetchers\";\nimport { fetchKafkaTopics } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useKafkaInstanceTopicsFetchQuery() {\n  const { topics } = useApi();\n  const queryClient = useQueryClient();\n\n  return (\n    params: Omit<FetchKafkaTopicsParams, \"getTopics\"> & {\n      id: string;\n      adminUrl: string;\n    }\n  ) => {\n    const api = topics(params.adminUrl);\n\n    return queryClient.fetchQuery({\n      queryKey: kafkaQueries.instance.topics(params),\n      queryFn: async () => {\n        return fetchKafkaTopics({\n          getTopics: (...args) => api.getTopics(...args),\n          ...params,\n        });\n      },\n    });\n  };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport type { FetchKafkaInstanceMetricsProps } from \"../fetchers\";\nimport { fetchKafkaInstanceMetrics } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useKafkaInstanceMetricsFetchQuery() {\n  const { kafkasFleet } = useApi();\n  const queryClient = useQueryClient();\n\n  return (\n    params: Omit<FetchKafkaInstanceMetricsProps, \"getMetricsByRangeQuery\">\n  ) => {\n    const api = kafkasFleet();\n\n    return queryClient.fetchQuery({\n      queryKey: kafkaQueries.instance.metrics.instance(params),\n      queryFn: async () => {\n        return fetchKafkaInstanceMetrics({\n          getMetricsByRangeQuery: (...args) =>\n            api.getMetricsByRangeQuery(...args),\n          ...params,\n        });\n      },\n    });\n  };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport type { Plan } from \"ui\";\nimport type { CloudProviderInfoWithRegionsCapacity } from \"../fetchers\";\nimport { fetchProviderRegionSizes } from \"../fetchers\";\nimport { providerQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useProviderRegionSizesFetchQuery() {\n  const queryClient = useQueryClient();\n  const { kafkasFleet } = useApi();\n\n  return (\n    provider: CloudProviderInfoWithRegionsCapacity,\n    region: string,\n    plan: Plan\n  ) => {\n    const kms = kafkasFleet();\n    return queryClient.fetchQuery({\n      queryKey: providerQueries.limits[\n        plan === \"standard\" ? \"standard\" : \"developer\"\n      ]({ provider: provider.id }),\n      queryFn: () =>\n        fetchProviderRegionSizes(\n          (...args) => kms.getInstanceTypesByCloudProviderAndRegion(...args),\n          provider,\n          region,\n          plan\n        ),\n      staleTime: Infinity,\n    });\n  };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport type { Plan } from \"ui\";\nimport { fetchProvidersWithRegions } from \"../fetchers\";\nimport { providerQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useProvidersWithRegionsFetchQuery() {\n  const queryClient = useQueryClient();\n  const { kafkasFleet } = useApi();\n\n  return (plan: Plan) => {\n    const kms = kafkasFleet();\n    return queryClient.fetchQuery({\n      queryKey: providerQueries.list({ plan }),\n      queryFn: () =>\n        fetchProvidersWithRegions(\n          (...args) => kms.getCloudProviders(...args),\n          (...args) => kms.getCloudProviderRegions(...args),\n          plan\n        ),\n      staleTime: Infinity,\n    });\n  };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport { fetchKafkaKpiMetrics } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useKafkaInstanceKpiMetricsFetchQuery() {\n  const { kafkasFleet } = useApi();\n  const queryClient = useQueryClient();\n\n  return (id: string) => {\n    const api = kafkasFleet();\n\n    return queryClient.fetchQuery({\n      queryKey: kafkaQueries.instance.metrics.kpi({ id }),\n      queryFn: async () => {\n        return fetchKafkaKpiMetrics(\n          (...args) => api.getMetricsByInstantQuery(...args),\n          id\n        );\n      },\n    });\n  };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport type { FetchTopicsMetricsProps } from \"../fetchers\";\nimport { fetchKafkaTopicMetrics } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useKafkaInstanceTopicMetricsFetchQuery() {\n  const { kafkasFleet } = useApi();\n  const queryClient = useQueryClient();\n\n  return (params: Omit<FetchTopicsMetricsProps, \"getMetricsByRangeQuery\">) => {\n    const api = kafkasFleet();\n\n    return queryClient.fetchQuery({\n      queryKey: kafkaQueries.instance.metrics.topic(params),\n      queryFn: async () => {\n        return fetchKafkaTopicMetrics({\n          getMetricsByRangeQuery: (...args) =>\n            api.getMetricsByRangeQuery(...args),\n          ...params,\n        });\n      },\n    });\n  };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport { fetchKafkaInstances } from \"../fetchers\";\nimport { useKafkaInstanceTransformer } from \"../queries\";\nimport { kafkaQueries, masQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport const useDeveloperInstanceAvailabilityFetchQuery = () => {\n  const queryClient = useQueryClient();\n  const { kafkasFleet } = useApi();\n  const dataMapper = useKafkaInstanceTransformer();\n\n  return (getUsername: () => Promise<string>) => {\n    const api = kafkasFleet();\n    return queryClient.fetchQuery({\n      queryKey: masQueries.quota.developerAvailability(),\n      queryFn: async () => {\n        const username = await getUsername();\n        if (!username) {\n          return Promise.reject(new Error(\"Invalid username\"));\n        }\n\n        const { instances } = await queryClient.fetchQuery({\n          queryKey: kafkaQueries.list({\n            direction: \"desc\",\n            sort: \"createdAt\",\n            name: [],\n            status: [],\n            owner: [username],\n            perPage: 1000,\n            page: 1,\n          }),\n          queryFn: () =>\n            fetchKafkaInstances({\n              getKafkas: (...args) => api.getKafkas(...args),\n              dataMapper,\n              direction: \"desc\",\n              sort: \"createdAt\",\n              name: [],\n              status: [],\n              owner: [username],\n              perPage: 1000,\n              page: 1,\n            }),\n          staleTime: Infinity,\n        });\n\n        return instances.some((k) => k?.plan !== \"standard\") !== true;\n      },\n    });\n  };\n};\n","import type { KafkaRequestPayload } from \"@rhoas/kafka-management-sdk\";\nimport { APIErrorCodes, isServiceApiError } from \"@rhoas/kafka-management-sdk\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport type { CreateKafkaFormData, CreateKafkaInstanceError } from \"ui\";\nimport { kafkaQueries, masQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useKafkaCreateInstanceMutation() {\n  const { kafkasFleet } = useApi();\n  const queryClient = useQueryClient();\n\n  return useMutation(\n    async function kafkaCreateInstance(props: {\n      instance: CreateKafkaFormData;\n      onSuccess: () => void;\n      onError: (error: CreateKafkaInstanceError) => void;\n    }) {\n      const { instance, onSuccess, onError } = props;\n      const api = kafkasFleet();\n      const kafkaRequest: KafkaRequestPayload = {\n        name: instance.name,\n        cloud_provider: instance.provider,\n        region: instance.region,\n      };\n      kafkaRequest.plan = instance.plan + \".\" + instance.sizeId;\n      kafkaRequest.billing_model =\n        instance.billing === \"prepaid\"\n          ? \"standard\"\n          : instance.billing !== undefined\n          ? \"marketplace\"\n          : null;\n      kafkaRequest.billing_cloud_account_id =\n        instance.billing && instance.billing !== \"prepaid\"\n          ? instance.billing.subscription\n          : null;\n      try {\n        await api.createKafka(true, kafkaRequest);\n        onSuccess();\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const { code } = error?.response?.data || {};\n\n          switch (instance.plan) {\n            case \"developer\":\n              switch (code) {\n                case ErrorCodes.DUPLICATE_INSTANCE_NAME:\n                  onError(\"name-taken\");\n                  break;\n\n                // regardless of the error, let's not give too many details to trial users\n                default:\n                  onError(\"developer-unavailable\");\n                  break;\n              }\n              break;\n\n            case \"standard\":\n              switch (code) {\n                case ErrorCodes.DUPLICATE_INSTANCE_NAME:\n                  onError(\"name-taken\");\n                  break;\n\n                case ErrorCodes.INTERNAL_CAPACITY_ERROR:\n                  onError(\"region-unavailable\");\n                  break;\n\n                case ErrorCodes.INSUFFICIENT_QUOTA:\n                  onError(\"insufficient-quota\");\n                  break;\n\n                default:\n                  console.error(\n                    \"useKafkaCreateInstanceMutation\",\n                    \"createKafka unknown error\",\n                    error\n                  );\n                  onError(\"unknown\");\n              }\n              break;\n          }\n        } else {\n          console.error(\n            \"useKafkaCreateInstanceMutation\",\n            \"createKafka unexpected error\",\n            error\n          );\n          onError(\"unknown\");\n        }\n      }\n    },\n    {\n      onSuccess: () => {\n        void queryClient.invalidateQueries([kafkaQueries._root()]);\n        void queryClient.invalidateQueries([masQueries.quota._root()]);\n      },\n    }\n  );\n}\n\nconst ErrorCodes = {\n  /** Forbidden to perform this action*/\n  UNAUTHORIZED_USER: APIErrorCodes.ERROR_4,\n  /** Kafka cluster name is already used*/\n  DUPLICATE_INSTANCE_NAME: APIErrorCodes.ERROR_36,\n  /** The maximum number of allowed kafka instances has been reached*/\n  INTERNAL_CAPACITY_ERROR: APIErrorCodes.ERROR_24,\n  /** Insufficient quota*/\n  INSUFFICIENT_QUOTA: APIErrorCodes.ERROR_120,\n  /** Forbidden to create more instances than the maximum allowed*/\n  TRIAL_USED: APIErrorCodes.ERROR_5,\n  /** Failed to check quota*/\n  FAILED_TO_CHECK_QUOTA: APIErrorCodes.ERROR_121,\n  /** Bad request*/\n  OWNER_DOES_NOT_EXIST: APIErrorCodes.ERROR_21,\n} as const;\n","import { isServiceApiError } from \"@rhoas/kafka-management-sdk\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { kafkaQueries, masQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useKafkaDeleteInstanceMutation() {\n  const { kafkasFleet } = useApi();\n  const queryClient = useQueryClient();\n\n  return useMutation(\n    async function kafkaCreateInstance(props: {\n      id: string;\n      onSuccess: () => void;\n      onError: (code: string, message: string) => void;\n    }) {\n      const { id, onSuccess, onError } = props;\n      const api = kafkasFleet();\n      try {\n        await api.deleteKafkaById(id, true);\n        onSuccess();\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const message = error?.message;\n          const { code } = error?.response?.data || {};\n\n          onError(code || \"?\", message);\n        }\n      }\n    },\n    {\n      onSuccess: () => {\n        void queryClient.invalidateQueries([kafkaQueries._root()]);\n        void queryClient.invalidateQueries([masQueries.quota._root()]);\n      },\n    }\n  );\n}\n","import {\n  ConsumerGroupOrderKey,\n  TopicOrderKey,\n} from \"@rhoas/kafka-instance-sdk\";\nimport type { RangeQuery } from \"@rhoas/kafka-management-sdk\";\n\nexport type NoUndefinedField<T> = {\n  [P in keyof T]-?: NoUndefinedField<NonNullable<T[P]>>;\n};\n\nexport type SafeRangeQuery = NoUndefinedField<RangeQuery>;\n\nexport const KafkaInstancesSortableColumns = [\n  \"name\",\n  \"owner\",\n  \"createdAt\",\n  \"provider\",\n  \"region\",\n] as const;\n\nexport type KafkaInstancesSortableColumn =\n  typeof KafkaInstancesSortableColumns[number];\n\nexport const KafkaTopicsSortableColumns = [\n  ...Object.values(TopicOrderKey),\n] as const;\n\nexport type KafkaTopicsSortableColumn =\n  typeof KafkaTopicsSortableColumns[number];\n\nexport const KafkaConsumerGroupSortableColumns = [\n  ...Object.values(ConsumerGroupOrderKey),\n] as const;\n\nexport type KafkaConsumerGroupSortableColumn =\n  typeof KafkaConsumerGroupSortableColumns[number];\n","const REACT_QUERY_DEVTOOLS = \"mas.devtools\";\nconst METRICS_LAG_ALERT = \"mas.rhosak.metrics.lag-alert-closed\";\n\nexport function isReactQueryDevToolsEanbled() {\n  return localStorage.getItem(REACT_QUERY_DEVTOOLS) === \"true\";\n}\n\nexport function metricsIsLagAlertsDismissed() {\n  return localStorage.getItem(METRICS_LAG_ALERT) === \"true\";\n}\n\nexport function metricsDismissLagAlerts() {\n  return localStorage.setItem(METRICS_LAG_ALERT, \"true\");\n}\n","import type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport type { ConsumerGroupState } from \"../types\";\n\nexport type ConsumerGroupStateLabelProps = {\n  state: ConsumerGroupState;\n};\n\nexport const ConsumerGroupStateLabel: FunctionComponent<\n  ConsumerGroupStateLabelProps\n> = ({ state }) => {\n  const { t } = useTranslation([\"kafka\"]);\n\n  switch (state) {\n    case \"Stable\":\n      return t(\"consumerGroup.state.stable\");\n    case \"Empty\":\n      return t(\"consumerGroup.state.empty\");\n    case \"Dead\":\n      return t(\"consumerGroup.state.dead\");\n    case \"CompletingRebalance\":\n      return t(\"consumerGroup.state.completing_rebalance\");\n    case \"PreparingRebalance\":\n      return t(\"consumerGroup.state.preparing_rebalance\");\n    case \"Unknown\":\n      return t(\"consumerGroup.state.unknown\");\n    default:\n      return null;\n  }\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from \"@patternfly/react-core\";\nimport { CubesIcon } from \"@patternfly/react-icons\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nexport const ConsumerGroupEmptyState: FunctionComponent = () => {\n  const { t } = useTranslation([\"kafka\"]);\n  return (\n    <EmptyState variant={EmptyStateVariant.large}>\n      <EmptyStateIcon icon={CubesIcon} />\n      <Title headingLevel={\"h1\"} size={TitleSizes.lg}>\n        {t(\"consumerGroup.empty_consumer_title\")}\n      </Title>\n      <EmptyStateBody>{t(\"consumerGroup.empty_consumer_body\")}</EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import type { TableViewProps } from \"@rhoas/app-services-ui-components\";\nimport { EmptyStateNoResults, TableView } from \"@rhoas/app-services-ui-components\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { ConsumerGroupEmptyState, ConsumerGroupStateLabel } from \"./components\";\nimport { TableVariant } from \"@patternfly/react-table\";\nimport type { ConsumerGroup, ConsumerGroupField } from \"./types\";\n\nconst Columns: ConsumerGroupField[] = [\n  \"consumerGroupId\",\n  \"activeMembers\",\n  \"partitionsWithLag\",\n  \"state\",\n];\n\nexport type ConsumerGroupsProps<T extends ConsumerGroup> = {\n  consumers: Array<T> | undefined;\n  onDelete: (row: T) => void;\n  onViewPartition: (row: T) => void;\n  onViewResetOffset: (row: T) => void;\n  consumerName: string[];\n  onSearchConsumer: (value: string) => void;\n  onRemoveConsumerChip: (value: string) => void;\n  onRemoveConsumerChips: () => void;\n} & Pick<\n  TableViewProps<T, typeof Columns[number]>,\n  | \"itemCount\"\n  | \"page\"\n  | \"perPage\"\n  | \"onPageChange\"\n  | \"isRowSelected\"\n  | \"isColumnSortable\"\n  | \"onClearAllFilters\"\n>;\n\nexport const ConsumerGroups = <T extends ConsumerGroup>({\n  consumers,\n  onDelete,\n  onViewPartition,\n  isColumnSortable,\n  itemCount,\n  onViewResetOffset,\n  onClearAllFilters,\n  page,\n  perPage,\n  onPageChange,\n  consumerName,\n  onSearchConsumer,\n  onRemoveConsumerChip,\n  onRemoveConsumerChips,\n}: ConsumerGroupsProps<T>) => {\n  const { t } = useTranslation(\"kafka\");\n\n  const labels: { [field in ConsumerGroupField]: string } = {\n    consumerGroupId: t(\"consumerGroup.consumer_group_id\"),\n    activeMembers: t(\"consumerGroup.active_members\"),\n    partitionsWithLag: t(\"consumerGroup.partitions_with_lag\"),\n    state: t(\"consumerGroup.state_header\"),\n  };\n\n  const isFiltered = consumerName.length > 0;\n  return (\n    <TableView\n      variant={TableVariant.compact}\n      tableOuiaId={\"card-table\"}\n      ariaLabel={t(\"consumerGroup.consumer_group_list\")}\n      data={consumers}\n      columns={Columns}\n      renderHeader={({ column, Th, key }) => (\n        <Th\n          key={key}\n          info={\n            column === \"partitionsWithLag\"\n              ? {\n                  popover: (\n                    <div>\n                      {t(\"consumerGroup.partitions_with_lag_description\")}\n                    </div>\n                  ),\n                  ariaLabel: \"partitions with lag\",\n                  popoverProps: {\n                    headerContent: t(\"consumerGroup.partitions_with_lag_name\"),\n                  },\n                }\n              : undefined\n          }\n        >\n          {labels[column]}\n        </Th>\n      )}\n      renderCell={({ column, row, Td, key }) => {\n        return (\n          <Td key={key} dataLabel={labels[column]}>\n            {(() => {\n              switch (column) {\n                case \"consumerGroupId\":\n                  return row.consumerGroupId;\n                case \"activeMembers\":\n                  return row.activeMembers;\n                case \"partitionsWithLag\":\n                  return row.partitionsWithLag;\n                case \"state\":\n                  return <ConsumerGroupStateLabel state={row.state} />;\n                default:\n                  return row[column];\n              }\n            })()}\n          </Td>\n        );\n      }}\n      renderActions={({ row, ActionsColumn }) => (\n        <ActionsColumn\n          items={[\n            {\n              title: t(\"consumerGroup.view_partitions_offsets\"),\n              onClick: () => onViewPartition(row),\n            },\n            {\n              title: t(\"consumerGroup.reset_offset\"),\n              onClick: () => onViewResetOffset(row),\n            },\n            {\n              title: t(\"common:delete\"),\n              onClick: () => onDelete(row),\n            },\n          ]}\n        />\n      )}\n      isColumnSortable={isColumnSortable}\n      filters={{\n        [labels.consumerGroupId]: {\n          type: \"search\",\n          chips: consumerName,\n          onSearch: onSearchConsumer,\n          onRemoveChip: onRemoveConsumerChip,\n          onRemoveGroup: onRemoveConsumerChips,\n          validate: (value: string) => !/[\"$^<>|+%/;:,\\s*=~#()]/.test(value),\n          errorMessage: t(\"input_field_invalid_message\"),\n        },\n      }}\n      itemCount={itemCount}\n      page={page}\n      onPageChange={onPageChange}\n      perPage={perPage}\n      isFiltered={isFiltered}\n      onClearAllFilters={onClearAllFilters}\n      emptyStateNoData={<ConsumerGroupEmptyState />}\n      emptyStateNoResults={<EmptyStateNoResults />}\n    />\n  );\n};\n","import {\n  Level,\n  LevelItem,\n  PageSection,\n  PageSectionVariants,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\n\nexport const ControlPlaneHeader: VoidFunctionComponent = () => {\n  const { t } = useTranslation();\n\n  return (\n    <PageSection\n      variant={PageSectionVariants.light}\n      hasShadowBottom={true}\n      stickyOnBreakpoint={{ default: \"top\" }}\n    >\n      <Level>\n        <LevelItem>\n          <TextContent>\n            <Text component=\"h1\">{t(\"kafka:table.title\")}</Text>\n          </TextContent>\n        </LevelItem>\n      </Level>\n    </PageSection>\n  );\n};\n","import type { CloudProvider, CloudRegion } from \"../../../types\";\nimport type { CloudProviderInfo } from \"../types\";\n\nexport function onProviderChange(\n  providers: CloudProviderInfo[],\n  provider: CloudProvider\n): { provider: CloudProvider; region: CloudRegion | undefined } {\n  const selectedProvider = providers.find((p) => p.id === provider);\n  const region =\n    selectedProvider?.defaultRegion ||\n    selectedProvider?.regions.filter((r) => !!r.isDisabled === false)[0]?.id;\n  return { provider, region };\n}\n","import { assign, createMachine, send, sendParent } from \"xstate\";\nimport {\n  CloudProvider,\n  CloudRegion,\n  MarketplaceSubscription,\n  Size,\n} from \"../../../types\";\nimport {\n  CreateKafkaFormData,\n  CreateKafkaInstanceError,\n  StandardPlanInitializationData,\n  StandardSizes,\n} from \"../types\";\nimport { onProviderChange } from \"./shared\";\n\nexport type StandardPlanMachineContext = {\n  // initial data coming from the APIs\n  capabilities: StandardPlanInitializationData;\n\n  // what the user is selecting\n  form: {\n    name?: string;\n    provider?: CloudProvider;\n    region?: CloudRegion;\n    size?: Size;\n    billing?: MarketplaceSubscription | \"prepaid\";\n  };\n\n  // based on the form.provider selection\n\n  // based on the form.provider and form.region selection\n  sizes: StandardSizes | undefined;\n\n  creationError: CreateKafkaInstanceError | undefined;\n};\n\nexport const StandardPlanMachine =\n  /** @xstate-layout N4IgpgJg5mDOIC5SwC4EMB2E0CcIAUAbTAWTQGMALASwzADoA3MHagMwE8BBRta4gEb9qKDgGJEoAA4B7WCOoyMkkAA9EAZgAcARnoBOfQAYdOrQHYArABYNAJnMAaEB0Q6j++reuXL5k3bWWpY65gC+Yc6omNh4RKQUNHT05Eps1FAArqwYUPTRKJmwYuQ4YGgoYCqy8iiKykhqmjp29OYW5hpGQYG+zq4Ilvoa9KZGlh4a5joAbPqBEVHoWLgExBhkVLQMqRjpWTl5bDI4ALZMaITUEGLpYIQQAJIYvFcQ1XIKSirqCKGG9Ds+ksU1m5n0M2s1n0-UQdgmllGdjsOj8QJm7ihixA0RWcXWmySOzSGWytCOJ3Or2uYlgmQEpxEH1q9R+bmMnnMnRR9n8di0RjssIQ-MFo2sgQ81lCGjm2NxsTWCS2yV2+zJuXoxzO+TQjHJJTKFTAAGVMuRyHB4I0al8GqBfoEZlp6FpISYdBp7PprFZhaK9JDAuDproQfLlor4htEtsUiSDuStZTdfrcobypUAKI4HAnZl2tkinn0WVTFFQrS+mb+jEzehzMz84btazjCMxVbRwlxtWkw7Js63aj3J4vS7XAt1b6NR0+etaWXzPmQmsuOGmRGWfmWRchbctGYdvFKmMq4l7ftJu4PWD0DBoU4ManYSoSG2faf2poIIL15GmDo+iLkBdhGOYa4DLMUKjKCljOkYbrDFox5RgSsaqgmGpHCOt73o+YAZsaU6srObj2F45gSn4UIaDY7QaMKMouohVgzNuHhgRoOioV26HnvGl6JpqN4QHeD5PmIElgAAwpQmAwCRM4OuRrS+tRVG2PRi5MexrSojM9iIW2VgSrx+LKkSgnqgOol3lIeb6hALAXG8xrvtIn6kSpgxAm00IosiEEzDMTjriKHj1hMEIoqE1iGeYdjmaePaYUJ2FarhYn0A5MhOSwRGVEp36-J6alUfCml0b6Onhci8UGJxnoSuBGj6Ml3YYReNnXll9mOdcBW5flOByQpVQfiyyk-mVlEabR2mMXVUr0EYgo+qGQHtJYHX8VZfbCTho53mUUD1K51zucVRYHl4hg6EEPisdYTHwkYgLDNKRjsSF0I7ZEOKRnxlm9lhtl9fQp31IVE2eVNJWqXNlULTVS1QXR5iAqidgzCYApui0u0g2lPUiRDUNKGIw2DaN8m5LDIC2l+RazepyNaajTFdJ4OM8hBnRejxAMKsDZ77WDvXHZDYBnZTFMYGN9PXWRfwUWzNEcwxTEGaWvgWA9Gg+P41hE2LoPpeDUvyAAXs+E6voRys+b6gbcW7czQu4tUDA44KrZCsogfyXqm6l3VXmTVvULb9CEDIaAQAaEBKAwtCMDIADWDAixZZskxHR14TbDBxwn5IIGnMjkBU9QANpGAAuk7P6gvQNi6HY2gPVCwr2HRbS6PoVG7lYQyh111kF5lUcx6XifpiweY4DlxAoNq5w5ylE8HRldn5NHJfx-PUAVy8Vc10o9dN5NhYq9uLqBMiwEWBKneWL3vKrSEiHDOBILDOPASO9LZFwPjDZujpQq6wAuxYwoEpj+n-qMT0254KG3ig9QB4sLaS1AbbKmA1nK03GhAtwi4sYeisPMQw9hay4wML6RKhhvrgiFksTsucw6T0OtPPBhF5aK0UjfZmKtcYuh9GBQwGIUS1kNgYT6Ewfqd26Fg82pNC7ZWLrSA+giGZM28j+KiLopjbkhPrcCuhaweGgT4Ux-hZj-XYSeTqQCJaRz4WIIQhAri5F0aQ388E26NnYuCZcEEXp1VxpjAmVYqKsOBEeYWQNOHbzcRou8XifF5BfFdYRBjfjbhGFoAUZjZjLj8L3YpmM1pWHCZVGYONVH5x4XvTJSYlCEA4GaAQsBSjUCkF+YosB7hgHICgbpvTWADIMfo6apU1rWDaO6EKa0goNMqfoPQ-gbC4x9MBQUGgmnhxaRDNpmoHJgCkHwCAXAsATL6dMpQQyRljPuVMkRcNb4+UPIiYpQI9y7ngsBYU3hFlrU9GYjwIRwhJI4VvVxOD3HZTOXkC5Vzri3IgG8-pgzaQvJQPgMo6L3h5LmW4IwUxXS7i9L4KwswtAgr7m3FEQxEq6EhEc7hu9Tn8CyQQvKNM-GkoRqres3FURxPsMiIEvdAUD0XIhHG8VEKOMBnClx2D1G8LEmIZOyQCjZ2SfCzVU87L+NmOMNo7hxjlgaYbd+kT+6aWCG-XcSrOXAKTinfI6BKg+vVXtNRBd-H8hxq6aUxtfQmCkf6WU9YWhgUqiETEEQAYYBkM5a0yAjUarjMwVgnAeB8EEMIUQ-iQjhtCm1WUEofTjGFFYAw3oQj2p9NRTleUWAAEVMgyHQP4gUIxOLQh8FoX2DLwoJtLI9cFWg63TESU4tCxNU4YFxJaAAqg+Xg-A0ACEIHoryZKEBcnep0NtwQuTSIdT7ClrpQoonmC0XQa1F1qucYG5I8tYBbr1MWvdB7-FckWdCYpD1+RujHTCOqVZSwB3GMiRcwxZgerSf6wod5MhrvpIyFAlQSWfI+TNRCpY2pVhCI+jmwohg8zilRA2Y7fSocRXkAoRR8g4ZEPh-x84DBmGlPjLko8IkDAXatLoi54Sd3hPBZjWq2NZsZkekVsGvTAR8C0ICVHwoTBdKYUKLbkSsQhHJ01KY0723NeCRZnpNkmFCqEMdsaUSrWYd0LkgcTOwo-SurltkUwvis8BUY4EMQ-3cA9G9cJcYjFCmtYIQRhhzEOd55dedjm7xTLAPU5IQ0oIbBYDw4x5wojCj7Kw+lZScV8PCT0pmWlZb1JAENCUDDhOs8CYI-pwSIgabFHGHtMGpdFlwz1IlKRWf8LBOzYJHNCmWl0Nura51uu+vV7lUtpL0DAKcAZAxCP5MQEw0YhS2xoJqhOqCiUh3OmleMCEKWl0jdSSx7V4kCL0As28c1asKoa2qlrSd4J6zdG+h0MEXoTbDZSQirVe8tuBeFSzKiDYfT0UMqYkETFNkg4Mu0aY4xFxQ6ezDk1JzNsfZyUVJHKtDYjDavMKTc6vSdyYtd-2Y6jNDEMutkB2VpLmpI+rKqi0mK+E8AbX0QJWXGCStD41Qbyd4WpkQi6Dt-HaHrMubiHmTJukghuaEXhdzPo8BCFbvPcHZRVy5L7k4affJsICbQSrDBAiHlFkUXRFluk7nReYY7nQwpJwr5pG3leEJcojg7x6Kv+yCBYEEtWuT+gep4UdpupEW-l7msPfP+oCqIYLl0wuUaA9vdYta8xDJei6EYy3SKToy3OlTw98MixTBdKFAWLQbBlTK+RO9gR+NfW4vFFCOfP0Zfz9LWWGBPvjm+w7maExkG8lCCCQUtimLSkRPSl3zokNDZD7n6fVum9z7V0BxbDnBQNOdEBSEXMh8CahO4MfzoG-pNnzM5TLMhd-Yi6cyTrgR6CygoiJ7BAhQhRf5vb7wxyt4a7tANidD6bDwPrzY+wOYNiBCc4hTNiPbvppajZoZ7zFyfYQCAbL6lQUQgiGygFuztDwjdYQjiZQiigZ5vqbyn5+bn7wEMCJzZb7rNbUGIAdBeC6DcRVheiSGYFwjAh6DAgmCKJWDaA+CwFkEHz0AADufAdQuQAAYicD2n2mgD9q0HQVMLyNMDjAguFDSnoOMF7L-KoQApPr5mNt-uQZ2jgCYf2qIarBYZDgwZ6EwZ7l0HeozoqkEBYhPiflPrwY3vwVfgEZspyPZohuxN6HIQgBJmAdIdtA5tCMHkQc9rDqahDOQYvPmAEbNJYdyFyIeHYQMM2qtG2GVDaozhoZUVoXPLlgERBLFtoPfAKFCEMCJs0MMG0IlNuCGIuJ-u4elokV4QfMXktl6A0TYQlP6D4DZkBH3uBMPKqtwQkZ4XASimrsRLUdoI1J0IZBSn4HAuEZIf5C1O4EMJ3GwqUaToruHsirykmOmiaPivUAAEpgAACOmQ1AZQBGSm7eKs+WEw6+OuVe4RChro1mI6iE0a3RUsFxHSXS9IkyOK9Qd4ducJsyKmKOFiEq0wPQNglSwQowwQ0EYE-GcR3xoeZ+SRBJGAnS2Kjya6KRMeIqkWmMf4-IwOdqD0vcGJ0IkObq7Q4wXBOapxpBPK3i7S-JRJPSDygyA6q+tJfg9JY6jJ9hFUWMkIoQDEDSnJJxHhGp+JAJ5yRK1ymKgpgy22u2ZaARFgIw8IxgGmFKDgoQjKoQq0AQ9qjmwIeJeEFxaK7pdyxJ+pZJHGep7yv+CJ3yfIXgtmfeW0Y6l2iAb+Yq7QAo2y7g8IcZ-xWprplySZWKKZmZTyOUbp9uopRYzCroHgi4i4dKesIKtg6egoxSJSbU0wNZGSLpqK7ZNyyZGZpJTyA6RugZ3Q386+A+v4qIQ6r8hsVZvIU59AKK5qpgbcIZ0wqJUKsqa0bQPo7EFiEoKGixJBr2ZqfpIGgBZe3siAhgxizoY+-Ib+xSX+-i9Cam5GmmPo1UjKe+iGypYEVYJgnK2WzAlJf+Ks-yUUmyJp9Bl5saQwDYJgTCa0Y+boRyIa0S8U56NaQIZ2ORrQwwaR3oNewEz5EQQAA */\n  createMachine(\n    {\n      context: {\n        capabilities: {} as StandardPlanInitializationData,\n        sizes: undefined,\n        form: {},\n        creationError: undefined,\n      },\n      tsTypes: {} as import(\"./StandardPlanMachine.typegen\").Typegen0,\n      schema: {\n        context: {} as StandardPlanMachineContext,\n        events: {} as\n          | { type: \"fieldInvalid\" }\n          | { type: \"nameChange\"; name: string }\n          | { type: \"providerChange\"; provider: CloudProvider }\n          | { type: \"regionChange\"; region: CloudRegion }\n          | { type: \"sizeChange\"; size: Size }\n          | {\n              type: \"selectSubscription\";\n              subscription: MarketplaceSubscription;\n            }\n          | { type: \"selectPrepaid\" }\n          | { type: \"billingChange\" }\n          | { type: \"nameIsValid\" }\n          | { type: \"nameIsInvalid\" }\n          | { type: \"nameIsTaken\" }\n          | { type: \"submit\" }\n          | { type: \"create\" }\n          | { type: \"createSuccess\" }\n          | { type: \"createError\"; error: CreateKafkaInstanceError },\n        services: {} as {\n          getSizes: {\n            data: StandardSizes;\n          };\n        },\n      },\n      initial: \"verifyAvailability\",\n      id: \"standardPlanMachine\",\n      states: {\n        verifyAvailability: {\n          entry: \"setInitialContext\",\n          always: [\n            {\n              cond: \"isOverQuota\",\n              target: \"overQuota\",\n            },\n            {\n              cond: \"isInstanceUnavailable\",\n              target: \"instanceUnavailable\",\n            },\n            {\n              cond: \"isRegionsUnavailable\",\n              target: \"regionsUnavailable\",\n            },\n            {\n              target: \"configuring\",\n            },\n          ],\n        },\n        overQuota: {\n          tags: \"blocked\",\n        },\n        instanceUnavailable: {\n          tags: \"blocked\",\n        },\n        regionsUnavailable: {\n          tags: \"blocked\",\n        },\n        configuring: {\n          type: \"parallel\",\n          states: {\n            status: {\n              initial: \"unsubmitted\",\n              states: {\n                unsubmitted: {\n                  tags: \"unsubmitted\",\n                },\n                submitted: {\n                  entry: \"triggerSubmit\",\n                  tags: \"submitted\",\n                },\n              },\n              on: {\n                create: {\n                  description:\n                    \"Save is enabled all the time, if it's clicked before the form is completely filled out we should show the validation for all errored fields\",\n                  target: \".submitted\",\n                },\n              },\n            },\n            form: {\n              initial: \"invalid\",\n              states: {\n                invalid: {\n                  tags: \"formInvalid\",\n                },\n                valid: {\n                  entry: \"resetCreationErrorMessage\",\n                  tags: \"creatable\",\n                  on: {\n                    fieldInvalid: {\n                      target: \"invalid\",\n                    },\n                    submit: {\n                      target: \"saving\",\n                    },\n                  },\n                },\n                saving: {\n                  entry: [\"resetCreationErrorMessage\", \"triggerSave\"],\n                  tags: \"formSaving\",\n                  on: {\n                    createSuccess: {\n                      target: \"saved\",\n                    },\n                    createError: {\n                      actions: \"setCreationError\",\n                      target: \"invalid\",\n                    },\n                  },\n                },\n                saved: {\n                  type: \"final\",\n                },\n              },\n              on: {\n                fieldInvalid: {\n                  description:\n                    \"sent by the fields when their value change to an invalid value. This will transition the form to the invalid state, to then eventually transition to the valid state if the field state is marked as done (which means that all fields have a valid value selected)\",\n                  target: \".invalid\",\n                },\n              },\n            },\n            fields: {\n              tags: \"configurable\",\n              type: \"parallel\",\n              states: {\n                name: {\n                  initial: \"validate\",\n                  states: {\n                    empty: {\n                      tags: \"nameEmpty\",\n                    },\n                    invalid: {\n                      entry: \"fieldInvalid\",\n                      tags: \"nameInvalid\",\n                    },\n                    valid: {\n                      tags: \"nameValid\",\n                      type: \"final\",\n                    },\n                    validate: {\n                      always: [\n                        {\n                          cond: \"nameIsEmpty\",\n                          target: \"empty\",\n                        },\n                        {\n                          cond: \"nameIsValid\",\n                          target: \"valid\",\n                        },\n                        {\n                          target: \"invalid\",\n                        },\n                      ],\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    nameChange: {\n                      actions: \"setName\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n                provider: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"providerIsValid\",\n                          target: \"valid\",\n                        },\n                        {\n                          target: \"invalid\",\n                        },\n                      ],\n                    },\n                    invalid: {\n                      entry: \"fieldInvalid\",\n                      tags: \"providerInvalid\",\n                    },\n                    valid: {\n                      tags: \"providerValid\",\n                      type: \"final\",\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    providerChange: {\n                      actions: \"setProvider\",\n                      cond: \"didProviderChange\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n                region: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"regionIsValid\",\n                          target: \"valid\",\n                        },\n                        {\n                          target: \"invalid\",\n                        },\n                      ],\n                    },\n                    invalid: {\n                      entry: \"fieldInvalid\",\n                      tags: \"regionInvalid\",\n                    },\n                    valid: {\n                      tags: \"regionValid\",\n                      type: \"final\",\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    providerChange: {\n                      target: \".validate\",\n                    },\n                    regionChange: {\n                      actions: \"setRegion\",\n                      cond: \"didRegionChange\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n                size: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"noProviderOrRegion\",\n                          target: \"idle\",\n                        },\n                        {\n                          cond: \"noSizes\",\n                          target: \"loading\",\n                        },\n                        {\n                          cond: \"emptySizes\",\n                          target: \"error\",\n                        },\n                        {\n                          cond: \"sizeIsDisabled\",\n                          target: \"disabled\",\n                        },\n                        {\n                          cond: \"billingRequiredButNotSelected\",\n                          target: \"waitingForQuota\",\n                        },\n                        {\n                          cond: \"sizeIsOverQuota\",\n                          target: \"overQuota\",\n                        },\n                        {\n                          target: \"valid\",\n                        },\n                      ],\n                    },\n                    idle: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeIdle\",\n                    },\n                    disabled: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeDisabled\",\n                    },\n                    waitingForQuota: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeWaitingForQuota\",\n                    },\n                    overQuota: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeOverQuota\",\n                    },\n                    valid: {\n                      tags: \"sizeValid\",\n                      type: \"final\",\n                    },\n                    error: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeError\",\n                    },\n                    loading: {\n                      description:\n                        \"Fetch the data required to show the available sizes and limits\",\n                      invoke: {\n                        src: \"getSizes\",\n                        onDone: [\n                          {\n                            actions: \"setSizes\",\n                            target: \"validate\",\n                          },\n                        ],\n                        onError: [\n                          {\n                            target: \"error\",\n                          },\n                        ],\n                      },\n                      tags: \"sizeLoading\",\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    providerChange: {\n                      target: \".validate\",\n                    },\n                    regionChange: {\n                      target: \".validate\",\n                    },\n                    sizeChange: {\n                      actions: \"setSize\",\n                      cond: \"didSizeChange\",\n                      target: \".validate\",\n                    },\n                    billingChange: {\n                      target: \".validate\",\n                    },\n                  },\n                },\n                billing: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"onlyPrepaid\",\n                          target: \"prepaidOnly\",\n                        },\n                        {\n                          cond: \"singleSubscription\",\n                          target: \"singleSubscription\",\n                        },\n                        {\n                          cond: \"onlySubscriptions\",\n                          target: \"onlySubscriptions\",\n                        },\n                        {\n                          description:\n                            \"user has both prepaid and marketplace subscriptions\",\n                          target: \"prepaidAndSubscriptions\",\n                        },\n                      ],\n                    },\n                    prepaidOnly: {\n                      description:\n                        \"The user doesn't need to specify any option about the billing. The API will automatically figure out the right thing to do without giving it any information.\",\n                      tags: [\"noBilling\", \"billingValid\"],\n                      entry: \"setBillingToPrepaid\",\n                      type: \"final\",\n                    },\n                    singleSubscription: {\n                      description:\n                        \"The user doesn't need to specify any option about the billing. The API will automatically figure out the right thing to do without giving it any information.\",\n                      tags: [\"noBilling\", \"billingValid\", \"singleSubscription\"],\n                      entry: \"setBillingToSubscription\",\n                      type: \"final\",\n                    },\n                    onlySubscriptions: {\n                      description:\n                        \"More than one subscription exist. The user needs to select one to procede.\",\n                      initial: \"invalid\",\n                      type: \"final\",\n                      states: {\n                        invalid: {},\n                        valid: {\n                          entry: \"triggerBillingChange\",\n                          tags: \"billingValid\",\n                          type: \"final\",\n                        },\n                      },\n                      on: {\n                        selectSubscription: [\n                          {\n                            actions: \"setBillingToSubscription\",\n                            cond: \"matchesSelectedProviderOrRHMarketplaceAndHasQuota\",\n                            target: \".valid\",\n                          },\n                          {\n                            cond: \"noSelectedProvider\",\n                            target: \".valid\",\n                          },\n                        ],\n                      },\n                    },\n                    prepaidAndSubscriptions: {\n                      description:\n                        \"The user has both prepaid quota and one or more subscription to a marketplace. The user needs to select one to procede.\",\n                      initial: \"empty\",\n                      type: \"final\",\n                      states: {\n                        empty: {},\n                        subscription: {\n                          entry: \"triggerBillingChange\",\n                          tags: \"billingValid\",\n                          type: \"final\",\n                        },\n                        prepaid: {\n                          entry: \"triggerBillingChange\",\n                          tags: \"billingValid\",\n                          type: \"final\",\n                        },\n                      },\n                      on: {\n                        selectSubscription: [\n                          {\n                            actions: \"setBillingToSubscription\",\n                            cond: \"matchesSelectedProviderOrRHMarketplaceAndHasQuota\",\n                            target: \".subscription\",\n                          },\n                          {\n                            cond: \"noSelectedProvider\",\n                            target: \".subscription\",\n                          },\n                        ],\n                        selectPrepaid: {\n                          actions: \"setBillingToPrepaid\",\n                          cond: \"hasPrepaidQuota\",\n                          target: \".prepaid\",\n                        },\n                      },\n                    },\n                  },\n                  on: {\n                    providerChange: {\n                      actions: \"unsetSubscription\",\n                      description:\n                        \"If a new provider is selected, deselect any previously selected billing option.\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n              },\n              onDone: {\n                target: \"#standardPlanMachine.configuring.form.valid\",\n              },\n            },\n          },\n          onDone: {\n            target: \"saved\",\n          },\n        },\n        saved: {\n          type: \"final\",\n        },\n      },\n    },\n    {\n      actions: {\n        setInitialContext: assign((context) => {\n          return {\n            form: {\n              ...(context.capabilities.defaultProvider\n                ? onProviderChange(\n                    context.capabilities.availableProviders,\n                    context.capabilities.defaultProvider\n                  )\n                : {}),\n            },\n          };\n        }),\n        fieldInvalid: send(\"fieldInvalid\"),\n        setName: assign((context, { name }) => {\n          if (context.creationError === \"name-taken\") {\n            return {\n              form: { ...context.form, name },\n              creationError: undefined,\n            };\n          }\n          return { form: { ...context.form, name } };\n        }),\n        setProvider: assign((context, { provider }) => {\n          return {\n            form: {\n              ...context.form,\n              ...onProviderChange(\n                context.capabilities.availableProviders,\n                provider\n              ),\n            },\n            sizes: undefined,\n          };\n        }),\n        setRegion: assign((context, { region }) => {\n          if (context.creationError === \"region-unavailable\") {\n            return {\n              form: { ...context.form, region },\n              sizes: undefined,\n              creationError: undefined,\n            };\n          }\n          return {\n            form: {\n              ...context.form,\n              region,\n            },\n            sizes: undefined,\n          };\n        }),\n        setSize: assign((context, { size }) => ({\n          form: {\n            ...context.form,\n            size,\n          },\n        })),\n        setSizes: assign((context, event) => {\n          const sizes = event.data;\n          const smallestSize = sizes.sort((a, b) => a.quota - b.quota)[0];\n          return {\n            sizes,\n            form: {\n              ...context.form,\n              size: smallestSize,\n            },\n          };\n        }),\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        resetCreationErrorMessage: assign((_context) => ({\n          creationError: undefined,\n        })),\n        setCreationError: assign((_context, { error }) => {\n          return {\n            creationError: error,\n          };\n        }),\n        triggerSave: sendParent((context) => {\n          const form = context.form as Required<typeof context.form> &\n            Pick<typeof context.form, \"billing\">;\n          const data: CreateKafkaFormData = {\n            plan: \"standard\",\n            name: form.name,\n            provider: form.provider,\n            region: form.region,\n            sizeId: form.size.id,\n            billing: form.billing,\n          };\n          return {\n            type: \"save\",\n            data,\n          };\n        }),\n        triggerSubmit: send(\"submit\"),\n        triggerBillingChange: send(\"billingChange\"),\n        setBillingToPrepaid: assign((context) => {\n          const form = { ...context.form };\n          form.billing = \"prepaid\";\n          return { form };\n        }),\n        setBillingToSubscription: assign((context, event) => {\n          const form = { ...context.form };\n          if (event.type === \"selectSubscription\") {\n            form.billing = event.subscription;\n          } else {\n            // single subscription, take it from the context\n            const ms = context.capabilities.marketplaceSubscriptions[0];\n            form.billing = {\n              marketplace: ms.marketplace,\n              subscription: ms.subscriptions[0],\n            };\n          }\n          return { form };\n        }),\n        unsetSubscription: assign((context) => {\n          const form = { ...context.form };\n          form.billing = undefined;\n          return { form };\n        }),\n      },\n      guards: {\n        isOverQuota: ({ capabilities }) =>\n          capabilities === undefined ||\n          capabilities.instanceAvailability === \"out-of-quota\",\n        isInstanceUnavailable: ({ capabilities }) =>\n          capabilities === undefined ||\n          capabilities.instanceAvailability === \"instance-unavailable\",\n        isRegionsUnavailable: ({ capabilities }) =>\n          capabilities === undefined ||\n          capabilities.instanceAvailability === \"regions-unavailable\",\n        nameIsEmpty: ({ form }) =>\n          form.name === undefined || form.name.length === 0,\n        nameIsValid: ({ form }) =>\n          /^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(form.name || \"\"),\n        providerIsValid: ({ form, capabilities }) => {\n          const selectedProviderInfo = capabilities?.availableProviders.find(\n            (p) => p.id === form.provider\n          );\n          return (\n            // must have loaded a list of providers\n            (capabilities?.availableProviders || []).length > 0 &&\n            // must have selected a provider\n            selectedProviderInfo !== undefined\n          );\n        },\n        regionIsValid: ({ form, capabilities }) => {\n          const selectedProviderInfo = capabilities?.availableProviders.find(\n            (p) => p.id === form.provider\n          );\n          return (\n            // must have selected a region\n            form.region !== undefined &&\n            // the region must be included in the capabilities for the provider\n            selectedProviderInfo?.regions.find((r) => r.id === form.region) !==\n              undefined\n          );\n        },\n        noProviderOrRegion: ({ form }) =>\n          form.provider === undefined || form.region === undefined,\n        noSizes: ({ sizes }) => sizes === undefined,\n        emptySizes: ({ sizes }) => sizes !== undefined && sizes.length === 0,\n        sizeIsDisabled: ({ form, capabilities }) => {\n          if (capabilities === undefined) return true;\n          return form.size?.isDisabled === true;\n        },\n        billingRequiredButNotSelected: ({ form }, _, meta) => {\n          if (meta.state.hasTag(\"noBilling\")) {\n            return false;\n          }\n          return form.billing === undefined;\n        },\n        sizeIsOverQuota: ({ form, capabilities }) => {\n          if (capabilities === undefined || !form.size) return true;\n          const availableQuota =\n            form.billing === \"prepaid\" || form.billing === undefined\n              ? capabilities.remainingPrepaidQuota\n              : capabilities.remainingMarketplaceQuota;\n          if (!availableQuota) return true;\n          return form.size.quota > availableQuota;\n        },\n        didProviderChange: (context, event) =>\n          context.form.provider !== event.provider,\n        didRegionChange: (context, event) =>\n          context.form.region !== event.region,\n        didSizeChange: (context, event) =>\n          context.form.size?.id !== event.size.id,\n        onlyPrepaid: (context) =>\n          context.capabilities.marketplaceSubscriptions.length === 0,\n        singleSubscription: (context) =>\n          context.capabilities.remainingPrepaidQuota === undefined &&\n          context.capabilities.marketplaceSubscriptions.flatMap(\n            (m) => m.subscriptions\n          ).length === 1,\n        onlySubscriptions: (context) =>\n          context.capabilities.remainingPrepaidQuota === undefined &&\n          context.capabilities.marketplaceSubscriptions.length > 0,\n        matchesSelectedProviderOrRHMarketplaceAndHasQuota: (\n          { form, capabilities },\n          { subscription }\n        ) =>\n          capabilities.remainingMarketplaceQuota !== undefined &&\n          capabilities.remainingMarketplaceQuota > 0 &&\n          (subscription.marketplace === \"rhm\" ||\n            form.provider === subscription.marketplace),\n        hasPrepaidQuota: (context) =>\n          context.capabilities.remainingPrepaidQuota !== undefined &&\n          context.capabilities.remainingPrepaidQuota > 0,\n        noSelectedProvider: ({ form }) => form.provider === undefined,\n      },\n    }\n  );\n","import { assign, createMachine, send, sendParent } from \"xstate\";\nimport { CloudProvider, CloudRegion } from \"../../../types\";\nimport {\n  CreateKafkaFormData,\n  CreateKafkaInstanceError,\n  TrialPlanInitializationData,\n  TrialSizes,\n} from \"../types\";\nimport { onProviderChange } from \"./shared\";\n\nexport type TrialPlanMachineContext = {\n  // initial data coming from the APIs\n  capabilities: TrialPlanInitializationData;\n\n  // what the user is selecting\n  form: {\n    name?: string;\n    provider?: CloudProvider;\n    region?: CloudRegion;\n  };\n\n  // based on the form.provider and form.region selection\n  sizes: TrialSizes | undefined;\n\n  creationError: CreateKafkaInstanceError | undefined;\n};\n\nexport const TrialPlanMachine =\n  /** @xstate-layout N4IgpgJg5mDOIC5QBUBOBLAhgGwArcwDsBZTAYwAt1CwA6ANzAwDMBPAQXs3QICMf0AF1YBiRKAAOAe1hD0UwuJAAPRACYAbAA4AnLQ0AGNQBYArBo0BmHQHYNNywBoQrRDoO1bARjWmv54y8DY18AX1DnNCw8AhJyKhpaMgVmdCgAVwxCKFpYQUxBdNgRMlQwArAlaVlBeUUkFUQgtWdXBFNLY1o7LRDTG1NTLVNjG3DIjBx8IlJKajpkwlSMrJzmKVQAWwYcdAgRVLBsCABJQi5sPaqZOQUlVQQvLRs9NR1TI1Mdey0tNS1Wk1nqZaJodIEbEYTAZ7OMQFEprFZgkFik0plqGsNtsLnsSmUKtcanV7kCXqD3p9vjZfv9AQg1AYhrQDF4fH9jJ0aVo4QiYjN4vMkmiVpjaOstrlMPRMfjyoIwABldJkMhweANaq3eqgB5qSxqGwsgwmgzPHRBGxeemMrQeCwfAY6NT6s2mXmTflxOaJRbLDHZcXYqUy7JyioAUVQqA2RO1pIZBqNppN5st1pcTR04O6gX+9hMefdEXhnum3pRwqW6NWQa2B3QR1O512EDjtTuDQe-i+tD+Jpdxm0NhdpnpXlGXTNnIt-RCnOLE2i5eRQr9NbFh2OsFohEwmzouIgFTEmpuHZ1jQQxmG3VHfjUE7Zb3HGlGoK8Vo0-ksli0Vh0D1lyRQVfRFAM1kbbdd33MADmxZVeE2IR2xJLsmgNccbECWgvAsGwBkhBwb0sIDEQFH1UWrUVAy3CAdz3A8REYsAAGEKCIGBUM7XUMJaTNHg0QZQU5Axf0MYxRmwsivVXMDqIg8UoPo2gJBjGUICYHZLmPBVT0kc80N49o3lBQxgnBLkmQBATH20Wghy8WxnS0IJLA0GSV1Aqj-VrOidzUqQNKYeCtkQ5DBG4y9u0w2zLCePs33cxkmW0IdPJAyiq18zdlIC9S9hCwLgtQdjOMqM9iR4q8vFito7JBd4XhpGF-FGDKKMrdcaMgpsdzKKA6m0vYTyihNTEfY0TH-aFzGCccni6G8DGzf9WSE9KSz5Lysu6xT-NoAa6lCzZwpQyr43Qx46qaN4vFoawR1HT8Jv6DqKzXcC-Lyw6wEGhQRGKwrSo47IKoMqror48cTEsByOhItlLD8P93rknyN1on6joBnHCDKsGxqu2r+LaIJ3FoEYRytYYkZCNHvOyzHeug2QAC9D1bUaLovBNnjh2xnn-A1hgmmz6rtLRugMZrhhvJzF1LYDOs+hTvr63J0A52hsCkTAIFlCAFDoah6CkABrOhtsyrqvtyjX2boXX9cxBBTakMgCjqABtAwAF0ieM4x3k8O0jCc2qNDum0Bg0bpKXihxvmsYwGd2u2sYdrWnb1g2wyYGNUFUghBAlbZrZV+Scsz1ns513PXfdz2L19gOeaMq9g8asPHwtZKLRjs0+xRv5DHJzQ09ttX7drjmTrOyL2+qmLSfUC0uhMDRsysbRNH8SfVerlmVMdwGCs0kHysDmqboQSxgnuvD9THq1szCLayxtw-maUrO57xgmXEl5Q2uqvO+Zo9BBCsJCSwI5rA8g-srD6Vcf7+REEbRIeQKi0ArsgjGPVf7bmvt2QI90-BCx0PFWBXcbQPweoMLeidHyfAPignq6Dja5HyAqHBn9K74IgsQ9Q2g9CGBMOYACdgHBYU5KHay2FkbOhdOEEshApCaQ1CgPheCGBMHQGwTg3A+ACGEEI68YC8J6AtBHew35-wWDUKwugghPQAFVYCQDMW8ewuE+hsjZIMXwr4rFsgtLYp4Fgo5ONoC46Iri9xcB4JgXg2BwYgC1LzK6IQbR-j7FoJMYkhIRxpNEvGsB4nSiMck1JZjskCSCB4cEMtOQiNGDLLw0S9q1iwYUHc6RCCwHSEhIQCo2zAITM0ekQ4QTNSfhCbM9NEHkR0V0sUPSii5CGRFUZXj8mUwaayP4eFkb9HpNoOGkIVodBePYMSitcHoyZgQ9Zmj0mGWXogGk9I-weD+EMbMZpWTiVTks2SjNVm0WDKbVsXjg5xxlv+Zyj4CIWMRaCBhgwmQjD+KRUFO0p5HzrDiGF4ziaDD0P2KEQ5nijloStRKMIvjDmGMjTpGcsSSlgNKTEXiTRGleiaCaFprF0qlhNBWLomTHI8nir+bD9rBi5YwMZENLrGRMN8FkNIt4vGRSOWh2F9Ao1qu8Do+SZVLmWY8iFHLNhmJ-CCSlg5hy0vqX+SBtV2TPz-G8Nl08a4qRYrQfpggpAqgoJ40lxl-BqFBLoWBFhYEwn1E4epLwPVYr+K5dN9ztHWvZYQwNsFaBgE2BIUxUarwjilkJAYmh7DIxTVhTQuF+gcjsJQ38YxZX8KeftH6QboU6XtbfJysCWQdGnE1CaMs-WEoOkGo89rDUumZdmfof48Ljn-FLM0Tw7JOQsHO1BA7i1HkJJWh4nRY0WgGHhXQxhpzGGbXHfwNITAdt-LA49BCF2wXtWacc5hY3iPBEK5ovQf39o1kDC+wbCChvDZG1VmTo2Gusj4OcDghh2ByXYPse6wl3u-N2y1YL07+uPvlIKwNhq6TSRkjuV7-zww+P4NkQ4CKpvqi6e6IRmm6EZOu0jSsrXgoLQdWDWkh1XEvU0Do3RhzBzZEYb4ZgbSSRmS8MwbH77KJ7SsiTP0pNFyXXJhAd7KYOA5OSnQdowEukmvx7CgmVpNSg+raCJmAPi3UIC0O2gLK6HYx5meKk8bwcQ5QZDbzIYTK3p4N4nRAgfHzDCccQ5XjYW0AreKPxQsBv6n9Ia56FRmNgVLJy2E-DOiZPFHQMNx0zhHBxoSD6CtUd+v9QgtAZMqti2qmqwd9DWGpCjF0sCxxuuG50Fa35nQ-mkgZ-NlHC1Fe63RsxDgPB4Q+H+ecjIXz1P1EaGctigXDBEw88Tq2Dp4x8+OQVVnzK0yTO5Dra3Nba1Kwx95ID7CiPyXYL4wdDTfBtH3EbFlvxfsZLisj+Lv6-p+o7XrEAanmY4yCMehoTCHqEjaX4lXQeb38NvD7B1UdmZQ0x9QCnfCuXih8QYQQOgQ5HLhC0JohLaHwrmpBK350o7rgXWM5mLC7u-GCTkkltBTfqvYI0yMALzmnVdvNN2hd-xzi7bII6HP2C6GlTk+S-k+Ap8LjmD3bL-O6J6gYwRpn72W5rk9fUzG9HpJQ2NElqsvUCPD0T5GCXMzMSMb5Mth5Dn1N8Wm2holKpi4xj5DJ7OeEKbobT2ExJYXHd8XeIwRG2HVwL7y9rfOPAQeEIAA */\n  createMachine(\n    {\n      context: {\n        capabilities: {} as TrialPlanInitializationData,\n        sizes: undefined,\n        form: {},\n        creationError: undefined,\n      },\n      tsTypes: {} as import(\"./TrialPlanMachine.typegen\").Typegen0,\n      schema: {\n        context: {} as TrialPlanMachineContext,\n        events: {} as\n          | { type: \"fieldInvalid\" }\n          | { type: \"nameChange\"; name: string }\n          | { type: \"providerChange\"; provider: CloudProvider }\n          | { type: \"regionChange\"; region: CloudRegion }\n          | { type: \"nameIsValid\" }\n          | { type: \"nameIsInvalid\" }\n          | { type: \"nameIsTaken\" }\n          | { type: \"submit\" }\n          | { type: \"create\" }\n          | { type: \"createSuccess\" }\n          | { type: \"createError\"; error: CreateKafkaInstanceError },\n        services: {} as {\n          getSizes: {\n            data: TrialSizes;\n          };\n        },\n      },\n      initial: \"verifyAvailability\",\n      id: \"TrialPlanMachine\",\n      states: {\n        verifyAvailability: {\n          entry: \"setInitialContext\",\n          always: [\n            {\n              cond: \"isTrialUsed\",\n              target: \"trialUsed\",\n            },\n            {\n              cond: \"isTrialUnavailable\",\n              target: \"trialUnavailable\",\n            },\n            {\n              target: \"configuring\",\n            },\n          ],\n        },\n        trialUsed: {\n          tags: \"blocked\",\n        },\n        trialUnavailable: {\n          tags: \"blocked\",\n        },\n        regionsUnavailable: {\n          tags: \"blocked\",\n        },\n        configuring: {\n          type: \"parallel\",\n          states: {\n            status: {\n              initial: \"unsubmitted\",\n              states: {\n                unsubmitted: {\n                  tags: \"unsubmitted\",\n                },\n                submitted: {\n                  entry: \"triggerSubmit\",\n                  tags: \"submitted\",\n                },\n              },\n              on: {\n                create: {\n                  description:\n                    \"Save is enabled all the time, if it's clicked before the form is completely filled out we should show the validation for all errored fields\",\n                  target: \".submitted\",\n                },\n              },\n            },\n            form: {\n              initial: \"invalid\",\n              states: {\n                invalid: {\n                  tags: \"formInvalid\",\n                },\n                valid: {\n                  entry: \"resetCreationErrorMessage\",\n                  on: {\n                    fieldInvalid: {\n                      target: \"invalid\",\n                    },\n                    submit: {\n                      target: \"saving\",\n                    },\n                  },\n                },\n                saving: {\n                  entry: [\"resetCreationErrorMessage\", \"triggerSave\"],\n                  tags: \"formSaving\",\n                  on: {\n                    createSuccess: {\n                      target: \"saved\",\n                    },\n                    createError: {\n                      actions: \"setCreationError\",\n                      target: \"invalid\",\n                    },\n                  },\n                },\n                saved: {\n                  type: \"final\",\n                },\n              },\n              on: {\n                fieldInvalid: {\n                  description:\n                    \"sent by the fields when their value change to an invalid value. This will transition the form to the invalid state, to then eventually transition to the valid state if the field state is marked as done (which means that all fields have a valid value selected)\",\n                  target: \".invalid\",\n                },\n              },\n            },\n            fields: {\n              tags: \"configurable\",\n              type: \"parallel\",\n              states: {\n                name: {\n                  initial: \"validate\",\n                  states: {\n                    empty: {\n                      tags: \"nameEmpty\",\n                    },\n                    invalid: {\n                      entry: \"fieldInvalid\",\n                      tags: \"nameInvalid\",\n                    },\n                    valid: {\n                      tags: \"nameValid\",\n                      type: \"final\",\n                    },\n                    validate: {\n                      always: [\n                        {\n                          cond: \"nameIsEmpty\",\n                          target: \"empty\",\n                        },\n                        {\n                          cond: \"nameIsValid\",\n                          target: \"valid\",\n                        },\n                        {\n                          target: \"invalid\",\n                        },\n                      ],\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    nameChange: {\n                      actions: \"setName\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n                provider: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"providerIsValid\",\n                          target: \"valid\",\n                        },\n                        {\n                          target: \"invalid\",\n                        },\n                      ],\n                    },\n                    invalid: {\n                      entry: \"fieldInvalid\",\n                      tags: \"providerInvalid\",\n                    },\n                    valid: {\n                      tags: \"providerValid\",\n                      type: \"final\",\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    providerChange: {\n                      actions: \"setProvider\",\n                      cond: \"didProviderChange\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n                region: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"regionIsValid\",\n                          target: \"valid\",\n                        },\n                        {\n                          target: \"invalid\",\n                        },\n                      ],\n                    },\n                    invalid: {\n                      entry: \"fieldInvalid\",\n                      tags: \"regionInvalid\",\n                    },\n                    valid: {\n                      tags: \"regionValid\",\n                      type: \"final\",\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    providerChange: {\n                      target: \".validate\",\n                    },\n                    regionChange: {\n                      actions: \"setRegion\",\n                      cond: \"didRegionChange\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n                size: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"noProviderAndRegion\",\n                          target: \"idle\",\n                        },\n                        {\n                          cond: \"noSizes\",\n                          target: \"loading\",\n                        },\n                        {\n                          cond: \"emptySizes\",\n                          target: \"error\",\n                        },\n                        {\n                          target: \"valid\",\n                        },\n                      ],\n                    },\n                    idle: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeIdle\",\n                    },\n                    valid: {\n                      tags: \"sizeValid\",\n                      type: \"final\",\n                    },\n                    error: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeError\",\n                    },\n                    loading: {\n                      description:\n                        \"Fetch the data required to show the available sizes and limits\",\n                      invoke: {\n                        src: \"getSizes\",\n                        onDone: [\n                          {\n                            actions: \"setSizes\",\n                            target: \"validate\",\n                          },\n                        ],\n                        onError: [\n                          {\n                            target: \"error\",\n                          },\n                        ],\n                      },\n                      tags: \"sizeLoading\",\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    providerChange: {\n                      target: \".validate\",\n                    },\n                    regionChange: {\n                      target: \".validate\",\n                    },\n                  },\n                },\n              },\n              onDone: {\n                target: \"#TrialPlanMachine.configuring.form.valid\",\n              },\n            },\n          },\n          onDone: {\n            target: \"saved\",\n          },\n        },\n        saved: {\n          type: \"final\",\n        },\n      },\n    },\n    {\n      actions: {\n        setInitialContext: assign((context) => {\n          return {\n            form: {\n              ...(context.capabilities.defaultProvider\n                ? onProviderChange(\n                    context.capabilities.availableProviders,\n                    context.capabilities.defaultProvider\n                  )\n                : {}),\n            },\n          };\n        }),\n        fieldInvalid: send(\"fieldInvalid\"),\n        setName: assign((context, { name }) => {\n          if (context.creationError === \"name-taken\") {\n            return {\n              form: { ...context.form, name },\n              creationError: undefined,\n            };\n          }\n          return { form: { ...context.form, name } };\n        }),\n        setProvider: assign((context, { provider }) => {\n          return {\n            form: {\n              ...context.form,\n              ...onProviderChange(\n                context.capabilities.availableProviders,\n                provider\n              ),\n            },\n            sizes: undefined,\n          };\n        }),\n        setRegion: assign((context, { region }) => {\n          if (context.creationError === \"region-unavailable\") {\n            return {\n              form: { ...context.form, region },\n              sizes: undefined,\n              creationError: undefined,\n            };\n          }\n          return {\n            form: {\n              ...context.form,\n              region,\n            },\n            sizes: undefined,\n          };\n        }),\n        setSizes: assign((_context, event) => {\n          const sizes = event.data;\n          return {\n            sizes,\n          };\n        }),\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        resetCreationErrorMessage: assign((_context) => ({\n          creationError: undefined,\n        })),\n        setCreationError: assign((_context, { error }) => ({\n          creationError: error,\n        })),\n        triggerSave: sendParent((context) => {\n          const form = context.form as Required<typeof context.form>;\n          const data: CreateKafkaFormData = {\n            plan: \"developer\",\n            name: form.name,\n            provider: form.provider,\n            region: form.region,\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            sizeId: context.sizes!.trial.id,\n            billing: undefined,\n          };\n          return {\n            type: \"save\",\n            data,\n          };\n        }),\n        triggerSubmit: send(\"submit\"),\n      },\n      guards: {\n        isTrialUsed: ({ capabilities }) =>\n          capabilities === undefined ||\n          capabilities.instanceAvailability === \"used\",\n        isTrialUnavailable: ({ capabilities }) =>\n          capabilities === undefined ||\n          capabilities.instanceAvailability === \"unavailable\",\n        nameIsEmpty: ({ form }) =>\n          form.name === undefined || form.name.length === 0,\n        nameIsValid: ({ form }) =>\n          /^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(form.name || \"\"),\n        providerIsValid: ({ form, capabilities }) => {\n          const selectedProviderInfo = capabilities?.availableProviders.find(\n            (p) => p.id === form.provider\n          );\n          return (\n            // must have loaded a list of providers\n            (capabilities?.availableProviders || []).length > 0 &&\n            // must have selected a provider\n            selectedProviderInfo !== undefined\n          );\n        },\n        regionIsValid: ({ form, capabilities }) => {\n          const selectedProviderInfo = capabilities?.availableProviders.find(\n            (p) => p.id === form.provider\n          );\n          return (\n            // must have selected a region\n            form.region !== undefined &&\n            // the region must be included in the capabilities for the provider\n            selectedProviderInfo?.regions.find((r) => r.id === form.region) !==\n              undefined\n          );\n        },\n        noProviderAndRegion: ({ form }) =>\n          form.provider === undefined || form.region === undefined,\n        noSizes: ({ sizes }) => sizes === undefined,\n        emptySizes: ({ sizes }) =>\n          sizes !== undefined && sizes.standard.length === 0,\n        didProviderChange: (context, event) =>\n          context.form.provider !== event.provider,\n        didRegionChange: (context, event) =>\n          context.form.region !== event.region,\n      },\n    }\n  );\n","import { assign, createMachine, EventFrom, forwardTo, send } from \"xstate\";\nimport { CloudProvider, CloudRegion } from \"../../../types\";\nimport type {\n  CloudProviders,\n  CreateKafkaFormData,\n  CreateKafkaInitializationData,\n  CreateKafkaInstanceError,\n  StandardPlanInitializationData,\n  StandardSizes,\n  TrialPlanInitializationData,\n  TrialSizes,\n} from \"../types\";\nimport {\n  StandardPlanMachine,\n  StandardPlanMachineContext,\n} from \"./StandardPlanMachine\";\nimport { TrialPlanMachine, TrialPlanMachineContext } from \"./TrialPlanMachine\";\n\ntype Quota =\n  | Pick<\n      StandardPlanInitializationData,\n      | \"plan\"\n      | \"remainingPrepaidQuota\"\n      | \"marketplaceSubscriptions\"\n      | \"remainingMarketplaceQuota\"\n      | \"instanceAvailability\"\n    >\n  | Pick<TrialPlanInitializationData, \"plan\" | \"instanceAvailability\">;\n\nexport type CreateKafkaInstanceMachineContext = {\n  quota: Quota | undefined;\n  providers: CloudProviders | undefined;\n  defaultProvider: CloudProvider | undefined;\n  capabilities: CreateKafkaInitializationData | undefined;\n};\n\nconst CreateKafkaInstanceMachine =\n  /** @xstate-layout N4IgpgJg5mDOIC5QGMBOYCGAXMBpDAZgNYYCSAdrFhucmAHQA2A9hhAJblT0COArs2r1kACzDIinKAAIqNCBlQRp-QRgDEYVKmap6AB0bYCugLbD02PIRIU5tBizZTeAoaPGSus6uQVKVNwwETgA3ZmRsdmZyAG0ABgBdRFB9Zlh2LGjyFJAAD0QAFniAJnp4gGYAdkKATgAOeqr4qvrCgFYAGhAAT0QANir++n769tqq2sKARhKKjsKAX0XutEwcfGIySl86JlYOLlc1YTEJKR95RWVVanV7fxug6QxQjHYjACNGMFy0jKyMVyBQQxTKlRqDSaLTaXV6iHG8XoVXahX6UyqJVqJX6-WWq0sGxs23seych24twwp08Fwe10CanUzD4WGkzAIlz8DKpf3SmWywKKpXK1TqjWarQ63T6CHa8UK9Hqcw6JUK6palXxIDWVk2th2NDJBxcVJp5289ICVPU5GYXMejOoLzeHww31+SBA-wFQK9ILBoshEph0vhoPaw2hFRKasKbQa0yWKx1hOsWzsu0cJqOZqtEHUfIBgv9iCTU2RkZj03RYsjMoGyvo0yG40KJSq0wq02m9W1uqJGcNDn2zlzQXoEDAoTALH0WkLXp9gJypYQ5cVKP61drNXr4faFSRJVmdUmasjvf7af1JKzo4px3cZy8MinM7nWhd7y+H0yPU0bRdAMIwsBMVBzAHdMDVJbMx0pCcPAtN9p1nZh51Qb83U+P8sB6EJyHCSIVwSZIl35FchQQWpanaeh4y7JN5gqbFZgbOU1WRE96m3Bp+lRKoKmvdZoLvI04MfM0kNfaR3zQjCsN-Rh-3UOTP0wvhYEgItfVXUAQRouiGO7QpmNYkp2NMqolXqWZcSPCpRn6NFhL1YlM3Eh9TUQl8LjU9Cv1eH93VwgD-IUoLsJ+HTKLXQz6NskyzJPCzwwqdppnoWj4niaZ2kPepaiTaZXMHGD73JFwCDALBRAufQdFCdgp1QWB1Aa5gmpa2AXj8aR0CgbIesir5ovI4s-X0staNqegjzGcZ+hKHjeyqdj2jGcplu4moFSqKpStEjyR0qo5qtqkR6sa5qtDarQdD0QxjDMCwRNvY7jXg+hzrq7wOq626CKIqIYlImKSym9cMRsiY0RmaYFXiOFZUKfa5rqRy5mmWp4kGdpDve4dPsfH7Lr+67uvainbvZTCBqG6Q+HIEb3TG1IKIh-Jpsjeh2k7XHOw7QqWnY0Z6mbapakGNVqgR-GUygwnYK8rhVJiBg5BwV63KHZXTqgcHJq5hASlROj+lKCp6kqdUVvYq3Mr3ds0UaPLZgJ9yiY13xHSe8h6Gan57leT12YmvTjaxbd6NM+NDIVdLCkskUFmxyZt2cwYPd1+982kP36FgV4pHUKCAGU+GQOhYHgcbdKoxOjKR0p6nmYXlvt1Fyn6Lt1W7E9Jkc7Pys8vOC6LprVaggBRIDUENiOQSjioY7b+PTNRe2a152NbLy03M7y4exJHcKvwLwOwGDmcF6orFWl5i2Nt7toEYqUWpayrt5SW+z4ls4+H0GBn0wuPYuU80wVyrnAWuYd65rkbvRBUtQ6x9zaKLeMO8WhDB7PEKEtRAFe0nKhdS+cjD+wniXGec9b5rnvuLSMSNErxhmJUUWCMsrKmWngsEuJ5YpjtFOWBqY3qez1jmBCJxpJ0h9jyIItDIYI1SrKSM4tW6dmVB0TsaISoKxvGIiqEinzUnzAo42zRxYojmD3FEtk+bTFFkMZskYcS9mfiwwh4ivpmhAWYkEswGg2RwSxJosxSjrU4tjAePcEY8SKp4wx3ifK0m8CAxSIVlJ4T8QMfic1lrFVaMqeYDjwztjojxHhsYOxW1ssmAkoic6eX1sY7JCBWjsQ7LNKWjRKiLRxmieW9SdYjxOkY0mV1Oo3Vaq0msCoY7FCGOlWMsxkYIkxMiHh7RYyMPjEJPRDSRnExcJYCAso4GxUhrGQY5QMpjCSpedaExkRND5jorEFQ9lDLKifI5XBWmb3DC2TKlRGLVCxBeDoCTR49CoGAUwjNmaulGqHb0HMjYgkciiLK+UUFWRxt2VZbT1mt1GK0Fo-EOx4n2cMn53srgBAvhANmqLw53yaIqfi4xsQdnyu2d+aVqjONbmna2OJuxQpHGPchhdwEGzrhc42MZBXYwmD3CE-F+j21jCMZy8Ytxdlom0CVewpU0FacteUIwcXcpRKiOY7FsYrzBdbeMhUWJt2NcAkhAVQHSsvuaxos19rzUxelFsyiBjdhGC2UYLY4k9l0V8o6RC0lgMnnK85nMMVVPKJo2GbiirsOsrMd1uU1SWzqSImlQDiEfh9WQs18qs2IGWrk4N-9Q0ZUxJZJoSolWVBylYwqnrhDMFMIYGqKLlzNoQNUf+SomFoP2p2Ht1lcZ5Roj2IW4rqXfKAa0o87EaI3JyhtQS2Ntyo2WMsIAA */\n  createMachine(\n    {\n      context: {\n        providers: undefined,\n        defaultProvider: undefined,\n        quota: undefined,\n        capabilities: undefined,\n      },\n      tsTypes: {} as import(\"./CreateKafkaInstanceMachine.typegen\").Typegen0,\n      schema: {\n        context: {} as CreateKafkaInstanceMachineContext,\n        events: {} as\n          | {\n              type: \"standard quota available\";\n              quota: Pick<\n                StandardPlanInitializationData,\n                | \"remainingPrepaidQuota\"\n                | \"remainingMarketplaceQuota\"\n                | \"marketplaceSubscriptions\"\n              >;\n            }\n          | {\n              type: \"out of standard quota\";\n              quota: Pick<\n                StandardPlanInitializationData,\n                \"marketplaceSubscriptions\"\n              >;\n            }\n          | {\n              type: \"no standard quota available\";\n              hasTrialQuota: boolean;\n            }\n          | {\n              type: \"trial available\";\n              capabilities: TrialPlanInitializationData;\n            }\n          | { type: \"trial used\" }\n          | { type: \"developer available\" }\n          | { type: \"developer used\" }\n          | { type: \"developer unavailable\" }\n          | {\n              type: \"providers and regions available\";\n              providers: CloudProviders;\n              defaultProvider: CloudProvider | undefined;\n            }\n          | { type: \"providers or regions unavailable\" }\n          | { type: \"save\"; data: CreateKafkaFormData }\n          | { type: \"createSuccess\" }\n          | { type: \"createError\"; error: CreateKafkaInstanceError },\n        services: {} as {\n          checkStandardQuota: {\n            data: never;\n          };\n          checkDeveloperAvailability: {\n            data: never;\n          };\n          fetchProvidersWithRegions: {\n            data: never;\n          };\n          standardPlan: {\n            data: StandardPlanMachineContext;\n          };\n          trialPlan: {\n            data: TrialPlanMachineContext;\n          };\n        },\n      },\n      id: \"createKafkaInstance\",\n      initial: \"loading\",\n      states: {\n        loading: {\n          description: \"Fetch the data required to drive the creation flow\",\n          tags: \"loading\",\n          initial: \"quota\",\n          states: {\n            quota: {\n              initial: \"checking standard quota\",\n              states: {\n                \"checking standard quota\": {\n                  invoke: {\n                    src: \"checkStandardQuota\",\n                    onError: [\n                      {\n                        actions: \"setStandardUnavailable\",\n                        target: \"standard\",\n                      },\n                    ],\n                  },\n                  on: {\n                    \"standard quota available\": {\n                      actions: \"setStandardAvailable\",\n                      target: \"standard\",\n                    },\n                    \"out of standard quota\": {\n                      actions: \"setStandardOutOfQuota\",\n                      target: \"standard\",\n                    },\n                    \"no standard quota available\": {\n                      target: \"checking developer availability\",\n                    },\n                  },\n                },\n                standard: {\n                  type: \"final\",\n                  always: {\n                    target: \"#createKafkaInstance.loading.fetching providers\",\n                  },\n                },\n                developer: {\n                  type: \"final\",\n                  always: {\n                    target: \"#createKafkaInstance.loading.fetching providers\",\n                  },\n                },\n                \"checking developer availability\": {\n                  invoke: {\n                    src: \"checkDeveloperAvailability\",\n                    onError: [\n                      {\n                        actions: \"setDeveloperUnavailable\",\n                        target: \"developer\",\n                      },\n                    ],\n                  },\n                  on: {\n                    \"developer used\": {\n                      actions: \"setDeveloperUsed\",\n                      target: \"developer\",\n                    },\n                    \"developer available\": {\n                      actions: \"setDeveloperAvailable\",\n                      target: \"developer\",\n                    },\n                    \"developer unavailable\": {\n                      actions: \"setDeveloperUnavailable\",\n                      target: \"developer\",\n                    },\n                  },\n                },\n              },\n            },\n            \"fetching providers\": {\n              invoke: {\n                src: \"fetchProvidersWithRegions\",\n                onError: [\n                  {\n                    actions: \"setProvidersOrRegionsUnavailable\",\n                    target: \"ready\",\n                  },\n                ],\n              },\n              on: {\n                \"providers and regions available\": {\n                  actions: \"setProviders\",\n                  target: \"ready\",\n                },\n                \"providers or regions unavailable\": {\n                  actions: \"setProvidersOrRegionsUnavailable\",\n                  target: \"ready\",\n                },\n              },\n            },\n            ready: {\n              type: \"final\",\n              entry: \"setCapabilities\",\n            },\n          },\n          onDone: [\n            {\n              cond: \"standard plan\",\n              target: \"standard plan\",\n            },\n            {\n              cond: \"developer plan\",\n              target: \"developer plan\",\n            },\n            {\n              target: \"system unavailable\",\n            },\n          ],\n        },\n        \"system unavailable\": {\n          tags: \"systemUnavailable\",\n          type: \"final\",\n        },\n        \"standard plan\": {\n          invoke: {\n            src: \"standardPlan\",\n            id: \"standardPlanService\",\n          },\n          tags: \"standardPlan\",\n          initial: \"idle\",\n          states: {\n            idle: {\n              on: {\n                save: {\n                  target: \"saving\",\n                },\n              },\n            },\n            saving: {\n              invoke: {\n                src: \"createInstance\",\n              },\n              tags: \"saving\",\n              on: {\n                createSuccess: {\n                  target: \"#createKafkaInstance.complete\",\n                },\n                createError: {\n                  actions: \"notifyCreateErrorToStandardPlan\",\n                  target: \"idle\",\n                },\n              },\n            },\n          },\n        },\n        \"developer plan\": {\n          invoke: {\n            src: \"trialPlan\",\n            id: \"trialPlanService\",\n          },\n          tags: \"trialPlan\",\n          initial: \"idle\",\n          states: {\n            idle: {\n              on: {\n                save: {\n                  target: \"saving\",\n                },\n              },\n            },\n            saving: {\n              invoke: {\n                src: \"createInstance\",\n              },\n              tags: \"saving\",\n              on: {\n                createSuccess: {\n                  target: \"#createKafkaInstance.complete\",\n                },\n                createError: {\n                  actions: \"notifyCreateErrorToTrialPlan\",\n                  target: \"idle\",\n                },\n              },\n            },\n          },\n        },\n        complete: {\n          type: \"final\",\n        },\n      },\n    },\n    {\n      actions: {\n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        setDeveloperAvailable: assign((_) => ({\n          quota: {\n            plan: \"developer\" as const,\n            instanceAvailability: \"available\" as const,\n          },\n        })),\n        setDeveloperUnavailable: assign((_) => ({\n          quota: {\n            plan: \"developer\" as const,\n            instanceAvailability: \"unavailable\" as const,\n          },\n        })),\n        setDeveloperUsed: assign((_) => ({\n          quota: {\n            plan: \"developer\" as const,\n            instanceAvailability: \"used\" as const,\n          },\n        })),\n        setStandardAvailable: assign((_, event) => ({\n          quota: {\n            plan: \"standard\" as const,\n            instanceAvailability: \"available\" as const,\n            remainingPrepaidQuota: event.quota.remainingPrepaidQuota,\n            marketplaceSubscriptions: event.quota.marketplaceSubscriptions,\n            remainingMarketplaceQuota: event.quota.remainingMarketplaceQuota,\n          },\n        })),\n        setStandardOutOfQuota: assign((_, event) => ({\n          quota: {\n            plan: \"standard\" as const,\n            instanceAvailability: \"out-of-quota\" as const,\n            marketplaceSubscriptions: event.quota.marketplaceSubscriptions,\n            remainingMarketplaceQuota: 0,\n            remainingPrepaidQuota: 0,\n          },\n        })),\n        setStandardUnavailable: assign((_) => ({\n          quota: {\n            plan: \"standard\" as const,\n            instanceAvailability: \"instance-unavailable\" as const,\n            marketplaceSubscriptions: [],\n            remainingMarketplaceQuota: 0,\n            remainingPrepaidQuota: 0,\n          },\n        })),\n        setProviders: assign((_, event) => {\n          return {\n            providers: event.providers,\n            defaultProvider: event.defaultProvider,\n          };\n        }),\n        setProvidersOrRegionsUnavailable: assign((context) => {\n          const quota = context.quota!;\n          if (quota.plan === \"standard\") {\n            quota.instanceAvailability = \"regions-unavailable\";\n          } else {\n            quota.instanceAvailability = \"unavailable\";\n          }\n          return {\n            providers: [],\n            quota,\n          };\n        }),\n        setCapabilities: assign((context) => {\n          const { providers, defaultProvider, quota } = context;\n          if (!providers || !quota) {\n            throw new Error(\"unexpected condition, no providers or quota\");\n          }\n          if (quota.plan === \"standard\") {\n            const capabilities: StandardPlanInitializationData = {\n              plan: \"standard\",\n              availableProviders: providers,\n              defaultProvider,\n              instanceAvailability: quota.instanceAvailability,\n              marketplaceSubscriptions: quota.marketplaceSubscriptions,\n              remainingMarketplaceQuota: quota.remainingMarketplaceQuota,\n              remainingPrepaidQuota: quota.remainingPrepaidQuota,\n            };\n            return { capabilities };\n          } else {\n            const capabilities: TrialPlanInitializationData = {\n              plan: \"developer\",\n              availableProviders: providers,\n              defaultProvider,\n              instanceAvailability: quota.instanceAvailability,\n            };\n            return { capabilities };\n          }\n        }),\n        notifyCreateErrorToStandardPlan: forwardTo(\"standardPlanService\"),\n        notifyCreateErrorToTrialPlan: send(\n          (_, event) => {\n            return { type: \"createError\", error: event.error };\n          },\n          { to: \"trialPlanService\" }\n        ),\n        /* eslint-enable @typescript-eslint/no-unused-vars */\n      },\n      guards: {\n        \"standard plan\": (context) => context.quota?.plan === \"standard\",\n        \"developer plan\": (context) => context.quota?.plan === \"developer\",\n      },\n    }\n  );\n\ntype EventTypes = Pick<\n  EventFrom<typeof CreateKafkaInstanceMachine>,\n  \"type\"\n>[\"type\"];\n\ntype EventOptions<E extends EventTypes> = Omit<\n  EventFrom<typeof CreateKafkaInstanceMachine, E>,\n  \"type\"\n>;\n\nexport type CreateKafkaInstanceServices = {\n  checkStandardQuota: (events: {\n    onOutOfQuota: (p: EventOptions<\"out of standard quota\">) => void;\n    onQuotaAvailable: (p: EventOptions<\"standard quota available\">) => void;\n    onNoQuotaAvailable: (\n      p: EventOptions<\"no standard quota available\">\n    ) => void;\n  }) => void;\n  checkDeveloperAvailability: (events: {\n    onUsed: () => void;\n    onAvailable: () => void;\n    onUnavailable: () => void;\n  }) => void;\n  fetchProvidersWithRegions: (\n    plan: \"standard\" | \"developer\",\n    events: {\n      onAvailable: (p: EventOptions<\"providers and regions available\">) => void;\n      onUnavailable: () => void;\n    }\n  ) => void;\n  getStandardSizes: (\n    provider: CloudProvider,\n    region: CloudRegion\n  ) => Promise<StandardSizes>;\n  getTrialSizes: (\n    provider: CloudProvider,\n    region: CloudRegion\n  ) => Promise<TrialSizes>;\n  onCreate: (\n    data: CreateKafkaFormData,\n    onSuccess: () => void,\n    onError: (error: CreateKafkaInstanceError) => void\n  ) => void;\n};\n\nexport function makeCreateKafkaInstanceMachine({\n  checkStandardQuota: checkStandardQuotaCb,\n  checkDeveloperAvailability: checkDeveloperAvailabilityCb,\n  fetchProvidersWithRegions: fetchProvidersWithRegionsCb,\n  getStandardSizes: getStandardSizesCb,\n  getTrialSizes: getTrialSizesCb,\n  onCreate,\n}: CreateKafkaInstanceServices) {\n  return CreateKafkaInstanceMachine.withConfig({\n    services: {\n      checkStandardQuota: () => {\n        return (send) =>\n          checkStandardQuotaCb({\n            onNoQuotaAvailable: ({ hasTrialQuota }) => {\n              send({ type: \"no standard quota available\", hasTrialQuota });\n            },\n            onOutOfQuota: ({ quota }) => {\n              send({ type: \"out of standard quota\", quota });\n            },\n            onQuotaAvailable: ({ quota }) => {\n              send({ type: \"standard quota available\", quota });\n            },\n          });\n      },\n      checkDeveloperAvailability: () => {\n        return (send) => {\n          checkDeveloperAvailabilityCb({\n            onAvailable: () => send(\"developer available\"),\n            onUsed: () => send(\"developer used\"),\n            onUnavailable: () => send(\"developer unavailable\"),\n          });\n        };\n      },\n      fetchProvidersWithRegions: (context) => {\n        const instanceType = context.quota!.plan;\n        return (send) => {\n          fetchProvidersWithRegionsCb(instanceType, {\n            onAvailable: ({ providers, defaultProvider }) =>\n              send({\n                type: \"providers and regions available\",\n                providers,\n                defaultProvider,\n              }),\n            onUnavailable: () => send(\"providers or regions unavailable\"),\n          });\n        };\n      },\n      createInstance: (_context, event) => {\n        const form = event.data;\n\n        return (send) => {\n          function onSuccess() {\n            send(\"createSuccess\");\n          }\n\n          function onError(error: CreateKafkaInstanceError) {\n            send({ type: \"createError\", error });\n          }\n\n          onCreate(\n            {\n              plan: form.plan,\n              name: form.name,\n              provider: form.provider,\n              region: form.region,\n              sizeId: form.sizeId,\n              billing: form.billing,\n            },\n            onSuccess,\n            onError\n          );\n        };\n      },\n      standardPlan: (context) => {\n        return StandardPlanMachine.withContext({\n          capabilities: context.capabilities as StandardPlanInitializationData,\n          sizes: undefined,\n          form: {},\n          creationError: undefined,\n        }).withConfig({\n          services: {\n            getSizes: (context) => {\n              const form = context.form as Required<typeof context.form>;\n              return getStandardSizesCb(form.provider, form.region);\n            },\n          },\n        });\n      },\n      trialPlan: (context) => {\n        return TrialPlanMachine.withContext({\n          capabilities: context.capabilities as TrialPlanInitializationData,\n          sizes: undefined,\n          form: {},\n          creationError: undefined,\n        }).withConfig({\n          services: {\n            getSizes: (context) => {\n              const form = context.form as Required<typeof context.form>;\n              return getTrialSizesCb(form.provider, form.region);\n            },\n          },\n        });\n      },\n    },\n  });\n}\n","import { useInterpret } from \"@xstate/react\";\nimport type { FunctionComponent } from \"react\";\nimport { createContext } from \"react\";\nimport type { ActorRefFrom } from \"xstate\";\nimport type { CreateKafkaInstanceServices } from \"./CreateKafkaInstanceMachine\";\nimport { makeCreateKafkaInstanceMachine } from \"./CreateKafkaInstanceMachine\";\n\nexport const CreateKafkaInstanceContext = createContext<{\n  service: ActorRefFrom<ReturnType<typeof makeCreateKafkaInstanceMachine>>;\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n}>(null!);\n\nexport const CreateKafkaInstanceProvider: FunctionComponent<\n  CreateKafkaInstanceServices\n> = ({\n  onCreate,\n  checkStandardQuota,\n  checkDeveloperAvailability,\n  fetchProvidersWithRegions,\n  getStandardSizes,\n  getTrialSizes,\n  children,\n}) => {\n  const service = useInterpret(\n    () =>\n      makeCreateKafkaInstanceMachine({\n        checkStandardQuota,\n        checkDeveloperAvailability,\n        fetchProvidersWithRegions,\n        getStandardSizes,\n        getTrialSizes,\n        onCreate,\n      }),\n    { devTools: true }\n  );\n  return (\n    <CreateKafkaInstanceContext.Provider value={{ service }}>\n      {children}\n    </CreateKafkaInstanceContext.Provider>\n  );\n};\n","export const LogoAWS = new URL(\"./Logo-AWS.svg\", import.meta.url)\n  .href;\nexport const LogoAzure = new URL(\n  \"./Logo-Azure.svg\",\n  import.meta.url\n).href;\nexport const LogoGCP = new URL(\"./Logo-GCP.svg\", import.meta.url)\n  .href;\nexport const LogoRedhat = new URL(\n  \"./Logo-Redhat.svg\",\n  import.meta.url\n).href;","import type { FunctionComponent } from \"react\";\nimport { LogoAWS } from \"./images\";\n\nexport const AWSLogo: FunctionComponent = () => {\n  return (\n    <>\n      <img src={LogoAWS} alt={\"\"} style={{ height: \"60px\" }} />\n    </>\n  );\n};\n","import type { FunctionComponent } from \"react\";\nimport { LogoAzure } from \"./images\";\n\nexport const AzureLogo: FunctionComponent = () => {\n  return (\n    <>\n      <img src={LogoAzure} alt={\"\"} style={{ height: \"60px\" }} />\n    </>\n  );\n};\n","import type { FunctionComponent } from \"react\";\nimport { LogoGCP } from \"./images\";\n\nexport const GCPLogo: FunctionComponent = () => {\n  return (\n    <>\n      <img src={LogoGCP} alt={\"\"} style={{ height: \"60px\" }} />\n    </>\n  );\n};\n","import type { SelectProps } from \"@patternfly/react-core\";\nimport {\n  Flex,\n  FlexItem,\n  FormSelect,\n  FormSelectOption,\n  Gallery,\n  GalleryItem,\n  HelperText,\n  HelperTextItem,\n  Tile,\n} from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { AWSLogo, AzureLogo, GCPLogo, RedhatLogo } from \"../../Logos\";\nimport type { MarketPlace } from \"../../../types\";\n\nexport type BillingTilesProps = {\n  value: \"prepaid\" | string | undefined;\n  hasPrepaid: boolean;\n  subscriptions: {\n    marketplace: MarketPlace;\n    subscription: string;\n    isDisabled: boolean;\n  }[];\n  isPrepaidOverQuota: boolean;\n  prepaidQuota: number;\n  isMarketplaceOverQuota: boolean;\n  marketplaceQuota: number;\n  onPrepaid: () => void;\n  onSubscription: (marketplace: MarketPlace, subscription: string) => void;\n  validated?: SelectProps[\"validated\"];\n};\nexport const BillingTiles: VoidFunctionComponent<BillingTilesProps> = ({\n  value,\n  hasPrepaid,\n  subscriptions,\n  isPrepaidOverQuota,\n  prepaidQuota,\n  isMarketplaceOverQuota,\n  marketplaceQuota,\n  onPrepaid,\n  onSubscription,\n  validated,\n}) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n  const marketplaces: { [key in MarketPlace]: string } = {\n    aws: t(\"billing.marketplace_aws\"),\n    azure: t(\"billing.marketplace_azure\"),\n    gcp: t(\"billing.marketplace_gcp\"),\n    rhm: t(\"billing.marketplace_rh\"),\n  };\n  return (\n    <>\n      <Flex\n        role=\"listbox\"\n        aria-label={t(\"select_billing\")}\n        direction={{ default: \"column\", md: \"row\" }}\n      >\n        {hasPrepaid && (\n          <Flex\n            flex={{ default: \"flex_1\" }}\n            direction={{ default: \"column\" }}\n            spaceItems={{ default: \"spaceItemsSm\" }}\n          >\n            <span className=\"pf-c-form__label\">\n              <span className=\"pf-c-form__label-text\">\n                {t(\"billing.prepaid\")}\n              </span>\n            </span>\n            <FlexItem flex={{ default: \"flex_1\" }}>\n              <Tile\n                className={\"pf-u-w-100\"}\n                title={t(\"billing.prepaid_option\")}\n                icon={tiles[\"rhm\"]}\n                isDisabled={isPrepaidOverQuota}\n                isStacked={true}\n                isSelected={value === \"prepaid\"}\n                onClick={onPrepaid}\n              >\n                &nbsp;\n              </Tile>\n            </FlexItem>\n            {isPrepaidOverQuota && prepaidQuota > 0 && (\n              <HelperText className={\"pf-c-form__helper-text\"}>\n                <HelperTextItem variant={\"error\"}>\n                  {t(\"billing.prepaid_out_of_quota\")}\n                </HelperTextItem>\n              </HelperText>\n            )}\n            {isPrepaidOverQuota && prepaidQuota === 0 && (\n              <HelperText className={\"pf-c-form__helper-text\"}>\n                <HelperTextItem variant={\"error\"}>\n                  {t(\"billing.prepaid_out_of_quota\")}\n                </HelperTextItem>\n              </HelperText>\n            )}\n          </Flex>\n        )}\n        {subscriptions.length > 0 && (\n          <Flex\n            flex={{ default: \"flex_1\" }}\n            direction={{ default: \"column\" }}\n            spaceItems={{ default: \"spaceItemsSm\" }}\n          >\n            {hasPrepaid && (\n              <span className=\"pf-c-form__label\">\n                <span className=\"pf-c-form__label-text\">\n                  {t(\"billing.marketplace\")}\n                </span>\n              </span>\n            )}\n            <Gallery hasGutter={true}>\n              {subscriptions.map(\n                ({ marketplace, subscription, isDisabled }) => (\n                  <GalleryItem key={`tile-${subscription}`}>\n                    <Tile\n                      className={\"pf-u-w-100\"}\n                      title={marketplaces[marketplace]}\n                      icon={tiles[marketplace]}\n                      isStacked={true}\n                      isSelected={value === subscription}\n                      isDisabled={isDisabled || isMarketplaceOverQuota}\n                      onClick={() => onSubscription(marketplace, subscription)}\n                    >\n                      {subscription}\n                    </Tile>\n                  </GalleryItem>\n                )\n              )}\n            </Gallery>\n            {isMarketplaceOverQuota && marketplaceQuota > 0 && (\n              <HelperText className={\"pf-c-form__helper-text\"}>\n                <HelperTextItem variant={\"error\"}>\n                  {t(\"billing.marketplace_out_of_quota\")}\n                </HelperTextItem>\n              </HelperText>\n            )}\n            {isMarketplaceOverQuota && marketplaceQuota === 0 && (\n              <HelperText className={\"pf-c-form__helper-text\"}>\n                <HelperTextItem variant={\"error\"}>\n                  {t(\"billing.marketplace_out_of_quota\")}\n                </HelperTextItem>\n              </HelperText>\n            )}\n          </Flex>\n        )}\n      </Flex>\n      <FormSelect\n        className={\"pf-u-display-none\"}\n        value={value}\n        id=\"form-billing-option\"\n        name=\"billing\"\n        validated={validated}\n        onChange={(value) => {\n          if (value === \"prepaid\") {\n            onPrepaid();\n          } else {\n            const s = subscriptions.find((s) => s.marketplace === value);\n            if (s) {\n              onSubscription(s.marketplace, s.subscription);\n            }\n          }\n        }}\n      >\n        {[\n          <FormSelectOption\n            value=\"\"\n            key=\"placeholder\"\n            label={t(\"select_billing\")}\n          />,\n          hasPrepaid ? (\n            <FormSelectOption\n              key={\"prepaid\"}\n              value={\"prepaid\"}\n              label={`prepaid`}\n            />\n          ) : null,\n          subscriptions.map(({ marketplace, subscription, isDisabled }) => {\n            return (\n              <FormSelectOption\n                key={`select-option-${subscription}`}\n                value={subscription}\n                label={`${marketplace} - ${subscription}`}\n                isDisabled={isDisabled}\n              />\n            );\n          }),\n        ]}\n      </FormSelect>\n    </>\n  );\n};\n\nconst tiles: { [id in MarketPlace]: JSX.Element } = {\n  aws: <AWSLogo />,\n  gcp: <GCPLogo />,\n  azure: <AzureLogo />,\n  rhm: <RedhatLogo />,\n};\n","import type { FunctionComponent } from \"react\";\nimport { LogoRedhat } from \"./images\";\n\nexport const RedhatLogo: FunctionComponent = () => {\n  return (\n    <>\n      <img src={LogoRedhat} alt={\"\"} style={{ height: \"60px\" }} />\n    </>\n  );\n};\n","import type { SelectProps } from \"@patternfly/react-core\";\nimport {\n  Flex,\n  FlexItem,\n  FormSelect,\n  FormSelectOption,\n  Skeleton,\n  Tile,\n} from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { AWSLogo, AzureLogo, GCPLogo } from \"../../Logos\";\nimport type { CloudProvider } from \"../../../types\";\nimport type { CloudProviderInfo } from \"../types\";\n\nexport type CloudProvidersTilesProps = {\n  providers: (CloudProviderInfo & { isDisabled?: boolean })[];\n  value: CloudProvider | undefined;\n  onChange: (provider: CloudProvider) => void;\n  isDisabled: boolean;\n  validated?: SelectProps[\"validated\"];\n};\nexport const CloudProvidersTiles: VoidFunctionComponent<\n  CloudProvidersTilesProps\n> = ({ providers, value, onChange, isDisabled, validated }) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n  return (\n    <>\n      {providers.length === 0 && (\n        <Skeleton\n          className=\"pf-m-text-4xl\"\n          screenreaderText=\"Loading contents\"\n        />\n      )}\n      <div role=\"listbox\" aria-label={t(\"select_cloud_provider\")}>\n        <Flex\n          justifyContent={{ default: \"justifyContentSpaceBetween\" }}\n          spacer={{ default: \"spacerNone\" }}\n          spaceItems={{ default: \"spaceItemsXs\" }}\n        >\n          {providers.map(\n            ({ id, displayName, isDisabled: providerDisabled }) => (\n              <FlexItem grow={{ default: \"grow\" }} key={id}>\n                <Tile\n                  className={\"pf-u-w-100\"}\n                  title={displayName}\n                  icon={tiles[id]}\n                  isStacked={true}\n                  isSelected={value === id}\n                  isDisabled={providerDisabled || isDisabled}\n                  onClick={() => onChange(id)}\n                >\n                  {(providerDisabled || isDisabled) &&\n                    t(\"billing.provider_incompatible_with_current_billing\")}\n                  &nbsp;\n                </Tile>\n              </FlexItem>\n            )\n          )}\n        </Flex>\n      </div>\n      <FormSelect\n        className={\"pf-u-display-none\"}\n        value={value}\n        id=\"form-cloud-provider-option\"\n        name=\"cloud-provider\"\n        isDisabled={isDisabled}\n        validated={validated}\n        onChange={(value) => onChange(value as CloudProvider)}\n      >\n        {[\n          <FormSelectOption\n            value=\"\"\n            key=\"placeholder\"\n            label={t(\"select_cloud_provider\")}\n          />,\n          providers.map(({ id, displayName }, index) => {\n            return (\n              <FormSelectOption key={index} value={id} label={displayName} />\n            );\n          }),\n        ]}\n      </FormSelect>\n    </>\n  );\n};\n\nconst tiles: { [id in CloudProvider]: JSX.Element } = {\n  aws: <AWSLogo />,\n  gcp: <GCPLogo />,\n  azure: <AzureLogo />,\n};\n","import { Flex, FlexItem, Form } from \"@patternfly/react-core\";\nimport type { FormEvent, VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport type { CloudProvider, MarketPlace } from \"../../types\";\nimport type {\n  FieldInstanceNameProps,\n  FieldSizeProps,\n  InstanceInfoProps,\n} from \"./components\";\nimport {\n  FieldAZ,\n  FieldBillingTiles,\n  FieldCloudProvider,\n  FieldCloudRegion,\n  FieldInstanceName,\n  FieldSize,\n  FormAlerts,\n  InstanceInfo,\n  InstanceInfoSkeleton,\n  ModalAlertsStandardPlan,\n} from \"./components\";\nimport { useStandardPlanMachine } from \"./machines\";\n\nexport type StandardInstanceFormProps = {\n  formId: string;\n  onClickContactUs: () => void;\n  onLearnHowToAddStreamingUnits: () => void;\n  onLearnMoreAboutSizes: () => void;\n  onClickQuickStart: () => void;\n  subscriptionOptionsHref: string;\n};\n\nexport const StandardInstanceForm: VoidFunctionComponent<\n  StandardInstanceFormProps\n> = ({\n  formId,\n  onClickContactUs,\n  onLearnHowToAddStreamingUnits,\n  onLearnMoreAboutSizes,\n  onClickQuickStart,\n  subscriptionOptionsHref,\n}) => {\n  const {\n    isBillingSelectionRequired,\n    isBillingSingleMarketplace,\n    capabilities,\n    selectedSize,\n    billingType,\n    error,\n    onCreate,\n  } = useStandardPlanMachine();\n\n  const onSubmit = useCallback(\n    (event: FormEvent<HTMLFormElement>) => {\n      event.preventDefault();\n      onCreate();\n    },\n    [onCreate]\n  );\n\n  const instanceInfoBilling: InstanceInfoProps[\"billing\"] = (() => {\n    if (!isBillingSelectionRequired) {\n      if (isBillingSingleMarketplace === false) {\n        return {\n          value: \"prepaid\",\n          subscriptionOptionsHref,\n          type: billingType,\n        };\n      } else {\n        return {\n          value: isBillingSingleMarketplace,\n          subscriptionOptionsHref,\n          type: billingType,\n        };\n      }\n    }\n    return undefined;\n  })();\n\n  return (\n    <>\n      <ModalAlertsStandardPlan\n        instanceAvailability={capabilities.instanceAvailability}\n        onClickContactUs={onClickContactUs}\n      />\n\n      <Flex\n        direction={{ default: \"column\", lg: \"row\" }}\n        alignItems={{ lg: \"alignItemsFlexStart\" }}\n      >\n        <FlexItem flex={{ default: \"flex_2\" }}>\n          <FormAlerts error={error} onClickContactUS={onClickContactUs} />\n          <Form onSubmit={onSubmit} id={formId}>\n            <ConnectedFieldInstanceName />\n            <ConnectedFieldCloudProvider />\n            <ConnectedFieldCloudRegion />\n            <ConnectedFieldAZ />\n            <ConnectedFieldSize\n              onLearnHowToAddStreamingUnits={onLearnHowToAddStreamingUnits}\n              onLearnMoreAboutSizes={onLearnMoreAboutSizes}\n            />\n            {isBillingSelectionRequired && (\n              <ConnectedBillingTiles\n                subscriptionOptionsHref={subscriptionOptionsHref}\n              />\n            )}\n          </Form>\n        </FlexItem>\n        <FlexItem\n          flex={{ default: \"flex_1\" }}\n          className=\"mas--CreateKafkaInstance__sidebar\"\n        >\n          {selectedSize === undefined ? (\n            <InstanceInfoSkeleton\n              isTrial={false}\n              onClickQuickStart={onClickQuickStart}\n            />\n          ) : (\n            <InstanceInfo\n              isTrial={false}\n              trialDurationInHours={undefined}\n              ingress={selectedSize.ingress}\n              egress={selectedSize.egress}\n              storage={selectedSize.storage}\n              maxPartitions={selectedSize.maxPartitions}\n              connections={selectedSize.connections}\n              connectionRate={selectedSize.connectionRate}\n              messageSize={selectedSize.messageSize}\n              onClickQuickStart={onClickQuickStart}\n              streamingUnits={selectedSize.displayName}\n              billing={instanceInfoBilling}\n            />\n          )}\n        </FlexItem>\n      </Flex>\n    </>\n  );\n};\n\nexport const ConnectedFieldInstanceName: VoidFunctionComponent = () => {\n  const {\n    form,\n    isNameTaken,\n    isNameInvalid,\n    isNameEmpty,\n    isNameError,\n    isFormEnabled,\n    setName,\n  } = useStandardPlanMachine();\n\n  const validity: FieldInstanceNameProps[\"validity\"] = (() => {\n    if (isNameTaken) {\n      return \"taken\";\n    } else if (isNameInvalid) {\n      return \"invalid\";\n    } else if (isNameEmpty && isNameError) {\n      return \"required\";\n    }\n    return \"valid\";\n  })();\n\n  return (\n    <FieldInstanceName\n      value={form.name || \"\"}\n      validity={validity}\n      isDisabled={!isFormEnabled}\n      onChange={setName}\n    />\n  );\n};\n\nexport const ConnectedFieldCloudProvider: VoidFunctionComponent = () => {\n  const {\n    form,\n    capabilities,\n    isProviderError,\n    isFormEnabled,\n    isBillingSingleMarketplace,\n    setProvider,\n  } = useStandardPlanMachine();\n\n  const providers =\n    isBillingSingleMarketplace &&\n    isBillingSingleMarketplace.marketplace !== \"rhm\"\n      ? capabilities.availableProviders.map((p) => ({\n          ...p,\n          isDisabled: p.id !== isBillingSingleMarketplace.marketplace,\n        }))\n      : capabilities.availableProviders;\n\n  return (\n    <FieldCloudProvider\n      isValid={!isProviderError}\n      providers={providers}\n      value={form.provider}\n      isDisabled={!isFormEnabled}\n      onChange={setProvider}\n    />\n  );\n};\n\nexport const ConnectedFieldCloudRegion: VoidFunctionComponent = () => {\n  const {\n    form,\n    selectedProvider,\n    selectedSize,\n    isRegionError,\n    isFormEnabled,\n    capabilities,\n    error,\n    setRegion,\n  } = useStandardPlanMachine();\n\n  return (\n    <FieldCloudRegion\n      validity={\n        isRegionError\n          ? \"required\"\n          : error === \"region-unavailable\" ||\n            capabilities.instanceAvailability === \"regions-unavailable\"\n          ? \"region-unavailable\"\n          : \"valid\"\n      }\n      regions={selectedProvider?.regions}\n      value={form.region}\n      isDisabled={!isFormEnabled}\n      isSizeUnavailable={selectedSize?.isDisabled || false}\n      onChange={setRegion}\n    />\n  );\n};\n\nexport const ConnectedFieldAZ: VoidFunctionComponent = () => {\n  const { isFormEnabled } = useStandardPlanMachine();\n\n  return (\n    <FieldAZ\n      validity={\"valid\"}\n      options={\"multi\"}\n      value={\"multi\"}\n      isDisabled={!isFormEnabled}\n      onChange={() => false} // AZ is defined by the backend, we just visualize the value here\n    />\n  );\n};\n\nexport const ConnectedFieldSize: VoidFunctionComponent<\n  Pick<\n    FieldSizeProps,\n    \"onLearnHowToAddStreamingUnits\" | \"onLearnMoreAboutSizes\"\n  >\n> = ({ onLearnHowToAddStreamingUnits, onLearnMoreAboutSizes }) => {\n  const {\n    form,\n    sizes,\n    isSizeOverQuota,\n    isSizeDisabled,\n    isSizeError,\n    isSizeLoadingError,\n    isBillingSelectionRequired,\n    isFormEnabled,\n    isLoadingSizes,\n    isLoading,\n    setSize,\n    remainingQuota,\n  } = useStandardPlanMachine();\n\n  return (\n    <FieldSize\n      value={form.size?.quota}\n      sizes={sizes}\n      remainingQuota={isBillingSelectionRequired ? undefined : remainingQuota}\n      isDisabled={!isFormEnabled || sizes === undefined}\n      isLoading={isLoading || isLoadingSizes}\n      isError={isSizeError}\n      isLoadingError={isSizeLoadingError}\n      validity={\n        isSizeOverQuota ? \"out-of-quota\" : isSizeDisabled ? \"required\" : \"valid\"\n      }\n      onChange={setSize}\n      onLearnHowToAddStreamingUnits={onLearnHowToAddStreamingUnits}\n      onLearnMoreAboutSizes={onLearnMoreAboutSizes}\n    />\n  );\n};\n\nfunction isMarketplaceDisabled(\n  marketplace: MarketPlace,\n  selectedProvider: CloudProvider | undefined\n) {\n  if (marketplace === \"rhm\") {\n    return false;\n  } else if (selectedProvider) {\n    return marketplace !== selectedProvider;\n  }\n  return false;\n}\n\nexport const ConnectedBillingTiles: VoidFunctionComponent<{\n  subscriptionOptionsHref: string;\n}> = ({ subscriptionOptionsHref }) => {\n  const {\n    form,\n    capabilities,\n    selectedBilling,\n    billingType,\n    isBillingPrepaidAvailable,\n    isSizeOverQuota,\n    isBillingError,\n    isBillingPrepaidOverQuota,\n    isBillingMarketplaceOverQuota,\n    setBillingPrepaid,\n    setBillingSubscription,\n  } = useStandardPlanMachine();\n\n  return (\n    <FieldBillingTiles\n      value={\n        selectedBilling === \"prepaid\"\n          ? \"prepaid\"\n          : selectedBilling?.subscription\n      }\n      hasPrepaid={isBillingPrepaidAvailable}\n      subscriptions={capabilities.marketplaceSubscriptions.flatMap((mq) =>\n        mq.subscriptions.map((subscription) => ({\n          marketplace: mq.marketplace,\n          subscription,\n          isDisabled: isMarketplaceDisabled(mq.marketplace, form.provider),\n        }))\n      )}\n      isPrepaidOverQuota={isBillingPrepaidOverQuota}\n      prepaidQuota={capabilities.remainingPrepaidQuota || 0} // we can default to 0 here just to make TS happy, we will have the info here\n      isMarketplaceOverQuota={isBillingMarketplaceOverQuota}\n      marketplaceQuota={capabilities.remainingMarketplaceQuota || 0} // we can default to 0 here just to make TS happy, we will have the info here\n      onPrepaid={setBillingPrepaid}\n      onSubscription={setBillingSubscription}\n      isValid={!isSizeOverQuota && !isBillingError}\n      billingType={billingType}\n      subscriptionOptionsHref={subscriptionOptionsHref}\n    />\n  );\n};\n","import { DropdownGroup } from \"@patternfly/react-core\";\nimport { ActionsColumn } from \"@patternfly/react-table\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\n\nexport type KafkaInstanceActionsProps = {\n  onDetails: () => void;\n  onConnection: () => void;\n  canOpenConnection: boolean;\n  canChangeOwner: boolean;\n  onChangeOwner: () => void;\n  canDelete: boolean;\n  onDelete: () => void;\n};\n\nexport const KafkaInstanceActions: VoidFunctionComponent<\n  KafkaInstanceActionsProps\n> = ({\n  onDetails,\n  onConnection,\n  canOpenConnection,\n  canChangeOwner,\n  onChangeOwner,\n  canDelete,\n  onDelete,\n}) => {\n  const { t } = useTranslation(\"kafka\");\n  return (\n    <ActionsColumn\n      items={[\n        {\n          customChild: (\n            <DropdownGroup\n              label={t(\"table.actions.view-instance-information\")}\n            />\n          ),\n        },\n        {\n          title: t(\"table.actions.details\"),\n          onClick: onDetails,\n        },\n        {\n          title: t(\"table.actions.connection\"),\n          ...(!canOpenConnection\n            ? {\n                isDisabled: true,\n                tooltipProps: {\n                  position: \"left\",\n                  content: t(\"kafka:no_permission_to_see_connections\"),\n                },\n                tooltip: true,\n                style: {\n                  pointerEvents: \"auto\",\n                  cursor: \"default\",\n                },\n              }\n            : {\n                onClick: onConnection,\n              }),\n        },\n        {\n          isSeparator: true,\n        },\n        {\n          title: t(\"table.actions.change-owner\"),\n          ...(!canChangeOwner\n            ? {\n                isDisabled: true,\n                tooltipProps: {\n                  position: \"left\",\n                  content: t(\"kafka:no_permission_to_change_owner\"),\n                },\n                tooltip: true,\n                style: {\n                  pointerEvents: \"auto\",\n                  cursor: \"default\",\n                },\n              }\n            : {\n                onClick: onChangeOwner,\n              }),\n        },\n        {\n          title: t(\"table.actions.delete\"),\n          ...(!canDelete\n            ? {\n                isDisabled: true,\n                tooltipProps: {\n                  position: \"left\",\n                  content: t(\"kafka:no_permission_to_delete_kafka\"),\n                },\n                tooltip: true,\n                style: {\n                  pointerEvents: \"auto\",\n                  cursor: \"default\",\n                },\n              }\n            : {\n                onClick: onDelete,\n              }),\n        },\n      ]}\n    />\n  );\n};\n","import {\n  Breadcrumb,\n  BreadcrumbItem,\n  Level,\n  LevelItem,\n  Nav,\n  NavItem,\n  NavList,\n  PageSection,\n  PageSectionVariants,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport type { KafkaInstanceActionsProps } from \"./KafkaInstanceActions\";\nimport { KafkaInstanceActions } from \"./KafkaInstanceActions\";\n\ntype Sections =\n  | \"dashboard\"\n  | \"topics\"\n  | \"consumer\"\n  | \"permissions\"\n  | \"settings\";\n\nexport type DataPlaneHeaderProps = {\n  instancesHref: string;\n  instanceName: string;\n  activeSection: Sections;\n  sectionsHref: { [key in Sections]: string };\n} & KafkaInstanceActionsProps;\n\nexport const DataPlaneHeader: VoidFunctionComponent<DataPlaneHeaderProps> = ({\n  instancesHref,\n  instanceName,\n  activeSection,\n  sectionsHref,\n  ...actionsProps\n}) => {\n  const { t } = useTranslation(\"kafka\");\n\n  return (\n    <>\n      <section className=\"pf-c-page__main-breadcrumb\">\n        <Breadcrumb ouiaId={\"breadcrumb\"}>\n          <BreadcrumbItem\n            render={() => (\n              <Link to={instancesHref}>{t(\"common:kafka_instance\")}</Link>\n            )}\n          />\n          <BreadcrumbItem isActive={true}>{instanceName}</BreadcrumbItem>\n        </Breadcrumb>\n      </section>\n      <PageSection variant={PageSectionVariants.light}>\n        <Level>\n          <LevelItem>\n            <TextContent>\n              <Text component=\"h1\">{instanceName}</Text>\n            </TextContent>\n          </LevelItem>\n          <LevelItem>\n            <KafkaInstanceActions {...actionsProps} />\n          </LevelItem>\n        </Level>\n      </PageSection>\n      <PageSection\n        variant={PageSectionVariants.light}\n        padding={{ default: \"noPadding\" }}\n        className=\"pf-c-page__main-tabs\"\n        hasShadowBottom={true}\n      >\n        <Nav\n          variant=\"tertiary\"\n          data-testid=\"pageKafka-tabProperties\"\n          className=\"pf-m-page-insets\"\n        >\n          <NavList>\n            <NavItem\n              style={{ borderTop: 0 }}\n              data-testid=\"pageKafka-tabDashboard\"\n              id=\"dashboard-tab-section\"\n              aria-label={t(\"dataPlaneNavigation.dashboard\")}\n              ouiaId={\"tab-Dashboard\"}\n              isActive={activeSection === \"dashboard\"}\n            >\n              <Link to={sectionsHref[\"dashboard\"]}>\n                {t(\"dataPlaneNavigation.dashboard\")}\n              </Link>\n            </NavItem>\n            <NavItem\n              style={{ borderTop: 0 }}\n              data-testid=\"pageKafka-tabTopics\"\n              id=\"topics-tab-section\"\n              aria-label={t(\"dataPlaneNavigation.topics\")}\n              ouiaId={\"tab-Topics\"}\n              isActive={activeSection === \"topics\"}\n            >\n              <Link to={sectionsHref[\"topics\"]}>\n                {t(\"dataPlaneNavigation.topics\")}\n              </Link>\n            </NavItem>\n            <NavItem\n              style={{ borderTop: 0 }}\n              data-testid=\"pageKafka-tabConsumers\"\n              id=\"consumer-groups-tab-section\"\n              aria-label={t(\"dataPlaneNavigation.consumer_groups\")}\n              ouiaId={\"tab-Consumers\"}\n              isActive={activeSection === \"consumer\"}\n            >\n              <Link to={sectionsHref[\"consumer\"]}>\n                {t(\"dataPlaneNavigation.consumer_groups\")}\n              </Link>\n            </NavItem>\n            <NavItem\n              style={{ borderTop: 0 }}\n              data-testid=\"pageKafka-tabPermissions\"\n              id=\"permissions-tab-section\"\n              aria-label={t(\"dataPlaneNavigation.permissions\")}\n              ouiaId={\"tab-Permissions\"}\n              isActive={activeSection === \"permissions\"}\n            >\n              <Link to={sectionsHref[\"permissions\"]}>\n                {t(\"dataPlaneNavigation.permissions\")}\n              </Link>\n            </NavItem>\n            <NavItem\n              style={{ borderTop: 0 }}\n              data-testid=\"pageKafka-tabSettings\"\n              id=\"settings-tab-section\"\n              aria-label={t(\"dataPlaneNavigation.settings\")}\n              ouiaId={\"tab-Settings\"}\n              isActive={activeSection === \"settings\"}\n            >\n              <Link to={sectionsHref[\"settings\"]}>\n                {t(\"dataPlaneNavigation.settings\")}\n              </Link>\n            </NavItem>\n          </NavList>\n        </Nav>\n      </PageSection>\n    </>\n  );\n};\n","import type { DeleteModalProps } from \"@rhoas/app-services-ui-components\";\nimport {\n  DeleteModal,\n  Trans,\n  useTranslation,\n} from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\n\nexport type DeleteKafkaInstanceProps = {\n  instanceName: string | undefined;\n} & Omit<\n  DeleteModalProps,\n  \"title\" | \"variant\" | \"confirmationValue\" | \"children\"\n>;\n\nexport const DeleteKafkaInstance: VoidFunctionComponent<\n  DeleteKafkaInstanceProps\n> = ({ instanceName, ...props }) => {\n  const { t } = useTranslation(\"kafka\");\n\n  return (\n    <DeleteModal\n      {...props}\n      variant={\"destructive\"}\n      title={t(\"delete_instance_title\")}\n      confirmationValue={instanceName}\n    >\n      <Trans\n        ns={\"kafka\"}\n        i18nKey={\"delete_instance_message\"}\n        components={[<strong />]}\n        values={{\n          instanceName,\n        }}\n      />\n    </DeleteModal>\n  );\n};\n","import type { I18nProviderProps } from \"@rhoas/app-services-ui-components\";\nimport { I18nProvider as UiComponentsI18nProvider } from \"@rhoas/app-services-ui-components\";\nimport type { FunctionComponent } from \"react\";\n\nexport const I18nProvider: FunctionComponent<\n  Omit<I18nProviderProps, \"resources\">\n> = ({ lng, debug, children }) => {\n  return (\n    <UiComponentsI18nProvider\n      lng={lng}\n      resources={{\n        en: {\n          common: () =>\n            import(\"@rhoas/app-services-ui-components/locales/en/common.json\"),\n          \"create-kafka-instance\": () =>\n            import(\"locales/en/create-kafka-instance.json\"),\n          kafka: () => import(\"locales/en/kafka.json\"),\n          \"kafkaoverview-v3\": () => import(\"locales/en/kafkaoverview-v3.json\"),\n          metrics: () => import(\"locales/en/metrics.json\"),\n          topic: () => import(\"locales/en/topic.json\"),\n          \"manage-kafka-permissions\": () =>\n            import(\"locales/en/manage-kafka-permissions.json\"),\n          \"create-topic\": () => import(\"locales/en/create-topic.json\"),\n          \"message-browser\": () => import(\"locales/en/message-browser.json\"),\n          \"connection-tab\": () => import(\"locales/en/connection-tab.json\"),\n          \"connection-tab-p1\": () =>\n            import(\"locales/en/connection-tab-p1.json\"),\n        },\n        it: {\n          common: () => Promise.resolve({ delete: \"Elimina\" }),\n        },\n      }}\n      debug={debug}\n    >\n      {children}\n    </UiComponentsI18nProvider>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport type {\n  CloudProvider,\n  KafkaInstanceField,\n  SimplifiedStatus,\n  Status,\n} from \"../types\";\n\nexport function useKafkaLabels() {\n  const { t } = useTranslation(\"kafka\");\n\n  const statuses: { [status in Status]: string } = {\n    ready: t(\"statuses.ready\"),\n    degraded: t(\"statuses.degraded\"),\n    accepted: t(\"statuses.accepted\"),\n    provisioning: t(\"statuses.provisioning\"),\n    preparing: t(\"statuses.preparing\"),\n    deprovision: t(\"statuses.deprovision\"),\n    deleting: t(\"statuses.deleting\"),\n    suspended: t(\"statuses.suspended\"),\n    suspending: t(\"statuses.suspending\"),\n    resuming: t(\"statuses.resuming\"),\n  };\n  const statusesSimplified: { [status in SimplifiedStatus]: string } = {\n    creating: t(\"statusesSimplified.creating\"),\n    ready: t(\"statusesSimplified.ready\"),\n    degraded: t(\"statusesSimplified.degraded\"),\n    deleting: t(\"statusesSimplified.deleting\"),\n    suspended: t(\"statusesSimplified.suspended\"),\n    suspending: t(\"statusesSimplified.suspending\"),\n    resuming: t(\"statusesSimplified.resuming\"),\n  };\n  const providers: { [provider in CloudProvider]: string } = {\n    aws: t(\"common:cloudProviders.aws\"),\n    gcp: t(\"common:cloudProviders.gcp\"),\n    azure: t(\"common:cloudProviders.azure\"),\n  };\n  const providerRegions: { [provider in CloudProvider]: { [region: string]: string }} = {\n    aws: {},\n    gcp: {},\n    azure: {},\n  }\n  const fields: {\n    [field in KafkaInstanceField]: string;\n  } = {\n    id: t(\"fields.id\"),\n    name: t(\"fields.name\"),\n    createdAt: t(\"fields.createdAt\"),\n    updatedAt: t(\"fields.updatedAt\"),\n    expiryDate: t(\"fields.expiryDate\"),\n    owner: t(\"fields.owner\"),\n    provider: t(\"fields.provider\"),\n    region: t(\"fields.region\"),\n    status: t(\"fields.status\"),\n    plan: t(\"fields.plan\"),\n    size: t(\"fields.size\"),\n    ingress: t(\"fields.ingress\"),\n    egress: t(\"fields.egress\"),\n    storage: t(\"fields.storage\"),\n    maxPartitions: t(\"fields.maxPartitions\"),\n    connections: t(\"fields.connections\"),\n    connectionRate: t(\"fields.connectionRate\"),\n    messageSize: t(\"fields.messageSize\"),\n    billing: t(\"fields.billing\"),\n    adminUrl: t(\"fields.adminUrl\"),\n    bootstrapUrl: t(\"fields.bootstrapUrl\"),\n    version: t(\"fields.version\"),\n  };\n  return {\n    fields,\n    statuses,\n    statusesSimplified,\n    providers,\n    providerRegions\n  };\n}\n","/**\n * A date in the ISO format YYYY-MM-DDTHH:mm:ss.sssZ\n */\nexport type DateIsoString = string;\n\n/**\n * Supported Cloud Providers. Extend this to add a new provider, then follow\n * Typescript errors to find where extra information need to be added (images,\n * translations).\n */\nexport type CloudProvider = \"aws\" | \"gcp\" | \"azure\";\n\n/**\n * A Cloud Region. Since this varies between Cloud Providers and has no extra\n * visual attached, we take its name from the API and do no further\n * transformation.\n */\nexport type CloudRegion = string;\n/**\n * Cloud provider multi availability zone\n */\nexport type AZ = \"single\" | \"multi\";\n/**\n * A number that describes how much does an instance cost to create\n */\nexport type Quota = number;\n/**\n * The capabilities of an instance, and its quota cost. Some sizes might not be\n * enabled, eg. because temporarily out of capacity\n */\nexport type Size = {\n  id: string;\n  displayName: string;\n  status: \"stable\" | \"preview\";\n  quota: Quota;\n  ingress: number;\n  egress: number;\n  storage: number;\n  connections: number;\n  connectionRate: number;\n  maxPartitions: number;\n  messageSize: number;\n  isDisabled: boolean;\n};\n/**\n * Paid for instances are `standard`, evaluation instances are `developer`.\n * `standard` instances have a `Quota` associated, and bigger sizes.\n * `developer` instances are free to be created (up to 1 per user), have a\n * single, smaller size option than `standard` ones, and they expire after a\n * few hours.\n *\n * Note: a new kind of evaluation instance is being studied. They will have a\n * long expiration period and bigger sizes.\n */\nexport type Plan = \"standard\" | \"developer\";\n/**\n * All the statuses an instance can be. If new statuses are added, ensure to\n * add them to the relevant status group (`ReadyStatuses` etc.).\n */\nexport const Statuses = [\n  \"ready\",\n  \"degraded\",\n  \"accepted\",\n  \"provisioning\",\n  \"preparing\",\n  \"deprovision\",\n  \"deleting\",\n  \"suspended\",\n  \"suspending\",\n  \"resuming\",\n] as const;\n\nexport type Status = typeof Statuses[number];\n\nexport const CreatingStatuses: readonly Status[] = [\n  \"accepted\",\n  \"provisioning\",\n  \"preparing\",\n];\nexport const ReadyStatuses: readonly Status[] = [\"ready\"];\nexport const DegradedStatuses: readonly Status[] = [\"degraded\"];\nexport const SuspendingStatuses: readonly Status[] = [\"suspending\"];\nexport const SuspendedStatuses: readonly Status[] = [\"suspended\"];\nexport const DeletingStatuses: readonly Status[] = [\"deleting\", \"deprovision\"];\nexport const ResumingStatuses: readonly Status[] = [\"resuming\"];\n\nexport const SimplifiedStatuses = {\n  creating: CreatingStatuses,\n  ready: ReadyStatuses,\n  degraded: DegradedStatuses,\n  suspended: SuspendedStatuses,\n  deleting: DeletingStatuses,\n  resuming: ResumingStatuses,\n  suspending: SuspendingStatuses,\n} as const;\nexport type SimplifiedStatus = keyof typeof SimplifiedStatuses;\n\n/**\n * A list of marketplaces where an instance can be billed to\n */\nexport type MarketPlace = CloudProvider | \"rhm\";\n/**\n * List of marketplaces where a user has some subscription\n */\nexport type MarketPlaceSubscriptions = {\n  marketplace: MarketPlace;\n  subscriptions: string[];\n};\n/**\n * A specific marketplace's subscription, assigned as billing option to an\n * instance.\n *\n * Note: the API will provide only the `subscription`; the `MarketPlace` will\n * have to be fetched querying for the `subscription`.\n */\nexport type MarketplaceSubscription = {\n  marketplace: MarketPlace;\n  subscription: string;\n};\n\n/**\n * All the details abut a Kafka instance.\n *\n * Unless differently specified, the values marked as accepting `undefined`\n * will come from extra API calls.\n */\nexport type KafkaInstance = {\n  id: string;\n  name: string;\n  createdAt: DateIsoString;\n  updatedAt: DateIsoString;\n  expiryDate: DateIsoString | undefined;\n  owner: string;\n  provider: CloudProvider;\n  region: CloudRegion;\n  status: Status;\n  plan: Plan;\n  size: string | undefined;\n  ingress: number | undefined;\n  egress: number | undefined;\n  storage: number | undefined;\n  maxPartitions: number | undefined;\n  connections: number | undefined;\n  connectionRate: number | undefined;\n  messageSize: number | undefined;\n  billing: \"prepaid\" | MarketplaceSubscription | undefined;\n\n  version: string;\n\n  bootstrapUrl: string | undefined;\n  adminUrl: string | undefined;\n};\nexport type KafkaInstanceField = keyof KafkaInstance;\n\nexport enum RetentionTimeUnits {\n  MILLISECOND = \"milliseconds\",\n  SECOND = \"seconds\",\n  MINUTE = \"minutes\",\n  HOUR = \"hours\",\n  DAY = \"days\",\n  WEEK = \"weeks\",\n  CUSTOM = \"custom\",\n  UNLIMITED = \"unlimited\",\n}\n\nexport enum RetentionSizeUnits {\n  BYTE = \"bytes\",\n  KIBIBYTE = \"kibibytes\",\n  MEBIBYTE = \"mebibytes\",\n  GIBIBYTE = \"gibibytes\",\n  TEBIBYTE = \"tebibytes\",\n  CUSTOM = \"custom\",\n  UNLIMITED = \"unlimited\",\n}\n\nexport type KafkaTopic = {\n  topic_name: string;\n  partitions: number;\n  retention_time: string;\n  retention_size: string;\n};\n\nexport type KafkaTopicField = keyof KafkaTopic;\n\nexport type {ConsumerGroup} from \"./components/ConsumerGroups/types\"","import { Alert } from \"@patternfly/react-core\";\nimport { differenceInHours } from \"date-fns\";\nimport type { FunctionComponent } from \"react\";\nimport { Trans } from \"@rhoas/app-services-ui-components\";\nimport { FormatDate } from \"@rhoas/app-services-ui-components\";\n\ntype DetailsTabAlertProps = {\n  expiryDate: Date;\n};\n\nexport const DetailsTabAlert: FunctionComponent<DetailsTabAlertProps> = ({\n  expiryDate,\n}) => {\n  const hoursLeft = expiryDate ? differenceInHours(expiryDate, Date.now()) : 0;\n  return (\n    <Alert\n      variant={\n        hoursLeft > 24\n          ? \"info\"\n          : hoursLeft < 24 && hoursLeft > 5\n          ? \"warning\"\n          : \"danger\"\n      }\n      title={\n        <Trans\n          i18nKey=\"kafka:will_expire\"\n          components={{\n            time: <FormatDate date={expiryDate} format=\"expiration\" />,\n          }}\n        />\n      }\n      aria-live=\"polite\"\n      isInline\n      className=\"pf-u-mb-lg\"\n    />\n  );\n};\n","import {\n  Skeleton,\n  TextContent,\n  TextList,\n  TextListItem,\n  TextListItemVariants,\n  TextListVariants,\n} from \"@patternfly/react-core\";\nimport { FormatDate, useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { ReactChild, VoidFunctionComponent } from \"react\";\nimport type { MarketplaceSubscription, Plan } from \"../../../types\";\nimport { DetailsTabAlert } from \"./DetailsTabAlert\";\n\n/**\n * All fields marked as accepting undefined will show a skeleton loader until the value is available.\n * This is to support fetching the data from different APIs.\n */\nexport type KafkaDetailsTabProps = {\n  id: string;\n  createdAt: Date;\n  updatedAt: Date;\n  expiryDate: Date | undefined;\n  owner: string;\n  region: string;\n  instanceType: Plan;\n  size: string | undefined;\n  ingress: number | undefined;\n  egress: number | undefined;\n  storage: number | undefined;\n  maxPartitions: number | undefined;\n  connections: number | undefined;\n  connectionRate: number | undefined;\n  messageSize: number | undefined;\n  billing: \"prepaid\" | MarketplaceSubscription | undefined;\n  kafkaVersion: string;\n};\n\nexport const KafkaDetailsTab: VoidFunctionComponent<KafkaDetailsTabProps> = ({\n  id,\n  createdAt,\n  updatedAt,\n  owner,\n  region,\n  expiryDate,\n  instanceType,\n  size,\n  ingress,\n  egress,\n  storage,\n  maxPartitions,\n  connections,\n  connectionRate,\n  messageSize,\n  billing,\n  kafkaVersion,\n}) => {\n  const { t } = useTranslation(\"kafka\");\n\n  const renderTextListItem = (title: string, value: ReactChild | undefined) => (\n    <>\n      <TextListItem component={TextListItemVariants.dt}>{title}</TextListItem>\n      {value ? (\n        <TextListItem component={TextListItemVariants.dd}>{value}</TextListItem>\n      ) : (\n        <Skeleton\n          width=\"50%\"\n          screenreaderText={t(\"common:skeleton_loader_screenreader_text\", {\n            contentName: title,\n          })}\n        />\n      )}\n    </>\n  );\n  return (\n    <div className=\"mas--details__drawer--tab-content\">\n      {instanceType !== \"standard\" && expiryDate && (\n        <DetailsTabAlert expiryDate={expiryDate} />\n      )}\n      <TextContent>\n        <TextList component={TextListVariants.dl}>\n          {instanceType === \"standard\" &&\n            renderTextListItem(\n              t(\"common:size\"),\n              size\n                ? t(\"create-kafka-instance:streaming_size_value\", {\n                    value: size,\n                  })\n                : undefined\n            )}\n          {renderTextListItem(\n            t(\"ingress\"),\n            ingress\n              ? t(\"create-kafka-instance:ingress_value\", {\n                  value: ingress,\n                })\n              : undefined\n          )}\n          {renderTextListItem(\n            t(\"egress\"),\n            egress\n              ? t(\"create-kafka-instance:egress_value\", {\n                  value: egress,\n                })\n              : undefined\n          )}\n          {renderTextListItem(\n            t(\"storage\"),\n            storage\n              ? t(\"create-kafka-instance:storage_value\", {\n                  value: storage,\n                })\n              : undefined\n          )}\n          {renderTextListItem(\n            t(\"partitions\"),\n            maxPartitions\n              ? t(\"create-kafka-instance:partitions_value\", {\n                  value: maxPartitions,\n                })\n              : undefined\n          )}\n          {renderTextListItem(\n            t(\"client_connections\"),\n            connections\n              ? t(\"create-kafka-instance:client_connections_value\", {\n                  value: connections,\n                })\n              : undefined\n          )}\n          {renderTextListItem(\n            t(\"connection_rate\"),\n            connectionRate\n              ? t(\"create-kafka-instance:connection_rate_value\", {\n                  value: connectionRate,\n                })\n              : undefined\n          )}\n          {renderTextListItem(\n            t(\"message_size\"),\n            messageSize\n              ? t(\"create-kafka-instance:message_size_value\", {\n                  value: messageSize,\n                })\n              : undefined\n          )}\n\n          {renderTextListItem(t(\"common:id\"), id)}\n          {renderTextListItem(t(\"common:kafka_version\"), kafkaVersion)}\n          {renderTextListItem(t(\"common:owner\"), owner)}\n          {renderTextListItem(\n            t(\"common:time_created\"),\n            <FormatDate date={createdAt} format={\"long\"} />\n          )}\n          {renderTextListItem(\n            t(\"common:time_updated\"),\n            <FormatDate date={updatedAt} format={\"long\"} />\n          )}\n          {renderTextListItem(\n            t(\"common:cloud_provider\"),\n            t(\"common:cloudProviders.aws\")\n          )}\n          {renderTextListItem(t(\"common:region\"), region)}\n          {renderTextListItem(\n            t(\"create-kafka-instance:billing.field_label\"),\n            (() => {\n              if (billing === undefined) {\n                return undefined;\n              } else if (billing === \"prepaid\") {\n                return t(\"create-kafka-instance:billing.prepaid_option\");\n              } else {\n                switch (billing.marketplace) {\n                  case \"aws\":\n                    return (\n                      <>\n                        {t(\"create-kafka-instance:billing.marketplace_aws\")}\n                        <br />\n                        {billing.subscription}\n                      </>\n                    );\n                  case \"azure\":\n                    return (\n                      <>\n                        {t(\"create-kafka-instance:billing.marketplace_azure\")}\n                        <br />\n                        {billing.subscription}\n                      </>\n                    );\n                  case \"gcp\":\n                    return (\n                      <>\n                        {t(\"create-kafka-instance:billing.marketplace_gcp\")}\n                        <br />\n                        {billing.subscription}\n                      </>\n                    );\n                  case \"rhm\":\n                    return (\n                      <>\n                        {t(\"create-kafka-instance:billing.marketplace_rh\")}\n                        <br />\n                        {billing.subscription}\n                      </>\n                    );\n                }\n              }\n            })()\n          )}\n        </TextList>\n      </TextContent>\n    </div>\n  );\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from \"@patternfly/react-core\";\nimport { ExclamationTriangleIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const SuspendedConnection: VoidFunctionComponent = () => {\n  const { t } = useTranslation(\"kafka\");\n  return (\n    <EmptyState variant={EmptyStateVariant.small}>\n      <EmptyStateIcon icon={ExclamationTriangleIcon} color={\"#f0ab00\"} />\n      <Title headingLevel={\"h1\"} size={TitleSizes.lg}>\n        {t(\"suspend_empty_state_title\")}\n      </Title>\n      <EmptyStateBody>{t(\"suspend_empty_state_body\")}</EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import {\n  Button,\n  ButtonVariant,\n  ClipboardCopy,\n  ExpandableSection,\n  Label,\n  Popover,\n  Skeleton,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { HelpIcon } from \"@patternfly/react-icons\";\nimport {\n  ExternalLink,\n  Trans,\n  useTranslation,\n} from \"@rhoas/app-services-ui-components\";\nimport type { FunctionComponent } from \"react\";\nimport { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { SuspendedConnection } from \"./SuspendedConnection\";\n\nexport type KafkaConnectionTabP2Props = {\n  isKafkaSuspended?: boolean;\n  isKafkaPending?: boolean;\n  externalServer?: string;\n  tokenEndPointUrl: string;\n  linkToServiceAccount: string;\n  linkToAccessTab: string;\n  adminAPIUrl: string | undefined;\n  showCreateServiceAccountModal: () => void;\n  kafkaFleetManagerUrl: string;\n};\n\nexport const KafkaConnectionTabP2: FunctionComponent<\n  KafkaConnectionTabP2Props\n> = ({\n  isKafkaSuspended,\n  isKafkaPending,\n  externalServer,\n  tokenEndPointUrl,\n  linkToServiceAccount,\n  linkToAccessTab,\n  adminAPIUrl,\n  kafkaFleetManagerUrl,\n  showCreateServiceAccountModal,\n}) => {\n  const { t } = useTranslation();\n\n  const [isExpanded, setIsExpanded] = useState<boolean>(false);\n\n  const onChangeExpandedSection = () => {\n    setIsExpanded(!isExpanded);\n  };\n\n  return isKafkaSuspended ? (\n    <SuspendedConnection />\n  ) : (\n    <div className=\"mas--details__drawer--tab-content\">\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.small}>\n          {t(\"connection-tab:drawer_resource_tab_body_description_1\")}\n        </Text>\n        <Text component={TextVariants.h3} className=\"pf-u-mt-xl\">\n          {t(\"connection-tab:bootstrap_server\")}\n        </Text>\n        <Text component={TextVariants.small}>\n          {t(\"connection-tab:bootstrap_server_description\")}\n        </Text>\n        {isKafkaPending ? (\n          <Skeleton fontSize=\"2xl\" />\n        ) : (\n          <ClipboardCopy\n            data-testid=\"drawerStreams-copyBootstrapURL\"\n            textAriaLabel={t(\"connection-tab:bootstrap_server\")}\n            isReadOnly\n          >\n            {externalServer}\n          </ClipboardCopy>\n        )}\n      </TextContent>\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.h3} className=\"pf-u-mt-xl\">\n          {t(\"connection-tab:service_accounts_small\")}\n        </Text>\n        <Text component={TextVariants.small}>\n          {\n            <Trans\n              i18nKey={\n                \"connection-tab:create_service_account_to_generate_credentials\"\n              }\n              components={{\n                value: (\n                  <Link\n                    to={linkToServiceAccount}\n                    data-testid=\"tableStreams-linkKafka\"\n                  ></Link>\n                ),\n              }}\n            />\n          }\n        </Text>\n      </TextContent>\n      <Button\n        variant={ButtonVariant.secondary}\n        isInline\n        onClick={showCreateServiceAccountModal}\n        data-testid=\"drawerStreams-buttonCreateServiceAccount\"\n      >\n        {t(\"connection-tab:create_service_account\")}\n      </Button>\n      <TextContent className=\"pf-u-pt-sm\">\n        <Text component={TextVariants.small}>\n          {\n            <Trans\n              i18nKey={\"connection-tab:current_instance\"}\n              components={{\n                value: <Link to={linkToAccessTab}></Link>,\n              }}\n            />\n          }\n        </Text>\n      </TextContent>\n      <TextContent className=\"pf-u-pb-sm\">\n        <ExpandableSection\n          toggleContent={\n            <div className=\"pf-c-content\">\n              <Text component={TextVariants.h3} className={\"pf-c-content\"}>\n                {t(\"connection-tab:rest_api_header\")}\n              </Text>\n            </div>\n          }\n          isExpanded={isExpanded}\n          onToggle={onChangeExpandedSection}\n          className=\"pf-u-mt-lg\"\n        >\n          <TextContent className=\"pf-u-pb-sm\">\n            <Text component={TextVariants.small}>\n              {t(\"connection-tab:rest_api_description\")}\n            </Text>\n          </TextContent>\n          <TextContent>\n            <strong>\n              {t(\"connection-tab:kafka_instance_url_label\")}\n              <Popover\n                headerContent={\n                  <div>\n                    {t(\"connection-tab:kafka_instance_url_popover_label\")}\n                  </div>\n                }\n                bodyContent={\n                  <TextContent>\n                    <p>{t(\"connection-tab:kafka_instance_url_popover_body\")}</p>\n                    <p>\n                      <Trans\n                        ns={\"connection-tab\"}\n                        i18nKey={\"popover_helper_text\"}\n                        components={[\n                          <Button\n                            isInline\n                            variant={ButtonVariant.link}\n                            component=\"a\"\n                            href=\"https://console.redhat.com/docs/api/kafkainstance?github-owner=redhat-developer&github-repo=app-services-sdk-core&github-content=kafka-admin-rest.yaml%3Fref%3Ddoc-portal&readonly=true\"\n                          />,\n                          <ExternalLink\n                            testId={\"customerPortal-link\"}\n                            href=\"https://access.redhat.com/documentation/en-us/red_hat_openshift_application_services/1/guide/2409253a-45ee-470e-bdc9-5db4bfcf9d0f\"\n                            className={\"pf-u-ml-xs\"}\n                          />,\n                        ]}\n                      />\n                    </p>\n                  </TextContent>\n                }\n              >\n                <Button\n                  variant={ButtonVariant.plain}\n                  aria-label={t(\n                    \"connection-tab:kafka_instance_url_button_aria_label\"\n                  )}\n                >\n                  <HelpIcon />\n                </Button>\n              </Popover>\n            </strong>\n            {adminAPIUrl ? (\n              <ClipboardCopy\n                textAriaLabel={t(\"connection-tab:kafka_instance_url_label\")}\n                isReadOnly\n              >\n                {adminAPIUrl}\n              </ClipboardCopy>\n            ) : (\n              <Skeleton fontSize=\"2xl\" />\n            )}\n            <TextContent className=\"pf-u-pt-sm\">\n              <Text component={TextVariants.small}>\n                {t(\"connection-tab:kafka_instance_url_description\")}\n              </Text>\n            </TextContent>\n          </TextContent>\n          <TextContent className=\"pf-u-mt-md\">\n            <strong>\n              {t(\"connection-tab:kafka_management_url\")}\n              <Popover\n                headerContent={\n                  <div>\n                    {t(\"connection-tab:kafka_management_popover_header\")}\n                  </div>\n                }\n                bodyContent={\n                  <TextContent>\n                    <p>{t(\"connection-tab:kafka_management_popover_body\")}</p>\n                    <p>\n                      <Trans\n                        ns={\"connection-tab\"}\n                        i18nKey={\"popover_helper_text\"}\n                        components={[\n                          <Button\n                            isInline\n                            variant={ButtonVariant.link}\n                            component=\"a\"\n                            href=\"https://console.redhat.com/docs/api/kafkamgmt?github-owner=redhat-developer&github-repo=app-services-sdk-core&github-content=kas-fleet-manager.yaml%3Fref%3Ddoc-portal\"\n                          />,\n                          <ExternalLink\n                            testId={\"customerPortal-link\"}\n                            href=\"https://access.redhat.com/documentation/en-us/red_hat_openshift_application_services/1/guide/2409253a-45ee-470e-bdc9-5db4bfcf9d0f\"\n                            className={\"pf-u-ml-xs\"}\n                          />,\n                        ]}\n                      />\n                    </p>\n                  </TextContent>\n                }\n              >\n                <Button\n                  variant={ButtonVariant.plain}\n                  aria-label={t(\n                    \"connection-tab:kafka_management_button_aria_label\"\n                  )}\n                >\n                  <HelpIcon />\n                </Button>\n              </Popover>\n            </strong>\n            {isKafkaPending ? (\n              <Skeleton fontSize=\"2xl\" />\n            ) : (\n              <ClipboardCopy\n                textAriaLabel={t(\"connection-tab:kafka_management_url\")}\n                isReadOnly\n              >\n                {kafkaFleetManagerUrl}\n              </ClipboardCopy>\n            )}\n            <TextContent className=\"pf-u-pt-sm\">\n              <Text component={TextVariants.small}>\n                {t(\"connection-tab:kafka_management_description\")}\n              </Text>\n            </TextContent>\n          </TextContent>\n        </ExpandableSection>\n      </TextContent>\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.h3} className=\"pf-u-mt-xl\">\n          {t(\"connection-tab:authentication_method\")}\n        </Text>\n        <Text component={TextVariants.h4} className=\"pf-u-mt-md\">\n          {t(\"connection-tab:sasl_oauthbearer\")}{\" \"}\n          <Label color=\"green\">{t(\"connection-tab:recommended\")}</Label>\n          <Popover\n            aria-label={t(\"connection-tab:sasl_oauthbearer\")}\n            bodyContent={\n              <div>{t(\"connection-tab:sasl_oauthbearer_popover_content\")}</div>\n            }\n          >\n            <Button\n              variant={ButtonVariant.plain}\n              aria-label={t(\"connection-tab:more_info_about_sasl_oauthbearer\")}\n            >\n              <HelpIcon />\n            </Button>\n          </Popover>\n        </Text>\n        <Text component={TextVariants.small}>\n          {t(\"connection-tab:sasl_oauthbearer_description\")}\n        </Text>\n        <strong>{t(\"connection-tab:token_endpoint_url\")}</strong>\n        {isKafkaPending ? (\n          <Skeleton fontSize=\"2xl\" />\n        ) : (\n          <ClipboardCopy\n            textAriaLabel={t(\"connection-tab:token_endpoint_url\")}\n            isReadOnly\n          >\n            {tokenEndPointUrl}\n          </ClipboardCopy>\n        )}\n      </TextContent>\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.h4} className=\"pf-u-mt-md\">\n          {t(\"connection-tab:sasl_plain\")}\n        </Text>\n        <Text component={TextVariants.small}>\n          {t(\"connection-tab:sasl_plain_description\")}\n        </Text>\n      </TextContent>\n    </div>\n  );\n};\n","import type { TabsProps } from \"@patternfly/react-core\";\nimport {\n  Drawer,\n  DrawerActions,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerContentBody,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerPanelContent,\n  Tab,\n  Tabs,\n  TabTitleText,\n  Text,\n  TextContent,\n  TextVariants,\n  Title,\n  TitleSizes,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { parseISO } from \"date-fns\";\nimport type { FunctionComponent, VoidFunctionComponent } from \"react\";\nimport { useCallback, useMemo } from \"react\";\nimport { useKafkaLabels } from \"../../hooks\";\nimport type { KafkaInstance } from \"../../types\";\nimport { CreatingStatuses } from \"../../types\";\nimport { KafkaConnectionTabP2, KafkaDetailsTab } from \"./components\";\n\nexport type KafkaInstanceDrawerProps = {\n  instance?: KafkaInstance;\n  isExpanded: boolean;\n  activeTab: KafkaInstanceDrawerTab;\n  onTabChange: (tab: KafkaInstanceDrawerTab) => void;\n\n  onClose: () => void;\n};\n\nexport const KafkaInstanceDrawer: FunctionComponent<\n  KafkaInstanceDrawerProps\n> = ({ instance, activeTab, isExpanded, onTabChange, onClose, children }) => {\n  const content = useMemo(() => {\n    return (\n      <DrawerPanelContent>\n        {instance ? (\n          <KafkaInstanceDrawerPanel\n            instance={instance}\n            activeTab={activeTab}\n            onTabChange={onTabChange}\n            onClose={onClose}\n          />\n        ) : null}\n      </DrawerPanelContent>\n    );\n  }, [activeTab, instance, onClose, onTabChange]);\n  return (\n    <Drawer isExpanded={isExpanded} isInline={true}>\n      <DrawerContent panelContent={content}>\n        <DrawerContentBody\n          className={\"pf-u-display-flex pf-u-flex-direction-column\"}\n        >\n          {children}\n        </DrawerContentBody>\n      </DrawerContent>\n    </Drawer>\n  );\n};\n\nexport type KafkaInstanceDrawerTab = \"details\" | \"connections\";\n\nexport const KafkaInstanceDrawerPanel: VoidFunctionComponent<\n  Required<Omit<KafkaInstanceDrawerProps, \"isExpanded\">> & {\n    activeTab: KafkaInstanceDrawerTab;\n  }\n> = ({ instance, activeTab, onTabChange, onClose }) => {\n  const { t } = useTranslation([\"kafka\"]);\n  const labels = useKafkaLabels();\n\n  const handleSelect: TabsProps[\"onSelect\"] = useCallback(\n    (_, tab) => {\n      const t = tab as KafkaInstanceDrawerTab;\n      onTabChange(t);\n    },\n    [onTabChange]\n  );\n\n  const isKafkaPending = CreatingStatuses.includes(instance.status);\n\n  return (\n    <>\n      <DrawerHead>\n        <TextContent>\n          <Text component={TextVariants.small} className={\"pf-u-mb-0\"}>\n            {t(\"common:name\")}\n          </Text>\n          <Title\n            headingLevel={\"h1\"}\n            size={TitleSizes[\"xl\"]}\n            className={\"pf-u-mt-0\"}\n          >\n            {instance.name}\n          </Title>\n        </TextContent>\n        <DrawerActions>\n          <DrawerCloseButton onClick={onClose} />\n        </DrawerActions>\n      </DrawerHead>\n      <DrawerPanelBody>\n        <Tabs activeKey={activeTab} onSelect={handleSelect}>\n          <Tab\n            eventKey={\"details\"}\n            title={<TabTitleText>{t(\"drawer-tabs.details\")}</TabTitleText>}\n          >\n            <div className={\"pf-u-pt-md pf-u-pb-md\"}>\n              <KafkaDetailsTab\n                id={instance.id}\n                owner={instance.owner}\n                createdAt={parseISO(instance.createdAt)}\n                updatedAt={parseISO(instance.updatedAt)}\n                expiryDate={\n                  instance.expiryDate\n                    ? parseISO(instance.expiryDate)\n                    : undefined\n                }\n                size={instance.size}\n                ingress={instance.ingress}\n                egress={instance.egress}\n                storage={instance.storage}\n                maxPartitions={instance.maxPartitions}\n                connections={instance.connections}\n                connectionRate={instance.connectionRate}\n                messageSize={instance.messageSize}\n                region={\n                  labels.providerRegions[instance.provider][instance.region] ||\n                  instance.region\n                }\n                instanceType={instance.plan}\n                billing={instance.billing}\n                kafkaVersion={instance.version}\n              />\n            </div>\n          </Tab>\n          <Tab\n            eventKey={\"connections\"}\n            title={<TabTitleText>{t(\"drawer-tabs.connections\")}</TabTitleText>}\n            data-testid=\"drawerStreams-tabConnect\"\n          >\n            <div className={\"pf-u-pt-md pf-u-pb-md\"}>\n              <KafkaConnectionTabP2\n                isKafkaPending={isKafkaPending}\n                externalServer={getExternalServer(instance.bootstrapUrl)}\n                tokenEndPointUrl={\"TODO\"}\n                linkToServiceAccount={\"service-accounts\"}\n                linkToAccessTab={`TODO/acls`}\n                adminAPIUrl={getAdminServerUrl(instance.adminUrl)}\n                showCreateServiceAccountModal={() => {\n                  /* TODO */\n                }}\n                kafkaFleetManagerUrl={\n                  \"https://api.openshift.com/api/kafkas_mgmt/v1/openapi\"\n                }\n              />\n            </div>\n          </Tab>\n        </Tabs>\n      </DrawerPanelBody>\n    </>\n  );\n};\n\nconst getExternalServer = (bootstrapUrl: string | undefined) => {\n  if (!bootstrapUrl) {\n    return undefined;\n  }\n  return bootstrapUrl?.endsWith(\":443\") ? bootstrapUrl : `${bootstrapUrl}:443`;\n};\n\nconst getAdminServerUrl = (adminUrl: string | undefined) => {\n  return adminUrl ? `${adminUrl}/openapi` : undefined;\n};\n","import {\n  Alert,\n  Button,\n  Flex,\n  FlexItem,\n  HelperText,\n  HelperTextItem,\n  Spinner,\n  Split,\n  SplitItem,\n} from \"@patternfly/react-core\";\nimport {\n  CheckCircleIcon,\n  ExclamationTriangleIcon,\n} from \"@patternfly/react-icons\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { forwardRef } from \"react\";\nimport type { Status } from \"../../../types\";\nimport {\n  CreatingStatuses,\n  DegradedStatuses,\n  DeletingStatuses,\n  ReadyStatuses,\n  ResumingStatuses,\n  SuspendedStatuses,\n  SuspendingStatuses,\n} from \"../../../types\";\nimport \"./StatusLabel.css\";\n\ntype StatusLabelProps = {\n  value: Status;\n  showWarning?: boolean;\n  showError?: boolean;\n  withPopover?: boolean;\n};\n\n/**\n *<strong> Introduction </strong>\n *These are the various statuses that can show in the Kafka instances table under the \"Status\" header.\n */\nexport const StatusLabel = forwardRef<HTMLButtonElement, StatusLabelProps>(\n  (\n    { value, showWarning = false, showError = false, withPopover = false },\n    ref\n  ) => {\n    const { t } = useTranslation(\"kafka\");\n\n    const buttonVariant = withPopover ? \"link\" : \"plain\";\n\n    switch (true) {\n      case ReadyStatuses.includes(value):\n        return (\n          <div>\n            <Split hasGutter className=\"mas-c-status\">\n              <SplitItem>\n                <CheckCircleIcon className=\"mas-m-ready\" />\n              </SplitItem>\n              <SplitItem>{t(\"statuses.ready\")}</SplitItem>\n            </Split>\n          </div>\n        );\n\n      case CreatingStatuses.includes(value):\n        switch (true) {\n          case showWarning:\n            return (\n              <div>\n                <Split hasGutter className=\"mas-c-status\">\n                  <SplitItem>\n                    <Spinner size=\"md\" />\n                  </SplitItem>\n                  <SplitItem>\n                    <Button ref={ref} variant={buttonVariant} isInline>\n                      {t(\"statuses.creating\")}\n                    </Button>\n                  </SplitItem>\n                </Split>\n                <Alert\n                  variant=\"warning\"\n                  isInline\n                  isPlain\n                  title=\"This is taking longer than expected.\"\n                />\n              </div>\n            );\n          case showError:\n            return (\n              <div>\n                <Split hasGutter className=\"mas-c-status\">\n                  <SplitItem>\n                    <Spinner size=\"md\" />\n                  </SplitItem>\n                  <SplitItem>\n                    <Button ref={ref} variant={buttonVariant} isInline>\n                      {t(\"statuses.creating\")}\n                    </Button>\n                  </SplitItem>\n                </Split>\n                <Alert\n                  variant=\"danger\"\n                  isInline\n                  isPlain\n                  title={t(\"status_warning_or_error_title\")}\n                />\n              </div>\n            );\n          default:\n            return (\n              <div>\n                <Split hasGutter className=\"mas-c-status\">\n                  <SplitItem>\n                    <Spinner size=\"md\" />\n                  </SplitItem>\n                  <SplitItem>\n                    <Button ref={ref} variant={buttonVariant} isInline>\n                      {t(\"statuses.creating\")}\n                    </Button>\n                    <Flex>\n                      <FlexItem>\n                        <HelperText>\n                          <HelperTextItem variant=\"indeterminate\">\n                            {t(\"status_created_shortly_help\")}\n                          </HelperTextItem>\n                        </HelperText>\n                      </FlexItem>\n                    </Flex>\n                  </SplitItem>\n                </Split>\n              </div>\n            );\n        }\n\n      case DegradedStatuses.includes(value):\n        return (\n          <div>\n            <Split hasGutter className=\"mas-c-status\">\n              <SplitItem>\n                <ExclamationTriangleIcon className=\"mas-m-degraded\" />\n              </SplitItem>\n              <SplitItem>{t(\"statuses.degraded\")}</SplitItem>\n            </Split>\n          </div>\n        );\n\n      case SuspendingStatuses.includes(value):\n        return (\n          <div>\n            <p className=\"mas-m-deleting\"> {t(\"statuses.suspending\")}</p>\n          </div>\n        );\n      case SuspendedStatuses.includes(value):\n        return (\n          <div>\n            <Split hasGutter className=\"mas-c-status\">\n              <SplitItem>\n                <ExclamationTriangleIcon className=\"mas-m-degraded\" />\n              </SplitItem>\n              <SplitItem>\n                <Button ref={ref} variant={buttonVariant} isInline>\n                  {t(\"statuses.suspended\")}\n                </Button>\n              </SplitItem>\n            </Split>\n          </div>\n        );\n      case ResumingStatuses.includes(value):\n        return (\n          <div>\n            <Split hasGutter className=\"mas-c-status\">\n              <SplitItem>\n                <Spinner size=\"md\" />\n              </SplitItem>\n              <SplitItem>{t(\"statuses.resuming\")}</SplitItem>\n            </Split>\n          </div>\n        );\n      case DeletingStatuses.includes(value):\n        return (\n          <div>\n            <p className=\"mas-m-deleting\"> {t(\"statuses.deleting\")}</p>\n          </div>\n        );\n      default:\n        return null;\n    }\n  }\n);\n","export type KafkaStatus =\n  | \"ready\"\n  | \"degraded\"\n  | \"accepted\"\n  | \"provisioning\"\n  | \"preparing\"\n  | \"deprovision\"\n  | \"deleting\"\n  | \"suspended\"\n  | \"suspending\"\n  | \"resuming\";\n\nexport type PopoverStatus =\n  | \"pending\"\n  | \"provisioning\"\n  | \"preparing\"\n  | \"ready\"\n  | \"suspended\";\n\nexport const PopoverStatusOrder: PopoverStatus[] = [\n  \"pending\",\n  \"preparing\",\n  \"provisioning\",\n];\n\nexport const KafkaToPopoverMapping: {\n  [status in KafkaStatus]: PopoverStatus | null;\n} = {\n  ready: null,\n  degraded: null,\n  accepted: \"pending\",\n  provisioning: \"provisioning\",\n  preparing: \"preparing\",\n  deprovision: null,\n  deleting: null,\n  suspended: \"suspended\",\n  suspending: null,\n  resuming: null,\n};\n","import { ProgressStep, ProgressStepper } from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { PopoverStatus } from \"../types\";\nimport { PopoverStatusOrder } from \"../types\";\n\ntype StatusProgressStepperProps = {\n  currentStatus: PopoverStatus;\n};\n\nexport const StatusProgressStepper: VoidFunctionComponent<\n  StatusProgressStepperProps\n> = ({ currentStatus }) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n\n  const currentStep = PopoverStatusOrder.findIndex((s) => s === currentStatus);\n\n  const getVariant = (index: number) =>\n    (currentStep === index && \"info\") ||\n    (currentStep > index && \"success\") ||\n    \"default\";\n\n  return (\n    <ProgressStepper isVertical={true}>\n      <ProgressStep\n        id={\"pending\"}\n        titleId={\"pending\"}\n        isCurrent={currentStatus === \"pending\"}\n        description={t(\"kafka_status_popover.pending.description\")}\n        aria-label={t(\"kafka_status_popover.pending.description\")}\n        variant={getVariant(0)}\n      >\n        {t(\"kafka_status_popover.pending.title\")}\n      </ProgressStep>\n\n      <ProgressStep\n        id={\"provisioning\"}\n        titleId={\"provisioning\"}\n        isCurrent={currentStatus === \"provisioning\"}\n        description={t(\"kafka_status_popover.provisioning.description\")}\n        aria-label={t(\"kafka_status_popover.provisioning.description\")}\n        variant={getVariant(1)}\n      >\n        {t(\"kafka_status_popover.provisioning.title\")}\n      </ProgressStep>\n      <ProgressStep\n        id={\"preparing\"}\n        titleId={\"preparing\"}\n        isCurrent={currentStatus === \"preparing\"}\n        description={t(\"kafka_status_popover.preparing.description\")}\n        aria-label={t(\"kafka_status_popover.preparing.description\")}\n        variant={getVariant(2)}\n      >\n        {t(\"kafka_status_popover.preparing.title\")}\n      </ProgressStep>\n    </ProgressStepper>\n  );\n};\n","import {\n  Alert,\n  Button,\n  ButtonVariant,\n  Stack,\n  StackItem,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { Trans, useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { PopoverStatus } from \"../types\";\nimport { PopoverStatusOrder } from \"../types\";\nimport { StatusProgressStepper } from \"./StatusProgressStepper\";\n\nexport type StatusPopoverContentProps = {\n  currentStatus: PopoverStatus;\n  showWarning?: boolean;\n  showError?: boolean;\n  onClickConnectionTabLink: () => void;\n  onClickSupportLink: () => void;\n};\n\nexport const StatusPopoverContent: VoidFunctionComponent<\n  StatusPopoverContentProps\n> = ({\n  currentStatus,\n  showWarning = false,\n  showError = false,\n  onClickConnectionTabLink,\n  onClickSupportLink,\n}) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n\n  const currentStep = PopoverStatusOrder.findIndex((s) => s === currentStatus);\n\n  return (\n    <div>\n      <Stack hasGutter>\n        <StackItem>\n          {showWarning && (\n            <Alert\n              variant=\"warning\"\n              isInline\n              isPlain\n              title={t(\"kafka_status_popover.warning_or_error_title\")}\n            >\n              <TextContent>\n                <Text component={TextVariants.small}>\n                  <Trans\n                    ns={[\"create-kafka-instance\"]}\n                    i18nKey=\"kafka_status_popover.header_content_with_warning\"\n                    components={[\n                      <Button\n                        key=\"btn-connetcion-tab\"\n                        variant={ButtonVariant.link}\n                        onClick={onClickConnectionTabLink}\n                        isInline\n                      />,\n                    ]}\n                  />\n                </Text>\n              </TextContent>\n            </Alert>\n          )}\n          {showError && (\n            <Alert\n              variant=\"danger\"\n              isInline\n              isPlain\n              title={t(\"kafka_status_popover.warning_or_error_title\")}\n            >\n              <TextContent>\n                <Text component={TextVariants.small}>\n                  <Trans\n                    ns={[\"create-kafka-instance\"]}\n                    i18nKey=\"kafka_status_popover.header_content_with_error\"\n                    components={[\n                      <Button\n                        key=\"btn-connetcion-tab\"\n                        variant={ButtonVariant.link}\n                        onClick={onClickConnectionTabLink}\n                        isInline\n                      />,\n                      <Button\n                        key=\"btn-support-case\"\n                        variant={ButtonVariant.link}\n                        onClick={onClickSupportLink}\n                        isInline\n                      />,\n                    ]}\n                  />\n                </Text>\n              </TextContent>\n            </Alert>\n          )}\n          {!showError && !showWarning && (\n            <TextContent>\n              <Text component={TextVariants.small}>\n                <Trans\n                  ns={[\"create-kafka-instance\"]}\n                  i18nKey=\"kafka_status_popover.header_content\"\n                  components={[\n                    <Button\n                      key=\"btn-connetcion-tab\"\n                      variant={ButtonVariant.link}\n                      onClick={onClickConnectionTabLink}\n                      isInline\n                    />,\n                  ]}\n                />\n              </Text>\n            </TextContent>\n          )}\n        </StackItem>\n        <StackItem>\n          {t(\"common:progress_stepper_current_step\", {\n            currentStep,\n            total: PopoverStatusOrder.length,\n          })}\n        </StackItem>\n        <StackItem>\n          <StatusProgressStepper currentStatus={currentStatus} />\n        </StackItem>\n      </Stack>\n    </div>\n  );\n};\n","import type { PopoverProps } from \"@patternfly/react-core\";\nimport { Popover } from \"@patternfly/react-core\";\nimport type { RefObject, VoidFunctionComponent } from \"react\";\nimport { useCallback, useState } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { PopoverStatus } from \"../types\";\nimport type { StatusPopoverContentProps } from \"./StatusPopoverContent\";\nimport { StatusPopoverContent } from \"./StatusPopoverContent\";\n\nexport type StatusPopoverProps = {\n  status: PopoverStatus;\n  initialOpen?: boolean;\n  showWarning?: boolean;\n  showError?: boolean;\n  children?: PopoverProps[\"children\"];\n  onClickConnectionTabLink: StatusPopoverContentProps[\"onClickConnectionTabLink\"];\n  onClickSupportLink: StatusPopoverContentProps[\"onClickSupportLink\"];\n  reference?: RefObject<HTMLButtonElement>;\n};\n\n/**\n * ## Introduction\n *\n * This is a popover that can be reached from the Kafka Instance table while the status of the instance in question is “Creating”.\n * A Kafka instance usually takes a few minutes to create. The purpose of this popover is to give the user some insights into\n * the creation process of their instance while they wait for it to be available to use.\n *\n * - The text at the top explains that the instance will be ready shortly & suggests that the user creates a service account while they wait.\n *  (Provides a link to the “Connections tab\" where this is done).\n *\n * - The steps shown in the progress stepper are statuses that show in the api. They have been grouped together under the one overall\n * “Creating status” in the table.There is some descriptive text accompanying each step too. When these steps are complete the instance will be ready for use\n *\n * - The popover is only available while instance creation is in progress.\n * - After creation is complete the table displays the ready status and the popover is no longer available.\n *\n */\nexport const StatusPopover: VoidFunctionComponent<StatusPopoverProps> = ({\n  initialOpen = false,\n  status,\n  showWarning = false,\n  showError = false,\n  onClickConnectionTabLink,\n  onClickSupportLink,\n  reference,\n  children,\n}) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n\n  const [isVisible, setIsVisible] = useState(initialOpen);\n  const onClose = () => setIsVisible(false);\n\n  const handleClickConnectionTabLink = useCallback(() => {\n    onClose();\n    onClickConnectionTabLink();\n  }, [onClickConnectionTabLink]);\n\n  const handleClickSupportLink = useCallback(() => {\n    onClose();\n    onClickSupportLink();\n  }, [onClickSupportLink]);\n\n  return (\n    <Popover\n      headerContent={t(\"kafka_status_popover.title\")}\n      bodyContent={\n        <StatusPopoverContent\n          currentStatus={status}\n          showWarning={showWarning}\n          showError={showError}\n          onClickConnectionTabLink={handleClickConnectionTabLink}\n          onClickSupportLink={handleClickSupportLink}\n        />\n      }\n      isVisible={isVisible}\n      shouldOpen={() => setIsVisible(true)}\n      shouldClose={() => setIsVisible(false)}\n      position={\"right\"}\n      enableFlip={true}\n      reference={reference}\n    >\n      {children}\n    </Popover>\n  );\n};\n","import type { PopoverProps } from \"@patternfly/react-core\";\nimport { Popover, TextContent } from \"@patternfly/react-core\";\nimport { ExclamationTriangleIcon } from \"@patternfly/react-icons\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { RefObject, VoidFunctionComponent } from \"react\";\n\nexport type SuspendedPopoverProps = {\n  children?: PopoverProps[\"children\"];\n  reference?: RefObject<HTMLButtonElement>;\n};\n\nexport const SuspendedPopover: VoidFunctionComponent<SuspendedPopoverProps> = ({\n  children,\n  reference,\n}) => {\n  const { t } = useTranslation(\"kafka\");\n  return (\n    <Popover\n      alertSeverityVariant={\"warning\"}\n      headerIcon={<ExclamationTriangleIcon />}\n      headerContent={t(\"suspend_popover_title\")}\n      bodyContent={\n        <TextContent>\n          <p>{t(\"suspend_popover_body_1\")}</p>\n        </TextContent>\n      }\n      position={\"right\"}\n      reference={reference}\n    >\n      {children}\n    </Popover>\n  );\n};\n","import { differenceInMinutes } from \"date-fns\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback, useRef, useState } from \"react\";\nimport { useInterval } from \"@rhoas/app-services-ui-components\";\nimport type { Status } from \"../../types\";\nimport type { StatusPopoverProps } from \"./components\";\nimport { StatusLabel, StatusPopover, SuspendedPopover } from \"./components\";\nimport { KafkaToPopoverMapping } from \"./types\";\n\nexport type KafkaInstanceStatusProps = {\n  status: Status;\n  createdAt: Date;\n  warningAfterMinutes?: number;\n  errorAfterMinutes?: number;\n} & Pick<StatusPopoverProps, \"onClickConnectionTabLink\" | \"onClickSupportLink\">;\n\n/**\n * A component to show the status of a Kafka instance combining the\n * `StatusPopover` with the `StatusLabel`, with automatic handling of which\n * statuses should have a companion popover.\n */\nexport const KafkaInstanceStatus: VoidFunctionComponent<\n  KafkaInstanceStatusProps\n> = ({\n  status,\n  createdAt,\n  warningAfterMinutes = 15,\n  errorAfterMinutes = 30,\n  onClickConnectionTabLink,\n  onClickSupportLink,\n}) => {\n  const popoverStatus = KafkaToPopoverMapping[status];\n  const [alert, setAlert] = useState<\"warning\" | \"error\" | false>(false);\n  const labelRef = useRef<HTMLButtonElement>(null);\n\n  const checkCreatedAt = useCallback(() => {\n    const elapsed = differenceInMinutes(new Date(), createdAt);\n    if (elapsed > errorAfterMinutes) {\n      setAlert(\"error\");\n    } else if (elapsed > warningAfterMinutes) {\n      setAlert(\"warning\");\n    } else {\n      setAlert(false);\n    }\n  }, [createdAt, errorAfterMinutes, warningAfterMinutes]);\n\n  useInterval(checkCreatedAt, 5000);\n  const showWarning = alert === \"warning\";\n  const showError = alert === \"error\";\n  return (\n    <>\n      {popoverStatus === \"suspended\" ? (\n        <SuspendedPopover reference={labelRef} />\n      ) : (\n        popoverStatus && (\n          <StatusPopover\n            status={popoverStatus}\n            showWarning={showWarning}\n            showError={showError}\n            onClickConnectionTabLink={onClickConnectionTabLink}\n            onClickSupportLink={onClickSupportLink}\n            reference={labelRef}\n          />\n        )\n      )}\n      <StatusLabel\n        value={status}\n        showWarning={showWarning}\n        showError={showError}\n        withPopover={popoverStatus !== undefined}\n        ref={labelRef}\n      />\n    </>\n  );\n};\n","import {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { PlusCircleIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { Trans, useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport type EmptyStateNoInstancesProps = {\n  onCreate: () => void;\n  onQuickstartGuide: () => void;\n};\n\nexport const EmptyStateNoInstances: VoidFunctionComponent<\n  EmptyStateNoInstancesProps\n> = ({ onCreate, onQuickstartGuide }) => {\n  const { t } = useTranslation(\"kafka\");\n  return (\n    <EmptyState variant={EmptyStateVariant.xs}>\n      <EmptyStateIcon icon={PlusCircleIcon} />\n      <Title headingLevel=\"h2\" size=\"lg\">\n        {t(\"empty_state_no_instances_title\")}\n      </Title>\n      <EmptyStateBody>\n        <Trans\n          ns={\"kafka\"}\n          i18nKey={\"empty_state_no_instances_body\"}\n          components={[<a onClick={onQuickstartGuide} />]}\n        />\n      </EmptyStateBody>\n      <Button ouiaId=\"button-create\" variant=\"primary\" onClick={onCreate}>\n        {t(\"empty_state_no_instances_create_instance\")}\n      </Button>\n    </EmptyState>\n  );\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { SearchIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { Trans, useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport type EmptyStateNoResultsProps = {\n  onClearAllFilters: () => void;\n};\n\nexport const EmptyStateNoResults: VoidFunctionComponent<\n  EmptyStateNoResultsProps\n> = ({ onClearAllFilters }) => {\n  const { t } = useTranslation(\"kafka\");\n  return (\n    <EmptyState variant={EmptyStateVariant.xs}>\n      <EmptyStateIcon icon={SearchIcon} />\n      <Title headingLevel=\"h2\" size=\"lg\">\n        {t(\"empty_state_no_results_found_title\")}\n      </Title>\n      <EmptyStateBody>\n        <Trans\n          ns={\"kafka\"}\n          i18nKey={\"empty_state_no_results_found_body\"}\n          components={[<a onClick={onClearAllFilters} />]}\n        />\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import { Button, PageSection, Stack, StackItem } from \"@patternfly/react-core\";\nimport type { TableViewProps } from \"@rhoas/app-services-ui-components\";\nimport {\n  FormatDate,\n  TableView,\n  Trans,\n  useTranslation,\n} from \"@rhoas/app-services-ui-components\";\nimport { parseISO } from \"date-fns\";\nimport { Link } from \"react-router-dom\";\nimport { useKafkaLabels } from \"../../hooks\";\nimport type { KafkaInstance, SimplifiedStatus } from \"../../types\";\nimport { DeletingStatuses } from \"../../types\";\nimport { KafkaInstanceActions } from \"../KafkaInstanceActions\";\nimport { KafkaInstanceStatus } from \"../KafkaInstanceStatus\";\nimport type {\n  EmptyStateNoInstancesProps,\n  EmptyStateNoResultsProps,\n} from \"./components\";\nimport { EmptyStateNoInstances, EmptyStateNoResults } from \"./components\";\n\nconst Columns = [\n  \"name\",\n  \"owner\",\n  \"createdAt\",\n  \"provider\",\n  \"region\",\n  \"status\",\n] as const;\n\nexport type KafkaInstancesProps<T extends KafkaInstance> = {\n  instances: Array<T> | undefined | null;\n  getUrlForInstance: (row: T) => string;\n  names: string[];\n  owners: string[];\n  statuses: string[];\n  onCreate: () => void;\n  onSearchName: (value: string) => void;\n  onRemoveNameChip: (value: string) => void;\n  onRemoveNameChips: () => void;\n  onSearchOwner: (value: string) => void;\n  onRemoveOwnerChip: (value: string) => void;\n  onRemoveOwnerChips: () => void;\n  onSearchStatus: (value: SimplifiedStatus) => void;\n  onRemoveStatusChip: (value: SimplifiedStatus) => void;\n  onRemoveStatusChips: () => void;\n  onDetails: (row: T) => void;\n  onConnection: (row: T) => void;\n  canChangeOwner: (row: T) => boolean;\n  onChangeOwner: (row: T) => void;\n  canDelete: (row: T) => boolean;\n  onDelete: (row: T) => void;\n  onClickConnectionTabLink: (row: T) => void;\n  onClickSupportLink: () => void;\n  onInstanceLinkClick: (row: T) => void;\n  canHaveInstanceLink: (row: T) => boolean;\n  canOpenConnection: (row: T) => boolean;\n} & Pick<\n  TableViewProps<T, typeof Columns[number]>,\n  | \"itemCount\"\n  | \"page\"\n  | \"perPage\"\n  | \"onPageChange\"\n  | \"isRowSelected\"\n  | \"isColumnSortable\"\n  | \"onClearAllFilters\"\n> &\n  EmptyStateNoInstancesProps &\n  EmptyStateNoResultsProps;\n\nexport const KafkaInstances = <T extends KafkaInstance>({\n  instances,\n  itemCount,\n  page,\n  perPage,\n  names,\n  owners,\n  statuses,\n  getUrlForInstance,\n  isRowSelected,\n  isColumnSortable,\n  onPageChange,\n  onDetails,\n  onConnection,\n  canChangeOwner,\n  onChangeOwner,\n  canDelete,\n  onDelete,\n  onCreate,\n  onQuickstartGuide,\n  onClickConnectionTabLink,\n  onClickSupportLink,\n  onInstanceLinkClick,\n  onSearchName,\n  onRemoveNameChip,\n  onRemoveNameChips,\n  onSearchOwner,\n  onRemoveOwnerChip,\n  onRemoveOwnerChips,\n  onSearchStatus,\n  onRemoveStatusChip,\n  onRemoveStatusChips,\n  onClearAllFilters,\n\n  canHaveInstanceLink,\n  canOpenConnection,\n}: KafkaInstancesProps<T>) => {\n  const { t } = useTranslation(\"kafka\");\n  const labels = useKafkaLabels();\n  const breakpoint = \"lg\";\n\n  const isFiltered =\n    names.length > 0 || owners.length > 0 || statuses.length > 0;\n\n  return (\n    <PageSection isFilled={true}>\n      <TableView\n        data={instances}\n        columns={Columns}\n        renderHeader={({ column, Th, key }) => (\n          <Th key={key}>{labels.fields[column]}</Th>\n        )}\n        renderCell={({ column, row, Td, key }) => {\n          const timeCreatedDate = parseISO(row.createdAt);\n          const instanceLinkEnable = canHaveInstanceLink(row);\n          return (\n            <Td key={key} dataLabel={labels.fields[column]}>\n              {(() => {\n                switch (column) {\n                  case \"name\":\n                    return (\n                      <Button\n                        variant=\"link\"\n                        component={(props) => (\n                          <Link to={getUrlForInstance(row)} {...props}>\n                            {row.name}\n                          </Link>\n                        )}\n                        isInline={true}\n                        isAriaDisabled={!instanceLinkEnable}\n                        isDisabled={!instanceLinkEnable}\n                        onClick={() => onInstanceLinkClick(row)}\n                      />\n                    );\n                  case \"provider\":\n                    return labels.providers[row.provider];\n                  case \"createdAt\":\n                    return (\n                      <Stack>\n                        <StackItem>\n                          <FormatDate\n                            date={timeCreatedDate}\n                            format={\"distanceToNowWithAgo\"}\n                          />\n                        </StackItem>\n                        {row.expiryDate && (\n                          <StackItem>\n                            <Trans\n                              i18nKey=\"will_expire_short\"\n                              ns={[\"kafka\"]}\n                              components={{\n                                time: (\n                                  <FormatDate\n                                    date={parseISO(row.expiryDate)}\n                                    format=\"expiration\"\n                                  />\n                                ),\n                              }}\n                            />\n                          </StackItem>\n                        )}\n                      </Stack>\n                    );\n                  case \"status\":\n                    return (\n                      <KafkaInstanceStatus\n                        status={row[\"status\"]}\n                        createdAt={timeCreatedDate}\n                        onClickConnectionTabLink={() =>\n                          onClickConnectionTabLink(row)\n                        }\n                        onClickSupportLink={onClickSupportLink}\n                      />\n                    );\n                  default:\n                    return row[column];\n                }\n              })()}\n            </Td>\n          );\n        }}\n        renderActions={({ row }) => {\n          const changeOwnerEnabled = canChangeOwner(row);\n          const deleteEnabled = canDelete(row);\n          const openConnectionEnabled = canOpenConnection(row);\n          return (\n            <KafkaInstanceActions\n              onDetails={() => onDetails(row)}\n              onConnection={() => onConnection(row)}\n              canOpenConnection={openConnectionEnabled}\n              canChangeOwner={changeOwnerEnabled}\n              onChangeOwner={() => onChangeOwner(row)}\n              canDelete={deleteEnabled}\n              onDelete={() => onDelete(row)}\n            />\n          );\n        }}\n        onRowClick={({ row }) => onDetails(row)}\n        isColumnSortable={isColumnSortable}\n        isRowSelected={isRowSelected}\n        isRowDeleted={({ row }) => DeletingStatuses.includes(row[\"status\"])}\n        toolbarBreakpoint={breakpoint}\n        filters={{\n          [labels.fields.name]: {\n            type: \"search\",\n            chips: names,\n            onSearch: onSearchName,\n            onRemoveChip: onRemoveNameChip,\n            onRemoveGroup: onRemoveNameChips,\n            validate: (value) => /^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(value),\n            errorMessage: t(\"kafka:input_field_invalid_message\"),\n          },\n          [labels.fields.owner]: {\n            type: \"search\",\n            chips: owners,\n            onSearch: onSearchOwner,\n            onRemoveChip: onRemoveOwnerChip,\n            onRemoveGroup: onRemoveOwnerChips,\n            validate: (value: string) => !/[\"$^<>|+%/;:,\\s*=~#()]/.test(value),\n            errorMessage: t(\"kafka:input_field_invalid_message\"),\n          },\n          [labels.fields.status]: {\n            type: \"checkbox\",\n            chips: statuses,\n            options: labels.statusesSimplified,\n            onToggle: onSearchStatus,\n            onRemoveChip: onRemoveStatusChip,\n            onRemoveGroup: onRemoveStatusChips,\n          },\n        }}\n        actions={[\n          {\n            label: t(\"create_instance\"),\n            onClick: onCreate,\n            isPrimary: true,\n          },\n        ]}\n        itemCount={itemCount}\n        page={page}\n        perPage={perPage}\n        onPageChange={onPageChange}\n        onClearAllFilters={onClearAllFilters}\n        ariaLabel={t(\"table.title\")}\n        isFiltered={isFiltered}\n        emptyStateNoData={\n          <EmptyStateNoInstances\n            onCreate={onCreate}\n            onQuickstartGuide={onQuickstartGuide}\n          />\n        }\n        emptyStateNoResults={\n          <EmptyStateNoResults onClearAllFilters={onClearAllFilters} />\n        }\n      />\n    </PageSection>\n  );\n};\n","import { assign, createMachine } from \"xstate\";\nimport { DateIsoString } from \"../../types\";\nimport type { Message } from \"./types\";\nimport { isSameMessage } from \"./utils\";\n\nexport type MessageApiResponse = {\n  lastUpdated: Date;\n  messages: Message[];\n  partitions: number;\n  offsetMin: number;\n  offsetMax: number;\n\n  filter: {\n    partition: number | undefined;\n    offset: number | undefined;\n    timestamp: DateIsoString | undefined;\n    limit: number | undefined;\n    epoch: number | undefined;\n  };\n};\n\nexport const MessageBrowserMachine = createMachine(\n  {\n    id: \"message-browser\",\n    tsTypes: {} as import(\"./MessageBrowserMachine.typegen\").Typegen0,\n    schema: {\n      context: {} as {\n        // response\n        response: MessageApiResponse | undefined;\n\n        limit: number;\n        // optional input\n        partition: number | undefined;\n        offset: number | undefined;\n        epoch: number | undefined;\n        timestamp: DateIsoString | undefined;\n        selectedMessage: Message | undefined;\n      },\n      events: {} as\n        | {\n            type: \"fetchSuccess\";\n            messages: Message[];\n            partitions: number;\n            offsetMin: number;\n            offsetMax: number;\n          }\n        | { type: \"fetchFail\" }\n        | { type: \"refresh\" }\n        | { type: \"setPartition\"; value: number | undefined }\n        | { type: \"setOffset\"; value: number | undefined }\n        | { type: \"setTimestamp\"; value: DateIsoString | undefined }\n        | { type: \"setEpoch\"; value: number | undefined }\n        | { type: \"setLatest\" }\n        | { type: \"setLimit\"; value: number }\n        | { type: \"selectMessage\"; message: Message }\n        | { type: \"deselectMessage\" },\n    },\n    initial: \"initialLoading\",\n    context: {\n      // response\n      response: undefined,\n\n      limit: 10,\n      // optional input\n      partition: undefined,\n      offset: undefined,\n      timestamp: undefined,\n      selectedMessage: undefined,\n      epoch: undefined,\n    },\n    states: {\n      initialLoading: {\n        invoke: {\n          src: \"api\",\n        },\n        on: {\n          fetchSuccess: {\n            actions: \"setMessages\",\n            target: \"verifyMessages\",\n          },\n          fetchFail: \"error\",\n        },\n      },\n      verifyMessages: {\n        always: [{ cond: \"noMessages\", target: \"noData\" }, { target: \"ready\" }],\n      },\n      noData: {\n        on: {\n          refresh: \"initialLoading\",\n        },\n      },\n      error: {\n        on: {\n          refresh: \"initialLoading\",\n        },\n      },\n      ready: {\n        initial: \"pristine\",\n        states: {\n          pristine: {},\n          dirty: {\n            tags: \"dirty\",\n          },\n          shouldSearch: {\n            always: [\n              {\n                cond: \"areFiltersChanged\",\n                target: \"dirty\",\n              },\n              { target: \"pristine\" },\n            ],\n          },\n        },\n        always: [\n          {\n            cond: \"selectedMessageNotAvailable\",\n            actions: \"deselectMessage\",\n          },\n        ],\n        on: {\n          refresh: \"refreshing\",\n          setPartition: {\n            target: \".shouldSearch\",\n            actions: \"setPartition\",\n          },\n          setEpoch: {\n            actions: \"setEpoch\",\n            target: \".shouldSearch\",\n          },\n          setTimestamp: {\n            target: \".shouldSearch\",\n            actions: \"setTimestamp\",\n          },\n          setOffset: {\n            target: \".shouldSearch\",\n            actions: \"setOffset\",\n          },\n          setLatest: {\n            target: \".shouldSearch\",\n            actions: \"setLatest\",\n          },\n          setLimit: {\n            target: \".shouldSearch\",\n            actions: \"setLimit\",\n          },\n          selectMessage: {\n            actions: \"selectMessage\",\n          },\n          deselectMessage: {\n            actions: \"deselectMessage\",\n          },\n        },\n      },\n      refreshing: {\n        invoke: {\n          src: \"api\",\n        },\n        on: {\n          fetchSuccess: {\n            actions: \"setMessages\",\n            target: \"ready\",\n          },\n          fetchFail: {\n            target: \"ready\",\n          },\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      setMessages: assign(\n        (context, { messages, partitions, offsetMin, offsetMax }) => ({\n          response: {\n            lastUpdated: new Date(),\n            messages,\n            partitions,\n            offsetMin,\n            offsetMax,\n            filter: {\n              partition: context.partition,\n              timestamp: context.timestamp,\n              offset: context.offset,\n              limit: context.limit,\n              epoch: context.epoch,\n            },\n          },\n        })\n      ),\n      setPartition: assign((_, { value }) => ({ partition: value })),\n      setEpoch: assign((_, { value }) => ({\n        epoch: value,\n      })),\n      setTimestamp: assign((_, { value }) => ({\n        timestamp: value,\n      })),\n      setOffset: assign((_, { value }) => ({\n        offset: value,\n      })),\n      setLimit: assign((_, { value }) => ({\n        limit: value,\n      })),\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      setLatest: assign((_) => ({\n        timestamp: undefined,\n        offset: undefined,\n      })),\n      selectMessage: assign((_, { message }) => ({ selectedMessage: message })),\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      deselectMessage: assign((_) => ({ selectedMessage: undefined })),\n    },\n    guards: {\n      noMessages: ({ response }) =>\n        response === undefined || response.messages.length === 0,\n      selectedMessageNotAvailable: ({ response, selectedMessage }) =>\n        selectedMessage !== undefined &&\n        response?.messages.find((m) => isSameMessage(m, selectedMessage)) ===\n          undefined,\n      areFiltersChanged: (context) =>\n        context.response?.filter.limit !== context.limit ||\n        context.response?.filter.offset !== context.offset ||\n        context.response?.filter.partition !== context.partition ||\n        context.response?.filter.timestamp !== context.timestamp ||\n        context.response?.filter.epoch !== context.epoch,\n    },\n  }\n);\n","import type { Message } from \"./types\";\n\nexport function isSameMessage(m1: Message, m2: Message) {\n  return JSON.stringify(m1) === JSON.stringify(m2);\n}\n\nexport function beautifyUnknownValue(value: string): string {\n  try {\n    return JSON.stringify(JSON.parse(value), null, 2);\n  } catch (e) {\n    // noop\n  }\n  return value;\n}\n\nexport function truncate(value: string, length: number): [string, boolean] {\n  const shouldTruncate = value.length > length;\n  return [\n    shouldTruncate ? `${value.substring(0, length)}...` : value,\n    shouldTruncate,\n  ];\n}\n","import type { ResourceOperationValue } from \"./components/ResourceOperation\";\nimport type { ResourcePermissionValue } from \"./components/ResourcePermission\";\nimport type { ResourcePrefixRuleValue } from \"./components/ResourcePrefixRule\";\nimport type { ResourceTypeValue } from \"./components/ResourceType\";\n\nexport type AclOperation =\n  | \"ALL\"\n  | \"READ\"\n  | \"WRITE\"\n  | \"CREATE\"\n  | \"DELETE\"\n  | \"ALTER\"\n  | \"DESCRIBE\"\n  | \"DESCRIBE_CONFIGS\"\n  | \"ALTER_CONFIGS\";\n\nexport type AclResourceType =\n  | \"GROUP\"\n  | \"TOPIC\"\n  | \"CLUSTER\"\n  | \"TRANSACTIONAL_ID\";\n\nexport type AclPatternType = \"LITERAL\" | \"PREFIXED\";\n\nexport type AclPermissionType = \"ALLOW\" | \"DENY\";\n\nexport interface AclBinding {\n  /**\n   *\n   * @type {AclResourceType}\n   * @memberof AclBinding\n   */\n  resourceType: AclResourceType;\n  /**\n   *\n   * @type {string}\n   * @memberof AclBinding\n   */\n  resourceName: string;\n  /**\n   *\n   * @type {AclPatternType}\n   * @memberof AclBinding\n   */\n  patternType: AclPatternType;\n  /**\n   * Identifies the user or service account to which an ACL entry is bound. The literal prefix value of `User:` is required. May be used to specify all users with value `User:*`.\n   * @type {string}\n   * @memberof AclBinding\n   */\n  principal: string;\n  /**\n   *\n   * @type {AclOperation}\n   * @memberof AclBinding\n   */\n  operation: AclOperation;\n  /**\n   *\n   * @type {AclPermissionType}\n   * @memberof AclBinding\n   */\n  permission: AclPermissionType;\n}\nexport enum PrincipalType {\n  UserAccount = \"USER_ACCOUNT\",\n  ServiceAccount = \"SERVICE_ACCOUNT\",\n}\n\nexport type Account = {\n  id: string;\n  principalType: PrincipalType;\n  displayName: string;\n};\n\ntype ManualAcl = {\n  resourceType: ResourceTypeValue | undefined;\n  resourcePrefix: ResourcePrefixRuleValue;\n  resourceName: string | undefined;\n  resourcePermission: ResourcePermissionValue;\n  resourceOperation: ResourceOperationValue | undefined;\n};\n\ntype ProduceTopicTemplate = {\n  prefixRuleValue: ResourcePrefixRuleValue;\n  resourceNameValue: string | undefined;\n};\n\ntype ConsumeTopicTemplate = {\n  consumerResourceName: string | undefined;\n  consumerResourcePrefixRule: ResourcePrefixRuleValue;\n  topicResourceName: string | undefined;\n  topicResourcePrefixRule: ResourcePrefixRuleValue;\n};\n\ntype ManageAccessTemplate = {\n  instanceName: string;\n};\nexport type AddAclType =\n  | ({ type: \"manual\" } & ManualAcl)\n  | ({ type: \"consume-topic\" } & ConsumeTopicTemplate)\n  | ({ type: \"produce-topic\" } & ProduceTopicTemplate)\n  | ({ type: \"manage-access\" } & ManageAccessTemplate);\n\nexport const createEmptyManualAcl = (): AddAclType => {\n  return {\n    type: \"manual\",\n    resourceName: undefined,\n    resourceType: undefined,\n    resourceOperation: undefined,\n    resourcePrefix: \"Is\",\n    resourcePermission: \"allow\",\n  };\n};\nexport const createEmptyProduceTopicAcl = (): AddAclType => {\n  return {\n    type: \"produce-topic\",\n    prefixRuleValue: \"Is\",\n    resourceNameValue: undefined,\n  };\n};\nexport const createEmptyConsumeTopicAcl = (): AddAclType => {\n  return {\n    type: \"consume-topic\",\n    consumerResourceName: undefined,\n    consumerResourcePrefixRule: \"Is\",\n    topicResourceName: undefined,\n    topicResourcePrefixRule: \"Is\",\n  };\n};\nexport const createEmptyManageAccessAcl = (kafkaName: string): AddAclType => {\n  return {\n    type: \"manage-access\",\n    instanceName: kafkaName,\n  };\n};\n","import {\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface CapacityTable {\n  name: string;\n  firstStreamingUnit: string;\n  secondStreamingUnit: string;\n}\n\nexport const KafkaInstanceCapacityTable: FunctionComponent = () => {\n  const { t } = useTranslation(\"kafkaoverview-v2\");\n\n  const capacityTable: CapacityTable[] = [\n    {\n      name: \"Ingress (MB/second)\",\n      firstStreamingUnit: \"up to 50\",\n      secondStreamingUnit: \"up to 100\",\n    },\n    {\n      name: \"Egress (MB/second)\",\n      firstStreamingUnit: \"up to 100\",\n      secondStreamingUnit: \"up to 200\",\n    },\n    {\n      name: \"Storage* (GB)\",\n      firstStreamingUnit: \"up to 1000\",\n      secondStreamingUnit: \"up to 2000\",\n    },\n    {\n      name: \"Topic partitions\",\n      firstStreamingUnit: \"up to 1500\",\n      secondStreamingUnit: \"up to 3000\",\n    },\n    {\n      name: \"Client connections\",\n      firstStreamingUnit: \"up to 3000\",\n      secondStreamingUnit: \"up to 6000\",\n    },\n    {\n      name: \"Connection rate (connections/second)\",\n      firstStreamingUnit: \"up to 100\",\n      secondStreamingUnit: \"up to 200\",\n    },\n    {\n      name: \"Message size (MB)\",\n      firstStreamingUnit: \"up to 1\",\n      secondStreamingUnit: \"up to 1\",\n    },\n  ];\n\n  const columnNames = {\n    name: \"\",\n    firstStreamingUnit: t(\"firstStreamingUnit\"),\n    secondStreamingUnit: t(\"secondStreamingUnit\"),\n  };\n\n  return (\n    <TableComposable>\n      <Thead>\n        <Tr>\n          <Th>{columnNames.name}</Th>\n          <Th>{columnNames.firstStreamingUnit}</Th>\n          <Th>{columnNames.secondStreamingUnit}</Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        {capacityTable.map((table) => {\n          return (\n            <Tr key={table.name}>\n              <Td dataLabel={columnNames.name}>{table.name}</Td>\n              <Td dataLabel={columnNames.firstStreamingUnit}>\n                {table.firstStreamingUnit}\n              </Td>\n              <Td dataLabel={columnNames.secondStreamingUnit}>\n                {table.secondStreamingUnit}\n              </Td>\n            </Tr>\n          );\n        })}\n      </Tbody>\n    </TableComposable>\n  );\n};\n","import {\n  Bullseye,\n  Card,\n  PageSection,\n  PageSectionVariants,\n  Stack,\n  StackItem,\n  Text,\n  TextVariants,\n  Title,\n} from \"@patternfly/react-core\";\nimport classNames from \"classnames\";\nimport type {\n  CSSProperties,\n  FunctionComponent,\n  ReactNode,\n  VoidFunctionComponent,\n} from \"react\";\nimport \"./MarketingPage.css\";\n\nexport type MarketingPageHeroProps = {\n  title: string;\n  tagLine: string;\n  description: string;\n  description2?: string;\n  heroImage: string;\n  heroImageSize: number;\n  heroImageCanRepeat?: boolean;\n  heroImagePositionY?: number;\n  cta?: ReactNode;\n  variant?: \"light\" | \"dark\";\n};\n\nexport const MarketingPageHero: VoidFunctionComponent<\n  MarketingPageHeroProps\n> = ({\n  title,\n  tagLine,\n  description,\n  description2,\n  heroImage,\n  heroImageSize,\n  heroImageCanRepeat = true,\n  heroImagePositionY = 0,\n  cta,\n  variant = \"light\",\n}) => {\n  const style = {\n    \"--appsrv-marketing--banner--before--BackgroundImage\": `url(${heroImage})`,\n    \"--appsrv-marketing--banner--before--BackgroundSize\": `${heroImageSize}px`,\n    \"--appsrv-marketing--banner--before--BackgroundRepeat\": heroImageCanRepeat\n      ? \"repeat\"\n      : \"no-repeat\",\n    \"--appsrv-marketing--banner--before--BackgroundPositionY\": `${heroImagePositionY}px`,\n  } as CSSProperties;\n  return (\n    <PageSection\n      className={classNames(\"appsrv-marketing--banner\", {\n        \"pf-u-background-color-dark-100\": variant === \"dark\",\n        \"pf-u-background-color-100\": variant === \"light\",\n      })}\n      variant={\n        variant === \"dark\"\n          ? PageSectionVariants.dark\n          : PageSectionVariants.light\n      }\n      style={style}\n    >\n      <Stack hasGutter>\n        <Title headingLevel=\"h1\" size=\"2xl\">\n          {title}\n        </Title>\n        <Text\n          className={`appsrv-marketing--banner__tagline ${\n            variant === \"dark\" ? \"\" : \"pf-u-color-200\"\n          }`}\n        >\n          {tagLine}\n        </Text>\n        <Text component={TextVariants.p}>{description}</Text>\n        {description2 && (\n          <Text component={TextVariants.p} className=\"pf-u-mt-md\">\n            {description2}\n          </Text>\n        )}\n        {cta && <StackItem>{cta}</StackItem>}\n      </Stack>\n    </PageSection>\n  );\n};\n\nexport const MarketingPageBanner: FunctionComponent = ({ children }) => {\n  return (\n    <PageSection\n      variant={PageSectionVariants.light}\n      className=\"appsrv-marketing--page-section--marketing pf-u-background-color-100\"\n    >\n      <Bullseye>\n        <Text\n          component={TextVariants.p}\n          className=\"appsrv-marketing--banner--text-only\"\n        >\n          {children}\n        </Text>\n      </Bullseye>\n    </PageSection>\n  );\n};\n\nexport type MarketingPageSectionProps = {\n  className?: string;\n};\n\nexport const MarketingPageSection: FunctionComponent<\n  MarketingPageSectionProps & {\n    variant?: \"dark\" | \"light\" | \"default\";\n  }\n> = ({\n  className = \"appsrv-marketing--page-section--marketing\",\n  variant = \"default\",\n  children,\n}) => (\n  <PageSection\n    isWidthLimited\n    className={classNames(className, {\n      \"pf-u-background-color-dark-100\": variant === \"dark\",\n      \"pf-u-background-color-100\": variant === \"light\",\n    })}\n    variant={\n      variant === \"dark\"\n        ? PageSectionVariants.dark\n        : variant === \"light\"\n        ? PageSectionVariants.light\n        : PageSectionVariants.default\n    }\n  >\n    {children}\n  </PageSection>\n);\n\nexport const MarketingPageVideoCard: VoidFunctionComponent<{\n  src: string;\n  title: string;\n}> = ({ src, title }) => (\n  <Card className=\"appsrv-marketing--video\">\n    <div className=\"appsrv-marketing--video__wrapper\">\n      <iframe\n        src={src}\n        title={title}\n        frameBorder=\"0\"\n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n        allowFullScreen\n      ></iframe>\n    </div>\n  </Card>\n);\n","import {\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n  CardHeaderMain,\n  CardTitle,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Divider,\n  Flex,\n  FlexItem,\n  Grid,\n  Split,\n  SplitItem,\n  Stack,\n  Text,\n  TextContent,\n  TextVariants,\n  Title,\n} from \"@patternfly/react-core\";\nimport {\n  AppSpeedKeyArt,\n  ExternalLink,\n} from \"@rhoas/app-services-ui-components\";\nimport type { FunctionComponent } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { KafkaInstanceCapacityTable } from \"./KafkaInstanceCapacityTable\";\nimport { LogoAWS, LogoAzure, LogoGCP } from \"./Logos/images\";\nimport { MarketingPageHero, MarketingPageSection } from \"./MarketingPage\";\n\nexport const KafkaPageV3: FunctionComponent = () => {\n  const { t } = useTranslation([\"kafkaoverview-v3\"]);\n  return (\n    <>\n      <MarketingPageHero\n        title={t(\"heroTitle\")}\n        tagLine={t(\"heroTagline\")}\n        description={t(\"heroDescription\")}\n        heroImage={AppSpeedKeyArt}\n        heroImageSize={478}\n        heroImageCanRepeat={false}\n        heroImagePositionY={-99}\n      />\n      <MarketingPageSection>\n        <Grid hasGutter lg={6}>\n          <Card\n            ouiaId=\"card-overview-purchase-now\"\n            aria-label={t(\"kafkaoverview:purchaseCardTitle\")}\n          >\n            <CardHeader>\n              <CardHeaderMain>\n                <CardTitle>\n                  <Title headingLevel=\"h2\">\n                    <Trans\n                      ns={\"kafkaoverview-v3\"}\n                      i18nKey={\"purchaseCardTitle\"}\n                    >\n                      <span className=\"pf-u-color-200 pf-u-font-size-sm\"></span>\n                    </Trans>\n                  </Title>\n                </CardTitle>\n              </CardHeaderMain>\n            </CardHeader>\n            <CardBody>{t(\"purchaseCardMainText\")}</CardBody>\n            <CardFooter>\n              <Flex spaceItems={{ default: \"spaceItems2xl\" }}>\n                <FlexItem>\n                  <ExternalLink\n                    href={\n                      \"https://marketplace.redhat.com/en-us/products/red-hat-openshift-streams-for-apache-kafka\"\n                    }\n                    testId={\"cardPurchase-buttonRH\"}\n                    className={\"pf-u-ml-md \"}\n                  >\n                    <Trans\n                      ns={\"kafkaoverview-v3\"}\n                      i18nKey={\"purchaseCardCallToActionButtonRedHat\"}\n                      components={{\n                        bold: <strong />,\n                        size: <span className=\"pf-u-font-size-lg\" />,\n                      }}\n                    />\n                  </ExternalLink>\n                </FlexItem>\n\n                <FlexItem>\n                  <ExternalLink\n                    href={\n                      \"https://aws.amazon.com/marketplace/pp/prodview-3xohcoyuwkumc\"\n                    }\n                    testId={\"cardPurchase-buttonAWS\"}\n                    className={\"pf-u-ml-md\"}\n                  >\n                    <Trans\n                      ns={\"kafkaoverview-v3\"}\n                      i18nKey={\"purchaseCardCallToActionButtonAWS\"}\n                      components={{\n                        bold: <strong />,\n                        size: <span className=\"pf-u-font-size-lg\" />,\n                      }}\n                    />\n                  </ExternalLink>\n                </FlexItem>\n              </Flex>\n            </CardFooter>\n          </Card>\n          <Card\n            ouiaId=\"card-overview-contact-sales\"\n            aria-label={t(\"kafkaoverview:contactSalesCardTitle\")}\n          >\n            <CardHeader>\n              <CardTitle>\n                <Title headingLevel=\"h2\">\n                  <Trans\n                    ns={\"kafkaoverview-v3\"}\n                    i18nKey={\"contactSalesCardTitle\"}\n                  >\n                    <span className=\"pf-u-color-200 pf-u-font-size-sm\"></span>\n                  </Trans>\n                </Title>\n              </CardTitle>\n            </CardHeader>\n            <CardBody>{t(\"contactSalesCardMainText\")}</CardBody>\n            <CardFooter>\n              <ExternalLink\n                href={\n                  \"https://www.redhat.com/en/technologies/cloud-computing/openshift/openshift-streams-for-apache-kafka#contact-us\"\n                }\n                testId={\"cardContactSales-buttonCTA\"}\n                className={\"pf-u-ml-md\"}\n              >\n                <Trans\n                  ns={\"kafkaoverview-v3\"}\n                  i18nKey={\"contactSalesCardCallToActionButton\"}\n                  components={{\n                    bold: <strong />,\n                    size: <span className=\"pf-u-font-size-lg\" />,\n                  }}\n                />\n              </ExternalLink>\n            </CardFooter>\n          </Card>\n        </Grid>\n      </MarketingPageSection>\n      <MarketingPageSection\n        className={\"kafka-overview--page-section--marketing\"}\n      >\n        <Card>\n          <CardTitle>\n            <Title headingLevel=\"h2\">{t(\"pricingModalTitle\")}</Title>\n          </CardTitle>\n          <CardBody>\n            <Flex spaceItems={{ default: \"spaceItemsXl\" }}>\n              <Flex\n                alignSelf={{ default: \"alignSelfCenter\" }}\n                justifyContent={{ default: \"justifyContentCenter\" }}\n                flex={{ default: \"flex_1\" }}\n              >\n                <FlexItem>\n                  <DescriptionList isHorizontal>\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>\n                        {t(\"steamingUnit\")}\n                      </DescriptionListTerm>\n                      <DescriptionListDescription>\n                        {t(\"streamingUnit_price\")}\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>\n                        {t(\"dataTransfer\")}\n                      </DescriptionListTerm>\n                      <DescriptionListDescription>\n                        {t(\"dataTransfer_price\")}\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>{t(\"storage\")}</DescriptionListTerm>\n                      <DescriptionListDescription>\n                        {t(\"storage_price\")}\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                  </DescriptionList>\n                </FlexItem>\n              </Flex>\n              <Divider isVertical />\n              <FlexItem flex={{ default: \"flex_1\" }}>\n                <TextContent>\n                  <Text component={TextVariants.p}>\n                    <Trans\n                      ns={\"kafkaoverview-v3\"}\n                      i18nKey={\"streamingUnitText\"}\n                      components={{ bold: <strong /> }}\n                    />\n                  </Text>\n                </TextContent>\n              </FlexItem>\n            </Flex>\n          </CardBody>\n        </Card>\n      </MarketingPageSection>\n      <MarketingPageSection\n        className={\"kafka-overview--page-section--marketing\"}\n      >\n        <Card>\n          <CardTitle>\n            <Title headingLevel=\"h2\">{t(\"kafkaInstanceCapacityTitle\")}</Title>\n          </CardTitle>\n          <CardBody>\n            <Stack hasGutter>\n              <Text component={TextVariants.p}>\n                {t(\"kafkaInstanceCapacityDescription\")}\n              </Text>\n              <KafkaInstanceCapacityTable />\n            </Stack>\n          </CardBody>\n          <CardFooter>\n            <TextContent className={\"pf-u-font-size-sm\"}>\n              <Trans\n                ns={\"kafkaoverview-v3\"}\n                i18nKey={\"kafkaInstanceCapacityfooter\"}\n                components={[\n                  <ExternalLink\n                    href={\"https://access.redhat.com/support\"}\n                    testId={\"SupportLink\"}\n                    className={\"pf-u-ml-xs\"}\n                  />,\n                  <ExternalLink\n                    href={\n                      \"https://access.redhat.com/documentation/en-us/red_hat_openshift_streams_for_apache_kafka/1/guide/aced8e5e-8229-4cb2-82f9-87a8caa24bb3\"\n                    }\n                    testId={\"MonitoringDiskSpaceLink\"}\n                    className={\"pf-u-ml-xs\"}\n                  />,\n                ]}\n              />\n            </TextContent>\n          </CardFooter>\n        </Card>\n      </MarketingPageSection>\n      <MarketingPageSection\n        className={\"kafka-overview--page-section--marketing\"}\n      >\n        <Card>\n          <CardTitle>\n            <Title headingLevel=\"h2\">{t(\"cloudProvidersTitle\")}</Title>\n          </CardTitle>\n          <CardBody>\n            <Flex\n              spaceItems={{ default: \"spaceItemsXl\" }}\n              direction={{ default: \"column\", xl: \"row\" }}\n            >\n              <Flex\n                justifyContent={{ default: \"justifyContentCenter\" }}\n                flex={{ default: \"flex_1\" }}\n              >\n                <FlexItem>\n                  <Split hasGutter>\n                    <SplitItem>\n                      <img src={LogoAWS} alt={\"\"} style={{ height: \"60px\" }} />\n                    </SplitItem>\n                    <SplitItem>\n                      <Title headingLevel=\"h2\" className={\"pf-u-pt-sm\"}>\n                        {t(\"awsWebServiceTitle\")}\n                      </Title>\n                    </SplitItem>\n                  </Split>\n                </FlexItem>\n              </Flex>\n              <Divider\n                orientation={{ default: \"horizontal\", xl: \"vertical\" }}\n              />\n              <Flex\n                justifyContent={{ default: \"justifyContentCenter\" }}\n                flex={{ default: \"flex_1\" }}\n              >\n                <FlexItem>\n                  <Split hasGutter>\n                    <SplitItem>\n                      <img src={LogoGCP} alt={\"\"} style={{ height: \"60px\" }} />\n                    </SplitItem>\n                    <SplitItem>\n                      <Title headingLevel=\"h2\" className={\"pf-u-pt-sm\"}>\n                        {t(\"googleCloudProviderTitle\")}\n                      </Title>\n                      <Text\n                        component={TextVariants.p}\n                        className={\"pf-u-color-200\"}\n                      >\n                        {t(\"googleCloudProviderDescription\")}\n                      </Text>\n                    </SplitItem>\n                  </Split>\n                </FlexItem>\n              </Flex>\n              <Divider\n                orientation={{ default: \"horizontal\", xl: \"vertical\" }}\n              />\n              <Flex\n                justifyContent={{ default: \"justifyContentCenter\" }}\n                flex={{ default: \"flex_1\" }}\n              >\n                <FlexItem>\n                  <Split hasGutter>\n                    <SplitItem>\n                      <img\n                        src={LogoAzure}\n                        alt={\"\"}\n                        style={{ height: \"60px\" }}\n                      />\n                    </SplitItem>\n                    <SplitItem>\n                      <Title headingLevel=\"h2\" className={\"pf-u-pt-sm\"}>\n                        {t(\"microsoftAzureTitle\")}\n                      </Title>\n                      <Text\n                        component={TextVariants.p}\n                        className={\"pf-u-color-200\"}\n                      >\n                        {t(\"microsoftAzureDescription\")}\n                      </Text>\n                    </SplitItem>\n                  </Split>\n                </FlexItem>\n              </Flex>\n            </Flex>\n          </CardBody>\n        </Card>\n      </MarketingPageSection>\n    </>\n  );\n};\n","import {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { PlusCircleIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nexport type EmptyStateNoTopicProps = {\n  onCreateTopic: () => void;\n};\n\nexport const EmptyStateNoTopic: VoidFunctionComponent<\n  EmptyStateNoTopicProps\n> = ({ onCreateTopic }) => {\n  const { t } = useTranslation(\"topic\");\n\n  return (\n    <EmptyState\n      data-ouia-page-id=\"emptyStateTopics\"\n      variant={EmptyStateVariant.large}\n    >\n      <EmptyStateIcon icon={PlusCircleIcon} />\n      <Title headingLevel=\"h2\" size=\"lg\">\n        {t(\"empty_topics_title\")}\n      </Title>\n      <EmptyStateBody>{t(\"empty_topics_body\")}</EmptyStateBody>\n      <Button\n        data-testid=\"actionCreateTopic\"\n        ouiaId=\"button-create\"\n        variant=\"primary\"\n        onClick={onCreateTopic}\n      >\n        {t(\"create_topic\")}\n      </Button>\n    </EmptyState>\n  );\n};\n","import { RetentionSizeUnits, RetentionTimeUnits } from \"../../types\";\n\nexport const unitsToBytes = {\n  [RetentionSizeUnits.BYTE]: 1,\n  [RetentionSizeUnits.KIBIBYTE]: 1024,\n  [RetentionSizeUnits.MEBIBYTE]: 1048576,\n  [RetentionSizeUnits.GIBIBYTE]: 1073741824,\n  [RetentionSizeUnits.TEBIBYTE]: 1.0995116e12,\n};\n\nexport const unitsToMilliSecond = {\n  [RetentionTimeUnits.MILLISECOND]: 1,\n  [RetentionTimeUnits.SECOND]: 1000,\n  [RetentionTimeUnits.MINUTE]: 60000,\n  [RetentionTimeUnits.HOUR]: 3600000,\n  [RetentionTimeUnits.DAY]: 86400000,\n};\n\ntype ConversionUnit = {\n  value: number;\n  unit: string;\n};\n\nexport const millisecondsToTime = (value: number): ConversionUnit => {\n  if (value) {\n    if (value % unitsToMilliSecond.days == 0)\n      return { value: value / unitsToMilliSecond.days, unit: \"days\" };\n    if (value % unitsToMilliSecond.hours == 0)\n      return { value: value / unitsToMilliSecond.hours, unit: \"hours\" };\n    if (value % unitsToMilliSecond.minutes == 0)\n      return { value: value / unitsToMilliSecond.minutes, unit: \"minutes\" };\n    if (value % unitsToMilliSecond.seconds == 0)\n      return { value: value / unitsToMilliSecond.seconds, unit: \"seconds\" };\n  }\n\n  return { value, unit: \"milliseconds\" };\n};\n\nexport const formattedRetentionTime = (time: number): string => {\n  const { unit, value } = millisecondsToTime(time);\n  return Number(value) === -1 ? \"Unlimited\" : `${time} ms (${value} ${unit})`;\n};\n\nexport const formattedRetentionSize = (size: number): string => {\n  const { unit, value } = bytesToMemorySize(size);\n  return Number(value) === -1\n    ? \"Unlimited\"\n    : `${size} bytes (${value} ${unit})`;\n};\n\nexport const bytesToMemorySize = (value: number): ConversionUnit => {\n  if (value) {\n    if (value % unitsToBytes.tebibytes == 0)\n      return { value: value / unitsToBytes.tebibytes, unit: \"tebibytes\" };\n    if (value % unitsToBytes.gibibytes == 0)\n      return { value: value / unitsToBytes.gibibytes, unit: \"gibibytes\" };\n    if (value % unitsToBytes.mebibytes == 0)\n      return { value: value / unitsToBytes.mebibytes, unit: \"mebibytes\" };\n    if (value % unitsToBytes.kibibytes == 0)\n      return { value: value / unitsToBytes.kibibytes, unit: \"kibibytes\" };\n  }\n\n  return { value, unit: \"bytes\" };\n};\n","import { Button } from \"@patternfly/react-core\";\nimport { TableVariant } from \"@patternfly/react-table\";\nimport type { TableViewProps } from \"@rhoas/app-services-ui-components\";\nimport {\n  EmptyStateNoResults,\n  TableView,\n} from \"@rhoas/app-services-ui-components\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport type { KafkaTopic, KafkaTopicField } from \"../../types\";\nimport type { EmptyStateNoTopicProps } from \"./components\";\nimport { EmptyStateNoTopic } from \"./components\";\nimport { formattedRetentionSize, formattedRetentionTime } from \"./types\";\n\nconst Columns: KafkaTopicField[] = [\n  \"topic_name\",\n  \"partitions\",\n  \"retention_time\",\n  \"retention_size\",\n];\n\nexport type KafkaTopicsProps<T extends KafkaTopic> = {\n  topics: Array<T> | undefined;\n  getUrlFortopic: (row: T) => string;\n  onDelete: (row: T) => void;\n  onEdit: (row: T) => void;\n  topicName: string[];\n  onSearchTopic: (value: string) => void;\n  onRemoveTopicChip: (value: string) => void;\n  onRemoveTopicChips: () => void;\n  onTopicLinkClick: (row: T) => void;\n} & Pick<\n  TableViewProps<T, typeof Columns[number]>,\n  | \"itemCount\"\n  | \"page\"\n  | \"perPage\"\n  | \"onPageChange\"\n  | \"isRowSelected\"\n  | \"isColumnSortable\"\n  | \"onClearAllFilters\"\n> &\n  EmptyStateNoTopicProps;\n\nexport const KafkaTopics = <T extends KafkaTopic>({\n  topics,\n  onDelete,\n  onEdit,\n  isColumnSortable,\n  itemCount,\n  onSearchTopic,\n  topicName,\n  onClearAllFilters,\n  onCreateTopic,\n  page,\n  perPage,\n  onPageChange,\n  onRemoveTopicChip,\n  onRemoveTopicChips,\n  getUrlFortopic,\n  onTopicLinkClick,\n}: KafkaTopicsProps<T>) => {\n  const { t } = useTranslation(\"topic\");\n\n  const labels: { [field in KafkaTopicField]: string } = {\n    topic_name: t(\"topic_name\"),\n    partitions: t(\"partitions\"),\n    retention_time: t(\"retention_time\"),\n    retention_size: t(\"retention_size\"),\n  };\n\n  const isFiltered = topicName.length > 0;\n  return (\n    <TableView\n      variant={TableVariant.compact}\n      tableOuiaId={\"card-table\"}\n      ariaLabel={t(\"topic_list_table\")}\n      data={topics}\n      columns={Columns}\n      renderHeader={({ column, Th, key }) => (\n        <Th key={key}>{labels[column]}</Th>\n      )}\n      renderCell={({ column, row, Td, key }) => {\n        return (\n          <Td key={key} dataLabel={labels[column]}>\n            {(() => {\n              switch (column) {\n                case \"topic_name\":\n                  return (\n                    <Button\n                      variant=\"link\"\n                      component={(props) => (\n                        <Link\n                          to={getUrlFortopic(row)}\n                          {...props}\n                          data-testid=\"tableTopics-linkTopic\"\n                          data-ouia-component-id=\"table-link\"\n                        >\n                          {row.topic_name}\n                        </Link>\n                      )}\n                      onClick={() => onTopicLinkClick(row)}\n                      isInline\n                    />\n                  );\n                case \"partitions\":\n                  return row.partitions;\n                case \"retention_time\":\n                  return formattedRetentionTime(\n                    row.retention_time ? parseInt(row.retention_time, 10) : 0\n                  );\n                case \"retention_size\":\n                  return formattedRetentionSize(\n                    row.retention_size ? parseInt(row.retention_size, 10) : 0\n                  );\n                default:\n                  return row[column];\n              }\n            })()}\n          </Td>\n        );\n      }}\n      renderActions={({ row, ActionsColumn }) => (\n        <ActionsColumn\n          items={[\n            {\n              title: t(\"table.actions.edit\"),\n              onClick: () => onEdit(row),\n            },\n            {\n              title: t(\"table.actions.delete\"),\n              onClick: () => onDelete(row),\n            },\n          ]}\n        />\n      )}\n      isColumnSortable={isColumnSortable}\n      filters={{\n        [labels.topic_name]: {\n          type: \"search\",\n          chips: topicName,\n          onSearch: onSearchTopic,\n          onRemoveChip: onRemoveTopicChip,\n          onRemoveGroup: onRemoveTopicChips,\n          validate: (value: string) => !/[\"$^<>|+%/;:,\\s*=~#()]/.test(value),\n          errorMessage: t(\"input_field_invalid_message\"),\n        },\n      }}\n      actions={[\n        {\n          label: t(\"create_topic\"),\n          onClick: onCreateTopic,\n          isPrimary: true,\n        },\n      ]}\n      itemCount={itemCount}\n      page={page}\n      onPageChange={onPageChange}\n      perPage={perPage}\n      isFiltered={isFiltered}\n      onClearAllFilters={onClearAllFilters}\n      emptyStateNoData={<EmptyStateNoTopic onCreateTopic={onCreateTopic} />}\n      emptyStateNoResults={<EmptyStateNoResults />}\n    ></TableView>\n  );\n};\n","import type { CardKafkaInstanceMetricsLimits } from \"./components\";\n\nexport type TimeSeriesMetrics = { [timestamp: number]: number };\nexport type PartitionBytesMetric = { [partition: string]: TimeSeriesMetrics };\n\nexport enum DurationOptions {\n  Last5minutes = 5,\n  Last15minutes = 15,\n  Last30minutes = 30,\n  Last1hour = 60,\n  Last3hours = 3 * 60,\n  Last6hours = 6 * 60,\n  Last12hours = 12 * 60,\n  Last24hours = 24 * 60,\n  Last2days = 2 * 24 * 60,\n  Last7days = 7 * 24 * 60,\n}\n\nexport type GetTopicsMetricsResponse = {\n  kafkaTopics: string[];\n  metricsTopics: string[];\n  bytesOutgoing: TimeSeriesMetrics;\n  bytesIncoming: TimeSeriesMetrics;\n  bytesPerPartition: PartitionBytesMetric;\n  incomingMessageRate: TimeSeriesMetrics;\n};\n\nexport type GetKafkaInstanceMetricsResponse = {\n  usedDiskSpaceMetrics: TimeSeriesMetrics;\n  clientConnectionsMetrics: TimeSeriesMetrics;\n  connectionAttemptRateMetrics: TimeSeriesMetrics;\n} & CardKafkaInstanceMetricsLimits;\n\nexport type GetMetricsKpiResponse = {\n  topics: number;\n  topicPartitions: number;\n  consumerGroups: number;\n  topicPartitionsLimit: number;\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateVariant,\n} from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\n\nexport const EmptyStateInitialLoading: VoidFunctionComponent = () => {\n  return (\n    <EmptyState variant={EmptyStateVariant.xs}>\n      <EmptyStateBody data-chromatic=\"ignore\">\n        <AppServicesLoading />\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { TachometerAltIcon } from \"@patternfly/react-icons\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const EmptyStateMetricsUnavailable: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState variant={EmptyStateVariant.xs}>\n      <EmptyStateIcon icon={TachometerAltIcon} />\n      <Title headingLevel=\"h3\" size=\"lg\">\n        {t(\"metrics:empty_state_no_data_title\")}\n      </Title>\n      <EmptyStateBody>{t(\"metrics:empty_state_no_data_body\")}</EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import { Grid, GridItem, PageSection } from \"@patternfly/react-core\";\nimport type { FunctionComponent, ReactElement } from \"react\";\n\ntype MetricsLayoutProps = {\n  metricsLagAlert: ReactElement;\n  topicsKpi: ReactElement;\n  topicPartitionsKpi: ReactElement;\n  consumerGroupKpi: ReactElement;\n  diskSpaceMetrics: ReactElement;\n  topicMetrics: ReactElement;\n};\nexport const MetricsLayout: FunctionComponent<MetricsLayoutProps> = ({\n  metricsLagAlert,\n  topicsKpi,\n  topicPartitionsKpi,\n  consumerGroupKpi,\n  diskSpaceMetrics,\n  topicMetrics,\n}) => {\n  return (\n    <PageSection hasOverflowScroll={true} aria-label={\"TODO\"}>\n      <Grid hasGutter>\n        <GridItem>{metricsLagAlert}</GridItem>\n        <GridItem sm={4}>{topicsKpi}</GridItem>\n        <GridItem sm={4}>{topicPartitionsKpi}</GridItem>\n        <GridItem sm={4}>{consumerGroupKpi}</GridItem>\n        <GridItem lg={6}>{diskSpaceMetrics}</GridItem>\n        <GridItem lg={6}>{topicMetrics}</GridItem>\n      </Grid>\n    </PageSection>\n  );\n};\n","import { CardBody, Bullseye, Spinner } from \"@patternfly/react-core\";\nimport type { FunctionComponent } from \"react\";\n\nexport const CardBodyLoading: FunctionComponent = () => (\n  <CardBody>\n    <Bullseye>\n      <Spinner isSVG data-chromatic=\"ignore\" />\n    </Bullseye>\n  </CardBody>\n);\n","import { DurationOptions } from \"./types\";\n\nexport const timeIntervalsMapping = {\n  [DurationOptions.Last5minutes]: {\n    interval: 1 * 60,\n    ticks: 6,\n    showDate: false,\n  },\n  [DurationOptions.Last15minutes]: {\n    interval: 3 * 60,\n    ticks: 6,\n    showDate: false,\n  },\n  [DurationOptions.Last30minutes]: {\n    interval: 5 * 60,\n    ticks: 7,\n    showDate: false,\n  },\n  [DurationOptions.Last1hour]: { interval: 10 * 60, ticks: 6, showDate: false },\n  [DurationOptions.Last3hours]: {\n    interval: 30 * 60,\n    ticks: 7,\n    showDate: false,\n  },\n  [DurationOptions.Last6hours]: {\n    interval: 1 * 60 * 60,\n    ticks: 7,\n    showDate: false,\n  },\n  [DurationOptions.Last12hours]: {\n    interval: 2 * 60 * 60,\n    ticks: 7,\n    showDate: false,\n  },\n  [DurationOptions.Last24hours]: {\n    interval: 4 * 60 * 60,\n    ticks: 7,\n    showDate: true,\n  },\n  [DurationOptions.Last2days]: {\n    interval: 8 * 60 * 60,\n    ticks: 7,\n    showDate: true,\n  },\n  [DurationOptions.Last7days]: {\n    interval: 24 * 60 * 60,\n    ticks: 8,\n    showDate: true,\n  },\n} as const;\n\nexport const chartHeight = 350;\nexport const chartPadding = {\n  bottom: 110, // Adjusted to accomodate legend\n  left: 120,\n  right: 40,\n  top: 10,\n};\n","import { Flex, FlexItem, Skeleton } from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { chartHeight, chartPadding } from \"../consts\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const ChartSkeletonLoader: VoidFunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <Flex direction={{ default: \"column\" }} data-chromatic=\"ignore\">\n      <FlexItem>\n        <Skeleton\n          height={`${chartHeight - chartPadding.bottom}px`}\n          screenreaderText={t(\"common:skeleton_loader_screenreader_text\")}\n        />\n      </FlexItem>\n      <FlexItem>\n        <Skeleton height={`${chartPadding.bottom / 2 - 12.5}px`} width=\"20%\" />\n      </FlexItem>\n      <FlexItem>\n        <Skeleton height={`${chartPadding.bottom / 2 - 12.5}px`} width=\"40%\" />\n      </FlexItem>\n    </Flex>\n  );\n};\n","import type { RefObject } from \"react\";\nimport { useEffect, useLayoutEffect, useRef, useState } from \"react\";\n\nexport function useChartWidth(): [RefObject<HTMLDivElement>, number] {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [width, setWidth] = useState<number>(0);\n\n  const handleResize = () =>\n    containerRef.current && setWidth(containerRef.current.clientWidth);\n\n  useLayoutEffect(() => {\n    handleResize();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n  return [containerRef, width];\n}\n","import byteSize from \"byte-size\";\nimport { fromUnixTime, sub } from \"date-fns\";\nimport { formatInTimeZone } from \"date-fns-tz\";\nimport { timeIntervalsMapping } from \"../consts\";\nimport type { DurationOptions } from \"../types\";\n\nexport function formatBytes(bytes: number): string {\n  return byteSize(bytes, { units: \"iec\" }).toString();\n}\n\nexport const shouldShowDate = (timeDuration: DurationOptions): boolean => {\n  return timeIntervalsMapping[timeDuration].showDate;\n};\n\nexport const dateToChartValue = (\n  timestamp: number,\n  { showDate }: { showDate: boolean } = { showDate: false }\n): string => {\n  const date = fromUnixTime(timestamp / 1000);\n  return formatInTimeZone(date, \"utc\", showDate ? \"HH:mm'\\n'MMM dd\" : \"HH:mm\");\n};\n\nexport function timestampsToTicks(\n  timestamps: string[],\n  duration: DurationOptions\n): number[] {\n  const allTimestamps = [...timestamps];\n  allTimestamps.sort();\n  const mostRecentTs =\n    parseInt(allTimestamps[allTimestamps.length - 1]) || Date.now();\n  return new Array(\n    Math.max(timeIntervalsMapping[duration].ticks, allTimestamps.length)\n  )\n    .fill(mostRecentTs)\n    .map((d: number, index) =>\n      sub(new Date(d), {\n        seconds: timeIntervalsMapping[duration].interval * index,\n      }).getTime()\n    );\n}\n","import type { ChartVoronoiContainerProps } from \"@patternfly/react-charts\";\nimport {\n  Chart,\n  ChartArea,\n  ChartAxis,\n  ChartGroup,\n  ChartLegend,\n  ChartThemeColor,\n  ChartThreshold,\n  ChartVoronoiContainer,\n} from \"@patternfly/react-charts\";\nimport {\n  chart_color_black_500,\n  chart_color_blue_300,\n} from \"@patternfly/react-tokens\";\nimport type { ReactElement, VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { chartHeight, chartPadding } from \"../consts\";\nimport type { DurationOptions, TimeSeriesMetrics } from \"../types\";\nimport { ChartSkeletonLoader } from \"./ChartSkeletonLoader\";\nimport { useChartWidth } from \"./useChartWidth\";\nimport { dateToChartValue, shouldShowDate, timestampsToTicks } from \"./utils\";\n\ntype ChartData = {\n  areaColor: string;\n  softLimitColor: string;\n  area: BrokerChartData[];\n  softLimit: BrokerChartData[];\n};\n\ntype BrokerChartData = {\n  name: string;\n  x: number;\n  y: number;\n};\n\ntype LegendData = {\n  name: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n};\n\ntype ChartLinearWithOptionalLimitProps = {\n  metrics: TimeSeriesMetrics;\n  duration: DurationOptions;\n  chartName: string;\n  xLabel?: string;\n  yLabel?: string;\n  usageLimit?: number;\n  formatValue?: (d: number) => string;\n  isLoading: boolean;\n  emptyState: ReactElement;\n};\n\nexport const ChartLinearWithOptionalLimit: VoidFunctionComponent<\n  ChartLinearWithOptionalLimitProps\n> = ({\n  metrics,\n  duration,\n  chartName,\n  xLabel,\n  yLabel,\n  usageLimit,\n  formatValue = (d) => `${d}`,\n  isLoading,\n  emptyState,\n}) => {\n  const { t } = useTranslation();\n  const [containerRef, width] = useChartWidth();\n\n  const itemsPerRow = width && width > 650 ? 6 : 3;\n\n  const { chartData, legendData, tickValues } = getChartData(\n    metrics,\n    duration,\n    chartName,\n    t(\"metrics:limit\"),\n    usageLimit\n  );\n\n  const hasMetrics = Object.keys(metrics).length > 0;\n  const showDate = shouldShowDate(duration);\n\n  switch (true) {\n    case isLoading:\n      return <ChartSkeletonLoader />;\n    case !hasMetrics:\n      return emptyState;\n    default: {\n      const labels: ChartVoronoiContainerProps[\"labels\"] = ({ datum }) =>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/restrict-template-expressions,@typescript-eslint/no-unsafe-argument\n        `${datum.name}: ${formatValue(datum.y)}`;\n      return (\n        <div ref={containerRef}>\n          <Chart\n            ariaTitle={chartName}\n            containerComponent={\n              <ChartVoronoiContainer labels={labels} constrainToVisibleArea />\n            }\n            legendPosition=\"bottom-left\"\n            legendComponent={\n              <ChartLegend\n                orientation={\"horizontal\"}\n                data={legendData}\n                itemsPerRow={itemsPerRow}\n              />\n            }\n            height={chartHeight}\n            padding={chartPadding}\n            themeColor={ChartThemeColor.multiUnordered}\n            width={width}\n            legendAllowWrap={true}\n          >\n            <ChartAxis\n              label={\"\\n\" + (xLabel || t(\"metrics:axis-label-time\") || \"\")}\n              tickValues={tickValues}\n              tickFormat={(d: number) =>\n                dateToChartValue(d, {\n                  showDate,\n                })\n              }\n            />\n            <ChartAxis\n              label={\"\\n\\n\\n\\n\\n\" + (yLabel || chartName)}\n              dependentAxis\n              tickFormat={formatValue}\n            />\n            <ChartGroup>\n              {chartData.map((value, index) => (\n                <ChartArea\n                  key={`chart-area-${index}`}\n                  data={value.area}\n                  style={{\n                    data: {\n                      // TODO: check if this is needed\n                      // stroke: value.color,\n                    },\n                  }}\n                />\n              ))}\n            </ChartGroup>\n            <ChartThreshold\n              key={`chart-softlimit`}\n              data={chartData[0].softLimit}\n              style={{\n                data: {\n                  stroke: chartData[0].softLimitColor,\n                },\n              }}\n            />\n          </Chart>\n        </div>\n      );\n    }\n  }\n};\n\nfunction getChartData(\n  metrics: TimeSeriesMetrics,\n  duration: number,\n  lineLabel: string,\n  limitLabel: string,\n  usageLimit?: number\n): {\n  legendData: Array<LegendData>;\n  chartData: Array<ChartData>;\n  tickValues: number[];\n} {\n  const legendData = [\n    usageLimit\n      ? {\n          name: limitLabel,\n          symbol: { fill: chart_color_black_500.value, type: \"threshold\" },\n        }\n      : undefined,\n    { name: lineLabel, symbol: { fill: chart_color_blue_300.value } },\n  ].filter((d) => !!d) as Array<LegendData>;\n\n  const areaColor = chart_color_blue_300.value;\n  const softLimitColor = chart_color_black_500.value;\n  const chartData: Array<ChartData> = [];\n  const area: Array<BrokerChartData> = [];\n  const softLimit: Array<BrokerChartData> = [];\n\n  Object.entries(metrics).map(([timestamp, bytes]) => {\n    area.push({ name: lineLabel, x: parseInt(timestamp, 10), y: bytes });\n  });\n  chartData.push({ areaColor, softLimitColor, area, softLimit });\n\n  const tickValues = timestampsToTicks(Object.keys(metrics), duration);\n\n  if (usageLimit) {\n    tickValues.forEach((timestamp) =>\n      softLimit.push({\n        name: limitLabel,\n        x: timestamp,\n        y: usageLimit,\n      })\n    );\n  }\n\n  return {\n    legendData,\n    chartData,\n    tickValues,\n  };\n}\n","import type { ChartVoronoiContainerProps } from \"@patternfly/react-charts\";\nimport {\n  Chart,\n  ChartArea,\n  ChartAxis,\n  ChartGroup,\n  ChartLegend,\n  ChartThemeColor,\n  ChartVoronoiContainer,\n} from \"@patternfly/react-charts\";\nimport {\n  chart_color_blue_300,\n  chart_color_cyan_300,\n} from \"@patternfly/react-tokens\";\nimport type { FunctionComponent, ReactElement } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { chartHeight, chartPadding } from \"../consts\";\nimport type { PartitionBytesMetric } from \"../types\";\nimport { ChartSkeletonLoader } from \"./ChartSkeletonLoader\";\nimport { useChartWidth } from \"./useChartWidth\";\nimport {\n  dateToChartValue,\n  formatBytes,\n  shouldShowDate,\n  timestampsToTicks,\n} from \"./utils\";\n\nconst colors = [chart_color_cyan_300.value, chart_color_blue_300.value];\n\ntype ChartData = {\n  color: string;\n  area: PartitionChartData[];\n};\n\ntype PartitionChartData = {\n  name: string;\n  x: number;\n  y: number;\n};\n\ntype LegendData = {\n  name: string;\n};\n\nexport type ChartLogSizePerPartitionProps = {\n  partitions: PartitionBytesMetric;\n  topic: string | undefined;\n  duration: number;\n  isLoading: boolean;\n  emptyState: ReactElement;\n};\nexport const ChartLogSizePerPartition: FunctionComponent<\n  ChartLogSizePerPartitionProps\n> = ({ partitions, topic, duration, isLoading, emptyState }) => {\n  const { t } = useTranslation();\n  const [containerRef, width] = useChartWidth();\n\n  const itemsPerRow = width && width > 650 ? 6 : 3;\n\n  const { chartData, legendData, tickValues } = getChartData(\n    partitions,\n    topic,\n    duration\n  );\n\n  const hasMetrics = Object.keys(partitions).length > 0;\n\n  const showDate = shouldShowDate(duration);\n\n  return (\n    <div ref={containerRef}>\n      {(() => {\n        switch (true) {\n          case isLoading:\n            return <ChartSkeletonLoader />;\n          case !hasMetrics:\n            return emptyState;\n          default: {\n            const labels: ChartVoronoiContainerProps[\"labels\"] = ({ datum }) =>\n              // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/restrict-template-expressions,@typescript-eslint/no-unsafe-argument\n              `${datum.name}: ${formatBytes(datum.y)}`;\n\n            return (\n              <Chart\n                ariaTitle={t(\"metrics:log_size_per_partition\")}\n                containerComponent={\n                  <ChartVoronoiContainer\n                    labels={labels}\n                    constrainToVisibleArea\n                  />\n                }\n                legendPosition=\"bottom-left\"\n                legendComponent={\n                  <ChartLegend data={legendData} itemsPerRow={itemsPerRow} />\n                }\n                height={chartHeight}\n                padding={chartPadding}\n                themeColor={ChartThemeColor.multiOrdered}\n                width={width}\n                legendAllowWrap={true}\n              >\n                <ChartAxis\n                  label={\"\\n\" + t(\"metrics:axis-label-time\")}\n                  tickValues={tickValues}\n                  tickFormat={(d: number) =>\n                    dateToChartValue(d, {\n                      showDate,\n                    })\n                  }\n                />\n                <ChartAxis\n                  label={\"\\n\\n\\n\\n\\n\" + t(\"metrics:axis-label-bytes\")}\n                  dependentAxis\n                  tickFormat={formatBytes}\n                />\n                <ChartGroup>\n                  {chartData.map((value, index) => (\n                    <ChartArea key={`chart-area-${index}`} data={value.area} />\n                  ))}\n                </ChartGroup>\n              </Chart>\n            );\n          }\n        }\n      })()}\n    </div>\n  );\n};\n\nexport function getChartData(\n  partitions: PartitionBytesMetric,\n  topic: string | undefined,\n  duration: number\n): {\n  legendData: Array<LegendData>;\n  chartData: Array<ChartData>;\n  tickValues: number[];\n} {\n  const legendData: Array<LegendData> = [];\n  const chartData: Array<ChartData> = [];\n  Object.entries(partitions).map(([partition, dataMap], index) => {\n    const name = topic ? `${topic}: ${partition}` : partition;\n    const color = colors[index];\n    legendData.push({\n      name,\n    });\n    const area: Array<PartitionChartData> = [];\n\n    Object.entries(dataMap).map(([timestamp, value]) => {\n      area.push({ name, x: parseInt(timestamp, 10), y: value });\n    });\n    chartData.push({ color, area });\n  });\n\n  const allTimestamps = Array.from(\n    new Set(Object.values(partitions).flatMap((m) => Object.keys(m)))\n  );\n  const tickValues = timestampsToTicks(allTimestamps, duration);\n\n  return {\n    legendData,\n    chartData,\n    tickValues,\n  };\n}\n","import { Popover } from \"@patternfly/react-core\";\nimport { OutlinedQuestionCircleIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\ntype ChartPopoverProps = {\n  title: string;\n  description: string;\n};\n\nexport const ChartPopover: VoidFunctionComponent<ChartPopoverProps> = ({\n  title,\n  description,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <Popover\n      aria-label={title}\n      headerContent={<div>{title}</div>}\n      bodyContent={<div>{description}</div>}\n    >\n      <OutlinedQuestionCircleIcon\n        aria-label={t(\"metrics:chart-popover-icon-screenreader-text\", {\n          title,\n        })}\n      />\n    </Popover>\n  );\n};\n","import type { ChartVoronoiContainerProps } from \"@patternfly/react-charts\";\nimport {\n  Chart,\n  ChartAxis,\n  ChartGroup,\n  ChartLegend,\n  ChartLine,\n  ChartThemeColor,\n  ChartVoronoiContainer,\n} from \"@patternfly/react-charts\";\nimport {\n  chart_color_blue_300,\n  chart_color_green_300,\n} from \"@patternfly/react-tokens\";\nimport type { FunctionComponent, ReactElement } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { chartHeight, chartPadding, timeIntervalsMapping } from \"../consts\";\nimport type { TimeSeriesMetrics } from \"../types\";\nimport { ChartSkeletonLoader } from \"./ChartSkeletonLoader\";\nimport { useChartWidth } from \"./useChartWidth\";\nimport {\n  dateToChartValue,\n  formatBytes,\n  shouldShowDate,\n  timestampsToTicks,\n} from \"./utils\";\n\ntype ChartData = {\n  color: string;\n  line: TopicChartData[];\n};\n\ntype TopicChartData = {\n  name: string;\n  x: number;\n  y: number;\n};\n\ntype LegendData = {\n  name: string;\n  symbol: {\n    fill: string;\n    type?: string;\n  };\n};\n\ntype ChartTotalBytesProps = {\n  incomingTopicsData: TimeSeriesMetrics;\n  outgoingTopicsData: TimeSeriesMetrics;\n  selectedTopic: string | undefined;\n  duration: number;\n  isLoading: boolean;\n  emptyState: ReactElement;\n};\nexport const ChartTotalBytes: FunctionComponent<ChartTotalBytesProps> = ({\n  incomingTopicsData,\n  outgoingTopicsData,\n  selectedTopic,\n  duration,\n  isLoading,\n  emptyState,\n}) => {\n  const { t } = useTranslation();\n  const [containerRef, width] = useChartWidth();\n\n  const itemsPerRow = width && width > 650 ? 6 : 3;\n\n  const { chartData, legendData, tickValues } = getBytesChartData(\n    incomingTopicsData,\n    outgoingTopicsData,\n    duration,\n    selectedTopic\n      ? t(\"metrics:incoming_bytes\", {\n          topic: selectedTopic,\n        })\n      : t(\"metrics:incoming_bytes_all_topics\"),\n    selectedTopic\n      ? t(\"metrics:outgoing_bytes\", {\n          topic: selectedTopic,\n        })\n      : t(\"metrics:outgoing_bytes_all_topics\")\n  );\n\n  const hasMetrics =\n    Object.keys(incomingTopicsData).length > 0 ||\n    Object.keys(outgoingTopicsData).length > 0;\n\n  const showDate = shouldShowDate(duration);\n\n  switch (true) {\n    case isLoading:\n      return <ChartSkeletonLoader />;\n    case !hasMetrics:\n      return emptyState;\n    default: {\n      const labels: ChartVoronoiContainerProps[\"labels\"] =\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/restrict-template-expressions,@typescript-eslint/no-unsafe-argument\n        ({ datum }) => `${datum.name}: ${formatBytes(datum.y)}`;\n      return (\n        <div ref={containerRef}>\n          <Chart\n            ariaTitle={t(\"metrics:total_bytes\")}\n            containerComponent={\n              <ChartVoronoiContainer labels={labels} constrainToVisibleArea />\n            }\n            legendAllowWrap={true}\n            legendPosition=\"bottom-left\"\n            legendComponent={\n              <ChartLegend data={legendData} itemsPerRow={itemsPerRow} />\n            }\n            height={chartHeight}\n            padding={chartPadding}\n            themeColor={ChartThemeColor.multiUnordered}\n            width={width}\n          >\n            <ChartAxis\n              label={\"\\n\" + t(\"metrics:axis-label-time\")}\n              tickValues={tickValues}\n              tickCount={timeIntervalsMapping[duration].ticks}\n              tickFormat={(d: number) =>\n                dateToChartValue(d, {\n                  showDate,\n                })\n              }\n            />\n            <ChartAxis\n              label={\"\\n\\n\\n\\n\\n\" + t(\"metrics:axis-label-bytes\")}\n              dependentAxis\n              tickFormat={formatBytes}\n            />\n            <ChartGroup>\n              {chartData.map((value, index) => (\n                <ChartLine\n                  key={`chart-line-${index}`}\n                  data={value.line}\n                  style={{\n                    data: {\n                      stroke: value.color,\n                    },\n                  }}\n                />\n              ))}\n            </ChartGroup>\n          </Chart>\n        </div>\n      );\n    }\n  }\n};\n\nexport function getBytesChartData(\n  incomingTopic: TimeSeriesMetrics,\n  outgoingTopic: TimeSeriesMetrics,\n  duration: number,\n  incomingTopicName: string,\n  outgoingTopicName: string\n): {\n  legendData: Array<LegendData>;\n  chartData: Array<ChartData>;\n  tickValues: number[];\n} {\n  const legendData: Array<LegendData> = [];\n  const chartData: Array<ChartData> = [];\n\n  const incomingLine = metricsToLine(incomingTopic, incomingTopicName);\n  if (incomingLine.length > 0) {\n    const color = chart_color_blue_300.value;\n    chartData.push({ color, line: incomingLine });\n    legendData.push({\n      name: incomingTopicName,\n      symbol: {\n        fill: color,\n      },\n    });\n  }\n\n  const outgoingLine = metricsToLine(outgoingTopic, outgoingTopicName);\n  if (outgoingLine.length > 0) {\n    const color = chart_color_green_300.value;\n    chartData.push({ color, line: outgoingLine });\n    legendData.push({\n      name: outgoingTopicName,\n      symbol: {\n        fill: color,\n      },\n    });\n  }\n  const allTimestamps = Array.from(\n    new Set([...Object.keys(incomingTopic), ...Object.keys(outgoingTopic)])\n  );\n  const tickValues = timestampsToTicks(allTimestamps, duration);\n\n  return {\n    legendData,\n    chartData,\n    tickValues,\n  };\n}\n\nexport function metricsToLine(\n  metrics: TimeSeriesMetrics,\n  name: string\n): Array<TopicChartData> {\n  const line: Array<TopicChartData> = [];\n\n  Object.entries(metrics).map(([timestamp, bytes]) => {\n    line.push({ name, x: parseInt(timestamp, 10), y: bytes });\n  });\n  return line;\n}\n","import {\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { ExclamationTriangleIcon } from \"@patternfly/react-icons\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const EmptyStateNoMetricsData: FunctionComponent = () => {\n  const { t } = useTranslation([\"metrics\"]);\n  return (\n    <EmptyState variant={EmptyStateVariant.xs}>\n      <EmptyStateIcon\n        icon={ExclamationTriangleIcon}\n        color=\"var(--pf-global--warning-color--100)\"\n      />\n      <Title headingLevel=\"h3\" size=\"md\">\n        {t(\"metric_not_available\")}\n      </Title>\n    </EmptyState>\n  );\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { SearchIcon } from \"@patternfly/react-icons\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const EmptyStateNoMetricsDataForSelection: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState variant={EmptyStateVariant.xs}>\n      <EmptyStateIcon icon={SearchIcon} />\n      <Title headingLevel=\"h3\" size=\"lg\">\n        {t(\"metrics:empty_state_no_metrics_data_title\")}\n      </Title>\n      <EmptyStateBody>\n        {t(\"metrics:empty_state_no_metrics_data_body\")}\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { WrenchIcon } from \"@patternfly/react-icons\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\ntype EmptyStateNoTopicsProps = {\n  onCreateTopic?: () => void;\n};\nexport const EmptyStateNoTopics: FunctionComponent<EmptyStateNoTopicsProps> = ({\n  onCreateTopic,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState variant={EmptyStateVariant.xs}>\n      <EmptyStateIcon icon={WrenchIcon} />\n      <Title headingLevel=\"h3\" size=\"lg\">\n        {t(\"metrics:empty_state_no_topics_title\")}\n      </Title>\n      <EmptyStateBody>{t(\"metrics:empty_state_no_topics_body\")}</EmptyStateBody>\n      {onCreateTopic && (\n        <Button\n          ouiaId=\"button-create\"\n          variant=\"primary\"\n          onClick={onCreateTopic}\n        >\n          {t(\"metrics:empty_state_no_topics_create_topic\")}\n        </Button>\n      )}\n    </EmptyState>\n  );\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { FilterIcon } from \"@patternfly/react-icons\";\nimport { Trans, useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\n\nexport const EmptyStateNoTopicSelected: VoidFunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState variant={EmptyStateVariant.xs}>\n      <EmptyStateIcon icon={FilterIcon} />\n      <Title headingLevel=\"h3\" size=\"lg\">\n        {t(\"metrics:empty_state_no_filter_title\")}\n      </Title>\n      <EmptyStateBody>\n        <Trans\n          ns={\"metrics\"}\n          i18nKey={\"empty_state_no_filter_body\"}\n          components={{ bold: <strong /> }}\n        />\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { useState } from \"react\";\nimport type { SelectProps } from \"@patternfly/react-core\";\nimport {\n  ToolbarItem,\n  Select,\n  SelectVariant,\n  SelectGroup,\n  SelectOption,\n} from \"@patternfly/react-core\";\nimport { DurationOptions } from \"../types\";\n\nexport const DurationOptionsMap = {\n  [DurationOptions.Last5minutes]: \"Last 5 minutes\",\n  [DurationOptions.Last15minutes]: \"Last 15 minutes\",\n  [DurationOptions.Last30minutes]: \"Last 30 minutes\",\n  [DurationOptions.Last1hour]: \"Last 1 hour\",\n  [DurationOptions.Last3hours]: \"Last 3 hours\",\n  [DurationOptions.Last6hours]: \"Last 6 hours\",\n  [DurationOptions.Last12hours]: \"Last 12 hours\",\n  [DurationOptions.Last24hours]: \"Last 24 hours\",\n  [DurationOptions.Last2days]: \"Last 2 days\",\n  [DurationOptions.Last7days]: \"Last 7 days\",\n} as const;\n\ntype FilterByTimeProps = {\n  duration: DurationOptions;\n  onDurationChange: (value: DurationOptions) => void;\n  keyText: string;\n  ariaLabel: string;\n  disableToolbar: boolean;\n};\n\nexport const FilterByTime: VoidFunctionComponent<FilterByTimeProps> = ({\n  duration,\n  keyText,\n  ariaLabel,\n  disableToolbar,\n  onDurationChange,\n}) => {\n  const [isTimeSelectOpen, setIsTimeSelectOpen] = useState<boolean>(false);\n\n  const onTimeToggle = (isTimeSelectOpen: boolean) => {\n    setIsTimeSelectOpen(isTimeSelectOpen);\n  };\n\n  const onTimeSelect: SelectProps[\"onSelect\"] = (_, selection) => {\n    const mapping = Object.entries(DurationOptionsMap).find(\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      ([_, value]) => value === selection\n    );\n    if (mapping) {\n      onDurationChange(parseInt(mapping[0], 10) as DurationOptions);\n    }\n    setIsTimeSelectOpen(false);\n  };\n\n  const timeOptions = (keyText: string) => [\n    <SelectGroup label=\"Relative time ranges\" key={`${keyText}-group`}>\n      {Object.values(DurationOptionsMap).map((label, idx) => (\n        <SelectOption key={`${keyText}-${idx}`} value={label} />\n      ))}\n    </SelectGroup>,\n  ];\n  const ariaId = `filter-by-time-${Date.now()}`;\n  return (\n    <ToolbarItem>\n      <label hidden id={ariaId}>\n        {ariaLabel}\n      </label>\n      <Select\n        variant={SelectVariant.single}\n        aria-labelledby={ariaId}\n        onToggle={onTimeToggle}\n        onSelect={onTimeSelect}\n        selections={DurationOptionsMap[duration]}\n        isOpen={isTimeSelectOpen}\n        isDisabled={disableToolbar}\n      >\n        {timeOptions(keyText)}\n      </Select>\n    </ToolbarItem>\n  );\n};\n","import type { SelectProps } from \"@patternfly/react-core\";\nimport {\n  Select,\n  SelectGroup,\n  SelectOption,\n  SelectVariant,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { FilterIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport \"./FilterByTopic.css\";\n\nconst widths = {\n  default: \"150px\",\n  sm: \"150px\",\n  md: \"150px\",\n  lg: \"200px\",\n  xl: \"200px\",\n  \"2xl\": \"200px\",\n};\n\ntype FilterByTopicProps = {\n  selectedTopic: string | undefined;\n  topicList: string[];\n  disableToolbar: boolean;\n  ariaLabel: string;\n  onSetSelectedTopic: (value: string | undefined) => void;\n};\n\nexport const FilterByTopic: VoidFunctionComponent<FilterByTopicProps> = ({\n  selectedTopic,\n  topicList = [],\n  disableToolbar,\n  ariaLabel,\n  onSetSelectedTopic,\n}) => {\n  const { t } = useTranslation();\n  const [isTopicSelectOpen, setIsTopicSelectOpen] = useState<boolean>(false);\n  const [selectKey, setSelectKey] = useState(Math.random());\n\n  useEffect(() => setSelectKey(Math.random()), [topicList]);\n\n  const allTopicsLabel = t(\"metrics:all_topics\");\n\n  const onTopicToggle = (isTopicSelectOpen: boolean) => {\n    setIsTopicSelectOpen(isTopicSelectOpen);\n  };\n\n  const onTopicSelect: SelectProps[\"onSelect\"] = (_, selection) => {\n    selection !== allTopicsLabel\n      ? onSetSelectedTopic(selection as string)\n      : onSetSelectedTopic(undefined);\n    setIsTopicSelectOpen(false);\n  };\n\n  const onTopicFilter = (_: unknown, textInput: string) => {\n    const filteredTopics =\n      topicList.filter((topic) => topic.indexOf(textInput) != -1) || [];\n    return topicOptions(filteredTopics);\n  };\n\n  const topicOptions = (topicList: string[]) => [\n    <SelectOption key={\"topic-filter-0\"} value={allTopicsLabel} />,\n    <SelectGroup label=\"Filter by topic\" key=\"topic-filter-group\">\n      {topicList.map((topic, index) => (\n        <SelectOption\n          key={`topic-filter-${index + 1}`}\n          value={topic}\n          title={topic}\n        />\n      ))}\n    </SelectGroup>,\n  ];\n\n  const isDisabled = disableToolbar || topicList.length === 0;\n  const ariaId = `filter-by-topic-${Date.now()}`;\n\n  return (\n    <ToolbarItem widths={widths}>\n      <label hidden id={ariaId}>\n        {ariaLabel}\n      </label>\n      <Select\n        key={selectKey}\n        variant={SelectVariant.single}\n        onToggle={onTopicToggle}\n        onSelect={onTopicSelect}\n        selections={selectedTopic || allTopicsLabel}\n        isOpen={isTopicSelectOpen}\n        placeholderText={\n          <>\n            <FilterIcon /> {allTopicsLabel}\n          </>\n        }\n        aria-labelledby={ariaId}\n        onFilter={onTopicFilter}\n        isGrouped\n        hasInlineFilter\n        isDisabled={isDisabled}\n        position=\"left\"\n        className={\"appserv-metrics-filterbytopic\"}\n      >\n        {topicOptions(topicList)}\n      </Select>\n    </ToolbarItem>\n  );\n};\n","import { ToolbarItem } from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { FormatDate, RefreshButton } from \"@rhoas/app-services-ui-components\";\n\nexport type ToolbarRefreshProps = {\n  isRefreshing: boolean;\n  lastUpdated: Date | undefined;\n  ariaLabel: string;\n  onRefresh: () => void;\n};\n\nexport const ToolbarRefresh: VoidFunctionComponent<ToolbarRefreshProps> = ({\n  isRefreshing,\n  lastUpdated = new Date(),\n  ariaLabel,\n  onRefresh,\n}) => {\n  const { t } = useTranslation([\"metrics\"]);\n\n  return (\n    <>\n      <ToolbarItem>\n        <RefreshButton\n          ariaLabel={ariaLabel}\n          onClick={onRefresh}\n          isRefreshing={isRefreshing}\n        />\n      </ToolbarItem>\n      <ToolbarItem\n        alignment={{ default: \"alignRight\" }}\n        style={{ color: \"var(--pf-global--Color--200)\" }}\n      >\n        <div className=\"pf-u-font-size-xs\">\n          {isRefreshing ? (\n            t(\"metrics:refreshing\")\n          ) : (\n            <>\n              {t(\"metrics:last-refresh\")}\n              <br />\n              <FormatDate date={lastUpdated} format=\"distanceToNow\" />\n              {t(\"metrics:last-refresh-distance\")}\n            </>\n          )}\n        </div>\n      </ToolbarItem>\n    </>\n  );\n};\n","import {\n  CardHeader,\n  CardTitle,\n  Divider,\n  Toolbar,\n  ToolbarContent,\n} from \"@patternfly/react-core\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { DurationOptions } from \"../types\";\nimport { FilterByTime } from \"./FilterByTime\";\nimport { FilterByTopic } from \"./FilterByTopic\";\nimport type { ToolbarRefreshProps } from \"./ToolbarRefresh\";\nimport { ToolbarRefresh } from \"./ToolbarRefresh\";\n\ntype ToolbarTopicsMetricsProps = {\n  title: string;\n  selectedTopic: string | undefined;\n  topicList: string[];\n  duration: DurationOptions;\n  isDisabled: boolean;\n  onSetTimeDuration: (value: DurationOptions) => void;\n  onSetSelectedTopic: (value: string | undefined) => void;\n} & Omit<ToolbarRefreshProps, \"ariaLabel\">;\nexport const ToolbarTopicsMetrics: FunctionComponent<\n  ToolbarTopicsMetricsProps\n> = ({\n  title,\n  selectedTopic,\n  topicList,\n  duration,\n  isDisabled,\n  isRefreshing,\n  lastUpdated,\n  onSetTimeDuration,\n  onRefresh,\n  onSetSelectedTopic,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <CardHeader>\n        <CardTitle component=\"h2\">{title}</CardTitle>\n      </CardHeader>\n      <Divider />\n      <Toolbar>\n        <ToolbarContent>\n          <FilterByTopic\n            ariaLabel={t(\"metrics:topics_filter_by_topic\")}\n            selectedTopic={selectedTopic}\n            onSetSelectedTopic={onSetSelectedTopic}\n            topicList={topicList}\n            disableToolbar={isDisabled}\n          />\n          <FilterByTime\n            ariaLabel={t(\"metrics:topics_filter_by_time\")}\n            duration={duration}\n            onDurationChange={onSetTimeDuration}\n            disableToolbar={isDisabled}\n            keyText={\"topic-metrics-time-filter\"}\n          />\n          <ToolbarRefresh\n            isRefreshing={isRefreshing}\n            lastUpdated={lastUpdated}\n            onRefresh={onRefresh}\n            ariaLabel={t(\"metrics:topics_refresh\")}\n          />\n        </ToolbarContent>\n      </Toolbar>\n      <Divider />\n    </>\n  );\n};\n","import { Card, CardBody, CardTitle, Divider } from \"@patternfly/react-core\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type {\n  DurationOptions,\n  PartitionBytesMetric,\n  TimeSeriesMetrics,\n} from \"../types\";\nimport { CardBodyLoading } from \"./CardBodyLoading\";\nimport { ChartLinearWithOptionalLimit } from \"./ChartLinearWithOptionalLimit\";\nimport { ChartLogSizePerPartition } from \"./ChartLogSizePerPartition\";\nimport { ChartPopover } from \"./ChartPopover\";\nimport { ChartTotalBytes } from \"./ChartTotalBytes\";\nimport { EmptyStateNoMetricsData } from \"./EmptyStateNoMetricsData\";\nimport { EmptyStateNoMetricsDataForSelection } from \"./EmptyStateNoMetricsDataForSelection\";\nimport { EmptyStateNoTopics } from \"./EmptyStateNoTopics\";\nimport { EmptyStateNoTopicSelected } from \"./EmptyStateNoTopicSelected\";\nimport type { ToolbarRefreshProps } from \"./ToolbarRefresh\";\nimport { ToolbarTopicsMetrics } from \"./ToolbarTopicsMetrics\";\n\ntype CardTopicsMetricsProps = {\n  topics: string[];\n  incomingTopicsData: TimeSeriesMetrics;\n  outgoingTopicsData: TimeSeriesMetrics;\n  partitions: PartitionBytesMetric;\n  incomingMessageRate: TimeSeriesMetrics;\n  duration: DurationOptions;\n  backendUnavailable: boolean;\n  isInitialLoading: boolean;\n  isLoading: boolean;\n  isJustCreated: boolean;\n  selectedTopic: string | undefined;\n  onCreateTopic: () => void;\n  onSelectedTopic: (topic: string | undefined) => void;\n  onDurationChange: (duration: DurationOptions) => void;\n} & Omit<ToolbarRefreshProps, \"ariaLabel\">;\n\nexport const CardTopicsMetrics: FunctionComponent<CardTopicsMetricsProps> = ({\n  topics,\n  incomingTopicsData,\n  outgoingTopicsData,\n  incomingMessageRate,\n  selectedTopic,\n  duration,\n  partitions,\n  backendUnavailable,\n  isInitialLoading,\n  isLoading,\n  isRefreshing,\n  isJustCreated,\n  lastUpdated,\n  onCreateTopic,\n  onRefresh,\n  onSelectedTopic,\n  onDurationChange,\n}) => {\n  const { t } = useTranslation();\n  const noTopics = topics.length === 0;\n  const selectedTopicNotInList =\n    selectedTopic !== undefined &&\n    topics.find((t) => t === selectedTopic) === undefined;\n  const chartEmptyState = selectedTopicNotInList ? (\n    <EmptyStateNoMetricsDataForSelection />\n  ) : (\n    <EmptyStateNoMetricsData />\n  );\n  return (\n    <Card data-testid={\"metrics-topics\"}>\n      <ToolbarTopicsMetrics\n        title={t(\"metrics:topic_metrics\")}\n        duration={duration}\n        onSetTimeDuration={onDurationChange}\n        isDisabled={\n          backendUnavailable || isJustCreated || noTopics || isLoading\n        }\n        isRefreshing={isRefreshing}\n        selectedTopic={selectedTopic}\n        onSetSelectedTopic={onSelectedTopic}\n        onRefresh={onRefresh}\n        topicList={topics}\n        lastUpdated={lastUpdated}\n      />\n      {(() => {\n        switch (true) {\n          case isInitialLoading:\n            return <CardBodyLoading />;\n\n          case backendUnavailable:\n            return (\n              <CardBody>\n                <EmptyStateNoMetricsData />\n              </CardBody>\n            );\n\n          case isJustCreated && !noTopics:\n            return (\n              <CardBody>\n                <EmptyStateNoTopics />\n              </CardBody>\n            );\n\n          case isJustCreated && noTopics:\n            return (\n              <CardBody>\n                <EmptyStateNoTopics onCreateTopic={onCreateTopic} />\n              </CardBody>\n            );\n\n          case selectedTopic !== undefined:\n            return (\n              <>\n                <TotalBytesTitle />\n                <CardBody>\n                  <ChartTotalBytes\n                    incomingTopicsData={incomingTopicsData}\n                    outgoingTopicsData={outgoingTopicsData}\n                    selectedTopic={selectedTopic}\n                    duration={duration}\n                    isLoading={isLoading}\n                    emptyState={chartEmptyState}\n                  />\n                </CardBody>\n                <Divider />\n                <IncomingMessageRate />\n                <CardBody>\n                  <ChartLinearWithOptionalLimit\n                    chartName={t(\"metrics:topic_incoming_message_rate\")}\n                    yLabel={t(\"metrics:topic_incoming_message_rate_y_axis\")}\n                    metrics={incomingMessageRate}\n                    duration={duration}\n                    isLoading={isLoading}\n                    emptyState={chartEmptyState}\n                  />\n                </CardBody>\n                <Divider />\n                <PartitionSizeTitle />\n                <CardBody>\n                  <ChartLogSizePerPartition\n                    partitions={partitions}\n                    topic={selectedTopic}\n                    duration={duration}\n                    isLoading={isLoading}\n                    emptyState={chartEmptyState}\n                  />\n                </CardBody>\n              </>\n            );\n\n          default:\n            return (\n              <>\n                <TotalBytesTitle />\n                <CardBody>\n                  <ChartTotalBytes\n                    incomingTopicsData={incomingTopicsData}\n                    outgoingTopicsData={outgoingTopicsData}\n                    selectedTopic={selectedTopic}\n                    duration={duration}\n                    isLoading={isLoading}\n                    emptyState={chartEmptyState}\n                  />\n                </CardBody>\n                <Divider />\n                <IncomingMessageRate />\n                <CardBody>\n                  <ChartLinearWithOptionalLimit\n                    chartName={t(\"metrics:topic_incoming_message_rate\")}\n                    yLabel={t(\"metrics:topic_incoming_message_rate_y_axis\")}\n                    metrics={incomingMessageRate}\n                    duration={duration}\n                    isLoading={isLoading}\n                    emptyState={chartEmptyState}\n                  />\n                </CardBody>\n                <Divider />\n                <PartitionSizeTitle />\n                <CardBody>\n                  <EmptyStateNoTopicSelected />\n                </CardBody>\n              </>\n            );\n        }\n      })()}\n    </Card>\n  );\n};\n\nconst TotalBytesTitle: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <CardTitle component=\"h3\">\n      {t(\"metrics:total_bytes\")}{\" \"}\n      <ChartPopover\n        title={t(\"metrics:total_bytes_popover_header\")}\n        description={t(\"metrics:topic_metrics_help_text\")}\n      />\n    </CardTitle>\n  );\n};\n\nconst PartitionSizeTitle: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <CardTitle component=\"h3\">\n      {t(\"metrics:topic_partition_size\")}{\" \"}\n      <ChartPopover\n        title={t(\"metrics:topic_partition_size_popover_header\")}\n        description={t(\"metrics:topic_partition_size_help_text\")}\n      />\n    </CardTitle>\n  );\n};\n\nconst IncomingMessageRate: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <CardTitle component=\"h3\">\n      {t(\"metrics:topic_incoming_message_rate\")}{\" \"}\n      <ChartPopover\n        title={t(\"metrics:topic_incoming_message_rate_popover_header\")}\n        description={t(\"metrics:topic_incoming_message_rate_help_text\")}\n      />\n    </CardTitle>\n  );\n};\n","import type { FunctionComponent } from \"react\";\nimport {\n  CardHeader,\n  CardTitle,\n  Divider,\n  Toolbar,\n  ToolbarContent,\n} from \"@patternfly/react-core\";\nimport { FilterByTime } from \"./FilterByTime\";\nimport type { DurationOptions } from \"../types\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { ToolbarRefreshProps } from \"./ToolbarRefresh\";\nimport { ToolbarRefresh } from \"./ToolbarRefresh\";\n\ntype ToolbarKafkaInstanceMetricProps = {\n  title: string;\n  isDisabled: boolean;\n  duration: DurationOptions;\n  onSetTimeDuration: (value: DurationOptions) => void;\n} & Omit<ToolbarRefreshProps, \"ariaLabel\">;\nexport const ToolbarKafkaInstanceMetric: FunctionComponent<\n  ToolbarKafkaInstanceMetricProps\n> = ({\n  title,\n  isDisabled,\n  isRefreshing,\n  lastUpdated,\n  duration,\n  onSetTimeDuration,\n  onRefresh,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <CardHeader>\n        <CardTitle component=\"h2\">{title}</CardTitle>\n      </CardHeader>\n      <Divider />\n      <Toolbar>\n        <ToolbarContent>\n          <FilterByTime\n            ariaLabel={t(\"metrics:kafka_instance_filter_by_time\")}\n            duration={duration}\n            onDurationChange={onSetTimeDuration}\n            keyText={\"kafka-metrics-time-filter\"}\n            disableToolbar={isDisabled}\n          />\n          <ToolbarRefresh\n            isRefreshing={isRefreshing}\n            lastUpdated={lastUpdated}\n            onRefresh={onRefresh}\n            ariaLabel={t(\"metrics:kafka_instance_refresh\")}\n          />\n        </ToolbarContent>\n      </Toolbar>\n      <Divider />\n    </>\n  );\n};\n","import { Card, CardBody, CardTitle, Divider } from \"@patternfly/react-core\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { DurationOptions, TimeSeriesMetrics } from \"../types\";\nimport { CardBodyLoading } from \"./CardBodyLoading\";\nimport { ChartPopover } from \"./ChartPopover\";\nimport { ChartLinearWithOptionalLimit } from \"./ChartLinearWithOptionalLimit\";\nimport { EmptyStateMetricsUnavailable } from \"./EmptyStateMetricsUnavailable\";\nimport { ToolbarKafkaInstanceMetric } from \"./ToolbarKafkaInstanceMetric\";\nimport { formatBytes } from \"./utils\";\nimport { EmptyStateNoMetricsData } from \"./EmptyStateNoMetricsData\";\nimport type { ToolbarRefreshProps } from \"./ToolbarRefresh\";\n\nexport type CardKafkaInstanceMetricsLimits = {\n  diskSpaceLimit: number;\n  connectionsLimit: number;\n  connectionRateLimit: number;\n};\n\nexport type CardKafkaInstanceMetricsProps = {\n  usedDiskMetrics: TimeSeriesMetrics;\n  clientConnectionsMetrics: TimeSeriesMetrics;\n  connectionAttemptRateMetrics: TimeSeriesMetrics;\n  duration: DurationOptions;\n  lastUpdated: Date | undefined;\n  backendUnavailable: boolean;\n  isInitialLoading: boolean;\n  isLoading: boolean;\n  isJustCreated: boolean;\n  onDurationChange: (duration: DurationOptions) => void;\n} & Omit<ToolbarRefreshProps, \"ariaLabel\"> &\n  CardKafkaInstanceMetricsLimits;\n\ntype ChartTitleProps = {\n  title: string;\n  helperText: string;\n};\n\nexport const CardKafkaInstanceMetrics: FunctionComponent<\n  CardKafkaInstanceMetricsProps\n> = ({\n  usedDiskMetrics,\n  clientConnectionsMetrics,\n  connectionAttemptRateMetrics,\n  duration,\n  lastUpdated,\n  backendUnavailable,\n  isInitialLoading,\n  isLoading,\n  isRefreshing,\n  isJustCreated,\n  diskSpaceLimit,\n  connectionsLimit,\n  connectionRateLimit,\n  onRefresh,\n  onDurationChange,\n}) => {\n  const { t } = useTranslation(\"metrics\");\n\n  return (\n    <Card data-testid={\"metrics-kafka-instance\"}>\n      <ToolbarKafkaInstanceMetric\n        title={t(\"kafka_instance_metrics\")}\n        duration={duration}\n        lastUpdated={lastUpdated}\n        onSetTimeDuration={onDurationChange}\n        isDisabled={backendUnavailable || isJustCreated || isLoading}\n        isRefreshing={isRefreshing}\n        onRefresh={onRefresh}\n      />\n      {(() => {\n        switch (true) {\n          case isInitialLoading:\n            return <CardBodyLoading />;\n\n          case backendUnavailable:\n            return (\n              <CardBody>\n                <EmptyStateNoMetricsData />\n              </CardBody>\n            );\n\n          case isJustCreated:\n            return (\n              <CardBody>\n                <EmptyStateMetricsUnavailable />\n              </CardBody>\n            );\n\n          default:\n            return (\n              <>\n                <ChartTitle\n                  title={t(\"used_disk_space\")}\n                  helperText={t(\"used_disk_space_help_text\")}\n                />\n                <CardBody>\n                  <ChartLinearWithOptionalLimit\n                    chartName={t(\"used_disk_space\")}\n                    yLabel={t(\"axis-label-bytes\")}\n                    metrics={usedDiskMetrics}\n                    duration={duration}\n                    formatValue={formatBytes}\n                    usageLimit={diskSpaceLimit}\n                    isLoading={isLoading}\n                    emptyState={<EmptyStateNoMetricsData />}\n                  />\n                </CardBody>\n                <Divider />\n                <ChartTitle\n                  title={t(\"client_connections\")}\n                  helperText={t(\"client_connections_helper_text\")}\n                />\n                <CardBody>\n                  <ChartLinearWithOptionalLimit\n                    chartName={t(\"client_connections\")}\n                    yLabel={t(\"client_connections_y_axis\")}\n                    metrics={clientConnectionsMetrics}\n                    duration={duration}\n                    usageLimit={connectionsLimit}\n                    isLoading={isLoading}\n                    emptyState={<EmptyStateNoMetricsData />}\n                  />\n                </CardBody>\n                <Divider />\n                <ChartTitle\n                  title={t(\"connection_attempt_rate\")}\n                  helperText={t(\"connection_attempt_rate_help_text\")}\n                />\n                <CardBody>\n                  <ChartLinearWithOptionalLimit\n                    chartName={t(\"connection_attempt_rate\")}\n                    yLabel={t(\"connection_attempt_rate_yaxis\")}\n                    metrics={connectionAttemptRateMetrics}\n                    duration={duration}\n                    usageLimit={connectionRateLimit}\n                    isLoading={isLoading}\n                    emptyState={<EmptyStateNoMetricsData />}\n                  />\n                </CardBody>\n              </>\n            );\n        }\n      })()}\n    </Card>\n  );\n};\n\nexport const ChartTitle: FunctionComponent<ChartTitleProps> = ({\n  title,\n  helperText,\n}) => {\n  return (\n    <CardTitle component=\"h3\">\n      {title} <ChartPopover title={title} description={helperText} />\n    </CardTitle>\n  );\n};\n","import {\n  Bullseye,\n  Card,\n  CardBody,\n  CardTitle,\n  Skeleton,\n  Title,\n} from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { ChartPopover } from \"./ChartPopover\";\nimport { EmptyStateNoMetricsData } from \"./EmptyStateNoMetricsData\";\n\ntype CardKpiProps = {\n  metric: string | number | undefined;\n  name: string;\n  popover: string;\n  isLoading: boolean;\n};\n\nexport const CardKpi: VoidFunctionComponent<CardKpiProps> = ({\n  metric,\n  name,\n  popover,\n  isLoading,\n}) => {\n  return (\n    <Card isFullHeight data-testid={name}>\n      <CardTitle component=\"h3\">\n        {name} <ChartPopover title={name} description={popover} />\n      </CardTitle>\n      <CardBody>\n        {!isLoading &&\n          (metric === undefined ? (\n            <Bullseye>\n              <EmptyStateNoMetricsData />\n            </Bullseye>\n          ) : (\n            <Title\n              headingLevel=\"h3\"\n              size=\"4xl\"\n              aria-valuetext={`${metric} ${name}`}\n            >\n              {metric}\n            </Title>\n          ))}\n        {isLoading && <Skeleton width=\"50px\" shape=\"square\" />}\n      </CardBody>\n    </Card>\n  );\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { Alert, AlertActionCloseButton } from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport type MetricsLagAlertProps = {\n  isClosed: boolean;\n  onClickClose: () => void;\n};\n\nexport const MetricsLagAlert: VoidFunctionComponent<MetricsLagAlertProps> = ({\n  isClosed,\n  onClickClose,\n}) => {\n  const { t } = useTranslation(\"metrics\");\n\n  if (!isClosed) {\n    return (\n      <Alert\n        isInline\n        variant=\"info\"\n        title={t(\"metrics_lag_title\")}\n        actionClose={<AlertActionCloseButton onClose={onClickClose} />}\n      >\n        <p>{t(\"metrics_lag_description\")}</p>\n      </Alert>\n    );\n  } else {\n    return <> </>;\n  }\n};\n","import {\n  Alert,\n  AlertVariant,\n  Bullseye,\n  Card,\n  CardBody,\n  CardFooter,\n  CardTitle,\n  Skeleton,\n  Text,\n  TextContent,\n  Title,\n} from \"@patternfly/react-core\";\nimport {\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n} from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { ChartPopover } from \"./ChartPopover\";\nimport { EmptyStateNoMetricsData } from \"./EmptyStateNoMetricsData\";\n\ntype PartitionCardProps = {\n  metric: number | undefined;\n  isLoading: boolean;\n  topicPartitionsLimit: number | undefined;\n};\n\nexport const PartitionCard: VoidFunctionComponent<PartitionCardProps> = ({\n  metric,\n  isLoading,\n  topicPartitionsLimit = 0,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <Card\n      isFullHeight\n      data-testid={t(\"metrics:metric_kpi_topicPartitions_name\")}\n    >\n      <CardTitle component=\"h3\">\n        {t(\"metrics:metric_kpi_topicPartitions_name\")}{\" \"}\n        <ChartPopover\n          title={t(\"metrics:metric_kpi_topicPartitions_name\")}\n          description={t(\"metrics:metric_kpi_topicPartitions_description\")}\n        />\n      </CardTitle>\n      <CardBody>\n        {!isLoading &&\n          (metric === undefined ? (\n            <Bullseye>\n              <EmptyStateNoMetricsData />\n            </Bullseye>\n          ) : (\n            <>\n              <Title\n                headingLevel=\"h3\"\n                size=\"4xl\"\n                aria-valuetext={`${metric} ${t(\n                  \"metrics:metric_kpi_topicPartitions_name\"\n                )}`}\n              >\n                {metric}{\" \"}\n                {(() => {\n                  if (metric >= topicPartitionsLimit) {\n                    return (\n                      <ExclamationCircleIcon color=\"var(--pf-global--danger-color--100)\" />\n                    );\n                  } else if (metric >= topicPartitionsLimit * 0.95) {\n                    return (\n                      <ExclamationTriangleIcon color=\"var(--pf-global--warning-color--100)\" />\n                    );\n                  } else {\n                    return \"\";\n                  }\n                })()}\n              </Title>\n              <TextContent>\n                <Text>\n                  {t(\"metrics:partition_limit\", {\n                    topic: topicPartitionsLimit,\n                  })}\n                </Text>\n              </TextContent>\n            </>\n          ))}\n        {isLoading && <Skeleton width=\"50px\" shape=\"square\" />}\n      </CardBody>\n      {(() => {\n        if (metric && metric >= topicPartitionsLimit) {\n          return (\n            <CardFooter>\n              <Alert\n                isExpandable\n                isInline\n                variant={AlertVariant.danger}\n                title={t(\"metrics:partition_limit_reached_title\")}\n              >\n                <p>{t(\"metrics:partition_limit_reached_description_1\")}</p>\n                <p>{t(\"metrics:partition_limit_reached_description_2\")}</p>\n              </Alert>\n            </CardFooter>\n          );\n        } else if (metric && metric >= topicPartitionsLimit * 0.95) {\n          return (\n            <CardFooter>\n              <Alert\n                role={\"alert\"}\n                isExpandable\n                isInline\n                variant={AlertVariant.warning}\n                title={t(\"metrics:partition_limit_approaching_title\")}\n              >\n                <p>\n                  {t(\"metrics:partition_limit_approaching_description_1\", {\n                    limit: topicPartitionsLimit,\n                  })}\n                </p>\n                <p>{t(\"metrics:partition_limit_approaching_description_2\")}</p>\n              </Alert>\n            </CardFooter>\n          );\n        } else {\n          return \" \";\n        }\n      })()}\n    </Card>\n  );\n};\n","import { assign, createMachine } from \"xstate\";\nimport type {\n  GetKafkaInstanceMetricsResponse,\n  TimeSeriesMetrics,\n} from \"../types\";\nimport { DurationOptions } from \"../types\";\n\nconst MAX_RETRIES = 3;\n\nconst apiState = {\n  initial: \"loading\",\n  states: {\n    loading: {\n      invoke: {\n        src: \"api\",\n      },\n      on: {\n        fetchFail: {\n          actions: \"incrementRetries\",\n          target: \"failure\",\n        },\n      },\n    },\n    failure: {\n      after: {\n        1000: [\n          { cond: \"canRetryFetching\", target: \"loading\" },\n          { target: \"#kafkaInstanceMetrics.criticalFail\" },\n        ],\n      },\n    },\n  },\n};\n\nexport type KafkaInstanceMetricsMachineContext = {\n  lastUpdated: Date | undefined;\n\n  // from the UI elements\n  duration: DurationOptions;\n\n  // from the api\n  usedDiskSpaceMetrics: TimeSeriesMetrics;\n  clientConnectionsMetrics: TimeSeriesMetrics;\n  connectionAttemptRateMetrics: TimeSeriesMetrics;\n  diskSpaceLimit: number | undefined;\n  connectionsLimit: number | undefined;\n  connectionRateLimit: number | undefined;\n  // how many time did we try a fetch (that combines more api)\n  fetchFailures: number;\n};\n\nexport const KafkaInstanceMetricsMachine = createMachine(\n  {\n    tsTypes: {} as import(\"./KafkaInstanceMetricsMachine.typegen\").Typegen0,\n    schema: {\n      context: {} as KafkaInstanceMetricsMachineContext,\n      events: {} as\n        | ({ type: \"fetchSuccess\" } & GetKafkaInstanceMetricsResponse)\n        | { type: \"fetchFail\" }\n        // to refresh the data\n        | { type: \"refresh\" }\n        // from the UI elements\n        | { type: \"selectTopic\"; topic: string | undefined }\n        | { type: \"selectDuration\"; duration: DurationOptions },\n    },\n    id: \"kafkaInstanceMetrics\",\n    context: {\n      lastUpdated: undefined,\n      duration: DurationOptions.Last1hour,\n      usedDiskSpaceMetrics: {},\n      clientConnectionsMetrics: {},\n      connectionAttemptRateMetrics: {},\n      diskSpaceLimit: undefined,\n      connectionsLimit: undefined,\n      connectionRateLimit: undefined,\n      fetchFailures: 0,\n    },\n    initial: \"initialLoading\",\n    states: {\n      initialLoading: {\n        ...apiState,\n        tags: \"initialLoading\",\n        entry: \"setFetchTimestamp\",\n        on: {\n          fetchSuccess: [\n            {\n              cond: \"isJustCreated\",\n              actions: \"setMetrics\",\n              target: \"#kafkaInstanceMetrics.withResponse\",\n            },\n            { actions: \"setMetrics\", target: \"justCreated\" },\n          ],\n        },\n      },\n      callApi: {\n        ...apiState,\n        tags: \"loading\",\n        entry: \"setFetchTimestamp\",\n        on: {\n          fetchSuccess: {\n            actions: \"setMetrics\",\n            target: \"#kafkaInstanceMetrics.withResponse\",\n          },\n        },\n      },\n      criticalFail: {\n        tags: \"failed\",\n        on: {\n          refresh: {\n            actions: \"resetRetries\",\n            target: \"callApi\",\n          },\n        },\n      },\n      justCreated: {\n        tags: \"justCreated\",\n        on: {\n          refresh: {\n            target: \"initialLoading\",\n          },\n        },\n      },\n      withResponse: {\n        tags: \"withResponse\",\n        on: {\n          refresh: {\n            target: \"refreshing\",\n          },\n          selectDuration: {\n            actions: \"setDuration\",\n            target: \"callApi\",\n          },\n        },\n      },\n      refreshing: {\n        tags: \"refreshing\",\n        entry: \"setFetchTimestamp\",\n        invoke: {\n          src: \"api\",\n        },\n        on: {\n          fetchSuccess: {\n            actions: \"setMetrics\",\n            target: \"withResponse\",\n          },\n          fetchFail: {\n            // 👀 we silently ignore this happened and go back to the right\n            // state depending on the previous data\n            target: \"withResponse\",\n          },\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      setFetchTimestamp: assign({\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        lastUpdated: (_context) => new Date(),\n      }),\n      setMetrics: assign((_, event) => {\n        const {\n          usedDiskSpaceMetrics,\n          clientConnectionsMetrics,\n          connectionAttemptRateMetrics,\n          diskSpaceLimit,\n          connectionsLimit,\n          connectionRateLimit,\n        } = event;\n        return {\n          usedDiskSpaceMetrics,\n          clientConnectionsMetrics,\n          connectionAttemptRateMetrics,\n          diskSpaceLimit: diskSpaceLimit * 1024 ** 3, // convert it to GiB\n          connectionsLimit,\n          connectionRateLimit,\n        };\n      }),\n      incrementRetries: assign({\n        fetchFailures: (context) => context.fetchFailures + 1,\n      }),\n      resetRetries: assign({\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        fetchFailures: (_context) => 0,\n      }),\n      setDuration: assign((_context, event) => ({\n        duration: event.duration,\n        usedDiskSpaceMetrics: {},\n        clientConnectionsMetrics: {},\n        connectionAttemptRateMetrics: {},\n      })),\n    },\n    guards: {\n      canRetryFetching: (context) => context.fetchFailures < MAX_RETRIES,\n      isJustCreated: (_, event) => {\n        if (event.type === \"fetchSuccess\") {\n          return (\n            Object.keys(event.clientConnectionsMetrics).length > 0 ||\n            Object.keys(event.connectionAttemptRateMetrics).length > 0 ||\n            Object.keys(event.usedDiskSpaceMetrics).length > 0\n          );\n        }\n        return false;\n      },\n    },\n  }\n);\n\nexport type KafkaInstanceMetricsMachineType =\n  typeof KafkaInstanceMetricsMachine;\n","import { assign, createMachine } from \"xstate\";\nimport type {\n  GetTopicsMetricsResponse,\n  PartitionBytesMetric,\n  TimeSeriesMetrics,\n} from \"../types\";\nimport { DurationOptions } from \"../types\";\n\nconst MAX_RETRIES = 3;\n\nconst apiState = {\n  initial: \"loading\",\n  states: {\n    loading: {\n      invoke: {\n        src: \"api\",\n      },\n      on: {\n        fetchFail: {\n          actions: \"incrementRetries\",\n          target: \"failure\",\n        },\n      },\n    },\n    failure: {\n      after: {\n        1000: [\n          { cond: \"canRetryFetching\", target: \"loading\" },\n          { target: \"#topicsMetrics.criticalFail\" },\n        ],\n      },\n    },\n  },\n};\n\nexport type TopicsMetricsMachineContext = {\n  lastUpdated: Date | undefined;\n\n  // from the UI elements\n  selectedTopic: string | undefined;\n  duration: DurationOptions;\n\n  // from the api\n  kafkaTopics: string[];\n  metricsTopics: string[];\n  bytesOutgoing: TimeSeriesMetrics;\n  bytesIncoming: TimeSeriesMetrics;\n  bytesPerPartition: PartitionBytesMetric;\n  incomingMessageRate: TimeSeriesMetrics;\n\n  // how many time did we try a fetch (that combines more api)\n  fetchFailures: number;\n};\n\nexport const TopicsMetricsMachine = createMachine(\n  {\n    tsTypes: {} as import(\"./TopicsMetricsMachine.typegen\").Typegen0,\n    schema: {\n      context: {} as TopicsMetricsMachineContext,\n      events: {} as  // called when a new kafka id has been specified\n        | ({ type: \"fetchSuccess\" } & GetTopicsMetricsResponse)\n        | { type: \"fetchFail\" }\n\n        // to refresh the data\n        | { type: \"refresh\" }\n\n        // from the UI elements\n        | { type: \"selectTopic\"; topic: string | undefined }\n        | { type: \"selectDuration\"; duration: DurationOptions },\n    },\n    id: \"topicsMetrics\",\n    context: {\n      lastUpdated: undefined,\n\n      // from the UI elements\n      selectedTopic: undefined,\n      duration: DurationOptions.Last1hour,\n\n      // from the api\n      kafkaTopics: [],\n      metricsTopics: [],\n      bytesOutgoing: {},\n      bytesIncoming: {},\n      bytesPerPartition: {},\n      incomingMessageRate: {},\n\n      // how many time did we try a fetch (that combines more api)\n      fetchFailures: 0,\n    },\n    initial: \"initialLoading\",\n    states: {\n      initialLoading: {\n        ...apiState,\n        tags: \"initialLoading\",\n        entry: \"setFetchTimestamp\",\n        on: {\n          fetchSuccess: [\n            {\n              cond: \"isJustCreated\",\n              actions: \"setMetrics\",\n              target: \"#topicsMetrics.withResponse\",\n            },\n            { actions: \"setMetrics\", target: \"justCreated\" },\n          ],\n        },\n      },\n      callApi: {\n        ...apiState,\n        tags: \"loading\",\n        entry: \"setFetchTimestamp\",\n        on: {\n          fetchSuccess: {\n            actions: \"setMetrics\",\n            target: \"#topicsMetrics.withResponse\",\n          },\n        },\n      },\n      criticalFail: {\n        tags: \"failed\",\n        on: {\n          refresh: {\n            actions: \"resetRetries\",\n            target: \"callApi\",\n          },\n        },\n      },\n      justCreated: {\n        tags: \"justCreated\",\n        on: {\n          refresh: {\n            target: \"initialLoading\",\n          },\n        },\n      },\n      withResponse: {\n        tags: \"withResponse\",\n        initial: \"idle\",\n        states: {\n          idle: {},\n          refreshing: {\n            tags: \"refreshing\",\n            entry: \"setFetchTimestamp\",\n            invoke: {\n              src: \"api\",\n            },\n            on: {\n              fetchSuccess: {\n                actions: \"setMetrics\",\n                target: \"#topicsMetrics.withResponse\",\n              },\n              fetchFail: {\n                // 👀 we silently ignore this happened\n                target: \"#topicsMetrics.withResponse\",\n              },\n            },\n          },\n        },\n        on: {\n          refresh: {\n            target: \"#topicsMetrics.withResponse.refreshing\",\n          },\n          selectTopic: {\n            actions: \"setTopic\",\n            target: \"callApi\",\n          },\n          selectDuration: {\n            actions: \"setDuration\",\n            target: \"callApi\",\n          },\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      setFetchTimestamp: assign({\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        lastUpdated: (_context) => new Date(),\n      }),\n      setMetrics: assign((_context, event) => {\n        const {\n          kafkaTopics,\n          metricsTopics,\n          bytesPerPartition,\n          bytesIncoming,\n          bytesOutgoing,\n          incomingMessageRate,\n        } = event;\n        return {\n          kafkaTopics,\n          metricsTopics,\n          bytesPerPartition,\n          bytesIncoming,\n          bytesOutgoing,\n          incomingMessageRate,\n        };\n      }),\n      incrementRetries: assign({\n        fetchFailures: (context) => context.fetchFailures + 1,\n      }),\n      resetRetries: assign({\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        fetchFailures: (_context) => 0,\n      }),\n      setTopic: assign({\n        selectedTopic: (_context, event) => event.topic,\n      }),\n      setDuration: assign({\n        duration: (_, event) => event.duration,\n      }),\n    },\n    guards: {\n      canRetryFetching: (context) => context.fetchFailures < MAX_RETRIES,\n      isJustCreated: (_, event) => {\n        if (event.type === \"fetchSuccess\") {\n          return (\n            Object.keys(event.bytesIncoming).length > 0 ||\n            Object.keys(event.bytesOutgoing).length > 0 ||\n            Object.keys(event.bytesPerPartition).length > 0 ||\n            Object.keys(event.incomingMessageRate).length > 0\n          );\n        }\n        return false;\n      },\n    },\n  }\n);\n\nexport type TopicsMetricsMachineType = typeof TopicsMetricsMachine;\n","import { assign, createMachine } from \"xstate\";\nimport type { GetMetricsKpiResponse } from \"../types\";\n\nconst MAX_RETRIES = 3;\n\nconst apiState = {\n  initial: \"loading\",\n  states: {\n    loading: {\n      invoke: {\n        src: \"api\",\n      },\n      on: {\n        fetchFail: {\n          actions: \"incrementRetries\",\n          target: \"failure\",\n        },\n      },\n    },\n    failure: {\n      after: {\n        1000: [\n          { cond: \"canRetryFetching\", target: \"loading\" },\n          { target: \"#kpis.criticalFail\" },\n        ],\n      },\n    },\n  },\n};\n\nexport type MetricsKpiMachineContext = {\n  // from the api\n  topics: number | undefined;\n  topicPartitions: number | undefined;\n  consumerGroups: number | undefined;\n  topicPartitionsLimit: number | undefined;\n\n  // how many time did we try a fetch (that combines more api)\n  fetchFailures: number;\n};\n\nexport const MetricsKpiMachine = createMachine(\n  {\n    tsTypes: {} as import(\"./MetricsKpiMachine.typegen\").Typegen0,\n    schema: {\n      context: {} as MetricsKpiMachineContext,\n      events: {} as\n        | { type: \"fetch\" }\n        | ({ type: \"fetchSuccess\" } & GetMetricsKpiResponse)\n        | { type: \"fetchFail\" }\n        | { type: \"refresh\" },\n    },\n    id: \"kpis\",\n    context: {\n      topics: undefined,\n      topicPartitions: undefined,\n      consumerGroups: undefined,\n      topicPartitionsLimit: undefined,\n      fetchFailures: 0,\n    },\n    initial: \"initialLoading\",\n    states: {\n      initialLoading: {\n        ...apiState,\n        tags: \"initialLoading\",\n        on: {\n          fetchSuccess: [\n            {\n              cond: \"isJustCreated\",\n              actions: \"setMetrics\",\n              target: \"#kpis.withResponse\",\n            },\n            { actions: \"setMetrics\", target: \"justCreated\" },\n          ],\n        },\n      },\n      callApi: {\n        ...apiState,\n        tags: \"loading\",\n        on: {\n          fetchSuccess: {\n            actions: \"setMetrics\",\n            target: \"#kpis.withResponse\",\n          },\n        },\n      },\n      criticalFail: {\n        tags: \"failed\",\n        on: {\n          refresh: {\n            actions: \"resetRetries\",\n            target: \"callApi\",\n          },\n        },\n      },\n      justCreated: {\n        tags: \"justCreated\",\n        on: {\n          refresh: {\n            target: \"initialLoading\",\n          },\n        },\n      },\n      withResponse: {\n        tags: \"withResponse\",\n        initial: \"idle\",\n        states: {\n          idle: {},\n          refreshing: {\n            tags: \"refreshing\",\n            invoke: {\n              src: \"api\",\n            },\n            on: {\n              fetchSuccess: {\n                actions: \"setMetrics\",\n                target: \"#kpis.withResponse\",\n              },\n              fetchFail: {\n                // 👀 we silently ignore this happened\n                target: \"#kpis.withResponse\",\n              },\n            },\n          },\n        },\n        on: {\n          refresh: {\n            target: \"#kpis.withResponse.refreshing\",\n          },\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      setMetrics: assign((_, event) => {\n        const {\n          topics,\n          topicPartitions,\n          consumerGroups,\n          topicPartitionsLimit,\n        } = event;\n        return {\n          topics,\n          topicPartitions,\n          consumerGroups,\n          topicPartitionsLimit,\n        };\n      }),\n\n      incrementRetries: assign({\n        fetchFailures: (context) => context.fetchFailures + 1,\n      }),\n\n      resetRetries: assign({\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        fetchFailures: (_context) => 0,\n      }),\n    },\n    guards: {\n      canRetryFetching: (context) => context.fetchFailures < MAX_RETRIES,\n      isJustCreated: (_, event) => {\n        if (event.type === \"fetchSuccess\") {\n          return (\n            event.topics !== undefined ||\n            event.topicPartitions !== undefined ||\n            event.consumerGroups !== undefined ||\n            event.topicPartitionsLimit !== undefined\n          );\n        }\n        return false;\n      },\n    },\n  }\n);\n\nexport type MetricsKpiMachineType = typeof MetricsKpiMachine;\n","import { useInterpret } from \"@xstate/react\";\nimport type { FunctionComponent } from \"react\";\nimport { createContext } from \"react\";\nimport type { ActorRefFrom } from \"xstate\";\nimport { timeIntervalsMapping } from \"./consts\";\nimport type { KafkaInstanceMetricsMachineType } from \"./machines\";\nimport { KafkaInstanceMetricsMachine } from \"./machines\";\nimport type { DurationOptions, GetKafkaInstanceMetricsResponse } from \"./types\";\n\nexport const KafkaInstanceMetricsContext = createContext<{\n  service: ActorRefFrom<KafkaInstanceMetricsMachineType>;\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n}>(null!);\n\nexport type KafkaInstanceMetricsProviderProps = {\n  getKafkaInstanceMetrics: (options: {\n    duration: DurationOptions;\n    interval: number;\n  }) => Promise<GetKafkaInstanceMetricsResponse>;\n};\nexport const KafkaInstanceMetricsProvider: FunctionComponent<\n  KafkaInstanceMetricsProviderProps\n> = ({ children, getKafkaInstanceMetrics }) => {\n  const service = useInterpret(\n    () =>\n      KafkaInstanceMetricsMachine.withConfig({\n        services: {\n          api: (context) => {\n            return (callback) => {\n              getKafkaInstanceMetrics({\n                duration: context.duration,\n                interval: timeIntervalsMapping[context.duration].interval,\n              })\n                .then((results) =>\n                  callback({ type: \"fetchSuccess\", ...results })\n                )\n                .catch((e) => {\n                  console.error(\"Failed fetching data\", e);\n                  callback(\"fetchFail\");\n                });\n            };\n          },\n        },\n      }),\n    {\n      devTools: true,\n    }\n  );\n  return (\n    <KafkaInstanceMetricsContext.Provider\n      value={{\n        service,\n      }}\n    >\n      {children}\n    </KafkaInstanceMetricsContext.Provider>\n  );\n};\n","import { useInterpret } from \"@xstate/react\";\nimport type { FunctionComponent } from \"react\";\nimport { createContext } from \"react\";\nimport type { ActorRefFrom } from \"xstate\";\nimport type { MetricsKpiMachineType } from \"./machines\";\nimport { MetricsKpiMachine } from \"./machines\";\nimport type { GetMetricsKpiResponse } from \"./types\";\n\nexport const MetricsKpiContext = createContext<{\n  service: ActorRefFrom<MetricsKpiMachineType>;\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n}>(null!);\n\nexport type MetricsKpiProviderProps = {\n  getMetricsKpi: () => Promise<GetMetricsKpiResponse>;\n};\nexport const MetricsKpiProvider: FunctionComponent<MetricsKpiProviderProps> = ({\n  children,\n  getMetricsKpi,\n}) => {\n  const service = useInterpret(\n    () =>\n      MetricsKpiMachine.withConfig({\n        services: {\n          api: () => {\n            return (callback) => {\n              getMetricsKpi()\n                .then((results) =>\n                  callback({ type: \"fetchSuccess\", ...results })\n                )\n                .catch((e) => {\n                  console.error(\"Failed fetching data\", e);\n                  callback(\"fetchFail\");\n                });\n            };\n          },\n        },\n      }),\n    {\n      devTools: true,\n    }\n  );\n  return (\n    <MetricsKpiContext.Provider\n      value={{\n        service,\n      }}\n    >\n      {children}\n    </MetricsKpiContext.Provider>\n  );\n};\n","import { useInterpret } from \"@xstate/react\";\nimport type { FunctionComponent } from \"react\";\nimport { createContext } from \"react\";\nimport type { ActorRefFrom } from \"xstate\";\nimport { timeIntervalsMapping } from \"./consts\";\nimport type { TopicsMetricsMachineType } from \"./machines\";\nimport { TopicsMetricsMachine } from \"./machines\";\nimport type { DurationOptions, GetTopicsMetricsResponse } from \"./types\";\n\nexport const TopicsMetricsContext = createContext<{\n  service: ActorRefFrom<TopicsMetricsMachineType>;\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n}>(null!);\n\nexport type TopicsMetricsProviderProps = {\n  getTopicsMetrics: (options: {\n    duration: DurationOptions;\n    interval: number;\n    selectedTopic: string | undefined;\n  }) => Promise<GetTopicsMetricsResponse>;\n};\nexport const TopicsMetricsProvider: FunctionComponent<\n  TopicsMetricsProviderProps\n> = ({ children, getTopicsMetrics }) => {\n  const service = useInterpret(\n    () =>\n      TopicsMetricsMachine.withConfig({\n        services: {\n          api: (context) => {\n            return (callback) => {\n              getTopicsMetrics({\n                selectedTopic: context.selectedTopic,\n                duration: context.duration,\n                interval: timeIntervalsMapping[context.duration].interval,\n              })\n                .then((results) =>\n                  callback({ type: \"fetchSuccess\", ...results })\n                )\n                .catch((e) => {\n                  console.error(\"Failed fetching data\", e);\n                  callback(\"fetchFail\");\n                });\n            };\n          },\n        },\n      }),\n    {\n      devTools: true,\n    }\n  );\n  return (\n    <TopicsMetricsContext.Provider\n      value={{\n        service,\n      }}\n    >\n      {children}\n    </TopicsMetricsContext.Provider>\n  );\n};\n","import { useSelector } from \"@xstate/react\";\nimport { useCallback, useContext } from \"react\";\nimport { KafkaInstanceMetricsContext } from \"./KafkaInstanceMetricsProvider\";\nimport type { KafkaInstanceMetricsMachineContext } from \"./machines\";\nimport type { DurationOptions } from \"./types\";\n\ntype SeletorReturn = KafkaInstanceMetricsMachineContext & {\n  isInitialLoading: boolean;\n  isRefreshing: boolean;\n  isLoading: boolean;\n  isFailed: boolean;\n  isJustCreated: boolean;\n};\n\nexport function useKafkaInstanceMetrics() {\n  const { service } = useContext(KafkaInstanceMetricsContext);\n\n  const {\n    usedDiskSpaceMetrics,\n    clientConnectionsMetrics,\n    connectionAttemptRateMetrics,\n    diskSpaceLimit,\n    connectionsLimit,\n    connectionRateLimit,\n    duration,\n    lastUpdated,\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n  } = useSelector<typeof service, SeletorReturn>(\n    service,\n    useCallback(\n      (state) => ({\n        ...state.context,\n        isInitialLoading: state.hasTag(\"initialLoading\"),\n        isRefreshing: state.hasTag(\"refreshing\"),\n        isLoading: state.hasTag(\"loading\"),\n        isFailed: state.hasTag(\"failed\"),\n        isJustCreated: state.hasTag(\"justCreated\"),\n      }),\n      []\n    )\n  );\n\n  const onDurationChange = useCallback(\n    (duration: DurationOptions) =>\n      service.send({ type: \"selectDuration\", duration }),\n    [service]\n  );\n\n  const onRefresh = useCallback(() => service.send(\"refresh\"), [service]);\n\n  return {\n    usedDiskSpaceMetrics,\n    clientConnectionsMetrics,\n    connectionAttemptRateMetrics,\n    diskSpaceLimit,\n    connectionsLimit,\n    connectionRateLimit,\n    lastUpdated,\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n    duration,\n    onDurationChange,\n    onRefresh,\n  };\n}\n","import { useSelector } from \"@xstate/react\";\nimport { useCallback, useContext, useMemo } from \"react\";\nimport type { TopicsMetricsMachineContext } from \"./machines\";\nimport { TopicsMetricsContext } from \"./TopicsMetricsProvider\";\nimport type { DurationOptions } from \"./types\";\n\ntype SelectorReturn = TopicsMetricsMachineContext & {\n  isInitialLoading: boolean;\n  isRefreshing: boolean;\n  isLoading: boolean;\n  isFailed: boolean;\n  isJustCreated: boolean;\n};\n\nexport function useTopicsMetrics() {\n  const { service } = useContext(TopicsMetricsContext);\n\n  const {\n    selectedTopic,\n    duration,\n    kafkaTopics,\n    metricsTopics,\n    bytesIncoming,\n    bytesOutgoing,\n    bytesPerPartition,\n    incomingMessageRate,\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n    lastUpdated,\n  } = useSelector<typeof service, SelectorReturn>(\n    service,\n    useCallback(\n      (state) => ({\n        ...state.context,\n        isInitialLoading: state.hasTag(\"initialLoading\"),\n        isRefreshing: state.hasTag(\"refreshing\"),\n        isLoading: state.hasTag(\"loading\"),\n        isFailed: state.hasTag(\"failed\"),\n        isJustCreated: state.hasTag(\"justCreated\"),\n      }),\n      []\n    )\n  );\n\n  const onTopicChange = useCallback(\n    (topic: string | undefined) => service.send({ type: \"selectTopic\", topic }),\n    [service]\n  );\n\n  const onDurationChange = useCallback(\n    (duration: DurationOptions) =>\n      service.send({ type: \"selectDuration\", duration }),\n    [service]\n  );\n\n  const onRefresh = useCallback(() => service.send(\"refresh\"), [service]);\n\n  const mergedTopics = useMemo((): string[] => {\n    const topics = Array.from(\n      new Set<string>([...kafkaTopics, ...metricsTopics])\n    );\n    topics.sort((a, b) => a.localeCompare(b));\n    return topics;\n  }, [kafkaTopics, metricsTopics]);\n\n  return {\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n    lastUpdated,\n    topics: mergedTopics,\n    selectedTopic,\n    duration,\n    bytesIncoming,\n    bytesOutgoing,\n    bytesPerPartition,\n    incomingMessageRate,\n    onTopicChange,\n    onDurationChange,\n    onRefresh,\n  };\n}\n","import { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport {\n  CardKafkaInstanceMetrics,\n  CardTopicsMetrics,\n  EmptyStateInitialLoading,\n  EmptyStateMetricsUnavailable,\n  MetricsLayout,\n} from \"./components\";\nimport { CardKpi } from \"./components/CardKpi\";\nimport { MetricsLagAlert } from \"./components/MetricsLagAlert\";\nimport { PartitionCard } from \"./components/PartitionCard\";\nimport type { KafkaInstanceMetricsProviderProps } from \"./KafkaInstanceMetricsProvider\";\nimport { KafkaInstanceMetricsProvider } from \"./KafkaInstanceMetricsProvider\";\nimport type { MetricsKpiProviderProps } from \"./MetricsKpiProvider\";\nimport { MetricsKpiProvider } from \"./MetricsKpiProvider\";\nimport type { TopicsMetricsProviderProps } from \"./TopicsMetricsProvider\";\nimport { TopicsMetricsProvider } from \"./TopicsMetricsProvider\";\nimport { useKafkaInstanceMetrics } from \"./useKafkaInstanceMetrics\";\nimport { useMetricsKpi } from \"./useMetricsKpi\";\nimport { useTopicsMetrics } from \"./useTopicsMetrics\";\n\nexport type MetricsProps = {\n  onCreateTopic: () => void;\n  onAlertClose: () => void;\n  hasUserAlreadyClosedAlert: boolean;\n} & KafkaInstanceMetricsProviderProps &\n  TopicsMetricsProviderProps &\n  MetricsKpiProviderProps;\n\nexport const Metrics: VoidFunctionComponent<MetricsProps> = ({\n  getKafkaInstanceMetrics,\n  getTopicsMetrics,\n  getMetricsKpi,\n  onCreateTopic,\n  onAlertClose,\n  hasUserAlreadyClosedAlert,\n}) => {\n  return (\n    <TopicsMetricsProvider getTopicsMetrics={getTopicsMetrics}>\n      <KafkaInstanceMetricsProvider\n        getKafkaInstanceMetrics={getKafkaInstanceMetrics}\n      >\n        <MetricsKpiProvider getMetricsKpi={getMetricsKpi}>\n          <ConnectedMetrics\n            onCreateTopic={onCreateTopic}\n            onClickClose={onAlertClose}\n            isClosed={hasUserAlreadyClosedAlert}\n          />\n        </MetricsKpiProvider>\n      </KafkaInstanceMetricsProvider>\n    </TopicsMetricsProvider>\n  );\n};\n\ntype ConnectedMetricsProps = {\n  onCreateTopic: () => void;\n  onClickClose: () => void;\n  isClosed: boolean;\n};\nconst ConnectedMetrics: VoidFunctionComponent<ConnectedMetricsProps> = ({\n  onCreateTopic,\n  onClickClose,\n  isClosed,\n}) => {\n  const { t } = useTranslation();\n  const kafkaInstanceMetrics = useKafkaInstanceMetrics();\n  const topicsMetrics = useTopicsMetrics();\n  const metricsKpi = useMetricsKpi();\n\n  switch (true) {\n    case kafkaInstanceMetrics.isInitialLoading ||\n      topicsMetrics.isInitialLoading ||\n      metricsKpi.isInitialLoading:\n      return <EmptyStateInitialLoading />;\n    case kafkaInstanceMetrics.isFailed &&\n      topicsMetrics.isFailed &&\n      topicsMetrics.isFailed:\n    case kafkaInstanceMetrics.isJustCreated &&\n      topicsMetrics.isJustCreated &&\n      metricsKpi.isJustCreated:\n      return <EmptyStateMetricsUnavailable />;\n    default:\n      return (\n        <MetricsLayout\n          metricsLagAlert={\n            <MetricsLagAlert onClickClose={onClickClose} isClosed={isClosed} />\n          }\n          topicsKpi={\n            <CardKpi\n              metric={metricsKpi.topics}\n              isLoading={metricsKpi.isInitialLoading || metricsKpi.isLoading}\n              name={t(\"metrics:metric_kpi_topics_name\")}\n              popover={t(\"metrics:metric_kpi_topics_description\")}\n            />\n          }\n          topicPartitionsKpi={\n            <PartitionCard\n              metric={metricsKpi.topicPartitions}\n              isLoading={metricsKpi.isInitialLoading || metricsKpi.isLoading}\n              topicPartitionsLimit={metricsKpi.topicPartitionsLimit}\n            />\n          }\n          consumerGroupKpi={\n            <CardKpi\n              metric={metricsKpi.consumerGroups}\n              isLoading={metricsKpi.isInitialLoading || metricsKpi.isLoading}\n              name={t(\"metrics:metric_kpi_consumerGroup_name\")}\n              popover={t(\"metrics:metric_kpi_consumerGroup_description\")}\n            />\n          }\n          diskSpaceMetrics={<ConnectedKafkaInstanceMetrics />}\n          topicMetrics={\n            <ConnectedTopicsMetrics onCreateTopic={onCreateTopic} />\n          }\n        />\n      );\n  }\n};\n\nconst ConnectedKafkaInstanceMetrics: VoidFunctionComponent = () => {\n  const {\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n    duration,\n    lastUpdated,\n    usedDiskSpaceMetrics,\n    clientConnectionsMetrics,\n    connectionAttemptRateMetrics,\n    diskSpaceLimit,\n    connectionsLimit,\n    connectionRateLimit,\n    onDurationChange,\n    onRefresh,\n  } = useKafkaInstanceMetrics();\n\n  return (\n    <CardKafkaInstanceMetrics\n      usedDiskMetrics={usedDiskSpaceMetrics}\n      clientConnectionsMetrics={clientConnectionsMetrics}\n      connectionAttemptRateMetrics={connectionAttemptRateMetrics}\n      duration={duration}\n      backendUnavailable={isFailed}\n      isInitialLoading={isInitialLoading}\n      isLoading={isLoading}\n      isRefreshing={isRefreshing}\n      isJustCreated={isJustCreated}\n      lastUpdated={lastUpdated}\n      onRefresh={onRefresh}\n      onDurationChange={onDurationChange}\n      diskSpaceLimit={diskSpaceLimit || 0}\n      connectionsLimit={connectionsLimit || 0}\n      connectionRateLimit={connectionRateLimit || 0}\n    />\n  );\n};\n\ntype ConnectedTopicsMetricsProps = {\n  onCreateTopic: () => void;\n};\nconst ConnectedTopicsMetrics: VoidFunctionComponent<\n  ConnectedTopicsMetricsProps\n> = ({ onCreateTopic }) => {\n  const {\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n    lastUpdated,\n    selectedTopic,\n    duration,\n    topics,\n    bytesIncoming,\n    bytesOutgoing,\n    bytesPerPartition,\n    incomingMessageRate,\n    onDurationChange,\n    onTopicChange,\n    onRefresh,\n  } = useTopicsMetrics();\n\n  return (\n    <CardTopicsMetrics\n      backendUnavailable={isFailed}\n      topics={topics}\n      incomingTopicsData={bytesIncoming}\n      outgoingTopicsData={bytesOutgoing}\n      partitions={bytesPerPartition}\n      incomingMessageRate={incomingMessageRate}\n      duration={duration}\n      isInitialLoading={isInitialLoading}\n      isLoading={isLoading}\n      isRefreshing={isRefreshing}\n      isJustCreated={isJustCreated}\n      lastUpdated={lastUpdated}\n      selectedTopic={selectedTopic}\n      onRefresh={onRefresh}\n      onSelectedTopic={onTopicChange}\n      onDurationChange={onDurationChange}\n      onCreateTopic={onCreateTopic}\n    />\n  );\n};\n","import { useSelector } from \"@xstate/react\";\nimport { useCallback, useContext } from \"react\";\nimport type { MetricsKpiMachineContext } from \"./machines\";\nimport { MetricsKpiContext } from \"./MetricsKpiProvider\";\n\ntype SelectorReturn = MetricsKpiMachineContext & {\n  isInitialLoading: boolean;\n  isRefreshing: boolean;\n  isLoading: boolean;\n  isFailed: boolean;\n  isJustCreated: boolean;\n};\n\nexport function useMetricsKpi() {\n  const { service } = useContext(MetricsKpiContext);\n\n  const {\n    topics,\n    topicPartitions,\n    topicPartitionsLimit,\n    consumerGroups,\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n  } = useSelector<typeof service, SelectorReturn>(\n    service,\n    useCallback(\n      (state) => ({\n        ...state.context,\n        isInitialLoading: state.hasTag(\"initialLoading\"),\n        isRefreshing: state.hasTag(\"refreshing\"),\n        isLoading: state.hasTag(\"loading\"),\n        isFailed: state.hasTag(\"failed\"),\n        isJustCreated: state.hasTag(\"justCreated\"),\n      }),\n      []\n    )\n  );\n\n  const onRefresh = useCallback(() => service.send(\"refresh\"), [service]);\n\n  return {\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n    topics,\n    topicPartitions,\n    consumerGroups,\n    topicPartitionsLimit,\n    onRefresh,\n  };\n}\n","import {\n  Button,\n  Card,\n  CardBody,\n  Flex,\n  FlexItem,\n  Modal,\n  ModalVariant,\n  PageSection,\n  Spinner,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { FunctionComponent } from \"react\";\nimport { useState } from \"react\";\nimport \"./Settings.css\";\n// import { useAlert, AlertVariant } from \"@rhoas/app-services-ui-components\";\nimport type { SettingsStatus } from \"./types\";\n\nexport type SettingsProps = {\n  onSubmitReAuthentication: (\n    reauthenticationEnabled: boolean\n  ) => Promise<boolean>;\n  reauthenticationEnabled: boolean;\n};\n\nexport const Settings: FunctionComponent<SettingsProps> = ({\n  onSubmitReAuthentication,\n  reauthenticationEnabled,\n}) => {\n  const { t } = useTranslation(\"kafka\");\n  const { addAlert } = {\n    //TODO\n    addAlert: (args: { [key: string]: any }) => {\n      // TODO\n    },\n  };\n  //states\n  const [connectionStatus, setConnectionStatus] = useState<SettingsStatus>(\n    reauthenticationEnabled ? \"On\" : \"Off\"\n  );\n  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n\n  const onClose = () => {\n    setIsModalOpen(false);\n  };\n\n  const onChangeSwitch = (checked: boolean) => {\n    if (connectionStatus === \"On\") {\n      setIsModalOpen(true);\n    } else {\n      handleReAuthentication(checked);\n    }\n  };\n\n  const handleReAuthentication = (reAuthValue: boolean) => {\n    setConnectionStatus(reAuthValue ? \"TurningOn\" : \"TurningOff\");\n\n    onSubmitReAuthentication(reAuthValue)\n      .then((reauthentication) => {\n        setConnectionStatus(reauthentication ? \"On\" : \"Off\");\n\n        addAlert({\n          variant: \"success\",\n          title: t(\"settings.success_alert\", {\n            status: reauthentication ? \"on\" : \"off\",\n          }),\n        });\n      })\n      .catch(() => {\n        setConnectionStatus(!reAuthValue ? \"On\" : \"Off\");\n\n        addAlert({\n          variant: \"danger\",\n          title: t(\"settings.error_alert_title\"),\n          description: t(\"settings.error_alert_title_description\"),\n        });\n      });\n  };\n\n  const onTurnOff = () => {\n    setIsModalOpen(false);\n    handleReAuthentication(false);\n  };\n\n  return (\n    <>\n      <PageSection>\n        <Card>\n          <CardBody>{t(\"settings.kafka_instance_settings_label\")}</CardBody>\n        </Card>\n      </PageSection>\n      <PageSection>\n        <Card className={\"mas--settings__card\"}>\n          <CardBody>\n            <Flex flexWrap={{ default: \"nowrap\" }}>\n              <FlexItem grow={{ default: \"grow\" }}>\n                <Flex>\n                  <FlexItem component={\"span\"} spacer={{ default: \"spacerSm\" }}>\n                    <strong>\n                      {t(\"settings.connection_re_authentication_label\")}\n                      {\":\"}\n                    </strong>\n                  </FlexItem>\n                  <FlexItem>\n                    {(() => {\n                      switch (connectionStatus) {\n                        case \"On\":\n                          return t(\n                            \"settings.Connection_re_authentication_states.on\"\n                          );\n                        case \"TurningOff\":\n                          return (\n                            <>\n                              <Spinner\n                                size=\"md\"\n                                aria-valuetext={t(\n                                  \"settings.Connection_re_authentication_states.turning_off\"\n                                )}\n                                aria-label={t(\n                                  \"settings.connection_re_authentication_label\"\n                                )}\n                              />{\" \"}\n                              {t(\n                                \"settings.Connection_re_authentication_states.turning_off\"\n                              )}\n                            </>\n                          );\n                        case \"Off\":\n                          return t(\n                            \"settings.Connection_re_authentication_states.off\"\n                          );\n                        case \"TurningOn\":\n                          return (\n                            <>\n                              <Spinner\n                                size=\"md\"\n                                aria-valuetext={\n                                  \"settings.Connection_re_authentication_states.turning_on\"\n                                }\n                                aria-label={t(\n                                  \"settings.connection_re_authentication_label\"\n                                )}\n                              />{\" \"}\n                              {t(\n                                \"settings.Connection_re_authentication_states.turning_on\"\n                              )}\n                            </>\n                          );\n                        default:\n                          return null;\n                      }\n                    })()}\n                  </FlexItem>\n                </Flex>\n              </FlexItem>\n              <FlexItem>\n                <Switch\n                  id=\"Connection-re-authentication-switch\"\n                  aria-label={t(\"settings.connection_re_authentication_label\")}\n                  isChecked={\n                    connectionStatus === \"On\" ||\n                    connectionStatus === \"TurningOff\"\n                  }\n                  isDisabled={\n                    connectionStatus === \"TurningOff\" ||\n                    connectionStatus === \"TurningOn\"\n                  }\n                  onChange={onChangeSwitch}\n                />\n              </FlexItem>\n              <Modal\n                variant={ModalVariant.small}\n                isOpen={isModalOpen}\n                title={t(\"settings.warning_title\")}\n                titleIconVariant={\"warning\"}\n                actions={[\n                  <Button key={\"confirm\"} variant=\"primary\" onClick={onTurnOff}>\n                    {t(\"settings.turn_off_button_label\")}\n                  </Button>,\n                  <Button key={\"cancel\"} variant=\"link\" onClick={onClose}>\n                    {t(\"common:cancel\")}\n                  </Button>,\n                ]}\n                onClose={onClose}\n              >\n                {t(\"settings.warning_description\")}\n              </Modal>\n            </Flex>\n          </CardBody>\n        </Card>\n      </PageSection>\n    </>\n  );\n};\n"],"names":["ControlPlaneRouteRoot","NewInstanceSegment","ControlPlaneSpecialSegments","ControlPlaneRoutePath","ControlPlaneNewInstancePath","ControlPlaneDeleteInstancePath","DataPlaneRoutePath","DrawerContext","createContext","DrawerProvider","children","match","useRouteMatch","Error","selectedInstance","params","id","includes","undefined","section","useState","isExact","isExpanded","setIsExpanded","activeTab","setActiveTab","onClose","useRef","toggleExpanded","useCallback","newValue","prev","current","value","useMemo","Provider","useDrawer","context","useContext","OverviewRoute","useDataPlaneInstance","instancesHref","history","useHistory","instance","isError","useEffect","replace","DataPlaneHeaderConnected","activeSection","url","sectionsHref","dashboard","topics","consumer","permissions","settings","instanceName","name","onDetails","onConnection","canOpenConnection","status","canChangeOwner","onChangeOwner","canDelete","onDelete","AclsRoute","PageSection","ConsumerGroupsRoute","usePaginationSearchParams","page","perPage","setPagination","setPaginationQuery","resetPaginationQuery","consumerName","useURLSearchParamsChips","useSortableSearchParams","isColumnSortable","sort","sortDirection","data","adminUrl","direction","groupId","chips","consumers","groups","itemCount","count","isRowSelected","onSearchConsumer","clear","toggle","onClearAllFilters","onPageChange","onRemoveConsumerChip","onRemoveConsumerChips","onViewPartition","onViewResetOffset","DashboardRoute","hasUserAlreadyClosedAlert","setHasUserAlreadyClosedAlert","onAlertClose","queryInstance","queryKpisMetrics","queryInstanceMetrics","queryTopicMetrics","queryTopics","getMetricsKpi","kpis","topicPartitionsLimit","maxPartitions","getKafkaInstanceMetrics","interval","duration","Promise","all","metrics","diskSpaceLimit","request","max_data_retention_size","bytes","connectionsLimit","connections","connectionRateLimit","connectionRate","reject","getTopicsMetrics","selectedTopic","kafkaTopics","map","t","topic_name","onCreateTopic","DataPlaneGate","Loading","SettingsRoute","onSubmitReAuthentication","resolve","reauthenticationEnabled","TopicsRoute","topicChips","partitions","filter","topicName","getUrlFortopic","row","onEdit","onSearchTopic","onRemoveTopicChip","onRemoveTopicChips","onTopicLinkClick","CreateKafkaInstanceRoute","callbacks","auth","useChrome","getUsername","getUser","username","identity","user","checkDeveloperAvailabilityQuery","standardQuotaQuery","providersWithRegionsQuery","getProvidersInfo","getProviderRegionsSizes","checkDeveloperAvailability","onAvailable","onUsed","onUnavailable","checkStandardQuota","onQuotaAvailable","onNoQuotaAvailable","onOutOfQuota","hasTrialQuota","remainingPrepaidQuota","remainingMarketplaceQuota","marketplaceSubscriptions","quota","fetchProvidersWithRegions","plan","providers","getStandardSizes","provider","region","providersInfo","providerInfo","find","p","getTrialSizes","standardSizes","displayName","trialSizes","standard","trial","useCreateKafkaCallbacks","createKafkaInstance","qsContext","QuickStartContext","onClickKafkaOverview","push","onClickQuickStart","setActiveQuickStart","onCreate","onSuccess","onError","mutateAsync","onCancel","CreateKafkaInstance","isModalOpen","onClickContactUs","onLearnHowToAddStreamingUnits","onLearnMoreAboutSizes","subscriptionOptionsHref","document","location","href","appendTo","getElementById","body","DeleteKafkaInstanceRoute","isDeleting","KafkaInstancesRoute","getUrlForInstance","labels","namesChips","ownersChips","statusesChips","fields","owner","clearChained","openDrawer","tab","onDetailsClick","onConnectionsClick","instances","names","owners","statuses","onSearchName","add","onRemoveNameChip","remove","onRemoveNameChips","onSearchOwner","onRemoveOwnerChip","onRemoveOwnerChips","onSearchStatus","onRemoveStatusChip","onRemoveStatusChips","onClickConnectionTabLink","onClickSupportLink","onInstanceLinkClick","onQuickstartGuide","canHaveInstanceLink","StreamsRoutes","drawerInstance","onTabChange","Suspense","fallback","Fallback","Switch","Route","path","exact","Redirect","from","to","memo","updateDocumentTitle","on","title","useTranslation","register","notifications","unregister","event","console","dir","navId","init","errorDescriptionKey","middleware","ReactQueryDevtoolsProduction","lazy","then","d","default","ReactQueryDevtools","ApiContext","ApiProvider","showDevTools","QueryClientProvider","client","initialIsOpen","useApiConfiguration","masQueries","_root","scope","organization","entity","available","subentity","developerAvailability","standardAvailability","kafkaQueries","list","details","consumerGroups","kpi","type","topic","providerQueries","limits","developer","accessToken","basePath","kafkasFleet","DefaultApi","Configuration","account","AppServicesApi","TopicsApi","GroupsApi","kafkaRequestToKafkaInstanceEnhanched","developerPlanInstanceLimits","standardPlanInstanceLimits","enhancedInstance","billing","createdAt","created_at","Date","toISOString","egress","expiryDate","expires_at","ingress","messageSize","billing_model","cloud_provider","size","accepted","preparing","provisioning","ready","failed","deprovision","deleting","storage","updatedAt","updated_at","version","bootstrapUrl","bootstrap_server_host","admin_api_server_url","marketplaceForBilling","ms","subscriptions","s","billing_cloud_account_id","marketplace","subscription","e","warn","thisInstanceLimits","instance_type","l","size_id","useKafkaInstanceTransformer","getStandardQuotaQuery","useStandardQuotaFetchQuery","useProvidersWithRegionsFetchQuery","useProviderRegionSizesFetchQuery","standardQuota","standardPlanLimitsQuery","developerPlanLimitsQuery","standardPlanLimits","developerPlanLimits","useKafkaInstance","refetchInterval","dataMapper","api","useQuery","enabled","Boolean","queryKey","queryFn","getKafkaById","APIErrorCodes","fetchKafkaTopics","getTopics","response","items","length","retention_size","config","retention_time","total","resourceName","isStandardQuota","q","related_resources","r","isMarketplaceQuota","valuesToQuery","field","values","comparison","v","trim","join","uiColumnMapping","fetchKafkaInstances","getKafkas","search","flatMap","filtersToSearch","toString","res","rawInstances","fetchKafkaKpiMetrics","getMetricsByInstantQuery","topicPartitions","forEach","metric","fetchKafkaTopicMetrics","getMetricsByRangeQuery","safeMetrics","m","filteredMetrics","Array","Set","bytesIncoming","bytesOutgoing","bytesPerPartition","incomingMessageRate","partition","addAggregatedTotalBytesTo","timestamp","metricsTopics","stateMapping","DEAD","EMPTY","STABLE","UNKNOWN","COMPLETING_REBALANCE","PREPARING_REBALANCE","apiSizeToComponentSize","isDisabled","apiSize","display_name","quota_consumed","ingress_throughput_per_sec","egress_throughput_per_sec","Math","round","total_max_connections","max_connection_attempts_per_sec","max_partitions","max_message_size","maturity_status","trialDurationHours","lifespan_seconds","fetchKafkaInstanceMetrics","persistentvolumeclaim","usedDiskSpaceMetrics","connectionAttemptRateMetrics","clientConnectionsMetrics","addAggregatedValuesTo","fetchProviderRegions","getCloudProviderRegions","instanceType","capacity","some","c","max_capacity_reached","available_sizes","useKafkaInstances","queryClient","args","i","setQueryData","useKafkaInstanceTopics","useKafkaInstanceConsumerGroups","getConsumerGroups","consumerGroupId","activeMembers","activeConsumers","partitionsWithLag","laggingPartitions","state","fetchKafkaConsumerGroups","useKafkaInstanceFetchQuery","fetchQuery","ams","fetchOrganization","apiAccountsMgmtV1CurrentAccountGet","staleTime","Infinity","apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet","organizationId","quotaResponse","statusText","standardQuotas","resource_name","product","prepaidQuota","marketplaceQuotas","allowed","consumed","reduce","agg","unaggregatedSubscriptions","cloud_accounts","subscriptionMarketplaces","cloud_provider_id","cloud_account_id","useKafkaInstanceTopicsFetchQuery","useKafkaInstanceMetricsFetchQuery","kms","regions","regionInfo","availableSizes","sizes","instance_types","bind","fetchProviderRegionSizes","getInstanceTypesByCloudProviderAndRegion","getCloudProviders","allProviders","firstProvider","defaultProvider","useKafkaInstanceKpiMetricsFetchQuery","useKafkaInstanceTopicMetricsFetchQuery","useDeveloperInstanceAvailabilityFetchQuery","k","useKafkaCreateInstanceMutation","useMutation","props","kafkaRequest","sizeId","createKafka","isServiceApiError","code","DUPLICATE_INSTANCE_NAME","INTERNAL_CAPACITY_ERROR","INSUFFICIENT_QUOTA","error","invalidateQueries","UNAUTHORIZED_USER","TRIAL_USED","FAILED_TO_CHECK_QUOTA","OWNER_DOES_NOT_EXIST","useKafkaDeleteInstanceMutation","deleteKafkaById","message","KafkaInstancesSortableColumns","KafkaTopicsSortableColumns","Object","TopicOrderKey","KafkaConsumerGroupSortableColumns","ConsumerGroupOrderKey","METRICS_LAG_ALERT","isReactQueryDevToolsEanbled","localStorage","getItem","metricsIsLagAlertsDismissed","metricsDismissLagAlerts","setItem","ConsumerGroupEmptyState","EmptyState","variant","EmptyStateVariant","EmptyStateIcon","icon","Title","headingLevel","TitleSizes","EmptyStateBody","Columns","ConsumerGroups","isFiltered","TableView","TableVariant","tableOuiaId","ariaLabel","columns","renderHeader","column","Th","key","info","popover","popoverProps","headerContent","renderCell","Td","dataLabel","renderActions","ActionsColumn","onClick","filters","onSearch","onRemoveChip","onRemoveGroup","validate","test","errorMessage","emptyStateNoData","emptyStateNoResults","EmptyStateNoResults","ControlPlaneHeader","PageSectionVariants","hasShadowBottom","stickyOnBreakpoint","Level","LevelItem","TextContent","Text","component","onProviderChange","selectedProvider","defaultRegion","capabilities","form","creationError","tsTypes","schema","events","services","initial","states","verifyAvailability","entry","always","cond","target","overQuota","tags","instanceUnavailable","regionsUnavailable","configuring","unsubmitted","submitted","create","description","invalid","valid","fieldInvalid","submit","saving","createSuccess","createError","actions","saved","empty","nameChange","providerChange","regionChange","idle","disabled","waitingForQuota","loading","invoke","src","onDone","sizeChange","billingChange","prepaidOnly","singleSubscription","onlySubscriptions","selectSubscription","prepaidAndSubscriptions","prepaid","selectPrepaid","setInitialContext","availableProviders","setName","setProvider","setRegion","setSize","setSizes","smallestSize","a","b","resetCreationErrorMessage","_context","setCreationError","triggerSave","triggerSubmit","triggerBillingChange","setBillingToPrepaid","setBillingToSubscription","unsetSubscription","guards","isOverQuota","instanceAvailability","isInstanceUnavailable","isRegionsUnavailable","nameIsEmpty","nameIsValid","providerIsValid","selectedProviderInfo","regionIsValid","noProviderOrRegion","noSizes","emptySizes","sizeIsDisabled","billingRequiredButNotSelected","_","meta","hasTag","sizeIsOverQuota","availableQuota","didProviderChange","didRegionChange","didSizeChange","onlyPrepaid","matchesSelectedProviderOrRHMarketplaceAndHasQuota","hasPrepaidQuota","noSelectedProvider","trialUsed","trialUnavailable","isTrialUsed","isTrialUnavailable","noProviderAndRegion","save","complete","setDeveloperAvailable","setDeveloperUnavailable","setDeveloperUsed","setStandardAvailable","setStandardOutOfQuota","setStandardUnavailable","setProviders","setProvidersOrRegionsUnavailable","setCapabilities","notifyCreateErrorToStandardPlan","notifyCreateErrorToTrialPlan","LogoAWS","URL","LogoAzure","LogoGCP","LogoRedhat","AWSLogo","alt","style","height","AzureLogo","GCPLogo","KafkaInstanceActions","customChild","DropdownGroup","label","tooltipProps","position","content","tooltip","pointerEvents","cursor","isSeparator","DataPlaneHeader","actionsProps","className","Breadcrumb","ouiaId","BreadcrumbItem","render","Link","isActive","padding","Nav","NavList","NavItem","borderTop","DeleteKafkaInstance","DeleteModal","confirmationValue","ns","i18nKey","components","lng","debug","resources","en","common","kafka","it","delete","useKafkaLabels","degraded","suspended","suspending","resuming","statusesSimplified","creating","aws","gcp","azure","providerRegions","RetentionTimeUnits","RetentionSizeUnits","CreatingStatuses","ReadyStatuses","DegradedStatuses","SuspendingStatuses","SuspendedStatuses","DeletingStatuses","ResumingStatuses","SimplifiedStatuses","DetailsTabAlert","hoursLeft","differenceInHours","now","Alert","time","date","format","isInline","KafkaDetailsTab","kafkaVersion","renderTextListItem","TextListItem","TextListItemVariants","Skeleton","width","screenreaderText","contentName","TextList","TextListVariants","SuspendedConnection","color","KafkaConnectionTabP2","isKafkaSuspended","isKafkaPending","externalServer","tokenEndPointUrl","linkToServiceAccount","linkToAccessTab","adminAPIUrl","kafkaFleetManagerUrl","showCreateServiceAccountModal","TextVariants","fontSize","ClipboardCopy","textAriaLabel","isReadOnly","Button","ButtonVariant","ExpandableSection","toggleContent","onToggle","Popover","bodyContent","testId","Label","KafkaInstanceDrawer","DrawerPanelContent","KafkaInstanceDrawerPanel","Drawer","DrawerContent","panelContent","DrawerContentBody","handleSelect","DrawerHead","DrawerActions","DrawerCloseButton","DrawerPanelBody","Tabs","activeKey","onSelect","Tab","eventKey","TabTitleText","getExternalServer","getAdminServerUrl","endsWith","StatusLabel","forwardRef","ref","showWarning","showError","withPopover","buttonVariant","Split","hasGutter","SplitItem","Spinner","isPlain","Flex","FlexItem","HelperText","HelperTextItem","PopoverStatusOrder","KafkaToPopoverMapping","StatusProgressStepper","currentStatus","currentStep","findIndex","getVariant","index","ProgressStepper","isVertical","ProgressStep","titleId","isCurrent","StatusPopoverContent","Stack","StackItem","StatusPopover","initialOpen","reference","isVisible","setIsVisible","handleClickConnectionTabLink","handleClickSupportLink","shouldOpen","shouldClose","enableFlip","SuspendedPopover","alertSeverityVariant","headerIcon","KafkaInstanceStatus","warningAfterMinutes","errorAfterMinutes","popoverStatus","alert","setAlert","labelRef","checkCreatedAt","elapsed","differenceInMinutes","useInterval","EmptyStateNoInstances","KafkaInstances","isFilled","timeCreatedDate","instanceLinkEnable","isAriaDisabled","changeOwnerEnabled","deleteEnabled","openConnectionEnabled","onRowClick","isRowDeleted","toolbarBreakpoint","options","isPrimary","limit","offset","selectedMessage","epoch","initialLoading","fetchSuccess","fetchFail","verifyMessages","noData","refresh","pristine","dirty","shouldSearch","setPartition","setEpoch","setTimestamp","setOffset","setLatest","setLimit","selectMessage","deselectMessage","refreshing","setMessages","messages","offsetMin","offsetMax","lastUpdated","noMessages","selectedMessageNotAvailable","m1","m2","JSON","stringify","areFiltersChanged","PrincipalType","KafkaInstanceCapacityTable","columnNames","firstStreamingUnit","secondStreamingUnit","TableComposable","Thead","Tr","Tbody","table","MarketingPageHero","tagLine","description2","heroImage","heroImageSize","heroImageCanRepeat","heroImagePositionY","cta","MarketingPageSection","isWidthLimited","KafkaPageV3","Grid","lg","Card","CardHeader","CardHeaderMain","CardTitle","CardBody","CardFooter","spaceItems","bold","alignSelf","justifyContent","flex","DescriptionList","isHorizontal","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","Divider","xl","orientation","EmptyStateNoTopic","unitsToBytes","BYTE","KIBIBYTE","MEBIBYTE","GIBIBYTE","TEBIBYTE","unitsToMilliSecond","MILLISECOND","SECOND","MINUTE","HOUR","DAY","KafkaTopics","days","unit","hours","minutes","seconds","millisecondsToTime","Number","formattedRetentionTime","parseInt","tebibytes","gibibytes","mebibytes","kibibytes","bytesToMemorySize","formattedRetentionSize","DurationOptions","EmptyStateInitialLoading","EmptyStateMetricsUnavailable","MetricsLayout","metricsLagAlert","topicsKpi","topicPartitionsKpi","consumerGroupKpi","diskSpaceMetrics","topicMetrics","hasOverflowScroll","GridItem","sm","CardBodyLoading","Bullseye","isSVG","timeIntervalsMapping","Last5minutes","ticks","showDate","Last15minutes","Last30minutes","Last1hour","Last3hours","Last6hours","Last12hours","Last24hours","Last2days","Last7days","chartHeight","chartPadding","bottom","left","right","top","ChartSkeletonLoader","useChartWidth","containerRef","setWidth","handleResize","clientWidth","useLayoutEffect","window","addEventListener","removeEventListener","formatBytes","units","shouldShowDate","timeDuration","dateToChartValue","fromUnixTime","formatInTimeZone","timestampsToTicks","timestamps","allTimestamps","mostRecentTs","max","fill","sub","getTime","ChartLinearWithOptionalLimit","chartName","xLabel","yLabel","usageLimit","formatValue","isLoading","emptyState","itemsPerRow","lineLabel","limitLabel","legendData","symbol","chart_color_black_500","chart_color_blue_300","areaColor","softLimitColor","chartData","area","softLimit","entries","x","y","tickValues","keys","getChartData","hasMetrics","Chart","ariaTitle","containerComponent","ChartVoronoiContainer","datum","constrainToVisibleArea","legendPosition","legendComponent","ChartLegend","themeColor","ChartTheme","legendAllowWrap","ChartAxis","C","tickFormat","dependentAxis","ChartGroup","ChartArea","ChartThreshold","stroke","colors","chart_color_cyan_300","ChartLogSizePerPartition","dataMap","ChartPopover","ChartTotalBytes","incomingTopicsData","outgoingTopicsData","incomingTopic","outgoingTopic","incomingTopicName","outgoingTopicName","incomingLine","metricsToLine","line","outgoingLine","chart_color_green_300","getBytesChartData","tickCount","ChartLine","EmptyStateNoMetricsData","EmptyStateNoMetricsDataForSelection","EmptyStateNoTopics","EmptyStateNoTopicSelected","DurationOptionsMap","FilterByTime","keyText","disableToolbar","onDurationChange","isTimeSelectOpen","setIsTimeSelectOpen","ariaId","ToolbarItem","hidden","Select","SelectVariant","selection","mapping","selections","isOpen","SelectGroup","idx","SelectOption","timeOptions","widths","md","FilterByTopic","topicList","onSetSelectedTopic","isTopicSelectOpen","setIsTopicSelectOpen","random","selectKey","setSelectKey","allTopicsLabel","topicOptions","placeholderText","onFilter","textInput","filteredTopics","indexOf","isGrouped","hasInlineFilter","ToolbarRefresh","isRefreshing","onRefresh","alignment","ToolbarTopicsMetrics","onSetTimeDuration","Toolbar","ToolbarContent","CardTopicsMetrics","backendUnavailable","isInitialLoading","isJustCreated","onSelectedTopic","noTopics","selectedTopicNotInList","chartEmptyState","TotalBytesTitle","IncomingMessageRate","PartitionSizeTitle","ToolbarKafkaInstanceMetric","CardKafkaInstanceMetrics","usedDiskMetrics","ChartTitle","helperText","CardKpi","isFullHeight","shape","MetricsLagAlert","isClosed","onClickClose","actionClose","AlertActionCloseButton","PartitionCard","isExpandable","AlertVariant","role","apiState","failure","after","KafkaInstanceMetricsMachine","fetchFailures","callApi","criticalFail","justCreated","withResponse","selectDuration","setFetchTimestamp","setMetrics","incrementRetries","resetRetries","setDuration","canRetryFetching","TopicsMetricsMachine","selectTopic","setTopic","MetricsKpiMachine","KafkaInstanceMetricsContext","KafkaInstanceMetricsProvider","service","callback","results","catch","devTools","MetricsKpiContext","MetricsKpiProvider","TopicsMetricsContext","TopicsMetricsProvider","useKafkaInstanceMetrics","isFailed","send","useTopicsMetrics","onTopicChange","localeCompare","Metrics","ConnectedMetrics","kafkaInstanceMetrics","topicsMetrics","metricsKpi","useMetricsKpi","ConnectedKafkaInstanceMetrics","ConnectedTopicsMetrics","Settings","connectionStatus","setConnectionStatus","setIsModalOpen","handleReAuthentication","reAuthValue","reauthentication","flexWrap","grow","spacer","isChecked","onChange","checked","Modal","ModalVariant","titleIconVariant"],"sourceRoot":""}