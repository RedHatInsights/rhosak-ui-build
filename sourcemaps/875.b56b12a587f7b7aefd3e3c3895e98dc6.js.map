{"version":3,"file":"js/875.1672936518457.c8e3dce30e3925ebc750.js","mappings":"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","sources":["webpack:///./src/routes/control-plane/routesConsts.ts","webpack:///./src/routes/control-plane/DrawerProvider.tsx","webpack:///./src/routes/control-plane/routes/KafkaInstancesRoute.tsx","webpack:///./src/routes/control-plane/routes/CreateKafkaInstanceRoute.tsx","webpack:///./src/routes/control-plane/routes/useCreateKafkaCallbacks.ts","webpack:///./src/routes/control-plane/routes/DeleteKafkaInstanceRoute.tsx","webpack:///./src/routes/control-plane/ControlPlaneRoutes.tsx","webpack:///./src/routes/data-plane/routesConsts.ts","webpack:///./src/routes/data-plane/useDataPlaneGate.tsx","webpack:///./src/routes/data-plane/DataPlaneGate.tsx","webpack:///./src/routes/data-plane/routes/DataPlaneHeaderConnected.tsx","webpack:///./src/routes/data-plane/routes/AclsRoute.tsx","webpack:///./src/routes/data-plane/routes/TopicsRoute.tsx","webpack:///./src/routes/data-plane/routes/SettingsRoute.tsx","webpack:///./src/routes/data-plane/routes/DashboardRoute.tsx","webpack:///./src/routes/data-plane/routes/ConsumerGroupsRoute.tsx","webpack:///./src/routes/data-plane/useTopicGate.tsx","webpack:///./src/routes/data-plane/routes/DataPlaneTopicHeaderConnected.tsx","webpack:///./src/routes/data-plane/routes/TopicConsumerGroupsRoute.tsx","webpack:///./src/routes/data-plane/routes/TopicMessagesRoute.tsx","webpack:///../../packages/ui/src/components/CreateKafkaTopic/components/Cleanup.tsx","webpack:///../../packages/ui/src/components/CreateKafkaTopic/components/Flush.tsx","webpack:///../../packages/ui/src/components/CreateKafkaTopic/components/Message.tsx","webpack:///../../packages/ui/src/components/CreateKafkaTopic/components/Replication.tsx","webpack:///../../packages/ui/src/components/CreateKafkaTopic/components/TopicAdvanceIndex.tsx","webpack:///../../packages/ui/src/components/CreateKafkaTopic/components/TopicAdvanceJumpLinks.tsx","webpack:///../../packages/ui/src/components/KafkaTopicDetails/TopicDetailView.tsx","webpack:///./src/routes/data-plane/routes/TopicPropertiesRoute.tsx","webpack:///./src/routes/data-plane/routes/TopicSchemasRoute.tsx","webpack:///./src/routes/data-plane/TopicGate.tsx","webpack:///./src/routes/data-plane/DataPlaneRoutes.tsx","webpack:///./src/routes/overview/OverviewRoute.tsx","webpack:///./src/routes/Routes.tsx","webpack:///./src/App.tsx","webpack:///./src/QuickstartLoader.tsx","webpack:///./src/store/index.ts","webpack:///../../packages/ui-models/src/models/kafka.ts","webpack:///../../packages/ui/src/components/KafkaTopics/types.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchConsumerGroups.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchKafkaMetrics.ts","webpack:///../../packages/consoledot-api/src/fetchers/valuesToQuery.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchKafkas.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchKafkaKpis.ts","webpack:///../../packages/consoledot-api/src/transformers/topicTransformer.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchTopicsMetrics.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchTopics.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchProviderRegionSizes.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchProvidersWithRegions.ts","webpack:///../../packages/consoledot-api/src/utilsAndConstants.ts","webpack:///../../packages/consoledot-api/src/ApiProvider.tsx","webpack:///../../packages/consoledot-api/src/queryKeys.ts","webpack:///../../packages/consoledot-api/src/useApi.ts","webpack:///../../packages/consoledot-api/src/transformers/kafkaRequestToKafkaInstanceEnhanched.ts","webpack:///../../packages/consoledot-api/src/queries/useKafkaInstanceTransformer.ts","webpack:///../../packages/consoledot-api/src/queries/useKafka.ts","webpack:///../../packages/consoledot-api/src/queries/useCreateInstance.ts","webpack:///../../packages/consoledot-api/src/queries/useKafkas.ts","webpack:///../../packages/consoledot-api/src/queries/useTopic.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchTopic.ts","webpack:///../../packages/consoledot-api/src/queries/useTopics.ts","webpack:///../../packages/consoledot-api/src/queries/useConsumerGroups.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useDeveloperInstanceAvailabilityFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useKafkaFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useKafkaKpisFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useKafkaMetricsFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useTopicsMetricsFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useTopicsFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useMessagesFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchMessages.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useProviderRegionSizesFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useProvidersWithRegionsFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useStandardQuotaFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchOrganization.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchStandardQuota.ts","webpack:///../../packages/consoledot-api/src/mutations/useCreateKafkaMutation.ts","webpack:///../../packages/consoledot-api/src/mutations/useDeleteKafkaMutation.ts","webpack:///../../packages/consoledot-api/src/mutations/useUpdateKafkaMutation.ts","webpack:///../../packages/consoledot-api/src/types.ts","webpack:///../../packages/local-storage-helpers/index.ts","webpack:///../../packages/ui/src/components/ConsumerGroups/components/ConsumerGroupState.tsx","webpack:///../../packages/ui/src/components/ConsumerGroups/components/ConsumerGroupEmptyState.tsx","webpack:///../../packages/ui/src/components/ConsumerGroups/ConsumerGroups.tsx","webpack:///../../packages/ui/src/components/ControlPlaneHeader.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/machines/shared.ts","webpack:///../../packages/ui/src/components/CreateKafkaInstance/machines/StandardPlanMachine.ts","webpack:///../../packages/ui/src/components/CreateKafkaInstance/machines/TrialPlanMachine.ts","webpack:///../../packages/ui/src/components/CreateKafkaInstance/machines/CreateKafkaInstanceMachine.ts","webpack:///../../packages/ui/src/components/CreateKafkaInstance/machines/CreateKafkaInstanceProvider.tsx","webpack:///../../packages/ui/src/components/Logos/images.ts","webpack:///../../packages/ui/src/components/Logos/AWSLogo.tsx","webpack:///../../packages/ui/src/components/Logos/AzureLogo.tsx","webpack:///../../packages/ui/src/components/Logos/GCPLogo.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/components/BillingTiles.tsx","webpack:///../../packages/ui/src/components/Logos/RedhatLogo.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/components/CloudProviderTiles.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/StandardInstanceForm.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceActions.tsx","webpack:///../../packages/ui/src/components/DataPlaneHeader.tsx","webpack:///../../packages/ui/src/components/DataPlaneTopicHeader.tsx","webpack:///../../packages/ui/src/components/DeleteKafKaInstance/DeleteKafkaInstance.tsx","webpack:///../../packages/ui/src/components/I18nProvider.tsx","webpack:///../../packages/ui/src/hooks/useKafkaLabels.ts","webpack:///../../packages/ui/src/components/KafkaInstanceDrawer/components/DetailsTabAlert.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceDrawer/components/KafkaDetailsTab.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceDrawer/components/SuspendedConnection.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceDrawer/components/KafkaConnectionTabP2.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceDrawer/KafkaInstanceDrawer.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/components/StatusLabel.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/types.ts","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/components/StatusProgressStepper.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/components/StatusPopoverContent.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/components/StatusPopover.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/components/SuspendedPopover.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/KafkaInstanceStatus.tsx","webpack:///../../packages/ui/src/components/KafkaInstances/components/EmptyStateNoInstances.tsx","webpack:///../../packages/ui/src/components/KafkaInstances/components/EmptyStateNoResults.tsx","webpack:///../../packages/ui/src/components/KafkaInstances/KafkaInstances.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/DateTimePicker.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/FilterGroup.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/LimitSelector.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/utils.ts","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/types.ts","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/NoDataCell.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/MessageDetails.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/NoDataEmptyState.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/NoResultsEmptyState.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/OffsetRange.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/PartitionSelector.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/UnknownValuePreview.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/MessageBrowserMachine.ts","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/KafkaMessageBrowser.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceCapacityTable.tsx","webpack:///../../packages/ui/src/components/MarketingPage.tsx","webpack:///../../packages/ui/src/components/KafkaPageV3.tsx","webpack:///../../packages/ui/src/components/KafkaTopics/components/EmptyStateNoTopic.tsx","webpack:///../../packages/ui/src/components/KafkaTopics/KafkaTopics.tsx","webpack:///../../packages/ui/src/components/Metrics/types.ts","webpack:///../../packages/ui/src/components/Metrics/components/EmptyStateInitialLoading.tsx","webpack:///../../packages/ui/src/components/Metrics/components/EmptyStateMetricsUnavailable.tsx","webpack:///../../packages/ui/src/components/Metrics/components/MetricsLayout.tsx","webpack:///../../packages/ui/src/components/Metrics/components/CardBodyLoading.tsx","webpack:///../../packages/ui/src/components/Metrics/consts.ts","webpack:///../../packages/ui/src/components/Metrics/components/ChartSkeletonLoader.tsx","webpack:///../../packages/ui/src/components/Metrics/components/useChartWidth.tsx","webpack:///../../packages/ui/src/components/Metrics/components/utils.ts","webpack:///../../packages/ui/src/components/Metrics/components/ChartLinearWithOptionalLimit.tsx","webpack:///../../packages/ui/src/components/Metrics/components/ChartLogSizePerPartition.tsx","webpack:///../../packages/ui/src/components/Metrics/components/ChartPopover.tsx","webpack:///../../packages/ui/src/components/Metrics/components/ChartTotalBytes.tsx","webpack:///../../packages/ui/src/components/Metrics/components/EmptyStateNoMetricsData.tsx","webpack:///../../packages/ui/src/components/Metrics/components/EmptyStateNoMetricsDataForSelection.tsx","webpack:///../../packages/ui/src/components/Metrics/components/EmptyStateNoTopics.tsx","webpack:///../../packages/ui/src/components/Metrics/components/EmptyStateNoTopicSelected.tsx","webpack:///../../packages/ui/src/components/Metrics/components/FilterByTime.tsx","webpack:///../../packages/ui/src/components/Metrics/components/FilterByTopic.tsx","webpack:///../../packages/ui/src/components/Metrics/components/ToolbarRefresh.tsx","webpack:///../../packages/ui/src/components/Metrics/components/ToolbarTopicsMetrics.tsx","webpack:///../../packages/ui/src/components/Metrics/components/CardTopicsMetrics.tsx","webpack:///../../packages/ui/src/components/Metrics/components/ToolbarKafkaInstanceMetric.tsx","webpack:///../../packages/ui/src/components/Metrics/components/CardKafkaInstanceMetrics.tsx","webpack:///../../packages/ui/src/components/Metrics/components/CardKpi.tsx","webpack:///../../packages/ui/src/components/Metrics/components/MetricsLagAlert.tsx","webpack:///../../packages/ui/src/components/Metrics/components/PartitionCard.tsx","webpack:///../../packages/ui/src/components/Metrics/machines/KafkaInstanceMetricsMachine.ts","webpack:///../../packages/ui/src/components/Metrics/machines/TopicsMetricsMachine.ts","webpack:///../../packages/ui/src/components/Metrics/machines/MetricsKpiMachine.ts","webpack:///../../packages/ui/src/components/Metrics/KafkaInstanceMetricsProvider.tsx","webpack:///../../packages/ui/src/components/Metrics/MetricsKpiProvider.tsx","webpack:///../../packages/ui/src/components/Metrics/TopicsMetricsProvider.tsx","webpack:///../../packages/ui/src/components/Metrics/useKafkaInstanceMetrics.tsx","webpack:///../../packages/ui/src/components/Metrics/useTopicsMetrics.tsx","webpack:///../../packages/ui/src/components/Metrics/Metrics.tsx","webpack:///../../packages/ui/src/components/Metrics/useMetricsKpi.tsx","webpack:///../../packages/ui/src/components/Settings/Settings.tsx"],"sourcesContent":["export const ControlPlaneRouteRoot = \"/kafkas\" as const;\nconst NewInstanceSegment = \"create\";\nexport const ControlPlaneSpecialSegments = [NewInstanceSegment];\n\nexport const ControlPlaneRoutePath =\n  `${ControlPlaneRouteRoot}/:id?/:section(delete)?` as const;\nexport const ControlPlaneNewInstancePath = `${ControlPlaneRouteRoot}/${NewInstanceSegment}`;\nexport const ControlPlaneDeleteInstancePath = `${ControlPlaneRouteRoot}/:id/delete`;\nexport type ControlPlaneRouteParams = { id?: string; section?: \"delete\" };\n\nexport type ControlPlaneNavigationProps = {\n  instancesHref: string;\n};\n","import { useKafka } from \"consoledot-api\";\nimport type { FunctionComponent, MutableRefObject } from \"react\";\nimport {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport type { KafkaInstanceDrawerTab } from \"ui\";\nimport { KafkaInstanceDrawer } from \"ui\";\nimport type { ControlPlaneRouteParams } from \"./routesConsts\";\nimport {\n  ControlPlaneRoutePath,\n  ControlPlaneSpecialSegments,\n} from \"./routesConsts\";\n\ntype DrawerContextProps = {\n  selectedInstance: string | undefined;\n  activeTab: KafkaInstanceDrawerTab;\n  setActiveTab: (tab: KafkaInstanceDrawerTab) => void;\n  isExpanded: boolean;\n  toggleExpanded: (newState?: boolean) => void;\n  onClose: MutableRefObject<(() => void) | undefined>;\n};\nconst DrawerContext = createContext<DrawerContextProps>(null!);\n\nexport const DrawerProvider: FunctionComponent = ({ children }) => {\n  const match = useRouteMatch<ControlPlaneRouteParams>(ControlPlaneRoutePath);\n  if (!match) {\n    throw Error(\"DrawerProvider used outside the expected route\");\n  }\n  const selectedInstance =\n    (match.params.id &&\n      ControlPlaneSpecialSegments.includes(match.params.id)) ||\n    match.params.section !== undefined\n      ? undefined\n      : match.params.id;\n  const { data: instance } = useKafka(selectedInstance);\n  const [isExpanded, setIsExpanded] = useState(\n    selectedInstance !== undefined && match.isExact\n  );\n  const [activeTab, setActiveTab] = useState<KafkaInstanceDrawerTab>(\"details\");\n  const onClose = useRef<() => void | undefined>();\n\n  const toggleExpanded = useCallback((newValue: boolean | undefined) => {\n    setIsExpanded((prev) => {\n      const isExpanded = newValue !== undefined ? newValue : !prev;\n      if (isExpanded === false && onClose.current) {\n        onClose.current();\n      }\n      return isExpanded;\n    });\n  }, []);\n\n  useEffect(() => {\n    if (!instance) {\n      setIsExpanded(false);\n    }\n  }, [instance]);\n\n  const value = useMemo(() => {\n    const shouldBeExpanded = selectedInstance !== undefined && isExpanded;\n\n    return {\n      selectedInstance,\n      activeTab,\n      setActiveTab,\n      isExpanded: shouldBeExpanded,\n      toggleExpanded,\n      onClose,\n    };\n  }, [activeTab, isExpanded, selectedInstance, toggleExpanded]);\n\n  return (\n    <DrawerContext.Provider value={value}>\n      <KafkaInstanceDrawer\n        instance={instance}\n        activeTab={activeTab}\n        onTabChange={setActiveTab}\n        isExpanded={isExpanded}\n        onClose={() => toggleExpanded(false)}\n      >\n        {children}\n      </KafkaInstanceDrawer>\n    </DrawerContext.Provider>\n  );\n};\n\nexport function useDrawer(onClose?: () => void) {\n  const context = useContext(DrawerContext);\n  context.onClose.current = onClose;\n  return context;\n}\n","import { QuickStartContext } from \"@patternfly/quickstarts\";\nimport {\n  usePaginationSearchParams,\n  useSortableSearchParams,\n  useURLSearchParamsChips,\n} from \"@rhoas/app-services-ui-components\";\nimport { KafkaInstancesSortableColumns, useKafkas } from \"consoledot-api\";\nimport type { FunctionComponent } from \"react\";\nimport { useCallback, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport type { KafkaInstanceDrawerTab, KafkaInstancesProps } from \"ui\";\nimport { ControlPlaneHeader, KafkaInstances, useKafkaLabels } from \"ui\";\nimport type { Kafka, SimplifiedStatus } from \"ui-models/src/models/kafka\";\nimport { ReadyStatuses } from \"ui-models/src/models/kafka\";\nimport { useDrawer } from \"../DrawerProvider\";\nimport {\n  ControlPlaneNewInstancePath,\n  ControlPlaneRouteRoot,\n} from \"../routesConsts\";\n\nexport type KafkaInstancesRoute = Pick<\n  KafkaInstancesProps<Kafka>,\n  \"getUrlForInstance\"\n>;\n\nexport const KafkaInstancesRoute: FunctionComponent<KafkaInstancesRoute> = ({\n  getUrlForInstance,\n}) => {\n  const history = useHistory();\n  const { setActiveQuickStart } = useContext(QuickStartContext);\n\n  const { selectedInstance, toggleExpanded, setActiveTab, isExpanded } =\n    useDrawer(\n      useCallback(() => history.replace(`${ControlPlaneRouteRoot}`), [history])\n    );\n\n  const labels = useKafkaLabels();\n\n  const { page, perPage, setPagination, setPaginationQuery } =\n    usePaginationSearchParams();\n  const resetPaginationQuery = useCallback(\n    () => setPaginationQuery(1, perPage),\n    [perPage, setPaginationQuery]\n  );\n\n  const namesChips = useURLSearchParamsChips(\"names\", resetPaginationQuery);\n  const ownersChips = useURLSearchParamsChips(\"owners\", resetPaginationQuery);\n  const statusesChips = useURLSearchParamsChips<SimplifiedStatus>(\n    \"statuses\",\n    resetPaginationQuery\n  );\n\n  const [isColumnSortable, sort, sortDirection] = useSortableSearchParams(\n    KafkaInstancesSortableColumns,\n    labels.fields,\n    \"createdAt\",\n    \"desc\"\n  );\n\n  const { data } = useKafkas({\n    page,\n    perPage,\n    name: namesChips.chips,\n    owner: ownersChips.chips,\n    status: statusesChips.chips,\n    sort: sort!,\n    direction: sortDirection,\n  });\n\n  const onClearAllFilters = useCallback(() => {\n    namesChips.clearChained(\n      ownersChips.clearChained(\n        statusesChips.clearChained(setPaginationQuery(1, perPage))\n      ),\n      true\n    );\n  }, [namesChips, ownersChips, perPage, setPaginationQuery, statusesChips]);\n\n  const openDrawer = useCallback(\n    (id: string, tab: KafkaInstanceDrawerTab) => {\n      if (selectedInstance === id && isExpanded) {\n        toggleExpanded(false);\n      } else {\n        history.replace(`${ControlPlaneRouteRoot}/${id}`);\n        toggleExpanded(true);\n        setActiveTab(tab);\n      }\n    },\n    [history, isExpanded, selectedInstance, setActiveTab, toggleExpanded]\n  );\n\n  const onDetailsClick: KafkaInstancesProps[\"onDetails\"] = useCallback(\n    (instance) => {\n      openDrawer(instance.id, \"details\");\n    },\n    [openDrawer]\n  );\n\n  const onConnectionsClick: KafkaInstancesProps[\"onDetails\"] = useCallback(\n    (instance) => {\n      openDrawer(instance.id, \"connections\");\n    },\n    [openDrawer]\n  );\n\n  const onCreate = useCallback(() => {\n    history.push(`${ControlPlaneNewInstancePath}`);\n  }, [history]);\n\n  const onDelete = useCallback(\n    ({ id }) => {\n      history.push(`${ControlPlaneRouteRoot}/${id}/delete`);\n    },\n    [history]\n  );\n\n  const onQuickstartGuide = useCallback(\n    () => setActiveQuickStart && setActiveQuickStart(\"getting-started\"),\n    [setActiveQuickStart]\n  );\n\n  return (\n    <>\n      <ControlPlaneHeader />\n      <KafkaInstances\n        instances={data?.instances}\n        itemCount={data?.count}\n        page={page}\n        perPage={perPage}\n        names={namesChips.chips}\n        owners={ownersChips.chips}\n        statuses={statusesChips.chips}\n        isColumnSortable={isColumnSortable}\n        onPageChange={setPagination}\n        onSearchName={namesChips.add}\n        onRemoveNameChip={namesChips.remove}\n        onRemoveNameChips={namesChips.clear}\n        onSearchOwner={ownersChips.add}\n        onRemoveOwnerChip={ownersChips.remove}\n        onRemoveOwnerChips={ownersChips.clear}\n        onSearchStatus={statusesChips.toggle}\n        onRemoveStatusChip={statusesChips.remove}\n        onRemoveStatusChips={statusesChips.clear}\n        onClearAllFilters={onClearAllFilters}\n        onChangeOwner={(row) => {}}\n        onDelete={onDelete}\n        onCreate={onCreate}\n        isRowSelected={({ row }) => row.id === selectedInstance}\n        getUrlForInstance={getUrlForInstance}\n        onDetails={onDetailsClick}\n        onConnection={onConnectionsClick}\n        onClickConnectionTabLink={() => {}}\n        onClickSupportLink={() => {}}\n        onInstanceLinkClick={() => {}}\n        onQuickstartGuide={onQuickstartGuide}\n        canHaveInstanceLink={({ status }) => ReadyStatuses.includes(status)}\n        canOpenConnection={({ status }) => ReadyStatuses.includes(status)}\n        canChangeOwner={() => true}\n        canDelete={() => true}\n      />\n    </>\n  );\n};\n","import { QuickStartContext } from \"@patternfly/quickstarts\";\nimport type { CreateKafkaInstanceServices } from \"@rhoas/app-services-ui-components\";\nimport { CreateKafkaInstance } from \"@rhoas/app-services-ui-components\";\nimport { useCreateKafkaMutation } from \"consoledot-api\";\nimport type { FunctionComponent } from \"react\";\nimport { useCallback, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport type { ControlPlaneNavigationProps } from \"../routesConsts\";\nimport { ControlPlaneRouteRoot } from \"../routesConsts\";\nimport { useCreateKafkaCallbacks } from \"./useCreateKafkaCallbacks\";\n\nexport const CreateKafkaInstanceRoute: FunctionComponent<\n  ControlPlaneNavigationProps\n> = ({ instancesHref }) => {\n  const history = useHistory();\n  const callbacks = useCreateKafkaCallbacks();\n  const createKafkaInstance = useCreateKafkaMutation();\n  const qsContext = useContext(QuickStartContext);\n\n  const onClickKafkaOverview = () => {\n    history.push(`overview`);\n  };\n\n  const onClickQuickStart = useCallback(() => {\n    qsContext.setActiveQuickStart &&\n      qsContext.setActiveQuickStart(\"getting-started\");\n  }, [qsContext]);\n\n  const onCreate = useCallback<CreateKafkaInstanceServices[\"onCreate\"]>(\n    function (instance, onSuccess, onError) {\n      const onOnSuccess = () => {\n        onSuccess();\n        history.push(ControlPlaneRouteRoot);\n      };\n      void createKafkaInstance.mutateAsync({\n        instance,\n        onSuccess: onOnSuccess,\n        onError,\n      });\n    },\n    [createKafkaInstance, history]\n  );\n\n  const onCancel = useCallback(() => {\n    history.push(instancesHref);\n  }, [history, instancesHref]);\n\n  return (\n    <CreateKafkaInstance\n      {...callbacks}\n      isModalOpen={true}\n      onCancel={onCancel}\n      onClickContactUs={onClickKafkaOverview}\n      onClickKafkaOverview={onClickKafkaOverview}\n      onClickQuickStart={onClickQuickStart}\n      onCreate={onCreate}\n      onLearnHowToAddStreamingUnits={onClickKafkaOverview}\n      onLearnMoreAboutSizes={onClickKafkaOverview}\n      subscriptionOptionsHref={document.location.href + \"/../overview\"}\n      appendTo={() =>\n        (document.getElementById(\"chrome-app-render-root\") as HTMLElement) ||\n        document.body\n      }\n    />\n  );\n};\n","import { useChrome } from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport {\n  useDeveloperInstanceAvailabilityFetchQuery,\n  useProviderRegionSizesFetchQuery,\n  useProvidersWithRegionsFetchQuery,\n  useStandardQuotaFetchQuery,\n} from \"consoledot-api\";\nimport { useCallback } from \"react\";\nimport type { CreateKafkaInstanceProps, StandardSizes } from \"ui\";\n\nexport function useCreateKafkaCallbacks() {\n  const { auth } = useChrome();\n\n  const getUsername = useCallback(async () => {\n    const username = (await auth.getUser()).identity.user?.username;\n    if (!username) {\n      return Promise.reject(\"Invalid user\");\n    }\n    return username;\n  }, [auth]);\n\n  const checkDeveloperAvailabilityQuery =\n    useDeveloperInstanceAvailabilityFetchQuery();\n\n  const standardQuotaQuery = useStandardQuotaFetchQuery(true);\n  const providersWithRegionsQuery = useProvidersWithRegionsFetchQuery();\n  const getProvidersInfo = useProvidersWithRegionsFetchQuery();\n  const getProviderRegionsSizes = useProviderRegionSizesFetchQuery();\n\n  const checkDeveloperAvailability = useCallback<\n    CreateKafkaInstanceProps[\"checkDeveloperAvailability\"]\n  >(\n    async ({ onAvailable, onUsed, onUnavailable }) => {\n      try {\n        const available = await checkDeveloperAvailabilityQuery(getUsername);\n\n        if (available) {\n          onAvailable();\n        } else {\n          onUsed();\n        }\n      } catch {\n        onUnavailable();\n      }\n    },\n    [checkDeveloperAvailabilityQuery, getUsername]\n  );\n\n  const checkStandardQuota = useCallback<\n    CreateKafkaInstanceProps[\"checkStandardQuota\"]\n  >(\n    async ({ onQuotaAvailable, onNoQuotaAvailable, onOutOfQuota }) => {\n      try {\n        const {\n          hasTrialQuota,\n          remainingPrepaidQuota,\n          remainingMarketplaceQuota,\n          marketplaceSubscriptions,\n        } = await standardQuotaQuery();\n\n        if (\n          remainingMarketplaceQuota !== undefined ||\n          remainingPrepaidQuota !== undefined\n        ) {\n          if (\n            (remainingMarketplaceQuota || 0) === 0 &&\n            (remainingPrepaidQuota || 0) === 0\n          ) {\n            onOutOfQuota({\n              quota: {\n                marketplaceSubscriptions,\n              },\n            });\n          } else {\n            onQuotaAvailable({\n              quota: {\n                remainingPrepaidQuota,\n                remainingMarketplaceQuota,\n                marketplaceSubscriptions,\n              },\n            });\n          }\n        } else {\n          onNoQuotaAvailable({ hasTrialQuota });\n        }\n      } catch (e) {\n        onNoQuotaAvailable({ hasTrialQuota: false });\n      }\n    },\n    [standardQuotaQuery]\n  );\n\n  const fetchProvidersWithRegions = useCallback<\n    CreateKafkaInstanceProps[\"fetchProvidersWithRegions\"]\n  >(\n    async (plan, { onAvailable, onUnavailable }) => {\n      try {\n        const providers = await providersWithRegionsQuery(plan);\n        onAvailable(providers);\n      } catch {\n        onUnavailable();\n      }\n    },\n    [providersWithRegionsQuery]\n  );\n\n  const getStandardSizes = useCallback<\n    CreateKafkaInstanceProps[\"getStandardSizes\"]\n  >(\n    async (provider, region) => {\n      const providersInfo = await getProvidersInfo(\"standard\");\n      const providerInfo = providersInfo.providers.find(\n        (p) => p.id === provider\n      );\n      if (!providerInfo) {\n        return Promise.reject(\"Invalid cloud provider\");\n      }\n      return getProviderRegionsSizes(providerInfo, region, \"standard\");\n    },\n    [getProviderRegionsSizes, getProvidersInfo]\n  );\n\n  const getTrialSizes = useCallback<CreateKafkaInstanceProps[\"getTrialSizes\"]>(\n    async (provider, region) => {\n      let standardSizes: StandardSizes;\n\n      try {\n        standardSizes = await getStandardSizes(provider, region);\n        if (standardSizes.length === 0) {\n          throw new Error(\"No standard sizes found\");\n        }\n      } catch {\n        // It can happen that the selected provider doesn't support standard instances.\n        // In this case we provide a faux sample list of sizes just to make the slider happy.\n        standardSizes = [\n          { id: \"1\", displayName: \"1\", quota: 1 },\n          { id: \"2\", displayName: \"2\", quota: 2 },\n        ] as StandardSizes;\n      }\n      const providersInfo = await getProvidersInfo(\"developer\");\n      const providerInfo = providersInfo.providers.find(\n        (p) => p.id === provider\n      );\n      if (!providerInfo) {\n        return Promise.reject(\"Invalid cloud provider\");\n      }\n      const trialSizes = await getProviderRegionsSizes(\n        providerInfo,\n        region,\n        \"developer\"\n      );\n      return {\n        standard: standardSizes,\n        trial: trialSizes[0],\n      };\n    },\n    [getProviderRegionsSizes, getProvidersInfo, getStandardSizes]\n  );\n  return {\n    checkDeveloperAvailability,\n    checkStandardQuota,\n    fetchProvidersWithRegions,\n    getStandardSizes,\n    getTrialSizes,\n  };\n}\n","import { useDeleteKafkaMutation, useKafka } from \"consoledot-api\";\nimport type { FunctionComponent } from \"react\";\nimport { useCallback, useEffect } from \"react\";\nimport { useHistory, useRouteMatch } from \"react-router-dom\";\nimport { DeleteKafkaInstance } from \"ui\";\nimport { ReadyStatuses } from \"ui-models/src/models/kafka\";\nimport type {\n  ControlPlaneNavigationProps,\n  ControlPlaneRouteParams,\n} from \"../routesConsts\";\nimport { ControlPlaneRoutePath } from \"../routesConsts\";\n\nexport const DeleteKafkaInstanceRoute: FunctionComponent<\n  ControlPlaneNavigationProps\n> = ({ instancesHref }) => {\n  const history = useHistory();\n  const match = useRouteMatch<ControlPlaneRouteParams>(ControlPlaneRoutePath);\n\n  const { data: instance, isError } = useKafka(match?.params.id);\n  const { mutateAsync, isLoading: isDeleting } = useDeleteKafkaMutation();\n\n  const onCancel = useCallback(() => {\n    history.push(instancesHref);\n  }, [history, instancesHref]);\n\n  const onDelete = useCallback(() => {\n    if (instance?.id) {\n      void mutateAsync({\n        id: instance.id,\n        onError: () => {\n          // TODO: alert\n        },\n        onSuccess: () => {\n          history.replace(instancesHref);\n        },\n      });\n    }\n  }, [mutateAsync, history, instance?.id, instancesHref]);\n\n  useEffect(() => {\n    if (isError) {\n      history.replace(instancesHref);\n    }\n  }, [history, instancesHref, isError]);\n\n  if (!instance) {\n    return null;\n  }\n\n  return (\n    <DeleteKafkaInstance\n      isModalOpen={true}\n      isDeleting={isDeleting}\n      onCancel={onCancel}\n      onDelete={onDelete}\n      instanceName={\n        ReadyStatuses.includes(instance.status) ? instance.name : undefined\n      }\n      appendTo={() =>\n        (document.getElementById(\"chrome-app-render-root\") as HTMLElement) ||\n        document.body\n      }\n    />\n  );\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport {\n  CreateKafkaInstanceRoute,\n  DeleteKafkaInstanceRoute,\n  KafkaInstancesRoute,\n} from \"./routes\";\nimport {\n  ControlPlaneDeleteInstancePath,\n  ControlPlaneNewInstancePath,\n  ControlPlaneRoutePath,\n} from \"./routesConsts\";\n\nexport const ControlPlaneRoutes: VoidFunctionComponent = () => {\n  return (\n    <Route path={ControlPlaneRoutePath} exact>\n      <Route path={ControlPlaneNewInstancePath}>\n        <CreateKafkaInstanceRoute instancesHref={\"/kafkas\"} />\n      </Route>\n      <Route path={ControlPlaneDeleteInstancePath}>\n        <DeleteKafkaInstanceRoute instancesHref={\"/kafkas\"} />\n      </Route>\n      <KafkaInstancesRoute\n        getUrlForInstance={(instance) => `/kafkas/${instance.id}/details`}\n      />\n    </Route>\n  );\n};\n","import type { ControlPlaneNavigationProps } from \"../control-plane/routesConsts\";\nimport { ControlPlaneRouteRoot } from \"../control-plane/routesConsts\";\n\nexport const DataPlaneRoutePath =\n  `${ControlPlaneRouteRoot}/:id/details` as const;\nexport type DataPlaneRouteParams = { id: string };\nexport type DataPlaneTopicRouteParams = { id: string; topicName: string };\n\nexport const DataPlaneTopicRoutePath =\n  `${ControlPlaneRouteRoot}/:id/details/topics/:topicName` as const;\n\nexport type DataPlaneNavigationProps = {\n  instanceDetailsHref: (instanceId: string) => string;\n} & ControlPlaneNavigationProps;\n","import { useKafka } from \"consoledot-api\";\nimport { useEffect } from \"react\";\nimport { useHistory, useRouteMatch } from \"react-router-dom\";\nimport type { DataPlaneRouteParams } from \"./routesConsts\";\nimport { DataPlaneRoutePath } from \"./routesConsts\";\n\nexport function useDataPlaneGate(instancesHref: string) {\n  const history = useHistory();\n\n  const match = useRouteMatch<DataPlaneRouteParams>(DataPlaneRoutePath);\n\n  if (!match) {\n    throw Error(\"useDataPlaneGate used outside the expected route\");\n  }\n  const { data: instance, isError } = useKafka(match.params.id);\n\n  useEffect(() => {\n    if (isError) {\n      history.replace(instancesHref);\n    }\n  }, [history, instancesHref, isError]);\n\n  return { instance: instance as NonNullable<typeof instance>, match };\n}\n","import { Loading } from \"@rhoas/app-services-ui-components\";\nimport type { FunctionComponent } from \"react\";\nimport type { ControlPlaneNavigationProps } from \"../control-plane/routesConsts\";\nimport { useDataPlaneGate } from \"./useDataPlaneGate\";\n\nexport const DataPlaneGate: FunctionComponent<ControlPlaneNavigationProps> = ({\n  instancesHref,\n  children,\n}) => {\n  const { instance } = useDataPlaneGate(instancesHref);\n\n  return instance ? <>{children}</> : <Loading />;\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport type { DataPlaneHeaderProps } from \"ui\";\nimport { DataPlaneHeader } from \"ui\";\nimport { ReadyStatuses } from \"ui-models/src/models/kafka\";\nimport { useDrawer } from \"../../control-plane\";\nimport type { ControlPlaneNavigationProps } from \"../../control-plane/routesConsts\";\nimport { useDataPlaneGate } from \"../useDataPlaneGate\";\n\nexport const DataPlaneHeaderConnected: VoidFunctionComponent<\n  ControlPlaneNavigationProps & Pick<DataPlaneHeaderProps, \"activeSection\">\n> = ({ instancesHref, activeSection }) => {\n  const history = useHistory();\n  const { setActiveTab, toggleExpanded } = useDrawer();\n\n  const {\n    instance,\n    match: { url },\n  } = useDataPlaneGate(instancesHref);\n\n  const sectionsHref = {\n    dashboard: `${url}/dashboard`,\n    topics: `${url}/topics`,\n    consumer: `${url}/consumer-groups`,\n    permissions: `${url}/acls`,\n    settings: `${url}/settings`,\n  };\n\n  const onDelete = useCallback(() => {\n    // TODO: unhardcode this url\n    history.push(`${instancesHref}/${instance.id}/delete`);\n  }, [history, instance, instancesHref]);\n\n  return (\n    <DataPlaneHeader\n      instancesHref={instancesHref}\n      instanceName={instance?.name || \"\"}\n      activeSection={activeSection}\n      sectionsHref={sectionsHref}\n      onDetails={() => {\n        setActiveTab(\"details\");\n        toggleExpanded(true);\n      }}\n      onConnection={() => {\n        setActiveTab(\"connections\");\n        toggleExpanded(true);\n      }}\n      canOpenConnection={\n        instance ? ReadyStatuses.includes(instance?.status) : false\n      }\n      canChangeOwner={true /* TODO */}\n      onChangeOwner={() => false /* TODO */}\n      canDelete={true /* TODO */}\n      onDelete={onDelete}\n    />\n  );\n};\n","import { PageSection } from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport type { ControlPlaneNavigationProps } from \"../../control-plane/routesConsts\";\nimport { DataPlaneHeaderConnected } from \"./DataPlaneHeaderConnected\";\n\nexport const AclsRoute: VoidFunctionComponent<ControlPlaneNavigationProps> = ({\n  instancesHref,\n}) => {\n  return (\n    <>\n      <DataPlaneHeaderConnected\n        instancesHref={instancesHref}\n        activeSection={\"permissions\"}\n      />\n      <PageSection>TODO</PageSection>\n    </>\n  );\n};\n","import {\n  usePaginationSearchParams,\n  useSortableSearchParams,\n  useURLSearchParamsChips,\n} from \"@rhoas/app-services-ui-components\";\nimport { KafkaTopicsSortableColumns, useTopics } from \"consoledot-api\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { KafkaTopics } from \"ui\";\nimport type { ControlPlaneNavigationProps } from \"../../control-plane/routesConsts\";\nimport { useDataPlaneGate } from \"../useDataPlaneGate\";\nimport { DataPlaneHeaderConnected } from \"./DataPlaneHeaderConnected\";\n\nexport const TopicsRoute: VoidFunctionComponent<\n  ControlPlaneNavigationProps\n> = ({ instancesHref }) => {\n  const { instance } = useDataPlaneGate(instancesHref);\n  const { page, perPage, setPagination, setPaginationQuery } =\n    usePaginationSearchParams();\n  const resetPaginationQuery = useCallback(\n    () => setPaginationQuery(1, perPage),\n    [perPage, setPaginationQuery]\n  );\n\n  const topicChips = useURLSearchParamsChips(\"topic\", resetPaginationQuery);\n  const [isColumnSortable, sort, sortDirection] = useSortableSearchParams(\n    KafkaTopicsSortableColumns,\n    {\n      name: \"TODO name\",\n      partitions: \"TODO partitions\",\n      \"retention.bytes\": \"TODO retention bytes\",\n      \"retention.ms\": \"TODO retention ms\",\n    },\n    \"name\",\n    \"desc\"\n  );\n  const { data } = useTopics({\n    id: instance?.id,\n    adminUrl: instance?.adminUrl,\n    page,\n    perPage,\n    sort: sort!,\n    direction: sortDirection,\n    filter: topicChips.chips[0],\n    plan: instance.plan,\n  });\n  return (\n    <>\n      <DataPlaneHeaderConnected\n        instancesHref={instancesHref}\n        activeSection={\"topics\"}\n      />\n      <KafkaTopics\n        topics={data?.topics}\n        itemCount={data?.count}\n        page={page}\n        perPage={perPage}\n        topicName={topicChips.chips}\n        getUrlFortopic={(row) => `./topics/${row.name}`}\n        isColumnSortable={isColumnSortable}\n        onDelete={() => {}}\n        onEdit={() => {}}\n        onSearchTopic={(value) => {\n          topicChips.clear();\n          topicChips.toggle(value);\n        }}\n        onClearAllFilters={topicChips.clear}\n        onCreateTopic={() => {}}\n        onPageChange={setPagination}\n        onRemoveTopicChip={topicChips.clear}\n        onRemoveTopicChips={topicChips.clear}\n        onTopicLinkClick={() => {}}\n      />\n    </>\n  );\n};\n","import { useUpdateKafkaMutation } from \"consoledot-api\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport type { SettingsProps } from \"ui\";\nimport { Settings as SettingsComp } from \"ui\";\nimport type { ControlPlaneNavigationProps } from \"../../control-plane/routesConsts\";\nimport { useDataPlaneGate } from \"../useDataPlaneGate\";\nimport { DataPlaneHeaderConnected } from \"./DataPlaneHeaderConnected\";\n\nexport const SettingsRoute: VoidFunctionComponent<\n  ControlPlaneNavigationProps\n> = ({ instancesHref }) => {\n  const { instance } = useDataPlaneGate(instancesHref);\n  const updateInstance = useUpdateKafkaMutation();\n\n  const onSubmitReAuthentication = useCallback<\n    SettingsProps[\"onSubmitReAuthentication\"]\n  >(\n    async (reauthenticationEnabled) => {\n      try {\n        await updateInstance.mutateAsync({\n          id: instance.id,\n          updates: { reauthentication_enabled: reauthenticationEnabled },\n        });\n        return reauthenticationEnabled;\n      } catch {\n        return instance.request.reauthentication_enabled;\n      }\n    },\n    [instance, updateInstance]\n  );\n  return (\n    <>\n      <DataPlaneHeaderConnected\n        instancesHref={instancesHref}\n        activeSection={\"settings\"}\n      />\n      <SettingsComp\n        onSubmitReAuthentication={onSubmitReAuthentication}\n        reauthenticationEnabled={instance.request.reauthentication_enabled}\n      />\n    </>\n  );\n};\n","import {\n  useKafkaFetchQuery,\n  useKafkaKpisFetchQuery,\n  useKafkaMetricsFetchQuery,\n  useTopicsFetchQuery,\n  useTopicsMetricsFetchQuery,\n} from \"consoledot-api\";\nimport {\n  metricsDismissLagAlerts,\n  metricsIsLagAlertsDismissed,\n} from \"local-storage-helpers\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback, useState } from \"react\";\nimport type { MetricsProps } from \"ui\";\nimport { Metrics } from \"ui\";\nimport type { ControlPlaneNavigationProps } from \"../../control-plane/routesConsts\";\nimport { useDataPlaneGate } from \"../useDataPlaneGate\";\nimport { DataPlaneHeaderConnected } from \"./DataPlaneHeaderConnected\";\n\nexport const DashboardRoute: VoidFunctionComponent<\n  ControlPlaneNavigationProps\n> = ({ instancesHref }) => {\n  const {\n    instance,\n    match: { params },\n  } = useDataPlaneGate(instancesHref);\n  const [hasUserAlreadyClosedAlert, setHasUserAlreadyClosedAlert] = useState(\n    metricsIsLagAlertsDismissed()\n  );\n\n  const onAlertClose = useCallback(() => {\n    setHasUserAlreadyClosedAlert(true);\n    metricsDismissLagAlerts();\n  }, []);\n\n  const queryInstance = useKafkaFetchQuery();\n  const queryKpisMetrics = useKafkaKpisFetchQuery();\n  const queryInstanceMetrics = useKafkaMetricsFetchQuery();\n  const queryTopicMetrics = useTopicsMetricsFetchQuery();\n  const queryTopics = useTopicsFetchQuery();\n\n  const getMetricsKpi: MetricsProps[\"getMetricsKpi\"] = useCallback(async () => {\n    const kpis = await queryKpisMetrics(params.id);\n    return {\n      ...kpis,\n      topicPartitionsLimit: instance.maxPartitions || 0,\n    };\n  }, [instance, params.id, queryKpisMetrics]);\n\n  const getKafkaInstanceMetrics: MetricsProps[\"getKafkaInstanceMetrics\"] =\n    useCallback(\n      async ({ interval, duration }) => {\n        const [instance, metrics] = await Promise.all([\n          queryInstance(params.id),\n          queryInstanceMetrics({ id: params.id, duration, interval }),\n        ]);\n        if (!instance) {\n          return Promise.reject(\"Can't retrieve instance\");\n        }\n        return {\n          ...metrics,\n          diskSpaceLimit:\n            (instance.request.max_data_retention_size?.bytes || 0) / 1073741824,\n          connectionsLimit: instance.connections || 0,\n          connectionRateLimit: instance.connectionRate || 0,\n        };\n      },\n      [params.id, queryInstance, queryInstanceMetrics]\n    );\n\n  const getTopicsMetrics: MetricsProps[\"getTopicsMetrics\"] = useCallback(\n    async ({ interval, duration, selectedTopic }) => {\n      const [instance, metrics] = await Promise.all([\n        queryInstance(params.id),\n        queryTopicMetrics({ id: params.id, duration, interval, selectedTopic }),\n      ]);\n      if (!instance || !instance.adminUrl) {\n        return Promise.reject(\"Can't retrieve instance\");\n      }\n      const kafkaTopics = (\n        await queryTopics({\n          id: instance.id,\n          adminUrl: instance.adminUrl,\n          page: 1,\n          perPage: 1000,\n          plan: instance.plan,\n        })\n      ).topics.map((t) => t.name);\n      return {\n        ...metrics,\n        kafkaTopics,\n      };\n    },\n    [params.id, queryInstance, queryTopicMetrics, queryTopics]\n  );\n\n  return (\n    <>\n      <DataPlaneHeaderConnected\n        instancesHref={instancesHref}\n        activeSection={\"dashboard\"}\n      />\n      <Metrics\n        onCreateTopic={() => {}}\n        onAlertClose={onAlertClose}\n        hasUserAlreadyClosedAlert={hasUserAlreadyClosedAlert}\n        getKafkaInstanceMetrics={getKafkaInstanceMetrics}\n        getTopicsMetrics={getTopicsMetrics}\n        getMetricsKpi={getMetricsKpi}\n      />\n    </>\n  );\n};\n","import {\n  usePaginationSearchParams,\n  useSortableSearchParams,\n  useURLSearchParamsChips,\n} from \"@rhoas/app-services-ui-components\";\nimport {\n  KafkaConsumerGroupSortableColumns,\n  useConsumerGroups,\n} from \"consoledot-api\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { ConsumerGroups } from \"ui\";\nimport type { ControlPlaneNavigationProps } from \"../../control-plane/routesConsts\";\nimport { useDataPlaneGate } from \"../useDataPlaneGate\";\nimport { DataPlaneHeaderConnected } from \"./DataPlaneHeaderConnected\";\n\nexport const ConsumerGroupsRoute: VoidFunctionComponent<\n  ControlPlaneNavigationProps\n> = ({ instancesHref }) => {\n  const { instance } = useDataPlaneGate(instancesHref);\n  const { page, perPage, setPagination, setPaginationQuery } =\n    usePaginationSearchParams();\n  const resetPaginationQuery = useCallback(\n    () => setPaginationQuery(1, perPage),\n    [perPage, setPaginationQuery]\n  );\n\n  const consumerName = useURLSearchParamsChips(\n    \"consumer\",\n    resetPaginationQuery\n  );\n  const [isColumnSortable, sort, sortDirection] = useSortableSearchParams(\n    KafkaConsumerGroupSortableColumns,\n    {\n      name: \"TODO name\",\n    },\n    \"name\",\n    \"desc\"\n  );\n  const { data } = useConsumerGroups({\n    id: instance?.id,\n    adminUrl: instance?.adminUrl,\n    page,\n    perPage,\n    sort: sort!,\n    direction: sortDirection,\n    groupId: consumerName.chips[0],\n  });\n  return (\n    <>\n      <DataPlaneHeaderConnected\n        instancesHref={instancesHref}\n        activeSection={\"consumer\"}\n      />\n      <ConsumerGroups\n        consumers={data?.groups}\n        itemCount={data?.count}\n        page={page}\n        perPage={perPage}\n        consumerName={consumerName.chips}\n        isRowSelected={() => false}\n        isColumnSortable={isColumnSortable}\n        onDelete={() => {}}\n        onSearchConsumer={(value) => {\n          consumerName.clear();\n          consumerName.toggle(value);\n        }}\n        onClearAllFilters={consumerName.clear}\n        onPageChange={setPagination}\n        onRemoveConsumerChip={consumerName.clear}\n        onRemoveConsumerChips={consumerName.clear}\n        onViewPartition={() => {}}\n        onViewResetOffset={() => {}}\n      />\n    </>\n  );\n};\n","import { useTopic } from \"consoledot-api\";\nimport { useEffect } from \"react\";\nimport { useHistory, useRouteMatch } from \"react-router-dom\";\nimport type { DataPlaneTopicRouteParams } from \"./routesConsts\";\nimport { DataPlaneTopicRoutePath } from \"./routesConsts\";\nimport { useDataPlaneGate } from \"./useDataPlaneGate\";\n\nexport function useTopicGate(\n  instancesHref: string,\n  instanceDetailsHref: (id: string) => string\n) {\n  const history = useHistory();\n  const { instance } = useDataPlaneGate(instancesHref);\n  const match = useRouteMatch<DataPlaneTopicRouteParams>(\n    DataPlaneTopicRoutePath\n  );\n\n  if (!match) {\n    throw Error(\"useDataPlaneGate used outside the expected route\");\n  }\n\n  const { data: topic, isError } = useTopic({\n    id: instance.id,\n    adminUrl: instance.adminUrl,\n    topicName: match.params.topicName,\n    plan: instance.plan,\n  });\n\n  useEffect(() => {\n    if (isError) {\n      history.replace(instanceDetailsHref(instance.id));\n    }\n  }, [history, instance.id, instanceDetailsHref, instancesHref, isError]);\n\n  return { instance, topic: topic as NonNullable<typeof topic>, match };\n}\n","import type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport type { DataPlaneTopicHeaderProps } from \"ui\";\nimport { DataPlaneTopicHeader } from \"ui\";\nimport { ReadyStatuses } from \"ui-models/src/models/kafka\";\nimport { useDrawer } from \"../../control-plane\";\nimport type { DataPlaneNavigationProps } from \"../routesConsts\";\nimport { useTopicGate } from \"../useTopicGate\";\n\nexport const DataPlaneTopicHeaderConnected: VoidFunctionComponent<\n  DataPlaneNavigationProps & Pick<DataPlaneTopicHeaderProps, \"activeSection\">\n> = ({ instanceDetailsHref, instancesHref, activeSection }) => {\n  const history = useHistory();\n  const { setActiveTab, toggleExpanded } = useDrawer();\n  const {\n    instance,\n    topic,\n    match: { url },\n  } = useTopicGate(instancesHref, instanceDetailsHref);\n\n  const sectionsHref = {\n    consumer: `${url}/consumer-groups`,\n    messages: `${url}/messages`,\n    properties: `${url}/properties`,\n    schemas: `${url}/schemas`,\n  };\n\n  const onDelete = useCallback(() => {\n    // TODO: unhardcode this url\n    history.push(`${instancesHref}/${instance.id}/delete`);\n  }, [history, instance, instancesHref]);\n\n  return (\n    <DataPlaneTopicHeader\n      instancesHref={instancesHref}\n      instanceName={instance.name}\n      instanceDetailHref={instanceDetailsHref(instance.id)}\n      activeSection={activeSection}\n      topicName={topic.name}\n      sectionsHref={sectionsHref}\n      onDetails={() => {\n        setActiveTab(\"details\");\n        toggleExpanded(true);\n      }}\n      onConnection={() => {\n        setActiveTab(\"connections\");\n        toggleExpanded(true);\n      }}\n      canOpenConnection={\n        instance ? ReadyStatuses.includes(instance?.status) : false\n      }\n      canChangeOwner={true /* TODO */}\n      onChangeOwner={() => false /* TODO */}\n      canDelete={true /* TODO */}\n      onDelete={onDelete}\n    />\n  );\n};\n","import {\n  usePaginationSearchParams,\n  useSortableSearchParams,\n  useURLSearchParamsChips,\n} from \"@rhoas/app-services-ui-components\";\nimport {\n  KafkaConsumerGroupSortableColumns,\n  useConsumerGroups,\n} from \"consoledot-api\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { ConsumerGroups } from \"ui\";\nimport type { DataPlaneNavigationProps } from \"../routesConsts\";\nimport { useTopicGate } from \"../useTopicGate\";\nimport { DataPlaneTopicHeaderConnected } from \"./DataPlaneTopicHeaderConnected\";\n\nexport const TopicConsumerGroupsRoute: VoidFunctionComponent<\n  DataPlaneNavigationProps\n> = ({ instanceDetailsHref, instancesHref }) => {\n  const { instance, topic } = useTopicGate(instancesHref, instanceDetailsHref);\n\n  const { page, perPage, setPagination, setPaginationQuery } =\n    usePaginationSearchParams();\n\n  const resetPaginationQuery = useCallback(\n    () => setPaginationQuery(1, perPage),\n    [perPage, setPaginationQuery]\n  );\n\n  const consumerName = useURLSearchParamsChips(\n    \"consumer\",\n    resetPaginationQuery\n  );\n  const [isColumnSortable, sort, sortDirection] = useSortableSearchParams(\n    KafkaConsumerGroupSortableColumns,\n    {\n      name: \"TODO name\",\n    },\n    \"name\",\n    \"desc\"\n  );\n\n  const { data } = useConsumerGroups({\n    id: instance?.id,\n    adminUrl: instance?.adminUrl,\n    page,\n    perPage,\n    sort: sort!,\n    direction: sortDirection,\n    groupId: consumerName.chips[0],\n    topic: topic.name,\n  });\n\n  return (\n    <>\n      <DataPlaneTopicHeaderConnected\n        instancesHref={instancesHref}\n        instanceDetailsHref={instanceDetailsHref}\n        activeSection={\"consumer\"}\n      />\n      <ConsumerGroups\n        consumers={data?.groups}\n        itemCount={data?.count}\n        page={page}\n        perPage={perPage}\n        consumerName={consumerName.chips}\n        isRowSelected={() => false}\n        isColumnSortable={isColumnSortable}\n        onDelete={() => {}}\n        onSearchConsumer={(value) => {\n          consumerName.clear();\n          consumerName.toggle(value);\n        }}\n        onClearAllFilters={consumerName.clear}\n        onPageChange={setPagination}\n        onRemoveConsumerChip={consumerName.clear}\n        onRemoveConsumerChips={consumerName.clear}\n        onViewPartition={() => {}}\n        onViewResetOffset={() => {}}\n      />\n    </>\n  );\n};\n","import { useMessagesFetchQuery } from \"consoledot-api\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport type { KafkaMessageBrowserProps } from \"ui\";\nimport { KafkaMessageBrowser } from \"ui\";\nimport type { DataPlaneNavigationProps } from \"../routesConsts\";\nimport { useTopicGate } from \"../useTopicGate\";\nimport { DataPlaneTopicHeaderConnected } from \"./DataPlaneTopicHeaderConnected\";\n\nexport const TopicMessagesGroupsRoute: VoidFunctionComponent<\n  DataPlaneNavigationProps\n> = ({ instanceDetailsHref, instancesHref }) => {\n  const { instance, topic } = useTopicGate(instancesHref, instanceDetailsHref);\n  const kafkaTopicMessagesFetchQuery = useMessagesFetchQuery();\n\n  const getMessages = useCallback<KafkaMessageBrowserProps[\"getMessages\"]>(\n    async (params) => {\n      const messages = await kafkaTopicMessagesFetchQuery({\n        ...params,\n        id: instance.id,\n        adminUrl: instance.adminUrl!,\n        topicName: topic.name,\n      });\n      return {\n        messages,\n        partitions: topic.partitionsCount,\n      };\n    },\n    [\n      instance.adminUrl,\n      instance.id,\n      kafkaTopicMessagesFetchQuery,\n      topic.name,\n      topic.partitionsCount,\n    ]\n  );\n\n  return (\n    <>\n      <DataPlaneTopicHeaderConnected\n        instancesHref={instancesHref}\n        instanceDetailsHref={instanceDetailsHref}\n        activeSection={\"messages\"}\n      />\n      <KafkaMessageBrowser getMessages={getMessages} />\n    </>\n  );\n};\n","import {\n  FormSection,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport {\n  TextWithLabelPopover,\n  useTranslation,\n} from \"@rhoas/app-services-ui-components\";\nimport convert from \"convert\";\nimport type React from \"react\";\n\ntype CleanupProps = {\n  defaultLogSegmentSize: bigint;\n  defaultSegmentTime: bigint;\n  defaultSegmentJitterTime: bigint;\n  defaultFileDeleteDelay: bigint;\n};\n\nconst Cleanup: React.FC<CleanupProps> = ({\n  defaultFileDeleteDelay,\n  defaultLogSegmentSize,\n  defaultSegmentJitterTime,\n  defaultSegmentTime,\n}) => {\n  const { t } = useTranslation([\"create-topic\", \"common\"]);\n\n  return (\n    <FormSection title={t(\"cleanup\")} id=\"cleanup\" titleElement={\"h2\"}>\n      <TextContent>\n        <Text component={TextVariants.p} className=\"section-info\">\n          {t(\"cleanup_section_info\")}\n        </Text>\n      </TextContent>\n\n      <TextWithLabelPopover\n        fieldId=\"log-segment-size\"\n        btnAriaLabel={t(\"log_segment_size\")}\n        fieldLabel={t(\"log_segment_size\")}\n        fieldValue={t(\"bytes_to_gibibyte\", {\n          bytes: defaultLogSegmentSize,\n          gibibyte: convert(Number(defaultLogSegmentSize), \"bytes\").to(\n            \"gibibytes\"\n          ),\n        })}\n        popoverBody={t(\"log_segment_size\")}\n        popoverHeader={t(\"log_segment_size_description\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"segement-time\"\n        btnAriaLabel={t(\"segement_time\")}\n        fieldLabel={t(\"segement_time\")}\n        fieldValue={t(\"milliseconds_to_days\", {\n          milliseconds: defaultSegmentTime,\n          days: convert(Number(defaultSegmentTime), \"milliseconds\").to(\"days\"),\n        })}\n        popoverBody={t(\"segement_time_description\")}\n        popoverHeader={t(\"segement_time\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"segment-jitter-time\"\n        btnAriaLabel={t(\"segment_jitter_time\")}\n        fieldLabel={t(\"segment_jitter_time\")}\n        fieldValue={t(\"milliseconds_time\", { value: defaultSegmentJitterTime })}\n        popoverBody={t(\"segment_jitter_time_description\")}\n        popoverHeader={t(\"segment_jitter_time\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"file-delete-delay\"\n        btnAriaLabel={t(\"file_delete_delay\")}\n        fieldLabel={t(\"file_delete_delay\")}\n        fieldValue={t(\"milliseconds_to_minute\", {\n          milliseconds: defaultFileDeleteDelay,\n          minute: convert(Number(defaultFileDeleteDelay), \"milliseconds\").to(\n            \"minutes\"\n          ),\n        })}\n        popoverBody={t(\"file_delete_delay_description\")}\n        popoverHeader={t(\"file_delete_delay\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"preallocate-log-segment-files\"\n        btnAriaLabel={t(\"preallocate_log_segment_files\")}\n        fieldLabel={t(\"preallocate_log_segment_files\")}\n        fieldValue={t(\"common:disabled\")}\n        popoverBody={t(\"preallocate_log_segment_files_description\")}\n        popoverHeader={t(\"preallocate_log_segment_files\")}\n      />\n    </FormSection>\n  );\n};\n\nexport { Cleanup };\n","import {\n  FormSection,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport {\n  TextWithLabelPopover,\n  useTranslation,\n} from \"@rhoas/app-services-ui-components\";\nimport type React from \"react\";\n\ntype FlushProps = {\n  defaultFlushIntervalMessages: bigint;\n  defaultFlushIntervalTime: bigint;\n};\n\nconst Flush: React.FC<FlushProps> = ({\n  defaultFlushIntervalMessages,\n  defaultFlushIntervalTime,\n}) => {\n  const { t } = useTranslation([\"create-topic\"]);\n\n  return (\n    <FormSection title={t(\"flush\")} id=\"flush\" titleElement={\"h2\"}>\n      <TextContent>\n        <Text component={TextVariants.p} className=\"section-info\">\n          {t(\"flush_section_info\")}\n        </Text>\n      </TextContent>\n\n      <TextWithLabelPopover\n        fieldId=\"flush-interval-messages\"\n        btnAriaLabel={t(\"flush_interval_messages\")}\n        fieldLabel={t(\"flush_interval_messages\")}\n        fieldValue={t(\"messages_time\", {\n          value: defaultFlushIntervalMessages,\n        })}\n        popoverBody={t(\"flush_interval_messages_description\")}\n        popoverHeader={t(\"flush_interval_messages\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"flush-interval-time\"\n        btnAriaLabel={t(\"flush_interval_time\")}\n        fieldLabel={t(\"flush_interval_time\")}\n        fieldValue={t(\"milliseconds_time\", { value: defaultFlushIntervalTime })}\n        popoverBody={t(\"flush_interval_time_description\")}\n        popoverHeader={t(\"flush_interval_time\")}\n      />\n    </FormSection>\n  );\n};\n\nexport { Flush };\n","import {\n  FormSection,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport {\n  TextWithLabelPopover,\n  useTranslation,\n} from \"@rhoas/app-services-ui-components\";\nimport type React from \"react\";\n\ntype MessageProps = {\n  defaultMaximumMessageBytes: bigint;\n  defaultMessageTimestampType: string;\n  defaultMaxMessageTimestampDiff: bigint;\n};\n\nconst Message: React.FC<MessageProps> = ({\n  defaultMaximumMessageBytes,\n  defaultMessageTimestampType,\n  defaultMaxMessageTimestampDiff,\n}) => {\n  const { t } = useTranslation([\"create-topic\"]);\n\n  return (\n    <FormSection title={t(\"messages\")} id=\"messages\" titleElement={\"h2\"}>\n      <TextContent>\n        <Text component={TextVariants.p} className=\"section-info\">\n          {t(\"message_section_info\")}\n        </Text>\n      </TextContent>\n\n      <TextWithLabelPopover\n        fieldId=\"max-message-size\"\n        btnAriaLabel={t(\"max_message_size\")}\n        fieldLabel={t(\"max_message_size\")}\n        fieldValue={t(\"bytes_size\", { value: defaultMaximumMessageBytes })}\n        popoverBody={t(\"max_message_size_description\")}\n        popoverHeader={t(\"max_message_size\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"message-timestamp-type\"\n        btnAriaLabel={t(\"message_timestamp_type\")}\n        fieldLabel={t(\"message_timestamp_type\")}\n        fieldValue={String(defaultMessageTimestampType)}\n        popoverBody={t(\"message_timestamp_type_description\")}\n        popoverHeader={t(\"message_timestamp_type\")}\n      />\n      <TextWithLabelPopover\n        fieldId=\"max-message-timestamp-diff\"\n        btnAriaLabel={t(\"max_message_timestamp_diff\")}\n        fieldLabel={t(\"max_message_timestamp_diff\")}\n        fieldValue={t(\"milliseconds_time\", {\n          value: defaultMaxMessageTimestampDiff,\n        })}\n        popoverBody={t(\"max_message_timestamp_diff_description\")}\n        popoverHeader={t(\"max_message_timestamp_diff\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"compression-type\"\n        btnAriaLabel={t(\"compression_type\")}\n        fieldLabel={t(\"compression_type\")}\n        fieldValue={\"Producer\"}\n        popoverBody={t(\"compression_type_description\")}\n        popoverHeader={t(\"compression_type\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"message-format\"\n        btnAriaLabel={t(\"message_format\")}\n        fieldLabel={t(\"message_format\")}\n        fieldValue={\"2.7-IV2\"}\n        popoverBody={t(\"message_format_description\")}\n        popoverHeader={t(\"message_format\")}\n      />\n    </FormSection>\n  );\n};\n\nexport { Message };\n","import type React from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport {\n  FormSection,\n  TextContent,\n  Text,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { TextWithLabelPopover } from \"@rhoas/app-services-ui-components\";\n\nconst Replication: React.FC = () => {\n  const { t } = useTranslation([\"create-topic\", \"common\"]);\n\n  return (\n    <FormSection title={t(\"replication\")} id=\"replication\" titleElement={\"h2\"}>\n      <TextContent>\n        <Text component={TextVariants.p}>\n          {t(\"replication_section_info\")}\n          <Text component={TextVariants.small}>\n            {t(\"replication_section_info_note\")}\n          </Text>\n        </Text>\n      </TextContent>\n\n      <TextWithLabelPopover\n        fieldId=\"unclean-leader-election\"\n        btnAriaLabel={t(\"unclean_leader_election\")}\n        fieldLabel={t(\"unclean_leader_election\")}\n        fieldValue={t(\"common:disabled\")}\n        popoverBody={t(\"unclean_leader_election_description\")}\n        popoverHeader={t(\"unclean_leader_election\")}\n      />\n    </FormSection>\n  );\n};\n\nexport { Replication };\n","import {\n  FormSection,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport {\n  TextWithLabelPopover,\n  useTranslation,\n} from \"@rhoas/app-services-ui-components\";\nimport convert from \"convert\";\nimport type React from \"react\";\n\ntype TopicAdavanceIndexProps = {\n  defaultIndexIntervalSize: bigint;\n  defaultSegmentIndexSize: bigint;\n};\n\nconst TopicAdvanceIndex: React.FC<TopicAdavanceIndexProps> = ({\n  defaultIndexIntervalSize,\n  defaultSegmentIndexSize,\n}) => {\n  const { t } = useTranslation([\"create-topic\"]);\n\n  return (\n    <FormSection title={t(\"index\")} id=\"index\" titleElement={\"h2\"}>\n      <TextContent>\n        <Text component={TextVariants.p} className=\"section-info\">\n          {t(\"index_section_info\")}\n        </Text>\n      </TextContent>\n\n      <TextWithLabelPopover\n        fieldId=\"index-interval-size\"\n        btnAriaLabel={t(\"index_interval_size\")}\n        fieldLabel={t(\"index_interval_size\")}\n        fieldValue={t(\"bytes_to_kibibytes\", {\n          bytes: defaultIndexIntervalSize,\n          kibibytes: convert(Number(defaultIndexIntervalSize), \"bytes\").to(\n            \"kibibytes\"\n          ),\n        })}\n        popoverBody={t(\"index_interval_size_description\")}\n        popoverHeader={t(\"index_interval_size\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"segment-index-size\"\n        btnAriaLabel={t(\"segment_index_size\")}\n        fieldLabel={t(\"segment_index_size\")}\n        fieldValue={t(\"bytes_to_mebibytes\", {\n          bytes: defaultSegmentIndexSize,\n          mebibytes: convert(Number(defaultIndexIntervalSize), \"bytes\").to(\n            \"mebibytes\"\n          ),\n        })}\n        popoverBody={t(\"segment_index_size_description\")}\n        popoverHeader={t(\"segment_index_size\")}\n      />\n    </FormSection>\n  );\n};\n\nexport { TopicAdvanceIndex };\n","import { JumpLinks, JumpLinksItem, SidebarPanel } from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type React from \"react\";\n\nexport type TopicAdvanceJumpLinksProps = {\n  canHaveDelete?: boolean;\n};\nconst TopicAdvanceJumpLinks: React.FC<TopicAdvanceJumpLinksProps> = ({\n  canHaveDelete,\n}) => {\n  const { t } = useTranslation([\"create-topic\"]);\n\n  return (\n    <SidebarPanel variant=\"sticky\">\n      <JumpLinks\n        isVertical\n        label={t(\"jump_to_section\")}\n        scrollableSelector=\".topic-properties\"\n        style={{ position: \"sticky\" }}\n        // offset={-164} // for header\n      >\n        <JumpLinksItem key={0} href=\"#core-configuration\">\n          {t(\"core_configuration\")}\n        </JumpLinksItem>\n        <JumpLinksItem key={1} href=\"#messages\">\n          {t(\"messages\")}\n        </JumpLinksItem>\n        <JumpLinksItem key={2} href=\"#log\">\n          {t(\"log\")}\n        </JumpLinksItem>\n        <JumpLinksItem key={3} href=\"#replication\">\n          {t(\"replication\")}\n        </JumpLinksItem>\n        <JumpLinksItem key={4} href=\"#cleanup\">\n          {t(\"cleanup\")}\n        </JumpLinksItem>\n        <JumpLinksItem key={5} href=\"#index\">\n          {t(\"index\")}\n        </JumpLinksItem>\n        <JumpLinksItem key={6} href=\"#flush\">\n          {t(\"flush\")}\n        </JumpLinksItem>\n        {canHaveDelete ? (\n          <JumpLinksItem key={7} href=\"#delete\">\n            {t(\"delete\")}\n          </JumpLinksItem>\n        ) : (\n          <></>\n        )}\n      </JumpLinks>\n    </SidebarPanel>\n  );\n};\n\nexport { TopicAdvanceJumpLinks };\n","import {\n  Button,\n  Divider,\n  Form,\n  FormSection,\n  PageGroup,\n  PageSection,\n  Sidebar,\n  SidebarContent,\n  Split,\n  SplitItem,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { TextWithLabelPopover } from \"@rhoas/app-services-ui-components\";\nimport type React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport type { Topic } from \"ui-models/src/models/topic\";\nimport { Cleanup } from \"../CreateKafkaTopic/components/Cleanup\";\nimport { Flush } from \"../CreateKafkaTopic/components/Flush\";\nimport { Message } from \"../CreateKafkaTopic/components/Message\";\nimport { Replication } from \"../CreateKafkaTopic/components/Replication\";\nimport { TopicAdvanceIndex } from \"../CreateKafkaTopic/components/TopicAdvanceIndex\";\nimport { TopicAdvanceJumpLinks } from \"../CreateKafkaTopic/components/TopicAdvanceJumpLinks\";\nimport \"../CreateKafkaTopic/CreateTopicPage.css\";\nimport {\n  formattedRetentionSize,\n  formattedRetentionTime,\n} from \"../KafkaTopics/types\";\n\nexport type TopicViewDetailProps = {\n  topic: Topic;\n  deleteTopic: () => void;\n  updateTopic: () => void;\n};\n\nexport const TopicDetailView: React.FunctionComponent<TopicViewDetailProps> = ({\n  topic,\n  deleteTopic,\n  updateTopic,\n}) => {\n  const { t } = useTranslation([\"create-topic\"]);\n  return (\n    <PageSection\n      variant={\"light\"}\n      className={\"topic-properties\"}\n      hasOverflowScroll={true}\n    >\n      <Sidebar hasGutter>\n        <TopicAdvanceJumpLinks canHaveDelete={true} />\n        <SidebarContent>\n          <PageGroup\n            hasOverflowScroll\n            id=\"topic-detail-view\"\n            className={\"pf-u-mb-4xl\"}\n          >\n            <PageSection padding={{ default: \"noPadding\" }}>\n              <Split>\n                <SplitItem isFilled>\n                  <Form id=\"topic-form\">\n                    <FormSection\n                      title={t(\"core_configuration\")}\n                      id=\"core-configuration\"\n                      titleElement={\"h2\"}\n                    >\n                      <TextContent>\n                        <Text\n                          component={TextVariants.p}\n                          className=\"section-info\"\n                        >\n                          {t(\"core_config_info\")}\n                        </Text>\n                      </TextContent>\n\n                      <TextWithLabelPopover\n                        fieldId=\"topic-name\"\n                        btnAriaLabel={t(\"name\")}\n                        fieldLabel={t(\"topic_name\")}\n                        fieldValue={topic.name}\n                        popoverBody={t(\"topic_name_description\")}\n                        popoverHeader={t(\"topic_name\")}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId=\"partitions\"\n                        btnAriaLabel={t(\"partitions\")}\n                        fieldLabel={t(\"partitions\")}\n                        fieldValue={topic.partitionsCount.toString()}\n                        popoverBody={t(\"partitions_description\")}\n                        popoverHeader={t(\"partitions\")}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId=\"replicas\"\n                        btnAriaLabel={t(\"replicas\")}\n                        fieldLabel={t(\"replicas\")}\n                        fieldValue={\n                          \"TODO\" /* TODO this is a config from the Kafka instance itself, should we be showing it? */\n                        }\n                        popoverBody={t(\"replicas_description\")}\n                        popoverHeader={t(\"replicas\")}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId=\"min-insync-replicas\"\n                        btnAriaLabel={t(\"min_insync_replicas\")}\n                        fieldLabel={t(\"min_insync_replicas\")}\n                        fieldValue={topic.config[\n                          \"min.insync.replicas\"\n                        ].toString()}\n                        popoverBody={t(\"min_insync_replicas_description\")}\n                        popoverHeader={t(\"min_insync_replicas\")}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId=\"retention-time\"\n                        btnAriaLabel={t(\"retention_time\")}\n                        fieldLabel={t(\"retention_time\")}\n                        fieldValue={formattedRetentionTime(\n                          topic.config[\"retention.ms\"].value\n                        )}\n                        popoverBody={t(\"retention_time_description\")}\n                        popoverHeader={t(\"retention_time\")}\n                        showUnlimited={true}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId=\"retention-size\"\n                        btnAriaLabel={t(\"retention_size\")}\n                        fieldLabel={t(\"retention_size\")}\n                        fieldValue={formattedRetentionSize(\n                          topic.config[\"retention.bytes\"].value\n                        )}\n                        popoverHeader={t(\"retention_size\")}\n                        popoverBody={t(\"retention_size_description\")}\n                        showUnlimited={true}\n                      />\n                    </FormSection>\n                    <Message\n                      defaultMaximumMessageBytes={\n                        topic.config[\"max.message.bytes\"].value\n                      }\n                      defaultMessageTimestampType={\n                        topic.config[\"message.timestamp.type\"]\n                      }\n                      defaultMaxMessageTimestampDiff={\n                        topic.config[\"message.timestamp.difference.max.ms\"]\n                          .value\n                      }\n                    />\n                    <FormSection title={t(\"log\")} id=\"log\" titleElement={\"h2\"}>\n                      <TextContent>\n                        <Text component={TextVariants.p}>\n                          {t(\"log_section_info\")}\n                          <Text\n                            component={TextVariants.small}\n                            className=\"section-info-note\"\n                          >\n                            {t(\"log_section_info_note\")}\n                          </Text>\n                        </Text>\n                      </TextContent>\n\n                      <TextWithLabelPopover\n                        fieldId=\"cleanup-policy\"\n                        btnAriaLabel={t(\"cleanup_policy\")}\n                        fieldLabel={t(\"cleanup_policy\")}\n                        fieldValue={topic.config[\"cleanup.policy\"]}\n                        popoverBody={t(\"cleanup_policy_description\")}\n                        popoverHeader={t(\"cleanup_policy\")}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId=\"delete-retention-time\"\n                        btnAriaLabel={t(\"delete_retention_time\")}\n                        fieldLabel={t(\"delete_retention_time\")}\n                        fieldValue={topic.config[\n                          \"delete.retention.ms\"\n                        ].value.toString()}\n                        popoverBody={t(\"delete_retention_time_description\")}\n                        popoverHeader={t(\"delete_retention_time\")}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId=\"min-cleanable-ratio\"\n                        btnAriaLabel={t(\"min_cleanable_ratio\")}\n                        fieldLabel={t(\"min_cleanable_ratio\")}\n                        fieldValue={topic.config[\n                          \"min.cleanable.dirty.ratio\"\n                        ].toString()}\n                        popoverBody={t(\"min_cleanable_ratio_description\")}\n                        popoverHeader={t(\"min_cleanable_ratio\")}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId=\"min-compaction-lag-time\"\n                        btnAriaLabel={t(\"min_compaction_lag_time\")}\n                        fieldLabel={t(\"min_compaction_lag_time\")}\n                        fieldValue={topic.config[\n                          \"min.compaction.lag.ms\"\n                        ].value.toString()}\n                        popoverBody={t(\"min_compaction_lag_time_description\")}\n                        popoverHeader={t(\"min_compaction_lag_time\")}\n                      />\n                    </FormSection>\n                    <Replication />\n                    <Cleanup\n                      defaultLogSegmentSize={\n                        topic.config[\"segment.bytes\"].value\n                      }\n                      defaultSegmentTime={topic.config[\"segment.ms\"].value}\n                      defaultSegmentJitterTime={\n                        topic.config[\"segment.jitter.ms\"].value\n                      }\n                      defaultFileDeleteDelay={\n                        topic.config[\"file.delete.delay.ms\"].value\n                      }\n                    />\n                    <TopicAdvanceIndex\n                      defaultIndexIntervalSize={\n                        topic.config[\"index.interval.bytes\"].value\n                      }\n                      defaultSegmentIndexSize={\n                        topic.config[\"segment.index.bytes\"].value\n                      }\n                    />\n                    <Flush\n                      defaultFlushIntervalMessages={\n                        topic.config[\"flush.messages\"].value\n                      }\n                      defaultFlushIntervalTime={topic.config[\"flush.ms\"].value}\n                    />\n                  </Form>\n\n                  <Divider className=\"delete-topic-divider__Margin\" />\n\n                  <TextContent>\n                    <Text component={TextVariants.h2} id=\"delete\">\n                      {t(\"delete_topic_irreversible\")}\n                    </Text>\n                    <Text component={TextVariants.p} className=\"section-info\">\n                      {t(\"delete_topic_info\")}\n                    </Text>\n                    <Button\n                      variant=\"danger\"\n                      onClick={deleteTopic}\n                      data-testid=\"tabProperties-actionDelete\"\n                    >\n                      {t(\"delete_topic\")}\n                    </Button>\n                  </TextContent>\n                </SplitItem>\n                <SplitItem>\n                  <Button\n                    variant=\"primary\"\n                    onClick={updateTopic}\n                    data-testid=\"tabProperties-actionEdit\"\n                  >\n                    {t(\"edit_props\")}\n                  </Button>\n                </SplitItem>\n              </Split>\n            </PageSection>\n          </PageGroup>\n        </SidebarContent>\n      </Sidebar>\n    </PageSection>\n  );\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { TopicDetailView } from \"ui/src/components/KafkaTopicDetails\";\nimport type { DataPlaneNavigationProps } from \"../routesConsts\";\nimport { useTopicGate } from \"../useTopicGate\";\nimport { DataPlaneTopicHeaderConnected } from \"./DataPlaneTopicHeaderConnected\";\n\nexport const TopicPropertiesRoute: VoidFunctionComponent<\n  DataPlaneNavigationProps\n> = ({ instanceDetailsHref, instancesHref }) => {\n  const { topic } = useTopicGate(instancesHref, instanceDetailsHref);\n\n  return (\n    <>\n      <DataPlaneTopicHeaderConnected\n        instancesHref={instancesHref}\n        instanceDetailsHref={instanceDetailsHref}\n        activeSection={\"properties\"}\n      />\n      <TopicDetailView\n        topic={topic}\n        deleteTopic={() => {}}\n        updateTopic={() => {}}\n      />\n    </>\n  );\n};\n","// @ts-nocheck\nimport { useChrome } from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport { I18nProvider } from \"@rhoas/app-services-ui-components\";\nimport type { Auth, Config } from \"@rhoas/app-services-ui-shared\";\nimport { AuthContext, ConfigContext } from \"@rhoas/app-services-ui-shared\";\n/* tslint:disable */\nimport type { Registry } from \"@rhoas/registry-management-sdk\";\nimport type { ScalprumComponentProps } from \"@scalprum/react-core\";\nimport { ScalprumComponent } from \"@scalprum/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport type { DataPlaneNavigationProps } from \"../routesConsts\";\nimport { useTopicGate } from \"../useTopicGate\";\nimport { DataPlaneTopicHeaderConnected } from \"./DataPlaneTopicHeaderConnected\";\n\nexport const TopicSchemasRoute: VoidFunctionComponent<\n  DataPlaneNavigationProps\n> = ({ instanceDetailsHref, instancesHref }) => {\n  const chrome = useChrome();\n  const { topic } = useTopicGate(instancesHref, instanceDetailsHref);\n  const processor = (([_, m]: [string, { entry: string[] }]) =>\n    m.entry.map(\n      (e) => `/beta/apps/srs-ui-build${e}`\n    )) as unknown as ScalprumComponentProps[\"processor\"];\n  const processor2 = (([_, m]: [string, { entry: string[] }]) =>\n    m.entry.map(\n      (e) => `/beta/apps/sr-ui-build${e}`\n    )) as unknown as ScalprumComponentProps[\"processor\"];\n  const basename = \"/service-registry\";\n  const auth: Auth = {\n    srs: { getToken: chrome.auth.getToken },\n  };\n  const config: Config = {\n    srs: { apiBasePath: process.env.API_URL },\n  };\n  return (\n    <>\n      <DataPlaneTopicHeaderConnected\n        instancesHref={instancesHref}\n        instanceDetailsHref={instanceDetailsHref}\n        activeSection={\"schemas\"}\n      />\n      <AuthContext.Provider value={auth}>\n        <ConfigContext.Provider value={config}>\n          <I18nProvider\n            lng={\"en\"}\n            resources={{\n              en: {\n                common: () =>\n                  import(\n                    \"@rhoas/app-services-ui-components/locales/en/common.json\"\n                  ),\n                \"service-registry\": () =>\n                  import(\n                    \"@rhoas/app-services-ui-components/locales/en/service-registry.json\"\n                  ),\n                srsTemporaryFixMe: () => import(\"./srs-locales.json\"),\n              },\n            }}\n            debug={true}\n          >\n            <ScalprumComponent\n              appName=\"srs\"\n              module=\"./ServiceRegistryMapping\"\n              scope=\"srs\"\n              ErrorComponent={<div>opsie</div>}\n              processor={processor}\n              basename={basename}\n              topicName={topic.name}\n              renderSchema={(registry: Registry) => {\n                debugger;\n                return (\n                  <ScalprumComponent\n                    appName=\"ar\"\n                    scope=\"ar\"\n                    ErrorComponent={<div>opsie</div>}\n                    processor={processor2}\n                    module=\"./FederatedSchemaMapping\"\n                    registry={registry}\n                    topicName={topic.name}\n                    groupId={null}\n                    version={\"latest\"}\n                    registryId={registry?.id}\n                    basename={basename}\n                  />\n                );\n              }}\n            />\n          </I18nProvider>\n        </ConfigContext.Provider>\n      </AuthContext.Provider>\n    </>\n  );\n};\n","import { Loading } from \"@rhoas/app-services-ui-components\";\nimport type { FunctionComponent } from \"react\";\nimport type { DataPlaneNavigationProps } from \"./routesConsts\";\nimport { useTopicGate } from \"./useTopicGate\";\n\nexport const TopicGate: FunctionComponent<DataPlaneNavigationProps> = ({\n  instancesHref,\n  instanceDetailsHref,\n  children,\n}) => {\n  const { topic } = useTopicGate(instancesHref, instanceDetailsHref);\n\n  return topic ? <>{children}</> : <Loading />;\n};\n","import { InvalidObject } from \"@redhat-cloud-services/frontend-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport { ControlPlaneRouteRoot } from \"../control-plane/routesConsts\";\nimport { DataPlaneGate } from \"./DataPlaneGate\";\nimport {\n  AclsRoute,\n  ConsumerGroupsRoute,\n  DashboardRoute,\n  SettingsRoute,\n  TopicConsumerGroupsRoute,\n  TopicMessagesGroupsRoute,\n  TopicPropertiesRoute,\n  TopicSchemasRoute,\n  TopicsRoute,\n} from \"./routes\";\n\nimport { DataPlaneRoutePath } from \"./routesConsts\";\nimport { TopicGate } from \"./TopicGate\";\n\nexport const DataPlaneRoutes: VoidFunctionComponent = () => {\n  return (\n    <Route path={DataPlaneRoutePath}>\n      <DataPlaneGate instancesHref={\"/kafkas\"}>\n        <Switch>\n          <Route path={`${DataPlaneRoutePath}/dashboard`} exact>\n            <DashboardRoute instancesHref={\"/kafkas\"} />\n          </Route>\n\n          <Route path={`${DataPlaneRoutePath}/topics`} exact>\n            <TopicsRoute instancesHref={\"/kafkas\"} />\n          </Route>\n\n          <Route path={`${DataPlaneRoutePath}/consumer-groups`} exact>\n            <ConsumerGroupsRoute instancesHref={\"/kafkas\"} />\n          </Route>\n\n          <Route path={`${DataPlaneRoutePath}/acls`} exact>\n            <AclsRoute instancesHref={\"/kafkas\"} />\n          </Route>\n\n          <Route path={`${DataPlaneRoutePath}/settings`} exact>\n            <SettingsRoute instancesHref={\"/kafkas\"} />\n          </Route>\n\n          <Route path={`${DataPlaneRoutePath}/topics`} exact>\n            <TopicsRoute instancesHref={\"/kafkas\"} />\n          </Route>\n\n          <Route path={`${DataPlaneRoutePath}/topics`}>\n            <TopicGate\n              instancesHref={\"/kafkas\"}\n              instanceDetailsHref={(id) =>\n                `${ControlPlaneRouteRoot}/${id}/details`\n              }\n            >\n              <Switch>\n                <Route\n                  path={`${DataPlaneRoutePath}/topics/:topicName/consumer-groups`}\n                  exact\n                >\n                  <TopicConsumerGroupsRoute\n                    instancesHref={\"/kafkas\"}\n                    instanceDetailsHref={(id) =>\n                      `${ControlPlaneRouteRoot}/${id}/details`\n                    }\n                  />\n                </Route>\n                <Route\n                  path={`${DataPlaneRoutePath}/topics/:topicName/messages`}\n                  exact\n                >\n                  <TopicMessagesGroupsRoute\n                    instancesHref={\"/kafkas\"}\n                    instanceDetailsHref={(id) =>\n                      `${ControlPlaneRouteRoot}/${id}/details`\n                    }\n                  />\n                </Route>\n                <Route\n                  path={`${DataPlaneRoutePath}/topics/:topicName/properties`}\n                  exact\n                >\n                  <TopicPropertiesRoute\n                    instancesHref={\"/kafkas\"}\n                    instanceDetailsHref={(id) =>\n                      `${ControlPlaneRouteRoot}/${id}/details`\n                    }\n                  />\n                </Route>\n                <Route\n                  path={`${DataPlaneRoutePath}/topics/:topicName/schemas`}\n                  exact\n                >\n                  <TopicSchemasRoute\n                    instancesHref={\"/kafkas\"}\n                    instanceDetailsHref={(id) =>\n                      `${ControlPlaneRouteRoot}/${id}/details`\n                    }\n                  />\n                </Route>\n\n                <Redirect\n                  from={`${DataPlaneRoutePath}/topics/:topicName/`}\n                  to={`${DataPlaneRoutePath}/topics/:topicName/consumer-groups`}\n                  exact\n                />\n              </Switch>\n            </TopicGate>\n          </Route>\n\n          <Redirect\n            from={`${DataPlaneRoutePath}`}\n            to={`${DataPlaneRoutePath}/dashboard`}\n            exact\n          />\n\n          <Route>\n            <InvalidObject />\n          </Route>\n        </Switch>\n      </DataPlaneGate>\n    </Route>\n  );\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { KafkaPageV3 } from \"ui\";\n\nexport const OverviewRoute: VoidFunctionComponent = () => {\n  return <KafkaPageV3 />;\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport { ControlPlaneRoutes, DrawerProvider } from \"./control-plane\";\nimport { DataPlaneRoutes } from \"./data-plane\";\nimport { OverviewRoute } from \"./overview\";\n\nexport const Routes: VoidFunctionComponent = () => {\n  return (\n    <Switch>\n      <Route path={\"/overview\"} exact>\n        <OverviewRoute />\n      </Route>\n      <Redirect from={\"/\"} to={\"/kafkas\"} exact />\n      <Route path={\"/kafkas\"}>\n        <DrawerProvider>\n          {/* don't move these routes around! the order is important */}\n          <ControlPlaneRoutes />\n          <DataPlaneRoutes />\n        </DrawerProvider>\n      </Route>\n      <Route path={\"\"} exact></Route>\n    </Switch>\n  );\n};\n","import NotificationsPortal from \"@redhat-cloud-services/frontend-components-notifications/NotificationPortal\";\nimport { notificationsReducer } from \"@redhat-cloud-services/frontend-components-notifications/redux\";\nimport { getRegistry } from \"@redhat-cloud-services/frontend-components-utilities/Registry\";\nimport { useChrome } from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { memo, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport type { Reducer } from \"redux\";\n\nimport \"./App.scss\";\n\nimport { Routes } from \"./routes/Routes\";\n\nconst App = memo(() => {\n  const history = useHistory();\n  const { updateDocumentTitle, on } = useChrome();\n\n  const { t } = useTranslation();\n  const title = t(\"kafka:rhosakTitle\");\n\n  useEffect(() => {\n    const registry = getRegistry();\n    registry.register({ notifications: notificationsReducer as Reducer });\n\n    updateDocumentTitle(title);\n\n    const unregister = on(\"APP_NAVIGATION\", (event) => {\n      console.dir(event);\n      event.navId && history.push(\"/\" + event.navId === \"/\" ? \"\" : event.navId);\n    });\n    return () => {\n      if (unregister) {\n        unregister();\n      }\n    };\n  }, [history, on, title, updateDocumentTitle]);\n\n  return (\n    <>\n      <NotificationsPortal />\n      <Routes />\n    </>\n  );\n});\n\nexport default App;\n","// @ts-nocheck\nimport { useChrome } from \"@redhat-cloud-services/frontend-components/useChrome\";\n/* tslint:disable */\nimport { AssetsContext } from \"@rhoas/app-services-ui-shared\";\nimport type { ScalprumComponentProps } from \"@scalprum/react-core\";\nimport { ScalprumComponent } from \"@scalprum/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useState } from \"react\";\n\nexport const appIdentifier = \"applicationServices\";\n\nconst basePath = \"/apps/rhoas-guides-build\";\nconst getPath = () => {\n  return basePath;\n};\n\nexport const QuickstartLoader: VoidFunctionComponent = () => {\n  const [loaded, setLoaded] = useState(false);\n  const chrome = useChrome();\n  const { quickStarts } = chrome;\n\n  const onLoad = (qs: unknown) => {\n    if (quickStarts) {\n      setLoaded(true); // unload federated module\n      quickStarts.set(appIdentifier, qs);\n    }\n  };\n\n  const processor = (([_, m]: [string, { entry: string[] }]) =>\n    m.entry.map(\n      (e) => `${basePath}${e}`\n    )) as unknown as ScalprumComponentProps[\"processor\"];\n\n  return (\n    <AssetsContext.Provider value={{ getPath }}>\n      {!loaded ? (\n        <ScalprumComponent\n          appName=\"guides\"\n          scope=\"guides\"\n          module=\"./QuickStartLoader\"\n          ErrorComponent={<div>opsie</div>}\n          processor={processor}\n          showDrafts={false}\n          onLoad={onLoad}\n        />\n      ) : null}\n    </AssetsContext.Provider>\n  );\n};\n","import { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { Middleware } from 'redux';\n\nexport let registry: ReducerRegistry<any>;\n\nexport function init(...middleware: Middleware[]) {\n  registry = getRegistry({}, [\n    promiseMiddleware,\n    notificationsMiddleware({ errorDescriptionKey: ['detail', 'stack'] }),\n    ...middleware,\n  ]);\n  return registry;\n}\n","import type { Bytes, DateIsoString } from \"../types\";\n\n/**\n * All the details abut a Kafka instance.\n *\n * Unless differently specified, the values marked as accepting `undefined`\n * will come from extra API calls.\n */\nexport type Kafka = {\n  id: string;\n  name: string;\n  createdAt: DateIsoString;\n  updatedAt: DateIsoString;\n  expiryDate: DateIsoString | undefined;\n  owner: string;\n  provider: CloudProvider;\n  region: CloudRegion;\n  status: Status;\n  plan: Plan;\n  size: string | undefined;\n  ingress: number | undefined;\n  egress: number | undefined;\n  storage: Bytes | undefined;\n  maxPartitions: number | undefined;\n  connections: number | undefined;\n  connectionRate: number | undefined;\n  messageSize: Bytes | undefined;\n  billing: \"prepaid\" | MarketplaceSubscription | undefined;\n\n  version: string;\n\n  bootstrapUrl: string | undefined;\n  adminUrl: string | undefined;\n};\nexport type KafkaField = keyof Kafka;\n\n/**\n * Supported Cloud Providers. Extend this to add a new provider, then follow\n * Typescript errors to find where extra information need to be added (images,\n * translations).\n */\nexport type CloudProvider = \"aws\" | \"gcp\" | \"azure\";\n\n/**\n * A Cloud Region. Since this varies between Cloud Providers and has no extra\n * visual attached, we take its name from the API and do no further\n * transformation.\n */\nexport type CloudRegion = string;\n/**\n * Cloud provider multi availability zone\n */\nexport type AZ = \"single\" | \"multi\";\n/**\n * A number that describes how much does an instance cost to create\n */\nexport type Quota = number;\n/**\n * The capabilities of an instance, and its quota cost. Some sizes might not be\n * enabled, eg. because temporarily out of capacity\n */\nexport type Size = {\n  id: string;\n  displayName: string;\n  status: \"stable\" | \"preview\";\n  quota: Quota;\n  ingress: number;\n  egress: number;\n  storage: number;\n  connections: number;\n  connectionRate: number;\n  maxPartitions: number;\n  messageSize: number;\n  isDisabled: boolean;\n};\n/**\n * Paid for instances are `standard`, evaluation instances are `developer`.\n * `standard` instances have a `Quota` associated, and bigger sizes.\n * `developer` instances are free to be created (up to 1 per user), have a\n * single, smaller size option than `standard` ones, and they expire after a\n * few hours.\n *\n * Note: a new kind of evaluation instance is being studied. They will have a\n * long expiration period and bigger sizes.\n */\nexport type Plan = \"standard\" | \"developer\";\n/**\n * All the statuses an instance can be. If new statuses are added, ensure to\n * add them to the relevant status group (`ReadyStatuses` etc.).\n */\nexport const Statuses = [\n  \"ready\",\n  \"degraded\",\n  \"accepted\",\n  \"provisioning\",\n  \"preparing\",\n  \"deprovision\",\n  \"deleting\",\n  \"suspended\",\n  \"suspending\",\n  \"resuming\",\n] as const;\n\nexport type Status = typeof Statuses[number];\n\nexport const CreatingStatuses: readonly Status[] = [\n  \"accepted\",\n  \"provisioning\",\n  \"preparing\",\n];\nexport const ReadyStatuses: readonly Status[] = [\"ready\"];\nexport const DegradedStatuses: readonly Status[] = [\"degraded\"];\nexport const SuspendingStatuses: readonly Status[] = [\"suspending\"];\nexport const SuspendedStatuses: readonly Status[] = [\"suspended\"];\nexport const DeletingStatuses: readonly Status[] = [\"deleting\", \"deprovision\"];\nexport const ResumingStatuses: readonly Status[] = [\"resuming\"];\n\nexport const SimplifiedStatuses = {\n  creating: CreatingStatuses,\n  ready: ReadyStatuses,\n  degraded: DegradedStatuses,\n  suspended: SuspendedStatuses,\n  deleting: DeletingStatuses,\n  resuming: ResumingStatuses,\n  suspending: SuspendingStatuses,\n} as const;\nexport type SimplifiedStatus = keyof typeof SimplifiedStatuses;\n\n/**\n * A list of marketplaces where an instance can be billed to\n */\nexport type MarketPlace = CloudProvider | \"rhm\";\n/**\n * List of marketplaces where a user has some subscription\n */\nexport type MarketPlaceSubscriptions = {\n  marketplace: MarketPlace;\n  subscriptions: string[];\n};\n/**\n * A specific marketplace's subscription, assigned as billing option to an\n * instance.\n *\n * Note: the API will provide only the `subscription`; the `MarketPlace` will\n * have to be fetched querying for the `subscription`.\n */\nexport type MarketplaceSubscription = {\n  marketplace: MarketPlace;\n  subscription: string;\n};\n","export enum RetentionTimeUnits {\n  MILLISECOND = \"milliseconds\",\n  SECOND = \"seconds\",\n  MINUTE = \"minutes\",\n  HOUR = \"hours\",\n  DAY = \"days\",\n  WEEK = \"weeks\",\n  CUSTOM = \"custom\",\n  UNLIMITED = \"unlimited\",\n}\n\nexport enum RetentionSizeUnits {\n  BYTE = \"bytes\",\n  KIBIBYTE = \"kibibytes\",\n  MEBIBYTE = \"mebibytes\",\n  GIBIBYTE = \"gibibytes\",\n  TEBIBYTE = \"tebibytes\",\n  CUSTOM = \"custom\",\n  UNLIMITED = \"unlimited\",\n}\n\nexport const unitsToBytes = {\n  [RetentionSizeUnits.BYTE]: BigInt(\"1\"),\n  [RetentionSizeUnits.KIBIBYTE]: BigInt(\"1024\"),\n  [RetentionSizeUnits.MEBIBYTE]: BigInt(\"1048576\"),\n  [RetentionSizeUnits.GIBIBYTE]: BigInt(\"1073741824\"),\n  [RetentionSizeUnits.TEBIBYTE]: BigInt(\"1099511600000\"),\n};\n\nexport const unitsToMilliSecond = {\n  [RetentionTimeUnits.MILLISECOND]: BigInt(\"1\"),\n  [RetentionTimeUnits.SECOND]: BigInt(\"1000\"),\n  [RetentionTimeUnits.MINUTE]: BigInt(\"60000\"),\n  [RetentionTimeUnits.HOUR]: BigInt(\"3600000\"),\n  [RetentionTimeUnits.DAY]: BigInt(\"86400000\"),\n};\n\ntype ConversionUnit = {\n  value: bigint;\n  unit: string;\n};\n\nexport const millisecondsToTime = (value: bigint): ConversionUnit => {\n  if (value) {\n    if (value % unitsToMilliSecond.days == BigInt(0))\n      return { value: value / unitsToMilliSecond.days, unit: \"days\" };\n    if (value % unitsToMilliSecond.hours == BigInt(0))\n      return { value: value / unitsToMilliSecond.hours, unit: \"hours\" };\n    if (value % unitsToMilliSecond.minutes == BigInt(0))\n      return { value: value / unitsToMilliSecond.minutes, unit: \"minutes\" };\n    if (value % unitsToMilliSecond.seconds == BigInt(0))\n      return { value: value / unitsToMilliSecond.seconds, unit: \"seconds\" };\n  }\n\n  return { value, unit: \"milliseconds\" };\n};\n\nexport const formattedRetentionTime = (time: bigint): string => {\n  const { unit, value } = millisecondsToTime(time);\n  return Number(value) === -1 ? \"Unlimited\" : `${time} ms (${value} ${unit})`;\n};\n\nexport const formattedRetentionSize = (size: bigint): string => {\n  const { unit, value } = bytesToMemorySize(size);\n  return Number(value) === -1\n    ? \"Unlimited\"\n    : `${size} bytes (${value} ${unit})`;\n};\n\nexport const bytesToMemorySize = (value: bigint): ConversionUnit => {\n  if (value) {\n    if (value % unitsToBytes.tebibytes == BigInt(0))\n      return { value: value / unitsToBytes.tebibytes, unit: \"tebibytes\" };\n    if (value % unitsToBytes.gibibytes == BigInt(0))\n      return { value: value / unitsToBytes.gibibytes, unit: \"gibibytes\" };\n    if (value % unitsToBytes.mebibytes == BigInt(0))\n      return { value: value / unitsToBytes.mebibytes, unit: \"mebibytes\" };\n    if (value % unitsToBytes.kibibytes == BigInt(0))\n      return { value: value / unitsToBytes.kibibytes, unit: \"kibibytes\" };\n  }\n\n  return { value, unit: \"bytes\" };\n};\n","import type {\n  ConsumerGroupState,\n  GroupsApi,\n  SortDirection,\n} from \"@rhoas/kafka-instance-sdk\";\nimport type { ConsumerGroup } from \"ui-models/src/models/consumer-group\";\nimport type { KafkaConsumerGroupSortableColumn } from \"../types\";\n\nexport type FetchConsumerGroupsParams = {\n  getConsumerGroups: GroupsApi[\"getConsumerGroups\"];\n  page?: number;\n  perPage?: number;\n  sort?: KafkaConsumerGroupSortableColumn;\n  direction?: SortDirection;\n  topic?: string;\n  groupId?: string;\n};\n\nexport async function fetchConsumerGroups({\n  getConsumerGroups,\n  page,\n  perPage,\n  topic,\n  groupId,\n  sort,\n  direction,\n}: FetchConsumerGroupsParams): Promise<{\n  groups: ConsumerGroup[];\n  count: number;\n}> {\n  const response = await getConsumerGroups(\n    undefined,\n    undefined,\n    perPage,\n    page,\n    topic,\n    groupId,\n    direction,\n    sort\n  );\n  const groups = (response.data.items || []).map<ConsumerGroup>((t) => ({\n    groupId: t.groupId || \"\",\n    state: stateMapping[t.state as ConsumerGroupState],\n    consumers: t.consumers,\n    activeConsumers: t.metrics?.activeConsumers,\n    laggingPartitions: t.metrics?.laggingPartitions,\n    unassignedPartitions: t.metrics?.unassignedPartitions,\n  }));\n  const count = response.data.total;\n  return { count, groups };\n}\n\nconst stateMapping: { [state in ConsumerGroupState]: ConsumerGroup[\"state\"] } =\n  {\n    DEAD: \"Dead\",\n    EMPTY: \"Empty\",\n    STABLE: \"Stable\",\n    UNKNOWN: \"Unknown\",\n    COMPLETING_REBALANCE: \"CompletingRebalance\",\n    PREPARING_REBALANCE: \"PreparingRebalance\",\n  };\n","import type { DefaultApi } from \"@rhoas/kafka-management-sdk\";\nimport type { GetKafkaInstanceMetricsResponse, TimeSeriesMetrics } from \"ui\";\nimport type { SafeRangeQuery } from \"../types\";\n\nexport type FetchKafkaMetricsProps = {\n  getMetricsByRangeQuery: DefaultApi[\"getMetricsByRangeQuery\"];\n  id: string;\n  duration: number;\n  interval: number;\n};\n\nexport async function fetchKafkaMetrics({\n  getMetricsByRangeQuery,\n  id,\n  duration,\n  interval,\n}: FetchKafkaMetricsProps): Promise<GetKafkaInstanceMetricsResponse> {\n  const response = await getMetricsByRangeQuery(id, duration, interval, [\n    \"kubelet_volume_stats_used_bytes\",\n    \"kafka_namespace:kafka_server_socket_server_metrics_connection_creation_rate:sum\",\n    \"kafka_namespace:kafka_server_socket_server_metrics_connection_count:sum\",\n  ]);\n\n  // Remove all results with no data. Not sure this can really  happen but since\n  // the types allow for undefined we need to do a bit of defensive programming.\n  const safeMetrics: SafeRangeQuery[] = (response.data.items || []).filter(\n    (m) =>\n      // defensive programming\n      !(\n        m.values &&\n        m.metric &&\n        m.metric.topic &&\n        m.metric.name &&\n        m.metric.persistentvolumeclaim &&\n        m.metric.persistentvolumeclaim.includes(\"zookeeper\")\n      )\n  ) as SafeRangeQuery[];\n\n  const usedDiskSpaceMetrics: TimeSeriesMetrics = {};\n  const connectionAttemptRateMetrics: TimeSeriesMetrics = {};\n  const clientConnectionsMetrics: TimeSeriesMetrics = {};\n\n  const connectionRateLimit = 0,\n    connectionsLimit = 0,\n    diskSpaceLimit = 0;\n\n  safeMetrics.forEach((m) => {\n    const { __name__: name } = m.metric;\n\n    function addAggregatedValuesTo(metric: TimeSeriesMetrics) {\n      m.values.forEach(\n        ({ value, timestamp }) =>\n          (metric[timestamp] = value + (metric[timestamp] || 0))\n      );\n    }\n\n    switch (name) {\n      case \"kubelet_volume_stats_used_bytes\":\n        addAggregatedValuesTo(usedDiskSpaceMetrics);\n        break;\n      case \"kafka_namespace:kafka_server_socket_server_metrics_connection_creation_rate:sum\":\n        addAggregatedValuesTo(connectionAttemptRateMetrics);\n        break;\n      case \"kafka_namespace:kafka_server_socket_server_metrics_connection_count:sum\":\n        addAggregatedValuesTo(clientConnectionsMetrics);\n        break;\n    }\n  });\n\n  return {\n    usedDiskSpaceMetrics,\n    clientConnectionsMetrics,\n    connectionAttemptRateMetrics,\n    diskSpaceLimit,\n    connectionRateLimit,\n    connectionsLimit,\n  };\n}\n","export function valuesToQuery(\n  field: string,\n  values: string[],\n  comparison: \"%\" | \"=\"\n): string | undefined {\n  return values\n    .map((v) =>\n      comparison === \"%\"\n        ? `${field} like %${v.trim()}%`\n        : `${field} = ${v.trim()}`\n    )\n    .join(\" or \");\n}\n","import type { DefaultApi, KafkaRequest } from \"@rhoas/kafka-management-sdk\";\nimport type { SimplifiedStatus } from \"ui-models/src/models/kafka\";\nimport { SimplifiedStatuses } from \"ui-models/src/models/kafka\";\nimport type { KafkaInstanceEnhanced } from \"../transformers/kafkaRequestToKafkaInstanceEnhanched\";\nimport type { KafkaInstancesSortableColumn } from \"../types\";\nimport { valuesToQuery } from \"./valuesToQuery\";\n\nconst uiColumnMapping: {\n  [key in KafkaInstancesSortableColumn]: keyof KafkaRequest;\n} = {\n  name: \"name\",\n  owner: \"owner\",\n  provider: \"cloud_provider\",\n  region: \"region\",\n  createdAt: \"created_at\",\n};\nexport type FetchKafkasParams = {\n  getKafkas: DefaultApi[\"getKafkas\"];\n  dataMapper: (data: KafkaRequest) => Promise<KafkaInstanceEnhanced>;\n  page: number;\n  perPage: number;\n  name: string[];\n  owner: string[];\n  status: SimplifiedStatus[];\n  sort: KafkaInstancesSortableColumn;\n  direction: \"asc\" | \"desc\";\n};\n\nexport async function fetchKafkas(params: FetchKafkasParams): Promise<{\n  instances: KafkaInstanceEnhanced[];\n  count: number;\n}> {\n  const {\n    name,\n    status,\n    owner,\n    sort,\n    direction,\n    page,\n    perPage,\n    dataMapper,\n    getKafkas,\n  } = params;\n  const search = filtersToSearch(name, owner, status);\n\n  const res = await getKafkas(\n    page.toString(10),\n    perPage.toString(10),\n    sort ? `${uiColumnMapping[sort]} ${direction}` : undefined,\n    search\n  );\n  const rawInstances = res.data.items;\n  const count = res.data.total;\n  const instances = await Promise.all(rawInstances.map(dataMapper));\n  return {\n    instances,\n    count,\n  };\n}\n\nexport function filtersToSearch(\n  name: string[],\n  owner: string[],\n  status: SimplifiedStatus[]\n): string {\n  const querystring = [\n    valuesToQuery(\"name\", name, \"%\"),\n    valuesToQuery(\"owner\", owner, \"%\"),\n    valuesToQuery(\n      \"status\",\n      status.flatMap((s) => SimplifiedStatuses[s]),\n      \"=\"\n    ),\n  ]\n    .filter(Boolean)\n    .map((q) => `(${q!})`)\n    .join(\" and \");\n  return querystring;\n}\n","import type { DefaultApi, InstantQuery } from \"@rhoas/kafka-management-sdk\";\nimport type { NoUndefinedField } from \"../types\";\n\nexport async function fetchKafkaKpis(\n  getMetricsByInstantQuery: DefaultApi[\"getMetricsByInstantQuery\"],\n  id: string\n) {\n  let topics = 0,\n    topicPartitions = 0,\n    consumerGroups = 0;\n\n  const response = await getMetricsByInstantQuery(id, [\n    \"kafka_topic:kafka_topic_partitions:sum\", // (Number of topic partitions)\n    \"kafka_topic:kafka_topic_partitions:count\", // (Number of topics)\n    \"consumergroup:kafka_consumergroup_members:count\", // (number of consumer groups - note that this metric will appear after a consumer group is created. There should be handled by the UI in a way that the metric isn't visible if no consumer groups are created)\n  ]);\n\n  const safeMetrics: NoUndefinedField<InstantQuery[]> = (response.data.items ||\n    []) as NoUndefinedField<InstantQuery[]>;\n\n  safeMetrics.forEach(({ metric, value }) => {\n    const { __name__: name } = metric;\n\n    switch (name) {\n      case \"kafka_topic:kafka_topic_partitions:sum\":\n        topicPartitions = value;\n        break;\n      case \"kafka_topic:kafka_topic_partitions:count\":\n        topics = value;\n        break;\n      case \"consumergroup:kafka_consumergroup_members:count\":\n        consumerGroups = value;\n        break;\n    }\n  });\n  return {\n    consumerGroups,\n    topicPartitions,\n    topics,\n  };\n}\n","import { Topic as ApiTopic } from \"@rhoas/kafka-instance-sdk/dist/generated/model/topic\";\nimport type { Plan } from \"ui-models/src/models/kafka\";\nimport {\n  TopicConfig,\n  TopicConfigField,\n} from \"ui-models/src/models/topic-config\";\nimport { Bytes, Milliseconds } from \"ui-models/src/types\";\n\nexport const developerDefaults: TopicConfig = {\n  \"cleanup.policy\": \"delete\",\n  \"delete.retention.ms\": { type: \"ms\", value: BigInt(\"86400000\") },\n  \"max.compaction.lag.ms\": { type: \"ms\", value: BigInt(\"9223372036854775807\") },\n  \"max.message.bytes\": { type: \"bytes\", value: BigInt(\"1048588\") },\n  \"message.downconversion.enable\": true,\n  \"message.timestamp.difference.max.ms\": {\n    type: \"ms\",\n    value: BigInt(\"9223372036854775807\"),\n  },\n  \"message.timestamp.type\": \"CreateTime\",\n  \"min.compaction.lag.ms\": { type: \"ms\", value: BigInt(\"0\") },\n  \"retention.bytes\": { type: \"bytes\", value: BigInt(\"-1\") },\n  \"retention.ms\": { type: \"ms\", value: BigInt(\"604800000\") },\n  \"segment.bytes\": { type: \"bytes\", value: BigInt(\"1073741824\") },\n  \"segment.ms\": { type: \"ms\", value: BigInt(\"604800000\") },\n  \"compression.type\": \"producer\",\n  \"file.delete.delay.ms\": { type: \"ms\", value: BigInt(\"60000\") },\n  \"flush.messages\": { type: \"ms\", value: BigInt(\"9223372036854775807\") },\n  \"flush.ms\": { type: \"ms\", value: BigInt(\"9223372036854775807\") },\n  \"index.interval.bytes\": { type: \"bytes\", value: BigInt(\"4096\") },\n  \"message.format.version\": \"3.0-IV1\",\n  \"min.cleanable.dirty.ratio\": 0.5,\n  \"min.insync.replicas\": 1,\n  \"segment.index.bytes\": { type: \"bytes\", value: BigInt(\"10485760\") },\n  \"segment.jitter.ms\": { type: \"ms\", value: BigInt(\"0\") },\n  \"unclean.leader.election.enable\": false,\n  preallocate: false,\n} as const;\n\nexport const standardDefaults: TopicConfig = {\n  \"cleanup.policy\": \"delete\",\n  \"delete.retention.ms\": { type: \"ms\", value: BigInt(\"86400000\") },\n  \"max.compaction.lag.ms\": { type: \"ms\", value: BigInt(\"9223372036854775807\") },\n  \"max.message.bytes\": { type: \"bytes\", value: BigInt(\"1048588\") },\n  \"message.downconversion.enable\": true,\n  \"message.timestamp.difference.max.ms\": {\n    type: \"ms\",\n    value: BigInt(\"9223372036854775807\"),\n  },\n  \"message.timestamp.type\": \"CreateTime\",\n  \"min.compaction.lag.ms\": { type: \"ms\", value: BigInt(\"0\") },\n  \"retention.bytes\": { type: \"bytes\", value: BigInt(\"-1\") },\n  \"retention.ms\": { type: \"ms\", value: BigInt(\"604800000\") },\n  \"segment.bytes\": { type: \"bytes\", value: BigInt(\"1073741824\") },\n  \"segment.ms\": { type: \"ms\", value: BigInt(\"604800000\") },\n  \"compression.type\": \"producer\",\n  \"file.delete.delay.ms\": { type: \"ms\", value: BigInt(\"60000\") },\n  \"flush.messages\": { type: \"ms\", value: BigInt(\"9223372036854775807\") },\n  \"flush.ms\": { type: \"ms\", value: BigInt(\"9223372036854775807\") },\n  \"index.interval.bytes\": { type: \"bytes\", value: BigInt(\"4096\") },\n  \"message.format.version\": \"3.0-IV1\",\n  \"min.cleanable.dirty.ratio\": 0.5,\n  \"min.insync.replicas\": 2,\n  \"segment.index.bytes\": { type: \"bytes\", value: BigInt(\"10485760\") },\n  \"segment.jitter.ms\": { type: \"ms\", value: BigInt(\"0\") },\n  \"unclean.leader.election.enable\": false,\n  preallocate: false,\n} as const;\n\nexport function topicTransformerFactory(plan: Plan) {\n  const d = plan === \"developer\" ? developerDefaults : standardDefaults;\n\n  return function topicTransformer(t: ApiTopic) {\n    const cm = Object.fromEntries<string>(\n      t.config?.map((c) => [c.key as TopicConfigField, c.value]) || []\n    );\n    const config: TopicConfig = {\n      \"cleanup.policy\": cm[\"cleanup.policy\"] as TopicConfig[\"cleanup.policy\"],\n      \"delete.retention.ms\": configValueToMilliseconds(\n        cm[\"delete.retention.ms\"],\n        d[\"delete.retention.ms\"]\n      ),\n      \"max.compaction.lag.ms\": configValueToMilliseconds(\n        cm[\"max.compaction.lag.ms\"],\n        d[\"max.compaction.lag.ms\"]\n      ),\n      \"max.message.bytes\": configValueToBytes(\n        cm[\"max.message.bytes\"],\n        d[\"max.message.bytes\"]\n      ),\n      \"message.downconversion.enable\": configValueToBoolean(\n        cm[\"message.downconversion.enable\"],\n        d[\"message.downconversion.enable\"]\n      ),\n      \"message.timestamp.difference.max.ms\": configValueToMilliseconds(\n        cm[\"message.timestamp.difference.max.ms\"],\n        d[\"message.timestamp.difference.max.ms\"]\n      ),\n      \"message.timestamp.type\": cm[\n        \"message.timestamp.type\"\n      ] as TopicConfig[\"message.timestamp.type\"],\n      \"min.compaction.lag.ms\": configValueToMilliseconds(\n        cm[\"min.compaction.lag.ms\"],\n        d[\"min.compaction.lag.ms\"]\n      ),\n      \"retention.bytes\": configValueToBytes(\n        cm[\"retention.bytes\"],\n        d[\"retention.bytes\"]\n      ),\n      \"retention.ms\": configValueToMilliseconds(\n        cm[\"retention.ms\"],\n        d[\"retention.ms\"]\n      ),\n      \"segment.bytes\": configValueToBytes(\n        cm[\"segment.bytes\"],\n        d[\"segment.bytes\"]\n      ),\n      \"segment.ms\": configValueToMilliseconds(\n        cm[\"segment.ms\"],\n        d[\"segment.ms\"]\n      ),\n      \"compression.type\": cm[\n        \"compression.type\"\n      ] as TopicConfig[\"compression.type\"],\n      \"file.delete.delay.ms\": configValueToMilliseconds(\n        cm[\"file.delete.delay.ms\"],\n        d[\"file.delete.delay.ms\"]\n      ),\n      \"flush.messages\": configValueToMilliseconds(\n        cm[\"flush.messages\"],\n        d[\"flush.messages\"]\n      ),\n      \"flush.ms\": configValueToMilliseconds(cm[\"flush.ms\"], d[\"flush.ms\"]),\n      \"follower.replication.throttled.replicas\":\n        cm[\"follower.replication.throttled.replicas\"],\n      \"index.interval.bytes\": configValueToBytes(\n        cm[\"index.interval.bytes\"],\n        d[\"index.interval.bytes\"]\n      ),\n      \"leader.replication.throttled.replicas\":\n        cm[\"leader.replication.throttled.replicas\"],\n      \"message.format.version\": cm[\"message.format.version\"],\n      \"min.cleanable.dirty.ratio\": configValueToNumber(\n        cm[\"min.cleanable.dirty.ratio\"],\n        d[\"min.cleanable.dirty.ratio\"]\n      ),\n      \"min.insync.replicas\": configValueToNumber(\n        cm[\"min.insync.replicas\"],\n        d[\"min.insync.replicas\"]\n      ),\n      \"segment.index.bytes\": configValueToBytes(\n        cm[\"segment.index.bytes\"],\n        d[\"segment.index.bytes\"]\n      ),\n      \"segment.jitter.ms\": configValueToMilliseconds(\n        cm[\"segment.jitter.ms\"],\n        d[\"segment.jitter.ms\"]\n      ),\n      \"unclean.leader.election.enable\": configValueToBoolean(\n        cm[\"unclean.leader.election.enable\"],\n        d[\"unclean.leader.election.enable\"]\n      ),\n      preallocate: configValueToBoolean(cm[\"preallocate\"], d[\"preallocate\"]),\n    };\n    return {\n      name: t.name!,\n      partitionsCount: t.partitions?.length || 0,\n      config,\n    };\n  };\n}\n\nfunction configValueToMilliseconds(\n  value: string,\n  defaultIfEmpty: Milliseconds\n): Milliseconds {\n  return value && value.trim().length > 0\n    ? { type: \"ms\", value: BigInt(value.trim()) }\n    : defaultIfEmpty;\n}\n\nfunction configValueToBytes(value: string, defaultIfEmpty: Bytes): Bytes {\n  return value && value.trim().length > 0\n    ? { type: \"bytes\", value: BigInt(value.trim()) }\n    : defaultIfEmpty;\n}\n\nfunction configValueToNumber(value: string, defaultIfError: number): number {\n  return parseInt(value, 10) || defaultIfError;\n}\n\nfunction configValueToBoolean(value: string, defaultIfError: boolean): boolean {\n  try {\n    const v: unknown = JSON.parse(value);\n    if (typeof v !== \"boolean\") {\n      throw new Error(`configValueToBoolean: not a boolean [${value}]`);\n    }\n    return v;\n  } catch {\n    return defaultIfError;\n  }\n}\n","import type {\n  GetTopicsMetricsResponse,\n  PartitionBytesMetric,\n  TimeSeriesMetrics,\n} from \"@rhoas/app-services-ui-components\";\nimport type { DefaultApi } from \"@rhoas/kafka-management-sdk\";\nimport type { SafeRangeQuery } from \"../types\";\n\nexport type FetchTopicsMetricsProps = {\n  getMetricsByRangeQuery: DefaultApi[\"getMetricsByRangeQuery\"];\n  id: string;\n  duration: number;\n  interval: number;\n  selectedTopic: string | undefined;\n};\n\nexport async function fetchTopicsMetrics({\n  getMetricsByRangeQuery,\n  id,\n  duration,\n  interval,\n  selectedTopic,\n}: FetchTopicsMetricsProps): Promise<\n  Omit<GetTopicsMetricsResponse, \"kafkaTopics\">\n> {\n  const response = await getMetricsByRangeQuery(id, duration, interval, [\n    \"kafka_topic:kafka_server_brokertopicmetrics_bytes_in_total:rate5m\",\n    \"kafka_topic:kafka_server_brokertopicmetrics_bytes_out_total:rate5m\",\n    \"kafka_topic:kafka_log_log_size:sum\",\n    \"kafka_topic:kafka_server_brokertopicmetrics_messages_in_total:rate5m\",\n  ]);\n\n  // Remove all results with no data. Not sure this can really  happen but since\n  // the types allow for undefined we need to do a bit of defensive programming.\n  const safeMetrics: SafeRangeQuery[] = (response.data.items || []).filter(\n    (m) =>\n      // defensive programming\n      !(m.values && m.metric && m.metric.topic && m.metric.name)\n  ) as SafeRangeQuery[];\n\n  // Also filter for metrics about the selectedTopic, if specified\n  const filteredMetrics = safeMetrics.filter((m) =>\n    // filter for metrics for the selectedTopic, if needed\n    selectedTopic !== undefined ? m.metric?.topic === selectedTopic : true\n  );\n\n  // get the unique topics we have metrics for in the selected time range\n  const topics = Array.from(new Set(safeMetrics.map((m) => m.metric.topic)));\n\n  const bytesIncoming: TimeSeriesMetrics = {};\n  const bytesOutgoing: TimeSeriesMetrics = {};\n  const bytesPerPartition: PartitionBytesMetric = {};\n  const incomingMessageRate: TimeSeriesMetrics = {};\n\n  filteredMetrics.forEach((m) => {\n    const { __name__: name, topic } = m.metric;\n\n    function addAggregatedTotalBytesTo(metric: TimeSeriesMetrics) {\n      m.values.forEach(\n        ({ value, timestamp }) =>\n          (metric[timestamp] = value + (metric[timestamp] || 0))\n      );\n    }\n\n    function addAggregatePartitionBytes() {\n      const partition = bytesPerPartition[topic] || {};\n      m.values.forEach(\n        ({ value, timestamp }) =>\n          (partition[timestamp] = value + (partition[timestamp] || 0))\n      );\n      bytesPerPartition[topic] = partition;\n    }\n\n    switch (name) {\n      case \"kafka_topic:kafka_server_brokertopicmetrics_bytes_in_total:rate5m\":\n        addAggregatedTotalBytesTo(bytesIncoming);\n        break;\n      case \"kafka_topic:kafka_server_brokertopicmetrics_bytes_out_total:rate5m\":\n        addAggregatedTotalBytesTo(bytesOutgoing);\n        break;\n      case \"kafka_topic:kafka_log_log_size:sum\":\n        addAggregatePartitionBytes();\n        break;\n      case \"kafka_topic:kafka_server_brokertopicmetrics_messages_in_total:rate5m\":\n        addAggregatedTotalBytesTo(incomingMessageRate);\n        break;\n    }\n  });\n\n  return {\n    metricsTopics: topics,\n    bytesOutgoing,\n    bytesIncoming,\n    bytesPerPartition,\n    incomingMessageRate,\n  };\n}\n","import type { SortDirection, TopicsApi } from \"@rhoas/kafka-instance-sdk\";\nimport type { Plan } from \"ui-models/src/models/kafka\";\nimport type { Topic } from \"ui-models/src/models/topic\";\nimport { topicTransformerFactory } from \"../transformers/topicTransformer\";\nimport type { KafkaTopicsSortableColumn } from \"../types\";\n\nexport type FetchTopicsParams = {\n  getTopics: TopicsApi[\"getTopics\"];\n  page?: number;\n  perPage?: number;\n  sort?: KafkaTopicsSortableColumn;\n  direction?: SortDirection;\n  filter?: string;\n  plan: Plan;\n};\n\nexport async function fetchTopics({\n  getTopics,\n  page,\n  perPage,\n  filter,\n  sort,\n  direction,\n  plan,\n}: FetchTopicsParams): Promise<{ topics: Topic[]; count: number }> {\n  const response = await getTopics(\n    undefined,\n    undefined,\n    perPage,\n    filter,\n    page,\n    direction,\n    sort\n  );\n  const topics = (response.data.items || []).map<Topic>(\n    topicTransformerFactory(plan)\n  );\n  const count = response.data.total;\n  return { count, topics };\n}\n","import type { Size } from \"@rhoas/app-services-ui-components\";\nimport type {\n  DefaultApi,\n  SupportedKafkaSize,\n} from \"@rhoas/kafka-management-sdk\";\nimport type { Plan } from \"ui-models/src/models/kafka\";\nimport type { CloudProviderInfoWithRegionsCapacity } from \"./fetchProvidersWithRegions\";\n\nexport type SizeWithLimits = Size & { trialDurationHours: number };\n\nexport async function fetchProviderRegionSizes(\n  api: DefaultApi[\"getInstanceTypesByCloudProviderAndRegion\"],\n  providerInfo: CloudProviderInfoWithRegionsCapacity,\n  region: string,\n  instanceType: Plan\n) {\n  const regions = providerInfo.regions;\n  const regionInfo = regions.find((r) => r.id === region);\n  const availableSizes =\n    regionInfo?.capacity.flatMap((c) =>\n      c.available_sizes.map((s) => `${c.instance_type}.${s}`)\n    ) || [];\n  const sizes = await api(providerInfo.id, region);\n  if (!sizes?.data?.instance_types) {\n    throw new Error(`No instance_types from backend`);\n  }\n\n  const standardSizes =\n    sizes?.data?.instance_types.find((i) => i.id === instanceType)?.sizes || [];\n\n  return standardSizes.map(\n    apiSizeToComponentSize.bind(\n      undefined,\n      (id) => !availableSizes.includes(`${instanceType}.${id}`)\n    )\n  );\n}\n\n//\n// export async function fetchProviderRegionSizesForPlanStandard (\n//   api: DefaultApi['getInstanceTypesByCloudProviderAndRegion'], providerInfo: CloudProviderInfoWithRegionsCapacity, region: string\n// )  {\n//   return fetchProviderRegionSizes(api, providerInfo, region, \"standard\");\n// };\n//\n// export const fetchProviderRegionSizesForPlanDeveloper = (\n//   api: DefaultApi['getInstanceTypesByCloudProviderAndRegion'], providerInfo: CloudProviderInfoWithRegionsCapacity, region: string\n//\n// ) => {\n//   const { data: standardSizes, isError } = await fetchProviderRegionSizes(\n//     provider,\n//     region,\n//     \"standard\"\n//   );\n//   const { data: developerSizes } = fetchProviderRegionSizes(\n//     provider,\n//     region,\n//     \"developer\"\n//   );\n//   return useQuery({\n//     queryKey: [],\n//     queryFn: () => {\n//       return {\n//         standard:\n//           standardSizes ||\n//           ([\n//             { id: \"1\", displayName: \"1\" },\n//             { id: \"2\", displayName: \"2\" },\n//           ] as StandardSizes),\n//         trial: developerSizes![0],\n//       };\n//     },\n//     enabled: (!!standardSizes || isError) && !!developerSizes,\n//   });\n// };\n\nfunction apiSizeToComponentSize(\n  isDisabled: (id: string) => boolean,\n  apiSize: SupportedKafkaSize\n): SizeWithLimits {\n  const s = apiSize as Required<SupportedKafkaSize>;\n  return {\n    id: s.id,\n    displayName: s.display_name,\n    quota: s.quota_consumed,\n    ingress: (s.ingress_throughput_per_sec.bytes || 0) / 1048576,\n    egress: (s.egress_throughput_per_sec.bytes || 0) / 1048576,\n    storage: Math.round((s.max_data_retention_size.bytes || 0) / 1073741824),\n    connections: s.total_max_connections,\n    connectionRate: s.max_connection_attempts_per_sec,\n    maxPartitions: s.max_partitions,\n    messageSize: (s.max_message_size.bytes || 0) / 1048576,\n    status: s.maturity_status === \"stable\" ? \"stable\" : \"preview\",\n    trialDurationHours: s.lifespan_seconds ? s.lifespan_seconds / 60 / 60 : 0,\n    isDisabled: isDisabled(s.id),\n  };\n}\n","import type {\n  CloudProvider,\n  CloudProviderInfo,\n} from \"@rhoas/app-services-ui-components\";\nimport type { DefaultApi } from \"@rhoas/kafka-management-sdk\";\nimport type { Plan } from \"ui-models/src/models/kafka\";\n\nexport type CloudProviderInfoWithRegionsCapacity = Omit<\n  CloudProviderInfo,\n  \"regions\"\n> & {\n  regions: Awaited<ReturnType<typeof fetchProviderRegions>>;\n};\n\nexport async function fetchProvidersWithRegions(\n  getCloudProviders: DefaultApi[\"getCloudProviders\"],\n  getCloudProviderRegions: DefaultApi[\"getCloudProviderRegions\"],\n  plan: Plan\n) {\n  const res = await getCloudProviders();\n  const allProviders = res?.data?.items || [];\n\n  const providers = (\n    await Promise.all(\n      allProviders\n        .filter((p) => p.enabled)\n        .map(async (provider) => {\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          const regions = await fetchProviderRegions(\n            getCloudProviderRegions,\n            provider.id!,\n            plan\n          );\n          const providerInfo: CloudProviderInfoWithRegionsCapacity = {\n            id: provider.id as CloudProvider,\n            displayName: provider.display_name!,\n            regions,\n          };\n          return regions.length > 0 ? providerInfo : null;\n        })\n    )\n  ).filter((p) => Boolean(p)) as CloudProviderInfoWithRegionsCapacity[];\n  if (providers.length === 0) {\n    throw new Error(\"No cloud providers with capacity found\");\n  }\n  const firstProvider = providers[0];\n  return { providers, defaultProvider: firstProvider?.id };\n}\n\nexport async function fetchProviderRegions(\n  getCloudProviderRegions: DefaultApi[\"getCloudProviderRegions\"],\n  provider: string,\n  instanceType: Plan\n) {\n  const res = await getCloudProviderRegions(provider);\n\n  if (!res?.data?.items) {\n    return Promise.reject(\"Invalid provider\");\n  }\n\n  const regionsForInstance = res.data.items.filter(\n    (region) =>\n      region.enabled &&\n      region.capacity.some((c) => c.instance_type === instanceType)\n  );\n\n  return regionsForInstance.map((r) => {\n    const max_capacity_reached = r.capacity?.some(\n      (c) => c.instance_type === instanceType && c.available_sizes?.length === 0\n    );\n\n    return {\n      id: r.id as CloudProvider,\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      displayName: r.display_name!,\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      isDisabled: max_capacity_reached,\n      capacity: r.capacity,\n    };\n  });\n}\n","import type { QuotaCost } from \"@rhoas/account-management-sdk\";\n\nexport const standardId = \"RHOSAK\" as const;\nexport const developerId = \"RHOSAKTrial\" as const;\nexport const resourceName = \"rhosak\" as const;\n\nexport function isStandardQuota(q: QuotaCost) {\n  return q.related_resources?.find((r) => r.billing_model === \"standard\");\n}\n\nexport function isMarketplaceQuota(q: QuotaCost) {\n  return q.related_resources?.find((r) => r.billing_model === \"marketplace\");\n}\n","import type { ConfigurationParameters } from \"@rhoas/kafka-management-sdk\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { ReactQueryDevtools } from \"@tanstack/react-query-devtools\";\nimport { isReactQueryDevToolsEanbled } from \"local-storage-helpers\";\nimport type { FunctionComponent } from \"react\";\nimport { createContext, lazy, Suspense, useContext } from \"react\";\n\nconst ReactQueryDevtoolsProduction = lazy(() =>\n  import(\"@tanstack/react-query-devtools/build/lib/index.prod.js\").then(\n    (d) => ({\n      default: d.ReactQueryDevtools,\n    })\n  )\n);\n\ntype ApiContextProps = Pick<\n  ConfigurationParameters,\n  \"accessToken\" | \"basePath\"\n> & {\n  refetchInterval: number;\n};\n\nconst ApiContext = createContext<ApiContextProps>(null!);\n\nconst queryClient = new QueryClient();\n\nexport const ApiProvider: FunctionComponent<ApiContextProps> = ({\n  children,\n  ...context\n}) => {\n  const showDevTools = isReactQueryDevToolsEanbled();\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ApiContext.Provider value={context}>\n        {children}\n        <ReactQueryDevtools initialIsOpen />\n        {showDevTools && (\n          <Suspense fallback={null}>\n            <ReactQueryDevtoolsProduction />\n          </Suspense>\n        )}\n      </ApiContext.Provider>\n    </QueryClientProvider>\n  );\n};\n\nexport function useApiConfiguration() {\n  return useContext(ApiContext);\n}\n","import type {\n  FetchConsumerGroupsParams,\n  FetchKafkaMetricsProps,\n  FetchKafkasParams,\n  FetchMessagesParams,\n  FetchTopicParams,\n  FetchTopicsMetricsProps,\n  FetchTopicsParams,\n} from \"./fetchers\";\n\nexport const masQueries = {\n  _root: () => ({ scope: \"mas\" } as const),\n  organization: () =>\n    [{ ...masQueries._root(), entity: \"organization\" }] as const,\n  quota: {\n    _root: () => ({ ...masQueries._root(), entity: \"quota\" } as const),\n    available: (params: { organization?: string }) =>\n      [\n        { ...masQueries.quota._root(), subentity: \"available\", ...params },\n      ] as const,\n    developerAvailability: () =>\n      [\n        { ...masQueries.quota._root(), subentity: \"developerAvailability\" },\n      ] as const,\n    standardAvailability: () =>\n      [\n        { ...masQueries.quota._root(), subentity: \"standardAvailability\" },\n      ] as const,\n  },\n} as const;\n\nexport const kafkaQueries = {\n  _root: () => ({ scope: \"kafka\" } as const),\n  list: (params: Omit<FetchKafkasParams, \"dataMapper\" | \"getKafkas\">) =>\n    [\n      {\n        ...kafkaQueries._root(),\n        entity: \"list\",\n      },\n      params,\n    ] as const,\n  instance: {\n    _root: ({ id, adminUrl }: { id?: string; adminUrl?: string }) =>\n      ({ ...kafkaQueries._root(), entity: \"instance\", id, adminUrl } as const),\n    details: (params: { id?: string }) =>\n      [\n        { ...kafkaQueries.instance._root(params), subentity: \"details\" },\n      ] as const,\n    topics: ({\n      id,\n      adminUrl,\n    }: { id?: string; adminUrl?: string } & Omit<\n      FetchTopicsParams,\n      \"getTopics\"\n    >) =>\n      [\n        {\n          ...kafkaQueries.instance._root({ id, adminUrl }),\n          subentity: \"topics\",\n        },\n      ] as const,\n    topic: ({\n      id,\n      adminUrl,\n      topicName,\n    }: { id?: string; adminUrl?: string } & Omit<\n      FetchTopicParams,\n      \"getTopic\"\n    >) =>\n      [\n        {\n          ...kafkaQueries.instance._root({ id, adminUrl }),\n          subentity: \"topic\",\n        },\n        { topicName },\n      ] as const,\n    topicMessages: ({\n      id,\n      adminUrl,\n      topicName,\n      ...params\n    }: { id?: string; adminUrl?: string } & Omit<\n      FetchMessagesParams,\n      \"consumeRecords\"\n    >) =>\n      [\n        {\n          ...kafkaQueries.instance._root({ id, adminUrl }),\n          subentity: \"topicMessages\",\n        },\n        { topicName, ...params },\n      ] as const,\n    consumerGroups: (\n      params: { id?: string; adminUrl?: string } & Omit<\n        FetchConsumerGroupsParams,\n        \"getConsumerGroups\"\n      >\n    ) =>\n      [\n        {\n          ...kafkaQueries.instance._root(params),\n          subentity: \"consumer-groups\",\n        },\n        params,\n      ] as const,\n    metrics: {\n      _root: ({ id }: { id: string }) =>\n        ({\n          ...kafkaQueries.instance._root({ id }),\n          subentity: \"metrics\",\n          id,\n        } as const),\n      kpi: (params: { id: string }) =>\n        [{ ...kafkaQueries.instance._root(params), type: \"kpi\" }] as const,\n      instance: ({\n        id,\n        ...params\n      }: Omit<FetchKafkaMetricsProps, \"getMetricsByRangeQuery\">) =>\n        [\n          {\n            ...kafkaQueries.instance._root({ id }),\n            type: \"instance\",\n          },\n          params,\n        ] as const,\n      topic: ({\n        id,\n        ...params\n      }: Omit<FetchTopicsMetricsProps, \"getMetricsByRangeQuery\">) =>\n        [\n          {\n            ...kafkaQueries.instance._root({ id }),\n            type: \"topic\",\n          },\n          params,\n        ] as const,\n    },\n  },\n} as const;\n\nexport const providerQueries = {\n  _root: () => ({ scope: \"providers\" }),\n  list: (params: { plan?: string }) =>\n    [{ ...providerQueries._root(), entity: \"list\", ...params }] as const,\n  limits: {\n    _root: ({ provider }: { provider?: string }) =>\n      ({\n        ...providerQueries._root(),\n        entity: \"limits\",\n        provider,\n      } as const),\n    standard: ({ provider, region }: { provider?: string; region: string }) => [\n      {\n        ...providerQueries.limits._root({ provider }),\n        plan: \"standard\",\n        region,\n      },\n    ],\n    developer: ({\n      provider,\n      region,\n    }: {\n      provider?: string;\n      region: string;\n    }) => [\n      {\n        ...providerQueries.limits._root({ provider }),\n        plan: \"developer\",\n        region,\n      },\n    ],\n  },\n} as const;\n","import { AppServicesApi } from \"@rhoas/account-management-sdk\";\nimport { GroupsApi, RecordsApi, TopicsApi } from \"@rhoas/kafka-instance-sdk\";\nimport { Configuration, DefaultApi } from \"@rhoas/kafka-management-sdk\";\nimport { useCallback } from \"react\";\nimport { useApiConfiguration } from \"./ApiProvider\";\n\nexport const useApi = () => {\n  const { accessToken, basePath } = useApiConfiguration();\n  const kafkasFleet = useCallback(\n    () =>\n      new DefaultApi(\n        new Configuration({\n          accessToken,\n          basePath,\n        })\n      ),\n    [accessToken, basePath]\n  );\n  const account = useCallback(\n    () =>\n      new AppServicesApi(\n        new Configuration({\n          accessToken,\n          basePath,\n        })\n      ),\n    [accessToken, basePath]\n  );\n  const topics = useCallback(\n    (adminUrl: string) =>\n      new TopicsApi(\n        new Configuration({\n          accessToken,\n          basePath: adminUrl,\n        })\n      ),\n    [accessToken]\n  );\n  const consumerGroups = useCallback(\n    (adminUrl: string) =>\n      new GroupsApi(\n        new Configuration({\n          accessToken,\n          basePath: adminUrl,\n        })\n      ),\n    [accessToken]\n  );\n  const records = useCallback(\n    (adminUrl: string) =>\n      new RecordsApi(\n        new Configuration({\n          accessToken,\n          basePath: adminUrl,\n        })\n      ),\n    [accessToken]\n  );\n  return {\n    kafkasFleet,\n    account,\n    topics,\n    consumerGroups,\n    records,\n  };\n};\n","import type { KafkaRequest } from \"@rhoas/kafka-management-sdk\";\nimport type {\n  CloudProvider,\n  Kafka,\n  MarketPlaceSubscriptions,\n  Plan,\n  Status,\n} from \"ui-models/src/models/kafka\";\nimport type { DateIsoString } from \"../../../ui-models/src/types\";\n\nimport type { SizeWithLimits } from \"../fetchers\";\n\nexport type KafkaInstanceEnhanced = Required<Kafka> & {\n  request: KafkaRequest;\n};\n\nexport function kafkaRequestToKafkaInstanceEnhanched(\n  instance: KafkaRequest,\n  marketplaceSubscriptions: MarketPlaceSubscriptions[],\n  developerPlanInstanceLimits: SizeWithLimits[],\n  standardPlanInstanceLimits: SizeWithLimits[]\n): KafkaInstanceEnhanced {\n  const enhancedInstance: KafkaInstanceEnhanced = {\n    billing: undefined,\n    connectionRate: 0,\n    connections: 0,\n    createdAt: (instance.created_at ||\n      new Date().toISOString()) as DateIsoString,\n    egress: 0,\n    expiryDate: instance.expires_at as DateIsoString | undefined,\n    id: instance.id,\n    ingress: 0,\n    maxPartitions: 0,\n    messageSize: { type: \"bytes\", value: BigInt(0) },\n    name: instance.name || \"\",\n    owner: instance.owner || \"\",\n    plan: instance.billing_model as Plan,\n    provider: instance.cloud_provider as CloudProvider,\n    region: instance.region || \"\",\n    size: \"1\",\n    status: apiStatusToUIStatus(instance.status || \"\"),\n    storage: { type: \"bytes\", value: BigInt(0) },\n    updatedAt: (instance.updated_at ||\n      new Date().toISOString()) as DateIsoString,\n    request: instance,\n    version: instance.version || \"\",\n    bootstrapUrl: instance.bootstrap_server_host,\n    adminUrl: instance.admin_api_server_url,\n  };\n\n  // update the billing info\n  try {\n    const marketplaceForBilling = marketplaceSubscriptions.find((ms) =>\n      ms.subscriptions.find((s) => s === instance.billing_cloud_account_id)\n    )?.marketplace;\n\n    const billing: KafkaInstanceEnhanced[\"billing\"] =\n      instance.billing_model === \"standard\"\n        ? \"prepaid\"\n        : marketplaceForBilling && instance.billing_cloud_account_id\n        ? {\n            marketplace: marketplaceForBilling,\n            subscription: instance.billing_cloud_account_id,\n          }\n        : undefined;\n    enhancedInstance.billing = billing;\n  } catch (e) {\n    console.warn(\n      \"kafkaRequestToKafkaInstance\",\n      `couldn't retrieve the billing info for`,\n      instance\n    );\n  }\n\n  // update the limits\n  try {\n    const limits =\n      instance.instance_type === \"developer\"\n        ? developerPlanInstanceLimits\n        : standardPlanInstanceLimits;\n    const thisInstanceLimits = limits.find((l) => l.id === instance.size_id);\n    if (thisInstanceLimits) {\n      enhancedInstance.size = thisInstanceLimits.displayName;\n      enhancedInstance.ingress = thisInstanceLimits.ingress;\n      enhancedInstance.egress = thisInstanceLimits.egress;\n      enhancedInstance.storage = {\n        type: \"bytes\",\n        value: BigInt(instance.max_data_retention_size?.bytes || 0),\n      };\n      enhancedInstance.connections = thisInstanceLimits.connections;\n      enhancedInstance.connectionRate = thisInstanceLimits.connectionRate;\n      enhancedInstance.maxPartitions = thisInstanceLimits.maxPartitions;\n      enhancedInstance.messageSize = {\n        type: \"bytes\",\n        value: BigInt(thisInstanceLimits.messageSize),\n      };\n    }\n  } catch (e) {\n    console.warn(\n      \"kafkaRequestToKafkaInstance\",\n      `couldn't retrieve the limits info for`,\n      instance\n    );\n  }\n\n  return enhancedInstance;\n}\n\nfunction apiStatusToUIStatus(status: string): Status {\n  const mapping: { [key: string]: Status } = {\n    accepted: \"accepted\",\n    preparing: \"preparing\",\n    provisioning: \"provisioning\",\n    ready: \"ready\",\n    failed: \"degraded\",\n    deprovision: \"deprovision\",\n    deleting: \"deleting\",\n  };\n  return mapping[status] || \"degraded\";\n}\n","import type { KafkaRequest } from \"@rhoas/kafka-management-sdk\";\nimport {\n  useProviderRegionSizesFetchQuery,\n  useProvidersWithRegionsFetchQuery,\n  useStandardQuotaFetchQuery,\n} from \"../fetchQueries\";\nimport { kafkaRequestToKafkaInstanceEnhanched } from \"../transformers/kafkaRequestToKafkaInstanceEnhanched\";\n\nexport function useKafkaInstanceTransformer() {\n  const getStandardQuotaQuery = useStandardQuotaFetchQuery();\n  const getProvidersInfo = useProvidersWithRegionsFetchQuery();\n  const getProviderRegionsSizes = useProviderRegionSizesFetchQuery();\n\n  return async function kafkaInstanceTransformer(instance: KafkaRequest) {\n    const standardQuota = await getStandardQuotaQuery();\n\n    const providersInfo = await getProvidersInfo(\n      instance.billing_model !== \"standard\" ? \"developer\" : \"standard\"\n    );\n    const providerInfo = providersInfo.providers.find(\n      (p) => p.id === instance.cloud_provider\n    );\n    if (!providerInfo) {\n      return Promise.reject(\"Invalid cloud provider\");\n    }\n    const standardPlanLimitsQuery = getProviderRegionsSizes(\n      providerInfo,\n      instance.region!,\n      \"standard\"\n    );\n    const developerPlanLimitsQuery = getProviderRegionsSizes(\n      providerInfo,\n      instance.region!,\n      \"developer\"\n    );\n    const [standardPlanLimits, developerPlanLimits] = await Promise.all([\n      standardPlanLimitsQuery,\n      developerPlanLimitsQuery,\n    ]);\n    return kafkaRequestToKafkaInstanceEnhanched(\n      instance,\n      standardQuota.marketplaceSubscriptions,\n      developerPlanLimits,\n      standardPlanLimits\n    );\n  };\n}\n","import { useQuery } from \"@tanstack/react-query\";\nimport { useApiConfiguration } from \"../ApiProvider\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\nimport { useKafkaInstanceTransformer } from \"./useKafkaInstanceTransformer\";\n\nexport function useKafka(id: string | undefined) {\n  const { refetchInterval } = useApiConfiguration();\n  const dataMapper = useKafkaInstanceTransformer();\n  const { kafkasFleet } = useApi();\n  const api = kafkasFleet();\n\n  return useQuery({\n    enabled: Boolean(id),\n    queryKey: kafkaQueries.instance.details({ id }),\n    queryFn: async () => {\n      if (!id) {\n        return Promise.reject(\"Invalid Kafka instance id\");\n      }\n      const instance = await api.getKafkaById(id);\n      return dataMapper(instance.data);\n    },\n    refetchInterval,\n  });\n}\n","import type { KafkaRequestPayload } from \"@rhoas/kafka-management-sdk\";\nimport { APIErrorCodes, isServiceApiError } from \"@rhoas/kafka-management-sdk\";\nimport type { CreateKafkaInstanceServices } from \"ui\";\nimport { useApi } from \"../useApi\";\n\nconst ErrorCodes = {\n  /** Forbidden to perform this action*/\n  UNAUTHORIZED_USER: APIErrorCodes.ERROR_4,\n  /** Kafka cluster name is already used*/\n  DUPLICATE_INSTANCE_NAME: APIErrorCodes.ERROR_36,\n  /** The maximum number of allowed kafka instances has been reached*/\n  INTERNAL_CAPACITY_ERROR: APIErrorCodes.ERROR_24,\n  /** Insufficient quota*/\n  INSUFFICIENT_QUOTA: APIErrorCodes.ERROR_120,\n  /** Forbidden to create more instances than the maximum allowed*/\n  TRIAL_USED: APIErrorCodes.ERROR_5,\n  /** Failed to check quota*/\n  FAILED_TO_CHECK_QUOTA: APIErrorCodes.ERROR_121,\n  /** Bad request*/\n  OWNER_DOES_NOT_EXIST: APIErrorCodes.ERROR_21,\n};\n\n/**\n * Create Kafka instance hook that creates kafka instance\n * @param currentAMSPlan\n * @returns\n */\nexport const useCreateInstance =\n  (): CreateKafkaInstanceServices[\"onCreate\"] => {\n    const { kafkasFleet } = useApi();\n\n    return async (data, onSuccess, onError) => {\n      const apisService = kafkasFleet();\n\n      try {\n        const kafkaRequest = {} as KafkaRequestPayload;\n        kafkaRequest.name = data.name;\n        kafkaRequest.cloud_provider = data.provider;\n        kafkaRequest.region = data.region;\n        kafkaRequest.plan = data.plan + \".\" + data.sizeId;\n        kafkaRequest.billing_model =\n          data.billing === \"prepaid\"\n            ? \"standard\"\n            : data.billing !== undefined\n            ? \"marketplace\"\n            : null;\n        kafkaRequest.billing_cloud_account_id =\n          data.billing && data.billing !== \"prepaid\"\n            ? data.billing.subscription\n            : null;\n        await apisService.createKafka(true, kafkaRequest);\n        onSuccess();\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const { code } = error?.response?.data || {};\n\n          switch (data.plan) {\n            case \"developer\":\n              switch (code) {\n                case ErrorCodes.DUPLICATE_INSTANCE_NAME:\n                  onError(\"name-taken\");\n                  break;\n\n                // regardless of the error, let's not give too many details to trial users\n                default:\n                  onError(\"developer-unavailable\");\n                  break;\n              }\n              break;\n\n            case \"standard\":\n              switch (code) {\n                case ErrorCodes.DUPLICATE_INSTANCE_NAME:\n                  onError(\"name-taken\");\n                  break;\n\n                case ErrorCodes.INTERNAL_CAPACITY_ERROR:\n                  onError(\"region-unavailable\");\n                  break;\n\n                case ErrorCodes.INSUFFICIENT_QUOTA:\n                  onError(\"insufficient-quota\");\n                  break;\n\n                default:\n                  console.error(\n                    \"useAvailableProvidersAndDefault\",\n                    \"createKafka unknown error\",\n                    error\n                  );\n                  onError(\"unknown\");\n              }\n              break;\n          }\n        } else {\n          console.error(\n            \"useAvailableProvidersAndDefault\",\n            \"createKafka unexpected error\",\n            error\n          );\n        }\n      }\n    };\n  };\n","import { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useApiConfiguration } from \"../ApiProvider\";\nimport type { FetchKafkasParams } from \"../fetchers\";\nimport { fetchKafkas } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\nimport { useKafkaInstanceTransformer } from \"./useKafkaInstanceTransformer\";\n\nexport function useKafkas(\n  params: Omit<FetchKafkasParams, \"dataMapper\" | \"getKafkas\">\n) {\n  const { refetchInterval } = useApiConfiguration();\n  const queryClient = useQueryClient();\n  const dataMapper = useKafkaInstanceTransformer();\n  const { kafkasFleet } = useApi();\n  const api = kafkasFleet();\n\n  return useQuery({\n    queryKey: kafkaQueries.list(params),\n    queryFn: async () => {\n      const res = await fetchKafkas({\n        getKafkas: (...args) => api.getKafkas(...args),\n        dataMapper,\n        ...params,\n      });\n      res.instances.forEach((i) =>\n        queryClient.setQueryData(kafkaQueries.instance.details({ id: i.id }), i)\n      );\n      return res;\n    },\n    refetchInterval,\n  });\n}\n","import { useQuery } from \"@tanstack/react-query\";\nimport { useApiConfiguration } from \"../ApiProvider\";\nimport type { FetchTopicParams } from \"../fetchers\";\nimport { fetchTopic } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useTopic(\n  params: { id?: string; adminUrl?: string } & Omit<\n    FetchTopicParams,\n    \"getTopic\"\n  >\n) {\n  const { refetchInterval } = useApiConfiguration();\n  const { topics } = useApi();\n\n  return useQuery({\n    queryKey: kafkaQueries.instance.topic(params),\n    queryFn: () => {\n      if (!params.id) {\n        return Promise.reject(\"Invalid id\");\n      }\n      if (!params.adminUrl) {\n        return Promise.reject(\"Invalid adminUrl\");\n      }\n      const api = topics(params.adminUrl);\n\n      return fetchTopic({\n        getTopic: (...args) => api.getTopic(...args),\n        ...params,\n      });\n    },\n    enabled:\n      Boolean(params.adminUrl) &&\n      Boolean(params.id) &&\n      Boolean(params.topicName),\n    refetchInterval,\n  });\n}\n","import type { TopicsApi } from \"@rhoas/kafka-instance-sdk\";\nimport type { Plan } from \"ui-models/src/models/kafka\";\nimport type { Topic } from \"ui-models/src/models/topic\";\nimport { topicTransformerFactory } from \"../transformers/topicTransformer\";\n\nexport type FetchTopicParams = {\n  getTopic: TopicsApi[\"getTopic\"];\n  topicName: string;\n  plan: Plan;\n};\n\nexport async function fetchTopic({\n  getTopic,\n  topicName,\n  plan,\n}: FetchTopicParams): Promise<Topic> {\n  const response = await getTopic(topicName);\n  return topicTransformerFactory(plan)(response.data);\n}\n","import { useQuery } from \"@tanstack/react-query\";\nimport { useApiConfiguration } from \"../ApiProvider\";\nimport type { FetchTopicsParams } from \"../fetchers\";\nimport { fetchTopics } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useTopics(\n  params: { id?: string; adminUrl?: string } & Omit<\n    FetchTopicsParams,\n    \"getTopics\"\n  >\n) {\n  const { refetchInterval } = useApiConfiguration();\n  const { topics } = useApi();\n\n  return useQuery({\n    queryKey: kafkaQueries.instance.topics(params),\n    queryFn: () => {\n      if (!params.id) {\n        return Promise.reject(\"Invalid id\");\n      }\n      if (!params.adminUrl) {\n        return Promise.reject(\"Invalid adminUrl\");\n      }\n      const api = topics(params.adminUrl);\n\n      return fetchTopics({\n        getTopics: (...args) => api.getTopics(...args),\n        ...params,\n      });\n    },\n    enabled: Boolean(params.adminUrl) && Boolean(params.id),\n    refetchInterval,\n  });\n}\n","import { useQuery } from \"@tanstack/react-query\";\nimport { useApiConfiguration } from \"../ApiProvider\";\nimport type { FetchConsumerGroupsParams } from \"../fetchers\";\nimport { fetchConsumerGroups } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useConsumerGroups(\n  params: { id?: string; adminUrl?: string } & Omit<\n    FetchConsumerGroupsParams,\n    \"getConsumerGroups\"\n  >\n) {\n  const { refetchInterval } = useApiConfiguration();\n  const { consumerGroups } = useApi();\n\n  return useQuery({\n    queryKey: kafkaQueries.instance.consumerGroups(params),\n    queryFn: () => {\n      if (!params.id) {\n        return Promise.reject(\"Invalid id\");\n      }\n      if (!params.adminUrl) {\n        return Promise.reject(\"Invalid adminUrl\");\n      }\n      const api = consumerGroups(params.adminUrl);\n\n      return fetchConsumerGroups({\n        getConsumerGroups: (...args) => api.getConsumerGroups(...args),\n        ...params,\n      });\n    },\n    enabled: Boolean(params.adminUrl) && Boolean(params.id),\n    refetchInterval,\n  });\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport { fetchKafkas } from \"../fetchers\";\nimport { useKafkaInstanceTransformer } from \"../queries\";\nimport { kafkaQueries, masQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport const useDeveloperInstanceAvailabilityFetchQuery = () => {\n  const queryClient = useQueryClient();\n  const { kafkasFleet } = useApi();\n  const dataMapper = useKafkaInstanceTransformer();\n\n  return (getUsername: () => Promise<string>) => {\n    const api = kafkasFleet();\n    return queryClient.fetchQuery({\n      queryKey: masQueries.quota.developerAvailability(),\n      queryFn: async () => {\n        const username = await getUsername();\n        if (!username) {\n          return Promise.reject(new Error(\"Invalid username\"));\n        }\n\n        const { instances } = await queryClient.fetchQuery({\n          queryKey: kafkaQueries.list({\n            direction: \"desc\",\n            sort: \"createdAt\",\n            name: [],\n            status: [],\n            owner: [username],\n            perPage: 1000,\n            page: 1,\n          }),\n          queryFn: () =>\n            fetchKafkas({\n              getKafkas: (...args) => api.getKafkas(...args),\n              dataMapper,\n              direction: \"desc\",\n              sort: \"createdAt\",\n              name: [],\n              status: [],\n              owner: [username],\n              perPage: 1000,\n              page: 1,\n            }),\n          staleTime: Infinity,\n        });\n\n        return instances.some((k) => k?.plan !== \"standard\") !== true;\n      },\n    });\n  };\n};\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport { useKafkaInstanceTransformer } from \"../queries\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useKafkaFetchQuery() {\n  const queryClient = useQueryClient();\n  const dataMapper = useKafkaInstanceTransformer();\n  const { kafkasFleet } = useApi();\n  return async (id: string) => {\n    const api = kafkasFleet();\n    return queryClient.fetchQuery({\n      queryKey: kafkaQueries.instance.details({ id }),\n      queryFn: async () => {\n        const instance = await api.getKafkaById(id);\n        return dataMapper(instance.data);\n      },\n    });\n  };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport { fetchKafkaKpis } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useKafkaKpisFetchQuery() {\n  const { kafkasFleet } = useApi();\n  const queryClient = useQueryClient();\n\n  return (id: string) => {\n    const api = kafkasFleet();\n\n    return queryClient.fetchQuery({\n      queryKey: kafkaQueries.instance.metrics.kpi({ id }),\n      queryFn: async () => {\n        return fetchKafkaKpis(\n          (...args) => api.getMetricsByInstantQuery(...args),\n          id\n        );\n      },\n    });\n  };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport type { FetchKafkaMetricsProps } from \"../fetchers\";\nimport { fetchKafkaMetrics } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useKafkaMetricsFetchQuery() {\n  const { kafkasFleet } = useApi();\n  const queryClient = useQueryClient();\n\n  return (params: Omit<FetchKafkaMetricsProps, \"getMetricsByRangeQuery\">) => {\n    const api = kafkasFleet();\n\n    return queryClient.fetchQuery({\n      queryKey: kafkaQueries.instance.metrics.instance(params),\n      queryFn: async () => {\n        return fetchKafkaMetrics({\n          getMetricsByRangeQuery: (...args) =>\n            api.getMetricsByRangeQuery(...args),\n          ...params,\n        });\n      },\n    });\n  };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport type { FetchTopicsMetricsProps } from \"../fetchers\";\nimport { fetchTopicsMetrics } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useTopicsMetricsFetchQuery() {\n  const { kafkasFleet } = useApi();\n  const queryClient = useQueryClient();\n\n  return (params: Omit<FetchTopicsMetricsProps, \"getMetricsByRangeQuery\">) => {\n    const api = kafkasFleet();\n\n    return queryClient.fetchQuery({\n      queryKey: kafkaQueries.instance.metrics.topic(params),\n      queryFn: async () => {\n        return fetchTopicsMetrics({\n          getMetricsByRangeQuery: (...args) =>\n            api.getMetricsByRangeQuery(...args),\n          ...params,\n        });\n      },\n    });\n  };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport type { FetchTopicsParams } from \"../fetchers\";\nimport { fetchTopics } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useTopicsFetchQuery() {\n  const { topics } = useApi();\n  const queryClient = useQueryClient();\n\n  return (\n    params: Omit<FetchTopicsParams, \"getTopics\"> & {\n      id: string;\n      adminUrl: string;\n    }\n  ) => {\n    const api = topics(params.adminUrl);\n\n    return queryClient.fetchQuery({\n      queryKey: kafkaQueries.instance.topics(params),\n      queryFn: async () => {\n        return fetchTopics({\n          getTopics: (...args) => api.getTopics(...args),\n          ...params,\n        });\n      },\n    });\n  };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport type { FetchMessagesParams } from \"../fetchers\";\nimport { fetchMessages } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useMessagesFetchQuery() {\n  const { records } = useApi();\n  const queryClient = useQueryClient();\n\n  return (\n    params: { id: string; adminUrl: string } & Omit<\n      FetchMessagesParams,\n      \"consumeRecords\"\n    >\n  ) => {\n    const api = records(params.adminUrl);\n\n    return queryClient.fetchQuery({\n      queryKey: kafkaQueries.instance.topicMessages(params),\n      queryFn: () => {\n        if (!params.id) {\n          return Promise.reject(\"Invalid id\");\n        }\n        if (!params.adminUrl) {\n          return Promise.reject(\"Invalid adminUrl\");\n        }\n\n        return fetchMessages({\n          consumeRecords: (...args) => api.consumeRecords(...args),\n          ...params,\n        });\n      },\n    });\n  };\n}\n","import type { Record, RecordsApi } from \"@rhoas/kafka-instance-sdk\";\nimport type { Message } from \"ui-models/src/models/message\";\nimport type { DateIsoString } from \"../../../ui-models/src/types\";\n\nexport type FetchMessagesParams = {\n  consumeRecords: RecordsApi[\"consumeRecords\"];\n  topicName: string;\n  partition?: number;\n  offset?: number;\n  timestamp?: DateIsoString;\n  limit: number;\n};\n\nexport async function fetchMessages({\n  topicName,\n  consumeRecords,\n  partition,\n  offset,\n  timestamp,\n  limit,\n}: FetchMessagesParams): Promise<Message[]> {\n  const response = await consumeRecords(\n    topicName,\n    undefined,\n    limit,\n    undefined,\n    offset,\n    partition,\n    timestamp\n  );\n  return response.data.items.map((m: Record) => ({\n    partition: m.partition,\n    offset: m.offset,\n    timestamp: m.timestamp as DateIsoString,\n    key: m.key,\n    value: m.value,\n    headers: m.headers || {},\n  }));\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport type { Plan } from \"ui-models/src/models/kafka\";\nimport type { CloudProviderInfoWithRegionsCapacity } from \"../fetchers\";\nimport { fetchProviderRegionSizes } from \"../fetchers\";\nimport { providerQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useProviderRegionSizesFetchQuery() {\n  const queryClient = useQueryClient();\n  const { kafkasFleet } = useApi();\n\n  return (\n    provider: CloudProviderInfoWithRegionsCapacity,\n    region: string,\n    plan: Plan\n  ) => {\n    const kms = kafkasFleet();\n    return queryClient.fetchQuery({\n      queryKey: providerQueries.limits[\n        plan === \"standard\" ? \"standard\" : \"developer\"\n      ]({ provider: provider.id, region }),\n      queryFn: () =>\n        fetchProviderRegionSizes(\n          (...args) => kms.getInstanceTypesByCloudProviderAndRegion(...args),\n          provider,\n          region,\n          plan\n        ),\n      staleTime: Infinity,\n    });\n  };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport type { Plan } from \"ui-models/src/models/kafka\";\nimport { fetchProvidersWithRegions } from \"../fetchers\";\nimport { providerQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useProvidersWithRegionsFetchQuery() {\n  const queryClient = useQueryClient();\n  const { kafkasFleet } = useApi();\n\n  return (plan: Plan) => {\n    const kms = kafkasFleet();\n    return queryClient.fetchQuery({\n      queryKey: providerQueries.list({ plan }),\n      queryFn: () =>\n        fetchProvidersWithRegions(\n          (...args) => kms.getCloudProviders(...args),\n          (...args) => kms.getCloudProviderRegions(...args),\n          plan\n        ),\n      staleTime: Infinity,\n    });\n  };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport { fetchOrganization, fetchStandardQuota } from \"../fetchers\";\nimport { masQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useStandardQuotaFetchQuery(skipCache = false) {\n  const queryClient = useQueryClient();\n  const { account } = useApi();\n  const ams = account();\n\n  return async () => {\n    const organization = await queryClient.fetchQuery({\n      queryKey: masQueries.organization(),\n      queryFn: () =>\n        fetchOrganization((...args) =>\n          ams.apiAccountsMgmtV1CurrentAccountGet(...args)\n        ),\n      staleTime: Infinity,\n    });\n    if (!organization) {\n      return Promise.reject(\"Missing organization id\");\n    }\n    return queryClient.fetchQuery({\n      queryKey: masQueries.quota.available({ organization }),\n      queryFn: () =>\n        fetchStandardQuota(\n          (...args) =>\n            ams.apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(...args),\n          organization\n        ),\n      staleTime: skipCache ? undefined : Infinity,\n    });\n  };\n}\n","import type { AppServicesApi } from \"@rhoas/account-management-sdk\";\n\nexport async function fetchOrganization(\n  api: AppServicesApi[\"apiAccountsMgmtV1CurrentAccountGet\"]\n) {\n  const account = await api();\n  const orgId = account?.data?.organization?.id;\n  return orgId;\n}\n","import type { AppServicesApi } from \"@rhoas/account-management-sdk\";\nimport type {\n  MarketPlace,\n  MarketPlaceSubscriptions,\n} from \"@rhoas/app-services-ui-components\";\nimport {\n  developerId,\n  isMarketplaceQuota,\n  isStandardQuota,\n  resourceName,\n  standardId,\n} from \"../utilsAndConstants\";\n\nexport type StandardQuota = {\n  hasTrialQuota: boolean;\n  remainingPrepaidQuota: number | undefined;\n  remainingMarketplaceQuota: number | undefined;\n  marketplaceSubscriptions: MarketPlaceSubscriptions[];\n};\nexport const fetchStandardQuota = async (\n  api: AppServicesApi[\"apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet\"],\n  organizationId: string\n) => {\n  const quotaResponse = await api(\n    organizationId,\n    undefined,\n    true,\n    undefined,\n    true\n  );\n  if (quotaResponse.status !== 200) {\n    throw new Error(quotaResponse.statusText);\n  }\n  const standardQuotas = quotaResponse.data.items?.filter((q) =>\n    q.related_resources?.find(\n      (r) => r.resource_name === resourceName && r.product === standardId\n    )\n  );\n\n  const prepaidQuota = standardQuotas?.find(isStandardQuota);\n\n  const marketplaceQuotas = standardQuotas?.some(isMarketplaceQuota)\n    ? standardQuotas?.filter(isMarketplaceQuota)\n    : undefined;\n\n  const hasTrialQuota =\n    (prepaidQuota === undefined &&\n      marketplaceQuotas === undefined &&\n      quotaResponse.data.items?.some((q) =>\n        q.related_resources?.find(\n          (r) => r.resource_name === resourceName && r.product === developerId\n        )\n      )) ||\n    false;\n\n  const remainingPrepaidQuota = prepaidQuota\n    ? prepaidQuota.allowed - prepaidQuota.consumed\n    : undefined;\n  const remainingMarketplaceQuota = marketplaceQuotas\n    ? marketplaceQuotas.reduce((agg, q) => q.allowed - q.consumed + agg, 0)\n    : undefined;\n  const unaggregatedSubscriptions = marketplaceQuotas\n    ?.filter((q) => q.cloud_accounts !== undefined)\n    .flatMap((q) => q.cloud_accounts!);\n  const subscriptionMarketplaces = Array.from(\n    new Set(\n      unaggregatedSubscriptions?.map((s) => s.cloud_provider_id as MarketPlace)\n    )\n  );\n  const marketplaceSubscriptions: MarketPlaceSubscriptions[] =\n    unaggregatedSubscriptions\n      ? subscriptionMarketplaces.map((marketplace) => ({\n          marketplace,\n          subscriptions: unaggregatedSubscriptions\n            .filter((s) => s.cloud_provider_id === marketplace)\n            .map((s) => s.cloud_account_id!),\n        }))\n      : [];\n\n  return {\n    hasTrialQuota,\n    remainingPrepaidQuota,\n    remainingMarketplaceQuota,\n    marketplaceSubscriptions,\n  };\n};\n","import type { KafkaRequestPayload } from \"@rhoas/kafka-management-sdk\";\nimport { APIErrorCodes, isServiceApiError } from \"@rhoas/kafka-management-sdk\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport type { CreateKafkaFormData, CreateKafkaInstanceError } from \"ui\";\nimport { kafkaQueries, masQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useCreateKafkaMutation() {\n  const { kafkasFleet } = useApi();\n  const queryClient = useQueryClient();\n\n  return useMutation(\n    async function kafkaCreateInstance(props: {\n      instance: CreateKafkaFormData;\n      onSuccess: () => void;\n      onError: (error: CreateKafkaInstanceError) => void;\n    }) {\n      const { instance, onSuccess, onError } = props;\n      const api = kafkasFleet();\n      const kafkaRequest: KafkaRequestPayload = {\n        name: instance.name,\n        cloud_provider: instance.provider,\n        region: instance.region,\n      };\n      kafkaRequest.plan = instance.plan + \".\" + instance.sizeId;\n      kafkaRequest.billing_model =\n        instance.billing === \"prepaid\"\n          ? \"standard\"\n          : instance.billing !== undefined\n          ? \"marketplace\"\n          : null;\n      kafkaRequest.billing_cloud_account_id =\n        instance.billing && instance.billing !== \"prepaid\"\n          ? instance.billing.subscription\n          : null;\n      try {\n        await api.createKafka(true, kafkaRequest);\n        onSuccess();\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const { code } = error?.response?.data || {};\n\n          switch (instance.plan) {\n            case \"developer\":\n              switch (code) {\n                case ErrorCodes.DUPLICATE_INSTANCE_NAME:\n                  onError(\"name-taken\");\n                  break;\n\n                // regardless of the error, let's not give too many details to trial users\n                default:\n                  onError(\"developer-unavailable\");\n                  break;\n              }\n              break;\n\n            case \"standard\":\n              switch (code) {\n                case ErrorCodes.DUPLICATE_INSTANCE_NAME:\n                  onError(\"name-taken\");\n                  break;\n\n                case ErrorCodes.INTERNAL_CAPACITY_ERROR:\n                  onError(\"region-unavailable\");\n                  break;\n\n                case ErrorCodes.INSUFFICIENT_QUOTA:\n                  onError(\"insufficient-quota\");\n                  break;\n\n                default:\n                  console.error(\n                    \"useKafkaCreateInstanceMutation\",\n                    \"createKafka unknown error\",\n                    error\n                  );\n                  onError(\"unknown\");\n              }\n              break;\n          }\n        } else {\n          console.error(\n            \"useKafkaCreateInstanceMutation\",\n            \"createKafka unexpected error\",\n            error\n          );\n          onError(\"unknown\");\n        }\n      }\n    },\n    {\n      onSuccess: () => {\n        void queryClient.invalidateQueries([kafkaQueries._root()]);\n        void queryClient.invalidateQueries([masQueries.quota._root()]);\n      },\n    }\n  );\n}\n\nconst ErrorCodes = {\n  /** Forbidden to perform this action*/\n  UNAUTHORIZED_USER: APIErrorCodes.ERROR_4,\n  /** Kafka cluster name is already used*/\n  DUPLICATE_INSTANCE_NAME: APIErrorCodes.ERROR_36,\n  /** The maximum number of allowed kafka instances has been reached*/\n  INTERNAL_CAPACITY_ERROR: APIErrorCodes.ERROR_24,\n  /** Insufficient quota*/\n  INSUFFICIENT_QUOTA: APIErrorCodes.ERROR_120,\n  /** Forbidden to create more instances than the maximum allowed*/\n  TRIAL_USED: APIErrorCodes.ERROR_5,\n  /** Failed to check quota*/\n  FAILED_TO_CHECK_QUOTA: APIErrorCodes.ERROR_121,\n  /** Bad request*/\n  OWNER_DOES_NOT_EXIST: APIErrorCodes.ERROR_21,\n} as const;\n","import { isServiceApiError } from \"@rhoas/kafka-management-sdk\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { kafkaQueries, masQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useDeleteKafkaMutation() {\n  const { kafkasFleet } = useApi();\n  const queryClient = useQueryClient();\n\n  return useMutation(\n    async function kafkaCreateInstance(props: {\n      id: string;\n      onSuccess: () => void;\n      onError: (code: string, message: string) => void;\n    }) {\n      const { id, onSuccess, onError } = props;\n      const api = kafkasFleet();\n      try {\n        await api.deleteKafkaById(id, true);\n        onSuccess();\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const message = error?.message;\n          const { code } = error?.response?.data || {};\n\n          onError(code || \"?\", message);\n        }\n      }\n    },\n    {\n      onSuccess: () => {\n        void queryClient.invalidateQueries([kafkaQueries._root()]);\n        void queryClient.invalidateQueries([masQueries.quota._root()]);\n      },\n    }\n  );\n}\n","import type { KafkaUpdateRequest } from \"@rhoas/kafka-management-sdk\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useUpdateKafkaMutation() {\n  const { kafkasFleet } = useApi();\n  const queryClient = useQueryClient();\n\n  return useMutation(\n    async function kafkaCreateInstance({\n      id,\n      updates,\n    }: {\n      id: string;\n      updates: KafkaUpdateRequest;\n    }) {\n      const api = kafkasFleet();\n      return api.updateKafkaById(id, updates);\n    },\n    {\n      onSuccess: (_, { id }) => {\n        void queryClient.invalidateQueries([\n          kafkaQueries.instance.details({ id }),\n        ]);\n      },\n    }\n  );\n}\n","import {\n  ConsumerGroupOrderKey,\n  TopicOrderKey,\n} from \"@rhoas/kafka-instance-sdk\";\nimport type { RangeQuery } from \"@rhoas/kafka-management-sdk\";\n\nexport type NoUndefinedField<T> = {\n  [P in keyof T]-?: NoUndefinedField<NonNullable<T[P]>>;\n};\n\nexport type SafeRangeQuery = NoUndefinedField<RangeQuery>;\n\nexport const KafkaInstancesSortableColumns = [\n  \"name\",\n  \"owner\",\n  \"createdAt\",\n  \"provider\",\n  \"region\",\n] as const;\n\nexport type KafkaInstancesSortableColumn =\n  typeof KafkaInstancesSortableColumns[number];\n\nexport const KafkaTopicsSortableColumns = [\n  ...Object.values(TopicOrderKey),\n] as const;\n\nexport type KafkaTopicsSortableColumn =\n  typeof KafkaTopicsSortableColumns[number];\n\nexport const KafkaConsumerGroupSortableColumns = [\n  ...Object.values(ConsumerGroupOrderKey),\n] as const;\n\nexport type KafkaConsumerGroupSortableColumn =\n  typeof KafkaConsumerGroupSortableColumns[number];\n","const REACT_QUERY_DEVTOOLS = \"mas.devtools\";\nconst METRICS_LAG_ALERT = \"mas.rhosak.metrics.lag-alert-closed\";\n\nexport function isReactQueryDevToolsEanbled() {\n  return localStorage.getItem(REACT_QUERY_DEVTOOLS) === \"true\";\n}\n\nexport function metricsIsLagAlertsDismissed() {\n  return localStorage.getItem(METRICS_LAG_ALERT) === \"true\";\n}\n\nexport function metricsDismissLagAlerts() {\n  return localStorage.setItem(METRICS_LAG_ALERT, \"true\");\n}\n","import type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport type { State } from \"ui-models/src/models/consumer-group\";\n\nexport type ConsumerGroupStateLabelProps = {\n  state: State;\n};\n\nexport const ConsumerGroupStateLabel: FunctionComponent<\n  ConsumerGroupStateLabelProps\n> = ({ state }) => {\n  const { t } = useTranslation([\"kafka\"]);\n\n  switch (state) {\n    case \"Stable\":\n      return t(\"consumerGroup.state.stable\");\n    case \"Empty\":\n      return t(\"consumerGroup.state.empty\");\n    case \"Dead\":\n      return t(\"consumerGroup.state.dead\");\n    case \"CompletingRebalance\":\n      return t(\"consumerGroup.state.completing_rebalance\");\n    case \"PreparingRebalance\":\n      return t(\"consumerGroup.state.preparing_rebalance\");\n    case \"Unknown\":\n      return t(\"consumerGroup.state.unknown\");\n    default:\n      return null;\n  }\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from \"@patternfly/react-core\";\nimport { CubesIcon } from \"@patternfly/react-icons\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nexport const ConsumerGroupEmptyState: FunctionComponent = () => {\n  const { t } = useTranslation([\"kafka\"]);\n  return (\n    <EmptyState variant={EmptyStateVariant.large}>\n      <EmptyStateIcon icon={CubesIcon} />\n      <Title headingLevel={\"h1\"} size={TitleSizes.lg}>\n        {t(\"consumerGroup.empty_consumer_title\")}\n      </Title>\n      <EmptyStateBody>{t(\"consumerGroup.empty_consumer_body\")}</EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import { PageSection } from \"@patternfly/react-core\";\nimport { TableVariant } from \"@patternfly/react-table\";\nimport type { TableViewProps } from \"@rhoas/app-services-ui-components\";\nimport {\n  EmptyStateNoResults,\n  TableView,\n} from \"@rhoas/app-services-ui-components\";\nimport { useTranslation } from \"react-i18next\";\nimport type {\n  ConsumerGroup,\n  ConsumerGroupField,\n} from \"ui-models/src/models/consumer-group\";\n\nimport { ConsumerGroupEmptyState, ConsumerGroupStateLabel } from \"./components\";\n\ntype SubUnion<T, U extends T> = U;\n\nconst Columns: SubUnion<\n  ConsumerGroupField,\n  \"groupId\" | \"activeConsumers\" | \"laggingPartitions\" | \"state\"\n>[] = [\"groupId\", \"activeConsumers\", \"laggingPartitions\", \"state\"];\n\nexport type ConsumerGroupsProps<T extends ConsumerGroup> = {\n  consumers: Array<T> | undefined;\n  onDelete: (row: T) => void;\n  onViewPartition: (row: T) => void;\n  onViewResetOffset: (row: T) => void;\n  consumerName: string[];\n  onSearchConsumer: (value: string) => void;\n  onRemoveConsumerChip: (value: string) => void;\n  onRemoveConsumerChips: () => void;\n} & Pick<\n  TableViewProps<T, typeof Columns[number]>,\n  | \"itemCount\"\n  | \"page\"\n  | \"perPage\"\n  | \"onPageChange\"\n  | \"isRowSelected\"\n  | \"isColumnSortable\"\n  | \"onClearAllFilters\"\n>;\n\nexport const ConsumerGroups = <T extends ConsumerGroup>({\n  consumers,\n  onDelete,\n  onViewPartition,\n  isColumnSortable,\n  itemCount,\n  onViewResetOffset,\n  onClearAllFilters,\n  page,\n  perPage,\n  onPageChange,\n  consumerName,\n  onSearchConsumer,\n  onRemoveConsumerChip,\n  onRemoveConsumerChips,\n}: ConsumerGroupsProps<T>) => {\n  const { t } = useTranslation(\"kafka\");\n\n  const labels: { [field in typeof Columns[number]]: string } = {\n    groupId: t(\"consumerGroup.consumer_group_id\"),\n    activeConsumers: t(\"consumerGroup.active_members\"),\n    laggingPartitions: t(\"consumerGroup.partitions_with_lag\"),\n    state: t(\"consumerGroup.state_header\"),\n  };\n\n  const isFiltered = consumerName.length > 0;\n  return (\n    <PageSection isFilled={true} hasOverflowScroll={true}>\n      <TableView\n        variant={TableVariant.compact}\n        tableOuiaId={\"card-table\"}\n        ariaLabel={t(\"consumerGroup.consumer_group_list\")}\n        data={consumers}\n        columns={Columns}\n        renderHeader={({ column, Th, key }) => (\n          <Th\n            key={key}\n            info={\n              column === \"laggingPartitions\"\n                ? {\n                    popover: (\n                      <div>\n                        {t(\"consumerGroup.partitions_with_lag_description\")}\n                      </div>\n                    ),\n                    ariaLabel: \"partitions with lag\",\n                    popoverProps: {\n                      headerContent: t(\n                        \"consumerGroup.partitions_with_lag_name\"\n                      ),\n                    },\n                  }\n                : undefined\n            }\n          >\n            {labels[column]}\n          </Th>\n        )}\n        renderCell={({ column, row, Td, key }) => {\n          return (\n            <Td key={key} dataLabel={labels[column]}>\n              {(() => {\n                switch (column) {\n                  case \"groupId\":\n                    return row.groupId;\n                  case \"activeConsumers\":\n                    return row.activeConsumers;\n                  case \"laggingPartitions\":\n                    return row.laggingPartitions;\n                  case \"state\":\n                    return <ConsumerGroupStateLabel state={row.state} />;\n                }\n              })()}\n            </Td>\n          );\n        }}\n        renderActions={({ row, ActionsColumn }) => (\n          <ActionsColumn\n            items={[\n              {\n                title: t(\"consumerGroup.view_partitions_offsets\"),\n                onClick: () => onViewPartition(row),\n              },\n              {\n                title: t(\"consumerGroup.reset_offset\"),\n                onClick: () => onViewResetOffset(row),\n              },\n              {\n                title: t(\"common:delete\"),\n                onClick: () => onDelete(row),\n              },\n            ]}\n          />\n        )}\n        isColumnSortable={isColumnSortable}\n        filters={{\n          [labels.groupId]: {\n            type: \"search\",\n            chips: consumerName,\n            onSearch: onSearchConsumer,\n            onRemoveChip: onRemoveConsumerChip,\n            onRemoveGroup: onRemoveConsumerChips,\n            validate: (value: string) => !/[\"$^<>|+%/;:,\\s*=~#()]/.test(value),\n            errorMessage: t(\"input_field_invalid_message\"),\n          },\n        }}\n        itemCount={itemCount}\n        page={page}\n        onPageChange={onPageChange}\n        perPage={perPage}\n        isFiltered={isFiltered}\n        onClearAllFilters={onClearAllFilters}\n        emptyStateNoData={<ConsumerGroupEmptyState />}\n        emptyStateNoResults={<EmptyStateNoResults />}\n      />\n    </PageSection>\n  );\n};\n","import {\n  Level,\n  LevelItem,\n  PageSection,\n  PageSectionVariants,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\n\nexport const ControlPlaneHeader: VoidFunctionComponent = () => {\n  const { t } = useTranslation();\n\n  return (\n    <PageSection\n      variant={PageSectionVariants.light}\n      hasShadowBottom={true}\n      stickyOnBreakpoint={{ default: \"top\" }}\n    >\n      <Level>\n        <LevelItem>\n          <TextContent>\n            <Text component=\"h1\">{t(\"kafka:table.title\")}</Text>\n          </TextContent>\n        </LevelItem>\n      </Level>\n    </PageSection>\n  );\n};\n","import type { CloudProvider, CloudRegion } from \"ui-models/src/models/kafka\";\nimport type { CloudProviderInfo } from \"../types\";\n\nexport function onProviderChange(\n  providers: CloudProviderInfo[],\n  provider: CloudProvider\n): { provider: CloudProvider; region: CloudRegion | undefined } {\n  const selectedProvider = providers.find((p) => p.id === provider);\n  const region =\n    selectedProvider?.defaultRegion ||\n    selectedProvider?.regions.filter((r) => !!r.isDisabled === false)[0]?.id;\n  return { provider, region };\n}\n","import {\n  CloudProvider,\n  CloudRegion,\n  MarketplaceSubscription,\n  Size,\n} from \"ui-models/src/models/kafka\";\nimport { assign, createMachine, send, sendParent } from \"xstate\";\nimport {\n  CreateKafkaFormData,\n  CreateKafkaInstanceError,\n  StandardPlanInitializationData,\n  StandardSizes,\n} from \"../types\";\nimport { onProviderChange } from \"./shared\";\n\nexport type StandardPlanMachineContext = {\n  // initial data coming from the APIs\n  capabilities: StandardPlanInitializationData;\n\n  // what the user is selecting\n  form: {\n    name?: string;\n    provider?: CloudProvider;\n    region?: CloudRegion;\n    size?: Size;\n    billing?: MarketplaceSubscription | \"prepaid\";\n  };\n\n  // based on the form.provider selection\n\n  // based on the form.provider and form.region selection\n  sizes: StandardSizes | undefined;\n\n  creationError: CreateKafkaInstanceError | undefined;\n};\n\nexport const StandardPlanMachine =\n  /** @xstate-layout N4IgpgJg5mDOIC5SwC4EMB2E0CcIAUAbTAWTQGMALASwzADoA3MHagMwE8BBRta4gEb9qKDgGJEoAA4B7WCOoyMkkAA9EAZgAcARnoBOfQAYdOrQHYArABYNAJnMAaEB0Q6j++reuXL5k3bWWpY65gC+Yc6omNh4RKQUNHT05Eps1FAArqwYUPTRKJmwYuQ4YGgoYCqy8iiKykhqmjp29OYW5hpGQYG+zq4Ilvoa9KZGlh4a5joAbPqBEVHoWLgExBhkVLQMqRjpWTl5bDI4ALZMaITUEGLpYIQQAJIYvFcQ1XIKSirqCKGG9Ds+ksU1m5n0M2s1n0-UQdgmllGdjsOj8QJm7ihixA0RWcXWmySOzSGWytCOJ3Or2uYlgmQEpxEH1q9R+bmMnnMnRR9n8di0RjssIQ-MFo2sgQ81lCGjm2NxsTWCS2yV2+zJuXoxzO+TQjHJJTKFTAAGVMuRyHB4I0al8GqBfoEZlp6FpISYdBp7PprFZhaK9JDAuDproQfLlor4htEtsUiSDuStZTdfrcobypUAKI4HAnZl2tkinn0WVTFFQrS+mb+jEzehzMz84btazjCMxVbRwlxtWkw7Js63aj3J4vS7XAt1b6NR0+etaWXzPmQmsuOGmRGWfmWRchbctGYdvFKmMq4l7ftJu4PWD0DBoU4ManYSoSG2faf2poIIL15GmDo+iLkBdhGOYa4DLMUKjKCljOkYbrDFox5RgSsaqgmGpHCOt73o+YAZsaU6srObj2F45gSn4UIaDY7QaMKMouohVgzNuHhgRoOioV26HnvGl6JpqN4QHeD5PmIElgAAwpQmAwCRM4OuRrS+tRVG2PRi5MexrSojM9iIW2VgSrx+LKkSgnqgOol3lIeb6hALAXG8xrvtIn6kSpgxAm00IosiEEzDMTjriKHj1hMEIoqE1iGeYdjmaePaYUJ2FarhYn0A5MhOSwRGVEp36-J6alUfCml0b6Onhci8UGJxnoSuBGj6Ml3YYReNnXll9mOdcBW5flOByQpVQfiyyk-mVlEabR2mMXVUr0EYgo+qGQHtJYHX8VZfbCTho53mUUD1K51zucVRYHl4hg6EEPisdYTHwkYgLDNKRjsSF0I7ZEOKRnxlm9lhtl9fQp31IVE2eVNJWqXNlULTVS1QXR5iAqidgzCYApui0u0g2lPUiRDUNKGIw2DaN8m5LDIC2l+RazepyNaajTFdJ4OM8hBnRejxAMKsDZ77WDvXHZDYBnZTFMYGN9PXWRfwUWzNEcwxTEGaWvgWA9Gg+P41hE2LoPpeDUvyAAXs+E6voRys+b6gbcW7czQu4tUDA44KrZCsogfyXqm6l3VXmTVvULb9CEDIaAQAaEBKAwtCMDIADWDAixZZskxHR14TbDBxwn5IIGnMjkBU9QANpGAAuk7P6gvQNi6HY2gPVCwr2HRbS6PoVG7lYQyh111kF5lUcx6XifpiweY4DlxAoNq5w5ylE8HRldn5NHJfx-PUAVy8Vc10o9dN5NhYq9uLqBMiwEWBKneWL3vKrSEiHDOBILDOPASO9LZFwPjDZujpQq6wAuxYwoEpj+n-qMT0254KG3ig9QB4sLaS1AbbKmA1nK03GhAtwi4sYeisPMQw9hay4wML6RKhhvrgiFksTsucw6T0OtPPBhF5aK0UjfZmKtcYuh9GBQwGIUS1kNgYT6Ewfqd26Fg82pNC7ZWLrSA+giGZM28j+KiLopjbkhPrcCuhaweGgT4Ux-hZj-XYSeTqQCJaRz4WIIQhAri5F0aQ388E26NnYuCZcEEXp1VxpjAmVYqKsOBEeYWQNOHbzcRou8XifF5BfFdYRBjfjbhGFoAUZjZjLj8L3YpmM1pWHCZVGYONVH5x4XvTJSYlCEA4GaAQsBSjUCkF+YosB7hgHICgbpvTWADIMfo6apU1rWDaO6EKa0goNMqfoPQ-gbC4x9MBQUGgmnhxaRDNpmoHJgCkHwCAXAsATL6dMpQQyRljPuVMkRcNb4+UPIiYpQI9y7ngsBYU3hFlrU9GYjwIRwhJI4VvVxOD3HZTOXkC5Vzri3IgG8-pgzaQvJQPgMo6L3h5LmW4IwUxXS7i9L4KwswtAgr7m3FEQxEq6EhEc7hu9Tn8CyQQvKNM-GkoRqres3FURxPsMiIEvdAUD0XIhHG8VEKOMBnClx2D1G8LEmIZOyQCjZ2SfCzVU87L+NmOMNo7hxjlgaYbd+kT+6aWCG-XcSrOXAKTinfI6BKg+vVXtNRBd-H8hxq6aUxtfQmCkf6WU9YWhgUqiETEEQAYYBkM5a0yAjUarjMwVgnAeB8EEMIUQ-iQjhtCm1WUEofTjGFFYAw3oQj2p9NRTleUWAAEVMgyHQP4gUIxOLQh8FoX2DLwoJtLI9cFWg63TESU4tCxNU4YFxJaAAqg+Xg-A0ACEIHoryZKEBcnep0NtwQuTSIdT7ClrpQoonmC0XQa1F1qucYG5I8tYBbr1MWvdB7-FckWdCYpD1+RujHTCOqVZSwB3GMiRcwxZgerSf6wod5MhrvpIyFAlQSWfI+TNRCpY2pVhCI+jmwohg8zilRA2Y7fSocRXkAoRR8g4ZEPh-x84DBmGlPjLko8IkDAXatLoi54Sd3hPBZjWq2NZsZkekVsGvTAR8C0ICVHwoTBdKYUKLbkSsQhHJ01KY0723NeCRZnpNkmFCqEMdsaUSrWYd0LkgcTOwo-SurltkUwvis8BUY4EMQ-3cA9G9cJcYjFCmtYIQRhhzEOd55dedjm7xTLAPU5IQ0oIbBYDw4x5wojCj7Kw+lZScV8PCT0pmWlZb1JAENCUDDhOs8CYI-pwSIgabFHGHtMGpdFlwz1IlKRWf8LBOzYJHNCmWl0Nura51uu+vV7lUtpL0DAKcAZAxCP5MQEw0YhS2xoJqhOqCiUh3OmleMCEKWl0jdSSx7V4kCL0As28c1asKoa2qlrSd4J6zdG+h0MEXoTbDZSQirVe8tuBeFSzKiDYfT0UMqYkETFNkg4Mu0aY4xFxQ6ezDk1JzNsfZyUVJHKtDYjDavMKTc6vSdyYtd-2Y6jNDEMutkB2VpLmpI+rKqi0mK+E8AbX0QJWXGCStD41Qbyd4WpkQi6Dt-HaHrMubiHmTJukghuaEXhdzPo8BCFbvPcHZRVy5L7k4affJsICbQSrDBAiHlFkUXRFluk7nReYY7nQwpJwr5pG3leEJcojg7x6Kv+yCBYEEtWuT+gep4UdpupEW-l7msPfP+oCqIYLl0wuUaA9vdYta8xDJei6EYy3SKToy3OlTw98MixTBdKFAWLQbBlTK+RO9gR+NfW4vFFCOfP0Zfz9LWWGBPvjm+w7maExkG8lCCCQUtimLSkRPSl3zokNDZD7n6fVum9z7V0BxbDnBQNOdEBSEXMh8CahO4MfzoG-pNnzM5TLMhd-Yi6cyTrgR6CygoiJ7BAhQhRf5vb7wxyt4a7tANidD6bDwPrzY+wOYNiBCc4hTNiPbvppajZoZ7zFyfYQCAbL6lQUQgiGygFuztDwjdYQjiZQiigZ5vqbyn5+bn7wEMCJzZb7rNbUGIAdBeC6DcRVheiSGYFwjAh6DAgmCKJWDaA+CwFkEHz0AADufAdQuQAAYicD2n2mgD9q0HQVMLyNMDjAguFDSnoOMF7L-KoQApPr5mNt-uQZ2jgCYf2qIarBYZDgwZ6EwZ7l0HeozoqkEBYhPiflPrwY3vwVfgEZspyPZohuxN6HIQgBJmAdIdtA5tCMHkQc9rDqahDOQYvPmAEbNJYdyFyIeHYQMM2qtG2GVDaozhoZUVoXPLlgERBLFtoPfAKFCEMCJs0MMG0IlNuCGIuJ-u4elokV4QfMXktl6A0TYQlP6D4DZkBH3uBMPKqtwQkZ4XASimrsRLUdoI1J0IZBSn4HAuEZIf5C1O4EMJ3GwqUaToruHsirykmOmiaPivUAAEpgAACOmQ1AZQBGSm7eKs+WEw6+OuVe4RChro1mI6iE0a3RUsFxHSXS9IkyOK9Qd4ducJsyKmKOFiEq0wPQNglSwQowwQ0EYE-GcR3xoeZ+SRBJGAnS2Kjya6KRMeIqkWmMf4-IwOdqD0vcGJ0IkObq7Q4wXBOapxpBPK3i7S-JRJPSDygyA6q+tJfg9JY6jJ9hFUWMkIoQDEDSnJJxHhGp+JAJ5yRK1ymKgpgy22u2ZaARFgIw8IxgGmFKDgoQjKoQq0AQ9qjmwIeJeEFxaK7pdyxJ+pZJHGep7yv+CJ3yfIXgtmfeW0Y6l2iAb+Yq7QAo2y7g8IcZ-xWprplySZWKKZmZTyOUbp9uopRYzCroHgi4i4dKesIKtg6egoxSJSbU0wNZGSLpqK7ZNyyZGZpJTyA6RugZ3Q386+A+v4qIQ6r8hsVZvIU59AKK5qpgbcIZ0wqJUKsqa0bQPo7EFiEoKGixJBr2ZqfpIGgBZe3siAhgxizoY+-Ib+xSX+-i9Cam5GmmPo1UjKe+iGypYEVYJgnK2WzAlJf+Ks-yUUmyJp9Bl5saQwDYJgTCa0Y+boRyIa0S8U56NaQIZ2ORrQwwaR3oNewEz5EQQAA */\n  createMachine(\n    {\n      context: {\n        capabilities: {} as StandardPlanInitializationData,\n        sizes: undefined,\n        form: {},\n        creationError: undefined,\n      },\n      tsTypes: {} as import(\"./StandardPlanMachine.typegen\").Typegen0,\n      schema: {\n        context: {} as StandardPlanMachineContext,\n        events: {} as\n          | { type: \"fieldInvalid\" }\n          | { type: \"nameChange\"; name: string }\n          | { type: \"providerChange\"; provider: CloudProvider }\n          | { type: \"regionChange\"; region: CloudRegion }\n          | { type: \"sizeChange\"; size: Size }\n          | {\n              type: \"selectSubscription\";\n              subscription: MarketplaceSubscription;\n            }\n          | { type: \"selectPrepaid\" }\n          | { type: \"billingChange\" }\n          | { type: \"nameIsValid\" }\n          | { type: \"nameIsInvalid\" }\n          | { type: \"nameIsTaken\" }\n          | { type: \"submit\" }\n          | { type: \"create\" }\n          | { type: \"createSuccess\" }\n          | { type: \"createError\"; error: CreateKafkaInstanceError },\n        services: {} as {\n          getSizes: {\n            data: StandardSizes;\n          };\n        },\n      },\n      initial: \"verifyAvailability\",\n      id: \"standardPlanMachine\",\n      states: {\n        verifyAvailability: {\n          entry: \"setInitialContext\",\n          always: [\n            {\n              cond: \"isOverQuota\",\n              target: \"overQuota\",\n            },\n            {\n              cond: \"isInstanceUnavailable\",\n              target: \"instanceUnavailable\",\n            },\n            {\n              cond: \"isRegionsUnavailable\",\n              target: \"regionsUnavailable\",\n            },\n            {\n              target: \"configuring\",\n            },\n          ],\n        },\n        overQuota: {\n          tags: \"blocked\",\n        },\n        instanceUnavailable: {\n          tags: \"blocked\",\n        },\n        regionsUnavailable: {\n          tags: \"blocked\",\n        },\n        configuring: {\n          type: \"parallel\",\n          states: {\n            status: {\n              initial: \"unsubmitted\",\n              states: {\n                unsubmitted: {\n                  tags: \"unsubmitted\",\n                },\n                submitted: {\n                  entry: \"triggerSubmit\",\n                  tags: \"submitted\",\n                },\n              },\n              on: {\n                create: {\n                  description:\n                    \"Save is enabled all the time, if it's clicked before the form is completely filled out we should show the validation for all errored fields\",\n                  target: \".submitted\",\n                },\n              },\n            },\n            form: {\n              initial: \"invalid\",\n              states: {\n                invalid: {\n                  tags: \"formInvalid\",\n                },\n                valid: {\n                  entry: \"resetCreationErrorMessage\",\n                  tags: \"creatable\",\n                  on: {\n                    fieldInvalid: {\n                      target: \"invalid\",\n                    },\n                    submit: {\n                      target: \"saving\",\n                    },\n                  },\n                },\n                saving: {\n                  entry: [\"resetCreationErrorMessage\", \"triggerSave\"],\n                  tags: \"formSaving\",\n                  on: {\n                    createSuccess: {\n                      target: \"saved\",\n                    },\n                    createError: {\n                      actions: \"setCreationError\",\n                      target: \"invalid\",\n                    },\n                  },\n                },\n                saved: {\n                  type: \"final\",\n                },\n              },\n              on: {\n                fieldInvalid: {\n                  description:\n                    \"sent by the fields when their value change to an invalid value. This will transition the form to the invalid state, to then eventually transition to the valid state if the field state is marked as done (which means that all fields have a valid value selected)\",\n                  target: \".invalid\",\n                },\n              },\n            },\n            fields: {\n              tags: \"configurable\",\n              type: \"parallel\",\n              states: {\n                name: {\n                  initial: \"validate\",\n                  states: {\n                    empty: {\n                      tags: \"nameEmpty\",\n                    },\n                    invalid: {\n                      entry: \"fieldInvalid\",\n                      tags: \"nameInvalid\",\n                    },\n                    valid: {\n                      tags: \"nameValid\",\n                      type: \"final\",\n                    },\n                    validate: {\n                      always: [\n                        {\n                          cond: \"nameIsEmpty\",\n                          target: \"empty\",\n                        },\n                        {\n                          cond: \"nameIsValid\",\n                          target: \"valid\",\n                        },\n                        {\n                          target: \"invalid\",\n                        },\n                      ],\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    nameChange: {\n                      actions: \"setName\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n                provider: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"providerIsValid\",\n                          target: \"valid\",\n                        },\n                        {\n                          target: \"invalid\",\n                        },\n                      ],\n                    },\n                    invalid: {\n                      entry: \"fieldInvalid\",\n                      tags: \"providerInvalid\",\n                    },\n                    valid: {\n                      tags: \"providerValid\",\n                      type: \"final\",\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    providerChange: {\n                      actions: \"setProvider\",\n                      cond: \"didProviderChange\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n                region: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"regionIsValid\",\n                          target: \"valid\",\n                        },\n                        {\n                          target: \"invalid\",\n                        },\n                      ],\n                    },\n                    invalid: {\n                      entry: \"fieldInvalid\",\n                      tags: \"regionInvalid\",\n                    },\n                    valid: {\n                      tags: \"regionValid\",\n                      type: \"final\",\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    providerChange: {\n                      target: \".validate\",\n                    },\n                    regionChange: {\n                      actions: \"setRegion\",\n                      cond: \"didRegionChange\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n                size: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"noProviderOrRegion\",\n                          target: \"idle\",\n                        },\n                        {\n                          cond: \"noSizes\",\n                          target: \"loading\",\n                        },\n                        {\n                          cond: \"emptySizes\",\n                          target: \"error\",\n                        },\n                        {\n                          cond: \"sizeIsDisabled\",\n                          target: \"disabled\",\n                        },\n                        {\n                          cond: \"billingRequiredButNotSelected\",\n                          target: \"waitingForQuota\",\n                        },\n                        {\n                          cond: \"sizeIsOverQuota\",\n                          target: \"overQuota\",\n                        },\n                        {\n                          target: \"valid\",\n                        },\n                      ],\n                    },\n                    idle: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeIdle\",\n                    },\n                    disabled: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeDisabled\",\n                    },\n                    waitingForQuota: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeWaitingForQuota\",\n                    },\n                    overQuota: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeOverQuota\",\n                    },\n                    valid: {\n                      tags: \"sizeValid\",\n                      type: \"final\",\n                    },\n                    error: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeError\",\n                    },\n                    loading: {\n                      description:\n                        \"Fetch the data required to show the available sizes and limits\",\n                      invoke: {\n                        src: \"getSizes\",\n                        onDone: [\n                          {\n                            actions: \"setSizes\",\n                            target: \"validate\",\n                          },\n                        ],\n                        onError: [\n                          {\n                            target: \"error\",\n                          },\n                        ],\n                      },\n                      tags: \"sizeLoading\",\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    providerChange: {\n                      target: \".validate\",\n                    },\n                    regionChange: {\n                      target: \".validate\",\n                    },\n                    sizeChange: {\n                      actions: \"setSize\",\n                      cond: \"didSizeChange\",\n                      target: \".validate\",\n                    },\n                    billingChange: {\n                      target: \".validate\",\n                    },\n                  },\n                },\n                billing: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"onlyPrepaid\",\n                          target: \"prepaidOnly\",\n                        },\n                        {\n                          cond: \"singleSubscription\",\n                          target: \"singleSubscription\",\n                        },\n                        {\n                          cond: \"onlySubscriptions\",\n                          target: \"onlySubscriptions\",\n                        },\n                        {\n                          description:\n                            \"user has both prepaid and marketplace subscriptions\",\n                          target: \"prepaidAndSubscriptions\",\n                        },\n                      ],\n                    },\n                    prepaidOnly: {\n                      description:\n                        \"The user doesn't need to specify any option about the billing. The API will automatically figure out the right thing to do without giving it any information.\",\n                      tags: [\"noBilling\", \"billingValid\"],\n                      entry: \"setBillingToPrepaid\",\n                      type: \"final\",\n                    },\n                    singleSubscription: {\n                      description:\n                        \"The user doesn't need to specify any option about the billing. The API will automatically figure out the right thing to do without giving it any information.\",\n                      tags: [\"noBilling\", \"billingValid\", \"singleSubscription\"],\n                      entry: \"setBillingToSubscription\",\n                      type: \"final\",\n                    },\n                    onlySubscriptions: {\n                      description:\n                        \"More than one subscription exist. The user needs to select one to procede.\",\n                      initial: \"invalid\",\n                      type: \"final\",\n                      states: {\n                        invalid: {},\n                        valid: {\n                          entry: \"triggerBillingChange\",\n                          tags: \"billingValid\",\n                          type: \"final\",\n                        },\n                      },\n                      on: {\n                        selectSubscription: [\n                          {\n                            actions: \"setBillingToSubscription\",\n                            cond: \"matchesSelectedProviderOrRHMarketplaceAndHasQuota\",\n                            target: \".valid\",\n                          },\n                          {\n                            cond: \"noSelectedProvider\",\n                            target: \".valid\",\n                          },\n                        ],\n                      },\n                    },\n                    prepaidAndSubscriptions: {\n                      description:\n                        \"The user has both prepaid quota and one or more subscription to a marketplace. The user needs to select one to procede.\",\n                      initial: \"empty\",\n                      type: \"final\",\n                      states: {\n                        empty: {},\n                        subscription: {\n                          entry: \"triggerBillingChange\",\n                          tags: \"billingValid\",\n                          type: \"final\",\n                        },\n                        prepaid: {\n                          entry: \"triggerBillingChange\",\n                          tags: \"billingValid\",\n                          type: \"final\",\n                        },\n                      },\n                      on: {\n                        selectSubscription: [\n                          {\n                            actions: \"setBillingToSubscription\",\n                            cond: \"matchesSelectedProviderOrRHMarketplaceAndHasQuota\",\n                            target: \".subscription\",\n                          },\n                          {\n                            cond: \"noSelectedProvider\",\n                            target: \".subscription\",\n                          },\n                        ],\n                        selectPrepaid: {\n                          actions: \"setBillingToPrepaid\",\n                          cond: \"hasPrepaidQuota\",\n                          target: \".prepaid\",\n                        },\n                      },\n                    },\n                  },\n                  on: {\n                    providerChange: {\n                      actions: \"unsetSubscription\",\n                      description:\n                        \"If a new provider is selected, deselect any previously selected billing option.\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n              },\n              onDone: {\n                target: \"#standardPlanMachine.configuring.form.valid\",\n              },\n            },\n          },\n          onDone: {\n            target: \"saved\",\n          },\n        },\n        saved: {\n          type: \"final\",\n        },\n      },\n    },\n    {\n      actions: {\n        setInitialContext: assign((context) => {\n          return {\n            form: {\n              ...(context.capabilities.defaultProvider\n                ? onProviderChange(\n                    context.capabilities.availableProviders,\n                    context.capabilities.defaultProvider\n                  )\n                : {}),\n            },\n          };\n        }),\n        fieldInvalid: send(\"fieldInvalid\"),\n        setName: assign((context, { name }) => {\n          if (context.creationError === \"name-taken\") {\n            return {\n              form: { ...context.form, name },\n              creationError: undefined,\n            };\n          }\n          return { form: { ...context.form, name } };\n        }),\n        setProvider: assign((context, { provider }) => {\n          return {\n            form: {\n              ...context.form,\n              ...onProviderChange(\n                context.capabilities.availableProviders,\n                provider\n              ),\n            },\n            sizes: undefined,\n          };\n        }),\n        setRegion: assign((context, { region }) => {\n          if (context.creationError === \"region-unavailable\") {\n            return {\n              form: { ...context.form, region },\n              sizes: undefined,\n              creationError: undefined,\n            };\n          }\n          return {\n            form: {\n              ...context.form,\n              region,\n            },\n            sizes: undefined,\n          };\n        }),\n        setSize: assign((context, { size }) => ({\n          form: {\n            ...context.form,\n            size,\n          },\n        })),\n        setSizes: assign((context, event) => {\n          const sizes = event.data;\n          const smallestSize = sizes.sort((a, b) => a.quota - b.quota)[0];\n          return {\n            sizes,\n            form: {\n              ...context.form,\n              size: smallestSize,\n            },\n          };\n        }),\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        resetCreationErrorMessage: assign((_context) => ({\n          creationError: undefined,\n        })),\n        setCreationError: assign((_context, { error }) => {\n          return {\n            creationError: error,\n          };\n        }),\n        triggerSave: sendParent((context) => {\n          const form = context.form as Required<typeof context.form> &\n            Pick<typeof context.form, \"billing\">;\n          const data: CreateKafkaFormData = {\n            plan: \"standard\",\n            name: form.name,\n            provider: form.provider,\n            region: form.region,\n            sizeId: form.size.id,\n            billing: form.billing,\n          };\n          return {\n            type: \"save\",\n            data,\n          };\n        }),\n        triggerSubmit: send(\"submit\"),\n        triggerBillingChange: send(\"billingChange\"),\n        setBillingToPrepaid: assign((context) => {\n          const form = { ...context.form };\n          form.billing = \"prepaid\";\n          return { form };\n        }),\n        setBillingToSubscription: assign((context, event) => {\n          const form = { ...context.form };\n          if (event.type === \"selectSubscription\") {\n            form.billing = event.subscription;\n          } else {\n            // single subscription, take it from the context\n            const ms = context.capabilities.marketplaceSubscriptions[0];\n            form.billing = {\n              marketplace: ms.marketplace,\n              subscription: ms.subscriptions[0],\n            };\n          }\n          return { form };\n        }),\n        unsetSubscription: assign((context) => {\n          const form = { ...context.form };\n          form.billing = undefined;\n          return { form };\n        }),\n      },\n      guards: {\n        isOverQuota: ({ capabilities }) =>\n          capabilities === undefined ||\n          capabilities.instanceAvailability === \"out-of-quota\",\n        isInstanceUnavailable: ({ capabilities }) =>\n          capabilities === undefined ||\n          capabilities.instanceAvailability === \"instance-unavailable\",\n        isRegionsUnavailable: ({ capabilities }) =>\n          capabilities === undefined ||\n          capabilities.instanceAvailability === \"regions-unavailable\",\n        nameIsEmpty: ({ form }) =>\n          form.name === undefined || form.name.length === 0,\n        nameIsValid: ({ form }) =>\n          /^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(form.name || \"\"),\n        providerIsValid: ({ form, capabilities }) => {\n          const selectedProviderInfo = capabilities?.availableProviders.find(\n            (p) => p.id === form.provider\n          );\n          return (\n            // must have loaded a list of providers\n            (capabilities?.availableProviders || []).length > 0 &&\n            // must have selected a provider\n            selectedProviderInfo !== undefined\n          );\n        },\n        regionIsValid: ({ form, capabilities }) => {\n          const selectedProviderInfo = capabilities?.availableProviders.find(\n            (p) => p.id === form.provider\n          );\n          return (\n            // must have selected a region\n            form.region !== undefined &&\n            // the region must be included in the capabilities for the provider\n            selectedProviderInfo?.regions.find((r) => r.id === form.region) !==\n              undefined\n          );\n        },\n        noProviderOrRegion: ({ form }) =>\n          form.provider === undefined || form.region === undefined,\n        noSizes: ({ sizes }) => sizes === undefined,\n        emptySizes: ({ sizes }) => sizes !== undefined && sizes.length === 0,\n        sizeIsDisabled: ({ form, capabilities }) => {\n          if (capabilities === undefined) return true;\n          return form.size?.isDisabled === true;\n        },\n        billingRequiredButNotSelected: ({ form }, _, meta) => {\n          if (meta.state.hasTag(\"noBilling\")) {\n            return false;\n          }\n          return form.billing === undefined;\n        },\n        sizeIsOverQuota: ({ form, capabilities }) => {\n          if (capabilities === undefined || !form.size) return true;\n          const availableQuota =\n            form.billing === \"prepaid\" || form.billing === undefined\n              ? capabilities.remainingPrepaidQuota\n              : capabilities.remainingMarketplaceQuota;\n          if (!availableQuota) return true;\n          return form.size.quota > availableQuota;\n        },\n        didProviderChange: (context, event) =>\n          context.form.provider !== event.provider,\n        didRegionChange: (context, event) =>\n          context.form.region !== event.region,\n        didSizeChange: (context, event) =>\n          context.form.size?.id !== event.size.id,\n        onlyPrepaid: (context) =>\n          context.capabilities.marketplaceSubscriptions.length === 0,\n        singleSubscription: (context) =>\n          context.capabilities.remainingPrepaidQuota === undefined &&\n          context.capabilities.marketplaceSubscriptions.flatMap(\n            (m) => m.subscriptions\n          ).length === 1,\n        onlySubscriptions: (context) =>\n          context.capabilities.remainingPrepaidQuota === undefined &&\n          context.capabilities.marketplaceSubscriptions.length > 0,\n        matchesSelectedProviderOrRHMarketplaceAndHasQuota: (\n          { form, capabilities },\n          { subscription }\n        ) =>\n          capabilities.remainingMarketplaceQuota !== undefined &&\n          capabilities.remainingMarketplaceQuota > 0 &&\n          (subscription.marketplace === \"rhm\" ||\n            form.provider === subscription.marketplace),\n        hasPrepaidQuota: (context) =>\n          context.capabilities.remainingPrepaidQuota !== undefined &&\n          context.capabilities.remainingPrepaidQuota > 0,\n        noSelectedProvider: ({ form }) => form.provider === undefined,\n      },\n    }\n  );\n","import { CloudProvider, CloudRegion } from \"ui-models/src/models/kafka\";\nimport { assign, createMachine, send, sendParent } from \"xstate\";\nimport {\n  CreateKafkaFormData,\n  CreateKafkaInstanceError,\n  TrialPlanInitializationData,\n  TrialSizes,\n} from \"../types\";\nimport { onProviderChange } from \"./shared\";\n\nexport type TrialPlanMachineContext = {\n  // initial data coming from the APIs\n  capabilities: TrialPlanInitializationData;\n\n  // what the user is selecting\n  form: {\n    name?: string;\n    provider?: CloudProvider;\n    region?: CloudRegion;\n  };\n\n  // based on the form.provider and form.region selection\n  sizes: TrialSizes | undefined;\n\n  creationError: CreateKafkaInstanceError | undefined;\n};\n\nexport const TrialPlanMachine =\n  /** @xstate-layout N4IgpgJg5mDOIC5QBUBOBLAhgGwArcwDsBZTAYwAt1CwA6ANzAwDMBPAQXs3QICMf0AF1YBiRKAAOAe1hD0UwuJAAPRACYAbAA4AnLQ0AGNQBYArBo0BmHQHYNNywBoQrRDoO1bARjWmv54y8DY18AX1DnNCw8AhJyKhpaMgVmdCgAVwxCKFpYQUxBdNgRMlQwArAlaVlBeUUkFUQgtWdXBFNLY1o7LRDTG1NTLVNjG3DIjBx8IlJKajpkwlSMrJzmKVQAWwYcdAgRVLBsCABJQi5sPaqZOQUlVQQvLRs9NR1TI1Mdey0tNS1Wk1nqZaJodIEbEYTAZ7OMQFEprFZgkFik0plqGsNtsLnsSmUKtcanV7kCXqD3p9vjZfv9AQg1AYhrQDF4fH9jJ0aVo4QiYjN4vMkmiVpjaOstrlMPRMfjyoIwABldJkMhweANaq3eqgB5qSxqGwsgwmgzPHRBGxeemMrQeCwfAY6NT6s2mXmTflxOaJRbLDHZcXYqUy7JyioAUVQqA2RO1pIZBqNppN5st1pcTR04O6gX+9hMefdEXhnum3pRwqW6NWQa2B3QR1O512EDjtTuDQe-i+tD+Jpdxm0NhdpnpXlGXTNnIt-RCnOLE2i5eRQr9NbFh2OsFohEwmzouIgFTEmpuHZ1jQQxmG3VHfjUE7Zb3HGlGoK8Vo0-ksli0Vh0D1lyRQVfRFAM1kbbdd33MADmxZVeE2IR2xJLsmgNccbECWgvAsGwBkhBwb0sIDEQFH1UWrUVAy3CAdz3A8REYsAAGEKCIGBUM7XUMJaTNHg0QZQU5Axf0MYxRmwsivVXMDqIg8UoPo2gJBjGUICYHZLmPBVT0kc80N49o3lBQxgnBLkmQBATH20Wghy8WxnS0IJLA0GSV1Aqj-VrOidzUqQNKYeCtkQ5DBG4y9u0w2zLCePs33cxkmW0IdPJAyiq18zdlIC9S9hCwLgtQdjOMqM9iR4q8vFito7JBd4XhpGF-FGDKKMrdcaMgpsdzKKA6m0vYTyihNTEfY0TH-aFzGCccni6G8DGzf9WSE9KSz5Lysu6xT-NoAa6lCzZwpQyr43Qx46qaN4vFoawR1HT8Jv6DqKzXcC-Lyw6wEGhQRGKwrSo47IKoMqror48cTEsByOhItlLD8P93rknyN1on6joBnHCDKsGxqu2r+LaIJ3FoEYRytYYkZCNHvOyzHeug2QAC9D1bUaLovBNnjh2xnn-A1hgmmz6rtLRugMZrhhvJzF1LYDOs+hTvr63J0A52hsCkTAIFlCAFDoah6CkABrOhtsyrqvtyjX2boXX9cxBBTakMgCjqABtAwAF0ieM4x3k8O0jCc2qNDum0Bg0bpKXihxvmsYwGd2u2sYdrWnb1g2wyYGNUFUghBAlbZrZV+Scsz1ns513PXfdz2L19gOeaMq9g8asPHwtZKLRjs0+xRv5DHJzQ09ttX7drjmTrOyL2+qmLSfUC0uhMDRsysbRNH8SfVerlmVMdwGCs0kHysDmqboQSxgnuvD9THq1szCLayxtw-maUrO57xgmXEl5Q2uqvO+Zo9BBCsJCSwI5rA8g-srD6Vcf7+REEbRIeQKi0ArsgjGPVf7bmvt2QI90-BCx0PFWBXcbQPweoMLeidHyfAPignq6Dja5HyAqHBn9K74IgsQ9Q2g9CGBMOYACdgHBYU5KHay2FkbOhdOEEshApCaQ1CgPheCGBMHQGwTg3A+ACGEEI68YC8J6AtBHew35-wWDUKwugghPQAFVYCQDMW8ewuE+hsjZIMXwr4rFsgtLYp4Fgo5ONoC46Iri9xcB4JgXg2BwYgC1LzK6IQbR-j7FoJMYkhIRxpNEvGsB4nSiMck1JZjskCSCB4cEMtOQiNGDLLw0S9q1iwYUHc6RCCwHSEhIQCo2zAITM0ekQ4QTNSfhCbM9NEHkR0V0sUPSii5CGRFUZXj8mUwaayP4eFkb9HpNoOGkIVodBePYMSitcHoyZgQ9Zmj0mGWXogGk9I-weD+EMbMZpWTiVTks2SjNVm0WDKbVsXjg5xxlv+Zyj4CIWMRaCBhgwmQjD+KRUFO0p5HzrDiGF4ziaDD0P2KEQ5nijloStRKMIvjDmGMjTpGcsSSlgNKTEXiTRGleiaCaFprF0qlhNBWLomTHI8nir+bD9rBi5YwMZENLrGRMN8FkNIt4vGRSOWh2F9Ao1qu8Do+SZVLmWY8iFHLNhmJ-CCSlg5hy0vqX+SBtV2TPz-G8Nl08a4qRYrQfpggpAqgoJ40lxl-BqFBLoWBFhYEwn1E4epLwPVYr+K5dN9ztHWvZYQwNsFaBgE2BIUxUarwjilkJAYmh7DIxTVhTQuF+gcjsJQ38YxZX8KeftH6QboU6XtbfJysCWQdGnE1CaMs-WEoOkGo89rDUumZdmfof48Ljn-FLM0Tw7JOQsHO1BA7i1HkJJWh4nRY0WgGHhXQxhpzGGbXHfwNITAdt-LA49BCF2wXtWacc5hY3iPBEK5ovQf39o1kDC+wbCChvDZG1VmTo2Gusj4OcDghh2ByXYPse6wl3u-N2y1YL07+uPvlIKwNhq6TSRkjuV7-zww+P4NkQ4CKpvqi6e6IRmm6EZOu0jSsrXgoLQdWDWkh1XEvU0Do3RhzBzZEYb4ZgbSSRmS8MwbH77KJ7SsiTP0pNFyXXJhAd7KYOA5OSnQdowEukmvx7CgmVpNSg+raCJmAPi3UIC0O2gLK6HYx5meKk8bwcQ5QZDbzIYTK3p4N4nRAgfHzDCccQ5XjYW0AreKPxQsBv6n9Ia56FRmNgVLJy2E-DOiZPFHQMNx0zhHBxoSD6CtUd+v9QgtAZMqti2qmqwd9DWGpCjF0sCxxuuG50Fa35nQ-mkgZ-NlHC1Fe63RsxDgPB4Q+H+ecjIXz1P1EaGctigXDBEw88Tq2Dp4x8+OQVVnzK0yTO5Dra3Nba1Kwx95ID7CiPyXYL4wdDTfBtH3EbFlvxfsZLisj+Lv6-p+o7XrEAanmY4yCMehoTCHqEjaX4lXQeb38NvD7B1UdmZQ0x9QCnfCuXih8QYQQOgQ5HLhC0JohLaHwrmpBK350o7rgXWM5mLC7u-GCTkkltBTfqvYI0yMALzmnVdvNN2hd-xzi7bII6HP2C6GlTk+S-k+Ap8LjmD3bL-O6J6gYwRpn72W5rk9fUzG9HpJQ2NElqsvUCPD0T5GCXMzMSMb5Mth5Dn1N8Wm2holKpi4xj5DJ7OeEKbobT2ExJYXHd8XeIwRG2HVwL7y9rfOPAQeEIAA */\n  createMachine(\n    {\n      context: {\n        capabilities: {} as TrialPlanInitializationData,\n        sizes: undefined,\n        form: {},\n        creationError: undefined,\n      },\n      tsTypes: {} as import(\"./TrialPlanMachine.typegen\").Typegen0,\n      schema: {\n        context: {} as TrialPlanMachineContext,\n        events: {} as\n          | { type: \"fieldInvalid\" }\n          | { type: \"nameChange\"; name: string }\n          | { type: \"providerChange\"; provider: CloudProvider }\n          | { type: \"regionChange\"; region: CloudRegion }\n          | { type: \"nameIsValid\" }\n          | { type: \"nameIsInvalid\" }\n          | { type: \"nameIsTaken\" }\n          | { type: \"submit\" }\n          | { type: \"create\" }\n          | { type: \"createSuccess\" }\n          | { type: \"createError\"; error: CreateKafkaInstanceError },\n        services: {} as {\n          getSizes: {\n            data: TrialSizes;\n          };\n        },\n      },\n      initial: \"verifyAvailability\",\n      id: \"TrialPlanMachine\",\n      states: {\n        verifyAvailability: {\n          entry: \"setInitialContext\",\n          always: [\n            {\n              cond: \"isTrialUsed\",\n              target: \"trialUsed\",\n            },\n            {\n              cond: \"isTrialUnavailable\",\n              target: \"trialUnavailable\",\n            },\n            {\n              target: \"configuring\",\n            },\n          ],\n        },\n        trialUsed: {\n          tags: \"blocked\",\n        },\n        trialUnavailable: {\n          tags: \"blocked\",\n        },\n        regionsUnavailable: {\n          tags: \"blocked\",\n        },\n        configuring: {\n          type: \"parallel\",\n          states: {\n            status: {\n              initial: \"unsubmitted\",\n              states: {\n                unsubmitted: {\n                  tags: \"unsubmitted\",\n                },\n                submitted: {\n                  entry: \"triggerSubmit\",\n                  tags: \"submitted\",\n                },\n              },\n              on: {\n                create: {\n                  description:\n                    \"Save is enabled all the time, if it's clicked before the form is completely filled out we should show the validation for all errored fields\",\n                  target: \".submitted\",\n                },\n              },\n            },\n            form: {\n              initial: \"invalid\",\n              states: {\n                invalid: {\n                  tags: \"formInvalid\",\n                },\n                valid: {\n                  entry: \"resetCreationErrorMessage\",\n                  on: {\n                    fieldInvalid: {\n                      target: \"invalid\",\n                    },\n                    submit: {\n                      target: \"saving\",\n                    },\n                  },\n                },\n                saving: {\n                  entry: [\"resetCreationErrorMessage\", \"triggerSave\"],\n                  tags: \"formSaving\",\n                  on: {\n                    createSuccess: {\n                      target: \"saved\",\n                    },\n                    createError: {\n                      actions: \"setCreationError\",\n                      target: \"invalid\",\n                    },\n                  },\n                },\n                saved: {\n                  type: \"final\",\n                },\n              },\n              on: {\n                fieldInvalid: {\n                  description:\n                    \"sent by the fields when their value change to an invalid value. This will transition the form to the invalid state, to then eventually transition to the valid state if the field state is marked as done (which means that all fields have a valid value selected)\",\n                  target: \".invalid\",\n                },\n              },\n            },\n            fields: {\n              tags: \"configurable\",\n              type: \"parallel\",\n              states: {\n                name: {\n                  initial: \"validate\",\n                  states: {\n                    empty: {\n                      tags: \"nameEmpty\",\n                    },\n                    invalid: {\n                      entry: \"fieldInvalid\",\n                      tags: \"nameInvalid\",\n                    },\n                    valid: {\n                      tags: \"nameValid\",\n                      type: \"final\",\n                    },\n                    validate: {\n                      always: [\n                        {\n                          cond: \"nameIsEmpty\",\n                          target: \"empty\",\n                        },\n                        {\n                          cond: \"nameIsValid\",\n                          target: \"valid\",\n                        },\n                        {\n                          target: \"invalid\",\n                        },\n                      ],\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    nameChange: {\n                      actions: \"setName\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n                provider: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"providerIsValid\",\n                          target: \"valid\",\n                        },\n                        {\n                          target: \"invalid\",\n                        },\n                      ],\n                    },\n                    invalid: {\n                      entry: \"fieldInvalid\",\n                      tags: \"providerInvalid\",\n                    },\n                    valid: {\n                      tags: \"providerValid\",\n                      type: \"final\",\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    providerChange: {\n                      actions: \"setProvider\",\n                      cond: \"didProviderChange\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n                region: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"regionIsValid\",\n                          target: \"valid\",\n                        },\n                        {\n                          target: \"invalid\",\n                        },\n                      ],\n                    },\n                    invalid: {\n                      entry: \"fieldInvalid\",\n                      tags: \"regionInvalid\",\n                    },\n                    valid: {\n                      tags: \"regionValid\",\n                      type: \"final\",\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    providerChange: {\n                      target: \".validate\",\n                    },\n                    regionChange: {\n                      actions: \"setRegion\",\n                      cond: \"didRegionChange\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n                size: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"noProviderAndRegion\",\n                          target: \"idle\",\n                        },\n                        {\n                          cond: \"noSizes\",\n                          target: \"loading\",\n                        },\n                        {\n                          cond: \"emptySizes\",\n                          target: \"error\",\n                        },\n                        {\n                          target: \"valid\",\n                        },\n                      ],\n                    },\n                    idle: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeIdle\",\n                    },\n                    valid: {\n                      tags: \"sizeValid\",\n                      type: \"final\",\n                    },\n                    error: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeError\",\n                    },\n                    loading: {\n                      description:\n                        \"Fetch the data required to show the available sizes and limits\",\n                      invoke: {\n                        src: \"getSizes\",\n                        onDone: [\n                          {\n                            actions: \"setSizes\",\n                            target: \"validate\",\n                          },\n                        ],\n                        onError: [\n                          {\n                            target: \"error\",\n                          },\n                        ],\n                      },\n                      tags: \"sizeLoading\",\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    providerChange: {\n                      target: \".validate\",\n                    },\n                    regionChange: {\n                      target: \".validate\",\n                    },\n                  },\n                },\n              },\n              onDone: {\n                target: \"#TrialPlanMachine.configuring.form.valid\",\n              },\n            },\n          },\n          onDone: {\n            target: \"saved\",\n          },\n        },\n        saved: {\n          type: \"final\",\n        },\n      },\n    },\n    {\n      actions: {\n        setInitialContext: assign((context) => {\n          return {\n            form: {\n              ...(context.capabilities.defaultProvider\n                ? onProviderChange(\n                    context.capabilities.availableProviders,\n                    context.capabilities.defaultProvider\n                  )\n                : {}),\n            },\n          };\n        }),\n        fieldInvalid: send(\"fieldInvalid\"),\n        setName: assign((context, { name }) => {\n          if (context.creationError === \"name-taken\") {\n            return {\n              form: { ...context.form, name },\n              creationError: undefined,\n            };\n          }\n          return { form: { ...context.form, name } };\n        }),\n        setProvider: assign((context, { provider }) => {\n          return {\n            form: {\n              ...context.form,\n              ...onProviderChange(\n                context.capabilities.availableProviders,\n                provider\n              ),\n            },\n            sizes: undefined,\n          };\n        }),\n        setRegion: assign((context, { region }) => {\n          if (context.creationError === \"region-unavailable\") {\n            return {\n              form: { ...context.form, region },\n              sizes: undefined,\n              creationError: undefined,\n            };\n          }\n          return {\n            form: {\n              ...context.form,\n              region,\n            },\n            sizes: undefined,\n          };\n        }),\n        setSizes: assign((_context, event) => {\n          const sizes = event.data;\n          return {\n            sizes,\n          };\n        }),\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        resetCreationErrorMessage: assign((_context) => ({\n          creationError: undefined,\n        })),\n        setCreationError: assign((_context, { error }) => ({\n          creationError: error,\n        })),\n        triggerSave: sendParent((context) => {\n          const form = context.form as Required<typeof context.form>;\n          const data: CreateKafkaFormData = {\n            plan: \"developer\",\n            name: form.name,\n            provider: form.provider,\n            region: form.region,\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            sizeId: context.sizes!.trial.id,\n            billing: undefined,\n          };\n          return {\n            type: \"save\",\n            data,\n          };\n        }),\n        triggerSubmit: send(\"submit\"),\n      },\n      guards: {\n        isTrialUsed: ({ capabilities }) =>\n          capabilities === undefined ||\n          capabilities.instanceAvailability === \"used\",\n        isTrialUnavailable: ({ capabilities }) =>\n          capabilities === undefined ||\n          capabilities.instanceAvailability === \"unavailable\",\n        nameIsEmpty: ({ form }) =>\n          form.name === undefined || form.name.length === 0,\n        nameIsValid: ({ form }) =>\n          /^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(form.name || \"\"),\n        providerIsValid: ({ form, capabilities }) => {\n          const selectedProviderInfo = capabilities?.availableProviders.find(\n            (p) => p.id === form.provider\n          );\n          return (\n            // must have loaded a list of providers\n            (capabilities?.availableProviders || []).length > 0 &&\n            // must have selected a provider\n            selectedProviderInfo !== undefined\n          );\n        },\n        regionIsValid: ({ form, capabilities }) => {\n          const selectedProviderInfo = capabilities?.availableProviders.find(\n            (p) => p.id === form.provider\n          );\n          return (\n            // must have selected a region\n            form.region !== undefined &&\n            // the region must be included in the capabilities for the provider\n            selectedProviderInfo?.regions.find((r) => r.id === form.region) !==\n              undefined\n          );\n        },\n        noProviderAndRegion: ({ form }) =>\n          form.provider === undefined || form.region === undefined,\n        noSizes: ({ sizes }) => sizes === undefined,\n        emptySizes: ({ sizes }) =>\n          sizes !== undefined && sizes.standard.length === 0,\n        didProviderChange: (context, event) =>\n          context.form.provider !== event.provider,\n        didRegionChange: (context, event) =>\n          context.form.region !== event.region,\n      },\n    }\n  );\n","import type { CloudProvider, CloudRegion } from \"ui-models/src/models/kafka\";\nimport { assign, createMachine, EventFrom, forwardTo, send } from \"xstate\";\nimport type {\n  CloudProvidersInfo,\n  CreateKafkaFormData,\n  CreateKafkaInitializationData,\n  CreateKafkaInstanceError,\n  StandardPlanInitializationData,\n  StandardSizes,\n  TrialPlanInitializationData,\n  TrialSizes,\n} from \"../types\";\nimport {\n  StandardPlanMachine,\n  StandardPlanMachineContext,\n} from \"./StandardPlanMachine\";\nimport { TrialPlanMachine, TrialPlanMachineContext } from \"./TrialPlanMachine\";\n\ntype Quota =\n  | Pick<\n      StandardPlanInitializationData,\n      | \"plan\"\n      | \"remainingPrepaidQuota\"\n      | \"marketplaceSubscriptions\"\n      | \"remainingMarketplaceQuota\"\n      | \"instanceAvailability\"\n    >\n  | Pick<TrialPlanInitializationData, \"plan\" | \"instanceAvailability\">;\n\nexport type CreateKafkaInstanceMachineContext = {\n  quota: Quota | undefined;\n  providers: CloudProvidersInfo | undefined;\n  defaultProvider: CloudProvider | undefined;\n  capabilities: CreateKafkaInitializationData | undefined;\n};\n\nconst CreateKafkaInstanceMachine =\n  /** @xstate-layout N4IgpgJg5mDOIC5QGMBOYCGAXMBpDAZgNYYCSAdrFhucmAHQA2A9hhAJblT0COArs2r1kACzDIinKAAIqNCBlQRp-QRgDEYVKmap6AB0bYCugLbD02PIRIU5tBizZTeAoaPGSus6uQVKVNwwETgA3ZmRsdmZyAG0ABgBdRFB9Zlh2LGjyFJAAD0QAFniAJnp4gGYAdkKATgAOeqr4qvrCgFYAGhAAT0QANir++n769tqq2sKARhKKjsKAX0XutEwcfGIySl86JlYOLlc1YTEJKR95RWVVanV7fxug6QxQjHYjACNGMFy0jKyMVyBQQxTKlRqDSaLTaXV6iHG8XoVXahX6UyqJVqJX6-WWq0sGxs23seych24twwp08Fwe10CanUzD4WGkzAIlz8DKpf3SmWywKKpXK1TqjWarQ63T6CHa8UK9Hqcw6JUK6palXxIDWVk2th2NDJBxcVJp5289ICVPU5GYXMejOoLzeHww31+SBA-wFQK9ILBoshEph0vhoPaw2hFRKasKbQa0yWKx1hOsWzsu0cJqOZqtEHUfIBgv9iCTU2RkZj03RYsjMoGyvo0yG40KJSq0wq02m9W1uqJGcNDn2zlzQXoEDAoTALH0WkLXp9gJypYQ5cVKP61drNXr4faFSRJVmdUmasjvf7af1JKzo4px3cZy8MinM7nWhd7y+H0yPU0bRdAMIwsBMVBzAHdMDVJbMx0pCcPAtN9p1nZh51Qb83U+P8sB6EJyHCSIVwSZIl35FchQQWpanaeh4y7JN5gqbFZgbOU1WRE96m3Bp+lRKoKmvdZoLvI04MfM0kNfaR3zQjCsN-Rh-3UOTP0wvhYEgItfVXUAQRouiGO7QpmNYkp2NMqolXqWZcSPCpRn6NFhL1YlM3Eh9TUQl8LjU9Cv1eH93VwgD-IUoLsJ+HTKLXQz6NskyzJPCzwwqdppnoWj4niaZ2kPepaiTaZXMHGD73JFwCDALBRAufQdFCdgp1QWB1Aa5gmpa2AXj8aR0CgbIesir5ovI4s-X0staNqegjzGcZ+hKHjeyqdj2jGcplu4moFSqKpStEjyR0qo5qtqkR6sa5qtDarQdD0QxjDMCwRNvY7jXg+hzrq7wOq626CKIqIYlImKSym9cMRsiY0RmaYFXiOFZUKfa5rqRy5mmWp4kGdpDve4dPsfH7Lr+67uvainbvZTCBqG6Q+HIEb3TG1IKIh-Jpsjeh2k7XHOw7QqWnY0Z6mbapakGNVqgR-GUygwnYK8rhVJiBg5BwV63KHZXTqgcHJq5hASlROj+lKCp6kqdUVvYq3Mr3ds0UaPLZgJ9yiY13xHSe8h6Gan57leT12YmvTjaxbd6NM+NDIVdLCkskUFmxyZt2cwYPd1+982kP36FgV4pHUKCAGU+GQOhYHgcbdKoxOjKR0p6nmYXlvt1Fyn6Lt1W7E9Jkc7Pys8vOC6LprVaggBRIDUENiOQSjioY7b+PTNRe2a152NbLy03M7y4exJHcKvwLwOwGDmcF6orFWl5i2Nt7toEYqUWpayrt5SW+z4ls4+H0GBn0wuPYuU80wVyrnAWuYd65rkbvRBUtQ6x9zaKLeMO8WhDB7PEKEtRAFe0nKhdS+cjD+wniXGec9b5rnvuLSMSNErxhmJUUWCMsrKmWngsEuJ5YpjtFOWBqY3qez1jmBCJxpJ0h9jyIItDIYI1SrKSM4tW6dmVB0TsaISoKxvGIiqEinzUnzAo42zRxYojmD3FEtk+bTFFkMZskYcS9mfiwwh4ivpmhAWYkEswGg2RwSxJosxSjrU4tjAePcEY8SKp4wx3ifK0m8CAxSIVlJ4T8QMfic1lrFVaMqeYDjwztjojxHhsYOxW1ssmAkoic6eX1sY7JCBWjsQ7LNKWjRKiLRxmieW9SdYjxOkY0mV1Oo3Vaq0msCoY7FCGOlWMsxkYIkxMiHh7RYyMPjEJPRDSRnExcJYCAso4GxUhrGQY5QMpjCSpedaExkRND5jorEFQ9lDLKifI5XBWmb3DC2TKlRGLVCxBeDoCTR49CoGAUwjNmaulGqHb0HMjYgkciiLK+UUFWRxt2VZbT1mt1GK0Fo-EOx4n2cMn53srgBAvhANmqLw53yaIqfi4xsQdnyu2d+aVqjONbmna2OJuxQpHGPchhdwEGzrhc42MZBXYwmD3CE-F+j21jCMZy8Ytxdlom0CVewpU0FacteUIwcXcpRKiOY7FsYrzBdbeMhUWJt2NcAkhAVQHSsvuaxos19rzUxelFsyiBjdhGC2UYLY4k9l0V8o6RC0lgMnnK85nMMVVPKJo2GbiirsOsrMd1uU1SWzqSImlQDiEfh9WQs18qs2IGWrk4N-9Q0ZUxJZJoSolWVBylYwqnrhDMFMIYGqKLlzNoQNUf+SomFoP2p2Ht1lcZ5Roj2IW4rqXfKAa0o87EaI3JyhtQS2Ntyo2WMsIAA */\n  createMachine(\n    {\n      context: {\n        providers: undefined,\n        defaultProvider: undefined,\n        quota: undefined,\n        capabilities: undefined,\n      },\n      tsTypes: {} as import(\"./CreateKafkaInstanceMachine.typegen\").Typegen0,\n      schema: {\n        context: {} as CreateKafkaInstanceMachineContext,\n        events: {} as\n          | {\n              type: \"standard quota available\";\n              quota: Pick<\n                StandardPlanInitializationData,\n                | \"remainingPrepaidQuota\"\n                | \"remainingMarketplaceQuota\"\n                | \"marketplaceSubscriptions\"\n              >;\n            }\n          | {\n              type: \"out of standard quota\";\n              quota: Pick<\n                StandardPlanInitializationData,\n                \"marketplaceSubscriptions\"\n              >;\n            }\n          | {\n              type: \"no standard quota available\";\n              hasTrialQuota: boolean;\n            }\n          | {\n              type: \"trial available\";\n              capabilities: TrialPlanInitializationData;\n            }\n          | { type: \"trial used\" }\n          | { type: \"developer available\" }\n          | { type: \"developer used\" }\n          | { type: \"developer unavailable\" }\n          | {\n              type: \"providers and regions available\";\n              providers: CloudProvidersInfo;\n              defaultProvider: CloudProvider | undefined;\n            }\n          | { type: \"providers or regions unavailable\" }\n          | { type: \"save\"; data: CreateKafkaFormData }\n          | { type: \"createSuccess\" }\n          | { type: \"createError\"; error: CreateKafkaInstanceError },\n        services: {} as {\n          checkStandardQuota: {\n            data: never;\n          };\n          checkDeveloperAvailability: {\n            data: never;\n          };\n          fetchProvidersWithRegions: {\n            data: never;\n          };\n          standardPlan: {\n            data: StandardPlanMachineContext;\n          };\n          trialPlan: {\n            data: TrialPlanMachineContext;\n          };\n        },\n      },\n      id: \"createKafkaInstance\",\n      initial: \"loading\",\n      states: {\n        loading: {\n          description: \"Fetch the data required to drive the creation flow\",\n          tags: \"loading\",\n          initial: \"quota\",\n          states: {\n            quota: {\n              initial: \"checking standard quota\",\n              states: {\n                \"checking standard quota\": {\n                  invoke: {\n                    src: \"checkStandardQuota\",\n                    onError: [\n                      {\n                        actions: \"setStandardUnavailable\",\n                        target: \"standard\",\n                      },\n                    ],\n                  },\n                  on: {\n                    \"standard quota available\": {\n                      actions: \"setStandardAvailable\",\n                      target: \"standard\",\n                    },\n                    \"out of standard quota\": {\n                      actions: \"setStandardOutOfQuota\",\n                      target: \"standard\",\n                    },\n                    \"no standard quota available\": {\n                      target: \"checking developer availability\",\n                    },\n                  },\n                },\n                standard: {\n                  type: \"final\",\n                  always: {\n                    target: \"#createKafkaInstance.loading.fetching providers\",\n                  },\n                },\n                developer: {\n                  type: \"final\",\n                  always: {\n                    target: \"#createKafkaInstance.loading.fetching providers\",\n                  },\n                },\n                \"checking developer availability\": {\n                  invoke: {\n                    src: \"checkDeveloperAvailability\",\n                    onError: [\n                      {\n                        actions: \"setDeveloperUnavailable\",\n                        target: \"developer\",\n                      },\n                    ],\n                  },\n                  on: {\n                    \"developer used\": {\n                      actions: \"setDeveloperUsed\",\n                      target: \"developer\",\n                    },\n                    \"developer available\": {\n                      actions: \"setDeveloperAvailable\",\n                      target: \"developer\",\n                    },\n                    \"developer unavailable\": {\n                      actions: \"setDeveloperUnavailable\",\n                      target: \"developer\",\n                    },\n                  },\n                },\n              },\n            },\n            \"fetching providers\": {\n              invoke: {\n                src: \"fetchProvidersWithRegions\",\n                onError: [\n                  {\n                    actions: \"setProvidersOrRegionsUnavailable\",\n                    target: \"ready\",\n                  },\n                ],\n              },\n              on: {\n                \"providers and regions available\": {\n                  actions: \"setProviders\",\n                  target: \"ready\",\n                },\n                \"providers or regions unavailable\": {\n                  actions: \"setProvidersOrRegionsUnavailable\",\n                  target: \"ready\",\n                },\n              },\n            },\n            ready: {\n              type: \"final\",\n              entry: \"setCapabilities\",\n            },\n          },\n          onDone: [\n            {\n              cond: \"standard plan\",\n              target: \"standard plan\",\n            },\n            {\n              cond: \"developer plan\",\n              target: \"developer plan\",\n            },\n            {\n              target: \"system unavailable\",\n            },\n          ],\n        },\n        \"system unavailable\": {\n          tags: \"systemUnavailable\",\n          type: \"final\",\n        },\n        \"standard plan\": {\n          invoke: {\n            src: \"standardPlan\",\n            id: \"standardPlanService\",\n          },\n          tags: \"standardPlan\",\n          initial: \"idle\",\n          states: {\n            idle: {\n              on: {\n                save: {\n                  target: \"saving\",\n                },\n              },\n            },\n            saving: {\n              invoke: {\n                src: \"createInstance\",\n              },\n              tags: \"saving\",\n              on: {\n                createSuccess: {\n                  target: \"#createKafkaInstance.complete\",\n                },\n                createError: {\n                  actions: \"notifyCreateErrorToStandardPlan\",\n                  target: \"idle\",\n                },\n              },\n            },\n          },\n        },\n        \"developer plan\": {\n          invoke: {\n            src: \"trialPlan\",\n            id: \"trialPlanService\",\n          },\n          tags: \"trialPlan\",\n          initial: \"idle\",\n          states: {\n            idle: {\n              on: {\n                save: {\n                  target: \"saving\",\n                },\n              },\n            },\n            saving: {\n              invoke: {\n                src: \"createInstance\",\n              },\n              tags: \"saving\",\n              on: {\n                createSuccess: {\n                  target: \"#createKafkaInstance.complete\",\n                },\n                createError: {\n                  actions: \"notifyCreateErrorToTrialPlan\",\n                  target: \"idle\",\n                },\n              },\n            },\n          },\n        },\n        complete: {\n          type: \"final\",\n        },\n      },\n    },\n    {\n      actions: {\n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        setDeveloperAvailable: assign((_) => ({\n          quota: {\n            plan: \"developer\" as const,\n            instanceAvailability: \"available\" as const,\n          },\n        })),\n        setDeveloperUnavailable: assign((_) => ({\n          quota: {\n            plan: \"developer\" as const,\n            instanceAvailability: \"unavailable\" as const,\n          },\n        })),\n        setDeveloperUsed: assign((_) => ({\n          quota: {\n            plan: \"developer\" as const,\n            instanceAvailability: \"used\" as const,\n          },\n        })),\n        setStandardAvailable: assign((_, event) => ({\n          quota: {\n            plan: \"standard\" as const,\n            instanceAvailability: \"available\" as const,\n            remainingPrepaidQuota: event.quota.remainingPrepaidQuota,\n            marketplaceSubscriptions: event.quota.marketplaceSubscriptions,\n            remainingMarketplaceQuota: event.quota.remainingMarketplaceQuota,\n          },\n        })),\n        setStandardOutOfQuota: assign((_, event) => ({\n          quota: {\n            plan: \"standard\" as const,\n            instanceAvailability: \"out-of-quota\" as const,\n            marketplaceSubscriptions: event.quota.marketplaceSubscriptions,\n            remainingMarketplaceQuota: 0,\n            remainingPrepaidQuota: 0,\n          },\n        })),\n        setStandardUnavailable: assign((_) => ({\n          quota: {\n            plan: \"standard\" as const,\n            instanceAvailability: \"instance-unavailable\" as const,\n            marketplaceSubscriptions: [],\n            remainingMarketplaceQuota: 0,\n            remainingPrepaidQuota: 0,\n          },\n        })),\n        setProviders: assign((_, event) => {\n          return {\n            providers: event.providers,\n            defaultProvider: event.defaultProvider,\n          };\n        }),\n        setProvidersOrRegionsUnavailable: assign((context) => {\n          const quota = context.quota!;\n          if (quota.plan === \"standard\") {\n            quota.instanceAvailability = \"regions-unavailable\";\n          } else {\n            quota.instanceAvailability = \"unavailable\";\n          }\n          return {\n            providers: [],\n            quota,\n          };\n        }),\n        setCapabilities: assign((context) => {\n          const { providers, defaultProvider, quota } = context;\n          if (!providers || !quota) {\n            throw new Error(\"unexpected condition, no providers or quota\");\n          }\n          if (quota.plan === \"standard\") {\n            const capabilities: StandardPlanInitializationData = {\n              plan: \"standard\",\n              availableProviders: providers,\n              defaultProvider,\n              instanceAvailability: quota.instanceAvailability,\n              marketplaceSubscriptions: quota.marketplaceSubscriptions,\n              remainingMarketplaceQuota: quota.remainingMarketplaceQuota,\n              remainingPrepaidQuota: quota.remainingPrepaidQuota,\n            };\n            return { capabilities };\n          } else {\n            const capabilities: TrialPlanInitializationData = {\n              plan: \"developer\",\n              availableProviders: providers,\n              defaultProvider,\n              instanceAvailability: quota.instanceAvailability,\n            };\n            return { capabilities };\n          }\n        }),\n        notifyCreateErrorToStandardPlan: forwardTo(\"standardPlanService\"),\n        notifyCreateErrorToTrialPlan: send(\n          (_, event) => {\n            return { type: \"createError\", error: event.error };\n          },\n          { to: \"trialPlanService\" }\n        ),\n        /* eslint-enable @typescript-eslint/no-unused-vars */\n      },\n      guards: {\n        \"standard plan\": (context) => context.quota?.plan === \"standard\",\n        \"developer plan\": (context) => context.quota?.plan === \"developer\",\n      },\n    }\n  );\n\ntype EventTypes = Pick<\n  EventFrom<typeof CreateKafkaInstanceMachine>,\n  \"type\"\n>[\"type\"];\n\ntype EventOptions<E extends EventTypes> = Omit<\n  EventFrom<typeof CreateKafkaInstanceMachine, E>,\n  \"type\"\n>;\n\nexport type CreateKafkaInstanceServices = {\n  checkStandardQuota: (events: {\n    onOutOfQuota: (p: EventOptions<\"out of standard quota\">) => void;\n    onQuotaAvailable: (p: EventOptions<\"standard quota available\">) => void;\n    onNoQuotaAvailable: (\n      p: EventOptions<\"no standard quota available\">\n    ) => void;\n  }) => void;\n  checkDeveloperAvailability: (events: {\n    onUsed: () => void;\n    onAvailable: () => void;\n    onUnavailable: () => void;\n  }) => void;\n  fetchProvidersWithRegions: (\n    plan: \"standard\" | \"developer\",\n    events: {\n      onAvailable: (p: EventOptions<\"providers and regions available\">) => void;\n      onUnavailable: () => void;\n    }\n  ) => void;\n  getStandardSizes: (\n    provider: CloudProvider,\n    region: CloudRegion\n  ) => Promise<StandardSizes>;\n  getTrialSizes: (\n    provider: CloudProvider,\n    region: CloudRegion\n  ) => Promise<TrialSizes>;\n  onCreate: (\n    data: CreateKafkaFormData,\n    onSuccess: () => void,\n    onError: (error: CreateKafkaInstanceError) => void\n  ) => void;\n};\n\nexport function makeCreateKafkaInstanceMachine({\n  checkStandardQuota: checkStandardQuotaCb,\n  checkDeveloperAvailability: checkDeveloperAvailabilityCb,\n  fetchProvidersWithRegions: fetchProvidersWithRegionsCb,\n  getStandardSizes: getStandardSizesCb,\n  getTrialSizes: getTrialSizesCb,\n  onCreate,\n}: CreateKafkaInstanceServices) {\n  return CreateKafkaInstanceMachine.withConfig({\n    services: {\n      checkStandardQuota: () => {\n        return (send) =>\n          checkStandardQuotaCb({\n            onNoQuotaAvailable: ({ hasTrialQuota }) => {\n              send({ type: \"no standard quota available\", hasTrialQuota });\n            },\n            onOutOfQuota: ({ quota }) => {\n              send({ type: \"out of standard quota\", quota });\n            },\n            onQuotaAvailable: ({ quota }) => {\n              send({ type: \"standard quota available\", quota });\n            },\n          });\n      },\n      checkDeveloperAvailability: () => {\n        return (send) => {\n          checkDeveloperAvailabilityCb({\n            onAvailable: () => send(\"developer available\"),\n            onUsed: () => send(\"developer used\"),\n            onUnavailable: () => send(\"developer unavailable\"),\n          });\n        };\n      },\n      fetchProvidersWithRegions: (context) => {\n        const instanceType = context.quota!.plan;\n        return (send) => {\n          fetchProvidersWithRegionsCb(instanceType, {\n            onAvailable: ({ providers, defaultProvider }) =>\n              send({\n                type: \"providers and regions available\",\n                providers,\n                defaultProvider,\n              }),\n            onUnavailable: () => send(\"providers or regions unavailable\"),\n          });\n        };\n      },\n      createInstance: (_context, event) => {\n        const form = event.data;\n\n        return (send) => {\n          function onSuccess() {\n            send(\"createSuccess\");\n          }\n\n          function onError(error: CreateKafkaInstanceError) {\n            send({ type: \"createError\", error });\n          }\n\n          onCreate(\n            {\n              plan: form.plan,\n              name: form.name,\n              provider: form.provider,\n              region: form.region,\n              sizeId: form.sizeId,\n              billing: form.billing,\n            },\n            onSuccess,\n            onError\n          );\n        };\n      },\n      standardPlan: (context) => {\n        return StandardPlanMachine.withContext({\n          capabilities: context.capabilities as StandardPlanInitializationData,\n          sizes: undefined,\n          form: {},\n          creationError: undefined,\n        }).withConfig({\n          services: {\n            getSizes: (context) => {\n              const form = context.form as Required<typeof context.form>;\n              return getStandardSizesCb(form.provider, form.region);\n            },\n          },\n        });\n      },\n      trialPlan: (context) => {\n        return TrialPlanMachine.withContext({\n          capabilities: context.capabilities as TrialPlanInitializationData,\n          sizes: undefined,\n          form: {},\n          creationError: undefined,\n        }).withConfig({\n          services: {\n            getSizes: (context) => {\n              const form = context.form as Required<typeof context.form>;\n              return getTrialSizesCb(form.provider, form.region);\n            },\n          },\n        });\n      },\n    },\n  });\n}\n","import { useInterpret } from \"@xstate/react\";\nimport type { FunctionComponent } from \"react\";\nimport { createContext } from \"react\";\nimport type { ActorRefFrom } from \"xstate\";\nimport type { CreateKafkaInstanceServices } from \"./CreateKafkaInstanceMachine\";\nimport { makeCreateKafkaInstanceMachine } from \"./CreateKafkaInstanceMachine\";\n\nexport const CreateKafkaInstanceContext = createContext<{\n  service: ActorRefFrom<ReturnType<typeof makeCreateKafkaInstanceMachine>>;\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n}>(null!);\n\nexport const CreateKafkaInstanceProvider: FunctionComponent<\n  CreateKafkaInstanceServices\n> = ({\n  onCreate,\n  checkStandardQuota,\n  checkDeveloperAvailability,\n  fetchProvidersWithRegions,\n  getStandardSizes,\n  getTrialSizes,\n  children,\n}) => {\n  const service = useInterpret(\n    () =>\n      makeCreateKafkaInstanceMachine({\n        checkStandardQuota,\n        checkDeveloperAvailability,\n        fetchProvidersWithRegions,\n        getStandardSizes,\n        getTrialSizes,\n        onCreate,\n      }),\n    { devTools: true }\n  );\n  return (\n    <CreateKafkaInstanceContext.Provider value={{ service }}>\n      {children}\n    </CreateKafkaInstanceContext.Provider>\n  );\n};\n","export const LogoAWS = new URL(\"./Logo-AWS.svg\", import.meta.url)\n  .href;\nexport const LogoAzure = new URL(\n  \"./Logo-Azure.svg\",\n  import.meta.url\n).href;\nexport const LogoGCP = new URL(\"./Logo-GCP.svg\", import.meta.url)\n  .href;\nexport const LogoRedhat = new URL(\n  \"./Logo-Redhat.svg\",\n  import.meta.url\n).href;","import type { FunctionComponent } from \"react\";\nimport { LogoAWS } from \"./images\";\n\nexport const AWSLogo: FunctionComponent = () => {\n  return (\n    <>\n      <img src={LogoAWS} alt={\"\"} style={{ height: \"60px\" }} />\n    </>\n  );\n};\n","import type { FunctionComponent } from \"react\";\nimport { LogoAzure } from \"./images\";\n\nexport const AzureLogo: FunctionComponent = () => {\n  return (\n    <>\n      <img src={LogoAzure} alt={\"\"} style={{ height: \"60px\" }} />\n    </>\n  );\n};\n","import type { FunctionComponent } from \"react\";\nimport { LogoGCP } from \"./images\";\n\nexport const GCPLogo: FunctionComponent = () => {\n  return (\n    <>\n      <img src={LogoGCP} alt={\"\"} style={{ height: \"60px\" }} />\n    </>\n  );\n};\n","import type { SelectProps } from \"@patternfly/react-core\";\nimport {\n  Flex,\n  FlexItem,\n  FormSelect,\n  FormSelectOption,\n  Gallery,\n  GalleryItem,\n  HelperText,\n  HelperTextItem,\n  Tile,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport type { MarketPlace } from \"ui-models/src/models/kafka\";\nimport { AWSLogo, AzureLogo, GCPLogo, RedhatLogo } from \"../../Logos\";\n\nexport type BillingTilesProps = {\n  value: \"prepaid\" | string | undefined;\n  hasPrepaid: boolean;\n  subscriptions: {\n    marketplace: MarketPlace;\n    subscription: string;\n    isDisabled: boolean;\n  }[];\n  isPrepaidOverQuota: boolean;\n  prepaidQuota: number;\n  isMarketplaceOverQuota: boolean;\n  marketplaceQuota: number;\n  onPrepaid: () => void;\n  onSubscription: (marketplace: MarketPlace, subscription: string) => void;\n  validated?: SelectProps[\"validated\"];\n};\nexport const BillingTiles: VoidFunctionComponent<BillingTilesProps> = ({\n  value,\n  hasPrepaid,\n  subscriptions,\n  isPrepaidOverQuota,\n  prepaidQuota,\n  isMarketplaceOverQuota,\n  marketplaceQuota,\n  onPrepaid,\n  onSubscription,\n  validated,\n}) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n  const marketplaces: { [key in MarketPlace]: string } = {\n    aws: t(\"billing.marketplace_aws\"),\n    azure: t(\"billing.marketplace_azure\"),\n    gcp: t(\"billing.marketplace_gcp\"),\n    rhm: t(\"billing.marketplace_rh\"),\n  };\n  return (\n    <>\n      <Flex\n        role=\"listbox\"\n        aria-label={t(\"select_billing\")}\n        direction={{ default: \"column\", md: \"row\" }}\n      >\n        {hasPrepaid && (\n          <Flex\n            flex={{ default: \"flex_1\" }}\n            direction={{ default: \"column\" }}\n            spaceItems={{ default: \"spaceItemsSm\" }}\n          >\n            <span className=\"pf-c-form__label\">\n              <span className=\"pf-c-form__label-text\">\n                {t(\"billing.prepaid\")}\n              </span>\n            </span>\n            <FlexItem flex={{ default: \"flex_1\" }}>\n              <Tile\n                className={\"pf-u-w-100\"}\n                title={t(\"billing.prepaid_option\")}\n                icon={tiles[\"rhm\"]}\n                isDisabled={isPrepaidOverQuota}\n                isStacked={true}\n                isSelected={value === \"prepaid\"}\n                onClick={onPrepaid}\n              >\n                &nbsp;\n              </Tile>\n            </FlexItem>\n            {isPrepaidOverQuota && prepaidQuota > 0 && (\n              <HelperText className={\"pf-c-form__helper-text\"}>\n                <HelperTextItem variant={\"error\"}>\n                  {t(\"billing.prepaid_out_of_quota\")}\n                </HelperTextItem>\n              </HelperText>\n            )}\n            {isPrepaidOverQuota && prepaidQuota === 0 && (\n              <HelperText className={\"pf-c-form__helper-text\"}>\n                <HelperTextItem variant={\"error\"}>\n                  {t(\"billing.prepaid_out_of_quota\")}\n                </HelperTextItem>\n              </HelperText>\n            )}\n          </Flex>\n        )}\n        {subscriptions.length > 0 && (\n          <Flex\n            flex={{ default: \"flex_1\" }}\n            direction={{ default: \"column\" }}\n            spaceItems={{ default: \"spaceItemsSm\" }}\n          >\n            {hasPrepaid && (\n              <span className=\"pf-c-form__label\">\n                <span className=\"pf-c-form__label-text\">\n                  {t(\"billing.marketplace\")}\n                </span>\n              </span>\n            )}\n            <Gallery hasGutter={true}>\n              {subscriptions.map(\n                ({ marketplace, subscription, isDisabled }) => (\n                  <GalleryItem key={`tile-${subscription}`}>\n                    <Tile\n                      className={\"pf-u-w-100\"}\n                      title={marketplaces[marketplace]}\n                      icon={tiles[marketplace]}\n                      isStacked={true}\n                      isSelected={value === subscription}\n                      isDisabled={isDisabled || isMarketplaceOverQuota}\n                      onClick={() => onSubscription(marketplace, subscription)}\n                    >\n                      {subscription}\n                    </Tile>\n                  </GalleryItem>\n                )\n              )}\n            </Gallery>\n            {isMarketplaceOverQuota && marketplaceQuota > 0 && (\n              <HelperText className={\"pf-c-form__helper-text\"}>\n                <HelperTextItem variant={\"error\"}>\n                  {t(\"billing.marketplace_out_of_quota\")}\n                </HelperTextItem>\n              </HelperText>\n            )}\n            {isMarketplaceOverQuota && marketplaceQuota === 0 && (\n              <HelperText className={\"pf-c-form__helper-text\"}>\n                <HelperTextItem variant={\"error\"}>\n                  {t(\"billing.marketplace_out_of_quota\")}\n                </HelperTextItem>\n              </HelperText>\n            )}\n          </Flex>\n        )}\n      </Flex>\n      <FormSelect\n        className={\"pf-u-display-none\"}\n        value={value}\n        id=\"form-billing-option\"\n        name=\"billing\"\n        validated={validated}\n        onChange={(value) => {\n          if (value === \"prepaid\") {\n            onPrepaid();\n          } else {\n            const s = subscriptions.find((s) => s.marketplace === value);\n            if (s) {\n              onSubscription(s.marketplace, s.subscription);\n            }\n          }\n        }}\n      >\n        {[\n          <FormSelectOption\n            value=\"\"\n            key=\"placeholder\"\n            label={t(\"select_billing\")}\n          />,\n          hasPrepaid ? (\n            <FormSelectOption\n              key={\"prepaid\"}\n              value={\"prepaid\"}\n              label={`prepaid`}\n            />\n          ) : null,\n          subscriptions.map(({ marketplace, subscription, isDisabled }) => {\n            return (\n              <FormSelectOption\n                key={`select-option-${subscription}`}\n                value={subscription}\n                label={`${marketplace} - ${subscription}`}\n                isDisabled={isDisabled}\n              />\n            );\n          }),\n        ]}\n      </FormSelect>\n    </>\n  );\n};\n\nconst tiles: { [id in MarketPlace]: JSX.Element } = {\n  aws: <AWSLogo />,\n  gcp: <GCPLogo />,\n  azure: <AzureLogo />,\n  rhm: <RedhatLogo />,\n};\n","import type { FunctionComponent } from \"react\";\nimport { LogoRedhat } from \"./images\";\n\nexport const RedhatLogo: FunctionComponent = () => {\n  return (\n    <>\n      <img src={LogoRedhat} alt={\"\"} style={{ height: \"60px\" }} />\n    </>\n  );\n};\n","import type { SelectProps } from \"@patternfly/react-core\";\nimport {\n  Flex,\n  FlexItem,\n  FormSelect,\n  FormSelectOption,\n  Skeleton,\n  Tile,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport type { CloudProvider } from \"ui-models/src/models/kafka\";\nimport { AWSLogo, AzureLogo, GCPLogo } from \"../../Logos\";\nimport type { CloudProviderInfo } from \"../types\";\n\nexport type CloudProvidersTilesProps = {\n  providers: (CloudProviderInfo & { isDisabled?: boolean })[];\n  value: CloudProvider | undefined;\n  onChange: (provider: CloudProvider) => void;\n  isDisabled: boolean;\n  validated?: SelectProps[\"validated\"];\n};\nexport const CloudProvidersTiles: VoidFunctionComponent<\n  CloudProvidersTilesProps\n> = ({ providers, value, onChange, isDisabled, validated }) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n  return (\n    <>\n      {providers.length === 0 && (\n        <Skeleton\n          className=\"pf-m-text-4xl\"\n          screenreaderText=\"Loading contents\"\n        />\n      )}\n      <div role=\"listbox\" aria-label={t(\"select_cloud_provider\")}>\n        <Flex\n          justifyContent={{ default: \"justifyContentSpaceBetween\" }}\n          spacer={{ default: \"spacerNone\" }}\n          spaceItems={{ default: \"spaceItemsXs\" }}\n        >\n          {providers.map(\n            ({ id, displayName, isDisabled: providerDisabled }) => (\n              <FlexItem grow={{ default: \"grow\" }} key={id}>\n                <Tile\n                  className={\"pf-u-w-100\"}\n                  title={displayName}\n                  icon={tiles[id]}\n                  isStacked={true}\n                  isSelected={value === id}\n                  isDisabled={providerDisabled || isDisabled}\n                  onClick={() => onChange(id)}\n                >\n                  {(providerDisabled || isDisabled) &&\n                    t(\"billing.provider_incompatible_with_current_billing\")}\n                  &nbsp;\n                </Tile>\n              </FlexItem>\n            )\n          )}\n        </Flex>\n      </div>\n      <FormSelect\n        className={\"pf-u-display-none\"}\n        value={value}\n        id=\"form-cloud-provider-option\"\n        name=\"cloud-provider\"\n        isDisabled={isDisabled}\n        validated={validated}\n        onChange={(value) => onChange(value as CloudProvider)}\n      >\n        {[\n          <FormSelectOption\n            value=\"\"\n            key=\"placeholder\"\n            label={t(\"select_cloud_provider\")}\n          />,\n          providers.map(({ id, displayName }, index) => {\n            return (\n              <FormSelectOption key={index} value={id} label={displayName} />\n            );\n          }),\n        ]}\n      </FormSelect>\n    </>\n  );\n};\n\nconst tiles: { [id in CloudProvider]: JSX.Element } = {\n  aws: <AWSLogo />,\n  gcp: <GCPLogo />,\n  azure: <AzureLogo />,\n};\n","import { Flex, FlexItem, Form } from \"@patternfly/react-core\";\nimport type { FormEvent, VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport type { CloudProvider, MarketPlace } from \"ui-models/src/models/kafka\";\nimport type {\n  FieldInstanceNameProps,\n  FieldSizeProps,\n  InstanceInfoProps,\n} from \"./components\";\nimport {\n  FieldAZ,\n  FieldBillingTiles,\n  FieldCloudProvider,\n  FieldCloudRegion,\n  FieldInstanceName,\n  FieldSize,\n  FormAlerts,\n  InstanceInfo,\n  InstanceInfoSkeleton,\n  ModalAlertsStandardPlan,\n} from \"./components\";\nimport { useStandardPlanMachine } from \"./machines\";\n\nexport type StandardInstanceFormProps = {\n  formId: string;\n  onClickContactUs: () => void;\n  onLearnHowToAddStreamingUnits: () => void;\n  onLearnMoreAboutSizes: () => void;\n  onClickQuickStart: () => void;\n  subscriptionOptionsHref: string;\n};\n\nexport const StandardInstanceForm: VoidFunctionComponent<\n  StandardInstanceFormProps\n> = ({\n  formId,\n  onClickContactUs,\n  onLearnHowToAddStreamingUnits,\n  onLearnMoreAboutSizes,\n  onClickQuickStart,\n  subscriptionOptionsHref,\n}) => {\n  const {\n    isBillingSelectionRequired,\n    isBillingSingleMarketplace,\n    capabilities,\n    selectedSize,\n    billingType,\n    error,\n    onCreate,\n  } = useStandardPlanMachine();\n\n  const onSubmit = useCallback(\n    (event: FormEvent<HTMLFormElement>) => {\n      event.preventDefault();\n      onCreate();\n    },\n    [onCreate]\n  );\n\n  const instanceInfoBilling: InstanceInfoProps[\"billing\"] = (() => {\n    if (!isBillingSelectionRequired) {\n      if (isBillingSingleMarketplace === false) {\n        return {\n          value: \"prepaid\",\n          subscriptionOptionsHref,\n          type: billingType,\n        };\n      } else {\n        return {\n          value: isBillingSingleMarketplace,\n          subscriptionOptionsHref,\n          type: billingType,\n        };\n      }\n    }\n    return undefined;\n  })();\n\n  return (\n    <>\n      <ModalAlertsStandardPlan\n        instanceAvailability={capabilities.instanceAvailability}\n        onClickContactUs={onClickContactUs}\n      />\n\n      <Flex\n        direction={{ default: \"column\", lg: \"row\" }}\n        alignItems={{ lg: \"alignItemsFlexStart\" }}\n      >\n        <FlexItem flex={{ default: \"flex_2\" }}>\n          <FormAlerts error={error} onClickContactUS={onClickContactUs} />\n          <Form onSubmit={onSubmit} id={formId}>\n            <ConnectedFieldInstanceName />\n            <ConnectedFieldCloudProvider />\n            <ConnectedFieldCloudRegion />\n            <ConnectedFieldAZ />\n            <ConnectedFieldSize\n              onLearnHowToAddStreamingUnits={onLearnHowToAddStreamingUnits}\n              onLearnMoreAboutSizes={onLearnMoreAboutSizes}\n            />\n            {isBillingSelectionRequired && (\n              <ConnectedBillingTiles\n                subscriptionOptionsHref={subscriptionOptionsHref}\n              />\n            )}\n          </Form>\n        </FlexItem>\n        <FlexItem\n          flex={{ default: \"flex_1\" }}\n          className=\"mas--CreateKafkaInstance__sidebar\"\n        >\n          {selectedSize === undefined ? (\n            <InstanceInfoSkeleton\n              isTrial={false}\n              onClickQuickStart={onClickQuickStart}\n            />\n          ) : (\n            <InstanceInfo\n              isTrial={false}\n              trialDurationInHours={undefined}\n              ingress={selectedSize.ingress}\n              egress={selectedSize.egress}\n              storage={selectedSize.storage}\n              maxPartitions={selectedSize.maxPartitions}\n              connections={selectedSize.connections}\n              connectionRate={selectedSize.connectionRate}\n              messageSize={selectedSize.messageSize}\n              onClickQuickStart={onClickQuickStart}\n              streamingUnits={selectedSize.displayName}\n              billing={instanceInfoBilling}\n            />\n          )}\n        </FlexItem>\n      </Flex>\n    </>\n  );\n};\n\nexport const ConnectedFieldInstanceName: VoidFunctionComponent = () => {\n  const {\n    form,\n    isNameTaken,\n    isNameInvalid,\n    isNameEmpty,\n    isNameError,\n    isFormEnabled,\n    setName,\n  } = useStandardPlanMachine();\n\n  const validity: FieldInstanceNameProps[\"validity\"] = (() => {\n    if (isNameTaken) {\n      return \"taken\";\n    } else if (isNameInvalid) {\n      return \"invalid\";\n    } else if (isNameEmpty && isNameError) {\n      return \"required\";\n    }\n    return \"valid\";\n  })();\n\n  return (\n    <FieldInstanceName\n      value={form.name || \"\"}\n      validity={validity}\n      isDisabled={!isFormEnabled}\n      onChange={setName}\n    />\n  );\n};\n\nexport const ConnectedFieldCloudProvider: VoidFunctionComponent = () => {\n  const {\n    form,\n    capabilities,\n    isProviderError,\n    isFormEnabled,\n    isBillingSingleMarketplace,\n    setProvider,\n  } = useStandardPlanMachine();\n\n  const providers =\n    isBillingSingleMarketplace &&\n    isBillingSingleMarketplace.marketplace !== \"rhm\"\n      ? capabilities.availableProviders.map((p) => ({\n          ...p,\n          isDisabled: p.id !== isBillingSingleMarketplace.marketplace,\n        }))\n      : capabilities.availableProviders;\n\n  return (\n    <FieldCloudProvider\n      isValid={!isProviderError}\n      providers={providers}\n      value={form.provider}\n      isDisabled={!isFormEnabled}\n      onChange={setProvider}\n    />\n  );\n};\n\nexport const ConnectedFieldCloudRegion: VoidFunctionComponent = () => {\n  const {\n    form,\n    selectedProvider,\n    selectedSize,\n    isRegionError,\n    isFormEnabled,\n    capabilities,\n    error,\n    setRegion,\n  } = useStandardPlanMachine();\n\n  return (\n    <FieldCloudRegion\n      validity={\n        isRegionError\n          ? \"required\"\n          : error === \"region-unavailable\" ||\n            capabilities.instanceAvailability === \"regions-unavailable\"\n          ? \"region-unavailable\"\n          : \"valid\"\n      }\n      regions={selectedProvider?.regions}\n      value={form.region}\n      isDisabled={!isFormEnabled}\n      isSizeUnavailable={selectedSize?.isDisabled || false}\n      onChange={setRegion}\n    />\n  );\n};\n\nexport const ConnectedFieldAZ: VoidFunctionComponent = () => {\n  const { isFormEnabled } = useStandardPlanMachine();\n\n  return (\n    <FieldAZ\n      validity={\"valid\"}\n      options={\"multi\"}\n      value={\"multi\"}\n      isDisabled={!isFormEnabled}\n      onChange={() => false} // AZ is defined by the backend, we just visualize the value here\n    />\n  );\n};\n\nexport const ConnectedFieldSize: VoidFunctionComponent<\n  Pick<\n    FieldSizeProps,\n    \"onLearnHowToAddStreamingUnits\" | \"onLearnMoreAboutSizes\"\n  >\n> = ({ onLearnHowToAddStreamingUnits, onLearnMoreAboutSizes }) => {\n  const {\n    form,\n    sizes,\n    isSizeOverQuota,\n    isSizeDisabled,\n    isSizeError,\n    isSizeLoadingError,\n    isBillingSelectionRequired,\n    isFormEnabled,\n    isLoadingSizes,\n    isLoading,\n    setSize,\n    remainingQuota,\n  } = useStandardPlanMachine();\n\n  return (\n    <FieldSize\n      value={form.size?.quota}\n      sizes={sizes}\n      remainingQuota={isBillingSelectionRequired ? undefined : remainingQuota}\n      isDisabled={!isFormEnabled || sizes === undefined}\n      isLoading={isLoading || isLoadingSizes}\n      isError={isSizeError}\n      isLoadingError={isSizeLoadingError}\n      validity={\n        isSizeOverQuota ? \"out-of-quota\" : isSizeDisabled ? \"required\" : \"valid\"\n      }\n      onChange={setSize}\n      onLearnHowToAddStreamingUnits={onLearnHowToAddStreamingUnits}\n      onLearnMoreAboutSizes={onLearnMoreAboutSizes}\n    />\n  );\n};\n\nfunction isMarketplaceDisabled(\n  marketplace: MarketPlace,\n  selectedProvider: CloudProvider | undefined\n) {\n  if (marketplace === \"rhm\") {\n    return false;\n  } else if (selectedProvider) {\n    return marketplace !== selectedProvider;\n  }\n  return false;\n}\n\nexport const ConnectedBillingTiles: VoidFunctionComponent<{\n  subscriptionOptionsHref: string;\n}> = ({ subscriptionOptionsHref }) => {\n  const {\n    form,\n    capabilities,\n    selectedBilling,\n    billingType,\n    isBillingPrepaidAvailable,\n    isSizeOverQuota,\n    isBillingError,\n    isBillingPrepaidOverQuota,\n    isBillingMarketplaceOverQuota,\n    setBillingPrepaid,\n    setBillingSubscription,\n  } = useStandardPlanMachine();\n\n  return (\n    <FieldBillingTiles\n      value={\n        selectedBilling === \"prepaid\"\n          ? \"prepaid\"\n          : selectedBilling?.subscription\n      }\n      hasPrepaid={isBillingPrepaidAvailable}\n      subscriptions={capabilities.marketplaceSubscriptions.flatMap((mq) =>\n        mq.subscriptions.map((subscription) => ({\n          marketplace: mq.marketplace,\n          subscription,\n          isDisabled: isMarketplaceDisabled(mq.marketplace, form.provider),\n        }))\n      )}\n      isPrepaidOverQuota={isBillingPrepaidOverQuota}\n      prepaidQuota={capabilities.remainingPrepaidQuota || 0} // we can default to 0 here just to make TS happy, we will have the info here\n      isMarketplaceOverQuota={isBillingMarketplaceOverQuota}\n      marketplaceQuota={capabilities.remainingMarketplaceQuota || 0} // we can default to 0 here just to make TS happy, we will have the info here\n      onPrepaid={setBillingPrepaid}\n      onSubscription={setBillingSubscription}\n      isValid={!isSizeOverQuota && !isBillingError}\n      billingType={billingType}\n      subscriptionOptionsHref={subscriptionOptionsHref}\n    />\n  );\n};\n","import { DropdownGroup } from \"@patternfly/react-core\";\nimport { ActionsColumn } from \"@patternfly/react-table\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\n\nexport type KafkaInstanceActionsProps = {\n  onDetails: () => void;\n  onConnection: () => void;\n  canOpenConnection: boolean;\n  canChangeOwner: boolean;\n  onChangeOwner: () => void;\n  canDelete: boolean;\n  onDelete: () => void;\n};\n\nexport const KafkaInstanceActions: VoidFunctionComponent<\n  KafkaInstanceActionsProps\n> = ({\n  onDetails,\n  onConnection,\n  canOpenConnection,\n  canChangeOwner,\n  onChangeOwner,\n  canDelete,\n  onDelete,\n}) => {\n  const { t } = useTranslation(\"kafka\");\n  return (\n    <ActionsColumn\n      rowData={hackZIndex}\n      items={[\n        {\n          customChild: (\n            <DropdownGroup\n              label={t(\"table.actions.view-instance-information\")}\n            />\n          ),\n        },\n        {\n          title: t(\"table.actions.details\"),\n          onClick: onDetails,\n        },\n        {\n          title: t(\"table.actions.connection\"),\n          ...(!canOpenConnection\n            ? {\n                isDisabled: true,\n                tooltipProps: {\n                  position: \"left\",\n                  content: t(\"kafka:no_permission_to_see_connections\"),\n                },\n                tooltip: true,\n                style: {\n                  pointerEvents: \"auto\",\n                  cursor: \"default\",\n                },\n              }\n            : {\n                onClick: onConnection,\n              }),\n        },\n        {\n          isSeparator: true,\n        },\n        {\n          title: t(\"table.actions.change-owner\"),\n          ...(!canChangeOwner\n            ? {\n                isDisabled: true,\n                tooltipProps: {\n                  position: \"left\",\n                  content: t(\"kafka:no_permission_to_change_owner\"),\n                },\n                tooltip: true,\n                style: {\n                  pointerEvents: \"auto\",\n                  cursor: \"default\",\n                },\n              }\n            : {\n                onClick: onChangeOwner,\n              }),\n        },\n        {\n          title: t(\"table.actions.delete\"),\n          ...(!canDelete\n            ? {\n                isDisabled: true,\n                tooltipProps: {\n                  position: \"left\",\n                  content: t(\"kafka:no_permission_to_delete_kafka\"),\n                },\n                tooltip: true,\n                style: {\n                  pointerEvents: \"auto\",\n                  cursor: \"default\",\n                },\n              }\n            : {\n                onClick: onDelete,\n              }),\n        },\n      ]}\n    />\n  );\n};\n\nconst hackZIndex = {\n  actionProps: {\n    style: { zIndex: 9999 },\n  },\n};\n","import {\n  Breadcrumb,\n  BreadcrumbItem,\n  Level,\n  LevelItem,\n  Nav,\n  NavItem,\n  NavList,\n  PageSection,\n  PageSectionVariants,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport type { KafkaInstanceActionsProps } from \"./KafkaInstanceActions\";\nimport { KafkaInstanceActions } from \"./KafkaInstanceActions\";\n\ntype Sections =\n  | \"dashboard\"\n  | \"topics\"\n  | \"consumer\"\n  | \"permissions\"\n  | \"settings\";\n\nexport type DataPlaneHeaderProps = {\n  instancesHref: string;\n  instanceName: string;\n  activeSection: Sections;\n  sectionsHref: { [key in Sections]: string };\n} & KafkaInstanceActionsProps;\n\nexport const DataPlaneHeader: VoidFunctionComponent<DataPlaneHeaderProps> = ({\n  instancesHref,\n  instanceName,\n  activeSection,\n  sectionsHref,\n  ...actionsProps\n}) => {\n  const { t } = useTranslation(\"kafka\");\n\n  return (\n    <>\n      <section className=\"pf-c-page__main-breadcrumb\">\n        <Breadcrumb ouiaId={\"breadcrumb\"}>\n          <BreadcrumbItem\n            render={() => (\n              <Link to={instancesHref}>{t(\"common:kafka_instance\")}</Link>\n            )}\n          />\n          <BreadcrumbItem isActive={true}>{instanceName}</BreadcrumbItem>\n        </Breadcrumb>\n      </section>\n      <PageSection variant={PageSectionVariants.light}>\n        <Level>\n          <LevelItem>\n            <TextContent>\n              <Text component=\"h1\">{instanceName}</Text>\n            </TextContent>\n          </LevelItem>\n          <LevelItem>\n            <KafkaInstanceActions {...actionsProps} />\n          </LevelItem>\n        </Level>\n      </PageSection>\n      <PageSection\n        variant={PageSectionVariants.light}\n        padding={{ default: \"noPadding\" }}\n        className=\"pf-c-page__main-tabs\"\n        hasShadowBottom={true}\n      >\n        <Nav\n          variant=\"tertiary\"\n          data-testid=\"pageKafka-tabProperties\"\n          className=\"pf-u-px-sm-on-xl\"\n        >\n          <NavList>\n            <NavItem\n              style={{ borderTop: 0 }}\n              data-testid=\"pageKafka-tabDashboard\"\n              id=\"dashboard-tab-section\"\n              aria-label={t(\"dataPlaneNavigation.dashboard\")}\n              ouiaId={\"tab-Dashboard\"}\n              isActive={activeSection === \"dashboard\"}\n            >\n              <Link to={sectionsHref[\"dashboard\"]}>\n                {t(\"dataPlaneNavigation.dashboard\")}\n              </Link>\n            </NavItem>\n            <NavItem\n              style={{ borderTop: 0 }}\n              data-testid=\"pageKafka-tabTopics\"\n              id=\"topics-tab-section\"\n              aria-label={t(\"dataPlaneNavigation.topics\")}\n              ouiaId={\"tab-Topics\"}\n              isActive={activeSection === \"topics\"}\n            >\n              <Link to={sectionsHref[\"topics\"]}>\n                {t(\"dataPlaneNavigation.topics\")}\n              </Link>\n            </NavItem>\n            <NavItem\n              style={{ borderTop: 0 }}\n              data-testid=\"pageKafka-tabConsumers\"\n              id=\"consumer-groups-tab-section\"\n              aria-label={t(\"dataPlaneNavigation.consumer_groups\")}\n              ouiaId={\"tab-Consumers\"}\n              isActive={activeSection === \"consumer\"}\n            >\n              <Link to={sectionsHref[\"consumer\"]}>\n                {t(\"dataPlaneNavigation.consumer_groups\")}\n              </Link>\n            </NavItem>\n            <NavItem\n              style={{ borderTop: 0 }}\n              data-testid=\"pageKafka-tabPermissions\"\n              id=\"permissions-tab-section\"\n              aria-label={t(\"dataPlaneNavigation.permissions\")}\n              ouiaId={\"tab-Permissions\"}\n              isActive={activeSection === \"permissions\"}\n            >\n              <Link to={sectionsHref[\"permissions\"]}>\n                {t(\"dataPlaneNavigation.permissions\")}\n              </Link>\n            </NavItem>\n            <NavItem\n              style={{ borderTop: 0 }}\n              data-testid=\"pageKafka-tabSettings\"\n              id=\"settings-tab-section\"\n              aria-label={t(\"dataPlaneNavigation.settings\")}\n              ouiaId={\"tab-Settings\"}\n              isActive={activeSection === \"settings\"}\n            >\n              <Link to={sectionsHref[\"settings\"]}>\n                {t(\"dataPlaneNavigation.settings\")}\n              </Link>\n            </NavItem>\n          </NavList>\n        </Nav>\n      </PageSection>\n    </>\n  );\n};\n","import {\n  Breadcrumb,\n  BreadcrumbItem,\n  Level,\n  LevelItem,\n  Nav,\n  NavItem,\n  NavList,\n  PageSection,\n  PageSectionVariants,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport type { KafkaInstanceActionsProps } from \"./KafkaInstanceActions\";\nimport { KafkaInstanceActions } from \"./KafkaInstanceActions\";\n\ntype Sections = \"consumer\" | \"messages\" | \"properties\" | \"schemas\";\n\nexport type DataPlaneTopicHeaderProps = {\n  instancesHref: string;\n  instanceName: string;\n  instanceDetailHref: string;\n  topicName: string;\n  activeSection: Sections;\n  sectionsHref: { [key in Sections]: string };\n} & KafkaInstanceActionsProps;\n\nexport const DataPlaneTopicHeader: VoidFunctionComponent<\n  DataPlaneTopicHeaderProps\n> = ({\n  instancesHref,\n  instanceName,\n  instanceDetailHref,\n  topicName,\n  activeSection,\n  sectionsHref,\n  ...actionsProps\n}) => {\n  const { t } = useTranslation(\"kafka\");\n\n  return (\n    <>\n      <section className=\"pf-c-page__main-breadcrumb\">\n        <Breadcrumb ouiaId={\"breadcrumb\"}>\n          <BreadcrumbItem\n            render={() => (\n              <Link to={instancesHref}>{t(\"common:kafka_instance\")}</Link>\n            )}\n          />{\" \"}\n          <BreadcrumbItem\n            render={() => <Link to={instanceDetailHref}>{instanceName}</Link>}\n          />\n          <BreadcrumbItem isActive={true}>{topicName}</BreadcrumbItem>\n        </Breadcrumb>\n      </section>\n      <PageSection variant={PageSectionVariants.light}>\n        <Level>\n          <LevelItem>\n            <TextContent>\n              <Text component=\"h1\">{topicName}</Text>\n            </TextContent>\n          </LevelItem>\n          <LevelItem>\n            <KafkaInstanceActions {...actionsProps} />\n          </LevelItem>\n        </Level>\n      </PageSection>\n      <PageSection\n        variant={PageSectionVariants.light}\n        padding={{ default: \"noPadding\" }}\n        className=\"pf-c-page__main-tabs\"\n        hasShadowBottom={true}\n      >\n        <Nav variant=\"tertiary\" className=\"pf-u-px-sm-on-xl\">\n          <NavList>\n            <NavItem\n              style={{ borderTop: 0 }}\n              aria-label={t(\"dataPlaneTopicNavigation.consumer_groups\")}\n              ouiaId={\"tab-Dashboard\"}\n              isActive={activeSection === \"consumer\"}\n            >\n              <Link to={sectionsHref[\"consumer\"]}>\n                {t(\"dataPlaneTopicNavigation.consumer_groups\")}\n              </Link>\n            </NavItem>\n            <NavItem\n              style={{ borderTop: 0 }}\n              aria-label={t(\"dataPlaneTopicNavigation.messages\")}\n              ouiaId={\"tab-Topics\"}\n              isActive={activeSection === \"messages\"}\n            >\n              <Link to={sectionsHref[\"messages\"]}>\n                {t(\"dataPlaneTopicNavigation.messages\")}\n              </Link>\n            </NavItem>\n            <NavItem\n              style={{ borderTop: 0 }}\n              aria-label={t(\"dataPlaneTopicNavigation.properties\")}\n              ouiaId={\"tab-Permissions\"}\n              isActive={activeSection === \"properties\"}\n            >\n              <Link to={sectionsHref[\"properties\"]}>\n                {t(\"dataPlaneTopicNavigation.properties\")}\n              </Link>\n            </NavItem>\n            <NavItem\n              style={{ borderTop: 0 }}\n              aria-label={t(\"dataPlaneTopicNavigation.schemas\")}\n              ouiaId={\"tab-Settings\"}\n              isActive={activeSection === \"schemas\"}\n            >\n              <Link to={sectionsHref[\"schemas\"]}>\n                {t(\"dataPlaneTopicNavigation.schemas\")}\n              </Link>\n            </NavItem>\n          </NavList>\n        </Nav>\n      </PageSection>\n    </>\n  );\n};\n","import type { DeleteModalProps } from \"@rhoas/app-services-ui-components\";\nimport {\n  DeleteModal,\n  Trans,\n  useTranslation,\n} from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\n\nexport type DeleteKafkaInstanceProps = {\n  instanceName: string | undefined;\n} & Omit<\n  DeleteModalProps,\n  \"title\" | \"variant\" | \"confirmationValue\" | \"children\"\n>;\n\nexport const DeleteKafkaInstance: VoidFunctionComponent<\n  DeleteKafkaInstanceProps\n> = ({ instanceName, ...props }) => {\n  const { t } = useTranslation(\"kafka\");\n\n  return (\n    <DeleteModal\n      {...props}\n      variant={\"destructive\"}\n      title={t(\"delete_instance_title\")}\n      confirmationValue={instanceName}\n    >\n      <Trans\n        ns={\"kafka\"}\n        i18nKey={\"delete_instance_message\"}\n        components={[<strong />]}\n        values={{\n          instanceName,\n        }}\n      />\n    </DeleteModal>\n  );\n};\n","import type { I18nProviderProps } from \"@rhoas/app-services-ui-components\";\nimport { I18nProvider as UiComponentsI18nProvider } from \"@rhoas/app-services-ui-components\";\nimport type { FunctionComponent } from \"react\";\n\nexport const I18nProvider: FunctionComponent<\n  Omit<I18nProviderProps, \"resources\">\n> = ({ lng, debug, children }) => {\n  return (\n    <UiComponentsI18nProvider\n      lng={lng}\n      resources={{\n        en: {\n          common: () =>\n            import(\"@rhoas/app-services-ui-components/locales/en/common.json\"),\n          \"create-kafka-instance\": () =>\n            import(\"locales/en/create-kafka-instance.json\"),\n          kafka: () => import(\"locales/en/kafka.json\"),\n          \"kafkaoverview-v3\": () => import(\"locales/en/kafkaoverview-v3.json\"),\n          metrics: () => import(\"locales/en/metrics.json\"),\n          topic: () => import(\"locales/en/topic.json\"),\n          \"manage-kafka-permissions\": () =>\n            import(\"locales/en/manage-kafka-permissions.json\"),\n          \"create-topic\": () => import(\"locales/en/create-topic.json\"),\n          \"message-browser\": () => import(\"locales/en/message-browser.json\"),\n          \"connection-tab\": () => import(\"locales/en/connection-tab.json\"),\n          \"connection-tab-p1\": () =>\n            import(\"locales/en/connection-tab-p1.json\"),\n        },\n        it: {\n          common: () => Promise.resolve({ delete: \"Elimina\" }),\n        },\n      }}\n      debug={debug}\n    >\n      {children}\n    </UiComponentsI18nProvider>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport type {\n  CloudProvider,\n  KafkaField,\n  SimplifiedStatus,\n  Status,\n} from \"ui-models/src/models/kafka\";\n\nexport function useKafkaLabels() {\n  const { t } = useTranslation(\"kafka\");\n\n  const statuses: { [status in Status]: string } = {\n    ready: t(\"statuses.ready\"),\n    degraded: t(\"statuses.degraded\"),\n    accepted: t(\"statuses.accepted\"),\n    provisioning: t(\"statuses.provisioning\"),\n    preparing: t(\"statuses.preparing\"),\n    deprovision: t(\"statuses.deprovision\"),\n    deleting: t(\"statuses.deleting\"),\n    suspended: t(\"statuses.suspended\"),\n    suspending: t(\"statuses.suspending\"),\n    resuming: t(\"statuses.resuming\"),\n  };\n  const statusesSimplified: { [status in SimplifiedStatus]: string } = {\n    creating: t(\"statusesSimplified.creating\"),\n    ready: t(\"statusesSimplified.ready\"),\n    degraded: t(\"statusesSimplified.degraded\"),\n    deleting: t(\"statusesSimplified.deleting\"),\n    suspended: t(\"statusesSimplified.suspended\"),\n    suspending: t(\"statusesSimplified.suspending\"),\n    resuming: t(\"statusesSimplified.resuming\"),\n  };\n  const providers: { [provider in CloudProvider]: string } = {\n    aws: t(\"common:cloudProviders.aws\"),\n    gcp: t(\"common:cloudProviders.gcp\"),\n    azure: t(\"common:cloudProviders.azure\"),\n  };\n  const providerRegions: {\n    [provider in CloudProvider]: { [region: string]: string };\n  } = {\n    aws: {},\n    gcp: {},\n    azure: {},\n  };\n  const fields: {\n    [field in KafkaField]: string;\n  } = {\n    id: t(\"fields.id\"),\n    name: t(\"fields.name\"),\n    createdAt: t(\"fields.createdAt\"),\n    updatedAt: t(\"fields.updatedAt\"),\n    expiryDate: t(\"fields.expiryDate\"),\n    owner: t(\"fields.owner\"),\n    provider: t(\"fields.provider\"),\n    region: t(\"fields.region\"),\n    status: t(\"fields.status\"),\n    plan: t(\"fields.plan\"),\n    size: t(\"fields.size\"),\n    ingress: t(\"fields.ingress\"),\n    egress: t(\"fields.egress\"),\n    storage: t(\"fields.storage\"),\n    maxPartitions: t(\"fields.maxPartitions\"),\n    connections: t(\"fields.connections\"),\n    connectionRate: t(\"fields.connectionRate\"),\n    messageSize: t(\"fields.messageSize\"),\n    billing: t(\"fields.billing\"),\n    adminUrl: t(\"fields.adminUrl\"),\n    bootstrapUrl: t(\"fields.bootstrapUrl\"),\n    version: t(\"fields.version\"),\n  };\n  return {\n    fields,\n    statuses,\n    statusesSimplified,\n    providers,\n    providerRegions,\n  };\n}\n","import { Alert } from \"@patternfly/react-core\";\nimport { differenceInHours } from \"date-fns\";\nimport type { FunctionComponent } from \"react\";\nimport { Trans } from \"@rhoas/app-services-ui-components\";\nimport { FormatDate } from \"@rhoas/app-services-ui-components\";\n\ntype DetailsTabAlertProps = {\n  expiryDate: Date;\n};\n\nexport const DetailsTabAlert: FunctionComponent<DetailsTabAlertProps> = ({\n  expiryDate,\n}) => {\n  const hoursLeft = expiryDate ? differenceInHours(expiryDate, Date.now()) : 0;\n  return (\n    <Alert\n      variant={\n        hoursLeft > 24\n          ? \"info\"\n          : hoursLeft < 24 && hoursLeft > 5\n          ? \"warning\"\n          : \"danger\"\n      }\n      title={\n        <Trans\n          i18nKey=\"kafka:will_expire\"\n          components={{\n            time: <FormatDate date={expiryDate} format=\"expiration\" />,\n          }}\n        />\n      }\n      aria-live=\"polite\"\n      isInline\n      className=\"pf-u-mb-lg\"\n    />\n  );\n};\n","import {\n  Skeleton,\n  TextContent,\n  TextList,\n  TextListItem,\n  TextListItemVariants,\n  TextListVariants,\n} from \"@patternfly/react-core\";\nimport { FormatDate, useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { ReactChild, VoidFunctionComponent } from \"react\";\nimport type { MarketplaceSubscription, Plan } from \"ui-models/src/models/kafka\";\nimport type { Bytes } from \"../../../../../ui-models/src/types\";\nimport { DetailsTabAlert } from \"./DetailsTabAlert\";\n\n/**\n * All fields marked as accepting undefined will show a skeleton loader until the value is available.\n * This is to support fetching the data from different APIs.\n */\nexport type KafkaDetailsTabProps = {\n  id: string;\n  createdAt: Date;\n  updatedAt: Date;\n  expiryDate: Date | undefined;\n  owner: string;\n  provider: string;\n  region: string;\n  instanceType: Plan;\n  size: string | undefined;\n  ingress: number | undefined;\n  egress: number | undefined;\n  storage: Bytes | undefined;\n  maxPartitions: number | undefined;\n  connections: number | undefined;\n  connectionRate: number | undefined;\n  messageSize: Bytes | undefined;\n  billing: \"prepaid\" | MarketplaceSubscription | undefined;\n  kafkaVersion: string;\n};\n\nexport const KafkaDetailsTab: VoidFunctionComponent<KafkaDetailsTabProps> = ({\n  id,\n  createdAt,\n  updatedAt,\n  owner,\n  provider,\n  region,\n  expiryDate,\n  instanceType,\n  size,\n  ingress,\n  egress,\n  storage,\n  maxPartitions,\n  connections,\n  connectionRate,\n  messageSize,\n  billing,\n  kafkaVersion,\n}) => {\n  const { t } = useTranslation(\"kafka\");\n\n  const renderTextListItem = (title: string, value: ReactChild | undefined) => (\n    <>\n      <TextListItem component={TextListItemVariants.dt}>{title}</TextListItem>\n      {value ? (\n        <TextListItem component={TextListItemVariants.dd}>{value}</TextListItem>\n      ) : (\n        <Skeleton\n          width=\"50%\"\n          screenreaderText={t(\"common:skeleton_loader_screenreader_text\", {\n            contentName: title,\n          })}\n        />\n      )}\n    </>\n  );\n  return (\n    <div className=\"mas--details__drawer--tab-content\">\n      {instanceType !== \"standard\" && expiryDate && (\n        <DetailsTabAlert expiryDate={expiryDate} />\n      )}\n      <TextContent>\n        <TextList component={TextListVariants.dl}>\n          {instanceType === \"standard\" &&\n            renderTextListItem(\n              t(\"common:size\"),\n              size\n                ? t(\"create-kafka-instance:streaming_size_value\", {\n                    value: size,\n                  })\n                : undefined\n            )}\n          {renderTextListItem(\n            t(\"ingress\"),\n            ingress\n              ? t(\"create-kafka-instance:ingress_value\", {\n                  value: ingress,\n                })\n              : undefined\n          )}\n          {renderTextListItem(\n            t(\"egress\"),\n            egress\n              ? t(\"create-kafka-instance:egress_value\", {\n                  value: egress,\n                })\n              : undefined\n          )}\n          {renderTextListItem(\n            t(\"storage\"),\n            storage\n              ? t(\"create-kafka-instance:storage_value\", {\n                  value: storage.value,\n                })\n              : undefined\n          )}\n          {renderTextListItem(\n            t(\"partitions\"),\n            maxPartitions\n              ? t(\"create-kafka-instance:partitions_value\", {\n                  value: maxPartitions,\n                })\n              : undefined\n          )}\n          {renderTextListItem(\n            t(\"client_connections\"),\n            connections\n              ? t(\"create-kafka-instance:client_connections_value\", {\n                  value: connections,\n                })\n              : undefined\n          )}\n          {renderTextListItem(\n            t(\"connection_rate\"),\n            connectionRate\n              ? t(\"create-kafka-instance:connection_rate_value\", {\n                  value: connectionRate,\n                })\n              : undefined\n          )}\n          {renderTextListItem(\n            t(\"message_size\"),\n            messageSize\n              ? t(\"create-kafka-instance:message_size_value\", {\n                  value: messageSize.value,\n                })\n              : undefined\n          )}\n\n          {renderTextListItem(t(\"common:id\"), id)}\n          {renderTextListItem(t(\"common:kafka_version\"), kafkaVersion)}\n          {renderTextListItem(t(\"common:owner\"), owner)}\n          {renderTextListItem(\n            t(\"common:time_created\"),\n            <FormatDate date={createdAt} format={\"long\"} />\n          )}\n          {renderTextListItem(\n            t(\"common:time_updated\"),\n            <FormatDate date={updatedAt} format={\"long\"} />\n          )}\n          {renderTextListItem(t(\"common:cloud_provider\"), provider)}\n          {renderTextListItem(t(\"common:region\"), region)}\n          {renderTextListItem(\n            t(\"create-kafka-instance:billing.field_label\"),\n            (() => {\n              if (billing === undefined) {\n                return undefined;\n              } else if (billing === \"prepaid\") {\n                return t(\"create-kafka-instance:billing.prepaid_option\");\n              } else {\n                switch (billing.marketplace) {\n                  case \"aws\":\n                    return (\n                      <>\n                        {t(\"create-kafka-instance:billing.marketplace_aws\")}\n                        <br />\n                        {billing.subscription}\n                      </>\n                    );\n                  case \"azure\":\n                    return (\n                      <>\n                        {t(\"create-kafka-instance:billing.marketplace_azure\")}\n                        <br />\n                        {billing.subscription}\n                      </>\n                    );\n                  case \"gcp\":\n                    return (\n                      <>\n                        {t(\"create-kafka-instance:billing.marketplace_gcp\")}\n                        <br />\n                        {billing.subscription}\n                      </>\n                    );\n                  case \"rhm\":\n                    return (\n                      <>\n                        {t(\"create-kafka-instance:billing.marketplace_rh\")}\n                        <br />\n                        {billing.subscription}\n                      </>\n                    );\n                }\n              }\n            })()\n          )}\n        </TextList>\n      </TextContent>\n    </div>\n  );\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from \"@patternfly/react-core\";\nimport { ExclamationTriangleIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const SuspendedConnection: VoidFunctionComponent = () => {\n  const { t } = useTranslation(\"kafka\");\n  return (\n    <EmptyState variant={EmptyStateVariant.small}>\n      <EmptyStateIcon icon={ExclamationTriangleIcon} color={\"#f0ab00\"} />\n      <Title headingLevel={\"h1\"} size={TitleSizes.lg}>\n        {t(\"suspend_empty_state_title\")}\n      </Title>\n      <EmptyStateBody>{t(\"suspend_empty_state_body\")}</EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import {\n  Button,\n  ButtonVariant,\n  ClipboardCopy,\n  ExpandableSection,\n  Label,\n  Popover,\n  Skeleton,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { HelpIcon } from \"@patternfly/react-icons\";\nimport {\n  ExternalLink,\n  Trans,\n  useTranslation,\n} from \"@rhoas/app-services-ui-components\";\nimport type { FunctionComponent } from \"react\";\nimport { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { SuspendedConnection } from \"./SuspendedConnection\";\n\nexport type KafkaConnectionTabP2Props = {\n  isKafkaSuspended?: boolean;\n  isKafkaPending?: boolean;\n  externalServer?: string;\n  tokenEndPointUrl: string;\n  linkToServiceAccount: string;\n  linkToAccessTab: string;\n  adminAPIUrl: string | undefined;\n  showCreateServiceAccountModal: () => void;\n  kafkaFleetManagerUrl: string;\n};\n\nexport const KafkaConnectionTabP2: FunctionComponent<\n  KafkaConnectionTabP2Props\n> = ({\n  isKafkaSuspended,\n  isKafkaPending,\n  externalServer,\n  tokenEndPointUrl,\n  linkToServiceAccount,\n  linkToAccessTab,\n  adminAPIUrl,\n  kafkaFleetManagerUrl,\n  showCreateServiceAccountModal,\n}) => {\n  const { t } = useTranslation();\n\n  const [isExpanded, setIsExpanded] = useState<boolean>(false);\n\n  const onChangeExpandedSection = () => {\n    setIsExpanded(!isExpanded);\n  };\n\n  return isKafkaSuspended ? (\n    <SuspendedConnection />\n  ) : (\n    <div className=\"mas--details__drawer--tab-content\">\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.small}>\n          {t(\"connection-tab:drawer_resource_tab_body_description_1\")}\n        </Text>\n        <Text component={TextVariants.h3} className=\"pf-u-mt-xl\">\n          {t(\"connection-tab:bootstrap_server\")}\n        </Text>\n        <Text component={TextVariants.small}>\n          {t(\"connection-tab:bootstrap_server_description\")}\n        </Text>\n        {isKafkaPending ? (\n          <Skeleton fontSize=\"2xl\" />\n        ) : (\n          <ClipboardCopy\n            data-testid=\"drawerStreams-copyBootstrapURL\"\n            textAriaLabel={t(\"connection-tab:bootstrap_server\")}\n            isReadOnly\n          >\n            {externalServer}\n          </ClipboardCopy>\n        )}\n      </TextContent>\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.h3} className=\"pf-u-mt-xl\">\n          {t(\"connection-tab:service_accounts_small\")}\n        </Text>\n        <Text component={TextVariants.small}>\n          {\n            <Trans\n              i18nKey={\n                \"connection-tab:create_service_account_to_generate_credentials\"\n              }\n              components={{\n                value: (\n                  <Link\n                    to={linkToServiceAccount}\n                    data-testid=\"tableStreams-linkKafka\"\n                  ></Link>\n                ),\n              }}\n            />\n          }\n        </Text>\n      </TextContent>\n      <Button\n        variant={ButtonVariant.secondary}\n        isInline\n        onClick={showCreateServiceAccountModal}\n        data-testid=\"drawerStreams-buttonCreateServiceAccount\"\n      >\n        {t(\"connection-tab:create_service_account\")}\n      </Button>\n      <TextContent className=\"pf-u-pt-sm\">\n        <Text component={TextVariants.small}>\n          {\n            <Trans\n              i18nKey={\"connection-tab:current_instance\"}\n              components={{\n                value: <Link to={linkToAccessTab}></Link>,\n              }}\n            />\n          }\n        </Text>\n      </TextContent>\n      <TextContent className=\"pf-u-pb-sm\">\n        <ExpandableSection\n          toggleContent={\n            <div className=\"pf-c-content\">\n              <Text component={TextVariants.h3} className={\"pf-c-content\"}>\n                {t(\"connection-tab:rest_api_header\")}\n              </Text>\n            </div>\n          }\n          isExpanded={isExpanded}\n          onToggle={onChangeExpandedSection}\n          className=\"pf-u-mt-lg\"\n        >\n          <TextContent className=\"pf-u-pb-sm\">\n            <Text component={TextVariants.small}>\n              {t(\"connection-tab:rest_api_description\")}\n            </Text>\n          </TextContent>\n          <TextContent>\n            <strong>\n              {t(\"connection-tab:kafka_instance_url_label\")}\n              <Popover\n                headerContent={\n                  <div>\n                    {t(\"connection-tab:kafka_instance_url_popover_label\")}\n                  </div>\n                }\n                bodyContent={\n                  <TextContent>\n                    <p>{t(\"connection-tab:kafka_instance_url_popover_body\")}</p>\n                    <p>\n                      <Trans\n                        ns={\"connection-tab\"}\n                        i18nKey={\"popover_helper_text\"}\n                        components={[\n                          <Button\n                            isInline\n                            variant={ButtonVariant.link}\n                            component=\"a\"\n                            href=\"https://console.redhat.com/docs/api/kafkainstance?github-owner=redhat-developer&github-repo=app-services-sdk-core&github-content=kafka-admin-rest.yaml%3Fref%3Ddoc-portal&readonly=true\"\n                          />,\n                          <ExternalLink\n                            testId={\"customerPortal-link\"}\n                            href=\"https://access.redhat.com/documentation/en-us/red_hat_openshift_application_services/1/guide/2409253a-45ee-470e-bdc9-5db4bfcf9d0f\"\n                            className={\"pf-u-ml-xs\"}\n                          />,\n                        ]}\n                      />\n                    </p>\n                  </TextContent>\n                }\n              >\n                <Button\n                  variant={ButtonVariant.plain}\n                  aria-label={t(\n                    \"connection-tab:kafka_instance_url_button_aria_label\"\n                  )}\n                >\n                  <HelpIcon />\n                </Button>\n              </Popover>\n            </strong>\n            {adminAPIUrl ? (\n              <ClipboardCopy\n                textAriaLabel={t(\"connection-tab:kafka_instance_url_label\")}\n                isReadOnly\n              >\n                {adminAPIUrl}\n              </ClipboardCopy>\n            ) : (\n              <Skeleton fontSize=\"2xl\" />\n            )}\n            <TextContent className=\"pf-u-pt-sm\">\n              <Text component={TextVariants.small}>\n                {t(\"connection-tab:kafka_instance_url_description\")}\n              </Text>\n            </TextContent>\n          </TextContent>\n          <TextContent className=\"pf-u-mt-md\">\n            <strong>\n              {t(\"connection-tab:kafka_management_url\")}\n              <Popover\n                headerContent={\n                  <div>\n                    {t(\"connection-tab:kafka_management_popover_header\")}\n                  </div>\n                }\n                bodyContent={\n                  <TextContent>\n                    <p>{t(\"connection-tab:kafka_management_popover_body\")}</p>\n                    <p>\n                      <Trans\n                        ns={\"connection-tab\"}\n                        i18nKey={\"popover_helper_text\"}\n                        components={[\n                          <Button\n                            isInline\n                            variant={ButtonVariant.link}\n                            component=\"a\"\n                            href=\"https://console.redhat.com/docs/api/kafkamgmt?github-owner=redhat-developer&github-repo=app-services-sdk-core&github-content=kas-fleet-manager.yaml%3Fref%3Ddoc-portal\"\n                          />,\n                          <ExternalLink\n                            testId={\"customerPortal-link\"}\n                            href=\"https://access.redhat.com/documentation/en-us/red_hat_openshift_application_services/1/guide/2409253a-45ee-470e-bdc9-5db4bfcf9d0f\"\n                            className={\"pf-u-ml-xs\"}\n                          />,\n                        ]}\n                      />\n                    </p>\n                  </TextContent>\n                }\n              >\n                <Button\n                  variant={ButtonVariant.plain}\n                  aria-label={t(\n                    \"connection-tab:kafka_management_button_aria_label\"\n                  )}\n                >\n                  <HelpIcon />\n                </Button>\n              </Popover>\n            </strong>\n            {isKafkaPending ? (\n              <Skeleton fontSize=\"2xl\" />\n            ) : (\n              <ClipboardCopy\n                textAriaLabel={t(\"connection-tab:kafka_management_url\")}\n                isReadOnly\n              >\n                {kafkaFleetManagerUrl}\n              </ClipboardCopy>\n            )}\n            <TextContent className=\"pf-u-pt-sm\">\n              <Text component={TextVariants.small}>\n                {t(\"connection-tab:kafka_management_description\")}\n              </Text>\n            </TextContent>\n          </TextContent>\n        </ExpandableSection>\n      </TextContent>\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.h3} className=\"pf-u-mt-xl\">\n          {t(\"connection-tab:authentication_method\")}\n        </Text>\n        <Text component={TextVariants.h4} className=\"pf-u-mt-md\">\n          {t(\"connection-tab:sasl_oauthbearer\")}{\" \"}\n          <Label color=\"green\">{t(\"connection-tab:recommended\")}</Label>\n          <Popover\n            aria-label={t(\"connection-tab:sasl_oauthbearer\")}\n            bodyContent={\n              <div>{t(\"connection-tab:sasl_oauthbearer_popover_content\")}</div>\n            }\n          >\n            <Button\n              variant={ButtonVariant.plain}\n              aria-label={t(\"connection-tab:more_info_about_sasl_oauthbearer\")}\n            >\n              <HelpIcon />\n            </Button>\n          </Popover>\n        </Text>\n        <Text component={TextVariants.small}>\n          {t(\"connection-tab:sasl_oauthbearer_description\")}\n        </Text>\n        <strong>{t(\"connection-tab:token_endpoint_url\")}</strong>\n        {isKafkaPending ? (\n          <Skeleton fontSize=\"2xl\" />\n        ) : (\n          <ClipboardCopy\n            textAriaLabel={t(\"connection-tab:token_endpoint_url\")}\n            isReadOnly\n          >\n            {tokenEndPointUrl}\n          </ClipboardCopy>\n        )}\n      </TextContent>\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.h4} className=\"pf-u-mt-md\">\n          {t(\"connection-tab:sasl_plain\")}\n        </Text>\n        <Text component={TextVariants.small}>\n          {t(\"connection-tab:sasl_plain_description\")}\n        </Text>\n      </TextContent>\n    </div>\n  );\n};\n","import type { TabsProps } from \"@patternfly/react-core\";\nimport {\n  Drawer,\n  DrawerActions,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerContentBody,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerPanelContent,\n  Tab,\n  Tabs,\n  TabTitleText,\n  Text,\n  TextContent,\n  TextVariants,\n  Title,\n  TitleSizes,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { parseISO } from \"date-fns\";\nimport type { FunctionComponent, VoidFunctionComponent } from \"react\";\nimport { useCallback, useMemo } from \"react\";\nimport type { Kafka } from \"ui-models/src/models/kafka\";\nimport { CreatingStatuses } from \"ui-models/src/models/kafka\";\nimport { useKafkaLabels } from \"../../hooks\";\nimport { KafkaConnectionTabP2, KafkaDetailsTab } from \"./components\";\n\nexport type KafkaInstanceDrawerProps = {\n  instance?: Kafka;\n  isExpanded: boolean;\n  activeTab: KafkaInstanceDrawerTab;\n  onTabChange: (tab: KafkaInstanceDrawerTab) => void;\n\n  onClose: () => void;\n};\n\nexport const KafkaInstanceDrawer: FunctionComponent<\n  KafkaInstanceDrawerProps\n> = ({ instance, activeTab, isExpanded, onTabChange, onClose, children }) => {\n  const content = useMemo(() => {\n    return (\n      <DrawerPanelContent>\n        {instance ? (\n          <KafkaInstanceDrawerPanel\n            instance={instance}\n            activeTab={activeTab}\n            onTabChange={onTabChange}\n            onClose={onClose}\n          />\n        ) : null}\n      </DrawerPanelContent>\n    );\n  }, [activeTab, instance, onClose, onTabChange]);\n  return (\n    <Drawer isExpanded={isExpanded} isInline={true}>\n      <DrawerContent panelContent={content}>\n        <DrawerContentBody\n          className={\"pf-u-display-flex pf-u-flex-direction-column\"}\n        >\n          {children}\n        </DrawerContentBody>\n      </DrawerContent>\n    </Drawer>\n  );\n};\n\nexport type KafkaInstanceDrawerTab = \"details\" | \"connections\";\n\nexport const KafkaInstanceDrawerPanel: VoidFunctionComponent<\n  Required<Omit<KafkaInstanceDrawerProps, \"isExpanded\">> & {\n    activeTab: KafkaInstanceDrawerTab;\n  }\n> = ({ instance, activeTab, onTabChange, onClose }) => {\n  const { t } = useTranslation([\"kafka\"]);\n  const labels = useKafkaLabels();\n\n  const handleSelect: TabsProps[\"onSelect\"] = useCallback(\n    (_, tab) => {\n      const t = tab as KafkaInstanceDrawerTab;\n      onTabChange(t);\n    },\n    [onTabChange]\n  );\n\n  const isKafkaPending = CreatingStatuses.includes(instance.status);\n\n  return (\n    <>\n      <DrawerHead>\n        <TextContent>\n          <Text component={TextVariants.small} className={\"pf-u-mb-0\"}>\n            {t(\"common:name\")}\n          </Text>\n          <Title\n            headingLevel={\"h1\"}\n            size={TitleSizes[\"xl\"]}\n            className={\"pf-u-mt-0\"}\n          >\n            {instance.name}\n          </Title>\n        </TextContent>\n        <DrawerActions>\n          <DrawerCloseButton onClick={onClose} />\n        </DrawerActions>\n      </DrawerHead>\n      <DrawerPanelBody>\n        <Tabs activeKey={activeTab} onSelect={handleSelect}>\n          <Tab\n            eventKey={\"details\"}\n            title={<TabTitleText>{t(\"drawer-tabs.details\")}</TabTitleText>}\n          >\n            <div className={\"pf-u-pt-md pf-u-pb-md\"}>\n              <KafkaDetailsTab\n                id={instance.id}\n                owner={instance.owner}\n                createdAt={parseISO(instance.createdAt)}\n                updatedAt={parseISO(instance.updatedAt)}\n                expiryDate={\n                  instance.expiryDate\n                    ? parseISO(instance.expiryDate)\n                    : undefined\n                }\n                size={instance.size}\n                ingress={instance.ingress}\n                egress={instance.egress}\n                storage={instance.storage}\n                maxPartitions={instance.maxPartitions}\n                connections={instance.connections}\n                connectionRate={instance.connectionRate}\n                messageSize={instance.messageSize}\n                provider={\n                  labels.providers[instance.provider] || instance.provider\n                }\n                region={\n                  labels.providerRegions[instance.provider][instance.region] ||\n                  instance.region\n                }\n                instanceType={instance.plan}\n                billing={instance.billing}\n                kafkaVersion={instance.version}\n              />\n            </div>\n          </Tab>\n          <Tab\n            eventKey={\"connections\"}\n            title={<TabTitleText>{t(\"drawer-tabs.connections\")}</TabTitleText>}\n            data-testid=\"drawerStreams-tabConnect\"\n          >\n            <div className={\"pf-u-pt-md pf-u-pb-md\"}>\n              <KafkaConnectionTabP2\n                isKafkaPending={isKafkaPending}\n                externalServer={getExternalServer(instance.bootstrapUrl)}\n                tokenEndPointUrl={\"TODO\"}\n                linkToServiceAccount={\"service-accounts\"}\n                linkToAccessTab={`TODO/acls`}\n                adminAPIUrl={getAdminServerUrl(instance.adminUrl)}\n                showCreateServiceAccountModal={() => {\n                  /* TODO */\n                }}\n                kafkaFleetManagerUrl={\n                  \"https://api.openshift.com/api/kafkas_mgmt/v1/openapi\"\n                }\n              />\n            </div>\n          </Tab>\n        </Tabs>\n      </DrawerPanelBody>\n    </>\n  );\n};\n\nconst getExternalServer = (bootstrapUrl: string | undefined) => {\n  if (!bootstrapUrl) {\n    return undefined;\n  }\n  return bootstrapUrl?.endsWith(\":443\") ? bootstrapUrl : `${bootstrapUrl}:443`;\n};\n\nconst getAdminServerUrl = (adminUrl: string | undefined) => {\n  return adminUrl ? `${adminUrl}/openapi` : undefined;\n};\n","import {\n  Alert,\n  Button,\n  Flex,\n  FlexItem,\n  HelperText,\n  HelperTextItem,\n  Spinner,\n  Split,\n  SplitItem,\n} from \"@patternfly/react-core\";\nimport {\n  CheckCircleIcon,\n  ExclamationTriangleIcon,\n} from \"@patternfly/react-icons\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { forwardRef } from \"react\";\nimport type { Status } from \"ui-models/src/models/kafka\";\nimport {\n  CreatingStatuses,\n  DegradedStatuses,\n  DeletingStatuses,\n  ReadyStatuses,\n  ResumingStatuses,\n  SuspendedStatuses,\n  SuspendingStatuses,\n} from \"ui-models/src/models/kafka\";\nimport \"./StatusLabel.css\";\n\ntype StatusLabelProps = {\n  value: Status;\n  showWarning?: boolean;\n  showError?: boolean;\n  withPopover?: boolean;\n};\n\n/**\n *<strong> Introduction </strong>\n *These are the various statuses that can show in the Kafka instances table under the \"Status\" header.\n */\nexport const StatusLabel = forwardRef<HTMLButtonElement, StatusLabelProps>(\n  (\n    { value, showWarning = false, showError = false, withPopover = false },\n    ref\n  ) => {\n    const { t } = useTranslation(\"kafka\");\n\n    const buttonVariant = withPopover ? \"link\" : \"plain\";\n\n    switch (true) {\n      case ReadyStatuses.includes(value):\n        return (\n          <div>\n            <Split hasGutter className=\"mas-c-status\">\n              <SplitItem>\n                <CheckCircleIcon className=\"mas-m-ready\" />\n              </SplitItem>\n              <SplitItem>{t(\"statuses.ready\")}</SplitItem>\n            </Split>\n          </div>\n        );\n\n      case CreatingStatuses.includes(value):\n        switch (true) {\n          case showWarning:\n            return (\n              <div>\n                <Split hasGutter className=\"mas-c-status\">\n                  <SplitItem>\n                    <Spinner size=\"md\" />\n                  </SplitItem>\n                  <SplitItem>\n                    <Button ref={ref} variant={buttonVariant} isInline>\n                      {t(\"statuses.creating\")}\n                    </Button>\n                  </SplitItem>\n                </Split>\n                <Alert\n                  variant=\"warning\"\n                  isInline\n                  isPlain\n                  title=\"This is taking longer than expected.\"\n                />\n              </div>\n            );\n          case showError:\n            return (\n              <div>\n                <Split hasGutter className=\"mas-c-status\">\n                  <SplitItem>\n                    <Spinner size=\"md\" />\n                  </SplitItem>\n                  <SplitItem>\n                    <Button ref={ref} variant={buttonVariant} isInline>\n                      {t(\"statuses.creating\")}\n                    </Button>\n                  </SplitItem>\n                </Split>\n                <Alert\n                  variant=\"danger\"\n                  isInline\n                  isPlain\n                  title={t(\"status_warning_or_error_title\")}\n                />\n              </div>\n            );\n          default:\n            return (\n              <div>\n                <Split hasGutter className=\"mas-c-status\">\n                  <SplitItem>\n                    <Spinner size=\"md\" />\n                  </SplitItem>\n                  <SplitItem>\n                    <Button ref={ref} variant={buttonVariant} isInline>\n                      {t(\"statuses.creating\")}\n                    </Button>\n                    <Flex>\n                      <FlexItem>\n                        <HelperText>\n                          <HelperTextItem variant=\"indeterminate\">\n                            {t(\"status_created_shortly_help\")}\n                          </HelperTextItem>\n                        </HelperText>\n                      </FlexItem>\n                    </Flex>\n                  </SplitItem>\n                </Split>\n              </div>\n            );\n        }\n\n      case DegradedStatuses.includes(value):\n        return (\n          <div>\n            <Split hasGutter className=\"mas-c-status\">\n              <SplitItem>\n                <ExclamationTriangleIcon className=\"mas-m-degraded\" />\n              </SplitItem>\n              <SplitItem>{t(\"statuses.degraded\")}</SplitItem>\n            </Split>\n          </div>\n        );\n\n      case SuspendingStatuses.includes(value):\n        return (\n          <div>\n            <p className=\"mas-m-deleting\"> {t(\"statuses.suspending\")}</p>\n          </div>\n        );\n      case SuspendedStatuses.includes(value):\n        return (\n          <div>\n            <Split hasGutter className=\"mas-c-status\">\n              <SplitItem>\n                <ExclamationTriangleIcon className=\"mas-m-degraded\" />\n              </SplitItem>\n              <SplitItem>\n                <Button ref={ref} variant={buttonVariant} isInline>\n                  {t(\"statuses.suspended\")}\n                </Button>\n              </SplitItem>\n            </Split>\n          </div>\n        );\n      case ResumingStatuses.includes(value):\n        return (\n          <div>\n            <Split hasGutter className=\"mas-c-status\">\n              <SplitItem>\n                <Spinner size=\"md\" />\n              </SplitItem>\n              <SplitItem>{t(\"statuses.resuming\")}</SplitItem>\n            </Split>\n          </div>\n        );\n      case DeletingStatuses.includes(value):\n        return (\n          <div>\n            <p className=\"mas-m-deleting\"> {t(\"statuses.deleting\")}</p>\n          </div>\n        );\n      default:\n        return null;\n    }\n  }\n);\n","export type KafkaStatus =\n  | \"ready\"\n  | \"degraded\"\n  | \"accepted\"\n  | \"provisioning\"\n  | \"preparing\"\n  | \"deprovision\"\n  | \"deleting\"\n  | \"suspended\"\n  | \"suspending\"\n  | \"resuming\";\n\nexport type PopoverStatus =\n  | \"pending\"\n  | \"provisioning\"\n  | \"preparing\"\n  | \"ready\"\n  | \"suspended\";\n\nexport const PopoverStatusOrder: PopoverStatus[] = [\n  \"pending\",\n  \"preparing\",\n  \"provisioning\",\n];\n\nexport const KafkaToPopoverMapping: {\n  [status in KafkaStatus]: PopoverStatus | null;\n} = {\n  ready: null,\n  degraded: null,\n  accepted: \"pending\",\n  provisioning: \"provisioning\",\n  preparing: \"preparing\",\n  deprovision: null,\n  deleting: null,\n  suspended: \"suspended\",\n  suspending: null,\n  resuming: null,\n};\n","import { ProgressStep, ProgressStepper } from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { PopoverStatus } from \"../types\";\nimport { PopoverStatusOrder } from \"../types\";\n\ntype StatusProgressStepperProps = {\n  currentStatus: PopoverStatus;\n};\n\nexport const StatusProgressStepper: VoidFunctionComponent<\n  StatusProgressStepperProps\n> = ({ currentStatus }) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n\n  const currentStep = PopoverStatusOrder.findIndex((s) => s === currentStatus);\n\n  const getVariant = (index: number) =>\n    (currentStep === index && \"info\") ||\n    (currentStep > index && \"success\") ||\n    \"default\";\n\n  return (\n    <ProgressStepper isVertical={true}>\n      <ProgressStep\n        id={\"pending\"}\n        titleId={\"pending\"}\n        isCurrent={currentStatus === \"pending\"}\n        description={t(\"kafka_status_popover.pending.description\")}\n        aria-label={t(\"kafka_status_popover.pending.description\")}\n        variant={getVariant(0)}\n      >\n        {t(\"kafka_status_popover.pending.title\")}\n      </ProgressStep>\n\n      <ProgressStep\n        id={\"provisioning\"}\n        titleId={\"provisioning\"}\n        isCurrent={currentStatus === \"provisioning\"}\n        description={t(\"kafka_status_popover.provisioning.description\")}\n        aria-label={t(\"kafka_status_popover.provisioning.description\")}\n        variant={getVariant(1)}\n      >\n        {t(\"kafka_status_popover.provisioning.title\")}\n      </ProgressStep>\n      <ProgressStep\n        id={\"preparing\"}\n        titleId={\"preparing\"}\n        isCurrent={currentStatus === \"preparing\"}\n        description={t(\"kafka_status_popover.preparing.description\")}\n        aria-label={t(\"kafka_status_popover.preparing.description\")}\n        variant={getVariant(2)}\n      >\n        {t(\"kafka_status_popover.preparing.title\")}\n      </ProgressStep>\n    </ProgressStepper>\n  );\n};\n","import {\n  Alert,\n  Button,\n  ButtonVariant,\n  Stack,\n  StackItem,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { Trans, useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { PopoverStatus } from \"../types\";\nimport { PopoverStatusOrder } from \"../types\";\nimport { StatusProgressStepper } from \"./StatusProgressStepper\";\n\nexport type StatusPopoverContentProps = {\n  currentStatus: PopoverStatus;\n  showWarning?: boolean;\n  showError?: boolean;\n  onClickConnectionTabLink: () => void;\n  onClickSupportLink: () => void;\n};\n\nexport const StatusPopoverContent: VoidFunctionComponent<\n  StatusPopoverContentProps\n> = ({\n  currentStatus,\n  showWarning = false,\n  showError = false,\n  onClickConnectionTabLink,\n  onClickSupportLink,\n}) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n\n  const currentStep = PopoverStatusOrder.findIndex((s) => s === currentStatus);\n\n  return (\n    <div>\n      <Stack hasGutter>\n        <StackItem>\n          {showWarning && (\n            <Alert\n              variant=\"warning\"\n              isInline\n              isPlain\n              title={t(\"kafka_status_popover.warning_or_error_title\")}\n            >\n              <TextContent>\n                <Text component={TextVariants.small}>\n                  <Trans\n                    ns={[\"create-kafka-instance\"]}\n                    i18nKey=\"kafka_status_popover.header_content_with_warning\"\n                    components={[\n                      <Button\n                        key=\"btn-connetcion-tab\"\n                        variant={ButtonVariant.link}\n                        onClick={onClickConnectionTabLink}\n                        isInline\n                      />,\n                    ]}\n                  />\n                </Text>\n              </TextContent>\n            </Alert>\n          )}\n          {showError && (\n            <Alert\n              variant=\"danger\"\n              isInline\n              isPlain\n              title={t(\"kafka_status_popover.warning_or_error_title\")}\n            >\n              <TextContent>\n                <Text component={TextVariants.small}>\n                  <Trans\n                    ns={[\"create-kafka-instance\"]}\n                    i18nKey=\"kafka_status_popover.header_content_with_error\"\n                    components={[\n                      <Button\n                        key=\"btn-connetcion-tab\"\n                        variant={ButtonVariant.link}\n                        onClick={onClickConnectionTabLink}\n                        isInline\n                      />,\n                      <Button\n                        key=\"btn-support-case\"\n                        variant={ButtonVariant.link}\n                        onClick={onClickSupportLink}\n                        isInline\n                      />,\n                    ]}\n                  />\n                </Text>\n              </TextContent>\n            </Alert>\n          )}\n          {!showError && !showWarning && (\n            <TextContent>\n              <Text component={TextVariants.small}>\n                <Trans\n                  ns={[\"create-kafka-instance\"]}\n                  i18nKey=\"kafka_status_popover.header_content\"\n                  components={[\n                    <Button\n                      key=\"btn-connetcion-tab\"\n                      variant={ButtonVariant.link}\n                      onClick={onClickConnectionTabLink}\n                      isInline\n                    />,\n                  ]}\n                />\n              </Text>\n            </TextContent>\n          )}\n        </StackItem>\n        <StackItem>\n          {t(\"common:progress_stepper_current_step\", {\n            currentStep,\n            total: PopoverStatusOrder.length,\n          })}\n        </StackItem>\n        <StackItem>\n          <StatusProgressStepper currentStatus={currentStatus} />\n        </StackItem>\n      </Stack>\n    </div>\n  );\n};\n","import type { PopoverProps } from \"@patternfly/react-core\";\nimport { Popover } from \"@patternfly/react-core\";\nimport type { RefObject, VoidFunctionComponent } from \"react\";\nimport { useCallback, useState } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { PopoverStatus } from \"../types\";\nimport type { StatusPopoverContentProps } from \"./StatusPopoverContent\";\nimport { StatusPopoverContent } from \"./StatusPopoverContent\";\n\nexport type StatusPopoverProps = {\n  status: PopoverStatus;\n  initialOpen?: boolean;\n  showWarning?: boolean;\n  showError?: boolean;\n  children?: PopoverProps[\"children\"];\n  onClickConnectionTabLink: StatusPopoverContentProps[\"onClickConnectionTabLink\"];\n  onClickSupportLink: StatusPopoverContentProps[\"onClickSupportLink\"];\n  reference?: RefObject<HTMLButtonElement>;\n};\n\n/**\n * ## Introduction\n *\n * This is a popover that can be reached from the Kafka Instance table while the status of the instance in question is “Creating”.\n * A Kafka instance usually takes a few minutes to create. The purpose of this popover is to give the user some insights into\n * the creation process of their instance while they wait for it to be available to use.\n *\n * - The text at the top explains that the instance will be ready shortly & suggests that the user creates a service account while they wait.\n *  (Provides a link to the “Connections tab\" where this is done).\n *\n * - The steps shown in the progress stepper are statuses that show in the api. They have been grouped together under the one overall\n * “Creating status” in the table.There is some descriptive text accompanying each step too. When these steps are complete the instance will be ready for use\n *\n * - The popover is only available while instance creation is in progress.\n * - After creation is complete the table displays the ready status and the popover is no longer available.\n *\n */\nexport const StatusPopover: VoidFunctionComponent<StatusPopoverProps> = ({\n  initialOpen = false,\n  status,\n  showWarning = false,\n  showError = false,\n  onClickConnectionTabLink,\n  onClickSupportLink,\n  reference,\n  children,\n}) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n\n  const [isVisible, setIsVisible] = useState(initialOpen);\n  const onClose = () => setIsVisible(false);\n\n  const handleClickConnectionTabLink = useCallback(() => {\n    onClose();\n    onClickConnectionTabLink();\n  }, [onClickConnectionTabLink]);\n\n  const handleClickSupportLink = useCallback(() => {\n    onClose();\n    onClickSupportLink();\n  }, [onClickSupportLink]);\n\n  return (\n    <Popover\n      headerContent={t(\"kafka_status_popover.title\")}\n      bodyContent={\n        <StatusPopoverContent\n          currentStatus={status}\n          showWarning={showWarning}\n          showError={showError}\n          onClickConnectionTabLink={handleClickConnectionTabLink}\n          onClickSupportLink={handleClickSupportLink}\n        />\n      }\n      isVisible={isVisible}\n      shouldOpen={() => setIsVisible(true)}\n      shouldClose={() => setIsVisible(false)}\n      position={\"right\"}\n      enableFlip={true}\n      reference={reference}\n    >\n      {children}\n    </Popover>\n  );\n};\n","import type { PopoverProps } from \"@patternfly/react-core\";\nimport { Popover, TextContent } from \"@patternfly/react-core\";\nimport { ExclamationTriangleIcon } from \"@patternfly/react-icons\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { RefObject, VoidFunctionComponent } from \"react\";\n\nexport type SuspendedPopoverProps = {\n  children?: PopoverProps[\"children\"];\n  reference?: RefObject<HTMLButtonElement>;\n};\n\nexport const SuspendedPopover: VoidFunctionComponent<SuspendedPopoverProps> = ({\n  children,\n  reference,\n}) => {\n  const { t } = useTranslation(\"kafka\");\n  return (\n    <Popover\n      alertSeverityVariant={\"warning\"}\n      headerIcon={<ExclamationTriangleIcon />}\n      headerContent={t(\"suspend_popover_title\")}\n      bodyContent={\n        <TextContent>\n          <p>{t(\"suspend_popover_body_1\")}</p>\n        </TextContent>\n      }\n      position={\"right\"}\n      reference={reference}\n    >\n      {children}\n    </Popover>\n  );\n};\n","import { useInterval } from \"@rhoas/app-services-ui-components\";\nimport { differenceInMinutes } from \"date-fns\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback, useRef, useState } from \"react\";\nimport type { Status } from \"ui-models/src/models/kafka\";\nimport type { StatusPopoverProps } from \"./components\";\nimport { StatusLabel, StatusPopover, SuspendedPopover } from \"./components\";\nimport { KafkaToPopoverMapping } from \"./types\";\n\nexport type KafkaInstanceStatusProps = {\n  status: Status;\n  createdAt: Date;\n  warningAfterMinutes?: number;\n  errorAfterMinutes?: number;\n} & Pick<StatusPopoverProps, \"onClickConnectionTabLink\" | \"onClickSupportLink\">;\n\n/**\n * A component to show the status of a Kafka instance combining the\n * `StatusPopover` with the `StatusLabel`, with automatic handling of which\n * statuses should have a companion popover.\n */\nexport const KafkaInstanceStatus: VoidFunctionComponent<\n  KafkaInstanceStatusProps\n> = ({\n  status,\n  createdAt,\n  warningAfterMinutes = 15,\n  errorAfterMinutes = 30,\n  onClickConnectionTabLink,\n  onClickSupportLink,\n}) => {\n  const popoverStatus = KafkaToPopoverMapping[status];\n  const [alert, setAlert] = useState<\"warning\" | \"error\" | false>(false);\n  const labelRef = useRef<HTMLButtonElement>(null);\n\n  const checkCreatedAt = useCallback(() => {\n    const elapsed = differenceInMinutes(new Date(), createdAt);\n    if (elapsed > errorAfterMinutes) {\n      setAlert(\"error\");\n    } else if (elapsed > warningAfterMinutes) {\n      setAlert(\"warning\");\n    } else {\n      setAlert(false);\n    }\n  }, [createdAt, errorAfterMinutes, warningAfterMinutes]);\n\n  useInterval(checkCreatedAt, 5000);\n  const showWarning = alert === \"warning\";\n  const showError = alert === \"error\";\n  return (\n    <>\n      {popoverStatus === \"suspended\" ? (\n        <SuspendedPopover reference={labelRef} />\n      ) : (\n        popoverStatus && (\n          <StatusPopover\n            status={popoverStatus}\n            showWarning={showWarning}\n            showError={showError}\n            onClickConnectionTabLink={onClickConnectionTabLink}\n            onClickSupportLink={onClickSupportLink}\n            reference={labelRef}\n          />\n        )\n      )}\n      <StatusLabel\n        value={status}\n        showWarning={showWarning}\n        showError={showError}\n        withPopover={popoverStatus !== undefined}\n        ref={labelRef}\n      />\n    </>\n  );\n};\n","import {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { PlusCircleIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { Trans, useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport type EmptyStateNoInstancesProps = {\n  onCreate: () => void;\n  onQuickstartGuide: () => void;\n};\n\nexport const EmptyStateNoInstances: VoidFunctionComponent<\n  EmptyStateNoInstancesProps\n> = ({ onCreate, onQuickstartGuide }) => {\n  const { t } = useTranslation(\"kafka\");\n  return (\n    <EmptyState variant={EmptyStateVariant.xs}>\n      <EmptyStateIcon icon={PlusCircleIcon} />\n      <Title headingLevel=\"h2\" size=\"lg\">\n        {t(\"empty_state_no_instances_title\")}\n      </Title>\n      <EmptyStateBody>\n        <Trans\n          ns={\"kafka\"}\n          i18nKey={\"empty_state_no_instances_body\"}\n          components={[<a onClick={onQuickstartGuide} />]}\n        />\n      </EmptyStateBody>\n      <Button ouiaId=\"button-create\" variant=\"primary\" onClick={onCreate}>\n        {t(\"empty_state_no_instances_create_instance\")}\n      </Button>\n    </EmptyState>\n  );\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { SearchIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { Trans, useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport type EmptyStateNoResultsProps = {\n  onClearAllFilters: () => void;\n};\n\nexport const EmptyStateNoResults: VoidFunctionComponent<\n  EmptyStateNoResultsProps\n> = ({ onClearAllFilters }) => {\n  const { t } = useTranslation(\"kafka\");\n  return (\n    <EmptyState variant={EmptyStateVariant.xs}>\n      <EmptyStateIcon icon={SearchIcon} />\n      <Title headingLevel=\"h2\" size=\"lg\">\n        {t(\"empty_state_no_results_found_title\")}\n      </Title>\n      <EmptyStateBody>\n        <Trans\n          ns={\"kafka\"}\n          i18nKey={\"empty_state_no_results_found_body\"}\n          components={[<a onClick={onClearAllFilters} />]}\n        />\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import { Button, PageSection, Stack, StackItem } from \"@patternfly/react-core\";\nimport type { TableViewProps } from \"@rhoas/app-services-ui-components\";\nimport {\n  FormatDate,\n  TableView,\n  Trans,\n  useTranslation,\n} from \"@rhoas/app-services-ui-components\";\nimport { parseISO } from \"date-fns\";\nimport { Link } from \"react-router-dom\";\nimport type { Kafka, SimplifiedStatus } from \"ui-models/src/models/kafka\";\nimport { DeletingStatuses } from \"ui-models/src/models/kafka\";\nimport { useKafkaLabels } from \"../../hooks\";\nimport { KafkaInstanceActions } from \"../KafkaInstanceActions\";\nimport { KafkaInstanceStatus } from \"../KafkaInstanceStatus\";\nimport type {\n  EmptyStateNoInstancesProps,\n  EmptyStateNoResultsProps,\n} from \"./components\";\nimport { EmptyStateNoInstances, EmptyStateNoResults } from \"./components\";\n\nconst Columns = [\n  \"name\",\n  \"owner\",\n  \"createdAt\",\n  \"provider\",\n  \"region\",\n  \"status\",\n] as const;\n\nexport type KafkaInstancesProps<T extends Kafka = Kafka> = {\n  instances: Array<T> | undefined | null;\n  getUrlForInstance: (row: T) => string;\n  names: string[];\n  owners: string[];\n  statuses: string[];\n  onCreate: () => void;\n  onSearchName: (value: string) => void;\n  onRemoveNameChip: (value: string) => void;\n  onRemoveNameChips: () => void;\n  onSearchOwner: (value: string) => void;\n  onRemoveOwnerChip: (value: string) => void;\n  onRemoveOwnerChips: () => void;\n  onSearchStatus: (value: SimplifiedStatus) => void;\n  onRemoveStatusChip: (value: SimplifiedStatus) => void;\n  onRemoveStatusChips: () => void;\n  onDetails: (row: T) => void;\n  onConnection: (row: T) => void;\n  canChangeOwner: (row: T) => boolean;\n  onChangeOwner: (row: T) => void;\n  canDelete: (row: T) => boolean;\n  onDelete: (row: T) => void;\n  onClickConnectionTabLink: (row: T) => void;\n  onClickSupportLink: () => void;\n  onInstanceLinkClick: (row: T) => void;\n  canHaveInstanceLink: (row: T) => boolean;\n  canOpenConnection: (row: T) => boolean;\n} & Pick<\n  TableViewProps<T, typeof Columns[number]>,\n  | \"itemCount\"\n  | \"page\"\n  | \"perPage\"\n  | \"onPageChange\"\n  | \"isRowSelected\"\n  | \"isColumnSortable\"\n  | \"onClearAllFilters\"\n> &\n  EmptyStateNoInstancesProps &\n  EmptyStateNoResultsProps;\n\nexport const KafkaInstances = <T extends Kafka>({\n  instances,\n  itemCount,\n  page,\n  perPage,\n  names,\n  owners,\n  statuses,\n  getUrlForInstance,\n  isRowSelected,\n  isColumnSortable,\n  onPageChange,\n  onDetails,\n  onConnection,\n  canChangeOwner,\n  onChangeOwner,\n  canDelete,\n  onDelete,\n  onCreate,\n  onQuickstartGuide,\n  onClickConnectionTabLink,\n  onClickSupportLink,\n  onInstanceLinkClick,\n  onSearchName,\n  onRemoveNameChip,\n  onRemoveNameChips,\n  onSearchOwner,\n  onRemoveOwnerChip,\n  onRemoveOwnerChips,\n  onSearchStatus,\n  onRemoveStatusChip,\n  onRemoveStatusChips,\n  onClearAllFilters,\n\n  canHaveInstanceLink,\n  canOpenConnection,\n}: KafkaInstancesProps<T>) => {\n  const { t } = useTranslation(\"kafka\");\n  const labels = useKafkaLabels();\n  const breakpoint = \"lg\";\n\n  const isFiltered =\n    names.length > 0 || owners.length > 0 || statuses.length > 0;\n\n  return (\n    <PageSection isFilled={true}>\n      <TableView\n        data={instances}\n        columns={Columns}\n        renderHeader={({ column, Th, key }) => (\n          <Th key={key}>{labels.fields[column]}</Th>\n        )}\n        renderCell={({ column, row, Td, key }) => {\n          const timeCreatedDate = parseISO(row.createdAt);\n          const instanceLinkEnable = canHaveInstanceLink(row);\n          return (\n            <Td key={key} dataLabel={labels.fields[column]}>\n              {(() => {\n                switch (column) {\n                  case \"name\":\n                    return (\n                      <Button\n                        variant=\"link\"\n                        component={(props) => (\n                          <Link to={getUrlForInstance(row)} {...props}>\n                            {row.name}\n                          </Link>\n                        )}\n                        isInline={true}\n                        isAriaDisabled={!instanceLinkEnable}\n                        isDisabled={!instanceLinkEnable}\n                        onClick={() => onInstanceLinkClick(row)}\n                      />\n                    );\n                  case \"provider\":\n                    return labels.providers[row.provider];\n                  case \"createdAt\":\n                    return (\n                      <Stack>\n                        <StackItem>\n                          <FormatDate\n                            date={timeCreatedDate}\n                            format={\"distanceToNowWithAgo\"}\n                          />\n                        </StackItem>\n                        {row.expiryDate && (\n                          <StackItem>\n                            <Trans\n                              i18nKey=\"will_expire_short\"\n                              ns={[\"kafka\"]}\n                              components={{\n                                time: (\n                                  <FormatDate\n                                    date={parseISO(row.expiryDate)}\n                                    format=\"expiration\"\n                                  />\n                                ),\n                              }}\n                            />\n                          </StackItem>\n                        )}\n                      </Stack>\n                    );\n                  case \"status\":\n                    return (\n                      <KafkaInstanceStatus\n                        status={row[\"status\"]}\n                        createdAt={timeCreatedDate}\n                        onClickConnectionTabLink={() =>\n                          onClickConnectionTabLink(row)\n                        }\n                        onClickSupportLink={onClickSupportLink}\n                      />\n                    );\n                  default:\n                    return row[column];\n                }\n              })()}\n            </Td>\n          );\n        }}\n        renderActions={({ row }) => {\n          const changeOwnerEnabled = canChangeOwner(row);\n          const deleteEnabled = canDelete(row);\n          const openConnectionEnabled = canOpenConnection(row);\n          return (\n            <KafkaInstanceActions\n              onDetails={() => onDetails(row)}\n              onConnection={() => onConnection(row)}\n              canOpenConnection={openConnectionEnabled}\n              canChangeOwner={changeOwnerEnabled}\n              onChangeOwner={() => onChangeOwner(row)}\n              canDelete={deleteEnabled}\n              onDelete={() => onDelete(row)}\n            />\n          );\n        }}\n        onRowClick={({ row }) => onDetails(row)}\n        isColumnSortable={isColumnSortable}\n        isRowSelected={isRowSelected}\n        isRowDeleted={({ row }) => DeletingStatuses.includes(row[\"status\"])}\n        toolbarBreakpoint={breakpoint}\n        filters={{\n          [labels.fields.name]: {\n            type: \"search\",\n            chips: names,\n            onSearch: onSearchName,\n            onRemoveChip: onRemoveNameChip,\n            onRemoveGroup: onRemoveNameChips,\n            validate: (value) => /^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(value),\n            errorMessage: t(\"kafka:input_field_invalid_message\"),\n          },\n          [labels.fields.owner]: {\n            type: \"search\",\n            chips: owners,\n            onSearch: onSearchOwner,\n            onRemoveChip: onRemoveOwnerChip,\n            onRemoveGroup: onRemoveOwnerChips,\n            validate: (value: string) => !/[\"$^<>|+%/;:,\\s*=~#()]/.test(value),\n            errorMessage: t(\"kafka:input_field_invalid_message\"),\n          },\n          [labels.fields.status]: {\n            type: \"checkbox\",\n            chips: statuses,\n            options: labels.statusesSimplified,\n            onToggle: onSearchStatus,\n            onRemoveChip: onRemoveStatusChip,\n            onRemoveGroup: onRemoveStatusChips,\n          },\n        }}\n        actions={[\n          {\n            label: t(\"create_instance\"),\n            onClick: onCreate,\n            isPrimary: true,\n          },\n        ]}\n        itemCount={itemCount}\n        page={page}\n        perPage={perPage}\n        onPageChange={onPageChange}\n        onClearAllFilters={onClearAllFilters}\n        ariaLabel={t(\"table.title\")}\n        isFiltered={isFiltered}\n        emptyStateNoData={\n          <EmptyStateNoInstances\n            onCreate={onCreate}\n            onQuickstartGuide={onQuickstartGuide}\n          />\n        }\n        emptyStateNoResults={\n          <EmptyStateNoResults onClearAllFilters={onClearAllFilters} />\n        }\n      />\n    </PageSection>\n  );\n};\n","import type { DatePickerProps, TimePickerProps } from \"@patternfly/react-core\";\nimport { DatePicker, InputGroup, TimePicker } from \"@patternfly/react-core\";\nimport { formatISO, parseISO, setHours, setMinutes } from \"date-fns\";\nimport { formatInTimeZone } from \"date-fns-tz\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useState } from \"react\";\nimport type { DateIsoString } from \"../../../../../ui-models/src/types\";\n\nexport type DateTimePickerProps = {\n  isDisabled: boolean;\n  value: DateIsoString | undefined;\n  onChange: (value: DateIsoString) => void;\n};\nexport const DateTimePicker: VoidFunctionComponent<DateTimePickerProps> = ({\n  isDisabled,\n  value,\n  onChange,\n}) => {\n  const [timeSelected, setIsTimeSelected] = useState(false);\n  const date = value ? parseISO(value) : undefined;\n\n  const onSelectCalendar: DatePickerProps[\"onChange\"] = (_, newDate) => {\n    if (newDate) {\n      onChange(formatISO(newDate) as DateIsoString);\n    }\n  };\n\n  const onSelectTime: TimePickerProps[\"onChange\"] = (\n    time,\n    hour,\n    minute,\n    __,\n    isValid\n  ) => {\n    if (\n      isValid &&\n      date &&\n      hour != undefined &&\n      hour > 0 &&\n      (time.includes(\"AM\") || time.includes(\"PM\"))\n    ) {\n      let newDate = date;\n      if (hour !== undefined) {\n        newDate = setHours(newDate, hour);\n      }\n      if (minute !== undefined) {\n        newDate = setMinutes(newDate, minute);\n      }\n\n      onChange(formatISO(newDate) as DateIsoString);\n      setIsTimeSelected(true);\n    }\n  };\n\n  return (\n    <InputGroup>\n      <DatePicker\n        isDisabled={isDisabled}\n        value={date ? formatInTimeZone(date, \"UTC\", \"yyyy-MM-dd\") : undefined}\n        onChange={onSelectCalendar}\n      />\n      <TimePicker\n        isDisabled={!date || isDisabled}\n        time={timeSelected ? date : undefined}\n        onChange={onSelectTime}\n      />\n    </InputGroup>\n  );\n};\n","import {\n  Dropdown,\n  DropdownItem,\n  DropdownPosition,\n  DropdownSeparator,\n  DropdownToggle,\n  InputGroup,\n  TextInput,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useState } from \"react\";\nimport type { DateIsoString } from \"../../../../../ui-models/src/types\";\nimport { DateTimePicker } from \"./DateTimePicker\";\n\ntype Category = \"offset\" | \"timestamp\" | \"epoch\" | \"latest\";\nexport type FilterGroupProps = {\n  isDisabled: boolean;\n  offset: number | undefined;\n  epoch: number | undefined;\n  timestamp: DateIsoString | undefined;\n  onOffsetChange: (value: number | undefined) => void;\n  onTimestampChange: (value: DateIsoString | undefined) => void;\n  onEpochChange: (value: number | undefined) => void;\n  onLatest: () => void;\n};\nexport const FilterGroup: VoidFunctionComponent<FilterGroupProps> = ({\n  isDisabled,\n  offset,\n  epoch,\n  timestamp,\n  onOffsetChange,\n  onTimestampChange,\n  onEpochChange,\n  onLatest,\n}) => {\n  const { t } = useTranslation(\"message-browser\");\n  const [currentCategory, setCurrentCategory] = useState<Category>(\"latest\");\n  const [isOpen, setIsOpen] = useState(false);\n  const labels: { [key in Category]: string } = {\n    offset: t(\"filter.offset\"),\n    timestamp: t(\"filter.timestamp\"),\n    epoch: t(\"filter.epoch\"),\n    latest: t(\"filter.latest\"),\n  };\n  return (\n    <ToolbarItem>\n      <InputGroup>\n        <Dropdown\n          data-testid={\"filter-group-dropdown\"}\n          toggle={\n            <DropdownToggle\n              onToggle={setIsOpen}\n              isDisabled={isDisabled}\n              data-testid={\"filter-group\"}\n            >\n              {labels[currentCategory]}\n            </DropdownToggle>\n          }\n          position={DropdownPosition.left}\n          isOpen={isOpen}\n          onSelect={() => setIsOpen(false)}\n          dropdownItems={[\n            <DropdownItem\n              key=\"offset\"\n              value=\"offset\"\n              autoFocus={currentCategory === \"offset\"}\n              onClick={() => setCurrentCategory(\"offset\")}\n            >\n              {labels[\"offset\"]}\n            </DropdownItem>,\n            <DropdownItem\n              key=\"timestamp\"\n              value=\"timestamp\"\n              autoFocus={currentCategory === \"timestamp\"}\n              onClick={() => setCurrentCategory(\"timestamp\")}\n            >\n              {labels[\"timestamp\"]}\n            </DropdownItem>,\n            <DropdownItem\n              key=\"epoch\"\n              value=\"epoch\"\n              autoFocus={currentCategory === \"epoch\"}\n              onClick={() => setCurrentCategory(\"epoch\")}\n            >\n              {labels[\"epoch\"]}\n            </DropdownItem>,\n            <DropdownSeparator key={\"divider\"} />,\n            <DropdownItem\n              key=\"latest\"\n              value=\"latest\"\n              autoFocus={currentCategory === \"latest\"}\n              onClick={() => {\n                setCurrentCategory(\"latest\");\n                onLatest();\n              }}\n            >\n              {labels[\"latest\"]}\n            </DropdownItem>,\n          ]}\n        />\n        {currentCategory === \"offset\" && (\n          <TextInput\n            isDisabled={isDisabled}\n            type={\"number\"}\n            aria-label={t(\"filter.offset_aria_label\")}\n            placeholder={t(\"filter.offset_placeholder\")}\n            onChange={(value) => {\n              if (value !== \"\") {\n                const newOffset = parseInt(value, 10);\n                if (Number.isInteger(newOffset)) {\n                  onOffsetChange(newOffset);\n                }\n              } else {\n                onOffsetChange(undefined);\n              }\n            }}\n            value={offset === undefined ? \"\" : offset}\n          />\n        )}\n        {currentCategory === \"timestamp\" && (\n          <DateTimePicker\n            isDisabled={isDisabled}\n            value={timestamp}\n            onChange={onTimestampChange}\n          />\n        )}\n        {currentCategory === \"epoch\" && (\n          <TextInput\n            isDisabled={isDisabled}\n            type={\"number\"}\n            aria-label={t(\"filter.epoch_aria_label\")}\n            placeholder={t(\"filter.epoch_placeholder\")}\n            className=\"pf-u-flex-basis-auto pf-u-flex-grow-0 pf-u-w-initial\"\n            size={t(\"filter.epoch_placeholder\").length}\n            onChange={(value) => {\n              if (value !== \"\" && Number(value) >= 0)\n                onEpochChange(Number(value));\n              else onEpochChange(undefined);\n            }}\n            value={epoch == undefined ? \"\" : epoch}\n          />\n        )}\n      </InputGroup>\n    </ToolbarItem>\n  );\n};\n","import {\n  InputGroup,\n  InputGroupText,\n  Select,\n  SelectOption,\n} from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport type LimitSelectorProps = {\n  value: number;\n  isDisabled: boolean;\n  onChange: (value: number) => void;\n};\nexport const LimitSelector: VoidFunctionComponent<LimitSelectorProps> = ({\n  value,\n  isDisabled,\n  onChange,\n}) => {\n  const { t } = useTranslation(\"message-browser\");\n  const [isOpen, setIsOpen] = useState(false);\n  const toggleOpen = (isOpen: boolean) => setIsOpen(isOpen);\n  const titleId = \"limit-selector\";\n\n  return (\n    <InputGroup>\n      <InputGroupText className=\"pf-c-content\">\n        {t(\"limit_label\")}\n      </InputGroupText>\n      <div>\n        <span id={titleId} hidden>\n          Select a state\n        </span>\n\n        <Select\n          aria-label={t(\"per_page_aria_label\")}\n          onToggle={toggleOpen}\n          selections={value !== undefined ? [t(\"limit\", { value })] : undefined}\n          isOpen={isOpen}\n          isDisabled={isDisabled}\n          onSelect={() => setIsOpen(false)}\n          data-testid={\"limit-selector\"}\n        >\n          {[10, 20, 50].map((value, idx) => (\n            <SelectOption\n              key={idx}\n              value={t(\"limit\", { value })}\n              onClick={() => onChange(value)}\n            />\n          ))}\n        </Select>\n      </div>\n    </InputGroup>\n  );\n};\n","import type { Message } from \"ui-models/src/models/message\";\n\nexport function isSameMessage(m1: Message, m2: Message) {\n  return JSON.stringify(m1) === JSON.stringify(m2);\n}\n\nexport function beautifyUnknownValue(value: string): string {\n  try {\n    return JSON.stringify(JSON.parse(value), null, 2);\n  } catch (e) {\n    // noop\n  }\n  return value;\n}\n\nexport function truncate(value: string, length: number): [string, boolean] {\n  const shouldTruncate = value.length > length;\n  return [\n    shouldTruncate ? `${value.substring(0, length)}...` : value,\n    shouldTruncate,\n  ];\n}\n","import type { ResourceOperationValue } from \"./components/ResourceOperation\";\nimport type { ResourcePermissionValue } from \"./components/ResourcePermission\";\nimport type { ResourcePrefixRuleValue } from \"./components/ResourcePrefixRule\";\nimport type { ResourceTypeValue } from \"./components/ResourceType\";\n\nexport type AclOperation =\n  | \"ALL\"\n  | \"READ\"\n  | \"WRITE\"\n  | \"CREATE\"\n  | \"DELETE\"\n  | \"ALTER\"\n  | \"DESCRIBE\"\n  | \"DESCRIBE_CONFIGS\"\n  | \"ALTER_CONFIGS\";\n\nexport type AclResourceType =\n  | \"GROUP\"\n  | \"TOPIC\"\n  | \"CLUSTER\"\n  | \"TRANSACTIONAL_ID\";\n\nexport type AclPatternType = \"LITERAL\" | \"PREFIXED\";\n\nexport type AclPermissionType = \"ALLOW\" | \"DENY\";\n\nexport interface AclBinding {\n  /**\n   *\n   * @type {AclResourceType}\n   * @memberof AclBinding\n   */\n  resourceType: AclResourceType;\n  /**\n   *\n   * @type {string}\n   * @memberof AclBinding\n   */\n  resourceName: string;\n  /**\n   *\n   * @type {AclPatternType}\n   * @memberof AclBinding\n   */\n  patternType: AclPatternType;\n  /**\n   * Identifies the user or service account to which an ACL entry is bound. The literal prefix value of `User:` is required. May be used to specify all users with value `User:*`.\n   * @type {string}\n   * @memberof AclBinding\n   */\n  principal: string;\n  /**\n   *\n   * @type {AclOperation}\n   * @memberof AclBinding\n   */\n  operation: AclOperation;\n  /**\n   *\n   * @type {AclPermissionType}\n   * @memberof AclBinding\n   */\n  permission: AclPermissionType;\n}\nexport enum PrincipalType {\n  UserAccount = \"USER_ACCOUNT\",\n  ServiceAccount = \"SERVICE_ACCOUNT\",\n}\n\nexport type Account = {\n  id: string;\n  principalType: PrincipalType;\n  displayName: string;\n};\n\ntype ManualAcl = {\n  resourceType: ResourceTypeValue | undefined;\n  resourcePrefix: ResourcePrefixRuleValue;\n  resourceName: string | undefined;\n  resourcePermission: ResourcePermissionValue;\n  resourceOperation: ResourceOperationValue | undefined;\n};\n\ntype ProduceTopicTemplate = {\n  prefixRuleValue: ResourcePrefixRuleValue;\n  resourceNameValue: string | undefined;\n};\n\ntype ConsumeTopicTemplate = {\n  consumerResourceName: string | undefined;\n  consumerResourcePrefixRule: ResourcePrefixRuleValue;\n  topicResourceName: string | undefined;\n  topicResourcePrefixRule: ResourcePrefixRuleValue;\n};\n\ntype ManageAccessTemplate = {\n  instanceName: string;\n};\nexport type AddAclType =\n  | ({ type: \"manual\" } & ManualAcl)\n  | ({ type: \"consume-topic\" } & ConsumeTopicTemplate)\n  | ({ type: \"produce-topic\" } & ProduceTopicTemplate)\n  | ({ type: \"manage-access\" } & ManageAccessTemplate);\n\nexport const createEmptyManualAcl = (): AddAclType => {\n  return {\n    type: \"manual\",\n    resourceName: undefined,\n    resourceType: undefined,\n    resourceOperation: undefined,\n    resourcePrefix: \"Is\",\n    resourcePermission: \"allow\",\n  };\n};\nexport const createEmptyProduceTopicAcl = (): AddAclType => {\n  return {\n    type: \"produce-topic\",\n    prefixRuleValue: \"Is\",\n    resourceNameValue: undefined,\n  };\n};\nexport const createEmptyConsumeTopicAcl = (): AddAclType => {\n  return {\n    type: \"consume-topic\",\n    consumerResourceName: undefined,\n    consumerResourcePrefixRule: \"Is\",\n    topicResourceName: undefined,\n    topicResourcePrefixRule: \"Is\",\n  };\n};\nexport const createEmptyManageAccessAcl = (kafkaName: string): AddAclType => {\n  return {\n    type: \"manage-access\",\n    instanceName: kafkaName,\n  };\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport type NoDataCellProps = {\n  columnLabel: string;\n};\nexport const NoDataCell: VoidFunctionComponent<NoDataCellProps> = ({\n  columnLabel,\n}) => {\n  const { t } = useTranslation(\"common\");\n  return (\n    <span className=\"pf-u-color-400\">\n      {t(\"table_cell_no_data\", { column: columnLabel })}\n    </span>\n  );\n};\n","import {\n  ClipboardCopy,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  DrawerActions,\n  DrawerCloseButton,\n  DrawerContentBody,\n  DrawerHead,\n  DrawerPanelContent,\n  Flex,\n  FlexItem,\n  Tab,\n  Tabs,\n  TabTitleText,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { FormatDate, useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { parseISO } from \"date-fns\";\nimport type { VoidFunctionComponent } from \"react\";\nimport type { Message } from \"ui-models/src/models/message\";\nimport { beautifyUnknownValue } from \"../utils\";\nimport { NoDataCell } from \"./NoDataCell\";\n\nexport type MessageDetailsProps = {\n  onClose: () => void;\n  defaultTab: MessageDetailsBodyProps[\"defaultTab\"];\n  message: Message | undefined;\n};\nexport const MessageDetails: VoidFunctionComponent<MessageDetailsProps> = ({\n  onClose,\n  defaultTab,\n  message,\n}) => {\n  const { t } = useTranslation(\"message-browser\");\n\n  return (\n    <DrawerPanelContent isResizable={true} minSize={\"400px\"}>\n      <DrawerHead>\n        <TextContent>\n          <Text component={TextVariants.h2}>{t(\"message\")}</Text>\n        </TextContent>\n        <DrawerActions>\n          <DrawerCloseButton onClick={onClose} />\n        </DrawerActions>\n      </DrawerHead>\n      <DrawerContentBody>\n        {message && (\n          <MessageDetailsBody\n            defaultTab={defaultTab}\n            messageKey={message.key}\n            {...message}\n          />\n        )}\n      </DrawerContentBody>\n    </DrawerPanelContent>\n  );\n};\n\nexport type MessageDetailsBodyProps = {\n  defaultTab: \"value\" | \"headers\";\n  messageKey: Message[\"key\"];\n} & Omit<Message, \"key\">;\n\nexport const MessageDetailsBody: VoidFunctionComponent<\n  MessageDetailsBodyProps\n> = ({ defaultTab, ...message }) => {\n  const { t } = useTranslation(\"message-browser\");\n\n  return (\n    <Flex direction={{ default: \"column\" }} data-testid={\"message-details\"}>\n      <FlexItem>\n        <DescriptionList isHorizontal isCompact>\n          <DescriptionListGroup>\n            <DescriptionListTerm>{t(\"field.partition\")}</DescriptionListTerm>\n            <DescriptionListDescription>\n              {message.partition}\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>{t(\"field.offset\")}</DescriptionListTerm>\n            <DescriptionListDescription>\n              {message.offset}\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>{t(\"field.timestamp\")}</DescriptionListTerm>\n            <DescriptionListDescription>\n              {message.timestamp ? (\n                <FormatDate\n                  date={parseISO(message.timestamp)}\n                  format={\"longWithMilliseconds\"}\n                />\n              ) : (\n                <NoDataCell columnLabel={t(\"field.timestamp\")} />\n              )}\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>{t(\"field.epoch\")}</DescriptionListTerm>\n            <DescriptionListDescription>\n              {message.timestamp ? (\n                <FormatDate\n                  date={parseISO(message.timestamp)}\n                  format={\"epoch\"}\n                />\n              ) : (\n                <NoDataCell columnLabel={t(\"field.epoch\")} />\n              )}\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>{t(\"field.key\")}</DescriptionListTerm>\n            <DescriptionListDescription>\n              {message.messageKey ? (\n                message.messageKey\n              ) : (\n                <NoDataCell columnLabel={t(\"field.key\")} />\n              )}\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n        </DescriptionList>\n      </FlexItem>\n      <FlexItem>\n        {/* set key to be a random number to force redraw the tabs in order to change the active tab from the outside */}\n        <Tabs defaultActiveKey={defaultTab} key={Math.random()}>\n          <Tab\n            eventKey={\"value\"}\n            title={<TabTitleText>{t(\"field.value\")}</TabTitleText>}\n          >\n            <ClipboardCopy isCode={true} isExpanded={true} isReadOnly={true}>\n              {beautifyUnknownValue(message.value || \"\")}\n            </ClipboardCopy>\n          </Tab>\n          <Tab\n            eventKey={\"headers\"}\n            title={<TabTitleText>{t(\"field.headers\")}</TabTitleText>}\n          >\n            <ClipboardCopy isCode={true} isExpanded={true} isReadOnly={true}>\n              {beautifyUnknownValue(JSON.stringify(message.headers) || \"\")}\n            </ClipboardCopy>\n          </Tab>\n        </Tabs>\n      </FlexItem>\n    </Flex>\n  );\n};\n","import {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { CubesIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const NoDataEmptyState: VoidFunctionComponent<{\n  onRefresh: () => void;\n}> = ({ onRefresh }) => {\n  const { t } = useTranslation(\"message-browser\");\n  return (\n    <EmptyState variant={EmptyStateVariant.large}>\n      <EmptyStateIcon icon={CubesIcon} />\n      <Title headingLevel=\"h4\" size=\"lg\">\n        {t(\"no_data_title\")}\n      </Title>\n      <EmptyStateBody>{t(\"no_data_body\")}</EmptyStateBody>\n      <Button onClick={onRefresh}>{t(\"no_data_refresh\")}</Button>\n    </EmptyState>\n  );\n};\n","import {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { SearchIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const NoResultsEmptyState: VoidFunctionComponent<{\n  onReset: () => void;\n}> = ({ onReset }) => {\n  const { t } = useTranslation(\"message-browser\");\n  return (\n    <EmptyState variant={EmptyStateVariant.large}>\n      <EmptyStateIcon icon={SearchIcon} />\n      <Title headingLevel=\"h4\" size=\"lg\">\n        {t(\"no_results_title\")}\n      </Title>\n      <EmptyStateBody>{t(\"no_results_body\")}</EmptyStateBody>\n      <Button variant={\"link\"} onClick={onReset}>\n        {t(\"no_results_reset\")}\n      </Button>\n    </EmptyState>\n  );\n};\n","import { Text, TextContent } from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const OffsetRange: VoidFunctionComponent<{\n  min: number;\n  max: number;\n}> = ({ min, max }) => {\n  const { t } = useTranslation(\"message-browser\");\n  return (\n    <TextContent className=\"pf-u-font-size\">\n      <Text>\n        {t(\"offset\")} <span className=\"custom-text\">{min}</span> -{\" \"}\n        <span className=\"custom-text\">{max}</span>\n      </Text>\n    </TextContent>\n  );\n};\n","import type { SelectProps } from \"@patternfly/react-core\";\nimport {\n  InputGroup,\n  InputGroupText,\n  InputGroupTextVariant,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback, useMemo, useState } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nconst MAX_OPTIONS = 20;\n\nexport type PartitionSelectorProps = {\n  value: number | undefined;\n  partitions: number | undefined;\n  isDisabled: boolean;\n  onChange: (value: number | undefined) => void;\n};\nexport const PartitionSelector: VoidFunctionComponent<\n  PartitionSelectorProps\n> = ({ value, partitions, isDisabled, onChange }) => {\n  const { t } = useTranslation(\"message-browser\");\n  const [isOpen, setIsOpen] = useState(false);\n  const toggleOpen = (isOpen: boolean) => setIsOpen(isOpen);\n  const titleId = \"partition-selector\";\n\n  const handleChange = useCallback(\n    (value: string) => {\n      if (value !== \"\") {\n        const valueAsNum = parseInt(value, 10);\n        if (Number.isInteger(valueAsNum)) {\n          onChange(valueAsNum);\n        }\n      }\n      setIsOpen(false);\n    },\n    [onChange]\n  );\n\n  const allPartitions = useMemo(() => {\n    return new Array(partitions).fill(0).map((_, index) => index.toString());\n  }, [partitions]);\n\n  const makeOptions = useCallback(\n    (values: string[]) => {\n      const options = values\n        .slice(0, MAX_OPTIONS)\n        .map((v) => <SelectOption key={v} value={v} />);\n      const hiddenOptionsCount = values.length - options.length;\n      return hiddenOptionsCount\n        ? [\n            ...options,\n            <SelectOption\n              key={\"more-info\"}\n              isDisabled={true}\n              description={t(\"partitions_hidden\", {\n                count: hiddenOptionsCount,\n              })}\n            />,\n          ]\n        : options;\n    },\n    [t]\n  );\n\n  const options = useMemo(() => {\n    return makeOptions(allPartitions);\n  }, [allPartitions, makeOptions]);\n\n  const handleFilter: SelectProps[\"onFilter\"] = useCallback(\n    (_, filter: string) => {\n      if (filter !== \"\") {\n        return makeOptions(\n          allPartitions.filter((partition) => partition.includes(filter))\n        );\n      }\n      return options;\n    },\n    [allPartitions, makeOptions, options]\n  );\n\n  return (\n    <InputGroup>\n      <InputGroupText className=\"pf-c-content\">\n        {t(\"field.partition\")}\n      </InputGroupText>\n      <div>\n        <span id={titleId} hidden>\n          {t(\"select_partition_aria_label\")}\n        </span>\n        <Select\n          variant={SelectVariant.typeahead}\n          typeAheadAriaLabel={t(\"select_partition_typeahead\")}\n          onToggle={toggleOpen}\n          onSelect={(_, value) => handleChange(value as string)}\n          selections={value !== undefined ? [`${value}`] : undefined}\n          isOpen={isOpen}\n          aria-labelledby={titleId}\n          maxHeight={200}\n          width={150}\n          onFilter={handleFilter}\n          isInputValuePersisted={false}\n          isDisabled={isDisabled}\n          placeholderText={t(\"partition_placeholder\")}\n          onClear={() => onChange(undefined)}\n          data-testid={\"partition-selector\"}\n        >\n          {options}\n        </Select>\n      </div>\n      <InputGroupText\n        id={`${titleId}-input`}\n        variant={InputGroupTextVariant.plain}\n        className=\"pf-c-content\"\n      >\n        {t(\"select_partition_of_count\", { partitions })}\n      </InputGroupText>\n    </InputGroup>\n  );\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { truncate } from \"../utils\";\nimport { Flex, FlexItem } from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nconst PREVIEW_LENGTH = 170;\n\nexport type UnknownValuePreviewProps = {\n  value: string;\n  truncateAt?: number;\n  onClick?: () => void;\n};\nexport const UnknownValuePreview: VoidFunctionComponent<\n  UnknownValuePreviewProps\n> = ({ value, truncateAt = PREVIEW_LENGTH, onClick }) => {\n  const { t } = useTranslation(\"message-browser\");\n  const [preview, truncated] = truncate(value, truncateAt);\n  return (\n    <Flex\n      direction={{ default: \"column\" }}\n      spaceItems={{ default: \"spaceItemsXs\" }}\n    >\n      <FlexItem>{preview}</FlexItem>\n      {truncated && (\n        <FlexItem>\n          <a\n            onClick={\n              onClick\n                ? (e) => {\n                    e.stopPropagation();\n                    onClick();\n                  }\n                : undefined\n            }\n          >\n            {t(\"show_more\")}\n          </a>\n        </FlexItem>\n      )}\n    </Flex>\n  );\n};\n","import type { Message } from \"ui-models/src/models/message\";\nimport { assign, createMachine } from \"xstate\";\nimport type { DateIsoString } from \"../../../../ui-models/src/types\";\nimport { isSameMessage } from \"./utils\";\n\nexport type MessageApiResponse = {\n  lastUpdated: Date;\n  messages: Message[];\n  partitions: number;\n  offsetMin: number;\n  offsetMax: number;\n\n  filter: {\n    partition: number | undefined;\n    offset: number | undefined;\n    timestamp: DateIsoString | undefined;\n    limit: number | undefined;\n    epoch: number | undefined;\n  };\n};\n\nexport const MessageBrowserMachine = createMachine(\n  {\n    id: \"message-browser\",\n    tsTypes: {} as import(\"./MessageBrowserMachine.typegen\").Typegen0,\n    schema: {\n      context: {} as {\n        // response\n        response: MessageApiResponse | undefined;\n\n        limit: number;\n        // optional input\n        partition: number | undefined;\n        offset: number | undefined;\n        epoch: number | undefined;\n        timestamp: DateIsoString | undefined;\n        selectedMessage: Message | undefined;\n      },\n      events: {} as\n        | {\n            type: \"fetchSuccess\";\n            messages: Message[];\n            partitions: number;\n            offsetMin: number;\n            offsetMax: number;\n          }\n        | { type: \"fetchFail\" }\n        | { type: \"refresh\" }\n        | { type: \"setPartition\"; value: number | undefined }\n        | { type: \"setOffset\"; value: number | undefined }\n        | { type: \"setTimestamp\"; value: DateIsoString | undefined }\n        | { type: \"setEpoch\"; value: number | undefined }\n        | { type: \"setLatest\" }\n        | { type: \"setLimit\"; value: number }\n        | { type: \"selectMessage\"; message: Message }\n        | { type: \"deselectMessage\" },\n    },\n    initial: \"initialLoading\",\n    context: {\n      // response\n      response: undefined,\n\n      limit: 10,\n      // optional input\n      partition: undefined,\n      offset: undefined,\n      timestamp: undefined,\n      selectedMessage: undefined,\n      epoch: undefined,\n    },\n    states: {\n      initialLoading: {\n        invoke: {\n          src: \"api\",\n        },\n        on: {\n          fetchSuccess: {\n            actions: \"setMessages\",\n            target: \"verifyMessages\",\n          },\n          fetchFail: \"error\",\n        },\n      },\n      verifyMessages: {\n        always: [{ cond: \"noMessages\", target: \"noData\" }, { target: \"ready\" }],\n      },\n      noData: {\n        on: {\n          refresh: \"initialLoading\",\n        },\n      },\n      error: {\n        on: {\n          refresh: \"initialLoading\",\n        },\n      },\n      ready: {\n        initial: \"pristine\",\n        states: {\n          pristine: {},\n          dirty: {\n            tags: \"dirty\",\n          },\n          shouldSearch: {\n            always: [\n              {\n                cond: \"areFiltersChanged\",\n                target: \"dirty\",\n              },\n              { target: \"pristine\" },\n            ],\n          },\n        },\n        always: [\n          {\n            cond: \"selectedMessageNotAvailable\",\n            actions: \"deselectMessage\",\n          },\n        ],\n        on: {\n          refresh: \"refreshing\",\n          setPartition: {\n            target: \".shouldSearch\",\n            actions: \"setPartition\",\n          },\n          setEpoch: {\n            actions: \"setEpoch\",\n            target: \".shouldSearch\",\n          },\n          setTimestamp: {\n            target: \".shouldSearch\",\n            actions: \"setTimestamp\",\n          },\n          setOffset: {\n            target: \".shouldSearch\",\n            actions: \"setOffset\",\n          },\n          setLatest: {\n            target: \".shouldSearch\",\n            actions: \"setLatest\",\n          },\n          setLimit: {\n            target: \".shouldSearch\",\n            actions: \"setLimit\",\n          },\n          selectMessage: {\n            actions: \"selectMessage\",\n          },\n          deselectMessage: {\n            actions: \"deselectMessage\",\n          },\n        },\n      },\n      refreshing: {\n        invoke: {\n          src: \"api\",\n        },\n        on: {\n          fetchSuccess: {\n            actions: \"setMessages\",\n            target: \"ready\",\n          },\n          fetchFail: {\n            target: \"ready\",\n          },\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      setMessages: assign(\n        (context, { messages, partitions, offsetMin, offsetMax }) => ({\n          response: {\n            lastUpdated: new Date(),\n            messages,\n            partitions,\n            offsetMin,\n            offsetMax,\n            filter: {\n              partition: context.partition,\n              timestamp: context.timestamp,\n              offset: context.offset,\n              limit: context.limit,\n              epoch: context.epoch,\n            },\n          },\n        })\n      ),\n      setPartition: assign((_, { value }) => ({ partition: value })),\n      setEpoch: assign((_, { value }) => ({\n        epoch: value,\n      })),\n      setTimestamp: assign((_, { value }) => ({\n        timestamp: value,\n      })),\n      setOffset: assign((_, { value }) => ({\n        offset: value,\n      })),\n      setLimit: assign((_, { value }) => ({\n        limit: value,\n      })),\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      setLatest: assign((_) => ({\n        timestamp: undefined,\n        offset: undefined,\n      })),\n      selectMessage: assign((_, { message }) => ({ selectedMessage: message })),\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      deselectMessage: assign((_) => ({ selectedMessage: undefined })),\n    },\n    guards: {\n      noMessages: ({ response }) =>\n        response === undefined || response.messages.length === 0,\n      selectedMessageNotAvailable: ({ response, selectedMessage }) =>\n        selectedMessage !== undefined &&\n        response?.messages.find((m) => isSameMessage(m, selectedMessage)) ===\n          undefined,\n      areFiltersChanged: (context) =>\n        context.response?.filter.limit !== context.limit ||\n        context.response?.filter.offset !== context.offset ||\n        context.response?.filter.partition !== context.partition ||\n        context.response?.filter.timestamp !== context.timestamp ||\n        context.response?.filter.epoch !== context.epoch,\n    },\n  }\n);\n","import {\n  Button,\n  Drawer,\n  DrawerContent,\n  PageSection,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n} from \"@patternfly/react-core\";\nimport { FilterIcon, SearchIcon } from \"@patternfly/react-icons\";\nimport type { BaseCellProps } from \"@patternfly/react-table\";\nimport {\n  InnerScrollContainer,\n  OuterScrollContainer,\n} from \"@patternfly/react-table\";\nimport {\n  FormatDate,\n  Loading,\n  RefreshButton,\n  ResponsiveTable,\n  useTranslation,\n} from \"@rhoas/app-services-ui-components\";\nimport { useMachine } from \"@xstate/react\";\nimport { parseISO } from \"date-fns\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useMemo, useState } from \"react\";\nimport type { Message } from \"ui-models/src/models/message\";\nimport type { DateIsoString } from \"../../../../ui-models/src/types\";\nimport type { MessageDetailsProps } from \"./components\";\nimport {\n  FilterGroup,\n  LimitSelector,\n  MessageDetails,\n  NoDataCell,\n  NoDataEmptyState,\n  NoResultsEmptyState,\n  OffsetRange,\n  PartitionSelector,\n  UnknownValuePreview,\n} from \"./components\";\nimport \"./KafkaMessageBrowser.css\";\nimport type { MessageApiResponse } from \"./MessageBrowserMachine\";\nimport { MessageBrowserMachine } from \"./MessageBrowserMachine\";\nimport { beautifyUnknownValue, isSameMessage } from \"./utils\";\n\nconst columns = [\n  \"partition\",\n  \"offset\",\n  \"timestamp\",\n  \"key\",\n  \"headers\",\n  \"value\",\n] as const;\n\nconst columnWidths: BaseCellProps[\"width\"][] = [10, 10, 15, 10, undefined, 30];\n\nexport type KafkaMessageBrowserProps = {\n  getMessages: (props: {\n    partition?: number;\n    offset?: number;\n    timestamp?: DateIsoString;\n    limit: number;\n  }) => Promise<{ messages: Message[]; partitions: number }>;\n};\nexport const KafkaMessageBrowser: VoidFunctionComponent<\n  KafkaMessageBrowserProps\n> = ({ getMessages }) => {\n  const [state, send] = useMachine(() => MessageBrowserMachine, {\n    devTools: true,\n    services: {\n      api: (context) => {\n        return (send) => {\n          getMessages({\n            partition: context.partition,\n            offset: context.offset,\n            timestamp: context.timestamp,\n            limit: context.limit,\n          })\n            .then(({ messages, partitions }) =>\n              send({\n                type: \"fetchSuccess\",\n                messages,\n                partitions,\n                offsetMin: context.offset || 0,\n                offsetMax: messages.reduce(\n                  (max, m) => Math.max(max, m.offset || 0),\n                  0\n                ),\n              })\n            )\n            .catch(() => send({ type: \"fetchFail\" }));\n        };\n      },\n    },\n  });\n\n  return (\n    <KafkaMessageBrowserConnected\n      isFirstLoad={state.matches(\"initialLoading\")}\n      isNoData={state.matches(\"noData\") || state.matches(\"error\")}\n      isRefreshing={state.matches(\"refreshing\")}\n      requiresSearch={state.hasTag(\"dirty\")}\n      selectedMessage={state.context.selectedMessage}\n      response={state.context.response}\n      lastUpdated={state.context.response?.lastUpdated}\n      partition={state.context.partition}\n      limit={state.context.limit}\n      filterOffset={state.context.offset}\n      filterEpoch={state.context.epoch}\n      filterTimestamp={state.context.timestamp}\n      setPartition={(value: number | undefined) =>\n        send({ type: \"setPartition\", value })\n      }\n      setOffset={(value: number | undefined) =>\n        send({ type: \"setOffset\", value })\n      }\n      setTimestamp={(value: DateIsoString | undefined) =>\n        send({ type: \"setTimestamp\", value })\n      }\n      setEpoch={(value: number | undefined) =>\n        send({ type: \"setEpoch\", value })\n      }\n      setLatest={() => send({ type: \"setLatest\" })}\n      setLimit={(value: number) => send({ type: \"setLimit\", value })}\n      refresh={() => send({ type: \"refresh\" })}\n      selectMessage={(message: Message) =>\n        send({ type: \"selectMessage\", message })\n      }\n      deselectMessage={() => send({ type: \"deselectMessage\" })}\n    />\n  );\n};\n\nexport type KafkaMessageBrowserConnectedProps = {\n  isFirstLoad: boolean;\n  isNoData: boolean;\n  isRefreshing: boolean;\n  requiresSearch: boolean;\n  selectedMessage: Message | undefined;\n  lastUpdated: Date | undefined;\n  response: MessageApiResponse | undefined;\n  partition: number | undefined;\n  limit: number;\n  filterOffset: number | undefined;\n  filterEpoch: number | undefined;\n  filterTimestamp: DateIsoString | undefined;\n  setPartition: (value: number | undefined) => void;\n  setOffset: (value: number | undefined) => void;\n  setTimestamp: (value: DateIsoString | undefined) => void;\n  setEpoch: (value: number | undefined) => void;\n  setLatest: () => void;\n  setLimit: (value: number) => void;\n  refresh: () => void;\n  selectMessage: (message: Message) => void;\n  deselectMessage: () => void;\n};\nexport const KafkaMessageBrowserConnected: VoidFunctionComponent<\n  KafkaMessageBrowserConnectedProps\n> = ({\n  isFirstLoad,\n  isNoData,\n  isRefreshing,\n  requiresSearch,\n  selectedMessage,\n  response,\n  partition,\n  limit,\n  filterOffset,\n  filterEpoch,\n  filterTimestamp,\n  setPartition,\n  setOffset,\n  setTimestamp,\n  setEpoch,\n  setLatest,\n  setLimit,\n  refresh,\n  selectMessage,\n  deselectMessage,\n}) => {\n  const { t } = useTranslation(\"message-browser\");\n  const [defaultTab, setDefaultTab] =\n    useState<MessageDetailsProps[\"defaultTab\"]>(\"value\");\n\n  const columnLabels: { [key in typeof columns[number]]: string } = useMemo(\n    () =>\n      ({\n        partition: t(\"field.partition\"),\n        offset: t(\"field.offset\"),\n        timestamp: t(\"field.timestamp\"),\n        key: t(\"field.key\"),\n        value: t(\"field.value\"),\n        headers: t(\"field.headers\"),\n      } as const),\n    [t]\n  );\n\n  switch (true) {\n    case isFirstLoad:\n      return <Loading />;\n    case isNoData:\n      return <NoDataEmptyState onRefresh={refresh} />;\n    default:\n      return (\n        <PageSection isFilled={true} hasOverflowScroll={true}>\n          <Drawer isInline={true} isExpanded={selectedMessage !== undefined}>\n            <DrawerContent\n              panelContent={\n                <MessageDetails\n                  message={selectedMessage}\n                  defaultTab={defaultTab}\n                  onClose={deselectMessage}\n                />\n              }\n            >\n              <OuterScrollContainer>\n                <Toolbar\n                  className={\"mas-KafkaMessageBrowser-Toolbar\"}\n                  data-testid={\"message-browser-toolbar\"}\n                >\n                  <ToolbarContent>\n                    <ToolbarToggleGroup\n                      toggleIcon={<FilterIcon />}\n                      breakpoint=\"2xl\"\n                    >\n                      <ToolbarGroup variant=\"filter-group\">\n                        <ToolbarItem>\n                          <PartitionSelector\n                            value={partition}\n                            partitions={response?.partitions || 0}\n                            onChange={setPartition}\n                            isDisabled={isRefreshing}\n                          />\n                        </ToolbarItem>\n                      </ToolbarGroup>\n                      <ToolbarGroup variant=\"filter-group\">\n                        <FilterGroup\n                          isDisabled={isRefreshing}\n                          offset={filterOffset}\n                          epoch={filterEpoch}\n                          timestamp={filterTimestamp}\n                          onOffsetChange={setOffset}\n                          onTimestampChange={setTimestamp}\n                          onEpochChange={setEpoch}\n                          onLatest={setLatest}\n                        />\n                      </ToolbarGroup>\n                      <ToolbarGroup>\n                        <LimitSelector\n                          value={limit}\n                          onChange={setLimit}\n                          isDisabled={isRefreshing}\n                        />\n                      </ToolbarGroup>\n                    </ToolbarToggleGroup>\n                    <ToolbarGroup>\n                      <ToolbarItem>\n                        <Button\n                          variant={\"plain\"}\n                          isDisabled={!requiresSearch || isRefreshing}\n                          aria-label={t(\"common:search_button_label\")}\n                          onClick={refresh}\n                        >\n                          <SearchIcon />\n                        </Button>\n                      </ToolbarItem>\n                      <ToolbarItem>\n                        <RefreshButton\n                          onClick={refresh}\n                          isRefreshing={isRefreshing}\n                          isDisabled={requiresSearch}\n                        />\n                      </ToolbarItem>\n                    </ToolbarGroup>\n                    <ToolbarGroup alignment={{ default: \"alignRight\" }}>\n                      {response?.filter.partition !== undefined &&\n                        response?.messages.length > 0 && (\n                          <OffsetRange\n                            min={response?.offsetMin || 0}\n                            max={response?.offsetMax || 0}\n                          />\n                        )}\n                    </ToolbarGroup>\n                  </ToolbarContent>\n                </Toolbar>\n                <InnerScrollContainer>\n                  <ResponsiveTable\n                    ariaLabel={t(\"table_aria_label\")}\n                    columns={columns}\n                    data={response?.messages}\n                    expectedLength={response?.messages?.length}\n                    renderHeader={({ column, Th, key }) => (\n                      <Th key={key}>{columnLabels[column]}</Th>\n                    )}\n                    renderCell={({ column, row, colIndex, Td, key }) => (\n                      <Td\n                        key={key}\n                        dataLabel={columnLabels[column]}\n                        width={columnWidths[colIndex]}\n                      >\n                        {(() => {\n                          const empty = (\n                            <NoDataCell columnLabel={columnLabels[column]} />\n                          );\n                          switch (column) {\n                            case \"partition\":\n                              return row.partition;\n                            case \"offset\":\n                              return row.offset;\n                            case \"timestamp\":\n                              return row.timestamp ? (\n                                <FormatDate\n                                  date={parseISO(row.timestamp)}\n                                  format={\"longWithMilliseconds\"}\n                                />\n                              ) : (\n                                empty\n                              );\n                            case \"key\":\n                              return row.key ? (\n                                <UnknownValuePreview\n                                  value={row.key}\n                                  truncateAt={40}\n                                />\n                              ) : (\n                                empty\n                              );\n                            case \"headers\":\n                              return Object.keys(row.headers).length > 0 ? (\n                                <UnknownValuePreview\n                                  value={beautifyUnknownValue(\n                                    JSON.stringify(row.headers)\n                                  )}\n                                  onClick={() => {\n                                    setDefaultTab(\"headers\");\n                                    selectMessage(row);\n                                  }}\n                                />\n                              ) : (\n                                empty\n                              );\n                            case \"value\":\n                              return row.value ? (\n                                <UnknownValuePreview\n                                  value={beautifyUnknownValue(row.value || \"\")}\n                                  onClick={() => {\n                                    setDefaultTab(\"value\");\n                                    selectMessage(row);\n                                  }}\n                                />\n                              ) : (\n                                empty\n                              );\n                          }\n                        })()}\n                      </Td>\n                    )}\n                    isRowSelected={({ row }) =>\n                      selectedMessage !== undefined &&\n                      isSameMessage(row, selectedMessage)\n                    }\n                    onRowClick={({ row }) => {\n                      setDefaultTab(\"value\");\n                      selectMessage(row);\n                    }}\n                  >\n                    <NoResultsEmptyState\n                      onReset={() => {\n                        setLatest();\n                        setPartition(undefined);\n                        refresh();\n                      }}\n                    />\n                  </ResponsiveTable>\n                </InnerScrollContainer>\n              </OuterScrollContainer>\n            </DrawerContent>\n          </Drawer>\n        </PageSection>\n      );\n  }\n};\n","import {\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface CapacityTable {\n  name: string;\n  firstStreamingUnit: string;\n  secondStreamingUnit: string;\n}\n\nexport const KafkaInstanceCapacityTable: FunctionComponent = () => {\n  const { t } = useTranslation(\"kafkaoverview-v2\");\n\n  const capacityTable: CapacityTable[] = [\n    {\n      name: \"Ingress (MB/second)\",\n      firstStreamingUnit: \"up to 50\",\n      secondStreamingUnit: \"up to 100\",\n    },\n    {\n      name: \"Egress (MB/second)\",\n      firstStreamingUnit: \"up to 100\",\n      secondStreamingUnit: \"up to 200\",\n    },\n    {\n      name: \"Storage* (GB)\",\n      firstStreamingUnit: \"up to 1000\",\n      secondStreamingUnit: \"up to 2000\",\n    },\n    {\n      name: \"Topic partitions\",\n      firstStreamingUnit: \"up to 1500\",\n      secondStreamingUnit: \"up to 3000\",\n    },\n    {\n      name: \"Client connections\",\n      firstStreamingUnit: \"up to 3000\",\n      secondStreamingUnit: \"up to 6000\",\n    },\n    {\n      name: \"Connection rate (connections/second)\",\n      firstStreamingUnit: \"up to 100\",\n      secondStreamingUnit: \"up to 200\",\n    },\n    {\n      name: \"Message size (MB)\",\n      firstStreamingUnit: \"up to 1\",\n      secondStreamingUnit: \"up to 1\",\n    },\n  ];\n\n  const columnNames = {\n    name: \"\",\n    firstStreamingUnit: t(\"firstStreamingUnit\"),\n    secondStreamingUnit: t(\"secondStreamingUnit\"),\n  };\n\n  return (\n    <TableComposable>\n      <Thead>\n        <Tr>\n          <Th>{columnNames.name}</Th>\n          <Th>{columnNames.firstStreamingUnit}</Th>\n          <Th>{columnNames.secondStreamingUnit}</Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        {capacityTable.map((table) => {\n          return (\n            <Tr key={table.name}>\n              <Td dataLabel={columnNames.name}>{table.name}</Td>\n              <Td dataLabel={columnNames.firstStreamingUnit}>\n                {table.firstStreamingUnit}\n              </Td>\n              <Td dataLabel={columnNames.secondStreamingUnit}>\n                {table.secondStreamingUnit}\n              </Td>\n            </Tr>\n          );\n        })}\n      </Tbody>\n    </TableComposable>\n  );\n};\n","import {\n  Bullseye,\n  Card,\n  PageSection,\n  PageSectionVariants,\n  Stack,\n  StackItem,\n  Text,\n  TextVariants,\n  Title,\n} from \"@patternfly/react-core\";\nimport classNames from \"classnames\";\nimport type {\n  CSSProperties,\n  FunctionComponent,\n  ReactNode,\n  VoidFunctionComponent,\n} from \"react\";\nimport \"./MarketingPage.css\";\n\nexport type MarketingPageHeroProps = {\n  title: string;\n  tagLine: string;\n  description: string;\n  description2?: string;\n  heroImage: string;\n  heroImageSize: number;\n  heroImageCanRepeat?: boolean;\n  heroImagePositionY?: number;\n  cta?: ReactNode;\n  variant?: \"light\" | \"dark\";\n};\n\nexport const MarketingPageHero: VoidFunctionComponent<\n  MarketingPageHeroProps\n> = ({\n  title,\n  tagLine,\n  description,\n  description2,\n  heroImage,\n  heroImageSize,\n  heroImageCanRepeat = true,\n  heroImagePositionY = 0,\n  cta,\n  variant = \"light\",\n}) => {\n  const style = {\n    \"--appsrv-marketing--banner--before--BackgroundImage\": `url(${heroImage})`,\n    \"--appsrv-marketing--banner--before--BackgroundSize\": `${heroImageSize}px`,\n    \"--appsrv-marketing--banner--before--BackgroundRepeat\": heroImageCanRepeat\n      ? \"repeat\"\n      : \"no-repeat\",\n    \"--appsrv-marketing--banner--before--BackgroundPositionY\": `${heroImagePositionY}px`,\n  } as CSSProperties;\n  return (\n    <PageSection\n      className={classNames(\"appsrv-marketing--banner\", {\n        \"pf-u-background-color-dark-100\": variant === \"dark\",\n        \"pf-u-background-color-100\": variant === \"light\",\n      })}\n      variant={\n        variant === \"dark\"\n          ? PageSectionVariants.dark\n          : PageSectionVariants.light\n      }\n      style={style}\n    >\n      <Stack hasGutter>\n        <Title headingLevel=\"h1\" size=\"2xl\">\n          {title}\n        </Title>\n        <Text\n          className={`appsrv-marketing--banner__tagline ${\n            variant === \"dark\" ? \"\" : \"pf-u-color-200\"\n          }`}\n        >\n          {tagLine}\n        </Text>\n        <Text component={TextVariants.p}>{description}</Text>\n        {description2 && (\n          <Text component={TextVariants.p} className=\"pf-u-mt-md\">\n            {description2}\n          </Text>\n        )}\n        {cta && <StackItem>{cta}</StackItem>}\n      </Stack>\n    </PageSection>\n  );\n};\n\nexport const MarketingPageBanner: FunctionComponent = ({ children }) => {\n  return (\n    <PageSection\n      variant={PageSectionVariants.light}\n      className=\"appsrv-marketing--page-section--marketing pf-u-background-color-100\"\n    >\n      <Bullseye>\n        <Text\n          component={TextVariants.p}\n          className=\"appsrv-marketing--banner--text-only\"\n        >\n          {children}\n        </Text>\n      </Bullseye>\n    </PageSection>\n  );\n};\n\nexport type MarketingPageSectionProps = {\n  className?: string;\n};\n\nexport const MarketingPageSection: FunctionComponent<\n  MarketingPageSectionProps & {\n    variant?: \"dark\" | \"light\" | \"default\";\n  }\n> = ({\n  className = \"appsrv-marketing--page-section--marketing\",\n  variant = \"default\",\n  children,\n}) => (\n  <PageSection\n    isWidthLimited\n    className={classNames(className, {\n      \"pf-u-background-color-dark-100\": variant === \"dark\",\n      \"pf-u-background-color-100\": variant === \"light\",\n    })}\n    variant={\n      variant === \"dark\"\n        ? PageSectionVariants.dark\n        : variant === \"light\"\n        ? PageSectionVariants.light\n        : PageSectionVariants.default\n    }\n  >\n    {children}\n  </PageSection>\n);\n\nexport const MarketingPageVideoCard: VoidFunctionComponent<{\n  src: string;\n  title: string;\n}> = ({ src, title }) => (\n  <Card className=\"appsrv-marketing--video\">\n    <div className=\"appsrv-marketing--video__wrapper\">\n      <iframe\n        src={src}\n        title={title}\n        frameBorder=\"0\"\n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n        allowFullScreen\n      ></iframe>\n    </div>\n  </Card>\n);\n","import {\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n  CardHeaderMain,\n  CardTitle,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Divider,\n  Flex,\n  FlexItem,\n  Grid,\n  Split,\n  SplitItem,\n  Stack,\n  Text,\n  TextContent,\n  TextVariants,\n  Title,\n} from \"@patternfly/react-core\";\nimport {\n  AppSpeedKeyArt,\n  ExternalLink,\n} from \"@rhoas/app-services-ui-components\";\nimport type { FunctionComponent } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { KafkaInstanceCapacityTable } from \"./KafkaInstanceCapacityTable\";\nimport { LogoAWS, LogoAzure, LogoGCP } from \"./Logos/images\";\nimport { MarketingPageHero, MarketingPageSection } from \"./MarketingPage\";\n\nexport const KafkaPageV3: FunctionComponent = () => {\n  const { t } = useTranslation([\"kafkaoverview-v3\"]);\n  return (\n    <>\n      <MarketingPageHero\n        title={t(\"heroTitle\")}\n        tagLine={t(\"heroTagline\")}\n        description={t(\"heroDescription\")}\n        heroImage={AppSpeedKeyArt}\n        heroImageSize={478}\n        heroImageCanRepeat={false}\n        heroImagePositionY={-99}\n      />\n      <MarketingPageSection>\n        <Grid hasGutter lg={6}>\n          <Card\n            ouiaId=\"card-overview-purchase-now\"\n            aria-label={t(\"kafkaoverview:purchaseCardTitle\")}\n          >\n            <CardHeader>\n              <CardHeaderMain>\n                <CardTitle>\n                  <Title headingLevel=\"h2\">\n                    <Trans\n                      ns={\"kafkaoverview-v3\"}\n                      i18nKey={\"purchaseCardTitle\"}\n                    >\n                      <span className=\"pf-u-color-200 pf-u-font-size-sm\"></span>\n                    </Trans>\n                  </Title>\n                </CardTitle>\n              </CardHeaderMain>\n            </CardHeader>\n            <CardBody>{t(\"purchaseCardMainText\")}</CardBody>\n            <CardFooter>\n              <Flex spaceItems={{ default: \"spaceItems2xl\" }}>\n                <FlexItem>\n                  <ExternalLink\n                    href={\n                      \"https://marketplace.redhat.com/en-us/products/red-hat-openshift-streams-for-apache-kafka\"\n                    }\n                    testId={\"cardPurchase-buttonRH\"}\n                    className={\"pf-u-ml-md \"}\n                  >\n                    <Trans\n                      ns={\"kafkaoverview-v3\"}\n                      i18nKey={\"purchaseCardCallToActionButtonRedHat\"}\n                      components={{\n                        bold: <strong />,\n                        size: <span className=\"pf-u-font-size-lg\" />,\n                      }}\n                    />\n                  </ExternalLink>\n                </FlexItem>\n\n                <FlexItem>\n                  <ExternalLink\n                    href={\n                      \"https://aws.amazon.com/marketplace/pp/prodview-3xohcoyuwkumc\"\n                    }\n                    testId={\"cardPurchase-buttonAWS\"}\n                    className={\"pf-u-ml-md\"}\n                  >\n                    <Trans\n                      ns={\"kafkaoverview-v3\"}\n                      i18nKey={\"purchaseCardCallToActionButtonAWS\"}\n                      components={{\n                        bold: <strong />,\n                        size: <span className=\"pf-u-font-size-lg\" />,\n                      }}\n                    />\n                  </ExternalLink>\n                </FlexItem>\n              </Flex>\n            </CardFooter>\n          </Card>\n          <Card\n            ouiaId=\"card-overview-contact-sales\"\n            aria-label={t(\"kafkaoverview:contactSalesCardTitle\")}\n          >\n            <CardHeader>\n              <CardTitle>\n                <Title headingLevel=\"h2\">\n                  <Trans\n                    ns={\"kafkaoverview-v3\"}\n                    i18nKey={\"contactSalesCardTitle\"}\n                  >\n                    <span className=\"pf-u-color-200 pf-u-font-size-sm\"></span>\n                  </Trans>\n                </Title>\n              </CardTitle>\n            </CardHeader>\n            <CardBody>{t(\"contactSalesCardMainText\")}</CardBody>\n            <CardFooter>\n              <ExternalLink\n                href={\n                  \"https://www.redhat.com/en/technologies/cloud-computing/openshift/openshift-streams-for-apache-kafka#contact-us\"\n                }\n                testId={\"cardContactSales-buttonCTA\"}\n                className={\"pf-u-ml-md\"}\n              >\n                <Trans\n                  ns={\"kafkaoverview-v3\"}\n                  i18nKey={\"contactSalesCardCallToActionButton\"}\n                  components={{\n                    bold: <strong />,\n                    size: <span className=\"pf-u-font-size-lg\" />,\n                  }}\n                />\n              </ExternalLink>\n            </CardFooter>\n          </Card>\n        </Grid>\n      </MarketingPageSection>\n      <MarketingPageSection\n        className={\"kafka-overview--page-section--marketing\"}\n      >\n        <Card>\n          <CardTitle>\n            <Title headingLevel=\"h2\">{t(\"pricingModalTitle\")}</Title>\n          </CardTitle>\n          <CardBody>\n            <Flex spaceItems={{ default: \"spaceItemsXl\" }}>\n              <Flex\n                alignSelf={{ default: \"alignSelfCenter\" }}\n                justifyContent={{ default: \"justifyContentCenter\" }}\n                flex={{ default: \"flex_1\" }}\n              >\n                <FlexItem>\n                  <DescriptionList isHorizontal>\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>\n                        {t(\"steamingUnit\")}\n                      </DescriptionListTerm>\n                      <DescriptionListDescription>\n                        {t(\"streamingUnit_price\")}\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>\n                        {t(\"dataTransfer\")}\n                      </DescriptionListTerm>\n                      <DescriptionListDescription>\n                        {t(\"dataTransfer_price\")}\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>{t(\"storage\")}</DescriptionListTerm>\n                      <DescriptionListDescription>\n                        {t(\"storage_price\")}\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                  </DescriptionList>\n                </FlexItem>\n              </Flex>\n              <Divider isVertical />\n              <FlexItem flex={{ default: \"flex_1\" }}>\n                <TextContent>\n                  <Text component={TextVariants.p}>\n                    <Trans\n                      ns={\"kafkaoverview-v3\"}\n                      i18nKey={\"streamingUnitText\"}\n                      components={{ bold: <strong /> }}\n                    />\n                  </Text>\n                </TextContent>\n              </FlexItem>\n            </Flex>\n          </CardBody>\n        </Card>\n      </MarketingPageSection>\n      <MarketingPageSection\n        className={\"kafka-overview--page-section--marketing\"}\n      >\n        <Card>\n          <CardTitle>\n            <Title headingLevel=\"h2\">{t(\"kafkaInstanceCapacityTitle\")}</Title>\n          </CardTitle>\n          <CardBody>\n            <Stack hasGutter>\n              <Text component={TextVariants.p}>\n                {t(\"kafkaInstanceCapacityDescription\")}\n              </Text>\n              <KafkaInstanceCapacityTable />\n            </Stack>\n          </CardBody>\n          <CardFooter>\n            <TextContent className={\"pf-u-font-size-sm\"}>\n              <Trans\n                ns={\"kafkaoverview-v3\"}\n                i18nKey={\"kafkaInstanceCapacityfooter\"}\n                components={[\n                  <ExternalLink\n                    href={\"https://access.redhat.com/support\"}\n                    testId={\"SupportLink\"}\n                    className={\"pf-u-ml-xs\"}\n                  />,\n                  <ExternalLink\n                    href={\n                      \"https://access.redhat.com/documentation/en-us/red_hat_openshift_streams_for_apache_kafka/1/guide/aced8e5e-8229-4cb2-82f9-87a8caa24bb3\"\n                    }\n                    testId={\"MonitoringDiskSpaceLink\"}\n                    className={\"pf-u-ml-xs\"}\n                  />,\n                ]}\n              />\n            </TextContent>\n          </CardFooter>\n        </Card>\n      </MarketingPageSection>\n      <MarketingPageSection\n        className={\"kafka-overview--page-section--marketing\"}\n      >\n        <Card>\n          <CardTitle>\n            <Title headingLevel=\"h2\">{t(\"cloudProvidersTitle\")}</Title>\n          </CardTitle>\n          <CardBody>\n            <Flex\n              spaceItems={{ default: \"spaceItemsXl\" }}\n              direction={{ default: \"column\", xl: \"row\" }}\n            >\n              <Flex\n                justifyContent={{ default: \"justifyContentCenter\" }}\n                flex={{ default: \"flex_1\" }}\n              >\n                <FlexItem>\n                  <Split hasGutter>\n                    <SplitItem>\n                      <img src={LogoAWS} alt={\"\"} style={{ height: \"60px\" }} />\n                    </SplitItem>\n                    <SplitItem>\n                      <Title headingLevel=\"h2\" className={\"pf-u-pt-sm\"}>\n                        {t(\"awsWebServiceTitle\")}\n                      </Title>\n                    </SplitItem>\n                  </Split>\n                </FlexItem>\n              </Flex>\n              <Divider\n                orientation={{ default: \"horizontal\", xl: \"vertical\" }}\n              />\n              <Flex\n                justifyContent={{ default: \"justifyContentCenter\" }}\n                flex={{ default: \"flex_1\" }}\n              >\n                <FlexItem>\n                  <Split hasGutter>\n                    <SplitItem>\n                      <img src={LogoGCP} alt={\"\"} style={{ height: \"60px\" }} />\n                    </SplitItem>\n                    <SplitItem>\n                      <Title headingLevel=\"h2\" className={\"pf-u-pt-sm\"}>\n                        {t(\"googleCloudProviderTitle\")}\n                      </Title>\n                      <Text\n                        component={TextVariants.p}\n                        className={\"pf-u-color-200\"}\n                      >\n                        {t(\"googleCloudProviderDescription\")}\n                      </Text>\n                    </SplitItem>\n                  </Split>\n                </FlexItem>\n              </Flex>\n              <Divider\n                orientation={{ default: \"horizontal\", xl: \"vertical\" }}\n              />\n              <Flex\n                justifyContent={{ default: \"justifyContentCenter\" }}\n                flex={{ default: \"flex_1\" }}\n              >\n                <FlexItem>\n                  <Split hasGutter>\n                    <SplitItem>\n                      <img\n                        src={LogoAzure}\n                        alt={\"\"}\n                        style={{ height: \"60px\" }}\n                      />\n                    </SplitItem>\n                    <SplitItem>\n                      <Title headingLevel=\"h2\" className={\"pf-u-pt-sm\"}>\n                        {t(\"microsoftAzureTitle\")}\n                      </Title>\n                      <Text\n                        component={TextVariants.p}\n                        className={\"pf-u-color-200\"}\n                      >\n                        {t(\"microsoftAzureDescription\")}\n                      </Text>\n                    </SplitItem>\n                  </Split>\n                </FlexItem>\n              </Flex>\n            </Flex>\n          </CardBody>\n        </Card>\n      </MarketingPageSection>\n    </>\n  );\n};\n","import {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { PlusCircleIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nexport type EmptyStateNoTopicProps = {\n  onCreateTopic: () => void;\n};\n\nexport const EmptyStateNoTopic: VoidFunctionComponent<\n  EmptyStateNoTopicProps\n> = ({ onCreateTopic }) => {\n  const { t } = useTranslation(\"topic\");\n\n  return (\n    <EmptyState\n      data-ouia-page-id=\"emptyStateTopics\"\n      variant={EmptyStateVariant.large}\n    >\n      <EmptyStateIcon icon={PlusCircleIcon} />\n      <Title headingLevel=\"h2\" size=\"lg\">\n        {t(\"empty_topics_title\")}\n      </Title>\n      <EmptyStateBody>{t(\"empty_topics_body\")}</EmptyStateBody>\n      <Button\n        data-testid=\"actionCreateTopic\"\n        ouiaId=\"button-create\"\n        variant=\"primary\"\n        onClick={onCreateTopic}\n      >\n        {t(\"create_topic\")}\n      </Button>\n    </EmptyState>\n  );\n};\n","import { Button, PageSection } from \"@patternfly/react-core\";\nimport { TableVariant } from \"@patternfly/react-table\";\nimport type { TableViewProps } from \"@rhoas/app-services-ui-components\";\nimport {\n  EmptyStateNoResults,\n  TableView,\n} from \"@rhoas/app-services-ui-components\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport type { Topic, TopicField } from \"ui-models/src/models/topic\";\nimport type { EmptyStateNoTopicProps } from \"./components\";\nimport { EmptyStateNoTopic } from \"./components\";\nimport { formattedRetentionSize, formattedRetentionTime } from \"./types\";\n\ntype SubUnion<T, U extends T> = U;\n\nconst Columns: SubUnion<\n  TopicField,\n  \"name\" | \"partitionsCount\" | \"config:retention.ms\" | \"config:retention.bytes\"\n>[] = [\n  \"name\",\n  \"partitionsCount\",\n  \"config:retention.ms\",\n  \"config:retention.bytes\",\n];\n\nexport type KafkaTopicsProps<T extends Topic> = {\n  topics: Array<T> | undefined;\n  getUrlFortopic: (row: T) => string;\n  onDelete: (row: T) => void;\n  onEdit: (row: T) => void;\n  topicName: string[];\n  onSearchTopic: (value: string) => void;\n  onRemoveTopicChip: (value: string) => void;\n  onRemoveTopicChips: () => void;\n  onTopicLinkClick: (row: T) => void;\n} & Pick<\n  TableViewProps<T, typeof Columns[number]>,\n  | \"itemCount\"\n  | \"page\"\n  | \"perPage\"\n  | \"onPageChange\"\n  | \"isRowSelected\"\n  | \"isColumnSortable\"\n  | \"onClearAllFilters\"\n> &\n  EmptyStateNoTopicProps;\n\nexport const KafkaTopics = <T extends Topic>({\n  topics,\n  onDelete,\n  onEdit,\n  isColumnSortable,\n  itemCount,\n  onSearchTopic,\n  topicName,\n  onClearAllFilters,\n  onCreateTopic,\n  page,\n  perPage,\n  onPageChange,\n  onRemoveTopicChip,\n  onRemoveTopicChips,\n  getUrlFortopic,\n  onTopicLinkClick,\n}: KafkaTopicsProps<T>) => {\n  const { t } = useTranslation(\"topic\");\n\n  const labels: { [field in typeof Columns[number]]: string } = {\n    name: t(\"topic_name\"),\n    partitionsCount: t(\"partitions_count\"),\n    \"config:retention.bytes\": t(\"TODO config:retention.bytes\"),\n    \"config:retention.ms\": t(\"TODO config:retention.ms\"),\n  };\n\n  const isFiltered = topicName.length > 0;\n  return (\n    <PageSection isFilled={true} hasOverflowScroll={true}>\n      <TableView\n        variant={TableVariant.compact}\n        tableOuiaId={\"card-table\"}\n        ariaLabel={t(\"topic_list_table\")}\n        data={topics}\n        columns={Columns}\n        renderHeader={({ column, Th, key }) => (\n          <Th key={key}>{labels[column]}</Th>\n        )}\n        renderCell={({ column, row, Td, key }) => {\n          return (\n            <Td key={key} dataLabel={labels[column]}>\n              {(() => {\n                switch (column) {\n                  case \"name\":\n                    return (\n                      <Button\n                        variant=\"link\"\n                        component={(props) => (\n                          <Link\n                            to={getUrlFortopic(row)}\n                            {...props}\n                            data-testid=\"tableTopics-linkTopic\"\n                            data-ouia-component-id=\"table-link\"\n                          >\n                            {row.name}\n                          </Link>\n                        )}\n                        onClick={() => onTopicLinkClick(row)}\n                        isInline\n                      />\n                    );\n                  case \"partitionsCount\":\n                    return row.partitionsCount;\n                  case \"config:retention.ms\":\n                    return formattedRetentionTime(\n                      row.config[\"retention.ms\"].value\n                    );\n                  case \"config:retention.bytes\":\n                    return formattedRetentionSize(\n                      row.config[\"retention.bytes\"].value\n                    );\n                }\n              })()}\n            </Td>\n          );\n        }}\n        renderActions={({ row, ActionsColumn }) => (\n          <ActionsColumn\n            items={[\n              {\n                title: t(\"table.actions.edit\"),\n                onClick: () => onEdit(row),\n              },\n              {\n                title: t(\"table.actions.delete\"),\n                onClick: () => onDelete(row),\n              },\n            ]}\n          />\n        )}\n        isColumnSortable={isColumnSortable}\n        filters={{\n          [labels.name]: {\n            type: \"search\",\n            chips: topicName,\n            onSearch: onSearchTopic,\n            onRemoveChip: onRemoveTopicChip,\n            onRemoveGroup: onRemoveTopicChips,\n            validate: (value: string) => !/[\"$^<>|+%/;:,\\s*=~#()]/.test(value),\n            errorMessage: t(\"input_field_invalid_message\"),\n          },\n        }}\n        actions={[\n          {\n            label: t(\"create_topic\"),\n            onClick: onCreateTopic,\n            isPrimary: true,\n          },\n        ]}\n        itemCount={itemCount}\n        page={page}\n        onPageChange={onPageChange}\n        perPage={perPage}\n        isFiltered={isFiltered}\n        onClearAllFilters={onClearAllFilters}\n        emptyStateNoData={<EmptyStateNoTopic onCreateTopic={onCreateTopic} />}\n        emptyStateNoResults={<EmptyStateNoResults />}\n      />\n    </PageSection>\n  );\n};\n","import type { CardKafkaInstanceMetricsLimits } from \"./components\";\n\nexport type TimeSeriesMetrics = { [timestamp: number]: number };\nexport type PartitionBytesMetric = { [partition: string]: TimeSeriesMetrics };\n\nexport enum DurationOptions {\n  Last5minutes = 5,\n  Last15minutes = 15,\n  Last30minutes = 30,\n  Last1hour = 60,\n  Last3hours = 3 * 60,\n  Last6hours = 6 * 60,\n  Last12hours = 12 * 60,\n  Last24hours = 24 * 60,\n  Last2days = 2 * 24 * 60,\n  Last7days = 7 * 24 * 60,\n}\n\nexport type GetTopicsMetricsResponse = {\n  kafkaTopics: string[];\n  metricsTopics: string[];\n  bytesOutgoing: TimeSeriesMetrics;\n  bytesIncoming: TimeSeriesMetrics;\n  bytesPerPartition: PartitionBytesMetric;\n  incomingMessageRate: TimeSeriesMetrics;\n};\n\nexport type GetKafkaInstanceMetricsResponse = {\n  usedDiskSpaceMetrics: TimeSeriesMetrics;\n  clientConnectionsMetrics: TimeSeriesMetrics;\n  connectionAttemptRateMetrics: TimeSeriesMetrics;\n} & CardKafkaInstanceMetricsLimits;\n\nexport type GetMetricsKpiResponse = {\n  topics: number;\n  topicPartitions: number;\n  consumerGroups: number;\n  topicPartitionsLimit: number;\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateVariant,\n  PageSection,\n} from \"@patternfly/react-core\";\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\n\nexport const EmptyStateInitialLoading: VoidFunctionComponent = () => {\n  return (\n    <PageSection isFilled={true}>\n      <EmptyState variant={EmptyStateVariant.xs}>\n        <EmptyStateBody data-chromatic=\"ignore\">\n          <AppServicesLoading />\n        </EmptyStateBody>\n      </EmptyState>\n    </PageSection>\n  );\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  PageSection,\n  Title,\n} from \"@patternfly/react-core\";\nimport { TachometerAltIcon } from \"@patternfly/react-icons\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { FunctionComponent } from \"react\";\n\nexport const EmptyStateMetricsUnavailable: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <PageSection isFilled={true}>\n      <EmptyState variant={EmptyStateVariant.xs}>\n        <EmptyStateIcon icon={TachometerAltIcon} />\n        <Title headingLevel=\"h3\" size=\"lg\">\n          {t(\"metrics:empty_state_no_data_title\")}\n        </Title>\n        <EmptyStateBody>{t(\"metrics:empty_state_no_data_body\")}</EmptyStateBody>\n      </EmptyState>\n    </PageSection>\n  );\n};\n","import { Grid, GridItem, PageSection } from \"@patternfly/react-core\";\nimport type { FunctionComponent, ReactElement } from \"react\";\n\ntype MetricsLayoutProps = {\n  metricsLagAlert: ReactElement;\n  topicsKpi: ReactElement;\n  topicPartitionsKpi: ReactElement;\n  consumerGroupKpi: ReactElement;\n  diskSpaceMetrics: ReactElement;\n  topicMetrics: ReactElement;\n};\nexport const MetricsLayout: FunctionComponent<MetricsLayoutProps> = ({\n  metricsLagAlert,\n  topicsKpi,\n  topicPartitionsKpi,\n  consumerGroupKpi,\n  diskSpaceMetrics,\n  topicMetrics,\n}) => {\n  return (\n    <PageSection\n      hasOverflowScroll={true}\n      aria-label={\"TODO\"}\n      padding={{ default: \"noPadding\" }}\n      className={\n        \"pf-u-px-lg-on-xl pf-u-pt-sm-on-xl pf-u-pb-lg-on-xl pf-u-px-md pf-u-pb-md\"\n      }\n    >\n      <Grid hasGutter>\n        <GridItem>{metricsLagAlert}</GridItem>\n        <GridItem sm={4}>{topicsKpi}</GridItem>\n        <GridItem sm={4}>{topicPartitionsKpi}</GridItem>\n        <GridItem sm={4}>{consumerGroupKpi}</GridItem>\n        <GridItem lg={6}>{diskSpaceMetrics}</GridItem>\n        <GridItem lg={6}>{topicMetrics}</GridItem>\n      </Grid>\n    </PageSection>\n  );\n};\n","import { CardBody, Bullseye, Spinner } from \"@patternfly/react-core\";\nimport type { FunctionComponent } from \"react\";\n\nexport const CardBodyLoading: FunctionComponent = () => (\n  <CardBody>\n    <Bullseye>\n      <Spinner isSVG data-chromatic=\"ignore\" />\n    </Bullseye>\n  </CardBody>\n);\n","import { DurationOptions } from \"./types\";\n\nexport const timeIntervalsMapping = {\n  [DurationOptions.Last5minutes]: {\n    interval: 1 * 60,\n    ticks: 6,\n    showDate: false,\n  },\n  [DurationOptions.Last15minutes]: {\n    interval: 3 * 60,\n    ticks: 6,\n    showDate: false,\n  },\n  [DurationOptions.Last30minutes]: {\n    interval: 5 * 60,\n    ticks: 7,\n    showDate: false,\n  },\n  [DurationOptions.Last1hour]: { interval: 10 * 60, ticks: 6, showDate: false },\n  [DurationOptions.Last3hours]: {\n    interval: 30 * 60,\n    ticks: 7,\n    showDate: false,\n  },\n  [DurationOptions.Last6hours]: {\n    interval: 1 * 60 * 60,\n    ticks: 7,\n    showDate: false,\n  },\n  [DurationOptions.Last12hours]: {\n    interval: 2 * 60 * 60,\n    ticks: 7,\n    showDate: false,\n  },\n  [DurationOptions.Last24hours]: {\n    interval: 4 * 60 * 60,\n    ticks: 7,\n    showDate: true,\n  },\n  [DurationOptions.Last2days]: {\n    interval: 8 * 60 * 60,\n    ticks: 7,\n    showDate: true,\n  },\n  [DurationOptions.Last7days]: {\n    interval: 24 * 60 * 60,\n    ticks: 8,\n    showDate: true,\n  },\n} as const;\n\nexport const chartHeight = 350;\nexport const chartPadding = {\n  bottom: 110, // Adjusted to accomodate legend\n  left: 120,\n  right: 40,\n  top: 10,\n};\n","import { Flex, FlexItem, Skeleton } from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { chartHeight, chartPadding } from \"../consts\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const ChartSkeletonLoader: VoidFunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <Flex direction={{ default: \"column\" }} data-chromatic=\"ignore\">\n      <FlexItem>\n        <Skeleton\n          height={`${chartHeight - chartPadding.bottom}px`}\n          screenreaderText={t(\"common:skeleton_loader_screenreader_text\")}\n        />\n      </FlexItem>\n      <FlexItem>\n        <Skeleton height={`${chartPadding.bottom / 2 - 12.5}px`} width=\"20%\" />\n      </FlexItem>\n      <FlexItem>\n        <Skeleton height={`${chartPadding.bottom / 2 - 12.5}px`} width=\"40%\" />\n      </FlexItem>\n    </Flex>\n  );\n};\n","import type { RefObject } from \"react\";\nimport { useEffect, useLayoutEffect, useRef, useState } from \"react\";\n\nexport function useChartWidth(): [RefObject<HTMLDivElement>, number] {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [width, setWidth] = useState<number>(0);\n\n  const handleResize = () =>\n    containerRef.current && setWidth(containerRef.current.clientWidth);\n\n  useLayoutEffect(() => {\n    handleResize();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n  return [containerRef, width];\n}\n","import byteSize from \"byte-size\";\nimport { fromUnixTime, sub } from \"date-fns\";\nimport { formatInTimeZone } from \"date-fns-tz\";\nimport { timeIntervalsMapping } from \"../consts\";\nimport type { DurationOptions } from \"../types\";\n\nexport function formatBytes(bytes: number): string {\n  return byteSize(bytes, { units: \"iec\" }).toString();\n}\n\nexport const shouldShowDate = (timeDuration: DurationOptions): boolean => {\n  return timeIntervalsMapping[timeDuration].showDate;\n};\n\nexport const dateToChartValue = (\n  timestamp: number,\n  { showDate }: { showDate: boolean } = { showDate: false }\n): string => {\n  const date = fromUnixTime(timestamp / 1000);\n  return formatInTimeZone(date, \"utc\", showDate ? \"HH:mm'\\n'MMM dd\" : \"HH:mm\");\n};\n\nexport function timestampsToTicks(\n  timestamps: string[],\n  duration: DurationOptions\n): number[] {\n  const allTimestamps = [...timestamps];\n  allTimestamps.sort();\n  const mostRecentTs =\n    parseInt(allTimestamps[allTimestamps.length - 1]) || Date.now();\n  return new Array(\n    Math.max(timeIntervalsMapping[duration].ticks, allTimestamps.length)\n  )\n    .fill(mostRecentTs)\n    .map((d: number, index) =>\n      sub(new Date(d), {\n        seconds: timeIntervalsMapping[duration].interval * index,\n      }).getTime()\n    );\n}\n","import type { ChartVoronoiContainerProps } from \"@patternfly/react-charts\";\nimport {\n  Chart,\n  ChartArea,\n  ChartAxis,\n  ChartGroup,\n  ChartLegend,\n  ChartThemeColor,\n  ChartThreshold,\n  ChartVoronoiContainer,\n} from \"@patternfly/react-charts\";\nimport {\n  chart_color_black_500,\n  chart_color_blue_300,\n} from \"@patternfly/react-tokens\";\nimport type { ReactElement, VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { chartHeight, chartPadding } from \"../consts\";\nimport type { DurationOptions, TimeSeriesMetrics } from \"../types\";\nimport { ChartSkeletonLoader } from \"./ChartSkeletonLoader\";\nimport { useChartWidth } from \"./useChartWidth\";\nimport { dateToChartValue, shouldShowDate, timestampsToTicks } from \"./utils\";\n\ntype ChartData = {\n  areaColor: string;\n  softLimitColor: string;\n  area: BrokerChartData[];\n  softLimit: BrokerChartData[];\n};\n\ntype BrokerChartData = {\n  name: string;\n  x: number;\n  y: number;\n};\n\ntype LegendData = {\n  name: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n};\n\ntype ChartLinearWithOptionalLimitProps = {\n  metrics: TimeSeriesMetrics;\n  duration: DurationOptions;\n  chartName: string;\n  xLabel?: string;\n  yLabel?: string;\n  usageLimit?: number;\n  formatValue?: (d: number) => string;\n  isLoading: boolean;\n  emptyState: ReactElement;\n};\n\nexport const ChartLinearWithOptionalLimit: VoidFunctionComponent<\n  ChartLinearWithOptionalLimitProps\n> = ({\n  metrics,\n  duration,\n  chartName,\n  xLabel,\n  yLabel,\n  usageLimit,\n  formatValue = (d) => `${d}`,\n  isLoading,\n  emptyState,\n}) => {\n  const { t } = useTranslation();\n  const [containerRef, width] = useChartWidth();\n\n  const itemsPerRow = width && width > 650 ? 6 : 3;\n\n  const { chartData, legendData, tickValues } = getChartData(\n    metrics,\n    duration,\n    chartName,\n    t(\"metrics:limit\"),\n    usageLimit\n  );\n\n  const hasMetrics = Object.keys(metrics).length > 0;\n  const showDate = shouldShowDate(duration);\n\n  switch (true) {\n    case isLoading:\n      return <ChartSkeletonLoader />;\n    case !hasMetrics:\n      return emptyState;\n    default: {\n      const labels: ChartVoronoiContainerProps[\"labels\"] = ({ datum }) =>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/restrict-template-expressions,@typescript-eslint/no-unsafe-argument\n        `${datum.name}: ${formatValue(datum.y)}`;\n      return (\n        <div ref={containerRef}>\n          <Chart\n            ariaTitle={chartName}\n            containerComponent={\n              <ChartVoronoiContainer labels={labels} constrainToVisibleArea />\n            }\n            legendPosition=\"bottom-left\"\n            legendComponent={\n              <ChartLegend\n                orientation={\"horizontal\"}\n                data={legendData}\n                itemsPerRow={itemsPerRow}\n              />\n            }\n            height={chartHeight}\n            padding={chartPadding}\n            themeColor={ChartThemeColor.multiUnordered}\n            width={width}\n            legendAllowWrap={true}\n          >\n            <ChartAxis\n              label={\"\\n\" + (xLabel || t(\"metrics:axis-label-time\") || \"\")}\n              tickValues={tickValues}\n              tickFormat={(d: number) =>\n                dateToChartValue(d, {\n                  showDate,\n                })\n              }\n            />\n            <ChartAxis\n              label={\"\\n\\n\\n\\n\\n\" + (yLabel || chartName)}\n              dependentAxis\n              tickFormat={formatValue}\n            />\n            <ChartGroup>\n              {chartData.map((value, index) => (\n                <ChartArea\n                  key={`chart-area-${index}`}\n                  data={value.area}\n                  style={{\n                    data: {\n                      // TODO: check if this is needed\n                      // stroke: value.color,\n                    },\n                  }}\n                />\n              ))}\n            </ChartGroup>\n            <ChartThreshold\n              key={`chart-softlimit`}\n              data={chartData[0].softLimit}\n              style={{\n                data: {\n                  stroke: chartData[0].softLimitColor,\n                },\n              }}\n            />\n          </Chart>\n        </div>\n      );\n    }\n  }\n};\n\nfunction getChartData(\n  metrics: TimeSeriesMetrics,\n  duration: number,\n  lineLabel: string,\n  limitLabel: string,\n  usageLimit?: number\n): {\n  legendData: Array<LegendData>;\n  chartData: Array<ChartData>;\n  tickValues: number[];\n} {\n  const legendData = [\n    usageLimit\n      ? {\n          name: limitLabel,\n          symbol: { fill: chart_color_black_500.value, type: \"threshold\" },\n        }\n      : undefined,\n    { name: lineLabel, symbol: { fill: chart_color_blue_300.value } },\n  ].filter((d) => !!d) as Array<LegendData>;\n\n  const areaColor = chart_color_blue_300.value;\n  const softLimitColor = chart_color_black_500.value;\n  const chartData: Array<ChartData> = [];\n  const area: Array<BrokerChartData> = [];\n  const softLimit: Array<BrokerChartData> = [];\n\n  Object.entries(metrics).map(([timestamp, bytes]) => {\n    area.push({ name: lineLabel, x: parseInt(timestamp, 10), y: bytes });\n  });\n  chartData.push({ areaColor, softLimitColor, area, softLimit });\n\n  const tickValues = timestampsToTicks(Object.keys(metrics), duration);\n\n  if (usageLimit) {\n    tickValues.forEach((timestamp) =>\n      softLimit.push({\n        name: limitLabel,\n        x: timestamp,\n        y: usageLimit,\n      })\n    );\n  }\n\n  return {\n    legendData,\n    chartData,\n    tickValues,\n  };\n}\n","import type { ChartVoronoiContainerProps } from \"@patternfly/react-charts\";\nimport {\n  Chart,\n  ChartArea,\n  ChartAxis,\n  ChartGroup,\n  ChartLegend,\n  ChartThemeColor,\n  ChartVoronoiContainer,\n} from \"@patternfly/react-charts\";\nimport {\n  chart_color_blue_300,\n  chart_color_cyan_300,\n} from \"@patternfly/react-tokens\";\nimport type { FunctionComponent, ReactElement } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { chartHeight, chartPadding } from \"../consts\";\nimport type { PartitionBytesMetric } from \"../types\";\nimport { ChartSkeletonLoader } from \"./ChartSkeletonLoader\";\nimport { useChartWidth } from \"./useChartWidth\";\nimport {\n  dateToChartValue,\n  formatBytes,\n  shouldShowDate,\n  timestampsToTicks,\n} from \"./utils\";\n\nconst colors = [chart_color_cyan_300.value, chart_color_blue_300.value];\n\ntype ChartData = {\n  color: string;\n  area: PartitionChartData[];\n};\n\ntype PartitionChartData = {\n  name: string;\n  x: number;\n  y: number;\n};\n\ntype LegendData = {\n  name: string;\n};\n\nexport type ChartLogSizePerPartitionProps = {\n  partitions: PartitionBytesMetric;\n  topic: string | undefined;\n  duration: number;\n  isLoading: boolean;\n  emptyState: ReactElement;\n};\nexport const ChartLogSizePerPartition: FunctionComponent<\n  ChartLogSizePerPartitionProps\n> = ({ partitions, topic, duration, isLoading, emptyState }) => {\n  const { t } = useTranslation();\n  const [containerRef, width] = useChartWidth();\n\n  const itemsPerRow = width && width > 650 ? 6 : 3;\n\n  const { chartData, legendData, tickValues } = getChartData(\n    partitions,\n    topic,\n    duration\n  );\n\n  const hasMetrics = Object.keys(partitions).length > 0;\n\n  const showDate = shouldShowDate(duration);\n\n  return (\n    <div ref={containerRef}>\n      {(() => {\n        switch (true) {\n          case isLoading:\n            return <ChartSkeletonLoader />;\n          case !hasMetrics:\n            return emptyState;\n          default: {\n            const labels: ChartVoronoiContainerProps[\"labels\"] = ({ datum }) =>\n              // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/restrict-template-expressions,@typescript-eslint/no-unsafe-argument\n              `${datum.name}: ${formatBytes(datum.y)}`;\n\n            return (\n              <Chart\n                ariaTitle={t(\"metrics:log_size_per_partition\")}\n                containerComponent={\n                  <ChartVoronoiContainer\n                    labels={labels}\n                    constrainToVisibleArea\n                  />\n                }\n                legendPosition=\"bottom-left\"\n                legendComponent={\n                  <ChartLegend data={legendData} itemsPerRow={itemsPerRow} />\n                }\n                height={chartHeight}\n                padding={chartPadding}\n                themeColor={ChartThemeColor.multiOrdered}\n                width={width}\n                legendAllowWrap={true}\n              >\n                <ChartAxis\n                  label={\"\\n\" + t(\"metrics:axis-label-time\")}\n                  tickValues={tickValues}\n                  tickFormat={(d: number) =>\n                    dateToChartValue(d, {\n                      showDate,\n                    })\n                  }\n                />\n                <ChartAxis\n                  label={\"\\n\\n\\n\\n\\n\" + t(\"metrics:axis-label-bytes\")}\n                  dependentAxis\n                  tickFormat={formatBytes}\n                />\n                <ChartGroup>\n                  {chartData.map((value, index) => (\n                    <ChartArea key={`chart-area-${index}`} data={value.area} />\n                  ))}\n                </ChartGroup>\n              </Chart>\n            );\n          }\n        }\n      })()}\n    </div>\n  );\n};\n\nexport function getChartData(\n  partitions: PartitionBytesMetric,\n  topic: string | undefined,\n  duration: number\n): {\n  legendData: Array<LegendData>;\n  chartData: Array<ChartData>;\n  tickValues: number[];\n} {\n  const legendData: Array<LegendData> = [];\n  const chartData: Array<ChartData> = [];\n  Object.entries(partitions).map(([partition, dataMap], index) => {\n    const name = topic ? `${topic}: ${partition}` : partition;\n    const color = colors[index];\n    legendData.push({\n      name,\n    });\n    const area: Array<PartitionChartData> = [];\n\n    Object.entries(dataMap).map(([timestamp, value]) => {\n      area.push({ name, x: parseInt(timestamp, 10), y: value });\n    });\n    chartData.push({ color, area });\n  });\n\n  const allTimestamps = Array.from(\n    new Set(Object.values(partitions).flatMap((m) => Object.keys(m)))\n  );\n  const tickValues = timestampsToTicks(allTimestamps, duration);\n\n  return {\n    legendData,\n    chartData,\n    tickValues,\n  };\n}\n","import { Popover } from \"@patternfly/react-core\";\nimport { OutlinedQuestionCircleIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\ntype ChartPopoverProps = {\n  title: string;\n  description: string;\n};\n\nexport const ChartPopover: VoidFunctionComponent<ChartPopoverProps> = ({\n  title,\n  description,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <Popover\n      aria-label={title}\n      headerContent={<div>{title}</div>}\n      bodyContent={<div>{description}</div>}\n    >\n      <OutlinedQuestionCircleIcon\n        aria-label={t(\"metrics:chart-popover-icon-screenreader-text\", {\n          title,\n        })}\n      />\n    </Popover>\n  );\n};\n","import type { ChartVoronoiContainerProps } from \"@patternfly/react-charts\";\nimport {\n  Chart,\n  ChartAxis,\n  ChartGroup,\n  ChartLegend,\n  ChartLine,\n  ChartThemeColor,\n  ChartVoronoiContainer,\n} from \"@patternfly/react-charts\";\nimport {\n  chart_color_blue_300,\n  chart_color_green_300,\n} from \"@patternfly/react-tokens\";\nimport type { FunctionComponent, ReactElement } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { chartHeight, chartPadding, timeIntervalsMapping } from \"../consts\";\nimport type { TimeSeriesMetrics } from \"../types\";\nimport { ChartSkeletonLoader } from \"./ChartSkeletonLoader\";\nimport { useChartWidth } from \"./useChartWidth\";\nimport {\n  dateToChartValue,\n  formatBytes,\n  shouldShowDate,\n  timestampsToTicks,\n} from \"./utils\";\n\ntype ChartData = {\n  color: string;\n  line: TopicChartData[];\n};\n\ntype TopicChartData = {\n  name: string;\n  x: number;\n  y: number;\n};\n\ntype LegendData = {\n  name: string;\n  symbol: {\n    fill: string;\n    type?: string;\n  };\n};\n\ntype ChartTotalBytesProps = {\n  incomingTopicsData: TimeSeriesMetrics;\n  outgoingTopicsData: TimeSeriesMetrics;\n  selectedTopic: string | undefined;\n  duration: number;\n  isLoading: boolean;\n  emptyState: ReactElement;\n};\nexport const ChartTotalBytes: FunctionComponent<ChartTotalBytesProps> = ({\n  incomingTopicsData,\n  outgoingTopicsData,\n  selectedTopic,\n  duration,\n  isLoading,\n  emptyState,\n}) => {\n  const { t } = useTranslation();\n  const [containerRef, width] = useChartWidth();\n\n  const itemsPerRow = width && width > 650 ? 6 : 3;\n\n  const { chartData, legendData, tickValues } = getBytesChartData(\n    incomingTopicsData,\n    outgoingTopicsData,\n    duration,\n    selectedTopic\n      ? t(\"metrics:incoming_bytes\", {\n          topic: selectedTopic,\n        })\n      : t(\"metrics:incoming_bytes_all_topics\"),\n    selectedTopic\n      ? t(\"metrics:outgoing_bytes\", {\n          topic: selectedTopic,\n        })\n      : t(\"metrics:outgoing_bytes_all_topics\")\n  );\n\n  const hasMetrics =\n    Object.keys(incomingTopicsData).length > 0 ||\n    Object.keys(outgoingTopicsData).length > 0;\n\n  const showDate = shouldShowDate(duration);\n\n  switch (true) {\n    case isLoading:\n      return <ChartSkeletonLoader />;\n    case !hasMetrics:\n      return emptyState;\n    default: {\n      const labels: ChartVoronoiContainerProps[\"labels\"] =\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/restrict-template-expressions,@typescript-eslint/no-unsafe-argument\n        ({ datum }) => `${datum.name}: ${formatBytes(datum.y)}`;\n      return (\n        <div ref={containerRef}>\n          <Chart\n            ariaTitle={t(\"metrics:total_bytes\")}\n            containerComponent={\n              <ChartVoronoiContainer labels={labels} constrainToVisibleArea />\n            }\n            legendAllowWrap={true}\n            legendPosition=\"bottom-left\"\n            legendComponent={\n              <ChartLegend data={legendData} itemsPerRow={itemsPerRow} />\n            }\n            height={chartHeight}\n            padding={chartPadding}\n            themeColor={ChartThemeColor.multiUnordered}\n            width={width}\n          >\n            <ChartAxis\n              label={\"\\n\" + t(\"metrics:axis-label-time\")}\n              tickValues={tickValues}\n              tickCount={timeIntervalsMapping[duration].ticks}\n              tickFormat={(d: number) =>\n                dateToChartValue(d, {\n                  showDate,\n                })\n              }\n            />\n            <ChartAxis\n              label={\"\\n\\n\\n\\n\\n\" + t(\"metrics:axis-label-bytes\")}\n              dependentAxis\n              tickFormat={formatBytes}\n            />\n            <ChartGroup>\n              {chartData.map((value, index) => (\n                <ChartLine\n                  key={`chart-line-${index}`}\n                  data={value.line}\n                  style={{\n                    data: {\n                      stroke: value.color,\n                    },\n                  }}\n                />\n              ))}\n            </ChartGroup>\n          </Chart>\n        </div>\n      );\n    }\n  }\n};\n\nexport function getBytesChartData(\n  incomingTopic: TimeSeriesMetrics,\n  outgoingTopic: TimeSeriesMetrics,\n  duration: number,\n  incomingTopicName: string,\n  outgoingTopicName: string\n): {\n  legendData: Array<LegendData>;\n  chartData: Array<ChartData>;\n  tickValues: number[];\n} {\n  const legendData: Array<LegendData> = [];\n  const chartData: Array<ChartData> = [];\n\n  const incomingLine = metricsToLine(incomingTopic, incomingTopicName);\n  if (incomingLine.length > 0) {\n    const color = chart_color_blue_300.value;\n    chartData.push({ color, line: incomingLine });\n    legendData.push({\n      name: incomingTopicName,\n      symbol: {\n        fill: color,\n      },\n    });\n  }\n\n  const outgoingLine = metricsToLine(outgoingTopic, outgoingTopicName);\n  if (outgoingLine.length > 0) {\n    const color = chart_color_green_300.value;\n    chartData.push({ color, line: outgoingLine });\n    legendData.push({\n      name: outgoingTopicName,\n      symbol: {\n        fill: color,\n      },\n    });\n  }\n  const allTimestamps = Array.from(\n    new Set([...Object.keys(incomingTopic), ...Object.keys(outgoingTopic)])\n  );\n  const tickValues = timestampsToTicks(allTimestamps, duration);\n\n  return {\n    legendData,\n    chartData,\n    tickValues,\n  };\n}\n\nexport function metricsToLine(\n  metrics: TimeSeriesMetrics,\n  name: string\n): Array<TopicChartData> {\n  const line: Array<TopicChartData> = [];\n\n  Object.entries(metrics).map(([timestamp, bytes]) => {\n    line.push({ name, x: parseInt(timestamp, 10), y: bytes });\n  });\n  return line;\n}\n","import {\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { ExclamationTriangleIcon } from \"@patternfly/react-icons\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const EmptyStateNoMetricsData: FunctionComponent = () => {\n  const { t } = useTranslation([\"metrics\"]);\n  return (\n    <EmptyState variant={EmptyStateVariant.xs}>\n      <EmptyStateIcon\n        icon={ExclamationTriangleIcon}\n        color=\"var(--pf-global--warning-color--100)\"\n      />\n      <Title headingLevel=\"h3\" size=\"md\">\n        {t(\"metric_not_available\")}\n      </Title>\n    </EmptyState>\n  );\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { SearchIcon } from \"@patternfly/react-icons\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const EmptyStateNoMetricsDataForSelection: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState variant={EmptyStateVariant.xs}>\n      <EmptyStateIcon icon={SearchIcon} />\n      <Title headingLevel=\"h3\" size=\"lg\">\n        {t(\"metrics:empty_state_no_metrics_data_title\")}\n      </Title>\n      <EmptyStateBody>\n        {t(\"metrics:empty_state_no_metrics_data_body\")}\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { WrenchIcon } from \"@patternfly/react-icons\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\ntype EmptyStateNoTopicsProps = {\n  onCreateTopic?: () => void;\n};\nexport const EmptyStateNoTopics: FunctionComponent<EmptyStateNoTopicsProps> = ({\n  onCreateTopic,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState variant={EmptyStateVariant.xs}>\n      <EmptyStateIcon icon={WrenchIcon} />\n      <Title headingLevel=\"h3\" size=\"lg\">\n        {t(\"metrics:empty_state_no_topics_title\")}\n      </Title>\n      <EmptyStateBody>{t(\"metrics:empty_state_no_topics_body\")}</EmptyStateBody>\n      {onCreateTopic && (\n        <Button\n          ouiaId=\"button-create\"\n          variant=\"primary\"\n          onClick={onCreateTopic}\n        >\n          {t(\"metrics:empty_state_no_topics_create_topic\")}\n        </Button>\n      )}\n    </EmptyState>\n  );\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { FilterIcon } from \"@patternfly/react-icons\";\nimport { Trans, useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\n\nexport const EmptyStateNoTopicSelected: VoidFunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState variant={EmptyStateVariant.xs}>\n      <EmptyStateIcon icon={FilterIcon} />\n      <Title headingLevel=\"h3\" size=\"lg\">\n        {t(\"metrics:empty_state_no_filter_title\")}\n      </Title>\n      <EmptyStateBody>\n        <Trans\n          ns={\"metrics\"}\n          i18nKey={\"empty_state_no_filter_body\"}\n          components={{ bold: <strong /> }}\n        />\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { useState } from \"react\";\nimport type { SelectProps } from \"@patternfly/react-core\";\nimport {\n  ToolbarItem,\n  Select,\n  SelectVariant,\n  SelectGroup,\n  SelectOption,\n} from \"@patternfly/react-core\";\nimport { DurationOptions } from \"../types\";\n\nexport const DurationOptionsMap = {\n  [DurationOptions.Last5minutes]: \"Last 5 minutes\",\n  [DurationOptions.Last15minutes]: \"Last 15 minutes\",\n  [DurationOptions.Last30minutes]: \"Last 30 minutes\",\n  [DurationOptions.Last1hour]: \"Last 1 hour\",\n  [DurationOptions.Last3hours]: \"Last 3 hours\",\n  [DurationOptions.Last6hours]: \"Last 6 hours\",\n  [DurationOptions.Last12hours]: \"Last 12 hours\",\n  [DurationOptions.Last24hours]: \"Last 24 hours\",\n  [DurationOptions.Last2days]: \"Last 2 days\",\n  [DurationOptions.Last7days]: \"Last 7 days\",\n} as const;\n\ntype FilterByTimeProps = {\n  duration: DurationOptions;\n  onDurationChange: (value: DurationOptions) => void;\n  keyText: string;\n  ariaLabel: string;\n  disableToolbar: boolean;\n};\n\nexport const FilterByTime: VoidFunctionComponent<FilterByTimeProps> = ({\n  duration,\n  keyText,\n  ariaLabel,\n  disableToolbar,\n  onDurationChange,\n}) => {\n  const [isTimeSelectOpen, setIsTimeSelectOpen] = useState<boolean>(false);\n\n  const onTimeToggle = (isTimeSelectOpen: boolean) => {\n    setIsTimeSelectOpen(isTimeSelectOpen);\n  };\n\n  const onTimeSelect: SelectProps[\"onSelect\"] = (_, selection) => {\n    const mapping = Object.entries(DurationOptionsMap).find(\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      ([_, value]) => value === selection\n    );\n    if (mapping) {\n      onDurationChange(parseInt(mapping[0], 10) as DurationOptions);\n    }\n    setIsTimeSelectOpen(false);\n  };\n\n  const timeOptions = (keyText: string) => [\n    <SelectGroup label=\"Relative time ranges\" key={`${keyText}-group`}>\n      {Object.values(DurationOptionsMap).map((label, idx) => (\n        <SelectOption key={`${keyText}-${idx}`} value={label} />\n      ))}\n    </SelectGroup>,\n  ];\n  const ariaId = `filter-by-time-${Date.now()}`;\n  return (\n    <ToolbarItem>\n      <label hidden id={ariaId}>\n        {ariaLabel}\n      </label>\n      <Select\n        variant={SelectVariant.single}\n        aria-labelledby={ariaId}\n        onToggle={onTimeToggle}\n        onSelect={onTimeSelect}\n        selections={DurationOptionsMap[duration]}\n        isOpen={isTimeSelectOpen}\n        isDisabled={disableToolbar}\n      >\n        {timeOptions(keyText)}\n      </Select>\n    </ToolbarItem>\n  );\n};\n","import type { SelectProps } from \"@patternfly/react-core\";\nimport {\n  Select,\n  SelectGroup,\n  SelectOption,\n  SelectVariant,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { FilterIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport \"./FilterByTopic.css\";\n\nconst widths = {\n  default: \"150px\",\n  sm: \"150px\",\n  md: \"150px\",\n  lg: \"200px\",\n  xl: \"200px\",\n  \"2xl\": \"200px\",\n};\n\ntype FilterByTopicProps = {\n  selectedTopic: string | undefined;\n  topicList: string[];\n  disableToolbar: boolean;\n  ariaLabel: string;\n  onSetSelectedTopic: (value: string | undefined) => void;\n};\n\nexport const FilterByTopic: VoidFunctionComponent<FilterByTopicProps> = ({\n  selectedTopic,\n  topicList = [],\n  disableToolbar,\n  ariaLabel,\n  onSetSelectedTopic,\n}) => {\n  const { t } = useTranslation();\n  const [isTopicSelectOpen, setIsTopicSelectOpen] = useState<boolean>(false);\n  const [selectKey, setSelectKey] = useState(Math.random());\n\n  useEffect(() => setSelectKey(Math.random()), [topicList]);\n\n  const allTopicsLabel = t(\"metrics:all_topics\");\n\n  const onTopicToggle = (isTopicSelectOpen: boolean) => {\n    setIsTopicSelectOpen(isTopicSelectOpen);\n  };\n\n  const onTopicSelect: SelectProps[\"onSelect\"] = (_, selection) => {\n    selection !== allTopicsLabel\n      ? onSetSelectedTopic(selection as string)\n      : onSetSelectedTopic(undefined);\n    setIsTopicSelectOpen(false);\n  };\n\n  const onTopicFilter = (_: unknown, textInput: string) => {\n    const filteredTopics =\n      topicList.filter((topic) => topic.indexOf(textInput) != -1) || [];\n    return topicOptions(filteredTopics);\n  };\n\n  const topicOptions = (topicList: string[]) => [\n    <SelectOption key={\"topic-filter-0\"} value={allTopicsLabel} />,\n    <SelectGroup label=\"Filter by topic\" key=\"topic-filter-group\">\n      {topicList.map((topic, index) => (\n        <SelectOption\n          key={`topic-filter-${index + 1}`}\n          value={topic}\n          title={topic}\n        />\n      ))}\n    </SelectGroup>,\n  ];\n\n  const isDisabled = disableToolbar || topicList.length === 0;\n  const ariaId = `filter-by-topic-${Date.now()}`;\n\n  return (\n    <ToolbarItem widths={widths}>\n      <label hidden id={ariaId}>\n        {ariaLabel}\n      </label>\n      <Select\n        key={selectKey}\n        variant={SelectVariant.single}\n        onToggle={onTopicToggle}\n        onSelect={onTopicSelect}\n        selections={selectedTopic || allTopicsLabel}\n        isOpen={isTopicSelectOpen}\n        placeholderText={\n          <>\n            <FilterIcon /> {allTopicsLabel}\n          </>\n        }\n        aria-labelledby={ariaId}\n        onFilter={onTopicFilter}\n        isGrouped\n        hasInlineFilter\n        isDisabled={isDisabled}\n        position=\"left\"\n        className={\"appserv-metrics-filterbytopic\"}\n      >\n        {topicOptions(topicList)}\n      </Select>\n    </ToolbarItem>\n  );\n};\n","import { ToolbarItem } from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { FormatDate, RefreshButton } from \"@rhoas/app-services-ui-components\";\n\nexport type ToolbarRefreshProps = {\n  isRefreshing: boolean;\n  lastUpdated: Date | undefined;\n  ariaLabel: string;\n  onRefresh: () => void;\n};\n\nexport const ToolbarRefresh: VoidFunctionComponent<ToolbarRefreshProps> = ({\n  isRefreshing,\n  lastUpdated = new Date(),\n  ariaLabel,\n  onRefresh,\n}) => {\n  const { t } = useTranslation([\"metrics\"]);\n\n  return (\n    <>\n      <ToolbarItem>\n        <RefreshButton\n          ariaLabel={ariaLabel}\n          onClick={onRefresh}\n          isRefreshing={isRefreshing}\n        />\n      </ToolbarItem>\n      <ToolbarItem\n        alignment={{ default: \"alignRight\" }}\n        style={{ color: \"var(--pf-global--Color--200)\" }}\n      >\n        <div className=\"pf-u-font-size-xs\">\n          {isRefreshing ? (\n            t(\"metrics:refreshing\")\n          ) : (\n            <>\n              {t(\"metrics:last-refresh\")}\n              <br />\n              <FormatDate date={lastUpdated} format=\"distanceToNow\" />\n              {t(\"metrics:last-refresh-distance\")}\n            </>\n          )}\n        </div>\n      </ToolbarItem>\n    </>\n  );\n};\n","import {\n  CardHeader,\n  CardTitle,\n  Divider,\n  Toolbar,\n  ToolbarContent,\n} from \"@patternfly/react-core\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { DurationOptions } from \"../types\";\nimport { FilterByTime } from \"./FilterByTime\";\nimport { FilterByTopic } from \"./FilterByTopic\";\nimport type { ToolbarRefreshProps } from \"./ToolbarRefresh\";\nimport { ToolbarRefresh } from \"./ToolbarRefresh\";\n\ntype ToolbarTopicsMetricsProps = {\n  title: string;\n  selectedTopic: string | undefined;\n  topicList: string[];\n  duration: DurationOptions;\n  isDisabled: boolean;\n  onSetTimeDuration: (value: DurationOptions) => void;\n  onSetSelectedTopic: (value: string | undefined) => void;\n} & Omit<ToolbarRefreshProps, \"ariaLabel\">;\nexport const ToolbarTopicsMetrics: FunctionComponent<\n  ToolbarTopicsMetricsProps\n> = ({\n  title,\n  selectedTopic,\n  topicList,\n  duration,\n  isDisabled,\n  isRefreshing,\n  lastUpdated,\n  onSetTimeDuration,\n  onRefresh,\n  onSetSelectedTopic,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <CardHeader>\n        <CardTitle component=\"h2\">{title}</CardTitle>\n      </CardHeader>\n      <Divider />\n      <Toolbar>\n        <ToolbarContent>\n          <FilterByTopic\n            ariaLabel={t(\"metrics:topics_filter_by_topic\")}\n            selectedTopic={selectedTopic}\n            onSetSelectedTopic={onSetSelectedTopic}\n            topicList={topicList}\n            disableToolbar={isDisabled}\n          />\n          <FilterByTime\n            ariaLabel={t(\"metrics:topics_filter_by_time\")}\n            duration={duration}\n            onDurationChange={onSetTimeDuration}\n            disableToolbar={isDisabled}\n            keyText={\"topic-metrics-time-filter\"}\n          />\n          <ToolbarRefresh\n            isRefreshing={isRefreshing}\n            lastUpdated={lastUpdated}\n            onRefresh={onRefresh}\n            ariaLabel={t(\"metrics:topics_refresh\")}\n          />\n        </ToolbarContent>\n      </Toolbar>\n      <Divider />\n    </>\n  );\n};\n","import { Card, CardBody, CardTitle, Divider } from \"@patternfly/react-core\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type {\n  DurationOptions,\n  PartitionBytesMetric,\n  TimeSeriesMetrics,\n} from \"../types\";\nimport { CardBodyLoading } from \"./CardBodyLoading\";\nimport { ChartLinearWithOptionalLimit } from \"./ChartLinearWithOptionalLimit\";\nimport { ChartLogSizePerPartition } from \"./ChartLogSizePerPartition\";\nimport { ChartPopover } from \"./ChartPopover\";\nimport { ChartTotalBytes } from \"./ChartTotalBytes\";\nimport { EmptyStateNoMetricsData } from \"./EmptyStateNoMetricsData\";\nimport { EmptyStateNoMetricsDataForSelection } from \"./EmptyStateNoMetricsDataForSelection\";\nimport { EmptyStateNoTopics } from \"./EmptyStateNoTopics\";\nimport { EmptyStateNoTopicSelected } from \"./EmptyStateNoTopicSelected\";\nimport type { ToolbarRefreshProps } from \"./ToolbarRefresh\";\nimport { ToolbarTopicsMetrics } from \"./ToolbarTopicsMetrics\";\n\ntype CardTopicsMetricsProps = {\n  topics: string[];\n  incomingTopicsData: TimeSeriesMetrics;\n  outgoingTopicsData: TimeSeriesMetrics;\n  partitions: PartitionBytesMetric;\n  incomingMessageRate: TimeSeriesMetrics;\n  duration: DurationOptions;\n  backendUnavailable: boolean;\n  isInitialLoading: boolean;\n  isLoading: boolean;\n  isJustCreated: boolean;\n  selectedTopic: string | undefined;\n  onCreateTopic: () => void;\n  onSelectedTopic: (topic: string | undefined) => void;\n  onDurationChange: (duration: DurationOptions) => void;\n} & Omit<ToolbarRefreshProps, \"ariaLabel\">;\n\nexport const CardTopicsMetrics: FunctionComponent<CardTopicsMetricsProps> = ({\n  topics,\n  incomingTopicsData,\n  outgoingTopicsData,\n  incomingMessageRate,\n  selectedTopic,\n  duration,\n  partitions,\n  backendUnavailable,\n  isInitialLoading,\n  isLoading,\n  isRefreshing,\n  isJustCreated,\n  lastUpdated,\n  onCreateTopic,\n  onRefresh,\n  onSelectedTopic,\n  onDurationChange,\n}) => {\n  const { t } = useTranslation();\n  const noTopics = topics.length === 0;\n  const selectedTopicNotInList =\n    selectedTopic !== undefined &&\n    topics.find((t) => t === selectedTopic) === undefined;\n  const chartEmptyState = selectedTopicNotInList ? (\n    <EmptyStateNoMetricsDataForSelection />\n  ) : (\n    <EmptyStateNoMetricsData />\n  );\n  return (\n    <Card data-testid={\"metrics-topics\"}>\n      <ToolbarTopicsMetrics\n        title={t(\"metrics:topic_metrics\")}\n        duration={duration}\n        onSetTimeDuration={onDurationChange}\n        isDisabled={\n          backendUnavailable || isJustCreated || noTopics || isLoading\n        }\n        isRefreshing={isRefreshing}\n        selectedTopic={selectedTopic}\n        onSetSelectedTopic={onSelectedTopic}\n        onRefresh={onRefresh}\n        topicList={topics}\n        lastUpdated={lastUpdated}\n      />\n      {(() => {\n        switch (true) {\n          case isInitialLoading:\n            return <CardBodyLoading />;\n\n          case backendUnavailable:\n            return (\n              <CardBody>\n                <EmptyStateNoMetricsData />\n              </CardBody>\n            );\n\n          case isJustCreated && !noTopics:\n            return (\n              <CardBody>\n                <EmptyStateNoTopics />\n              </CardBody>\n            );\n\n          case isJustCreated && noTopics:\n            return (\n              <CardBody>\n                <EmptyStateNoTopics onCreateTopic={onCreateTopic} />\n              </CardBody>\n            );\n\n          case selectedTopic !== undefined:\n            return (\n              <>\n                <TotalBytesTitle />\n                <CardBody>\n                  <ChartTotalBytes\n                    incomingTopicsData={incomingTopicsData}\n                    outgoingTopicsData={outgoingTopicsData}\n                    selectedTopic={selectedTopic}\n                    duration={duration}\n                    isLoading={isLoading}\n                    emptyState={chartEmptyState}\n                  />\n                </CardBody>\n                <Divider />\n                <IncomingMessageRate />\n                <CardBody>\n                  <ChartLinearWithOptionalLimit\n                    chartName={t(\"metrics:topic_incoming_message_rate\")}\n                    yLabel={t(\"metrics:topic_incoming_message_rate_y_axis\")}\n                    metrics={incomingMessageRate}\n                    duration={duration}\n                    isLoading={isLoading}\n                    emptyState={chartEmptyState}\n                  />\n                </CardBody>\n                <Divider />\n                <PartitionSizeTitle />\n                <CardBody>\n                  <ChartLogSizePerPartition\n                    partitions={partitions}\n                    topic={selectedTopic}\n                    duration={duration}\n                    isLoading={isLoading}\n                    emptyState={chartEmptyState}\n                  />\n                </CardBody>\n              </>\n            );\n\n          default:\n            return (\n              <>\n                <TotalBytesTitle />\n                <CardBody>\n                  <ChartTotalBytes\n                    incomingTopicsData={incomingTopicsData}\n                    outgoingTopicsData={outgoingTopicsData}\n                    selectedTopic={selectedTopic}\n                    duration={duration}\n                    isLoading={isLoading}\n                    emptyState={chartEmptyState}\n                  />\n                </CardBody>\n                <Divider />\n                <IncomingMessageRate />\n                <CardBody>\n                  <ChartLinearWithOptionalLimit\n                    chartName={t(\"metrics:topic_incoming_message_rate\")}\n                    yLabel={t(\"metrics:topic_incoming_message_rate_y_axis\")}\n                    metrics={incomingMessageRate}\n                    duration={duration}\n                    isLoading={isLoading}\n                    emptyState={chartEmptyState}\n                  />\n                </CardBody>\n                <Divider />\n                <PartitionSizeTitle />\n                <CardBody>\n                  <EmptyStateNoTopicSelected />\n                </CardBody>\n              </>\n            );\n        }\n      })()}\n    </Card>\n  );\n};\n\nconst TotalBytesTitle: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <CardTitle component=\"h3\">\n      {t(\"metrics:total_bytes\")}{\" \"}\n      <ChartPopover\n        title={t(\"metrics:total_bytes_popover_header\")}\n        description={t(\"metrics:topic_metrics_help_text\")}\n      />\n    </CardTitle>\n  );\n};\n\nconst PartitionSizeTitle: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <CardTitle component=\"h3\">\n      {t(\"metrics:topic_partition_size\")}{\" \"}\n      <ChartPopover\n        title={t(\"metrics:topic_partition_size_popover_header\")}\n        description={t(\"metrics:topic_partition_size_help_text\")}\n      />\n    </CardTitle>\n  );\n};\n\nconst IncomingMessageRate: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <CardTitle component=\"h3\">\n      {t(\"metrics:topic_incoming_message_rate\")}{\" \"}\n      <ChartPopover\n        title={t(\"metrics:topic_incoming_message_rate_popover_header\")}\n        description={t(\"metrics:topic_incoming_message_rate_help_text\")}\n      />\n    </CardTitle>\n  );\n};\n","import type { FunctionComponent } from \"react\";\nimport {\n  CardHeader,\n  CardTitle,\n  Divider,\n  Toolbar,\n  ToolbarContent,\n} from \"@patternfly/react-core\";\nimport { FilterByTime } from \"./FilterByTime\";\nimport type { DurationOptions } from \"../types\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { ToolbarRefreshProps } from \"./ToolbarRefresh\";\nimport { ToolbarRefresh } from \"./ToolbarRefresh\";\n\ntype ToolbarKafkaInstanceMetricProps = {\n  title: string;\n  isDisabled: boolean;\n  duration: DurationOptions;\n  onSetTimeDuration: (value: DurationOptions) => void;\n} & Omit<ToolbarRefreshProps, \"ariaLabel\">;\nexport const ToolbarKafkaInstanceMetric: FunctionComponent<\n  ToolbarKafkaInstanceMetricProps\n> = ({\n  title,\n  isDisabled,\n  isRefreshing,\n  lastUpdated,\n  duration,\n  onSetTimeDuration,\n  onRefresh,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <CardHeader>\n        <CardTitle component=\"h2\">{title}</CardTitle>\n      </CardHeader>\n      <Divider />\n      <Toolbar>\n        <ToolbarContent>\n          <FilterByTime\n            ariaLabel={t(\"metrics:kafka_instance_filter_by_time\")}\n            duration={duration}\n            onDurationChange={onSetTimeDuration}\n            keyText={\"kafka-metrics-time-filter\"}\n            disableToolbar={isDisabled}\n          />\n          <ToolbarRefresh\n            isRefreshing={isRefreshing}\n            lastUpdated={lastUpdated}\n            onRefresh={onRefresh}\n            ariaLabel={t(\"metrics:kafka_instance_refresh\")}\n          />\n        </ToolbarContent>\n      </Toolbar>\n      <Divider />\n    </>\n  );\n};\n","import { Card, CardBody, CardTitle, Divider } from \"@patternfly/react-core\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { DurationOptions, TimeSeriesMetrics } from \"../types\";\nimport { CardBodyLoading } from \"./CardBodyLoading\";\nimport { ChartPopover } from \"./ChartPopover\";\nimport { ChartLinearWithOptionalLimit } from \"./ChartLinearWithOptionalLimit\";\nimport { EmptyStateMetricsUnavailable } from \"./EmptyStateMetricsUnavailable\";\nimport { ToolbarKafkaInstanceMetric } from \"./ToolbarKafkaInstanceMetric\";\nimport { formatBytes } from \"./utils\";\nimport { EmptyStateNoMetricsData } from \"./EmptyStateNoMetricsData\";\nimport type { ToolbarRefreshProps } from \"./ToolbarRefresh\";\n\nexport type CardKafkaInstanceMetricsLimits = {\n  diskSpaceLimit: number;\n  connectionsLimit: number;\n  connectionRateLimit: number;\n};\n\nexport type CardKafkaInstanceMetricsProps = {\n  usedDiskMetrics: TimeSeriesMetrics;\n  clientConnectionsMetrics: TimeSeriesMetrics;\n  connectionAttemptRateMetrics: TimeSeriesMetrics;\n  duration: DurationOptions;\n  lastUpdated: Date | undefined;\n  backendUnavailable: boolean;\n  isInitialLoading: boolean;\n  isLoading: boolean;\n  isJustCreated: boolean;\n  onDurationChange: (duration: DurationOptions) => void;\n} & Omit<ToolbarRefreshProps, \"ariaLabel\"> &\n  CardKafkaInstanceMetricsLimits;\n\ntype ChartTitleProps = {\n  title: string;\n  helperText: string;\n};\n\nexport const CardKafkaInstanceMetrics: FunctionComponent<\n  CardKafkaInstanceMetricsProps\n> = ({\n  usedDiskMetrics,\n  clientConnectionsMetrics,\n  connectionAttemptRateMetrics,\n  duration,\n  lastUpdated,\n  backendUnavailable,\n  isInitialLoading,\n  isLoading,\n  isRefreshing,\n  isJustCreated,\n  diskSpaceLimit,\n  connectionsLimit,\n  connectionRateLimit,\n  onRefresh,\n  onDurationChange,\n}) => {\n  const { t } = useTranslation(\"metrics\");\n\n  return (\n    <Card data-testid={\"metrics-kafka-instance\"}>\n      <ToolbarKafkaInstanceMetric\n        title={t(\"kafka_instance_metrics\")}\n        duration={duration}\n        lastUpdated={lastUpdated}\n        onSetTimeDuration={onDurationChange}\n        isDisabled={backendUnavailable || isJustCreated || isLoading}\n        isRefreshing={isRefreshing}\n        onRefresh={onRefresh}\n      />\n      {(() => {\n        switch (true) {\n          case isInitialLoading:\n            return <CardBodyLoading />;\n\n          case backendUnavailable:\n            return (\n              <CardBody>\n                <EmptyStateNoMetricsData />\n              </CardBody>\n            );\n\n          case isJustCreated:\n            return (\n              <CardBody>\n                <EmptyStateMetricsUnavailable />\n              </CardBody>\n            );\n\n          default:\n            return (\n              <>\n                <ChartTitle\n                  title={t(\"used_disk_space\")}\n                  helperText={t(\"used_disk_space_help_text\")}\n                />\n                <CardBody>\n                  <ChartLinearWithOptionalLimit\n                    chartName={t(\"used_disk_space\")}\n                    yLabel={t(\"axis-label-bytes\")}\n                    metrics={usedDiskMetrics}\n                    duration={duration}\n                    formatValue={formatBytes}\n                    usageLimit={diskSpaceLimit}\n                    isLoading={isLoading}\n                    emptyState={<EmptyStateNoMetricsData />}\n                  />\n                </CardBody>\n                <Divider />\n                <ChartTitle\n                  title={t(\"client_connections\")}\n                  helperText={t(\"client_connections_helper_text\")}\n                />\n                <CardBody>\n                  <ChartLinearWithOptionalLimit\n                    chartName={t(\"client_connections\")}\n                    yLabel={t(\"client_connections_y_axis\")}\n                    metrics={clientConnectionsMetrics}\n                    duration={duration}\n                    usageLimit={connectionsLimit}\n                    isLoading={isLoading}\n                    emptyState={<EmptyStateNoMetricsData />}\n                  />\n                </CardBody>\n                <Divider />\n                <ChartTitle\n                  title={t(\"connection_attempt_rate\")}\n                  helperText={t(\"connection_attempt_rate_help_text\")}\n                />\n                <CardBody>\n                  <ChartLinearWithOptionalLimit\n                    chartName={t(\"connection_attempt_rate\")}\n                    yLabel={t(\"connection_attempt_rate_yaxis\")}\n                    metrics={connectionAttemptRateMetrics}\n                    duration={duration}\n                    usageLimit={connectionRateLimit}\n                    isLoading={isLoading}\n                    emptyState={<EmptyStateNoMetricsData />}\n                  />\n                </CardBody>\n              </>\n            );\n        }\n      })()}\n    </Card>\n  );\n};\n\nexport const ChartTitle: FunctionComponent<ChartTitleProps> = ({\n  title,\n  helperText,\n}) => {\n  return (\n    <CardTitle component=\"h3\">\n      {title} <ChartPopover title={title} description={helperText} />\n    </CardTitle>\n  );\n};\n","import {\n  Bullseye,\n  Card,\n  CardBody,\n  CardTitle,\n  Skeleton,\n  Title,\n} from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { ChartPopover } from \"./ChartPopover\";\nimport { EmptyStateNoMetricsData } from \"./EmptyStateNoMetricsData\";\n\ntype CardKpiProps = {\n  metric: string | number | undefined;\n  name: string;\n  popover: string;\n  isLoading: boolean;\n};\n\nexport const CardKpi: VoidFunctionComponent<CardKpiProps> = ({\n  metric,\n  name,\n  popover,\n  isLoading,\n}) => {\n  return (\n    <Card isFullHeight data-testid={name}>\n      <CardTitle component=\"h3\">\n        {name} <ChartPopover title={name} description={popover} />\n      </CardTitle>\n      <CardBody>\n        {!isLoading &&\n          (metric === undefined ? (\n            <Bullseye>\n              <EmptyStateNoMetricsData />\n            </Bullseye>\n          ) : (\n            <Title\n              headingLevel=\"h3\"\n              size=\"4xl\"\n              aria-valuetext={`${metric} ${name}`}\n            >\n              {metric}\n            </Title>\n          ))}\n        {isLoading && <Skeleton width=\"50px\" shape=\"square\" />}\n      </CardBody>\n    </Card>\n  );\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { Alert, AlertActionCloseButton } from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport type MetricsLagAlertProps = {\n  isClosed: boolean;\n  onClickClose: () => void;\n};\n\nexport const MetricsLagAlert: VoidFunctionComponent<MetricsLagAlertProps> = ({\n  isClosed,\n  onClickClose,\n}) => {\n  const { t } = useTranslation(\"metrics\");\n\n  if (!isClosed) {\n    return (\n      <Alert\n        isInline\n        variant=\"info\"\n        title={t(\"metrics_lag_title\")}\n        actionClose={<AlertActionCloseButton onClose={onClickClose} />}\n      >\n        <p>{t(\"metrics_lag_description\")}</p>\n      </Alert>\n    );\n  } else {\n    return <> </>;\n  }\n};\n","import {\n  Alert,\n  AlertVariant,\n  Bullseye,\n  Card,\n  CardBody,\n  CardFooter,\n  CardTitle,\n  Skeleton,\n  Text,\n  TextContent,\n  Title,\n} from \"@patternfly/react-core\";\nimport {\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n} from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { ChartPopover } from \"./ChartPopover\";\nimport { EmptyStateNoMetricsData } from \"./EmptyStateNoMetricsData\";\n\ntype PartitionCardProps = {\n  metric: number | undefined;\n  isLoading: boolean;\n  topicPartitionsLimit: number | undefined;\n};\n\nexport const PartitionCard: VoidFunctionComponent<PartitionCardProps> = ({\n  metric,\n  isLoading,\n  topicPartitionsLimit = 0,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <Card\n      isFullHeight\n      data-testid={t(\"metrics:metric_kpi_topicPartitions_name\")}\n    >\n      <CardTitle component=\"h3\">\n        {t(\"metrics:metric_kpi_topicPartitions_name\")}{\" \"}\n        <ChartPopover\n          title={t(\"metrics:metric_kpi_topicPartitions_name\")}\n          description={t(\"metrics:metric_kpi_topicPartitions_description\")}\n        />\n      </CardTitle>\n      <CardBody>\n        {!isLoading &&\n          (metric === undefined ? (\n            <Bullseye>\n              <EmptyStateNoMetricsData />\n            </Bullseye>\n          ) : (\n            <>\n              <Title\n                headingLevel=\"h3\"\n                size=\"4xl\"\n                aria-valuetext={`${metric} ${t(\n                  \"metrics:metric_kpi_topicPartitions_name\"\n                )}`}\n              >\n                {metric}{\" \"}\n                {(() => {\n                  if (metric >= topicPartitionsLimit) {\n                    return (\n                      <ExclamationCircleIcon color=\"var(--pf-global--danger-color--100)\" />\n                    );\n                  } else if (metric >= topicPartitionsLimit * 0.95) {\n                    return (\n                      <ExclamationTriangleIcon color=\"var(--pf-global--warning-color--100)\" />\n                    );\n                  } else {\n                    return \"\";\n                  }\n                })()}\n              </Title>\n              <TextContent>\n                <Text>\n                  {t(\"metrics:partition_limit\", {\n                    topic: topicPartitionsLimit,\n                  })}\n                </Text>\n              </TextContent>\n            </>\n          ))}\n        {isLoading && <Skeleton width=\"50px\" shape=\"square\" />}\n      </CardBody>\n      {(() => {\n        if (metric && metric >= topicPartitionsLimit) {\n          return (\n            <CardFooter>\n              <Alert\n                isExpandable\n                isInline\n                variant={AlertVariant.danger}\n                title={t(\"metrics:partition_limit_reached_title\")}\n              >\n                <p>{t(\"metrics:partition_limit_reached_description_1\")}</p>\n                <p>{t(\"metrics:partition_limit_reached_description_2\")}</p>\n              </Alert>\n            </CardFooter>\n          );\n        } else if (metric && metric >= topicPartitionsLimit * 0.95) {\n          return (\n            <CardFooter>\n              <Alert\n                role={\"alert\"}\n                isExpandable\n                isInline\n                variant={AlertVariant.warning}\n                title={t(\"metrics:partition_limit_approaching_title\")}\n              >\n                <p>\n                  {t(\"metrics:partition_limit_approaching_description_1\", {\n                    limit: topicPartitionsLimit,\n                  })}\n                </p>\n                <p>{t(\"metrics:partition_limit_approaching_description_2\")}</p>\n              </Alert>\n            </CardFooter>\n          );\n        } else {\n          return \" \";\n        }\n      })()}\n    </Card>\n  );\n};\n","import { assign, createMachine } from \"xstate\";\nimport type {\n  GetKafkaInstanceMetricsResponse,\n  TimeSeriesMetrics,\n} from \"../types\";\nimport { DurationOptions } from \"../types\";\n\nconst MAX_RETRIES = 3;\n\nconst apiState = {\n  initial: \"loading\",\n  states: {\n    loading: {\n      invoke: {\n        src: \"api\",\n      },\n      on: {\n        fetchFail: {\n          actions: \"incrementRetries\",\n          target: \"failure\",\n        },\n      },\n    },\n    failure: {\n      after: {\n        1000: [\n          { cond: \"canRetryFetching\", target: \"loading\" },\n          { target: \"#kafkaInstanceMetrics.criticalFail\" },\n        ],\n      },\n    },\n  },\n};\n\nexport type KafkaInstanceMetricsMachineContext = {\n  lastUpdated: Date | undefined;\n\n  // from the UI elements\n  duration: DurationOptions;\n\n  // from the api\n  usedDiskSpaceMetrics: TimeSeriesMetrics;\n  clientConnectionsMetrics: TimeSeriesMetrics;\n  connectionAttemptRateMetrics: TimeSeriesMetrics;\n  diskSpaceLimit: number | undefined;\n  connectionsLimit: number | undefined;\n  connectionRateLimit: number | undefined;\n  // how many time did we try a fetch (that combines more api)\n  fetchFailures: number;\n};\n\nexport const KafkaInstanceMetricsMachine = createMachine(\n  {\n    tsTypes: {} as import(\"./KafkaInstanceMetricsMachine.typegen\").Typegen0,\n    schema: {\n      context: {} as KafkaInstanceMetricsMachineContext,\n      events: {} as\n        | ({ type: \"fetchSuccess\" } & GetKafkaInstanceMetricsResponse)\n        | { type: \"fetchFail\" }\n        // to refresh the data\n        | { type: \"refresh\" }\n        // from the UI elements\n        | { type: \"selectTopic\"; topic: string | undefined }\n        | { type: \"selectDuration\"; duration: DurationOptions },\n    },\n    id: \"kafkaInstanceMetrics\",\n    context: {\n      lastUpdated: undefined,\n      duration: DurationOptions.Last1hour,\n      usedDiskSpaceMetrics: {},\n      clientConnectionsMetrics: {},\n      connectionAttemptRateMetrics: {},\n      diskSpaceLimit: undefined,\n      connectionsLimit: undefined,\n      connectionRateLimit: undefined,\n      fetchFailures: 0,\n    },\n    initial: \"initialLoading\",\n    states: {\n      initialLoading: {\n        ...apiState,\n        tags: \"initialLoading\",\n        entry: \"setFetchTimestamp\",\n        on: {\n          fetchSuccess: [\n            {\n              cond: \"isJustCreated\",\n              actions: \"setMetrics\",\n              target: \"#kafkaInstanceMetrics.withResponse\",\n            },\n            { actions: \"setMetrics\", target: \"justCreated\" },\n          ],\n        },\n      },\n      callApi: {\n        ...apiState,\n        tags: \"loading\",\n        entry: \"setFetchTimestamp\",\n        on: {\n          fetchSuccess: {\n            actions: \"setMetrics\",\n            target: \"#kafkaInstanceMetrics.withResponse\",\n          },\n        },\n      },\n      criticalFail: {\n        tags: \"failed\",\n        on: {\n          refresh: {\n            actions: \"resetRetries\",\n            target: \"callApi\",\n          },\n        },\n      },\n      justCreated: {\n        tags: \"justCreated\",\n        on: {\n          refresh: {\n            target: \"initialLoading\",\n          },\n        },\n      },\n      withResponse: {\n        tags: \"withResponse\",\n        on: {\n          refresh: {\n            target: \"refreshing\",\n          },\n          selectDuration: {\n            actions: \"setDuration\",\n            target: \"callApi\",\n          },\n        },\n      },\n      refreshing: {\n        tags: \"refreshing\",\n        entry: \"setFetchTimestamp\",\n        invoke: {\n          src: \"api\",\n        },\n        on: {\n          fetchSuccess: {\n            actions: \"setMetrics\",\n            target: \"withResponse\",\n          },\n          fetchFail: {\n            // 👀 we silently ignore this happened and go back to the right\n            // state depending on the previous data\n            target: \"withResponse\",\n          },\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      setFetchTimestamp: assign({\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        lastUpdated: (_context) => new Date(),\n      }),\n      setMetrics: assign((_, event) => {\n        const {\n          usedDiskSpaceMetrics,\n          clientConnectionsMetrics,\n          connectionAttemptRateMetrics,\n          diskSpaceLimit,\n          connectionsLimit,\n          connectionRateLimit,\n        } = event;\n        return {\n          usedDiskSpaceMetrics,\n          clientConnectionsMetrics,\n          connectionAttemptRateMetrics,\n          diskSpaceLimit: diskSpaceLimit * 1024 ** 3, // convert it to GiB\n          connectionsLimit,\n          connectionRateLimit,\n        };\n      }),\n      incrementRetries: assign({\n        fetchFailures: (context) => context.fetchFailures + 1,\n      }),\n      resetRetries: assign({\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        fetchFailures: (_context) => 0,\n      }),\n      setDuration: assign((_context, event) => ({\n        duration: event.duration,\n        usedDiskSpaceMetrics: {},\n        clientConnectionsMetrics: {},\n        connectionAttemptRateMetrics: {},\n      })),\n    },\n    guards: {\n      canRetryFetching: (context) => context.fetchFailures < MAX_RETRIES,\n      isJustCreated: (_, event) => {\n        if (event.type === \"fetchSuccess\") {\n          return (\n            Object.keys(event.clientConnectionsMetrics).length > 0 ||\n            Object.keys(event.connectionAttemptRateMetrics).length > 0 ||\n            Object.keys(event.usedDiskSpaceMetrics).length > 0\n          );\n        }\n        return false;\n      },\n    },\n  }\n);\n\nexport type KafkaInstanceMetricsMachineType =\n  typeof KafkaInstanceMetricsMachine;\n","import { assign, createMachine } from \"xstate\";\nimport type {\n  GetTopicsMetricsResponse,\n  PartitionBytesMetric,\n  TimeSeriesMetrics,\n} from \"../types\";\nimport { DurationOptions } from \"../types\";\n\nconst MAX_RETRIES = 3;\n\nconst apiState = {\n  initial: \"loading\",\n  states: {\n    loading: {\n      invoke: {\n        src: \"api\",\n      },\n      on: {\n        fetchFail: {\n          actions: \"incrementRetries\",\n          target: \"failure\",\n        },\n      },\n    },\n    failure: {\n      after: {\n        1000: [\n          { cond: \"canRetryFetching\", target: \"loading\" },\n          { target: \"#topicsMetrics.criticalFail\" },\n        ],\n      },\n    },\n  },\n};\n\nexport type TopicsMetricsMachineContext = {\n  lastUpdated: Date | undefined;\n\n  // from the UI elements\n  selectedTopic: string | undefined;\n  duration: DurationOptions;\n\n  // from the api\n  kafkaTopics: string[];\n  metricsTopics: string[];\n  bytesOutgoing: TimeSeriesMetrics;\n  bytesIncoming: TimeSeriesMetrics;\n  bytesPerPartition: PartitionBytesMetric;\n  incomingMessageRate: TimeSeriesMetrics;\n\n  // how many time did we try a fetch (that combines more api)\n  fetchFailures: number;\n};\n\nexport const TopicsMetricsMachine = createMachine(\n  {\n    tsTypes: {} as import(\"./TopicsMetricsMachine.typegen\").Typegen0,\n    schema: {\n      context: {} as TopicsMetricsMachineContext,\n      events: {} as  // called when a new kafka id has been specified\n        | ({ type: \"fetchSuccess\" } & GetTopicsMetricsResponse)\n        | { type: \"fetchFail\" }\n\n        // to refresh the data\n        | { type: \"refresh\" }\n\n        // from the UI elements\n        | { type: \"selectTopic\"; topic: string | undefined }\n        | { type: \"selectDuration\"; duration: DurationOptions },\n    },\n    id: \"topicsMetrics\",\n    context: {\n      lastUpdated: undefined,\n\n      // from the UI elements\n      selectedTopic: undefined,\n      duration: DurationOptions.Last1hour,\n\n      // from the api\n      kafkaTopics: [],\n      metricsTopics: [],\n      bytesOutgoing: {},\n      bytesIncoming: {},\n      bytesPerPartition: {},\n      incomingMessageRate: {},\n\n      // how many time did we try a fetch (that combines more api)\n      fetchFailures: 0,\n    },\n    initial: \"initialLoading\",\n    states: {\n      initialLoading: {\n        ...apiState,\n        tags: \"initialLoading\",\n        entry: \"setFetchTimestamp\",\n        on: {\n          fetchSuccess: [\n            {\n              cond: \"isJustCreated\",\n              actions: \"setMetrics\",\n              target: \"#topicsMetrics.withResponse\",\n            },\n            { actions: \"setMetrics\", target: \"justCreated\" },\n          ],\n        },\n      },\n      callApi: {\n        ...apiState,\n        tags: \"loading\",\n        entry: \"setFetchTimestamp\",\n        on: {\n          fetchSuccess: {\n            actions: \"setMetrics\",\n            target: \"#topicsMetrics.withResponse\",\n          },\n        },\n      },\n      criticalFail: {\n        tags: \"failed\",\n        on: {\n          refresh: {\n            actions: \"resetRetries\",\n            target: \"callApi\",\n          },\n        },\n      },\n      justCreated: {\n        tags: \"justCreated\",\n        on: {\n          refresh: {\n            target: \"initialLoading\",\n          },\n        },\n      },\n      withResponse: {\n        tags: \"withResponse\",\n        initial: \"idle\",\n        states: {\n          idle: {},\n          refreshing: {\n            tags: \"refreshing\",\n            entry: \"setFetchTimestamp\",\n            invoke: {\n              src: \"api\",\n            },\n            on: {\n              fetchSuccess: {\n                actions: \"setMetrics\",\n                target: \"#topicsMetrics.withResponse\",\n              },\n              fetchFail: {\n                // 👀 we silently ignore this happened\n                target: \"#topicsMetrics.withResponse\",\n              },\n            },\n          },\n        },\n        on: {\n          refresh: {\n            target: \"#topicsMetrics.withResponse.refreshing\",\n          },\n          selectTopic: {\n            actions: \"setTopic\",\n            target: \"callApi\",\n          },\n          selectDuration: {\n            actions: \"setDuration\",\n            target: \"callApi\",\n          },\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      setFetchTimestamp: assign({\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        lastUpdated: (_context) => new Date(),\n      }),\n      setMetrics: assign((_context, event) => {\n        const {\n          kafkaTopics,\n          metricsTopics,\n          bytesPerPartition,\n          bytesIncoming,\n          bytesOutgoing,\n          incomingMessageRate,\n        } = event;\n        return {\n          kafkaTopics,\n          metricsTopics,\n          bytesPerPartition,\n          bytesIncoming,\n          bytesOutgoing,\n          incomingMessageRate,\n        };\n      }),\n      incrementRetries: assign({\n        fetchFailures: (context) => context.fetchFailures + 1,\n      }),\n      resetRetries: assign({\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        fetchFailures: (_context) => 0,\n      }),\n      setTopic: assign({\n        selectedTopic: (_context, event) => event.topic,\n      }),\n      setDuration: assign({\n        duration: (_, event) => event.duration,\n      }),\n    },\n    guards: {\n      canRetryFetching: (context) => context.fetchFailures < MAX_RETRIES,\n      isJustCreated: (_, event) => {\n        if (event.type === \"fetchSuccess\") {\n          return (\n            Object.keys(event.bytesIncoming).length > 0 ||\n            Object.keys(event.bytesOutgoing).length > 0 ||\n            Object.keys(event.bytesPerPartition).length > 0 ||\n            Object.keys(event.incomingMessageRate).length > 0\n          );\n        }\n        return false;\n      },\n    },\n  }\n);\n\nexport type TopicsMetricsMachineType = typeof TopicsMetricsMachine;\n","import { assign, createMachine } from \"xstate\";\nimport type { GetMetricsKpiResponse } from \"../types\";\n\nconst MAX_RETRIES = 3;\n\nconst apiState = {\n  initial: \"loading\",\n  states: {\n    loading: {\n      invoke: {\n        src: \"api\",\n      },\n      on: {\n        fetchFail: {\n          actions: \"incrementRetries\",\n          target: \"failure\",\n        },\n      },\n    },\n    failure: {\n      after: {\n        1000: [\n          { cond: \"canRetryFetching\", target: \"loading\" },\n          { target: \"#kpis.criticalFail\" },\n        ],\n      },\n    },\n  },\n};\n\nexport type MetricsKpiMachineContext = {\n  // from the api\n  topics: number | undefined;\n  topicPartitions: number | undefined;\n  consumerGroups: number | undefined;\n  topicPartitionsLimit: number | undefined;\n\n  // how many time did we try a fetch (that combines more api)\n  fetchFailures: number;\n};\n\nexport const MetricsKpiMachine = createMachine(\n  {\n    tsTypes: {} as import(\"./MetricsKpiMachine.typegen\").Typegen0,\n    schema: {\n      context: {} as MetricsKpiMachineContext,\n      events: {} as\n        | { type: \"fetch\" }\n        | ({ type: \"fetchSuccess\" } & GetMetricsKpiResponse)\n        | { type: \"fetchFail\" }\n        | { type: \"refresh\" },\n    },\n    id: \"kpis\",\n    context: {\n      topics: undefined,\n      topicPartitions: undefined,\n      consumerGroups: undefined,\n      topicPartitionsLimit: undefined,\n      fetchFailures: 0,\n    },\n    initial: \"initialLoading\",\n    states: {\n      initialLoading: {\n        ...apiState,\n        tags: \"initialLoading\",\n        on: {\n          fetchSuccess: [\n            {\n              cond: \"isJustCreated\",\n              actions: \"setMetrics\",\n              target: \"#kpis.withResponse\",\n            },\n            { actions: \"setMetrics\", target: \"justCreated\" },\n          ],\n        },\n      },\n      callApi: {\n        ...apiState,\n        tags: \"loading\",\n        on: {\n          fetchSuccess: {\n            actions: \"setMetrics\",\n            target: \"#kpis.withResponse\",\n          },\n        },\n      },\n      criticalFail: {\n        tags: \"failed\",\n        on: {\n          refresh: {\n            actions: \"resetRetries\",\n            target: \"callApi\",\n          },\n        },\n      },\n      justCreated: {\n        tags: \"justCreated\",\n        on: {\n          refresh: {\n            target: \"initialLoading\",\n          },\n        },\n      },\n      withResponse: {\n        tags: \"withResponse\",\n        initial: \"idle\",\n        states: {\n          idle: {},\n          refreshing: {\n            tags: \"refreshing\",\n            invoke: {\n              src: \"api\",\n            },\n            on: {\n              fetchSuccess: {\n                actions: \"setMetrics\",\n                target: \"#kpis.withResponse\",\n              },\n              fetchFail: {\n                // 👀 we silently ignore this happened\n                target: \"#kpis.withResponse\",\n              },\n            },\n          },\n        },\n        on: {\n          refresh: {\n            target: \"#kpis.withResponse.refreshing\",\n          },\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      setMetrics: assign((_, event) => {\n        const {\n          topics,\n          topicPartitions,\n          consumerGroups,\n          topicPartitionsLimit,\n        } = event;\n        return {\n          topics,\n          topicPartitions,\n          consumerGroups,\n          topicPartitionsLimit,\n        };\n      }),\n\n      incrementRetries: assign({\n        fetchFailures: (context) => context.fetchFailures + 1,\n      }),\n\n      resetRetries: assign({\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        fetchFailures: (_context) => 0,\n      }),\n    },\n    guards: {\n      canRetryFetching: (context) => context.fetchFailures < MAX_RETRIES,\n      isJustCreated: (_, event) => {\n        if (event.type === \"fetchSuccess\") {\n          return (\n            event.topics !== undefined ||\n            event.topicPartitions !== undefined ||\n            event.consumerGroups !== undefined ||\n            event.topicPartitionsLimit !== undefined\n          );\n        }\n        return false;\n      },\n    },\n  }\n);\n\nexport type MetricsKpiMachineType = typeof MetricsKpiMachine;\n","import { useInterpret } from \"@xstate/react\";\nimport type { FunctionComponent } from \"react\";\nimport { createContext } from \"react\";\nimport type { ActorRefFrom } from \"xstate\";\nimport { timeIntervalsMapping } from \"./consts\";\nimport type { KafkaInstanceMetricsMachineType } from \"./machines\";\nimport { KafkaInstanceMetricsMachine } from \"./machines\";\nimport type { DurationOptions, GetKafkaInstanceMetricsResponse } from \"./types\";\n\nexport const KafkaInstanceMetricsContext = createContext<{\n  service: ActorRefFrom<KafkaInstanceMetricsMachineType>;\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n}>(null!);\n\nexport type KafkaInstanceMetricsProviderProps = {\n  getKafkaInstanceMetrics: (options: {\n    duration: DurationOptions;\n    interval: number;\n  }) => Promise<GetKafkaInstanceMetricsResponse>;\n};\nexport const KafkaInstanceMetricsProvider: FunctionComponent<\n  KafkaInstanceMetricsProviderProps\n> = ({ children, getKafkaInstanceMetrics }) => {\n  const service = useInterpret(\n    () =>\n      KafkaInstanceMetricsMachine.withConfig({\n        services: {\n          api: (context) => {\n            return (callback) => {\n              getKafkaInstanceMetrics({\n                duration: context.duration,\n                interval: timeIntervalsMapping[context.duration].interval,\n              })\n                .then((results) =>\n                  callback({ type: \"fetchSuccess\", ...results })\n                )\n                .catch((e) => {\n                  console.error(\"Failed fetching data\", e);\n                  callback(\"fetchFail\");\n                });\n            };\n          },\n        },\n      }),\n    {\n      devTools: true,\n    }\n  );\n  return (\n    <KafkaInstanceMetricsContext.Provider\n      value={{\n        service,\n      }}\n    >\n      {children}\n    </KafkaInstanceMetricsContext.Provider>\n  );\n};\n","import { useInterpret } from \"@xstate/react\";\nimport type { FunctionComponent } from \"react\";\nimport { createContext } from \"react\";\nimport type { ActorRefFrom } from \"xstate\";\nimport type { MetricsKpiMachineType } from \"./machines\";\nimport { MetricsKpiMachine } from \"./machines\";\nimport type { GetMetricsKpiResponse } from \"./types\";\n\nexport const MetricsKpiContext = createContext<{\n  service: ActorRefFrom<MetricsKpiMachineType>;\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n}>(null!);\n\nexport type MetricsKpiProviderProps = {\n  getMetricsKpi: () => Promise<GetMetricsKpiResponse>;\n};\nexport const MetricsKpiProvider: FunctionComponent<MetricsKpiProviderProps> = ({\n  children,\n  getMetricsKpi,\n}) => {\n  const service = useInterpret(\n    () =>\n      MetricsKpiMachine.withConfig({\n        services: {\n          api: () => {\n            return (callback) => {\n              getMetricsKpi()\n                .then((results) =>\n                  callback({ type: \"fetchSuccess\", ...results })\n                )\n                .catch((e) => {\n                  console.error(\"Failed fetching data\", e);\n                  callback(\"fetchFail\");\n                });\n            };\n          },\n        },\n      }),\n    {\n      devTools: true,\n    }\n  );\n  return (\n    <MetricsKpiContext.Provider\n      value={{\n        service,\n      }}\n    >\n      {children}\n    </MetricsKpiContext.Provider>\n  );\n};\n","import { useInterpret } from \"@xstate/react\";\nimport type { FunctionComponent } from \"react\";\nimport { createContext } from \"react\";\nimport type { ActorRefFrom } from \"xstate\";\nimport { timeIntervalsMapping } from \"./consts\";\nimport type { TopicsMetricsMachineType } from \"./machines\";\nimport { TopicsMetricsMachine } from \"./machines\";\nimport type { DurationOptions, GetTopicsMetricsResponse } from \"./types\";\n\nexport const TopicsMetricsContext = createContext<{\n  service: ActorRefFrom<TopicsMetricsMachineType>;\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n}>(null!);\n\nexport type TopicsMetricsProviderProps = {\n  getTopicsMetrics: (options: {\n    duration: DurationOptions;\n    interval: number;\n    selectedTopic: string | undefined;\n  }) => Promise<GetTopicsMetricsResponse>;\n};\nexport const TopicsMetricsProvider: FunctionComponent<\n  TopicsMetricsProviderProps\n> = ({ children, getTopicsMetrics }) => {\n  const service = useInterpret(\n    () =>\n      TopicsMetricsMachine.withConfig({\n        services: {\n          api: (context) => {\n            return (callback) => {\n              getTopicsMetrics({\n                selectedTopic: context.selectedTopic,\n                duration: context.duration,\n                interval: timeIntervalsMapping[context.duration].interval,\n              })\n                .then((results) =>\n                  callback({ type: \"fetchSuccess\", ...results })\n                )\n                .catch((e) => {\n                  console.error(\"Failed fetching data\", e);\n                  callback(\"fetchFail\");\n                });\n            };\n          },\n        },\n      }),\n    {\n      devTools: true,\n    }\n  );\n  return (\n    <TopicsMetricsContext.Provider\n      value={{\n        service,\n      }}\n    >\n      {children}\n    </TopicsMetricsContext.Provider>\n  );\n};\n","import { useSelector } from \"@xstate/react\";\nimport { useCallback, useContext } from \"react\";\nimport { KafkaInstanceMetricsContext } from \"./KafkaInstanceMetricsProvider\";\nimport type { KafkaInstanceMetricsMachineContext } from \"./machines\";\nimport type { DurationOptions } from \"./types\";\n\ntype SeletorReturn = KafkaInstanceMetricsMachineContext & {\n  isInitialLoading: boolean;\n  isRefreshing: boolean;\n  isLoading: boolean;\n  isFailed: boolean;\n  isJustCreated: boolean;\n};\n\nexport function useKafkaInstanceMetrics() {\n  const { service } = useContext(KafkaInstanceMetricsContext);\n\n  const {\n    usedDiskSpaceMetrics,\n    clientConnectionsMetrics,\n    connectionAttemptRateMetrics,\n    diskSpaceLimit,\n    connectionsLimit,\n    connectionRateLimit,\n    duration,\n    lastUpdated,\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n  } = useSelector<typeof service, SeletorReturn>(\n    service,\n    useCallback(\n      (state) => ({\n        ...state.context,\n        isInitialLoading: state.hasTag(\"initialLoading\"),\n        isRefreshing: state.hasTag(\"refreshing\"),\n        isLoading: state.hasTag(\"loading\"),\n        isFailed: state.hasTag(\"failed\"),\n        isJustCreated: state.hasTag(\"justCreated\"),\n      }),\n      []\n    )\n  );\n\n  const onDurationChange = useCallback(\n    (duration: DurationOptions) =>\n      service.send({ type: \"selectDuration\", duration }),\n    [service]\n  );\n\n  const onRefresh = useCallback(() => service.send(\"refresh\"), [service]);\n\n  return {\n    usedDiskSpaceMetrics,\n    clientConnectionsMetrics,\n    connectionAttemptRateMetrics,\n    diskSpaceLimit,\n    connectionsLimit,\n    connectionRateLimit,\n    lastUpdated,\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n    duration,\n    onDurationChange,\n    onRefresh,\n  };\n}\n","import { useSelector } from \"@xstate/react\";\nimport { useCallback, useContext, useMemo } from \"react\";\nimport type { TopicsMetricsMachineContext } from \"./machines\";\nimport { TopicsMetricsContext } from \"./TopicsMetricsProvider\";\nimport type { DurationOptions } from \"./types\";\n\ntype SelectorReturn = TopicsMetricsMachineContext & {\n  isInitialLoading: boolean;\n  isRefreshing: boolean;\n  isLoading: boolean;\n  isFailed: boolean;\n  isJustCreated: boolean;\n};\n\nexport function useTopicsMetrics() {\n  const { service } = useContext(TopicsMetricsContext);\n\n  const {\n    selectedTopic,\n    duration,\n    kafkaTopics,\n    metricsTopics,\n    bytesIncoming,\n    bytesOutgoing,\n    bytesPerPartition,\n    incomingMessageRate,\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n    lastUpdated,\n  } = useSelector<typeof service, SelectorReturn>(\n    service,\n    useCallback(\n      (state) => ({\n        ...state.context,\n        isInitialLoading: state.hasTag(\"initialLoading\"),\n        isRefreshing: state.hasTag(\"refreshing\"),\n        isLoading: state.hasTag(\"loading\"),\n        isFailed: state.hasTag(\"failed\"),\n        isJustCreated: state.hasTag(\"justCreated\"),\n      }),\n      []\n    )\n  );\n\n  const onTopicChange = useCallback(\n    (topic: string | undefined) => service.send({ type: \"selectTopic\", topic }),\n    [service]\n  );\n\n  const onDurationChange = useCallback(\n    (duration: DurationOptions) =>\n      service.send({ type: \"selectDuration\", duration }),\n    [service]\n  );\n\n  const onRefresh = useCallback(() => service.send(\"refresh\"), [service]);\n\n  const mergedTopics = useMemo((): string[] => {\n    const topics = Array.from(\n      new Set<string>([...kafkaTopics, ...metricsTopics])\n    );\n    topics.sort((a, b) => a.localeCompare(b));\n    return topics;\n  }, [kafkaTopics, metricsTopics]);\n\n  return {\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n    lastUpdated,\n    topics: mergedTopics,\n    selectedTopic,\n    duration,\n    bytesIncoming,\n    bytesOutgoing,\n    bytesPerPartition,\n    incomingMessageRate,\n    onTopicChange,\n    onDurationChange,\n    onRefresh,\n  };\n}\n","import { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport {\n  CardKafkaInstanceMetrics,\n  CardTopicsMetrics,\n  EmptyStateInitialLoading,\n  EmptyStateMetricsUnavailable,\n  MetricsLayout,\n} from \"./components\";\nimport { CardKpi } from \"./components/CardKpi\";\nimport { MetricsLagAlert } from \"./components/MetricsLagAlert\";\nimport { PartitionCard } from \"./components/PartitionCard\";\nimport type { KafkaInstanceMetricsProviderProps } from \"./KafkaInstanceMetricsProvider\";\nimport { KafkaInstanceMetricsProvider } from \"./KafkaInstanceMetricsProvider\";\nimport type { MetricsKpiProviderProps } from \"./MetricsKpiProvider\";\nimport { MetricsKpiProvider } from \"./MetricsKpiProvider\";\nimport type { TopicsMetricsProviderProps } from \"./TopicsMetricsProvider\";\nimport { TopicsMetricsProvider } from \"./TopicsMetricsProvider\";\nimport { useKafkaInstanceMetrics } from \"./useKafkaInstanceMetrics\";\nimport { useMetricsKpi } from \"./useMetricsKpi\";\nimport { useTopicsMetrics } from \"./useTopicsMetrics\";\n\nexport type MetricsProps = {\n  onCreateTopic: () => void;\n  onAlertClose: () => void;\n  hasUserAlreadyClosedAlert: boolean;\n} & KafkaInstanceMetricsProviderProps &\n  TopicsMetricsProviderProps &\n  MetricsKpiProviderProps;\n\nexport const Metrics: VoidFunctionComponent<MetricsProps> = ({\n  getKafkaInstanceMetrics,\n  getTopicsMetrics,\n  getMetricsKpi,\n  onCreateTopic,\n  onAlertClose,\n  hasUserAlreadyClosedAlert,\n}) => {\n  return (\n    <TopicsMetricsProvider getTopicsMetrics={getTopicsMetrics}>\n      <KafkaInstanceMetricsProvider\n        getKafkaInstanceMetrics={getKafkaInstanceMetrics}\n      >\n        <MetricsKpiProvider getMetricsKpi={getMetricsKpi}>\n          <ConnectedMetrics\n            onCreateTopic={onCreateTopic}\n            onClickClose={onAlertClose}\n            isClosed={hasUserAlreadyClosedAlert}\n          />\n        </MetricsKpiProvider>\n      </KafkaInstanceMetricsProvider>\n    </TopicsMetricsProvider>\n  );\n};\n\ntype ConnectedMetricsProps = {\n  onCreateTopic: () => void;\n  onClickClose: () => void;\n  isClosed: boolean;\n};\nconst ConnectedMetrics: VoidFunctionComponent<ConnectedMetricsProps> = ({\n  onCreateTopic,\n  onClickClose,\n  isClosed,\n}) => {\n  const { t } = useTranslation();\n  const kafkaInstanceMetrics = useKafkaInstanceMetrics();\n  const topicsMetrics = useTopicsMetrics();\n  const metricsKpi = useMetricsKpi();\n\n  switch (true) {\n    case kafkaInstanceMetrics.isInitialLoading ||\n      topicsMetrics.isInitialLoading ||\n      metricsKpi.isInitialLoading:\n      return <EmptyStateInitialLoading />;\n    case kafkaInstanceMetrics.isFailed &&\n      topicsMetrics.isFailed &&\n      topicsMetrics.isFailed:\n    case kafkaInstanceMetrics.isJustCreated &&\n      topicsMetrics.isJustCreated &&\n      metricsKpi.isJustCreated:\n      return <EmptyStateMetricsUnavailable />;\n    default:\n      return (\n        <MetricsLayout\n          metricsLagAlert={\n            <MetricsLagAlert onClickClose={onClickClose} isClosed={isClosed} />\n          }\n          topicsKpi={\n            <CardKpi\n              metric={metricsKpi.topics}\n              isLoading={metricsKpi.isInitialLoading || metricsKpi.isLoading}\n              name={t(\"metrics:metric_kpi_topics_name\")}\n              popover={t(\"metrics:metric_kpi_topics_description\")}\n            />\n          }\n          topicPartitionsKpi={\n            <PartitionCard\n              metric={metricsKpi.topicPartitions}\n              isLoading={metricsKpi.isInitialLoading || metricsKpi.isLoading}\n              topicPartitionsLimit={metricsKpi.topicPartitionsLimit}\n            />\n          }\n          consumerGroupKpi={\n            <CardKpi\n              metric={metricsKpi.consumerGroups}\n              isLoading={metricsKpi.isInitialLoading || metricsKpi.isLoading}\n              name={t(\"metrics:metric_kpi_consumerGroup_name\")}\n              popover={t(\"metrics:metric_kpi_consumerGroup_description\")}\n            />\n          }\n          diskSpaceMetrics={<ConnectedKafkaInstanceMetrics />}\n          topicMetrics={\n            <ConnectedTopicsMetrics onCreateTopic={onCreateTopic} />\n          }\n        />\n      );\n  }\n};\n\nconst ConnectedKafkaInstanceMetrics: VoidFunctionComponent = () => {\n  const {\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n    duration,\n    lastUpdated,\n    usedDiskSpaceMetrics,\n    clientConnectionsMetrics,\n    connectionAttemptRateMetrics,\n    diskSpaceLimit,\n    connectionsLimit,\n    connectionRateLimit,\n    onDurationChange,\n    onRefresh,\n  } = useKafkaInstanceMetrics();\n\n  return (\n    <CardKafkaInstanceMetrics\n      usedDiskMetrics={usedDiskSpaceMetrics}\n      clientConnectionsMetrics={clientConnectionsMetrics}\n      connectionAttemptRateMetrics={connectionAttemptRateMetrics}\n      duration={duration}\n      backendUnavailable={isFailed}\n      isInitialLoading={isInitialLoading}\n      isLoading={isLoading}\n      isRefreshing={isRefreshing}\n      isJustCreated={isJustCreated}\n      lastUpdated={lastUpdated}\n      onRefresh={onRefresh}\n      onDurationChange={onDurationChange}\n      diskSpaceLimit={diskSpaceLimit || 0}\n      connectionsLimit={connectionsLimit || 0}\n      connectionRateLimit={connectionRateLimit || 0}\n    />\n  );\n};\n\ntype ConnectedTopicsMetricsProps = {\n  onCreateTopic: () => void;\n};\nconst ConnectedTopicsMetrics: VoidFunctionComponent<\n  ConnectedTopicsMetricsProps\n> = ({ onCreateTopic }) => {\n  const {\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n    lastUpdated,\n    selectedTopic,\n    duration,\n    topics,\n    bytesIncoming,\n    bytesOutgoing,\n    bytesPerPartition,\n    incomingMessageRate,\n    onDurationChange,\n    onTopicChange,\n    onRefresh,\n  } = useTopicsMetrics();\n\n  return (\n    <CardTopicsMetrics\n      backendUnavailable={isFailed}\n      topics={topics}\n      incomingTopicsData={bytesIncoming}\n      outgoingTopicsData={bytesOutgoing}\n      partitions={bytesPerPartition}\n      incomingMessageRate={incomingMessageRate}\n      duration={duration}\n      isInitialLoading={isInitialLoading}\n      isLoading={isLoading}\n      isRefreshing={isRefreshing}\n      isJustCreated={isJustCreated}\n      lastUpdated={lastUpdated}\n      selectedTopic={selectedTopic}\n      onRefresh={onRefresh}\n      onSelectedTopic={onTopicChange}\n      onDurationChange={onDurationChange}\n      onCreateTopic={onCreateTopic}\n    />\n  );\n};\n","import { useSelector } from \"@xstate/react\";\nimport { useCallback, useContext } from \"react\";\nimport type { MetricsKpiMachineContext } from \"./machines\";\nimport { MetricsKpiContext } from \"./MetricsKpiProvider\";\n\ntype SelectorReturn = MetricsKpiMachineContext & {\n  isInitialLoading: boolean;\n  isRefreshing: boolean;\n  isLoading: boolean;\n  isFailed: boolean;\n  isJustCreated: boolean;\n};\n\nexport function useMetricsKpi() {\n  const { service } = useContext(MetricsKpiContext);\n\n  const {\n    topics,\n    topicPartitions,\n    topicPartitionsLimit,\n    consumerGroups,\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n  } = useSelector<typeof service, SelectorReturn>(\n    service,\n    useCallback(\n      (state) => ({\n        ...state.context,\n        isInitialLoading: state.hasTag(\"initialLoading\"),\n        isRefreshing: state.hasTag(\"refreshing\"),\n        isLoading: state.hasTag(\"loading\"),\n        isFailed: state.hasTag(\"failed\"),\n        isJustCreated: state.hasTag(\"justCreated\"),\n      }),\n      []\n    )\n  );\n\n  const onRefresh = useCallback(() => service.send(\"refresh\"), [service]);\n\n  return {\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n    topics,\n    topicPartitions,\n    consumerGroups,\n    topicPartitionsLimit,\n    onRefresh,\n  };\n}\n","import {\n  Button,\n  Card,\n  CardBody,\n  Flex,\n  FlexItem,\n  Modal,\n  ModalVariant,\n  PageSection,\n  Spinner,\n  Stack,\n  StackItem,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { FunctionComponent } from \"react\";\nimport { useState } from \"react\";\nimport \"./Settings.css\";\n// import { useAlert, AlertVariant } from \"@rhoas/app-services-ui-components\";\nimport type { SettingsStatus } from \"./types\";\n\nexport type SettingsProps = {\n  onSubmitReAuthentication: (\n    reauthenticationEnabled: boolean\n  ) => Promise<boolean>;\n  reauthenticationEnabled: boolean;\n};\n\nexport const Settings: FunctionComponent<SettingsProps> = ({\n  onSubmitReAuthentication,\n  reauthenticationEnabled,\n}) => {\n  const { t } = useTranslation(\"kafka\");\n  const { addAlert } = {\n    //TODO\n    addAlert: (args: { [key: string]: any }) => {\n      // TODO\n    },\n  };\n  //states\n  const [connectionStatus, setConnectionStatus] = useState<SettingsStatus>(\n    reauthenticationEnabled ? \"On\" : \"Off\"\n  );\n  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n\n  const onClose = () => {\n    setIsModalOpen(false);\n  };\n\n  const onChangeSwitch = (checked: boolean) => {\n    if (connectionStatus === \"On\") {\n      setIsModalOpen(true);\n    } else {\n      handleReAuthentication(checked);\n    }\n  };\n\n  const handleReAuthentication = (reAuthValue: boolean) => {\n    setConnectionStatus(reAuthValue ? \"TurningOn\" : \"TurningOff\");\n\n    onSubmitReAuthentication(reAuthValue)\n      .then((reauthentication) => {\n        setConnectionStatus(reauthentication ? \"On\" : \"Off\");\n\n        addAlert({\n          variant: \"success\",\n          title: t(\"settings.success_alert\", {\n            status: reauthentication ? \"on\" : \"off\",\n          }),\n        });\n      })\n      .catch(() => {\n        setConnectionStatus(!reAuthValue ? \"On\" : \"Off\");\n\n        addAlert({\n          variant: \"danger\",\n          title: t(\"settings.error_alert_title\"),\n          description: t(\"settings.error_alert_title_description\"),\n        });\n      });\n  };\n\n  const onTurnOff = () => {\n    setIsModalOpen(false);\n    handleReAuthentication(false);\n  };\n\n  return (\n    <PageSection isFilled={true} hasOverflowScroll={true}>\n      <Stack hasGutter>\n        <StackItem>\n          <Card>\n            <CardBody>{t(\"settings.kafka_instance_settings_label\")}</CardBody>\n          </Card>\n        </StackItem>\n        <StackItem>\n          <Card className={\"mas--settings__card\"}>\n            <CardBody>\n              <Flex flexWrap={{ default: \"nowrap\" }}>\n                <FlexItem grow={{ default: \"grow\" }}>\n                  <Flex>\n                    <FlexItem\n                      component={\"span\"}\n                      spacer={{ default: \"spacerSm\" }}\n                    >\n                      <strong>\n                        {t(\"settings.connection_re_authentication_label\")}\n                        {\":\"}\n                      </strong>\n                    </FlexItem>\n                    <FlexItem>\n                      {(() => {\n                        switch (connectionStatus) {\n                          case \"On\":\n                            return t(\n                              \"settings.Connection_re_authentication_states.on\"\n                            );\n                          case \"TurningOff\":\n                            return (\n                              <>\n                                <Spinner\n                                  size=\"md\"\n                                  aria-valuetext={t(\n                                    \"settings.Connection_re_authentication_states.turning_off\"\n                                  )}\n                                  aria-label={t(\n                                    \"settings.connection_re_authentication_label\"\n                                  )}\n                                />{\" \"}\n                                {t(\n                                  \"settings.Connection_re_authentication_states.turning_off\"\n                                )}\n                              </>\n                            );\n                          case \"Off\":\n                            return t(\n                              \"settings.Connection_re_authentication_states.off\"\n                            );\n                          case \"TurningOn\":\n                            return (\n                              <>\n                                <Spinner\n                                  size=\"md\"\n                                  aria-valuetext={\n                                    \"settings.Connection_re_authentication_states.turning_on\"\n                                  }\n                                  aria-label={t(\n                                    \"settings.connection_re_authentication_label\"\n                                  )}\n                                />{\" \"}\n                                {t(\n                                  \"settings.Connection_re_authentication_states.turning_on\"\n                                )}\n                              </>\n                            );\n                          default:\n                            return null;\n                        }\n                      })()}\n                    </FlexItem>\n                  </Flex>\n                </FlexItem>\n                <FlexItem>\n                  <Switch\n                    id=\"Connection-re-authentication-switch\"\n                    aria-label={t(\n                      \"settings.connection_re_authentication_label\"\n                    )}\n                    isChecked={\n                      connectionStatus === \"On\" ||\n                      connectionStatus === \"TurningOff\"\n                    }\n                    isDisabled={\n                      connectionStatus === \"TurningOff\" ||\n                      connectionStatus === \"TurningOn\"\n                    }\n                    onChange={onChangeSwitch}\n                  />\n                </FlexItem>\n                <Modal\n                  variant={ModalVariant.small}\n                  isOpen={isModalOpen}\n                  title={t(\"settings.warning_title\")}\n                  titleIconVariant={\"warning\"}\n                  actions={[\n                    <Button\n                      key={\"confirm\"}\n                      variant=\"primary\"\n                      onClick={onTurnOff}\n                    >\n                      {t(\"settings.turn_off_button_label\")}\n                    </Button>,\n                    <Button key={\"cancel\"} variant=\"link\" onClick={onClose}>\n                      {t(\"common:cancel\")}\n                    </Button>,\n                  ]}\n                  onClose={onClose}\n                >\n                  {t(\"settings.warning_description\")}\n                </Modal>\n              </Flex>\n            </CardBody>\n          </Card>\n        </StackItem>\n      </Stack>\n    </PageSection>\n  );\n};\n"],"names":["ControlPlaneRouteRoot","NewInstanceSegment","ControlPlaneSpecialSegments","ControlPlaneRoutePath","ControlPlaneNewInstancePath","ControlPlaneDeleteInstancePath","DrawerContext","createContext","DrawerProvider","children","match","useRouteMatch","Error","selectedInstance","params","id","includes","undefined","section","instance","useState","isExact","isExpanded","setIsExpanded","activeTab","setActiveTab","onClose","useRef","toggleExpanded","useCallback","newValue","prev","current","useEffect","value","useMemo","Provider","onTabChange","useDrawer","context","useContext","KafkaInstancesRoute","getUrlForInstance","history","useHistory","setActiveQuickStart","QuickStartContext","replace","labels","usePaginationSearchParams","page","perPage","setPagination","setPaginationQuery","resetPaginationQuery","namesChips","useURLSearchParamsChips","ownersChips","statusesChips","useSortableSearchParams","fields","isColumnSortable","sort","sortDirection","data","name","chips","owner","status","direction","onClearAllFilters","clearChained","openDrawer","tab","onDetailsClick","onConnectionsClick","onCreate","push","onDelete","onQuickstartGuide","instances","itemCount","count","names","owners","statuses","onPageChange","onSearchName","add","onRemoveNameChip","remove","onRemoveNameChips","clear","onSearchOwner","onRemoveOwnerChip","onRemoveOwnerChips","onSearchStatus","toggle","onRemoveStatusChip","onRemoveStatusChips","onChangeOwner","row","isRowSelected","onDetails","onConnection","onClickConnectionTabLink","onClickSupportLink","onInstanceLinkClick","canHaveInstanceLink","canOpenConnection","canChangeOwner","canDelete","CreateKafkaInstanceRoute","instancesHref","callbacks","auth","useChrome","getUsername","getUser","username","identity","user","Promise","reject","checkDeveloperAvailabilityQuery","standardQuotaQuery","providersWithRegionsQuery","getProvidersInfo","getProviderRegionsSizes","checkDeveloperAvailability","onAvailable","onUsed","onUnavailable","checkStandardQuota","onQuotaAvailable","onNoQuotaAvailable","onOutOfQuota","hasTrialQuota","remainingPrepaidQuota","remainingMarketplaceQuota","marketplaceSubscriptions","quota","fetchProvidersWithRegions","plan","providers","getStandardSizes","provider","region","providersInfo","providerInfo","find","p","getTrialSizes","standardSizes","length","displayName","trialSizes","standard","trial","useCreateKafkaCallbacks","createKafkaInstance","qsContext","onClickKafkaOverview","onClickQuickStart","onSuccess","onError","mutateAsync","onCancel","CreateKafkaInstance","isModalOpen","onClickContactUs","onLearnHowToAddStreamingUnits","onLearnMoreAboutSizes","subscriptionOptionsHref","document","location","href","appendTo","getElementById","body","DeleteKafkaInstanceRoute","isError","isDeleting","instanceName","ControlPlaneRoutes","Route","path","exact","DataPlaneRoutePath","DataPlaneTopicRoutePath","useDataPlaneGate","DataPlaneGate","Loading","DataPlaneHeaderConnected","activeSection","url","sectionsHref","dashboard","topics","consumer","permissions","settings","AclsRoute","PageSection","TopicsRoute","topicChips","partitions","adminUrl","filter","topicName","getUrlFortopic","onEdit","onSearchTopic","onCreateTopic","onRemoveTopicChip","onRemoveTopicChips","onTopicLinkClick","SettingsRoute","updateInstance","onSubmitReAuthentication","reauthenticationEnabled","updates","reauthentication_enabled","request","DashboardRoute","hasUserAlreadyClosedAlert","setHasUserAlreadyClosedAlert","onAlertClose","queryInstance","queryKpisMetrics","queryInstanceMetrics","queryTopicMetrics","queryTopics","getMetricsKpi","kpis","topicPartitionsLimit","maxPartitions","getKafkaInstanceMetrics","interval","duration","all","metrics","diskSpaceLimit","max_data_retention_size","bytes","connectionsLimit","connections","connectionRateLimit","connectionRate","getTopicsMetrics","selectedTopic","kafkaTopics","map","t","ConsumerGroupsRoute","consumerName","groupId","consumers","groups","onSearchConsumer","onRemoveConsumerChip","onRemoveConsumerChips","onViewPartition","onViewResetOffset","useTopicGate","instanceDetailsHref","topic","DataPlaneTopicHeaderConnected","messages","properties","schemas","instanceDetailHref","TopicConsumerGroupsRoute","TopicMessagesGroupsRoute","kafkaTopicMessagesFetchQuery","getMessages","partitionsCount","Cleanup","defaultFileDeleteDelay","defaultLogSegmentSize","defaultSegmentJitterTime","defaultSegmentTime","useTranslation","FormSection","title","titleElement","TextContent","Text","component","TextVariants","className","TextWithLabelPopover","fieldId","btnAriaLabel","fieldLabel","fieldValue","gibibyte","Number","to","popoverBody","popoverHeader","milliseconds","days","minute","Flush","defaultFlushIntervalMessages","defaultFlushIntervalTime","Message","defaultMaximumMessageBytes","defaultMessageTimestampType","defaultMaxMessageTimestampDiff","String","Replication","TopicAdvanceIndex","defaultIndexIntervalSize","defaultSegmentIndexSize","kibibytes","mebibytes","TopicAdvanceJumpLinks","canHaveDelete","SidebarPanel","variant","JumpLinks","isVertical","label","scrollableSelector","style","position","JumpLinksItem","TopicDetailView","deleteTopic","updateTopic","hasOverflowScroll","Sidebar","hasGutter","SidebarContent","PageGroup","padding","default","Split","SplitItem","isFilled","Form","toString","config","showUnlimited","Divider","Button","onClick","TopicPropertiesRoute","TopicSchemasRoute","chrome","processor2","entry","e","basename","srs","getToken","AuthContext","ConfigContext","apiBasePath","I18nProvider","lng","resources","en","common","srsTemporaryFixMe","debug","ScalprumComponent","appName","module","scope","ErrorComponent","processor","renderSchema","registry","version","registryId","TopicGate","DataPlaneRoutes","Switch","Redirect","from","InvalidObject","OverviewRoute","Routes","memo","updateDocumentTitle","on","register","notifications","unregister","event","console","dir","navId","basePath","getPath","QuickstartLoader","loaded","setLoaded","quickStarts","AssetsContext","showDrafts","onLoad","qs","set","init","errorDescriptionKey","middleware","CreatingStatuses","ReadyStatuses","DegradedStatuses","SuspendingStatuses","SuspendedStatuses","DeletingStatuses","ResumingStatuses","SimplifiedStatuses","creating","ready","degraded","suspended","deleting","resuming","suspending","RetentionTimeUnits","RetentionSizeUnits","unitsToBytes","BYTE","BigInt","KIBIBYTE","MEBIBYTE","GIBIBYTE","TEBIBYTE","unitsToMilliSecond","MILLISECOND","SECOND","MINUTE","HOUR","DAY","formattedRetentionTime","time","unit","hours","minutes","seconds","millisecondsToTime","formattedRetentionSize","size","bytesToMemorySize","tebibytes","gibibytes","stateMapping","DEAD","EMPTY","STABLE","UNKNOWN","COMPLETING_REBALANCE","PREPARING_REBALANCE","fetchKafkaMetrics","getMetricsByRangeQuery","response","safeMetrics","items","m","values","metric","persistentvolumeclaim","usedDiskSpaceMetrics","connectionAttemptRateMetrics","clientConnectionsMetrics","forEach","addAggregatedValuesTo","timestamp","valuesToQuery","field","comparison","v","trim","join","uiColumnMapping","createdAt","fetchKafkas","dataMapper","getKafkas","search","flatMap","s","Boolean","q","filtersToSearch","res","rawInstances","total","fetchKafkaKpis","getMetricsByInstantQuery","topicPartitions","consumerGroups","developerDefaults","type","preallocate","standardDefaults","topicTransformerFactory","d","cm","Object","fromEntries","c","key","configValueToMilliseconds","configValueToBytes","configValueToBoolean","configValueToNumber","defaultIfEmpty","defaultIfError","parseInt","JSON","parse","fetchTopicsMetrics","filteredMetrics","Array","Set","bytesIncoming","bytesOutgoing","bytesPerPartition","incomingMessageRate","partition","addAggregatedTotalBytesTo","metricsTopics","fetchTopics","getTopics","apiSizeToComponentSize","isDisabled","apiSize","display_name","quota_consumed","ingress","ingress_throughput_per_sec","egress","egress_throughput_per_sec","storage","Math","round","total_max_connections","max_connection_attempts_per_sec","max_partitions","messageSize","max_message_size","maturity_status","trialDurationHours","lifespan_seconds","fetchProviderRegions","getCloudProviderRegions","instanceType","enabled","capacity","some","instance_type","r","max_capacity_reached","available_sizes","resourceName","isStandardQuota","related_resources","billing_model","isMarketplaceQuota","ReactQueryDevtoolsProduction","lazy","then","ReactQueryDevtools","ApiContext","ApiProvider","showDevTools","QueryClientProvider","client","initialIsOpen","Suspense","fallback","useApiConfiguration","masQueries","_root","organization","entity","available","subentity","developerAvailability","standardAvailability","kafkaQueries","list","details","topicMessages","kpi","providerQueries","limits","developer","accessToken","kafkasFleet","DefaultApi","Configuration","account","AppServicesApi","TopicsApi","GroupsApi","records","RecordsApi","kafkaRequestToKafkaInstanceEnhanched","developerPlanInstanceLimits","standardPlanInstanceLimits","enhancedInstance","billing","created_at","Date","toISOString","expiryDate","expires_at","cloud_provider","accepted","preparing","provisioning","failed","deprovision","updatedAt","updated_at","bootstrapUrl","bootstrap_server_host","admin_api_server_url","marketplaceForBilling","ms","subscriptions","billing_cloud_account_id","marketplace","subscription","warn","thisInstanceLimits","l","size_id","useKafkaInstanceTransformer","getStandardQuotaQuery","useStandardQuotaFetchQuery","useProvidersWithRegionsFetchQuery","useProviderRegionSizesFetchQuery","standardQuota","standardPlanLimitsQuery","developerPlanLimitsQuery","standardPlanLimits","developerPlanLimits","useKafka","refetchInterval","api","useQuery","queryKey","queryFn","getKafkaById","APIErrorCodes","useKafkas","queryClient","args","i","setQueryData","useTopic","getTopic","fetchTopic","useTopics","useConsumerGroups","getConsumerGroups","state","activeConsumers","laggingPartitions","unassignedPartitions","fetchConsumerGroups","useDeveloperInstanceAvailabilityFetchQuery","fetchQuery","staleTime","Infinity","k","useKafkaFetchQuery","useKafkaKpisFetchQuery","useKafkaMetricsFetchQuery","useTopicsMetricsFetchQuery","useTopicsFetchQuery","useMessagesFetchQuery","consumeRecords","offset","limit","headers","fetchMessages","kms","regions","regionInfo","availableSizes","sizes","instance_types","bind","fetchProviderRegionSizes","getInstanceTypesByCloudProviderAndRegion","getCloudProviders","allProviders","firstProvider","defaultProvider","skipCache","ams","fetchOrganization","apiAccountsMgmtV1CurrentAccountGet","apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet","organizationId","quotaResponse","statusText","standardQuotas","resource_name","product","prepaidQuota","marketplaceQuotas","allowed","consumed","reduce","agg","unaggregatedSubscriptions","cloud_accounts","subscriptionMarketplaces","cloud_provider_id","cloud_account_id","useCreateKafkaMutation","useMutation","props","kafkaRequest","sizeId","createKafka","isServiceApiError","code","DUPLICATE_INSTANCE_NAME","INTERNAL_CAPACITY_ERROR","INSUFFICIENT_QUOTA","error","invalidateQueries","UNAUTHORIZED_USER","TRIAL_USED","FAILED_TO_CHECK_QUOTA","OWNER_DOES_NOT_EXIST","useDeleteKafkaMutation","deleteKafkaById","message","useUpdateKafkaMutation","updateKafkaById","_","KafkaInstancesSortableColumns","KafkaTopicsSortableColumns","TopicOrderKey","KafkaConsumerGroupSortableColumns","ConsumerGroupOrderKey","METRICS_LAG_ALERT","isReactQueryDevToolsEanbled","localStorage","getItem","metricsIsLagAlertsDismissed","metricsDismissLagAlerts","setItem","ConsumerGroupEmptyState","EmptyState","EmptyStateVariant","EmptyStateIcon","icon","Title","headingLevel","TitleSizes","EmptyStateBody","Columns","ConsumerGroups","isFiltered","TableView","TableVariant","tableOuiaId","ariaLabel","columns","renderHeader","column","Th","info","popover","popoverProps","headerContent","renderCell","Td","dataLabel","renderActions","ActionsColumn","filters","onSearch","onRemoveChip","onRemoveGroup","validate","test","errorMessage","emptyStateNoData","emptyStateNoResults","EmptyStateNoResults","ControlPlaneHeader","PageSectionVariants","hasShadowBottom","stickyOnBreakpoint","Level","LevelItem","onProviderChange","selectedProvider","defaultRegion","capabilities","form","creationError","tsTypes","schema","events","services","initial","states","verifyAvailability","always","cond","target","overQuota","tags","instanceUnavailable","regionsUnavailable","configuring","unsubmitted","submitted","create","description","invalid","valid","fieldInvalid","submit","saving","createSuccess","createError","actions","saved","empty","nameChange","providerChange","regionChange","idle","disabled","waitingForQuota","loading","invoke","src","onDone","sizeChange","billingChange","prepaidOnly","singleSubscription","onlySubscriptions","selectSubscription","prepaidAndSubscriptions","prepaid","selectPrepaid","setInitialContext","availableProviders","setName","setProvider","setRegion","setSize","setSizes","smallestSize","a","b","resetCreationErrorMessage","_context","setCreationError","triggerSave","triggerSubmit","triggerBillingChange","setBillingToPrepaid","setBillingToSubscription","unsetSubscription","guards","isOverQuota","instanceAvailability","isInstanceUnavailable","isRegionsUnavailable","nameIsEmpty","nameIsValid","providerIsValid","selectedProviderInfo","regionIsValid","noProviderOrRegion","noSizes","emptySizes","sizeIsDisabled","billingRequiredButNotSelected","meta","hasTag","sizeIsOverQuota","availableQuota","didProviderChange","didRegionChange","didSizeChange","onlyPrepaid","matchesSelectedProviderOrRHMarketplaceAndHasQuota","hasPrepaidQuota","noSelectedProvider","trialUsed","trialUnavailable","isTrialUsed","isTrialUnavailable","noProviderAndRegion","save","complete","setDeveloperAvailable","setDeveloperUnavailable","setDeveloperUsed","setStandardAvailable","setStandardOutOfQuota","setStandardUnavailable","setProviders","setProvidersOrRegionsUnavailable","setCapabilities","notifyCreateErrorToStandardPlan","notifyCreateErrorToTrialPlan","LogoAWS","URL","LogoAzure","LogoGCP","LogoRedhat","AWSLogo","alt","height","AzureLogo","GCPLogo","KafkaInstanceActions","rowData","hackZIndex","customChild","DropdownGroup","tooltipProps","content","tooltip","pointerEvents","cursor","isSeparator","actionProps","zIndex","DataPlaneHeader","actionsProps","Breadcrumb","ouiaId","BreadcrumbItem","render","Link","isActive","Nav","NavList","NavItem","borderTop","DataPlaneTopicHeader","DeleteKafkaInstance","DeleteModal","confirmationValue","Trans","ns","i18nKey","components","kafka","it","resolve","delete","useKafkaLabels","statusesSimplified","aws","gcp","azure","providerRegions","DetailsTabAlert","hoursLeft","differenceInHours","now","Alert","FormatDate","date","format","isInline","KafkaDetailsTab","kafkaVersion","renderTextListItem","TextListItem","TextListItemVariants","Skeleton","width","screenreaderText","contentName","TextList","TextListVariants","SuspendedConnection","color","KafkaConnectionTabP2","isKafkaSuspended","isKafkaPending","externalServer","tokenEndPointUrl","linkToServiceAccount","linkToAccessTab","adminAPIUrl","kafkaFleetManagerUrl","showCreateServiceAccountModal","fontSize","ClipboardCopy","textAriaLabel","isReadOnly","ButtonVariant","ExpandableSection","toggleContent","onToggle","Popover","bodyContent","testId","Label","KafkaInstanceDrawer","DrawerPanelContent","KafkaInstanceDrawerPanel","Drawer","DrawerContent","panelContent","DrawerContentBody","handleSelect","DrawerHead","DrawerActions","DrawerCloseButton","DrawerPanelBody","Tabs","activeKey","onSelect","Tab","eventKey","TabTitleText","parseISO","getExternalServer","getAdminServerUrl","endsWith","StatusLabel","forwardRef","ref","showWarning","showError","withPopover","buttonVariant","Spinner","isPlain","Flex","FlexItem","HelperText","HelperTextItem","PopoverStatusOrder","KafkaToPopoverMapping","StatusProgressStepper","currentStatus","currentStep","findIndex","getVariant","index","ProgressStepper","ProgressStep","titleId","isCurrent","StatusPopoverContent","Stack","StackItem","StatusPopover","initialOpen","reference","isVisible","setIsVisible","handleClickConnectionTabLink","handleClickSupportLink","shouldOpen","shouldClose","enableFlip","SuspendedPopover","alertSeverityVariant","headerIcon","KafkaInstanceStatus","warningAfterMinutes","errorAfterMinutes","popoverStatus","alert","setAlert","labelRef","checkCreatedAt","elapsed","differenceInMinutes","useInterval","EmptyStateNoInstances","KafkaInstances","timeCreatedDate","instanceLinkEnable","isAriaDisabled","changeOwnerEnabled","deleteEnabled","openConnectionEnabled","onRowClick","isRowDeleted","toolbarBreakpoint","options","isPrimary","DateTimePicker","onChange","timeSelected","setIsTimeSelected","InputGroup","DatePicker","formatInTimeZone","newDate","formatISO","TimePicker","hour","__","isValid","setHours","setMinutes","FilterGroup","epoch","onOffsetChange","onTimestampChange","onEpochChange","onLatest","currentCategory","setCurrentCategory","isOpen","setIsOpen","latest","ToolbarItem","Dropdown","DropdownToggle","DropdownPosition","dropdownItems","DropdownItem","autoFocus","DropdownSeparator","TextInput","placeholder","newOffset","isInteger","LimitSelector","InputGroupText","hidden","Select","selections","idx","SelectOption","isSameMessage","m1","m2","stringify","beautifyUnknownValue","PrincipalType","NoDataCell","columnLabel","MessageDetails","defaultTab","isResizable","minSize","MessageDetailsBody","messageKey","DescriptionList","isHorizontal","isCompact","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","defaultActiveKey","isCode","random","NoDataEmptyState","onRefresh","NoResultsEmptyState","onReset","OffsetRange","min","max","PartitionSelector","handleChange","valueAsNum","allPartitions","fill","makeOptions","slice","hiddenOptionsCount","handleFilter","SelectVariant","typeAheadAriaLabel","maxHeight","onFilter","isInputValuePersisted","placeholderText","onClear","InputGroupTextVariant","UnknownValuePreview","truncateAt","shouldTruncate","substring","truncate","preview","truncated","spaceItems","stopPropagation","MessageBrowserMachine","selectedMessage","initialLoading","fetchSuccess","fetchFail","verifyMessages","noData","refresh","pristine","dirty","shouldSearch","setPartition","setEpoch","setTimestamp","setOffset","setLatest","setLimit","selectMessage","deselectMessage","refreshing","setMessages","offsetMin","offsetMax","lastUpdated","noMessages","selectedMessageNotAvailable","areFiltersChanged","columnWidths","KafkaMessageBrowser","useMachine","devTools","send","catch","KafkaMessageBrowserConnected","isFirstLoad","matches","isNoData","isRefreshing","requiresSearch","filterOffset","filterEpoch","filterTimestamp","setDefaultTab","columnLabels","OuterScrollContainer","Toolbar","ToolbarContent","ToolbarToggleGroup","toggleIcon","breakpoint","ToolbarGroup","RefreshButton","alignment","InnerScrollContainer","ResponsiveTable","expectedLength","colIndex","keys","KafkaInstanceCapacityTable","columnNames","firstStreamingUnit","secondStreamingUnit","TableComposable","Thead","Tr","Tbody","table","MarketingPageHero","tagLine","description2","heroImage","heroImageSize","heroImageCanRepeat","heroImagePositionY","cta","MarketingPageSection","isWidthLimited","KafkaPageV3","Grid","lg","Card","CardHeader","CardHeaderMain","CardTitle","CardBody","CardFooter","bold","alignSelf","justifyContent","flex","xl","orientation","EmptyStateNoTopic","KafkaTopics","DurationOptions","EmptyStateInitialLoading","EmptyStateMetricsUnavailable","MetricsLayout","metricsLagAlert","topicsKpi","topicPartitionsKpi","consumerGroupKpi","diskSpaceMetrics","topicMetrics","GridItem","sm","CardBodyLoading","Bullseye","isSVG","timeIntervalsMapping","Last5minutes","ticks","showDate","Last15minutes","Last30minutes","Last1hour","Last3hours","Last6hours","Last12hours","Last24hours","Last2days","Last7days","chartHeight","chartPadding","bottom","left","right","top","ChartSkeletonLoader","useChartWidth","containerRef","setWidth","handleResize","clientWidth","useLayoutEffect","window","addEventListener","removeEventListener","formatBytes","units","shouldShowDate","timeDuration","dateToChartValue","fromUnixTime","timestampsToTicks","timestamps","allTimestamps","mostRecentTs","sub","getTime","ChartLinearWithOptionalLimit","chartName","xLabel","yLabel","usageLimit","formatValue","isLoading","emptyState","itemsPerRow","lineLabel","limitLabel","legendData","symbol","chart_color_black_500","chart_color_blue_300","areaColor","softLimitColor","chartData","area","softLimit","entries","x","y","tickValues","getChartData","hasMetrics","Chart","ariaTitle","containerComponent","ChartVoronoiContainer","datum","constrainToVisibleArea","legendPosition","legendComponent","ChartLegend","themeColor","ChartTheme","legendAllowWrap","ChartAxis","C","tickFormat","dependentAxis","ChartGroup","ChartArea","ChartThreshold","stroke","colors","chart_color_cyan_300","ChartLogSizePerPartition","dataMap","ChartPopover","ChartTotalBytes","incomingTopicsData","outgoingTopicsData","incomingTopic","outgoingTopic","incomingTopicName","outgoingTopicName","incomingLine","metricsToLine","line","outgoingLine","chart_color_green_300","getBytesChartData","tickCount","ChartLine","EmptyStateNoMetricsData","EmptyStateNoMetricsDataForSelection","EmptyStateNoTopics","EmptyStateNoTopicSelected","DurationOptionsMap","FilterByTime","keyText","disableToolbar","onDurationChange","isTimeSelectOpen","setIsTimeSelectOpen","ariaId","selection","mapping","SelectGroup","timeOptions","widths","md","FilterByTopic","topicList","onSetSelectedTopic","isTopicSelectOpen","setIsTopicSelectOpen","selectKey","setSelectKey","allTopicsLabel","topicOptions","textInput","filteredTopics","indexOf","isGrouped","hasInlineFilter","ToolbarRefresh","ToolbarTopicsMetrics","onSetTimeDuration","CardTopicsMetrics","backendUnavailable","isInitialLoading","isJustCreated","onSelectedTopic","noTopics","selectedTopicNotInList","chartEmptyState","TotalBytesTitle","IncomingMessageRate","PartitionSizeTitle","ToolbarKafkaInstanceMetric","CardKafkaInstanceMetrics","usedDiskMetrics","ChartTitle","helperText","CardKpi","isFullHeight","shape","MetricsLagAlert","isClosed","onClickClose","actionClose","AlertActionCloseButton","PartitionCard","isExpandable","AlertVariant","role","apiState","failure","after","KafkaInstanceMetricsMachine","fetchFailures","callApi","criticalFail","justCreated","withResponse","selectDuration","setFetchTimestamp","setMetrics","incrementRetries","resetRetries","setDuration","canRetryFetching","TopicsMetricsMachine","selectTopic","setTopic","MetricsKpiMachine","KafkaInstanceMetricsContext","KafkaInstanceMetricsProvider","service","callback","results","MetricsKpiContext","MetricsKpiProvider","TopicsMetricsContext","TopicsMetricsProvider","useKafkaInstanceMetrics","isFailed","useTopicsMetrics","onTopicChange","localeCompare","Metrics","ConnectedMetrics","kafkaInstanceMetrics","topicsMetrics","metricsKpi","useMetricsKpi","ConnectedKafkaInstanceMetrics","ConnectedTopicsMetrics","Settings","connectionStatus","setConnectionStatus","setIsModalOpen","handleReAuthentication","reAuthValue","reauthentication","flexWrap","grow","spacer","isChecked","checked","Modal","ModalVariant","titleIconVariant"],"sourceRoot":""}