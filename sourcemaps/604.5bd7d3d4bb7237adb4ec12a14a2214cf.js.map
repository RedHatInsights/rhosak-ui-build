{"version":3,"file":"js/604.167d1afbd8f672973d47.js","mappings":"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","sources":["webpack:///./src/routes/control-plane/routesConsts.ts","webpack:///./src/routes/control-plane/DrawerProvider.tsx","webpack:///./src/routes/RedirectOnGateError.tsx","webpack:///./src/useUserControlGate.tsx","webpack:///./src/routes/control-plane/routes/useKafkaInstancesTable.ts","webpack:///./src/routes/control-plane/routes/KafkaInstancesRoute.tsx","webpack:///./src/routes/control-plane/routes/useSelfTermsReviewGate.tsx","webpack:///./src/routes/control-plane/routes/CreateKafkaInstanceRoute.tsx","webpack:///./src/routes/control-plane/routes/useCreateKafkaCallbacks.ts","webpack:///./src/routes/control-plane/routes/CreateDedicatedKafkaInstanceRoute.tsx","webpack:///./src/routes/control-plane/routes/useCreateDedicatedKafkaCallbacks.ts","webpack:///./src/useAlerts.ts","webpack:///./src/routes/control-plane/useControlPlaneGate.tsx","webpack:///./src/routes/control-plane/routes/DeleteKafkaInstanceRoute.tsx","webpack:///./src/routes/control-plane/routes/TermsAndConditionsRoute.tsx","webpack:///./src/routes/control-plane/routes/ChangeOwnerRoute.tsx","webpack:///./src/routes/control-plane/routes/ConnectedControlPlaneHeader.tsx","webpack:///./src/routes/control-plane/routes/DedicatedKafkaInstancesRoute.tsx","webpack:///./src/routes/control-plane/DedicatedControlPlaneRoutes.tsx","webpack:///./src/routes/control-plane/LegacyControlPlaneRoutes.tsx","webpack:///./src/routes/control-plane/useDedicatedGate.tsx","webpack:///../../packages/consoledot-api/src/queries/useStandardQuota.ts","webpack:///./src/routes/control-plane/ControlPlaneRoutes.tsx","webpack:///./src/routes/control-plane/routes/DedicatedClustersRoute.tsx","webpack:///./src/routes/data-plane/routesConsts.ts","webpack:///./src/routes/data-plane/useDataPlaneGate.tsx","webpack:///./src/routes/data-plane/routes/DataPlaneHeaderConnected.tsx","webpack:///./src/routes/data-plane/routes/PermissionsRoute.tsx","webpack:///./src/routes/data-plane/routes/TopicsRoute.tsx","webpack:///./src/routes/data-plane/routes/SettingsRoute.tsx","webpack:///./src/routes/data-plane/routes/DashboardRoute.tsx","webpack:///./src/routes/data-plane/routes/ConsumerGroupsRoute.tsx","webpack:///./src/routes/data-plane/useTopicGate.tsx","webpack:///./src/routes/data-plane/routes/DataPlaneTopicHeaderConnected.tsx","webpack:///./src/routes/data-plane/routes/TopicConsumerGroupsRoute.tsx","webpack:///./src/routes/data-plane/routes/TopicMessagesRoute.tsx","webpack:///./src/routes/data-plane/routes/TopicPropertiesRoute.tsx","webpack:///./src/routes/data-plane/routes/TopicSchemasRoute.tsx","webpack:///./src/routes/data-plane/useConsumerGroupGate.tsx","webpack:///./src/routes/data-plane/routes/ConsumerGroupDeleteRoute.tsx","webpack:///./src/routes/data-plane/routes/ConsumerGroupResetOffsetRoute.tsx","webpack:///./src/routes/data-plane/routes/ConsumerGroupViewPartitionRoute.tsx","webpack:///./src/routes/data-plane/useTopicConsumerGroupGate.tsx","webpack:///./src/routes/data-plane/routes/TopicConsumerGroupDeleteRoute.tsx","webpack:///./src/routes/data-plane/routes/TopicConsumerGroupResetOffsetRoute.tsx","webpack:///./src/routes/data-plane/routes/TopicConsumerGroupViewPartitionRoute.tsx","webpack:///../../packages/ui/src/components/DeleteKafkaTopic/DeleteKafkaTopic.tsx","webpack:///./src/routes/data-plane/routes/TopicDeleteRoute.tsx","webpack:///./src/routes/data-plane/routes/TopicEditPropertiesRoute.tsx","webpack:///./src/routes/data-plane/routes/PermissionsEditRoute.tsx","webpack:///./src/routes/data-plane/routes/PermissionsSelectAccountRoute.tsx","webpack:///./src/routes/data-plane/routes/TopicCreateRoute.tsx","webpack:///./src/routes/data-plane/DataPlaneRoutes.tsx","webpack:///./src/routes/overview/OverviewRoute.tsx","webpack:///./src/routes/Routes.tsx","webpack:///./src/App.tsx","webpack:///./src/QuickstartLoader.tsx","webpack:///./src/store/index.ts","webpack:///../../packages/consoledot-api/src/ApiProvider.tsx","webpack:///../../packages/consoledot-api/src/fetchers/fetchClustersMeta.ts","webpack:///../../packages/consoledot-api/src/transformers/consumerGroupTransformer.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchConsumerGroup.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchConsumerGroups.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchDedicatedClusters.ts","webpack:///../../packages/consoledot-api/src/transformers/dedicatedClusterTransformer.ts","webpack:///../../packages/consoledot-api/src/utilsAndConstants.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchDedicatedQuota.ts","webpack:///../../packages/consoledot-api/src/transformers/apiSizeToComponentSize.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchDedicatedClusterSizes.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchKafkaKpis.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchKafkaMetrics.ts","webpack:///../../packages/consoledot-api/src/fetchers/valuesToQuery.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchKafkas.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchMessages.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchOrganization.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchProviderRegionSizes.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchProvidersWithRegions.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchStandardQuota.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchTopic.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchTopics.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchTopicsMetrics.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchUserAccounts.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchPermissions.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchServiceAccounts.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchSelfTermsReview.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useDedicatedClusterSizesFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useClustersMetaFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useDedicatedClustersFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useDedicatedQuotaFetchQuery.ts","webpack:///../../packages/consoledot-api/src/queries/useConsumerGroup.ts","webpack:///../../packages/consoledot-api/src/queries/useConsumerGroups.ts","webpack:///../../packages/consoledot-api/src/queries/useCreateInstance.ts","webpack:///../../packages/consoledot-api/src/queries/useDedicatedClusters.ts","webpack:///../../packages/consoledot-api/src/transformers/kafkaRequestToKafkaInstanceEnhanched.ts","webpack:///../../packages/consoledot-api/src/queries/useKafkaInstanceTransformer.ts","webpack:///../../packages/consoledot-api/src/queries/useKafka.ts","webpack:///../../packages/consoledot-api/src/queries/useKafkas.ts","webpack:///../../packages/consoledot-api/src/queries/useTopic.ts","webpack:///../../packages/consoledot-api/src/queries/useTopics.ts","webpack:///../../packages/consoledot-api/src/queries/useUserAccounts.ts","webpack:///../../packages/consoledot-api/src/queries/useAcls.ts","webpack:///../../packages/consoledot-api/src/queries/useServiceAccounts.ts","webpack:///../../packages/consoledot-api/src/queries/useUser.ts","webpack:///../../packages/consoledot-api/src/queries/useSSOProvider.ts","webpack:///../../packages/consoledot-api/src/queries/useSelfTermsReview.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useDeveloperInstanceAvailabilityFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useKafkaFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useKafkaKpisFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useKafkaMetricsFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useMessagesFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useProviderRegionSizesFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useProvidersWithRegionsFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useStandardQuotaFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useTopicsFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useTopicsMetricsFetchQuery.ts","webpack:///../../packages/consoledot-api/src/mutations/useCreateDedicatedKafkaMutation.ts","webpack:///../../packages/consoledot-api/src/mutations/useCreateKafkaMutation.ts","webpack:///../../packages/consoledot-api/src/mutations/useDeleteKafkaMutation.ts","webpack:///../../packages/consoledot-api/src/mutations/useDeleteTopicMutation.ts","webpack:///../../packages/consoledot-api/src/mutations/useUpdateKafkaMutation.ts","webpack:///../../packages/consoledot-api/src/mutations/useDeleteConsumerGroupMutation.ts","webpack:///../../packages/consoledot-api/src/mutations/useResetConsumerGroupMutation.ts","webpack:///../../packages/consoledot-api/src/mutations/useDeletePermissionsMutation.ts","webpack:///../../packages/consoledot-api/src/mutations/useUpdatePermissionsMutation.ts","webpack:///../../packages/consoledot-api/src/mutations/useCreateTopicMutation.ts","webpack:///../../packages/consoledot-api/src/mutations/useUpdateTopicMutation.ts","webpack:///../../packages/consoledot-api/src/types.ts","webpack:///../../packages/consoledot-api/src/queryKeys.ts","webpack:///../../packages/consoledot-api/src/transformers/topicTransformer.ts","webpack:///../../packages/consoledot-api/src/useApi.ts","webpack:///../../packages/local-storage-helpers/index.ts","webpack:///../../packages/ui-models/src/models/kafka.ts","webpack:///../../packages/ui/src/components/KafkaInstances/components/EmptyStateNoDedicatedEntitlement.tsx","webpack:///../../packages/ui/src/components/KafkaInstances/components/EmptyStateNoDedicatedInstances.tsx","webpack:///../../packages/ui/src/components/KafkaInstances/components/EmptyStateNoInstances.tsx","webpack:///../../packages/ui/src/components/KafkaInstances/components/EmptyStateNoResults.tsx","webpack:///../../packages/ui/src/components/ConsumerGroups/components/ConsumerGroupPopover.tsx","webpack:///../../packages/ui/src/components/ConsumerGroups/components/ConsumerGroupState.tsx","webpack:///../../packages/ui/src/components/ConsumerGroups/components/ConsumerGroupByKafka.tsx","webpack:///../../packages/ui/src/components/ConsumerGroups/components/ConsumerGroupByTopic.tsx","webpack:///../../packages/ui/src/components/ConsumerGroups/components/ConsumerGroupDetails.tsx","webpack:///../../packages/ui/src/components/ConsumerGroups/components/ConsumerGroupEmptyState.tsx","webpack:///../../packages/ui/src/components/ConsumerGroups/components/OffsetSelect.tsx","webpack:///../../packages/ui/src/components/ConsumerGroups/components/TopicSelect.tsx","webpack:///../../packages/ui/src/components/ConsumerGroups/components/ConsumerGroupResetOffset.tsx","webpack:///../../packages/ui/src/components/ConsumerGroups/components/DeleteConsumerGroup.tsx","webpack:///../../packages/ui/src/components/ConsumerGroups/components/ConsumerGroupDrawer.tsx","webpack:///../../packages/ui/src/hooks/useKafkaLabels.ts","webpack:///../../packages/ui/src/hooks/useTopicLabels.ts","webpack:///../../packages/ui/src/hooks/useConsumerGroupLabels.ts","webpack:///../../packages/ui/src/hooks/useDedicatedClusterLabels.ts","webpack:///../../packages/ui/src/hooks/useXStateInspector.tsx","webpack:///../../packages/ui/src/components/ConsumerGroups/ConsumerGroups.tsx","webpack:///../../packages/ui/src/components/ControlPlaneHeader.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/machines/shared.ts","webpack:///../../packages/ui/src/components/CreateKafkaInstance/machines/StandardPlanMachine.ts","webpack:///../../packages/ui/src/components/CreateKafkaInstance/machines/TrialPlanMachine.ts","webpack:///../../packages/ui/src/components/CreateKafkaInstance/machines/CreateKafkaInstanceMachine.ts","webpack:///../../packages/ui/src/components/CreateKafkaInstance/machines/CreateKafkaInstanceProvider.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/components/BillingHelp.tsx","webpack:///../../packages/ui/src/components/Logos/images.ts","webpack:///../../packages/ui/src/components/Logos/AWSLogo.tsx","webpack:///../../packages/ui/src/components/Logos/AzureLogo.tsx","webpack:///../../packages/ui/src/components/Logos/GCPLogo.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/components/BillingTiles.tsx","webpack:///../../packages/ui/src/components/Logos/RedhatLogo.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/components/CloudProviderTiles.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/components/CloudRegionsSelect.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/components/FieldAZ.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/components/FieldBillingTiles.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/components/FieldCloudProvider.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/components/FieldCloudRegion.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/components/FieldInstanceName.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/components/FieldSizeHelperText.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/components/FieldSizeHelperTextOverQuota.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/components/FieldSizeHelperTextTrial.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/components/FieldSize.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/components/FormAlerts.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/components/InstanceInfo.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/components/InstanceInfoSkeleton.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/components/ModalAlertsLoading.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/components/ModalAlertsStandardPlan.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/components/ModalAlertsDedicatedPlan.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/components/ModalAlertsSystemUnavailable.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/components/ModalAlertsTrialPlan.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/LoadingForm.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/machines/DedicatedPlanMachine.ts","webpack:///../../packages/ui/src/components/CreateKafkaInstance/machines/CreateDedicatedKafkaInstanceMachine.ts","webpack:///../../packages/ui/src/components/CreateKafkaInstance/machines/CreateDedicatedKafkaInstanceProvider.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/machines/useCreateKafkaInstance.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/machines/useCreateDedicatedKafkaInstance.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/machines/useStandardPlan.ts","webpack:///../../packages/ui/src/components/CreateKafkaInstance/machines/useTrialPlan.ts","webpack:///../../packages/ui/src/components/CreateKafkaInstance/machines/useDedicatedPlan.ts","webpack:///../../packages/ui/src/components/CreateKafkaInstance/StandardInstanceForm.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/TrialInstanceForm.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/CreateKafkaInstance.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/components/DedicatedClusterTiles.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/components/FieldDedicatedCluster.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/DedicatedInstanceForm.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/CreateDedicatedKafkaInstance.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceActions.tsx","webpack:///../../packages/ui/src/components/DataPlaneHeader.tsx","webpack:///../../packages/ui/src/components/DataPlaneTopicHeader.tsx","webpack:///../../packages/ui/src/components/DedicatedClusters/components/EmptyStateNoDedicatedClusters.tsx","webpack:///../../packages/ui/src/components/DedicatedClusters/DedicatedClusters.tsx","webpack:///../../packages/ui/src/components/DeleteKafkaInstance/DeleteKafkaInstance.tsx","webpack:///../../packages/ui/src/components/I18nProvider.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceDrawer/components/DetailsTabAlert.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceDrawer/components/KafkaDetailsTab.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceDrawer/components/SuspendedConnection.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceDrawer/components/KafkaConnectionTabP2.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceDrawer/components/SampleCodeSnippet.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceDrawer/components/CodeSnippets.ts","webpack:///../../packages/ui/src/components/KafkaInstanceDrawer/components/KafkaSampleCode.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceDrawer/KafkaInstanceDrawer.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/components/StatusLabel.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/types.ts","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/components/StatusProgressStepper.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/components/StatusPopoverContent.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/components/StatusPopover.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/components/SuspendedPopover.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/KafkaInstanceStatus.tsx","webpack:///../../packages/ui/src/components/KafkaInstances/KafkaInstances.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/DateTimePicker.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/FilterGroup.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/LimitSelector.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/utils.ts","webpack:///../../packages/ui/src/components/KafkaTopics/types.ts","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/NoDataCell.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/MessageDetails.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/NoDataEmptyState.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/NoResultsEmptyState.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/OffsetRange.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/PartitionSelector.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/UnknownValuePreview.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/MessageBrowserMachine.ts","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/KafkaMessageBrowser.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceCapacityTable.tsx","webpack:///../../packages/ui/src/components/MarketingPage.tsx","webpack:///../../packages/ui/src/components/KafkaPageV3.tsx","webpack:///../../packages/ui/src/components/KafkaTopics/components/EmptyStateNoTopic.tsx","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/types.ts","webpack:///../../packages/ui/src/components/KafkaTopics/KafkaTopics.tsx","webpack:///../../packages/ui/src/components/Metrics/types.ts","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/components/PermissionsDropdown.tsx","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/components/ResourceTypeLabel.tsx","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/components/Cells.tsx","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/components/EmptyPermissionsTable.tsx","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/components/PermissionsTable.tsx","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/components/SelectAccount.tsx","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/components/ResourceName.tsx","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/components/ResourceOperation.tsx","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/components/ResourcePermission.tsx","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/components/ResourcePrefixRule.tsx","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/components/ResourceType.tsx","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/components/ShortcutsTableHead.tsx","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/components/KafkaInstanceManualPermissions.tsx","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/components/AssignPermissionsManual.tsx","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/components/ProduceTopicRow.tsx","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/components/ConsumeTopicShortcut.tsx","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/components/ManageAccessShortcut.tsx","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/components/ProduceTopicShortcut.tsx","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/components/AssignPermissions.tsx","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/components/PreCancelModal.tsx","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/components/ReviewPermissionsTable.tsx","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/components/ViewAccountDetails.tsx","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/utils.ts","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/components/EditPermissions.tsx","webpack:///../../packages/ui/src/components/Metrics/components/EmptyStateInitialLoading.tsx","webpack:///../../packages/ui/src/components/Metrics/components/EmptyStateMetricsUnavailable.tsx","webpack:///../../packages/ui/src/components/Metrics/components/MetricsLayout.tsx","webpack:///../../packages/ui/src/components/Metrics/components/CardBodyLoading.tsx","webpack:///../../packages/ui/src/components/Metrics/consts.ts","webpack:///../../packages/ui/src/components/Metrics/components/ChartSkeletonLoader.tsx","webpack:///../../packages/ui/src/components/Metrics/components/useChartWidth.tsx","webpack:///../../packages/ui/src/components/Metrics/components/utils.ts","webpack:///../../packages/ui/src/components/Metrics/components/ChartLinearWithOptionalLimit.tsx","webpack:///../../packages/ui/src/components/Metrics/components/ChartLogSizePerPartition.tsx","webpack:///../../packages/ui/src/components/Metrics/components/ChartPopover.tsx","webpack:///../../packages/ui/src/components/Metrics/components/ChartTotalBytes.tsx","webpack:///../../packages/ui/src/components/Metrics/components/EmptyStateNoMetricsData.tsx","webpack:///../../packages/ui/src/components/Metrics/components/EmptyStateNoMetricsDataForSelection.tsx","webpack:///../../packages/ui/src/components/Metrics/components/EmptyStateNoTopics.tsx","webpack:///../../packages/ui/src/components/Metrics/components/EmptyStateNoTopicSelected.tsx","webpack:///../../packages/ui/src/components/Metrics/components/FilterByPartition.tsx","webpack:///../../packages/ui/src/components/Metrics/components/FilterByTime.tsx","webpack:///../../packages/ui/src/components/Metrics/components/FilterByTopic.tsx","webpack:///../../packages/ui/src/components/Metrics/components/ToolbarRefresh.tsx","webpack:///../../packages/ui/src/components/Metrics/components/ToolbarTopicsMetrics.tsx","webpack:///../../packages/ui/src/components/Metrics/components/CardTopicsMetrics.tsx","webpack:///../../packages/ui/src/components/Metrics/components/FilterByBroker.tsx","webpack:///../../packages/ui/src/components/Metrics/components/ToolbarKafkaInstanceMetric.tsx","webpack:///../../packages/ui/src/components/Metrics/components/BrokerToggle.tsx","webpack:///../../packages/ui/src/components/Metrics/components/ChartPartitionLogSizePerBroker.tsx","webpack:///../../packages/ui/src/components/Metrics/components/CardUsedDiskSpaceMetrics.tsx","webpack:///../../packages/ui/src/components/Metrics/components/CardKafkaInstanceMetrics.tsx","webpack:///../../packages/ui/src/components/Metrics/components/CardKpi.tsx","webpack:///../../packages/ui/src/components/Metrics/machines/KafkaInstanceMetricsMachine.ts","webpack:///../../packages/ui/src/components/Metrics/machines/TopicsMetricsMachine.ts","webpack:///../../packages/ui/src/components/Metrics/machines/MetricsKpiMachine.ts","webpack:///../../packages/ui/src/components/Metrics/KafkaInstanceMetricsProvider.tsx","webpack:///../../packages/ui/src/components/Metrics/MetricsKpiProvider.tsx","webpack:///../../packages/ui/src/components/Metrics/TopicsMetricsProvider.tsx","webpack:///../../packages/ui/src/components/Metrics/useKafkaInstanceMetrics.tsx","webpack:///../../packages/ui/src/components/Metrics/useTopicsMetrics.tsx","webpack:///../../packages/ui/src/components/Metrics/components/PartitionCard.tsx","webpack:///../../packages/ui/src/components/Metrics/components/MetricsLagAlert.tsx","webpack:///../../packages/ui/src/components/Metrics/Metrics.tsx","webpack:///../../packages/ui/src/components/Metrics/useMetricsKpi.tsx","webpack:///../../packages/ui/src/components/Settings/Settings.tsx","webpack:///../../packages/ui/src/components/Topic/components/types.ts","webpack:///../../packages/ui/src/components/Topic/components/CreateTopicHead.tsx","webpack:///../../packages/ui/src/components/Topic/components/PartitionLimitWarning.tsx","webpack:///../../packages/ui/src/components/Topic/components/TextWithLabelPopover.tsx","webpack:///../../packages/ui/src/components/Topic/components/Cleanup.tsx","webpack:///../../packages/ui/src/components/Topic/components/CustomRetentionMessage.tsx","webpack:///../../packages/ui/src/components/Topic/components/CustomRetentionSize.tsx","webpack:///../../packages/ui/src/components/Topic/components/useValidateTopic.ts","webpack:///../../packages/ui/src/components/Topic/components/CoreConfiguration.tsx","webpack:///../../packages/ui/src/components/Topic/components/Flush.tsx","webpack:///../../packages/ui/src/components/Topic/components/Log.tsx","webpack:///../../packages/ui/src/components/Topic/components/Message.tsx","webpack:///../../packages/ui/src/components/Topic/components/Replication.tsx","webpack:///../../packages/ui/src/components/Topic/components/TopicAdvanceIndex.tsx","webpack:///../../packages/ui/src/components/Topic/components/TopicAdvanceJumpLinks.tsx","webpack:///../../packages/ui/src/components/Topic/components/TopicAdvancePage.tsx","webpack:///../../packages/ui/src/components/Topic/components/CreateTopicWizard.tsx","webpack:///../../packages/ui/src/components/Topic/components/StepMessageRetention.tsx","webpack:///../../packages/ui/src/components/Topic/components/StepPartitions.tsx","webpack:///../../packages/ui/src/components/Topic/components/StepReplicas.tsx","webpack:///../../packages/ui/src/components/Topic/components/StepTopicName.tsx","webpack:///../../packages/ui/src/components/Topic/components/WizardCustomFooter.tsx","webpack:///../../packages/ui/src/components/Topic/CreateTopic/CreateTopic.tsx","webpack:///../../packages/ui/src/components/Topic/EditTopicProperties/EditTopicProperties.tsx","webpack:///../../packages/ui/src/components/Topic/TopicProperties/TopicProperties.tsx","webpack:///../../packages/ui/src/components/ChangeKafkaOwner/SelectOwner.tsx","webpack:///../../packages/ui/src/components/ChangeKafkaOwner/ChangeKafkaOwner.tsx","webpack:///../../packages/ui/src/components/TermsAndConditionsDialog/TermsAndConditionsDialog.tsx","webpack:///../../packages/ui/src/components/LegacyControlPlaneHeader.tsx"],"sourcesContent":["const NewInstanceSegment = \"create\";\nconst DeleteSegment = \"delete\";\nconst ChangeOwnerSegment = \"change-owner\";\nconst TermsAndConditionsSegment = \"terms-and-conditions\";\nexport const ControlPlaneSpecialSegments = [\n  NewInstanceSegment,\n  TermsAndConditionsSegment,\n];\n\nexport const ControlPlaneRouteRoot = \"/kafkas\" as const;\n\nexport const ControlPlaneRoutePath = `${ControlPlaneRouteRoot}` as const;\nexport const ControlPlaneNewInstanceRoutePath =\n  `${ControlPlaneRoutePath}/${NewInstanceSegment}` as const;\nexport const ControlPlaneSelectedInstanceRoutePath = (instanceId: string) =>\n  `${ControlPlaneRoutePath}/${instanceId}` as const;\nexport const ControlPlaneDeleteInstanceRoutePath = (instanceId: string) =>\n  `${ControlPlaneSelectedInstanceRoutePath(\n    instanceId\n  )}/${DeleteSegment}` as const;\nexport const ControlPlaneChangeOwnerRoutePath = (instanceId: string) =>\n  `${ControlPlaneSelectedInstanceRoutePath(\n    instanceId\n  )}/${ChangeOwnerSegment}` as const;\n\nexport const ControlPlaneRouteMatch =\n  `${ControlPlaneRoutePath}/:id?/:section(${DeleteSegment}|${ChangeOwnerSegment})?` as const;\nexport const ControlPlaneTermsAndConditionsMatch =\n  `${ControlPlaneRoutePath}/${TermsAndConditionsSegment}` as const;\nexport const ControlPlaneNewInstanceMatch =\n  `${ControlPlaneRoutePath}/${NewInstanceSegment}` as const;\nexport const ControlPlaneDeleteInstanceMatch =\n  `${ControlPlaneRoutePath}/:id/${DeleteSegment}` as const;\nexport const ControlPlaneChangeOwnerMatch =\n  `${ControlPlaneRoutePath}/:id/${ChangeOwnerSegment}` as const;\n\nexport const ControlPlaneClustersPath = `/clusters`;\n\nexport type ControlPlaneRouteParams = {\n  id?: string;\n  section?: \"delete\" | \"change-owner\";\n};\n\nexport type ControlPlaneNavigationProps = {\n  instancesHref: string;\n};\n\nexport type DedicatedControlPlaneNavigationProps = {\n  instancesHref: string;\n  clustersHref: string;\n};\n","import { useKafka, useSSOProvider } from \"consoledot-api/src\";\nimport type { FunctionComponent, MutableRefObject } from \"react\";\nimport {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport type { KafkaInstanceDrawerTab } from \"ui\";\nimport { KafkaInstanceDrawer } from \"ui\";\nimport type { ControlPlaneRouteParams } from \"./routesConsts\";\nimport {\n  ControlPlaneRouteMatch,\n  ControlPlaneSpecialSegments,\n} from \"./routesConsts\";\n\ntype DrawerContextProps = {\n  selectedInstance: string | undefined;\n  activeTab: KafkaInstanceDrawerTab;\n  setActiveTab: (tab: KafkaInstanceDrawerTab) => void;\n  isExpanded: boolean;\n  toggleExpanded: (newState?: boolean) => void;\n  onClose: MutableRefObject<(() => void) | undefined>;\n};\n// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\nconst DrawerContext = createContext<DrawerContextProps>(null!);\n\nexport const DrawerProvider: FunctionComponent = ({ children }) => {\n  const match = useRouteMatch<ControlPlaneRouteParams>(ControlPlaneRouteMatch);\n  if (!match) {\n    throw Error(\"DrawerProvider used outside the expected route\");\n  }\n  const selectedInstance =\n    (match.params.id &&\n      ControlPlaneSpecialSegments.includes(match.params.id)) ||\n    match.params.section !== undefined\n      ? undefined\n      : match.params.id;\n  const { data: instance } = useKafka(selectedInstance);\n  const [isExpanded, setIsExpanded] = useState(\n    selectedInstance !== undefined && match.isExact\n  );\n  const [activeTab, setActiveTab] = useState<KafkaInstanceDrawerTab>(\"details\");\n  const onClose = useRef<() => void | undefined>();\n\n  const { data: tokenEndPointUrl } = useSSOProvider();\n\n  const toggleExpanded = useCallback((newValue: boolean | undefined) => {\n    setIsExpanded((prev) => {\n      const isExpanded = newValue !== undefined ? newValue : !prev;\n      if (isExpanded === false && onClose.current) {\n        onClose.current();\n      }\n      return isExpanded;\n    });\n  }, []);\n\n  useEffect(() => {\n    if (!instance) {\n      setIsExpanded(false);\n    }\n  }, [instance]);\n\n  const value = useMemo(() => {\n    const shouldBeExpanded = selectedInstance !== undefined && isExpanded;\n\n    return {\n      selectedInstance,\n      activeTab,\n      setActiveTab,\n      isExpanded: shouldBeExpanded,\n      toggleExpanded,\n      onClose,\n    };\n  }, [activeTab, isExpanded, selectedInstance, toggleExpanded]);\n\n  return (\n    <DrawerContext.Provider value={value}>\n      <KafkaInstanceDrawer\n        instance={instance}\n        activeTab={activeTab}\n        onTabChange={setActiveTab}\n        isExpanded={isExpanded}\n        onClose={() => toggleExpanded(false)}\n        tokenEndpointUrl={tokenEndPointUrl}\n      >\n        {children}\n      </KafkaInstanceDrawer>\n    </DrawerContext.Provider>\n  );\n};\n\nexport function useDrawer(onClose?: () => void) {\n  const context = useContext(DrawerContext);\n  context.onClose.current = onClose;\n  return context;\n}\n","import { useQueryErrorResetBoundary } from \"consoledot-api/src\";\nimport type { FunctionComponent, VoidFunctionComponent } from \"react\";\nimport { useEffect } from \"react\";\nimport { ErrorBoundary } from \"react-error-boundary\";\nimport { Redirect, useLocation } from \"react-router-dom\";\n\nexport const RedirectOnGateError: FunctionComponent<{\n  redirectUrl: string;\n}> = ({ children, redirectUrl }) => {\n  const { key } = useLocation();\n\n  return (\n    <ErrorBoundary\n      resetKeys={[key]}\n      fallbackRender={() => <RedirectAndResetError redirectUrl={redirectUrl} />}\n    >\n      {children}\n    </ErrorBoundary>\n  );\n};\n\nconst RedirectAndResetError: VoidFunctionComponent<{ redirectUrl: string }> = ({\n  redirectUrl,\n}) => {\n  const { reset } = useQueryErrorResetBoundary();\n  useEffect(() => reset, [reset]);\n  return <Redirect to={redirectUrl} />;\n};\n","import { useChrome } from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport { useUser } from \"consoledot-api/src\";\nimport { useCallback } from \"react\";\n\nexport function useUserControlGate() {\n  const { auth } = useChrome();\n  const getUser = useCallback(async () => {\n    const user = await auth.getUser();\n    const username = user?.identity?.user?.username;\n    const isOrgAdmin = user?.identity?.user?.is_org_admin;\n    return {\n      username,\n      isOrgAdmin,\n    };\n  }, [auth]);\n  const { data: userData } = useUser({ getUser, suspense: true });\n  return { userData: userData as NonNullable<typeof userData> };\n}\n","import { useChrome } from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport {\n  usePaginationSearchParams,\n  useSortableSearchParams,\n  useURLSearchParamsChips,\n} from \"@rhoas/app-services-ui-components\";\nimport { KafkaInstancesSortableColumns } from \"consoledot-api\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport type { KafkaInstanceDrawerTab, KafkaInstancesProps } from \"ui\";\nimport { useKafkaLabels } from \"ui\";\nimport type { SimplifiedStatus } from \"ui-models/src/models/kafka\";\nimport { useDrawer } from \"../DrawerProvider\";\n\nexport type UseKafkaInstancesTableProps = {\n  instancesHref: string;\n  instanceSelectedHref: (id: string) => string;\n  instanceCreationHref: string;\n  instanceDeletionHref: (id: string) => string;\n  instanceChangeOwnerHref: (id: string) => string;\n};\n\nexport function useKafkaInstancesTable({\n  instancesHref,\n  instanceSelectedHref,\n  instanceCreationHref,\n  instanceDeletionHref,\n  instanceChangeOwnerHref,\n}: UseKafkaInstancesTableProps) {\n  const history = useHistory();\n  const { quickStarts } = useChrome();\n\n  const { selectedInstance, toggleExpanded, setActiveTab, isExpanded } =\n    useDrawer(\n      useCallback(() => {\n        history.replace(instancesHref);\n      }, [history, instancesHref])\n    );\n\n  const labels = useKafkaLabels();\n\n  const { page, perPage, setPagination, setPaginationQuery } =\n    usePaginationSearchParams();\n  const resetPaginationQuery = useCallback(\n    () => setPaginationQuery(1, perPage),\n    [perPage, setPaginationQuery]\n  );\n\n  const namesChips = useURLSearchParamsChips(\"names\", resetPaginationQuery);\n  const ownersChips = useURLSearchParamsChips(\"owners\", resetPaginationQuery);\n  const statusesChips = useURLSearchParamsChips<SimplifiedStatus>(\n    \"statuses\",\n    resetPaginationQuery\n  );\n\n  const [isColumnSortable, sort, sortDirection] = useSortableSearchParams(\n    KafkaInstancesSortableColumns,\n    labels.fields,\n    \"createdAt\",\n    \"desc\"\n  );\n\n  const onClearAllFilters = useCallback(() => {\n    namesChips.clearChained(\n      ownersChips.clearChained(\n        statusesChips.clearChained(setPaginationQuery(1, perPage))\n      ),\n      true\n    );\n  }, [namesChips, ownersChips, perPage, setPaginationQuery, statusesChips]);\n\n  const openDrawer = useCallback(\n    (id: string, tab: KafkaInstanceDrawerTab) => {\n      if (selectedInstance === id && isExpanded) {\n        toggleExpanded(false);\n      } else {\n        history.replace(instanceSelectedHref(id));\n        toggleExpanded(true);\n        setActiveTab(tab);\n      }\n    },\n    [\n      history,\n      instanceSelectedHref,\n      isExpanded,\n      selectedInstance,\n      setActiveTab,\n      toggleExpanded,\n    ]\n  );\n\n  const onDetailsClick: KafkaInstancesProps[\"onDetails\"] = useCallback(\n    (instance) => {\n      openDrawer(instance.id, \"details\");\n    },\n    [openDrawer]\n  );\n\n  const onConnectionsClick: KafkaInstancesProps[\"onDetails\"] = useCallback(\n    (instance) => {\n      openDrawer(instance.id, \"connections\");\n    },\n    [openDrawer]\n  );\n\n  const onCreate = useCallback(() => {\n    history.push(instanceCreationHref);\n  }, [history, instanceCreationHref]);\n\n  const onDelete = useCallback<KafkaInstancesProps[\"onDelete\"]>(\n    ({ id }) => {\n      history.push(instanceDeletionHref(id));\n    },\n    [history, instanceDeletionHref]\n  );\n  const onChangeOwner = useCallback<KafkaInstancesProps[\"onChangeOwner\"]>(\n    ({ id }) => {\n      history.push(instanceChangeOwnerHref(id));\n    },\n    [history, instanceChangeOwnerHref]\n  );\n\n  const onQuickstartGuide = useCallback(\n    () => quickStarts.toggle(\"getting-started\"),\n    [quickStarts]\n  );\n\n  return {\n    selectedInstance,\n    page,\n    perPage,\n    setPagination,\n    namesChips,\n    ownersChips,\n    statusesChips,\n    isColumnSortable,\n    sort,\n    sortDirection,\n    onClearAllFilters,\n    onDetailsClick,\n    onConnectionsClick,\n    onCreate,\n    onDelete,\n    onChangeOwner,\n    onQuickstartGuide,\n  };\n}\n","import { useKafkas } from \"consoledot-api\";\nimport type { FunctionComponent } from \"react\";\nimport type { KafkaInstancesProps } from \"ui\";\nimport { KafkaInstances, LegacyControlPlaneHeader } from \"ui\";\nimport { ReadyStatuses } from \"ui-models/src/models/kafka\";\nimport { useUserControlGate } from \"../../../useUserControlGate\";\nimport { useKafkaInstancesTable } from \"./useKafkaInstancesTable\";\n\nexport type KafkaInstancesRoute = {\n  instancesHref: string;\n  instanceSelectedHref: (id: string) => string;\n  instanceCreationHref: string;\n  instanceDeletionHref: (id: string) => string;\n  instanceChangeOwnerHref: (id: string) => string;\n} & Pick<KafkaInstancesProps, \"getUrlForInstance\">;\n\nexport const KafkaInstancesRoute: FunctionComponent<KafkaInstancesRoute> = ({\n  instancesHref,\n  instanceDeletionHref,\n  instanceSelectedHref,\n  instanceCreationHref,\n  instanceChangeOwnerHref,\n  getUrlForInstance,\n}) => {\n  const {\n    selectedInstance,\n    page,\n    perPage,\n    setPagination,\n    namesChips,\n    ownersChips,\n    statusesChips,\n    isColumnSortable,\n    sort,\n    sortDirection,\n    onClearAllFilters,\n    onDetailsClick,\n    onConnectionsClick,\n    onCreate,\n    onDelete,\n    onChangeOwner,\n    onQuickstartGuide,\n  } = useKafkaInstancesTable({\n    instancesHref,\n    instanceDeletionHref,\n    instanceSelectedHref,\n    instanceCreationHref,\n    instanceChangeOwnerHref,\n  });\n  const { userData } = useUserControlGate();\n  const { data } = useKafkas({\n    page,\n    perPage,\n    name: namesChips.chips,\n    owner: ownersChips.chips,\n    status: statusesChips.chips,\n    sort: sort || \"createdAt\",\n    direction: sortDirection,\n    instanceType: \"legacy\",\n  });\n\n  return (\n    <>\n      <LegacyControlPlaneHeader />\n      <KafkaInstances\n        columns={\"standard\"}\n        instances={data?.instances}\n        itemCount={data?.count}\n        page={page}\n        perPage={perPage}\n        names={namesChips.chips}\n        owners={ownersChips.chips}\n        statuses={statusesChips.chips}\n        isColumnSortable={isColumnSortable}\n        onPageChange={setPagination}\n        onSearchName={namesChips.add}\n        onRemoveNameChip={namesChips.remove}\n        onRemoveNameChips={namesChips.clear}\n        onSearchOwner={ownersChips.add}\n        onRemoveOwnerChip={ownersChips.remove}\n        onRemoveOwnerChips={ownersChips.clear}\n        onSearchStatus={statusesChips.toggle}\n        onRemoveStatusChip={statusesChips.remove}\n        onRemoveStatusChips={statusesChips.clear}\n        onClearAllFilters={onClearAllFilters}\n        onChangeOwner={onChangeOwner}\n        onDelete={onDelete}\n        onCreate={onCreate}\n        isRowSelected={({ row }) => row.id === selectedInstance}\n        getUrlForInstance={getUrlForInstance}\n        onDetails={onDetailsClick}\n        onConnection={onConnectionsClick}\n        onClickConnectionTabLink={() => {\n          /* TODO */\n        }}\n        onClickSupportLink={() => {\n          /* TODO */\n        }}\n        onInstanceLinkClick={() => {\n          /* TODO */\n        }}\n        onQuickstartGuide={onQuickstartGuide}\n        canHaveInstanceLink={({ status }) => ReadyStatuses.includes(status)}\n        canOpenConnection={(row) => userData.canOpenConnection(row.status)}\n        canChangeOwner={({ owner, status }) =>\n          userData.canChangeOwner(owner, status)\n        }\n        canDelete={({ owner }) => userData.isUserOwnerOrAdmin(owner)}\n      />\n    </>\n  );\n};\n","import { useSelfTermsReview } from \"consoledot-api/src\";\n\nexport function useSelfTermsReviewGate() {\n  const { data } = useSelfTermsReview(true);\n  const selfTermsReview = data as NonNullable<typeof data>;\n  if (selfTermsReview.areTermsAccepted === false) {\n    throw new Error(\"Terms and Conditions not accepted\");\n  }\n  return {\n    selfTermsReview,\n  };\n}\n","import { useChrome } from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport { useCreateKafkaMutation } from \"consoledot-api/src\";\nimport type { FunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport type { CreateKafkaInstanceServices } from \"ui\";\nimport { CreateKafkaInstance } from \"ui\";\nimport type { ControlPlaneNavigationProps } from \"../routesConsts\";\nimport { ControlPlaneRouteRoot } from \"../routesConsts\";\nimport { useCreateKafkaCallbacks } from \"./useCreateKafkaCallbacks\";\nimport { useSelfTermsReviewGate } from \"./useSelfTermsReviewGate\";\n\nexport const CreateKafkaInstanceRoute: FunctionComponent<\n  ControlPlaneNavigationProps\n> = ({ instancesHref }) => {\n  const { analytics, quickStarts } = useChrome();\n  const history = useHistory();\n  const callbacks = useCreateKafkaCallbacks();\n  const createKafkaInstance = useCreateKafkaMutation();\n  useSelfTermsReviewGate();\n\n  void analytics.track(\"RHOSAK Create Instance\", { status: \"prompt\" });\n\n  const onClickKafkaOverview = () => {\n    history.push(`/overview`);\n  };\n\n  const onClickQuickStart = useCallback(() => {\n    quickStarts.toggle(\"getting-started\");\n  }, [quickStarts]);\n\n  const onCreate = useCallback<CreateKafkaInstanceServices[\"onCreate\"]>(\n    function (instance, onSuccess, onError) {\n      const onOnSuccess = () => {\n        onSuccess();\n        void analytics.track(\"RHOSAK Create Instance\", {\n          status: \"success\",\n        });\n        history.push(ControlPlaneRouteRoot);\n      };\n      void createKafkaInstance.mutateAsync({\n        instance,\n        onSuccess: onOnSuccess,\n        onError,\n      });\n    },\n    [analytics, createKafkaInstance, history]\n  );\n\n  const onCancel = useCallback(() => {\n    void analytics.track(\"RHOSAK Create Instance\", {\n      status: \"canceled\",\n    });\n    history.push(instancesHref);\n  }, [analytics, history, instancesHref]);\n\n  return (\n    <CreateKafkaInstance\n      {...callbacks}\n      isModalOpen={true}\n      onCancel={onCancel}\n      onClickContactUs={onClickKafkaOverview}\n      onClickKafkaOverview={onClickKafkaOverview}\n      onClickQuickStart={onClickQuickStart}\n      onCreate={onCreate}\n      onLearnHowToAddStreamingUnits={onClickKafkaOverview}\n      onLearnMoreAboutSizes={onClickKafkaOverview}\n      subscriptionOptionsHref={document.location.href + \"/../overview\"}\n      appendTo={() =>\n        (document.getElementById(\"chrome-app-render-root\") as HTMLElement) ||\n        document.body\n      }\n    />\n  );\n};\n","import { useChrome } from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport {\n  useDeveloperInstanceAvailabilityFetchQuery,\n  useProviderRegionSizesFetchQuery,\n  useProvidersWithRegionsFetchQuery,\n  useStandardQuotaFetchQuery,\n} from \"consoledot-api/src\";\nimport { useCallback } from \"react\";\nimport type { CreateKafkaInstanceProps, StandardSizes } from \"ui\";\n\nexport function useCreateKafkaCallbacks() {\n  const { auth } = useChrome();\n\n  const getUsername = useCallback(async () => {\n    const username = (await auth.getUser())?.identity.user?.username;\n    if (!username) {\n      return Promise.reject(\"Invalid user\");\n    }\n    return username;\n  }, [auth]);\n\n  const checkDeveloperAvailabilityQuery =\n    useDeveloperInstanceAvailabilityFetchQuery();\n\n  const standardQuotaQuery = useStandardQuotaFetchQuery(true);\n  const providersWithRegionsQuery = useProvidersWithRegionsFetchQuery();\n  const getProvidersInfo = useProvidersWithRegionsFetchQuery();\n  const getProviderRegionsSizes = useProviderRegionSizesFetchQuery();\n\n  const checkDeveloperAvailability = useCallback<\n    CreateKafkaInstanceProps[\"checkDeveloperAvailability\"]\n  >(\n    async ({ onAvailable, onUsed, onUnavailable }) => {\n      try {\n        const available = await checkDeveloperAvailabilityQuery(getUsername);\n\n        if (available) {\n          onAvailable();\n        } else {\n          onUsed();\n        }\n      } catch {\n        onUnavailable();\n      }\n    },\n    [checkDeveloperAvailabilityQuery, getUsername]\n  );\n\n  const checkStandardQuota = useCallback<\n    CreateKafkaInstanceProps[\"checkStandardQuota\"]\n  >(\n    async ({ onQuotaAvailable, onNoQuotaAvailable, onOutOfQuota }) => {\n      try {\n        const {\n          hasTrialQuota,\n          remainingPrepaidQuota,\n          remainingMarketplaceQuota,\n          marketplaceSubscriptions,\n        } = await standardQuotaQuery();\n\n        if (\n          remainingMarketplaceQuota !== undefined ||\n          remainingPrepaidQuota !== undefined\n        ) {\n          if (\n            (remainingMarketplaceQuota || 0) === 0 &&\n            (remainingPrepaidQuota || 0) === 0\n          ) {\n            onOutOfQuota({\n              quota: {\n                marketplaceSubscriptions,\n              },\n            });\n          } else {\n            onQuotaAvailable({\n              quota: {\n                remainingPrepaidQuota,\n                remainingMarketplaceQuota,\n                marketplaceSubscriptions,\n              },\n            });\n          }\n        } else {\n          onNoQuotaAvailable({ hasTrialQuota });\n        }\n      } catch (e) {\n        onNoQuotaAvailable({ hasTrialQuota: false });\n      }\n    },\n    [standardQuotaQuery]\n  );\n\n  const fetchProvidersWithRegions = useCallback<\n    CreateKafkaInstanceProps[\"fetchProvidersWithRegions\"]\n  >(\n    async (plan, { onAvailable, onUnavailable }) => {\n      try {\n        const providers = await providersWithRegionsQuery(plan);\n        onAvailable(providers);\n      } catch {\n        onUnavailable();\n      }\n    },\n    [providersWithRegionsQuery]\n  );\n\n  const getStandardSizes = useCallback<\n    CreateKafkaInstanceProps[\"getStandardSizes\"]\n  >(\n    async (provider, region) => {\n      const providersInfo = await getProvidersInfo(\"standard\");\n      const providerInfo = providersInfo.providers.find(\n        (p) => p.id === provider\n      );\n      if (!providerInfo) {\n        return Promise.reject(\"Invalid cloud provider\");\n      }\n      return getProviderRegionsSizes(providerInfo, region, \"standard\");\n    },\n    [getProviderRegionsSizes, getProvidersInfo]\n  );\n\n  const getTrialSizes = useCallback<CreateKafkaInstanceProps[\"getTrialSizes\"]>(\n    async (provider, region) => {\n      let standardSizes: StandardSizes;\n\n      try {\n        standardSizes = await getStandardSizes(provider, region);\n        if (standardSizes.length === 0) {\n          throw new Error(\"No standard sizes found\");\n        }\n      } catch {\n        // It can happen that the selected provider doesn't support standard instances.\n        // In this case we provide a faux sample list of sizes just to make the slider happy.\n        standardSizes = [\n          { id: \"1\", displayName: \"1\", quota: 1 },\n          { id: \"2\", displayName: \"2\", quota: 2 },\n        ] as StandardSizes;\n      }\n      const providersInfo = await getProvidersInfo(\"developer\");\n      const providerInfo = providersInfo.providers.find(\n        (p) => p.id === provider\n      );\n      if (!providerInfo) {\n        return Promise.reject(\"Invalid cloud provider\");\n      }\n      const trialSizes = await getProviderRegionsSizes(\n        providerInfo,\n        region,\n        \"developer\"\n      );\n      return {\n        standard: standardSizes,\n        trial: trialSizes[0],\n      };\n    },\n    [getProviderRegionsSizes, getProvidersInfo, getStandardSizes]\n  );\n  return {\n    checkDeveloperAvailability,\n    checkStandardQuota,\n    fetchProvidersWithRegions,\n    getStandardSizes,\n    getTrialSizes,\n  };\n}\n","import { useChrome } from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport { useCreateDedicatedKafkaMutation } from \"consoledot-api\";\nimport type { FunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { CreateDedicatedKafkaInstance } from \"ui\";\nimport type { CreateDedicatedKafkaInstanceServices } from \"ui/src/components/CreateKafkaInstance/machines\";\nimport type { DedicatedControlPlaneNavigationProps } from \"../routesConsts\";\nimport { ControlPlaneRoutePath } from \"../routesConsts\";\nimport { useCreateDedicatedKafkaCallbacks } from \"./useCreateDedicatedKafkaCallbacks\";\nimport { useSelfTermsReviewGate } from \"./useSelfTermsReviewGate\";\n\nexport const CreateDedicatedKafkaInstanceRoute: FunctionComponent<\n  DedicatedControlPlaneNavigationProps\n> = ({ instancesHref }) => {\n  const history = useHistory();\n  const callbacks = useCreateDedicatedKafkaCallbacks();\n  const createDedicatedKafkaInstance = useCreateDedicatedKafkaMutation();\n  const { quickStarts } = useChrome();\n  useSelfTermsReviewGate();\n\n  const onClickKafkaOverview = () => {\n    history.push(`overview`);\n  };\n\n  const onClickQuickStart = useCallback(() => {\n    quickStarts.toggle(\"getting-started\");\n  }, [quickStarts]);\n\n  const onCreate = useCallback<\n    CreateDedicatedKafkaInstanceServices[\"onCreate\"]\n  >(\n    function (instance, onSuccess, onError) {\n      const onOnSuccess = () => {\n        onSuccess();\n        history.push(ControlPlaneRoutePath);\n      };\n      void createDedicatedKafkaInstance.mutateAsync({\n        instance,\n        onSuccess: onOnSuccess,\n        onError,\n      });\n    },\n    [createDedicatedKafkaInstance, history]\n  );\n\n  const onCancel = useCallback(() => {\n    history.push(instancesHref);\n  }, [history, instancesHref]);\n\n  return (\n    <CreateDedicatedKafkaInstance\n      {...callbacks}\n      isModalOpen={true}\n      onCancel={onCancel}\n      onClickContactUs={onClickKafkaOverview}\n      onClickKafkaOverview={onClickKafkaOverview}\n      onClickQuickStart={onClickQuickStart}\n      onCreate={onCreate}\n      onLearnHowToAddStreamingUnits={onClickKafkaOverview}\n      onLearnMoreAboutSizes={onClickKafkaOverview}\n      subscriptionOptionsHref={document.location.href + \"/../overview\"}\n      appendTo={() =>\n        (document.getElementById(\"chrome-app-render-root\") as HTMLElement) ||\n        document.body\n      }\n    />\n  );\n};\n","import {\n  useDedicatedClustersFetchQuery,\n  useDedicatedClusterSizesFetchQuery,\n  useDedicatedQuotaFetchQuery,\n} from \"consoledot-api\";\nimport { useCallback } from \"react\";\nimport type { CreateDedicatedKafkaInstanceProps } from \"ui\";\n\nexport function useCreateDedicatedKafkaCallbacks() {\n  const dedicatedQuotaQuery = useDedicatedQuotaFetchQuery(true);\n  const dedicatedClustersQuery = useDedicatedClustersFetchQuery();\n  const dedicatedClusterSizesQuery = useDedicatedClusterSizesFetchQuery();\n\n  const checkDedicatedQuota = useCallback<\n    CreateDedicatedKafkaInstanceProps[\"checkDedicatedQuota\"]\n  >(\n    async ({ onQuotaAvailable, onNoQuotaAvailable, onOutOfQuota }) => {\n      try {\n        const { remainingDedicatedQuota } = await dedicatedQuotaQuery();\n\n        if (remainingDedicatedQuota !== undefined) {\n          if ((remainingDedicatedQuota || 0) === 0) {\n            onOutOfQuota({});\n          } else {\n            onQuotaAvailable({\n              quota: {\n                remainingDedicatedQuota,\n              },\n            });\n          }\n        } else {\n          onNoQuotaAvailable({});\n        }\n      } catch (e) {\n        onNoQuotaAvailable({});\n      }\n    },\n    [dedicatedQuotaQuery]\n  );\n\n  const fetchClusters = useCallback<\n    CreateDedicatedKafkaInstanceProps[\"fetchClusters\"]\n  >(\n    async (plan, { onAvailable, onUnavailable }) => {\n      try {\n        const { clusters } = await dedicatedClustersQuery();\n        onAvailable({\n          clusters,\n          defaultCluster: clusters.length > 0 ? clusters[0] : undefined,\n        });\n      } catch {\n        onUnavailable();\n      }\n    },\n    [dedicatedClustersQuery]\n  );\n\n  const getDedicatedSizes = useCallback<\n    CreateDedicatedKafkaInstanceProps[\"getDedicatedSizes\"]\n  >(\n    (cluster) => dedicatedClusterSizesQuery({ clusterId: cluster.id }),\n    [dedicatedClusterSizesQuery]\n  );\n\n  return {\n    checkDedicatedQuota,\n    fetchClusters,\n    getDedicatedSizes,\n  };\n}\n","import { addNotification } from \"@redhat-cloud-services/frontend-components-notifications\";\nimport type { ReactNode } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nexport const useAlerts = () => {\n  const dispatch = useDispatch();\n\n  const addAlert = (\n    variant: \"default\" | \"success\" | \"danger\" | \"warning\" | \"info\" | undefined,\n    message: string,\n    dismissable: boolean | undefined,\n    id?: string | number | undefined,\n    description?: ReactNode\n  ) => {\n    dispatch(\n      addNotification({\n        variant: variant,\n        title: message,\n        description: description,\n        dismissable: dismissable,\n        id: id,\n      })\n    );\n  };\n\n  return { addAlert };\n};\n","import { useKafka } from \"consoledot-api/src\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport type { ControlPlaneRouteParams } from \"./routesConsts\";\nimport { ControlPlaneRouteMatch } from \"./routesConsts\";\n\nexport function useControlPlaneGate() {\n  const match = useRouteMatch<ControlPlaneRouteParams>(ControlPlaneRouteMatch);\n  if (!match) {\n    throw Error(\"useControlPlaneGate used outside the expected route\");\n  }\n  const { data: instance } = useKafka(match.params.id, true);\n  return { instance: instance as NonNullable<typeof instance>, match };\n}\n","import { useDeleteKafkaMutation } from \"consoledot-api/src\";\nimport type { FunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { DeleteKafkaInstance } from \"ui\";\nimport { ReadyStatuses } from \"ui-models/src/models/kafka\";\nimport { useAlerts } from \"../../../useAlerts\";\nimport type { ControlPlaneNavigationProps } from \"../routesConsts\";\nimport { useControlPlaneGate } from \"../useControlPlaneGate\";\n\nexport const DeleteKafkaInstanceRoute: FunctionComponent<\n  ControlPlaneNavigationProps\n> = ({ instancesHref }) => {\n  const history = useHistory();\n\n  const { addAlert } = useAlerts();\n\n  const { instance } = useControlPlaneGate();\n  const { mutateAsync, isLoading: isDeleting } = useDeleteKafkaMutation();\n\n  const onCancel = useCallback(() => {\n    history.push(instancesHref);\n  }, [history, instancesHref]);\n\n  const onDelete = useCallback(() => {\n    void mutateAsync({\n      id: instance.id,\n      onError: () => {\n        addAlert(\n          \"danger\",\n          \"Something went wrong\",\n          true,\n          \"delete-kafka-instance-error\"\n        );\n      },\n      onSuccess: () => {\n        history.replace(instancesHref);\n      },\n    });\n  }, [mutateAsync, instance.id, addAlert, history, instancesHref]);\n\n  return (\n    <DeleteKafkaInstance\n      isModalOpen={true}\n      isDeleting={isDeleting}\n      onCancel={onCancel}\n      onDelete={onDelete}\n      instanceName={\n        ReadyStatuses.includes(instance.status) ? instance.name : undefined\n      }\n      appendTo={() =>\n        (document.getElementById(\"chrome-app-render-root\") as HTMLElement) ||\n        document.body\n      }\n    />\n  );\n};\n","import { useChrome } from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport { useSelfTermsReview } from \"consoledot-api/src\";\nimport type { FunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { TermsAndConditionsDialog } from \"ui\";\n\nexport const TermsAndConditionsRoute: FunctionComponent<{\n  createHref: string;\n  cancelHref: string;\n}> = ({ createHref, cancelHref }) => {\n  const { analytics } = useChrome();\n  const history = useHistory();\n  const { data: selfTermsReview } = useSelfTermsReview();\n  const baselinedCreateHref =\n    window.location.origin +\n    history.createHref({\n      pathname: createHref,\n    });\n  const baselinedCancelHref =\n    window.location.origin +\n    history.createHref({\n      pathname: cancelHref,\n    });\n  const termsUrl = selfTermsReview?.termsUrl(\n    baselinedCreateHref,\n    baselinedCancelHref\n  );\n  const onViewTerms = useCallback(\n    function () {\n      if (termsUrl !== undefined) {\n        window.location.href = termsUrl;\n      }\n    },\n    [termsUrl]\n  );\n\n  const onCancel = useCallback(() => {\n    void analytics.track(\"RHOSAK Create Instance\", {\n      status: \"failure-tos-refused\",\n    });\n    history.push(cancelHref);\n  }, [analytics, history, cancelHref]);\n\n  return (\n    <TermsAndConditionsDialog\n      isOpen={true}\n      onViewTerms={onViewTerms}\n      onCancel={onCancel}\n      appendTo={() =>\n        (document.getElementById(\"chrome-app-render-root\") as HTMLElement) ||\n        document.body\n      }\n    />\n  );\n};\n","import { useUpdateKafkaMutation, useUserAccounts } from \"consoledot-api/src\";\nimport type { FunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport type { ChangeKafkaOwnerProps } from \"ui\";\nimport { ChangeKafkaOwner } from \"ui\";\nimport { useAlerts } from \"../../../useAlerts\";\n\nimport type { ControlPlaneNavigationProps } from \"../routesConsts\";\nimport { useControlPlaneGate } from \"../useControlPlaneGate\";\n\nexport const ChangeOwnerRoute: FunctionComponent<\n  ControlPlaneNavigationProps\n> = () => {\n  const history = useHistory();\n\n  const { instance } = useControlPlaneGate();\n  const { data: accounts } = useUserAccounts({});\n  const updateInstance = useUpdateKafkaMutation();\n\n  const { addAlert } = useAlerts();\n\n  const onCancel = useCallback(() => {\n    history.goBack();\n  }, [history]);\n\n  const onConfirm = useCallback(\n    (newOwner: string) => {\n      updateInstance.mutate(\n        {\n          id: instance.id,\n          updates: { owner: newOwner },\n        },\n        {\n          onSuccess: () => {\n            history.goBack();\n            addAlert(\n              \"success\",\n              \"Kafka instance owner changed\",\n              true,\n              \"change-owner-success\",\n              `${newOwner} is now the owner of the ${instance.name} Kafka instance.`\n            );\n          },\n        }\n      );\n    },\n    [addAlert, history, instance.id, instance.name, updateInstance]\n  );\n\n  const savingState = ((): ChangeKafkaOwnerProps[\"savingState\"] => {\n    if (updateInstance.isLoading) return \"saving\";\n    if (updateInstance.isError) {\n      return updateInstance.error.type === \"invalid-user\"\n        ? \"invalid-user\"\n        : \"unknown-error\";\n    }\n    return \"idle\";\n  })();\n\n  return (\n    <ChangeKafkaOwner\n      currentOwner={instance.owner}\n      accounts={accounts?.accounts.map((a) => ({\n        id: a.username,\n        displayName: a.displayName,\n      }))}\n      onConfirm={onConfirm}\n      onCancel={onCancel}\n      savingState={savingState}\n    />\n  );\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport type { ControlPlaneHeaderProps } from \"ui\";\nimport { ControlPlaneHeader } from \"ui\";\nimport type { DedicatedControlPlaneNavigationProps } from \"../routesConsts\";\n\nexport type ConnectedControlPlaneHeaderProps = {\n  activeSection: ControlPlaneHeaderProps[\"activeSection\"];\n} & DedicatedControlPlaneNavigationProps;\n\nexport const ConnectedControlPlaneHeader: VoidFunctionComponent<\n  ConnectedControlPlaneHeaderProps\n> = ({ activeSection, instancesHref, clustersHref }) => {\n  return (\n    <ControlPlaneHeader\n      activeSection={activeSection}\n      sectionsHref={{\n        instances: instancesHref,\n        clusters: clustersHref,\n      }}\n    />\n  );\n};\n","import { useDedicatedClusters, useKafkas } from \"consoledot-api\";\nimport type { FunctionComponent } from \"react\";\nimport type { ControlPlaneHeaderProps, KafkaInstancesProps } from \"ui\";\nimport { EmptyStateNoDedicatedEntitlement, KafkaInstances } from \"ui\";\nimport { ReadyStatuses } from \"ui-models/src/models/kafka\";\nimport { EmptyStateNoDedicatedInstances } from \"ui/src/components/KafkaInstances/components\";\nimport type { DedicatedControlPlaneNavigationProps } from \"../routesConsts\";\nimport { ConnectedControlPlaneHeader } from \"./ConnectedControlPlaneHeader\";\nimport { useKafkaInstancesTable } from \"./useKafkaInstancesTable\";\n\nexport type KafkaInstancesRoute = {\n  activeSection: ControlPlaneHeaderProps[\"activeSection\"];\n  instanceSelectedHref: (id: string) => string;\n  instanceCreationHref: string;\n  instanceDeletionHref: (id: string) => string;\n  instanceChangeOwnerHref: (id: string) => string;\n} & Pick<KafkaInstancesProps, \"getUrlForInstance\"> &\n  DedicatedControlPlaneNavigationProps;\n\nexport const DedicatedKafkaInstancesRoute: FunctionComponent<\n  KafkaInstancesRoute\n> = ({\n  activeSection,\n  instancesHref,\n  clustersHref,\n  instanceDeletionHref,\n  instanceSelectedHref,\n  instanceCreationHref,\n  instanceChangeOwnerHref,\n  getUrlForInstance,\n}) => {\n  const {\n    selectedInstance,\n    page,\n    perPage,\n    setPagination,\n    namesChips,\n    ownersChips,\n    statusesChips,\n    isColumnSortable,\n    sort,\n    sortDirection,\n    onClearAllFilters,\n    onDetailsClick,\n    onConnectionsClick,\n    onCreate,\n    onDelete,\n    onChangeOwner,\n    onQuickstartGuide,\n  } = useKafkaInstancesTable({\n    instancesHref,\n    instanceDeletionHref,\n    instanceSelectedHref,\n    instanceCreationHref,\n    instanceChangeOwnerHref,\n  });\n  const dedicatedClusters = useDedicatedClusters();\n  const { data } = useKafkas({\n    page,\n    perPage,\n    name: namesChips.chips,\n    owner: ownersChips.chips,\n    status: statusesChips.chips,\n    sort: sort || \"createdAt\",\n    direction: sortDirection,\n    instanceType: \"dedicated\",\n  });\n\n  const hasReadyClusters = dedicatedClusters.isLoading\n    ? false\n    : (dedicatedClusters.data?.clusters || []).filter(\n        (c) => c.status === \"ready\"\n      ).length > 0;\n\n  return (\n    <>\n      <ConnectedControlPlaneHeader\n        activeSection={activeSection}\n        instancesHref={instancesHref}\n        clustersHref={clustersHref}\n      />\n      <KafkaInstances\n        columns={\"dedicated\"}\n        instances={data?.instances}\n        itemCount={data?.count}\n        page={page}\n        perPage={perPage}\n        names={namesChips.chips}\n        owners={ownersChips.chips}\n        statuses={statusesChips.chips}\n        isColumnSortable={isColumnSortable}\n        onPageChange={setPagination}\n        onSearchName={namesChips.add}\n        onRemoveNameChip={namesChips.remove}\n        onRemoveNameChips={namesChips.clear}\n        onSearchOwner={ownersChips.add}\n        onRemoveOwnerChip={ownersChips.remove}\n        onRemoveOwnerChips={ownersChips.clear}\n        onSearchStatus={statusesChips.toggle}\n        onRemoveStatusChip={statusesChips.remove}\n        onRemoveStatusChips={statusesChips.clear}\n        onClearAllFilters={onClearAllFilters}\n        onChangeOwner={onChangeOwner}\n        onDelete={onDelete}\n        onCreate={onCreate}\n        isRowSelected={({ row }) => row.id === selectedInstance}\n        getUrlForInstance={getUrlForInstance}\n        onDetails={onDetailsClick}\n        onConnection={onConnectionsClick}\n        onClickConnectionTabLink={() => {\n          /* TODO */\n        }}\n        onClickSupportLink={() => {\n          /* TODO */\n        }}\n        onInstanceLinkClick={() => {\n          /* TODO */\n        }}\n        onQuickstartGuide={onQuickstartGuide}\n        canHaveInstanceLink={({ status }) => ReadyStatuses.includes(status)}\n        canOpenConnection={({ status }) => ReadyStatuses.includes(status)}\n        canChangeOwner={() => true}\n        canDelete={() => true}\n        emptyStateNoData={\n          hasReadyClusters ? (\n            <EmptyStateNoDedicatedInstances\n              onCreate={onCreate}\n              onQuickstartGuide={onQuickstartGuide}\n            />\n          ) : (\n            <EmptyStateNoDedicatedEntitlement\n              onQuickstartGuide={onQuickstartGuide}\n            />\n          )\n        }\n      />\n    </>\n  );\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { Suspense } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { RedirectOnGateError } from \"../RedirectOnGateError\";\nimport {\n  ChangeOwnerRoute,\n  CreateDedicatedKafkaInstanceRoute,\n  DeleteKafkaInstanceRoute,\n  TermsAndConditionsRoute,\n} from \"./routes\";\nimport { DedicatedKafkaInstancesRoute } from \"./routes/DedicatedKafkaInstancesRoute\";\nimport {\n  ControlPlaneChangeOwnerMatch,\n  ControlPlaneChangeOwnerRoutePath,\n  ControlPlaneClustersPath,\n  ControlPlaneDeleteInstanceMatch,\n  ControlPlaneDeleteInstanceRoutePath,\n  ControlPlaneNewInstanceMatch,\n  ControlPlaneNewInstanceRoutePath,\n  ControlPlaneRouteMatch,\n  ControlPlaneRoutePath,\n  ControlPlaneSelectedInstanceRoutePath,\n  ControlPlaneTermsAndConditionsMatch,\n} from \"./routesConsts\";\n\nexport const DedicatedControlPlaneRoutes: VoidFunctionComponent = () => {\n  return (\n    <Route path={ControlPlaneRouteMatch} exact={true}>\n      <Route path={ControlPlaneTermsAndConditionsMatch}>\n        <TermsAndConditionsRoute\n          createHref={ControlPlaneNewInstanceRoutePath}\n          cancelHref={ControlPlaneRoutePath}\n        />\n      </Route>\n\n      <Route path={ControlPlaneNewInstanceMatch}>\n        <RedirectOnGateError redirectUrl={ControlPlaneTermsAndConditionsMatch}>\n          <Suspense fallback={null}>\n            <CreateDedicatedKafkaInstanceRoute\n              instancesHref={ControlPlaneRoutePath}\n              clustersHref={ControlPlaneClustersPath}\n            />\n          </Suspense>\n        </RedirectOnGateError>\n      </Route>\n\n      <RedirectOnGateError redirectUrl={ControlPlaneRoutePath}>\n        <Route path={ControlPlaneDeleteInstanceMatch}>\n          <DeleteKafkaInstanceRoute instancesHref={ControlPlaneRoutePath} />\n        </Route>\n        <Route path={ControlPlaneChangeOwnerMatch}>\n          <ChangeOwnerRoute instancesHref={ControlPlaneRoutePath} />\n        </Route>\n      </RedirectOnGateError>\n\n      <DedicatedKafkaInstancesRoute\n        activeSection={\"instances\"}\n        instancesHref={ControlPlaneRoutePath}\n        clustersHref={ControlPlaneClustersPath}\n        instanceSelectedHref={ControlPlaneSelectedInstanceRoutePath}\n        instanceCreationHref={ControlPlaneNewInstanceRoutePath}\n        instanceDeletionHref={ControlPlaneDeleteInstanceRoutePath}\n        instanceChangeOwnerHref={ControlPlaneChangeOwnerRoutePath}\n        getUrlForInstance={(instance) =>\n          `${ControlPlaneRoutePath}/${instance.id}/details`\n        }\n      />\n    </Route>\n  );\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { Suspense } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { RedirectOnGateError } from \"../RedirectOnGateError\";\nimport {\n  ChangeOwnerRoute,\n  CreateKafkaInstanceRoute,\n  DeleteKafkaInstanceRoute,\n  KafkaInstancesRoute,\n  TermsAndConditionsRoute,\n} from \"./routes\";\nimport {\n  ControlPlaneChangeOwnerMatch,\n  ControlPlaneChangeOwnerRoutePath,\n  ControlPlaneDeleteInstanceMatch,\n  ControlPlaneDeleteInstanceRoutePath,\n  ControlPlaneNewInstanceMatch,\n  ControlPlaneNewInstanceRoutePath,\n  ControlPlaneRouteMatch,\n  ControlPlaneRoutePath,\n  ControlPlaneRouteRoot,\n  ControlPlaneSelectedInstanceRoutePath,\n  ControlPlaneTermsAndConditionsMatch,\n} from \"./routesConsts\";\n\nexport const LegacyControlPlaneRoutes: VoidFunctionComponent = () => {\n  return (\n    <Route path={ControlPlaneRouteMatch} exact={true}>\n      <Route path={ControlPlaneTermsAndConditionsMatch}>\n        <TermsAndConditionsRoute\n          createHref={ControlPlaneNewInstanceMatch}\n          cancelHref={ControlPlaneRouteRoot}\n        />\n      </Route>\n\n      <Route path={ControlPlaneNewInstanceMatch}>\n        <RedirectOnGateError redirectUrl={ControlPlaneTermsAndConditionsMatch}>\n          <Suspense fallback={null}>\n            <CreateKafkaInstanceRoute instancesHref={ControlPlaneRouteRoot} />\n          </Suspense>\n        </RedirectOnGateError>\n      </Route>\n\n      <RedirectOnGateError redirectUrl={ControlPlaneRouteRoot}>\n        <Route path={ControlPlaneDeleteInstanceMatch}>\n          <DeleteKafkaInstanceRoute instancesHref={ControlPlaneRouteRoot} />\n        </Route>\n        <Route path={ControlPlaneChangeOwnerMatch}>\n          <ChangeOwnerRoute instancesHref={ControlPlaneRouteRoot} />\n        </Route>\n      </RedirectOnGateError>\n\n      <KafkaInstancesRoute\n        instancesHref={ControlPlaneRoutePath}\n        instanceSelectedHref={ControlPlaneSelectedInstanceRoutePath}\n        instanceCreationHref={ControlPlaneNewInstanceRoutePath}\n        instanceDeletionHref={ControlPlaneDeleteInstanceRoutePath}\n        instanceChangeOwnerHref={ControlPlaneChangeOwnerRoutePath}\n        getUrlForInstance={(instance) =>\n          `${ControlPlaneRoutePath}/${instance.id}/details`\n        }\n      />\n    </Route>\n  );\n};\n","import { useDedicatedClusters } from \"consoledot-api\";\nimport { useStandardQuota } from \"consoledot-api/src/queries/useStandardQuota\";\n\nexport function useDedicatedGate() {\n  const quota = useStandardQuota();\n  const dedicated = useDedicatedClusters();\n\n  if (\n    dedicated.isSuccess &&\n    dedicated.data.isEntitled !== false &&\n    quota.data &&\n    quota.data.hasStandardQuota === false\n  ) {\n    return \"dedicated-only\" as const;\n  }\n\n  if (dedicated.isSuccess && dedicated.data.isEntitled === false) {\n    return \"standard-only\" as const;\n  }\n\n  if (!quota.isFetched && !dedicated.isFetched) {\n    return \"loading\" as const;\n  }\n\n  return \"standard-and-dedicated\" as const;\n}\n","import { useQuery } from \"@tanstack/react-query\";\nimport { useApiConfiguration } from \"../ApiProvider\";\nimport { fetchOrganization, fetchStandardQuota } from \"../fetchers\";\nimport { masQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useStandardQuota() {\n  const { refetchInterval } = useApiConfiguration();\n  const { account } = useApi();\n  const ams = account();\n\n  return useQuery({\n    queryKey: masQueries.quota.standardAvailable(),\n    queryFn: async () => {\n      const organization = await fetchOrganization((...args) =>\n        ams.apiAccountsMgmtV1CurrentAccountGet(...args)\n      );\n      if (!organization) {\n        return Promise.reject(\"Missing organization id\");\n      }\n      return fetchStandardQuota(\n        (...args) =>\n          ams.apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(...args),\n        organization\n      );\n    },\n    refetchInterval,\n  });\n}\n","import { Loading } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { DedicatedControlPlaneRoutes } from \"./DedicatedControlPlaneRoutes\";\nimport { LegacyControlPlaneRoutes } from \"./LegacyControlPlaneRoutes\";\nimport { useDedicatedGate } from \"./useDedicatedGate\";\n\nexport const ControlPlaneRoutes: VoidFunctionComponent = () => {\n  const gate = useDedicatedGate();\n\n  if (gate === \"loading\") {\n    return <Loading />;\n  }\n\n  if (gate === \"standard-only\") {\n    return <LegacyControlPlaneRoutes />;\n  }\n\n  return <DedicatedControlPlaneRoutes />;\n};\n","import { useDedicatedClusters } from \"consoledot-api\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { DedicatedClusters, EmptyStateNoDedicatedEntitlement } from \"ui\";\nimport type { DedicatedControlPlaneNavigationProps } from \"../routesConsts\";\nimport { useDedicatedGate } from \"../useDedicatedGate\";\nimport { ConnectedControlPlaneHeader } from \"./ConnectedControlPlaneHeader\";\n\nexport const DedicatedClustersRoute: VoidFunctionComponent<\n  DedicatedControlPlaneNavigationProps\n> = ({ clustersHref, instancesHref }) => {\n  const dedicatedGate = useDedicatedGate();\n  const noEntitlement = dedicatedGate === \"standard-only\";\n\n  return (\n    <>\n      <ConnectedControlPlaneHeader\n        activeSection={\"clusters\"}\n        clustersHref={clustersHref}\n        instancesHref={instancesHref}\n      />\n      {noEntitlement ? (\n        <EmptyStateNoDedicatedEntitlement\n          onQuickstartGuide={() => {\n            /* TODO */\n          }}\n        />\n      ) : (\n        <DedicatedClustersWithEntitlementRoute />\n      )}\n    </>\n  );\n};\n\nexport const DedicatedClustersWithEntitlementRoute: VoidFunctionComponent =\n  () => {\n    const { data } = useDedicatedClusters();\n\n    return (\n      <DedicatedClusters\n        clusters={data?.clusters}\n        itemCount={data?.count}\n        page={1}\n        onPageChange={() => {\n          /* TODO */\n        }}\n        onQuickstartGuide={() => {\n          /* TODO */\n        }}\n      />\n    );\n  };\n","import type { ControlPlaneNavigationProps } from \"../control-plane/routesConsts\";\n\nexport const DataPlaneRoutePath = (root: string) =>\n  `${root}/:id/details` as const;\n\nexport const DataPlaneTopicRoutePath = (root: string) =>\n  `${root}/:id/details/topics/:topicName` as const;\n\nexport const DataPlaneConsumerGroupRoutePath = (root: string) =>\n  `${root}/:id/details/consumer-groups/:consumerGroupId` as const;\n\nexport const DataPlaneTopicConsumerGroupRoutePath = (root: string) =>\n  `${root}/:id/details/topics/:topicName/consumer-groups/:consumerGroupId` as const;\n\nexport const DataPlanePermissionsRoutePath = (root: string) =>\n  `${root}/:id/details/acls/select-account/:selectedAccount` as const;\n\nexport const DataPlaneSelectAccountsRoutePath = (root: string) =>\n  `${root}/:id/details/acls/select-account` as const;\n\nexport const DataPlanePermissionsTableRoutePath = (root: string) =>\n  `${root}/:id/details/acls` as const;\n\nexport type DataPlaneRouteParams = { id: string };\nexport type DataPlaneTopicRouteParams = { id: string; topicName: string };\nexport type DataPlaneConsumerGroupRouteParams = {\n  id: string;\n  consumerGroupId: string;\n};\n\nexport type DataPlaneTopicConsumerRouteParams = {\n  id: string;\n  topicName: string;\n  consumerGroupId: string;\n};\n\nexport type DataPlanePermissionsRouteParams = {\n  selectedAccount: string;\n};\n\nexport type DataPlaneNavigationProps = {\n  instanceDetailsHref: (instanceId: string) => string;\n  instanceTopicsHref: (instanceId: string) => string;\n  instanceConsumerGroupsHref: (instanceId: string) => string;\n} & ControlPlaneNavigationProps;\n\nexport type DataPlaneTopicNavigationProps = {\n  instanceDetailsHref: (instanceId: string) => string;\n  instanceTopicsHref: (instanceId: string) => string;\n  instanceConsumerGroupsHref: (instanceId: string) => string;\n  topicHref: (instanceId: string, topicName: string) => string;\n  deleteTopicHref: (instanceId: string, topicName: string) => string;\n  updateTopicHref: (instanceId: string, topicName: string) => string;\n} & ControlPlaneNavigationProps;\n\nexport type DataPlaneConsumerGroupNavigationsProps = {\n  instanceTopicsHref: (instanceId: string) => string;\n  instanceDetailsHref: (instanceId: string) => string;\n  instanceConsumerGroupsHref: (instanceId: string) => string;\n  viewPartitionConsumerGroupHref: (\n    instanceId: string,\n    consumerGroupId: string\n  ) => string;\n} & ControlPlaneNavigationProps;\n\nexport type DataPlaneTopicConsumerGroupNavigationsProps = {\n  instanceTopicConsumerGroupsHref: (\n    instanceId: string,\n    topicName: string\n  ) => string;\n  viewTopicPartitionConsumerGroupHref: (\n    instanceId: string,\n    consumerGroupId: string,\n    topicName: string\n  ) => string;\n  instanceDetailsHref: (instanceId: string) => string;\n  instanceTopicsHref: (instanceId: string) => string;\n  instanceConsumerGroupsHref: (instanceId: string) => string;\n} & ControlPlaneNavigationProps;\n\nexport type DataPlanePermissionsNavigationProps = {\n  managePermissionsHref: (instanceId: string) => string;\n  editPermissionsHref: (instanceId: string, selectedAccount: string) => string;\n} & ControlPlaneNavigationProps;\n","import { useKafka } from \"consoledot-api/src\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport { ControlPlaneRouteRoot } from \"../control-plane/routesConsts\";\nimport type { DataPlaneRouteParams } from \"./routesConsts\";\nimport { DataPlaneRoutePath } from \"./routesConsts\";\n\nexport function useDataPlaneGate() {\n  const match = useRouteMatch<DataPlaneRouteParams>(\n    DataPlaneRoutePath(ControlPlaneRouteRoot)\n  );\n  if (!match) {\n    throw Error(\"useDataPlaneGate used outside the expected route\");\n  }\n  const { data: instance } = useKafka(match.params.id, true);\n  return { instance: instance as NonNullable<typeof instance>, match };\n}\n","import type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport type { DataPlaneHeaderProps } from \"ui\";\nimport { DataPlaneHeader } from \"ui\";\nimport { useUserControlGate } from \"../../../useUserControlGate\";\nimport { useDrawer } from \"../../control-plane\";\nimport type { ControlPlaneNavigationProps } from \"../../control-plane/routesConsts\";\nimport { useDataPlaneGate } from \"../useDataPlaneGate\";\n\nexport const DataPlaneHeaderConnected: VoidFunctionComponent<\n  ControlPlaneNavigationProps & Pick<DataPlaneHeaderProps, \"activeSection\">\n> = ({ instancesHref, activeSection }) => {\n  const history = useHistory();\n  const { setActiveTab, toggleExpanded } = useDrawer();\n\n  const { userData } = useUserControlGate();\n\n  const {\n    instance,\n    match: { url },\n  } = useDataPlaneGate();\n\n  const sectionsHref = {\n    dashboard: `${url}/dashboard`,\n    topics: `${url}/topics`,\n    consumer: `${url}/consumer-groups`,\n    permissions: `${url}/acls`,\n    settings: `${url}/settings`,\n  };\n\n  const onDelete = useCallback(() => {\n    // TODO: unhardcode this url\n    history.push(`${instancesHref}/${instance.id}/delete`);\n  }, [history, instance, instancesHref]);\n\n  const onChangeOwner = useCallback(() => {\n    // TODO: unhardcode this url\n    history.push(`${instancesHref}/${instance.id}/change-owner`);\n  }, [history, instance, instancesHref]);\n\n  return (\n    <DataPlaneHeader\n      instancesHref={instancesHref}\n      instanceName={instance?.name || \"\"}\n      activeSection={activeSection}\n      sectionsHref={sectionsHref}\n      onDetails={() => {\n        setActiveTab(\"details\");\n        toggleExpanded(true);\n      }}\n      onConnection={() => {\n        setActiveTab(\"connections\");\n        toggleExpanded(true);\n      }}\n      canOpenConnection={userData.canOpenConnection(instance.status)}\n      canChangeOwner={userData.canChangeOwner(instance.owner, instance.status)}\n      canDelete={userData.isUserOwnerOrAdmin(instance.owner)}\n      onChangeOwner={onChangeOwner}\n      onDelete={onDelete}\n    />\n  );\n};\n","import { addNotification } from \"@redhat-cloud-services/frontend-components-notifications\";\nimport { usePaginationSearchParams } from \"@rhoas/app-services-ui-components\";\nimport {\n  useAcls,\n  useDeletePermissionsMutation,\n  useServiceAccounts,\n  useUserAccounts,\n} from \"consoledot-api/src\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport type { Account } from \"ui\";\nimport { PermissionsTable, PrincipalType } from \"ui\";\nimport type { DataPlanePermissionsNavigationProps } from \"../routesConsts\";\nimport { useDataPlaneGate } from \"../useDataPlaneGate\";\nimport { DataPlaneHeaderConnected } from \"./DataPlaneHeaderConnected\";\n\nexport const PermissionsRoute: VoidFunctionComponent<\n  DataPlanePermissionsNavigationProps\n> = ({ instancesHref, managePermissionsHref, editPermissionsHref }) => {\n  const { page, perPage, setPagination, setPaginationQuery } =\n    usePaginationSearchParams();\n  const { instance } = useDataPlaneGate();\n  const { mutateAsync } = useDeletePermissionsMutation();\n  const dispatch = useDispatch();\n\n  const history = useHistory();\n\n  const { data: acls } = useAcls({\n    id: instance.id,\n    adminUrl: instance.adminUrl,\n    page,\n    perPage,\n  });\n\n  const { data: accounts } = useUserAccounts({\n    id: instance.id,\n    adminUrl: instance.adminUrl,\n  });\n\n  const { data: serviceAccounts } = useServiceAccounts({\n    id: instance.id,\n    adminUrl: instance.adminUrl,\n  });\n\n  const userAccounts: Account[] | undefined = accounts?.accounts.map(\n    (userAccount) => {\n      return {\n        id: userAccount.username,\n        displayName: userAccount.displayName,\n        email: userAccount.email,\n        principalType: PrincipalType.UserAccount,\n      };\n    }\n  );\n\n  const serviceAccountList: Account[] | undefined =\n    serviceAccounts?.serviceAccounts.map((serviceAccount) => {\n      return {\n        id: serviceAccount.id,\n        displayName: serviceAccount.displayName,\n        principalType: PrincipalType.ServiceAccount,\n      };\n    });\n\n  const allAccounts =\n    serviceAccountList != undefined && userAccounts != undefined\n      ? [...serviceAccountList, ...userAccounts]\n      : undefined;\n\n  const onDeleteSelected = useCallback(\n    (rowIndex: number[]) => {\n      rowIndex.map((value) => {\n        const rowToDelete = acls?.groups[value];\n        void mutateAsync({\n          instanceId: instance.id,\n          adminUrl: instance.adminUrl || \"\",\n          acl: {\n            patternType: rowToDelete?.resource.patternType,\n            permissionType: rowToDelete?.permission.permission,\n            principal: rowToDelete?.account,\n            resourceName: rowToDelete?.resource.resourceName,\n            operation: rowToDelete?.permission.operation,\n            resourceType: rowToDelete?.resource.resourceType,\n          },\n          onError: (_, message) => {\n            dispatch(\n              addNotification({\n                variant: \"danger\",\n                title: message,\n                dismissable: true,\n                id: \"delete-error\",\n              })\n            );\n          },\n          onSuccess: () => {\n            //We have no action yet to confirm if delete was successfull.\n          },\n        });\n      });\n    },\n    [acls?.groups, mutateAsync, instance.id, instance.adminUrl, dispatch]\n  );\n\n  const onDelete = useCallback(\n    (rowIndex: number) => {\n      const rowToDelete = acls?.groups[rowIndex];\n      void mutateAsync({\n        instanceId: instance.id,\n        adminUrl: instance.adminUrl || \"\",\n        acl: {\n          patternType: rowToDelete?.resource.patternType,\n          permissionType: rowToDelete?.permission.permission,\n          principal: rowToDelete?.account,\n          resourceName: rowToDelete?.resource.resourceName,\n          operation: rowToDelete?.permission.operation,\n          resourceType: rowToDelete?.resource.resourceType,\n        },\n        onError: (_, message) => {\n          dispatch(\n            addNotification({\n              variant: \"danger\",\n              title: message,\n              dismissable: true,\n              id: \"delete-error\",\n            })\n          );\n        },\n        onSuccess: () => {\n          // No action\n        },\n      });\n    },\n    [acls?.groups, mutateAsync, instance.id, instance.adminUrl, dispatch]\n  );\n\n  const onManagePermissionsActionItem = useCallback(\n    (account: string) => {\n      history.push(editPermissionsHref(instance.id, account));\n    },\n    [history, instance.id, editPermissionsHref]\n  );\n  const onManagePermission = useCallback(() => {\n    history.push(managePermissionsHref(instance.id));\n  }, [history, instance.id, managePermissionsHref]);\n\n  return (\n    <>\n      <DataPlaneHeaderConnected\n        instancesHref={instancesHref}\n        activeSection={\"permissions\"}\n      />\n\n      <PermissionsTable\n        allAccounts={allAccounts}\n        permissions={acls?.groups}\n        onDelete={onDelete}\n        onDeleteSelected={onDeleteSelected}\n        onManagePermissions={onManagePermission}\n        onPerPageChange={setPaginationQuery}\n        itemCount={acls?.count}\n        page={page}\n        perPage={perPage}\n        onPageChange={setPagination}\n        onManagePermissionsActionItem={onManagePermissionsActionItem}\n      />\n    </>\n  );\n};\n","import {\n  usePaginationSearchParams,\n  useSortableSearchParams,\n  useURLSearchParamsChips,\n} from \"@rhoas/app-services-ui-components\";\nimport { KafkaTopicsSortableColumns, useTopics } from \"consoledot-api/src\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { KafkaTopics, useTopicLabels } from \"ui\";\nimport type { ControlPlaneNavigationProps } from \"../../control-plane/routesConsts\";\nimport { ControlPlaneRouteRoot } from \"../../control-plane/routesConsts\";\nimport { useDataPlaneGate } from \"../useDataPlaneGate\";\nimport { DataPlaneHeaderConnected } from \"./DataPlaneHeaderConnected\";\n\nexport const TopicsRoute: VoidFunctionComponent<\n  ControlPlaneNavigationProps\n> = ({ instancesHref }) => {\n  const labels = useTopicLabels();\n\n  const history = useHistory();\n\n  const { instance } = useDataPlaneGate();\n  const { page, perPage, setPagination, setPaginationQuery } =\n    usePaginationSearchParams();\n  const resetPaginationQuery = useCallback(\n    () => setPaginationQuery(1, perPage),\n    [perPage, setPaginationQuery]\n  );\n\n  const onCreate = useCallback(() => {\n    history.push(\n      `${ControlPlaneRouteRoot}/${instance.id}/details/topics/create-topic`\n    );\n  }, [history, instance.id]);\n\n  const topicChips = useURLSearchParamsChips(\"topic\", resetPaginationQuery);\n  const [isColumnSortable, sort, sortDirection] = useSortableSearchParams(\n    KafkaTopicsSortableColumns,\n    labels.fields\n  );\n  const { data } = useTopics({\n    id: instance?.id,\n    adminUrl: instance?.adminUrl,\n    page,\n    perPage,\n    sort: sort || undefined,\n    direction: sortDirection,\n    filter: topicChips.chips[0],\n    plan: instance.plan,\n  });\n\n  const onDeleteTopic = useCallback(\n    (topicName: string) => {\n      //TODO: remove hardcode value\n      history.push(\n        `${ControlPlaneRouteRoot}/${instance.id}/details/topics/${topicName}/delete`\n      );\n    },\n    [history, instance.id]\n  );\n\n  const onEditTopic = useCallback(\n    (topicName: string) => {\n      //TODO: remove hardcode value\n      history.push(\n        `${ControlPlaneRouteRoot}/${instance.id}/details/topics/${topicName}/edit`\n      );\n    },\n    [history, instance.id]\n  );\n  return (\n    <>\n      <DataPlaneHeaderConnected\n        instancesHref={instancesHref}\n        activeSection={\"topics\"}\n      />\n      <KafkaTopics\n        topics={data?.topics}\n        itemCount={data?.count}\n        page={page}\n        perPage={perPage}\n        topicName={topicChips.chips}\n        getUrlFortopic={(row) => `./topics/${row.name}`}\n        isColumnSortable={isColumnSortable}\n        onDelete={(row) => onDeleteTopic(row.name)}\n        onEdit={(row) => onEditTopic(row.name)}\n        onSearchTopic={(value) => {\n          topicChips.clear();\n          topicChips.toggle(value);\n        }}\n        onClearAllFilters={topicChips.clear}\n        onCreateTopic={onCreate}\n        onPageChange={setPagination}\n        onRemoveTopicChip={topicChips.clear}\n        onRemoveTopicChips={topicChips.clear}\n      />\n    </>\n  );\n};\n","import { useUpdateKafkaMutation } from \"consoledot-api/src\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport type { SettingsProps } from \"ui\";\nimport { Settings as SettingsComp } from \"ui\";\nimport { useAlerts } from \"../../../useAlerts\";\nimport type { ControlPlaneNavigationProps } from \"../../control-plane/routesConsts\";\nimport { useDataPlaneGate } from \"../useDataPlaneGate\";\nimport { DataPlaneHeaderConnected } from \"./DataPlaneHeaderConnected\";\n\nexport const SettingsRoute: VoidFunctionComponent<\n  ControlPlaneNavigationProps\n> = ({ instancesHref }) => {\n  const { instance } = useDataPlaneGate();\n  const updateInstance = useUpdateKafkaMutation();\n\n  const { addAlert } = useAlerts();\n\n  const onSubmitReAuthentication = useCallback<\n    SettingsProps[\"onSubmitReAuthentication\"]\n  >(\n    async (reauthenticationEnabled) => {\n      try {\n        await updateInstance.mutateAsync({\n          id: instance.id,\n          updates: { reauthentication_enabled: reauthenticationEnabled },\n        });\n        const status = reauthenticationEnabled ? \"on\" : \"off\";\n        addAlert(\n          \"success\",\n          `Connection re-authentication turned ${status} `,\n          true,\n          \"reauthentication-enable-success\"\n        );\n        return reauthenticationEnabled;\n      } catch {\n        addAlert(\n          \"danger\",\n          \"Something went wrong\",\n          true,\n          \"reauthentication-enable-error\",\n          \"We're unable to update connection re-authentication at this time. Try again later.\"\n        );\n        return instance.request.reauthentication_enabled;\n      }\n    },\n    [\n      addAlert,\n      instance.id,\n      instance.request.reauthentication_enabled,\n      updateInstance,\n    ]\n  );\n  return (\n    <>\n      <DataPlaneHeaderConnected\n        instancesHref={instancesHref}\n        activeSection={\"settings\"}\n      />\n      <SettingsComp\n        onSubmitReAuthentication={onSubmitReAuthentication}\n        reauthenticationEnabled={instance.request.reauthentication_enabled}\n      />\n    </>\n  );\n};\n","import {\n  useKafkaFetchQuery,\n  useKafkaKpisFetchQuery,\n  useKafkaMetricsFetchQuery,\n  useTopicsFetchQuery,\n  useTopicsMetricsFetchQuery,\n} from \"consoledot-api/src\";\nimport {\n  metricsDismissLagAlerts,\n  metricsIsLagAlertsDismissed,\n} from \"local-storage-helpers\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport type { MetricsProps } from \"ui\";\nimport { Metrics } from \"ui\";\nimport type { ControlPlaneNavigationProps } from \"../../control-plane/routesConsts\";\nimport { ControlPlaneRouteRoot } from \"../../control-plane/routesConsts\";\nimport { useDataPlaneGate } from \"../useDataPlaneGate\";\nimport { DataPlaneHeaderConnected } from \"./DataPlaneHeaderConnected\";\n\nexport const DashboardRoute: VoidFunctionComponent<\n  ControlPlaneNavigationProps\n> = ({ instancesHref }) => {\n  const {\n    instance,\n    match: { params },\n  } = useDataPlaneGate();\n  const history = useHistory();\n\n  const [hasUserAlreadyClosedAlert, setHasUserAlreadyClosedAlert] = useState(\n    metricsIsLagAlertsDismissed()\n  );\n\n  const onAlertClose = useCallback(() => {\n    setHasUserAlreadyClosedAlert(true);\n    metricsDismissLagAlerts();\n  }, []);\n\n  const queryInstance = useKafkaFetchQuery();\n  const queryKpisMetrics = useKafkaKpisFetchQuery();\n  const queryInstanceMetrics = useKafkaMetricsFetchQuery();\n  const queryTopicMetrics = useTopicsMetricsFetchQuery();\n  const queryTopics = useTopicsFetchQuery();\n\n  const getMetricsKpi: MetricsProps[\"getMetricsKpi\"] = useCallback(async () => {\n    const kpis = await queryKpisMetrics(params.id);\n    return {\n      ...kpis,\n      topicPartitionsLimit: instance.maxPartitions || 0,\n    };\n  }, [instance, params.id, queryKpisMetrics]);\n\n  const getKafkaInstanceMetrics: MetricsProps[\"getKafkaInstanceMetrics\"] =\n    useCallback(\n      async ({ interval, duration, selectedBroker }) => {\n        const [instance, metrics] = await Promise.all([\n          queryInstance(params.id),\n          queryInstanceMetrics({\n            id: params.id,\n            duration,\n            interval,\n            selectedBroker,\n          }),\n        ]);\n        if (!instance) {\n          return Promise.reject(\"Can't retrieve instance\");\n        }\n        return {\n          ...metrics,\n          diskSpaceLimit:\n            (instance.request.max_data_retention_size?.bytes || 0) / 1073741824,\n          connectionsLimit: instance.connections || 0,\n          connectionRateLimit: instance.connectionRate || 0,\n        };\n      },\n      [params.id, queryInstance, queryInstanceMetrics]\n    );\n\n  const getTopicsMetrics: MetricsProps[\"getTopicsMetrics\"] = useCallback(\n    async ({ interval, duration, selectedTopic }) => {\n      const [instance, metrics] = await Promise.all([\n        queryInstance(params.id),\n        queryTopicMetrics({ id: params.id, duration, interval, selectedTopic }),\n      ]);\n      if (!instance || !instance.adminUrl) {\n        return Promise.reject(\"Can't retrieve instance\");\n      }\n      const kafkaTopics = (\n        await queryTopics({\n          id: instance.id,\n          adminUrl: instance.adminUrl,\n          page: 1,\n          perPage: 1000,\n          plan: instance.plan,\n        })\n      ).topics.map((t) => t.name);\n      return {\n        ...metrics,\n        kafkaTopics,\n      };\n    },\n    [params.id, queryInstance, queryTopicMetrics, queryTopics]\n  );\n\n  const onCreateTopic = useCallback(() => {\n    history.push(\n      `${ControlPlaneRouteRoot}/${instance.id}/details/topics/create-topic`\n    );\n  }, [history, instance.id]);\n\n  return (\n    <>\n      <DataPlaneHeaderConnected\n        instancesHref={instancesHref}\n        activeSection={\"dashboard\"}\n      />\n      <Metrics\n        onCreateTopic={onCreateTopic}\n        onAlertClose={onAlertClose}\n        hasUserAlreadyClosedAlert={hasUserAlreadyClosedAlert}\n        getKafkaInstanceMetrics={getKafkaInstanceMetrics}\n        getTopicsMetrics={getTopicsMetrics}\n        getMetricsKpi={getMetricsKpi}\n      />\n    </>\n  );\n};\n","import {\n  usePaginationSearchParams,\n  useSortableSearchParams,\n  useURLSearchParamsChips,\n} from \"@rhoas/app-services-ui-components\";\nimport {\n  KafkaConsumerGroupSortableColumns,\n  useConsumerGroups,\n} from \"consoledot-api/src\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { ConsumerGroups, useConsumerGroupLabels } from \"ui\";\nimport type { DataPlaneNavigationProps } from \"../routesConsts\";\nimport { useDataPlaneGate } from \"../useDataPlaneGate\";\nimport { DataPlaneHeaderConnected } from \"./DataPlaneHeaderConnected\";\n\nexport const ConsumerGroupsRoute: VoidFunctionComponent<\n  DataPlaneNavigationProps\n> = ({ instancesHref, instanceConsumerGroupsHref }) => {\n  const { instance } = useDataPlaneGate();\n\n  const history = useHistory();\n\n  const labels = useConsumerGroupLabels();\n\n  const { page, perPage, setPagination, setPaginationQuery } =\n    usePaginationSearchParams();\n  const resetPaginationQuery = useCallback(\n    () => setPaginationQuery(1, perPage),\n    [perPage, setPaginationQuery]\n  );\n\n  const consumerName = useURLSearchParamsChips(\n    \"consumer\",\n    resetPaginationQuery\n  );\n  const [isColumnSortable, sort, sortDirection] = useSortableSearchParams(\n    KafkaConsumerGroupSortableColumns,\n    labels.fields\n  );\n  const { data } = useConsumerGroups({\n    id: instance?.id,\n    adminUrl: instance?.adminUrl,\n    page,\n    perPage,\n    sort: sort || undefined,\n    direction: sortDirection,\n    groupId: consumerName.chips[0],\n  });\n\n  const onDeletConsumerGroup = useCallback(\n    (groupId: string) => {\n      //TODO: remove hardcode value\n      history.push(\n        `${instanceConsumerGroupsHref(instance.id)}/${groupId}/delete`\n      );\n    },\n    [history, instance.id, instanceConsumerGroupsHref]\n  );\n\n  const onViewPartition = useCallback(\n    (groupId: string) => {\n      //TODO: remove hardcode value\n      history.push(\n        `${instanceConsumerGroupsHref(instance.id)}/${groupId}/view-partition`\n      );\n    },\n    [history, instance.id, instanceConsumerGroupsHref]\n  );\n\n  const onClickResetOffset = useCallback(\n    (groupId: string) => {\n      //TODO: remove hardcode value\n      history.push(\n        `${instanceConsumerGroupsHref(instance.id)}/${groupId}/reset-offset`\n      );\n    },\n    [history, instance.id, instanceConsumerGroupsHref]\n  );\n  return (\n    <>\n      <DataPlaneHeaderConnected\n        instancesHref={instancesHref}\n        activeSection={\"consumer\"}\n      />\n      <ConsumerGroups\n        consumers={data?.groups}\n        itemCount={data?.count}\n        page={page}\n        perPage={perPage}\n        consumerName={consumerName.chips}\n        isRowSelected={() => false}\n        isColumnSortable={isColumnSortable}\n        onDelete={(row) => onDeletConsumerGroup(row.name)}\n        onSearchConsumer={(value) => {\n          consumerName.clear();\n          consumerName.toggle(value);\n        }}\n        onClearAllFilters={consumerName.clear}\n        onPageChange={setPagination}\n        onRemoveConsumerChip={consumerName.clear}\n        onRemoveConsumerChips={consumerName.clear}\n        onViewPartition={(row) => onViewPartition(row.name)}\n        onViewResetOffset={(row) => onClickResetOffset(row.name)}\n      />\n    </>\n  );\n};\n","import { useTopic } from \"consoledot-api/src\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport { ControlPlaneRouteRoot } from \"../control-plane/routesConsts\";\nimport type { DataPlaneTopicRouteParams } from \"./routesConsts\";\nimport { DataPlaneTopicRoutePath } from \"./routesConsts\";\nimport { useDataPlaneGate } from \"./useDataPlaneGate\";\n\nexport function useTopicGate() {\n  const { instance } = useDataPlaneGate();\n  const match = useRouteMatch<DataPlaneTopicRouteParams>(\n    DataPlaneTopicRoutePath(ControlPlaneRouteRoot)\n  );\n  if (!match) {\n    throw Error(\"useDataPlaneGate used outside the expected route\");\n  }\n  const { data: topic } = useTopic(\n    {\n      id: instance.id,\n      adminUrl: instance.adminUrl,\n      topicName: match.params.topicName,\n      plan: instance.plan,\n    },\n    true\n  );\n\n  return {\n    instance,\n    topic: topic as NonNullable<typeof topic>,\n    match,\n  };\n}\n","import type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport type { DataPlaneTopicHeaderProps } from \"ui\";\nimport { DataPlaneTopicHeader } from \"ui\";\nimport { useUserControlGate } from \"../../../useUserControlGate\";\nimport { useDrawer } from \"../../control-plane\";\nimport type { DataPlaneNavigationProps } from \"../routesConsts\";\nimport { useTopicGate } from \"../useTopicGate\";\n\nexport const DataPlaneTopicHeaderConnected: VoidFunctionComponent<\n  DataPlaneNavigationProps & Pick<DataPlaneTopicHeaderProps, \"activeSection\">\n> = ({\n  instanceDetailsHref,\n  instanceTopicsHref,\n  instancesHref,\n  activeSection,\n}) => {\n  const history = useHistory();\n  const { setActiveTab, toggleExpanded } = useDrawer();\n  const { userData } = useUserControlGate();\n  const {\n    instance,\n    topic,\n    match: { url },\n  } = useTopicGate();\n\n  const tabsHref = {\n    consumer: `${url}/consumer-groups`,\n    messages: `${url}/messages`,\n    properties: `${url}/properties`,\n    schemas: `${url}/schemas`,\n  };\n\n  const onDelete = useCallback(() => {\n    // TODO: unhardcode this url\n    history.push(`${instancesHref}/${instance.id}/delete`);\n  }, [history, instance, instancesHref]);\n\n  const onChangeOwner = useCallback(() => {\n    // TODO: unhardcode this url\n    history.push(`${instancesHref}/${instance.id}/change-owner`);\n  }, [history, instance, instancesHref]);\n\n  return (\n    <DataPlaneTopicHeader\n      instancesHref={instancesHref}\n      instanceName={instance.name}\n      instanceDetailHref={instanceDetailsHref(instance.id)}\n      instanceTopicsHref={instanceTopicsHref(instance.id)}\n      activeSection={activeSection}\n      topicName={topic.name}\n      tabsHref={tabsHref}\n      onDetails={() => {\n        setActiveTab(\"details\");\n        toggleExpanded(true);\n      }}\n      onConnection={() => {\n        setActiveTab(\"connections\");\n        toggleExpanded(true);\n      }}\n      canOpenConnection={userData.canOpenConnection(instance.status)}\n      canChangeOwner={userData.canChangeOwner(instance.owner, instance.status)}\n      canDelete={userData.isUserOwnerOrAdmin(instance.owner)}\n      onChangeOwner={onChangeOwner}\n      onDelete={onDelete}\n    />\n  );\n};\n","import {\n  usePaginationSearchParams,\n  useSortableSearchParams,\n  useURLSearchParamsChips,\n} from \"@rhoas/app-services-ui-components\";\nimport {\n  KafkaConsumerGroupSortableColumns,\n  useConsumerGroups,\n} from \"consoledot-api/src\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { ConsumerGroups, useConsumerGroupLabels } from \"ui\";\nimport { ControlPlaneRouteRoot } from \"../../control-plane/routesConsts\";\nimport type { DataPlaneNavigationProps } from \"../routesConsts\";\nimport { useTopicGate } from \"../useTopicGate\";\nimport { DataPlaneTopicHeaderConnected } from \"./DataPlaneTopicHeaderConnected\";\n\nexport const TopicConsumerGroupsRoute: VoidFunctionComponent<\n  DataPlaneNavigationProps\n> = ({\n  instanceDetailsHref,\n  instanceTopicsHref,\n  instancesHref,\n  instanceConsumerGroupsHref,\n}) => {\n  const { instance, topic } = useTopicGate();\n\n  const history = useHistory();\n\n  const labels = useConsumerGroupLabels();\n\n  const { page, perPage, setPagination, setPaginationQuery } =\n    usePaginationSearchParams();\n\n  const resetPaginationQuery = useCallback(\n    () => setPaginationQuery(1, perPage),\n    [perPage, setPaginationQuery]\n  );\n\n  const consumerName = useURLSearchParamsChips(\n    \"consumer\",\n    resetPaginationQuery\n  );\n  const [isColumnSortable, sort, sortDirection] = useSortableSearchParams(\n    KafkaConsumerGroupSortableColumns,\n    labels.fields\n  );\n\n  const { data } = useConsumerGroups({\n    id: instance?.id,\n    adminUrl: instance?.adminUrl,\n    page,\n    perPage,\n    sort: sort || undefined,\n    direction: sortDirection,\n    groupId: consumerName.chips[0],\n    topic: topic.name,\n  });\n\n  const onDeletConsumerGroup = useCallback(\n    (groupId: string) => {\n      //TODO: remove hardcode value\n      history.push(\n        `${ControlPlaneRouteRoot}/${instance.id}/details/topics/${topic.name}/consumer-groups/${groupId}/delete`\n      );\n    },\n    [history, instance.id, topic.name]\n  );\n\n  const onViewPartition = useCallback(\n    (groupId: string) => {\n      //TODO: remove hardcode value\n      history.push(\n        `${ControlPlaneRouteRoot}/${instance.id}/details/topics/${topic.name}/consumer-groups/${groupId}/view-partition`\n      );\n    },\n    [history, instance.id, topic.name]\n  );\n\n  const onClickResetOffset = useCallback(\n    (groupId: string) => {\n      //TODO: remove hardcode value\n      history.push(\n        `${ControlPlaneRouteRoot}/${instance.id}/details/topics/${topic.name}/consumer-groups/${groupId}/reset-offset`\n      );\n    },\n    [history, instance.id, topic.name]\n  );\n\n  return (\n    <>\n      <DataPlaneTopicHeaderConnected\n        instancesHref={instancesHref}\n        instanceDetailsHref={instanceDetailsHref}\n        instanceTopicsHref={instanceTopicsHref}\n        instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n        activeSection={\"consumer\"}\n      />\n      <ConsumerGroups\n        consumers={data?.groups}\n        itemCount={data?.count}\n        page={page}\n        perPage={perPage}\n        consumerName={consumerName.chips}\n        isRowSelected={() => false}\n        isColumnSortable={isColumnSortable}\n        onDelete={(row) => onDeletConsumerGroup(row.name)}\n        onSearchConsumer={(value) => {\n          consumerName.clear();\n          consumerName.toggle(value);\n        }}\n        onClearAllFilters={consumerName.clear}\n        onPageChange={setPagination}\n        onRemoveConsumerChip={consumerName.clear}\n        onRemoveConsumerChips={consumerName.clear}\n        onViewPartition={(row) => onViewPartition(row.name)}\n        onViewResetOffset={(row) => onClickResetOffset(row.name)}\n      />\n    </>\n  );\n};\n","import { useMessagesFetchQuery } from \"consoledot-api/src\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport type { KafkaMessageBrowserProps } from \"ui\";\nimport { KafkaMessageBrowser } from \"ui\";\nimport type { DataPlaneNavigationProps } from \"../routesConsts\";\nimport { useTopicGate } from \"../useTopicGate\";\nimport { DataPlaneTopicHeaderConnected } from \"./DataPlaneTopicHeaderConnected\";\n\nexport const TopicMessagesGroupsRoute: VoidFunctionComponent<\n  DataPlaneNavigationProps\n> = ({\n  instanceDetailsHref,\n  instanceTopicsHref,\n  instancesHref,\n  instanceConsumerGroupsHref,\n}) => {\n  const { instance, topic } = useTopicGate();\n  const kafkaTopicMessagesFetchQuery = useMessagesFetchQuery();\n\n  const getMessages = useCallback<KafkaMessageBrowserProps[\"getMessages\"]>(\n    async (params) => {\n      if (!instance.adminUrl) {\n        throw Error(\"Invalid instance adminUrl\");\n      }\n      const messages = await kafkaTopicMessagesFetchQuery({\n        ...params,\n        id: instance.id,\n        adminUrl: instance.adminUrl,\n        topicName: topic.name,\n      });\n      return {\n        messages,\n        partitions: topic.partitions.length,\n      };\n    },\n    [\n      instance.adminUrl,\n      instance.id,\n      kafkaTopicMessagesFetchQuery,\n      topic.name,\n      topic.partitions.length,\n    ]\n  );\n\n  return (\n    <>\n      <DataPlaneTopicHeaderConnected\n        instancesHref={instancesHref}\n        instanceDetailsHref={instanceDetailsHref}\n        instanceTopicsHref={instanceTopicsHref}\n        instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n        activeSection={\"messages\"}\n      />\n      <KafkaMessageBrowser getMessages={getMessages} />\n    </>\n  );\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { TopicProperties } from \"ui\";\nimport type { DataPlaneTopicNavigationProps } from \"../routesConsts\";\nimport { useTopicGate } from \"../useTopicGate\";\nimport { DataPlaneTopicHeaderConnected } from \"./DataPlaneTopicHeaderConnected\";\n\nexport const TopicPropertiesRoute: VoidFunctionComponent<\n  DataPlaneTopicNavigationProps\n> = ({\n  instanceDetailsHref,\n  instanceTopicsHref,\n  instanceConsumerGroupsHref,\n  instancesHref,\n  deleteTopicHref,\n  updateTopicHref,\n}) => {\n  const { instance, topic } = useTopicGate();\n\n  return (\n    <>\n      <DataPlaneTopicHeaderConnected\n        instancesHref={instancesHref}\n        instanceDetailsHref={instanceDetailsHref}\n        instanceTopicsHref={instanceTopicsHref}\n        instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n        activeSection={\"properties\"}\n      />\n      <TopicProperties\n        topic={topic}\n        deleteTopicHref={deleteTopicHref(instance.id, topic.name)}\n        updateTopicHref={updateTopicHref(instance.id, topic.name)}\n      />\n    </>\n  );\n};\n","/* eslint-disable */\n// @ts-nocheck\n/* tslint:disable */\nimport { ScalprumComponent } from \"@scalprum/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport type { DataPlaneNavigationProps } from \"../routesConsts\";\nimport { useTopicGate } from \"../useTopicGate\";\nimport { DataPlaneTopicHeaderConnected } from \"./DataPlaneTopicHeaderConnected\";\n\nexport const TopicSchemasRoute: VoidFunctionComponent<\n  DataPlaneNavigationProps\n> = ({\n  instanceDetailsHref,\n  instanceTopicsHref,\n  instancesHref,\n  instanceConsumerGroupsHref,\n}) => {\n  const chrome = useChrome();\n  const { topic } = useTopicGate();\n  return (\n    <>\n      <DataPlaneTopicHeaderConnected\n        instancesHref={instancesHref}\n        instanceDetailsHref={instanceDetailsHref}\n        instanceTopicsHref={instanceTopicsHref}\n        instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n        activeSection={\"schemas\"}\n      />\n      <ScalprumComponent\n        appName=\"applicationServices\"\n        scope=\"applicationServices\"\n        module=\"./TopicSchema\"\n        topicName={topic.name}\n      />\n    </>\n  );\n};\n","import { useConsumerGroup } from \"consoledot-api/src\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport { ControlPlaneRouteRoot } from \"../control-plane/routesConsts\";\nimport type { DataPlaneConsumerGroupRouteParams } from \"./routesConsts\";\nimport { DataPlaneConsumerGroupRoutePath } from \"./routesConsts\";\nimport { useDataPlaneGate } from \"./useDataPlaneGate\";\n\nexport function useConsumerGroupGate() {\n  const { instance } = useDataPlaneGate();\n  const match = useRouteMatch<DataPlaneConsumerGroupRouteParams>(\n    DataPlaneConsumerGroupRoutePath(ControlPlaneRouteRoot)\n  );\n  if (!match) {\n    throw Error(\"useConsumerGroupGate used outside the expected route\");\n  }\n  const { data: consumerGroup } = useConsumerGroup(\n    {\n      id: instance.id,\n      adminUrl: instance.adminUrl,\n      consumerGroupId: match.params.consumerGroupId,\n    },\n    true\n  );\n\n  return {\n    instance,\n    consumerGroup: consumerGroup as NonNullable<typeof consumerGroup>,\n    match,\n  };\n}\n","import { useDeleteConsumerGroupMutation } from \"consoledot-api/src\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { DeleteConsumerGroup } from \"ui\";\nimport { useAlerts } from \"../../../useAlerts\";\nimport type { DataPlaneConsumerGroupNavigationsProps } from \"../routesConsts\";\nimport { useConsumerGroupGate } from \"../useConsumerGroupGate\";\n\nexport const ConsumerGroupDeleteRoute: VoidFunctionComponent<\n  DataPlaneConsumerGroupNavigationsProps\n> = ({ instanceConsumerGroupsHref }) => {\n  const history = useHistory();\n\n  const { addAlert } = useAlerts();\n\n  const { instance, consumerGroup } = useConsumerGroupGate();\n\n  const { mutateAsync } = useDeleteConsumerGroupMutation();\n\n  const onCancel = useCallback(() => {\n    history.push(instanceConsumerGroupsHref(instance.id));\n  }, [history, instance.id, instanceConsumerGroupsHref]);\n\n  const onDelete = useCallback(() => {\n    void mutateAsync({\n      instanceId: instance.id,\n      adminUrl: instance.adminUrl!,\n      consumerGroupId: consumerGroup.name,\n      onError: (_, message) => {\n        addAlert(\"danger\", message, true, \"delete-consumer-group-error\");\n      },\n      onSuccess: () => {\n        history.replace(instanceConsumerGroupsHref(instance.id));\n        addAlert(\n          \"success\",\n          `Successfully deleted consumer group ${consumerGroup.name}`,\n          true,\n          \"delete-consumer-group-success\"\n        );\n      },\n    });\n  }, [\n    mutateAsync,\n    instance.id,\n    instance.adminUrl,\n    consumerGroup.name,\n    addAlert,\n    history,\n    instanceConsumerGroupsHref,\n  ]);\n\n  return (\n    <DeleteConsumerGroup\n      isModalOpen={true}\n      onClose={onCancel}\n      onDeleteConsumer={onDelete}\n      state={consumerGroup.state}\n      consumerName={consumerGroup.name}\n      appendTo={() =>\n        (document.getElementById(\"chrome-app-render-root\") as HTMLElement) ||\n        document.body\n      }\n    />\n  );\n};\n","import { useResetConsumerGroupMutation } from \"consoledot-api/src\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport type { OffsetValue } from \"ui\";\nimport { ConsumerGroupResetOffset } from \"ui\";\nimport { useAlerts } from \"../../../useAlerts\";\nimport type { DataPlaneConsumerGroupNavigationsProps } from \"../routesConsts\";\nimport { useConsumerGroupGate } from \"../useConsumerGroupGate\";\n\nexport const ConsumerGroupResetOffsetRoute: VoidFunctionComponent<\n  DataPlaneConsumerGroupNavigationsProps\n> = ({ instanceConsumerGroupsHref }) => {\n  const { instance, consumerGroup } = useConsumerGroupGate();\n\n  const { addAlert } = useAlerts();\n\n  const { mutateAsync } = useResetConsumerGroupMutation();\n\n  const history = useHistory();\n\n  const onCancel = useCallback(() => {\n    history.push(instanceConsumerGroupsHref(instance.id));\n  }, [history, instance.id, instanceConsumerGroupsHref]);\n\n  const getTopics = () => {\n    const topics = (consumerGroup.consumers || []).map(\n      (consumer) => consumer.topic\n    );\n    const distinctTopics = Array.from(new Set(topics));\n    return distinctTopics;\n  };\n\n  const onConfirmResetOffset = useCallback(\n    (\n      topic: string,\n      offset: OffsetValue,\n      partitions: number[],\n      customOffsetValue: string\n    ) => {\n      void mutateAsync({\n        instanceId: instance.id,\n        adminUrl: instance.adminUrl!,\n        consumerGroupId: consumerGroup.name,\n        topic: topic,\n        offset: offset,\n        partitions: partitions,\n        value: customOffsetValue,\n        onError: (_, message) => {\n          addAlert(\"danger\", message, true, \"reset-offset-error\");\n        },\n        onSuccess: () => {\n          history.replace(instanceConsumerGroupsHref(instance.id));\n          addAlert(\n            \"success\",\n            \"offsets for the consumer group have been successfully reset\",\n            true,\n            \"reset-offset-success\"\n          );\n        },\n      });\n    },\n    [\n      mutateAsync,\n      instance.id,\n      instance.adminUrl,\n      consumerGroup.name,\n      addAlert,\n      history,\n      instanceConsumerGroupsHref,\n    ]\n  );\n\n  return (\n    <ConsumerGroupResetOffset\n      isModalOpen={true}\n      state={consumerGroup.state}\n      groupId={consumerGroup.name}\n      topics={getTopics()}\n      consumers={consumerGroup.consumers}\n      onClickClose={onCancel}\n      onClickResetOffset={onConfirmResetOffset}\n    />\n  );\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { ConsumerGroupDrawer } from \"ui\";\nimport type { DataPlaneConsumerGroupNavigationsProps } from \"../routesConsts\";\nimport { useConsumerGroupGate } from \"../useConsumerGroupGate\";\nimport { ConsumerGroupsRoute } from \"./ConsumerGroupsRoute\";\n\nexport const ConsumerGroupViewPartitionRoute: VoidFunctionComponent<\n  DataPlaneConsumerGroupNavigationsProps\n> = ({\n  instanceConsumerGroupsHref,\n  viewPartitionConsumerGroupHref,\n  instancesHref,\n  instanceDetailsHref,\n  instanceTopicsHref,\n}) => {\n  const { instance, consumerGroup } = useConsumerGroupGate();\n\n  const history = useHistory();\n\n  const onCancel = useCallback(() => {\n    history.push(instanceConsumerGroupsHref(instance.id));\n  }, [history, instance.id, instanceConsumerGroupsHref]);\n\n  const onDelete = useCallback(() => {\n    history.push(\n      `${viewPartitionConsumerGroupHref(\n        instance.id,\n        consumerGroup.name\n      )}/delete`\n    );\n  }, [\n    history,\n    instance.id,\n    consumerGroup.name,\n    viewPartitionConsumerGroupHref,\n  ]);\n\n  const onClickResetOffset = useCallback(() => {\n    history.push(\n      `${viewPartitionConsumerGroupHref(\n        instance.id,\n        consumerGroup.name\n      )}/reset-offset`\n    );\n  }, [\n    history,\n    instance.id,\n    consumerGroup.name,\n    viewPartitionConsumerGroupHref,\n  ]);\n\n  return (\n    <ConsumerGroupDrawer\n      consumerGroupByTopic={false}\n      state={consumerGroup.state}\n      activeMembers={consumerGroup.activeConsumers!}\n      partitionsWithLag={consumerGroup.laggingPartitions!}\n      consumers={consumerGroup.consumers}\n      groupId={consumerGroup.name}\n      onSelectDeleteConsumerGroup={onDelete}\n      onSelectResetOffsetConsumerGroup={onClickResetOffset}\n      isExpanded={true}\n      onClickClose={onCancel}\n    >\n      <ConsumerGroupsRoute\n        instancesHref={instancesHref}\n        instanceTopicsHref={instanceTopicsHref}\n        instanceDetailsHref={instanceDetailsHref}\n        instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n      />\n    </ConsumerGroupDrawer>\n  );\n};\n","import { useConsumerGroup } from \"consoledot-api/src\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport { ControlPlaneRouteRoot } from \"../control-plane/routesConsts\";\nimport type { DataPlaneTopicConsumerRouteParams } from \"./routesConsts\";\nimport { DataPlaneTopicConsumerGroupRoutePath } from \"./routesConsts\";\nimport { useTopicGate } from \"./useTopicGate\";\n\nexport function useTopicConsumerGroupGate() {\n  const { instance, topic } = useTopicGate();\n  const match = useRouteMatch<DataPlaneTopicConsumerRouteParams>(\n    DataPlaneTopicConsumerGroupRoutePath(ControlPlaneRouteRoot)\n  );\n  if (!match) {\n    throw Error(\"useTopicConsumerGroupGate used outside the expected route\");\n  }\n  const { data: consumerGroup } = useConsumerGroup(\n    {\n      id: instance.id,\n      adminUrl: instance.adminUrl,\n      consumerGroupId: match.params.consumerGroupId,\n    },\n    true\n  );\n\n  return {\n    instance,\n    consumerGroup: consumerGroup as NonNullable<typeof consumerGroup>,\n    match,\n    topic,\n  };\n}\n","import { useDeleteConsumerGroupMutation } from \"consoledot-api/src\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { DeleteConsumerGroup } from \"ui\";\nimport { useAlerts } from \"../../../useAlerts\";\nimport type { DataPlaneTopicConsumerGroupNavigationsProps } from \"../routesConsts\";\nimport { useTopicConsumerGroupGate } from \"../useTopicConsumerGroupGate\";\n\nexport const TopicConsumerGroupDeleteRoute: VoidFunctionComponent<\n  DataPlaneTopicConsumerGroupNavigationsProps\n> = ({ instanceTopicConsumerGroupsHref }) => {\n  const history = useHistory();\n\n  const { addAlert } = useAlerts();\n\n  const { instance, consumerGroup, topic } = useTopicConsumerGroupGate();\n\n  const { mutateAsync } = useDeleteConsumerGroupMutation();\n\n  const onCancel = useCallback(() => {\n    history.push(instanceTopicConsumerGroupsHref(instance.id, topic.name));\n  }, [history, instance.id, topic.name, instanceTopicConsumerGroupsHref]);\n\n  const onDelete = useCallback(() => {\n    void mutateAsync({\n      instanceId: instance.id,\n      adminUrl: instance.adminUrl!,\n      consumerGroupId: consumerGroup.name,\n      onError: (_, message) => {\n        addAlert(\"danger\", message, true, \"delete-consumer-group-error\");\n      },\n      onSuccess: () => {\n        history.replace(\n          instanceTopicConsumerGroupsHref(instance.id, topic.name)\n        );\n        addAlert(\n          \"success\",\n          `Successfully deleted consumer group ${consumerGroup.name}`,\n          true,\n          \"delete-consumer-group-success\"\n        );\n      },\n    });\n  }, [\n    mutateAsync,\n    instance.id,\n    instance.adminUrl,\n    consumerGroup.name,\n    addAlert,\n    history,\n    instanceTopicConsumerGroupsHref,\n    topic.name,\n  ]);\n\n  return (\n    <DeleteConsumerGroup\n      isModalOpen={true}\n      onClose={onCancel}\n      onDeleteConsumer={onDelete}\n      state={consumerGroup.state}\n      consumerName={consumerGroup.name}\n      appendTo={() =>\n        (document.getElementById(\"chrome-app-render-root\") as HTMLElement) ||\n        document.body\n      }\n    />\n  );\n};\n","import { useResetConsumerGroupMutation } from \"consoledot-api/src\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport type { OffsetValue } from \"ui\";\nimport { ConsumerGroupResetOffset } from \"ui\";\nimport { useAlerts } from \"../../../useAlerts\";\nimport type { DataPlaneTopicConsumerGroupNavigationsProps } from \"../routesConsts\";\nimport { useTopicConsumerGroupGate } from \"../useTopicConsumerGroupGate\";\n\nexport const TopicConsumerGroupResetOffsetRoute: VoidFunctionComponent<\n  DataPlaneTopicConsumerGroupNavigationsProps\n> = ({ instanceTopicConsumerGroupsHref }) => {\n  const { instance, topic, consumerGroup } = useTopicConsumerGroupGate();\n\n  const { addAlert } = useAlerts();\n\n  const { mutateAsync } = useResetConsumerGroupMutation();\n\n  const history = useHistory();\n\n  const onCancel = useCallback(() => {\n    history.push(instanceTopicConsumerGroupsHref(instance.id, topic.name));\n  }, [history, instance.id, topic.name, instanceTopicConsumerGroupsHref]);\n\n  const getTopics = () => {\n    const topics = (consumerGroup.consumers || []).map(\n      (consumer) => consumer.topic\n    );\n    const distinctTopics = Array.from(new Set(topics));\n    return distinctTopics;\n  };\n\n  const onConfirmResetOffset = useCallback(\n    (\n      topicName: string,\n      offset: OffsetValue,\n      partitions: number[],\n      customOffsetValue: string\n    ) => {\n      void mutateAsync({\n        instanceId: instance.id,\n        adminUrl: instance.adminUrl!,\n        consumerGroupId: consumerGroup.name,\n        topic: topicName,\n        offset: offset,\n        partitions: partitions,\n        value: customOffsetValue,\n        onError: (_, message) => {\n          addAlert(\"danger\", message, true, \"reset-offset-error\");\n        },\n        onSuccess: () => {\n          history.replace(\n            instanceTopicConsumerGroupsHref(instance.id, topic.name)\n          );\n          addAlert(\n            \"success\",\n            \"offsets for the consumer group have been successfully reset\",\n            true,\n            \"reset-offset-success\"\n          );\n        },\n      });\n    },\n    [\n      mutateAsync,\n      instance.id,\n      instance.adminUrl,\n      consumerGroup.name,\n      addAlert,\n      history,\n      instanceTopicConsumerGroupsHref,\n      topic.name,\n    ]\n  );\n\n  return (\n    <ConsumerGroupResetOffset\n      isModalOpen={true}\n      state={consumerGroup.state}\n      groupId={consumerGroup.name}\n      topics={getTopics()}\n      consumers={consumerGroup.consumers}\n      onClickClose={onCancel}\n      onClickResetOffset={onConfirmResetOffset}\n    />\n  );\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { ConsumerGroupDrawer } from \"ui\";\nimport type { DataPlaneTopicConsumerGroupNavigationsProps } from \"../routesConsts\";\nimport { useTopicConsumerGroupGate } from \"../useTopicConsumerGroupGate\";\nimport { TopicConsumerGroupsRoute } from \"./TopicConsumerGroupsRoute\";\n\nexport const TopicConsumerGroupViewPartitionRoute: VoidFunctionComponent<\n  DataPlaneTopicConsumerGroupNavigationsProps\n> = ({\n  instanceTopicConsumerGroupsHref,\n  instancesHref,\n  viewTopicPartitionConsumerGroupHref,\n  instanceDetailsHref,\n  instanceTopicsHref,\n  instanceConsumerGroupsHref,\n}) => {\n  const { instance, topic, consumerGroup } = useTopicConsumerGroupGate();\n\n  const history = useHistory();\n\n  const onCancel = useCallback(() => {\n    history.push(instanceTopicConsumerGroupsHref(instance.id, topic.name));\n  }, [history, instance.id, topic.name, instanceTopicConsumerGroupsHref]);\n\n  const onDelete = useCallback(() => {\n    history.push(\n      `${viewTopicPartitionConsumerGroupHref(\n        instance.id,\n        topic.name,\n        consumerGroup.name\n      )}/delete`\n    );\n  }, [\n    history,\n    instance.id,\n    consumerGroup.name,\n    topic.name,\n    viewTopicPartitionConsumerGroupHref,\n  ]);\n\n  const onClickResetOffset = useCallback(() => {\n    history.push(\n      `${viewTopicPartitionConsumerGroupHref(\n        instance.id,\n        topic.name,\n        consumerGroup.name\n      )}/reset-offset`\n    );\n  }, [\n    history,\n    instance.id,\n    topic.name,\n    consumerGroup.name,\n    viewTopicPartitionConsumerGroupHref,\n  ]);\n\n  return (\n    <ConsumerGroupDrawer\n      consumerGroupByTopic={false}\n      state={consumerGroup.state}\n      activeMembers={consumerGroup.activeConsumers!}\n      partitionsWithLag={consumerGroup.laggingPartitions!}\n      consumers={consumerGroup.consumers}\n      groupId={consumerGroup.name}\n      onSelectDeleteConsumerGroup={onDelete}\n      onSelectResetOffsetConsumerGroup={onClickResetOffset}\n      isExpanded={true}\n      onClickClose={onCancel}\n    >\n      <TopicConsumerGroupsRoute\n        instancesHref={instancesHref}\n        instanceDetailsHref={instanceDetailsHref}\n        instanceTopicsHref={instanceTopicsHref}\n        instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n      />\n    </ConsumerGroupDrawer>\n  );\n};\n","import type { DeleteModalProps } from \"@rhoas/app-services-ui-components\";\nimport {\n  DeleteModal,\n  Trans,\n  useTranslation,\n} from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\n\nexport type DeleteKafkaTopicProps = {\n  topicName: string;\n} & Omit<\n  DeleteModalProps,\n  \"title\" | \"variant\" | \"confirmationValue\" | \"children\"\n>;\n\nexport const DeleteKafkaTopic: VoidFunctionComponent<DeleteKafkaTopicProps> = ({\n  topicName,\n  ...props\n}) => {\n  const { t } = useTranslation(\"kafka\");\n\n  return (\n    <DeleteModal\n      {...props}\n      variant={\"destructive\"}\n      title={t(\"delete_topic_title\")}\n      confirmationValue={topicName}\n    >\n      <Trans\n        ns={\"kafka\"}\n        i18nKey={\"delete_topic_message\"}\n        components={[<strong />]}\n        values={{\n          topicName,\n        }}\n      />\n    </DeleteModal>\n  );\n};\n","import { useChrome } from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport { useDeleteTopicMutation } from \"consoledot-api/src\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { DeleteKafkaTopic } from \"ui/src/components/DeleteKafkaTopic\";\nimport { useAlerts } from \"../../../useAlerts\";\nimport type { DataPlaneTopicNavigationProps } from \"../routesConsts\";\nimport { useTopicGate } from \"../useTopicGate\";\n\nexport const TopicDeleteRoute: VoidFunctionComponent<\n  DataPlaneTopicNavigationProps\n> = ({ instanceTopicsHref }) => {\n  const { analytics } = useChrome();\n  const history = useHistory();\n\n  const { instance, topic } = useTopicGate();\n\n  const { addAlert } = useAlerts();\n  const { mutateAsync, isLoading: isDeleting } = useDeleteTopicMutation();\n\n  void analytics.track(\"RHOSAK Delete Topic\", {\n    entityId: instance.id,\n    topic: topic.name,\n    status: \"prompt\",\n  });\n\n  const onCancel = useCallback(() => {\n    history.goBack();\n  }, [history]);\n\n  const onDelete = useCallback(() => {\n    if (!instance.adminUrl) {\n      throw Error(\"Invalid instance adminUrl\");\n    }\n    void mutateAsync({\n      instanceId: instance.id,\n      adminUrl: instance.adminUrl,\n      name: topic.name,\n      onError: (_, message) => {\n        void analytics.track(\"RHOSAK Delete Topic\", {\n          entityId: instance.id,\n          topic: topic.name,\n          status: \"failure\",\n        });\n        addAlert(\"danger\", message, true, \"delete-topic-error\");\n      },\n      onSuccess: () => {\n        void analytics.track(\"RHOSAK Delete Topic\", {\n          entityId: instance.id,\n          topic: topic.name,\n          status: \"success\",\n        });\n        history.replace(instanceTopicsHref(instance.id));\n        addAlert(\n          \"success\",\n          `Successfully deleted topic ${topic.name}`,\n          true,\n          \"delete-topic-success\"\n        );\n      },\n    });\n  }, [\n    instance.adminUrl,\n    instance.id,\n    mutateAsync,\n    topic.name,\n    analytics,\n    addAlert,\n    history,\n    instanceTopicsHref,\n  ]);\n\n  return (\n    <DeleteKafkaTopic\n      topicName={topic.name}\n      isModalOpen={true}\n      isDeleting={isDeleting}\n      appendTo={() =>\n        (document.getElementById(\"chrome-app-render-root\") as HTMLElement) ||\n        document.body\n      }\n      onDelete={onDelete}\n      onCancel={onCancel}\n    />\n  );\n};\n","import { useUpdateTopicMutation } from \"consoledot-api/src\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport type { TopicForm } from \"ui\";\nimport { EditTopicProperties } from \"ui\";\nimport { useAlerts } from \"../../../useAlerts\";\nimport type { DataPlaneNavigationProps } from \"../routesConsts\";\nimport { useTopicGate } from \"../useTopicGate\";\nimport { DataPlaneTopicHeaderConnected } from \"./DataPlaneTopicHeaderConnected\";\n\nexport const TopicEditPropertiesRoute: VoidFunctionComponent<\n  DataPlaneNavigationProps\n> = ({ instanceDetailsHref, instanceTopicsHref, instancesHref, instanceConsumerGroupsHref }) => {\n  const history = useHistory();\n  const { instance, topic } = useTopicGate();\n  const { addAlert } = useAlerts();\n  if (instance.maxPartitions === undefined) {\n    throw new Error(\n      `CreateTopicRoute, unexpected maxPartition undefined for instance ${instance.name}`\n    );\n  }\n  const updateTopic = useUpdateTopicMutation();\n\n  const onSave = useCallback(\n    (topicData: TopicForm) => {\n      if (instance.adminUrl === undefined) {\n        throw new Error(\n          `EditTopicRoute, adminUrl undefined for instance ${instance.name}`\n        );\n      }\n      void updateTopic.mutateAsync({\n        instanceId: instance.id,\n        adminUrl: instance.adminUrl,\n        topic: topicData,\n\n        onSuccess: () => {\n          history.push(instanceTopicsHref(instance.id));\n          addAlert(\n            \"success\",\n            `The topic was successfully updated in the Kafka instance.`,\n            true,\n            \"edit-topic-success\"\n          );\n        },\n        onError: (_, message) => {\n          addAlert(\"danger\", message, true, \"edit-topic-fail\");\n        },\n      });\n    },\n    [\n      instance.adminUrl,\n      instance.id,\n      instance.name,\n      updateTopic,\n      history,\n      instanceTopicsHref,\n      addAlert,\n    ]\n  );\n\n  const onCancel = useCallback(() => {\n    history.push(instanceTopicsHref(instance.id));\n  }, [history, instance.id, instanceTopicsHref]);\n\n  const isSaving = updateTopic.isLoading;\n\n  return (\n    <>\n      <DataPlaneTopicHeaderConnected\n        instancesHref={instancesHref}\n        instanceDetailsHref={instanceDetailsHref}\n        instanceTopicsHref={instanceTopicsHref}\n        instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n        activeSection={\"properties\"}\n      />\n      <EditTopicProperties\n        topic={topic}\n        onCancel={onCancel}\n        onSave={onSave}\n        availablePartitionLimit={instance.maxPartitions}\n        isSaving={isSaving}\n      />\n    </>\n  );\n};\n","import type { AclBinding } from \"@rhoas/kafka-instance-sdk\";\nimport {\n  useAcls,\n  useConsumerGroups,\n  useDeletePermissionsMutation,\n  useTopics,\n  useUpdatePermissionsMutation,\n} from \"consoledot-api/src\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { useHistory, useRouteMatch } from \"react-router-dom\";\nimport { EditPermissions } from \"ui\";\nimport { useAlerts } from \"../../../useAlerts\";\nimport { ControlPlaneRouteRoot } from \"../../control-plane/routesConsts\";\nimport type {\n  DataPlanePermissionsNavigationProps,\n  DataPlanePermissionsRouteParams,\n} from \"../routesConsts\";\nimport { DataPlanePermissionsRoutePath } from \"../routesConsts\";\nimport { useDataPlaneGate } from \"../useDataPlaneGate\";\n\nexport const PermissionsEditRoute: VoidFunctionComponent<\n  DataPlanePermissionsNavigationProps\n> = ({ managePermissionsHref }) => {\n  const { instance } = useDataPlaneGate();\n  const { addAlert } = useAlerts();\n\n  const match = useRouteMatch<DataPlanePermissionsRouteParams>(\n    DataPlanePermissionsRoutePath(ControlPlaneRouteRoot)\n  );\n  if (!match) {\n    throw Error(\"EditPermissions used outside the expected route\");\n  }\n\n  const { data: acls } = useAcls({\n    id: instance.id,\n    adminUrl: instance.adminUrl,\n  });\n\n  const { data: topics } = useTopics({\n    id: instance.id,\n    adminUrl: instance.adminUrl,\n    plan: instance.plan,\n  });\n\n  const { data: consumerGroups } = useConsumerGroups({\n    id: instance.id,\n    adminUrl: instance.adminUrl,\n  });\n\n  const consumerGroupsList = consumerGroups?.groups.map(\n    (consumer) => consumer.name\n  );\n  const topicsList = topics?.topics.map((topic) => topic.name);\n  const { mutateAsync } = useDeletePermissionsMutation();\n  const updatePermissions = useUpdatePermissionsMutation();\n\n  const history = useHistory();\n\n  const onSaveAcls = useCallback(\n    (\n      aclPermission: AclBinding[] | undefined,\n      deletedPermissions: AclBinding[] | undefined\n    ) => {\n      if (aclPermission != undefined && aclPermission.length > 0) {\n        aclPermission.map(\n          (aclData) =>\n            void updatePermissions.mutateAsync({\n              instanceId: instance.id,\n              adminUrl: instance?.adminUrl || \"\",\n              acl: {\n                patternType: aclData.patternType,\n                permission: aclData.permission,\n                principal: aclData.principal,\n                operation: aclData.operation,\n                resourceName: aclData.resourceName,\n                resourceType: aclData.resourceType,\n              },\n\n              onSuccess: () => {\n                history.push(managePermissionsHref(instance.id));\n              },\n              onError: (_, message) => {\n                addAlert(\"danger\", message, true, \"save-error\");\n              },\n            })\n        );\n      }\n\n      if (deletedPermissions != undefined && deletedPermissions.length > 0) {\n        deletedPermissions.map((aclToDelete) => {\n          void mutateAsync({\n            instanceId: instance.id,\n            adminUrl: instance.adminUrl || \"\",\n            acl: {\n              patternType: aclToDelete.patternType,\n              permissionType: aclToDelete.permission,\n              principal: aclToDelete.principal,\n              resourceName: aclToDelete.resourceName,\n              operation: aclToDelete.operation,\n              resourceType: aclToDelete.resourceType,\n            },\n            onError: (_, message) => {\n              addAlert(\"danger\", message, true, \"delete-error\");\n            },\n            onSuccess: () => {\n              history.push(managePermissionsHref(instance.id));\n            },\n          });\n        });\n      }\n    },\n    [\n      addAlert,\n      history,\n      instance.adminUrl,\n      instance.id,\n      managePermissionsHref,\n      mutateAsync,\n      updatePermissions,\n    ]\n  );\n\n  const existingAcls: AclBinding[] | undefined = acls?.groups.map((acl) => {\n    return {\n      resourceName: acl.resource.resourceName,\n      patternType: acl.resource.patternType,\n      permission: acl.permission.permission,\n      operation: acl.permission.operation,\n      principal: acl.account,\n      resourceType: acl.resource.resourceType,\n    };\n  });\n\n  const aclsForSelectedAccount = existingAcls?.filter(\n    (value) =>\n      value.principal == `User:${match.params.selectedAccount}` ||\n      value.principal == \"User:*\"\n  );\n\n  const onClose = useCallback(() => {\n    history.push(managePermissionsHref(instance.id));\n  }, [history, instance.id, managePermissionsHref]);\n\n  return (\n    <EditPermissions\n      onCancel={onClose}\n      kafkaName={instance.name}\n      onSave={onSaveAcls}\n      topicsList={topicsList || []}\n      consumerGroupsList={consumerGroupsList || []}\n      selectedAccount={\n        match.params.selectedAccount == \"all-accounts\"\n          ? \"All accounts\"\n          : match.params.selectedAccount\n      }\n      acls={aclsForSelectedAccount || []}\n    />\n  );\n};\n","import { useServiceAccounts, useUserAccounts } from \"consoledot-api\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport type { Account } from \"ui\";\nimport { PrincipalType, SelectAccount } from \"ui\";\nimport { useUserControlGate } from \"../../../useUserControlGate\";\nimport type { DataPlanePermissionsNavigationProps } from \"../routesConsts\";\nimport { useDataPlaneGate } from \"../useDataPlaneGate\";\n\nexport const PermissionsSelectAccountRoute: VoidFunctionComponent<\n  DataPlanePermissionsNavigationProps\n> = ({ managePermissionsHref, editPermissionsHref }) => {\n  const { instance } = useDataPlaneGate();\n  const { data: accounts } = useUserAccounts({\n    id: instance.id,\n    adminUrl: instance.adminUrl,\n  });\n\n  const { data: serviceAccounts } = useServiceAccounts({\n    id: instance.id,\n    adminUrl: instance.adminUrl,\n  });\n\n  const { userData } = useUserControlGate();\n  const userAccounts: Account[] | undefined = accounts?.accounts.map(\n    (userAccount) => {\n      return {\n        displayName: userAccount.displayName,\n        id: userAccount.username,\n        principalType: PrincipalType.UserAccount,\n      };\n    }\n  );\n\n  const serviceAccountList: Account[] | undefined =\n    serviceAccounts?.serviceAccounts.map((userAccount) => {\n      return {\n        displayName: userAccount.displayName,\n        id: userAccount.id,\n        principalType: PrincipalType.ServiceAccount,\n      };\n    });\n\n  const allAccounts =\n    userAccounts != undefined && serviceAccountList != undefined\n      ? [...serviceAccountList, ...userAccounts]\n      : undefined;\n  const filteredAccounts = allAccounts?.filter(\n    (value) => value.id !== instance.owner && value.id !== userData.username\n  );\n\n  const history = useHistory();\n\n  const onNext = useCallback(\n    (selectedAccount: string | undefined) => {\n      history.push(\n        editPermissionsHref(\n          instance.id,\n          selectedAccount === \"All accounts\"\n            ? \"all-accounts\"\n            : selectedAccount || \"\"\n        )\n      );\n    },\n    [history, instance.id, editPermissionsHref]\n  );\n\n  const onClose = useCallback(() => {\n    history.push(managePermissionsHref(instance.id));\n  }, [history, instance.id, managePermissionsHref]);\n\n  return (\n    <SelectAccount\n      accounts={filteredAccounts}\n      kafkaName={instance.name}\n      onNext={onNext}\n      onClose={onClose}\n    />\n  );\n};\n","import { useChrome } from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport { useCreateTopicMutation, useTopics } from \"consoledot-api/src\";\nimport {\n  developerDefaults,\n  standardDefaults,\n} from \"consoledot-api/src/transformers/topicTransformer\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback, useMemo } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport type { CreateTopicPageProps, TopicForm } from \"ui\";\nimport { CreateTopic } from \"ui\";\nimport { useAlerts } from \"../../../useAlerts\";\nimport type { DataPlaneNavigationProps } from \"../routesConsts\";\nimport { useDataPlaneGate } from \"../useDataPlaneGate\";\n\nexport const TopicCreateRoute: VoidFunctionComponent<\n  DataPlaneNavigationProps\n> = ({ instancesHref, instanceTopicsHref }) => {\n  const { analytics } = useChrome();\n  const history = useHistory();\n  const { addAlert } = useAlerts();\n  const { instance } = useDataPlaneGate();\n  const createTopic = useCreateTopicMutation();\n  const availabilityZone = instance.az;\n  const { data: topics } = useTopics(\n    {\n      id: instance.id,\n      adminUrl: instance.adminUrl,\n      plan: instance.plan,\n    },\n    false\n  );\n\n  void analytics.track(\"RHOSAK Create Topic\", {\n    entityId: instance.id,\n    status: \"prompt\",\n  });\n\n  if (instance.maxPartitions === undefined) {\n    throw new Error(\n      `CreateTopicRoute, unexpected maxPartition undefined for instance ${instance.name}`\n    );\n  }\n\n  const checkTopicName: CreateTopicPageProps[\"checkTopicName\"] = useCallback(\n    (topicName) => {\n      const selectedTopic = topics?.topics.filter(\n        (topic) => topic.name === topicName\n      );\n      if (selectedTopic && selectedTopic?.length > 0) {\n        return false;\n      } else {\n        return true;\n      }\n    },\n    [topics?.topics]\n  );\n\n  const onCloseCreateTopic = useCallback(() => {\n    history.push(instanceTopicsHref(instance.id));\n  }, [history, instance.id, instanceTopicsHref]);\n\n  const onSave = useCallback(\n    (topicData: TopicForm) => {\n      void createTopic.mutateAsync({\n        instanceId: instance.id,\n        adminUrl: instance?.adminUrl || \"\",\n        topic: topicData,\n\n        onSuccess: () => {\n          void analytics.track(\"RHOSAK Create Topic\", {\n            entityId: instance.id,\n            topic: topicData.name,\n            status: \"success\",\n          });\n\n          history.push(instanceTopicsHref(instance.id));\n          addAlert(\n            \"success\",\n            \"The topic was successfully created in the Kafka instance\",\n            true,\n            \"create-topic-success\"\n          );\n        },\n        onError: (_, message) => {\n          void analytics.track(\"RHOSAK Create Topic\", {\n            entityId: instance.id,\n            topic: topicData.name,\n            status: \"failure\",\n          });\n          addAlert(\"danger\", message, true, \"create-topic-fail\");\n        },\n      });\n    },\n    [\n      addAlert,\n      analytics,\n      createTopic,\n      history,\n      instance?.adminUrl,\n      instance.id,\n      instanceTopicsHref,\n    ]\n  );\n\n  const initialTopicValues = useMemo(() => {\n    return instance.plan === \"developer\"\n      ? {\n          name: \"\",\n          partitions: [{ partition: 1, id: 1 }],\n          ...developerDefaults,\n        }\n      : {\n          name: \"\",\n          partitions: [{ partition: 1, id: 1 }],\n          ...standardDefaults,\n        };\n  }, [instance.plan]);\n\n  const isSaving = createTopic.isLoading;\n\n  return (\n    <CreateTopic\n      kafkaName={instance.name}\n      kafkaPageLink={instanceTopicsHref(instance.id)}\n      kafkaInstanceLink={instancesHref}\n      onSave={onSave}\n      initialTopicValues={initialTopicValues}\n      onCloseCreateTopic={onCloseCreateTopic}\n      checkTopicName={checkTopicName}\n      availablePartitionLimit={instance.maxPartitions}\n      availabilityZone={availabilityZone}\n      isSaving={isSaving}\n    />\n  );\n};\n","import { InvalidObject } from \"@redhat-cloud-services/frontend-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport { ControlPlaneRouteRoot } from \"../control-plane/routesConsts\";\nimport { RedirectOnGateError } from \"../RedirectOnGateError\";\nimport {\n  ConsumerGroupDeleteRoute,\n  ConsumerGroupResetOffsetRoute,\n  ConsumerGroupsRoute,\n  ConsumerGroupViewPartitionRoute,\n  DashboardRoute,\n  PermissionsEditRoute,\n  PermissionsRoute,\n  PermissionsSelectAccountRoute,\n  SettingsRoute,\n  TopicConsumerGroupDeleteRoute,\n  TopicConsumerGroupResetOffsetRoute,\n  TopicConsumerGroupsRoute,\n  TopicConsumerGroupViewPartitionRoute,\n  TopicCreateRoute,\n  TopicDeleteRoute,\n  TopicEditPropertiesRoute,\n  TopicMessagesGroupsRoute,\n  TopicPropertiesRoute,\n  TopicSchemasRoute,\n  TopicsRoute,\n} from \"./routes\";\n\nimport { DataPlaneTopicRoutePath } from \"./routesConsts\";\n\nexport type DataPlaneRoutesProps = {\n  root: string;\n  instancesHref: string;\n  instanceId: string;\n};\n\nexport const DataPlaneRoutes: VoidFunctionComponent<DataPlaneRoutesProps> = ({\n  root,\n  instancesHref,\n  instanceId,\n}) => {\n  const instanceDetailsHref = (id: string) => `${instancesHref}/${id}/details`;\n\n  const instanceTopicsHref = (id: string) =>\n    `${instancesHref}/${id}/details/topics`;\n\n  const topicPropertyHref = (id: string, topic: string) =>\n    `${instanceDetailsHref(id)}/topics/${topic}/properties`;\n\n  const topicHref = (id: string, topic: string) =>\n    `${instanceDetailsHref(id)}/topics/${topic}`;\n\n  const updateTopicHref = (id: string, topic: string) =>\n    `${topicHref(id, topic)}/edit`;\n\n  const deleteTopicHref = (id: string, topic: string) =>\n    `${topicHref(id, topic)}/delete`;\n\n  const instanceConsumerGroupsHref = (id: string) =>\n    `${instanceDetailsHref(id)}/consumer-groups`;\n\n  const viewPartitionConsumerGroupHref = (\n    id: string,\n    consumerGroupId: string\n  ) =>\n    `${instanceDetailsHref(\n      id\n    )}/consumer-groups/${consumerGroupId}/view-partition`;\n\n  const instanceTopicConsumerGroupHref = (id: string, topic: string) =>\n    `${instanceDetailsHref(id)}/topics/${topic}/consumer-groups`;\n\n  const viewTopicPartitionConsumerGroupHref = (\n    id: string,\n    topic: string,\n    consumerGroupId: string\n  ) =>\n    `${instanceDetailsHref(\n      id\n    )}/topics/${topic}/consumer-groups/${consumerGroupId}/view-partition`;\n\n  const managePermissionsHref = (id: string) =>\n    `${instanceDetailsHref(id)}/acls/select-account`;\n\n  const editPermissionsHref = (id: string, selectedAccount: string) =>\n    `${instanceDetailsHref(\n      id\n    )}/acls/select-account/${selectedAccount}/edit-permissions`;\n\n  const permissionsModalHref = (id: string) =>\n    `${instanceDetailsHref(id)}/acls`;\n\n  return (\n    <Route path={root}>\n      <RedirectOnGateError redirectUrl={ControlPlaneRouteRoot}>\n        <Switch>\n          <Route path={`${root}/dashboard`} exact>\n            <DashboardRoute instancesHref={instancesHref} />\n          </Route>\n\n          <Route path={`${root}/topics`} exact>\n            <TopicsRoute instancesHref={instancesHref} />\n          </Route>\n\n          <Route path={`${root}/consumer-groups`} exact>\n            <ConsumerGroupsRoute\n              instancesHref={instancesHref}\n              instanceDetailsHref={instanceDetailsHref}\n              instanceTopicsHref={instanceTopicsHref}\n              instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n            />\n          </Route>\n\n          <Route path={`${root}/acls`}>\n            <Route path={`${root}/acls/select-account`}>\n              <PermissionsSelectAccountRoute\n                instancesHref={instancesHref}\n                managePermissionsHref={permissionsModalHref}\n                editPermissionsHref={editPermissionsHref}\n              />\n            </Route>\n            <Route\n              path={`${root}/acls/select-account/:selectedAccount/edit-permissions`}\n            >\n              <PermissionsEditRoute\n                instancesHref={instancesHref}\n                managePermissionsHref={permissionsModalHref}\n                editPermissionsHref={editPermissionsHref}\n              />\n            </Route>\n            <PermissionsRoute\n              instancesHref={instancesHref}\n              managePermissionsHref={managePermissionsHref}\n              editPermissionsHref={editPermissionsHref}\n            />\n          </Route>\n\n          <Route path={`${root}/settings`} exact>\n            <SettingsRoute instancesHref={instancesHref} />\n          </Route>\n          <Route path={`${root}/topics`}>\n            <RedirectOnGateError redirectUrl={instanceTopicsHref(instanceId)}>\n              <Switch>\n                <Route path={`${root}/topics/create-topic`} exact>\n                  <TopicCreateRoute\n                    instancesHref={instancesHref}\n                    instanceDetailsHref={instanceDetailsHref}\n                    instanceTopicsHref={instanceTopicsHref}\n                    instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n                  />\n                </Route>\n                <Route path={`${root}/topics/:topicName/consumer-groups`}>\n                  <RedirectOnGateError\n                    redirectUrl={instanceTopicsHref(instanceId)}\n                  >\n                    <Switch>\n                      <Route\n                        path={`${DataPlaneTopicRoutePath(\n                          root\n                        )}/consumer-groups/:consumerGroupId/view-partition`}\n                      >\n                        <Route\n                          path={`${DataPlaneTopicRoutePath(\n                            root\n                          )}/consumer-groups/:consumerGroupId/view-partition/delete`}\n                        >\n                          <TopicConsumerGroupDeleteRoute\n                            instancesHref={instancesHref}\n                            instanceTopicConsumerGroupsHref={\n                              instanceTopicConsumerGroupHref\n                            }\n                            viewTopicPartitionConsumerGroupHref={\n                              viewTopicPartitionConsumerGroupHref\n                            }\n                            instanceDetailsHref={instanceDetailsHref}\n                            instanceTopicsHref={instanceTopicsHref}\n                            instanceConsumerGroupsHref={\n                              instanceConsumerGroupsHref\n                            }\n                          />\n                        </Route>\n                        <Route\n                          path={`${DataPlaneTopicRoutePath(\n                            root\n                          )}/consumer-groups/:consumerGroupId/view-partition/reset-offset`}\n                        >\n                          <TopicConsumerGroupResetOffsetRoute\n                            instancesHref={instancesHref}\n                            instanceTopicConsumerGroupsHref={\n                              instanceTopicConsumerGroupHref\n                            }\n                            viewTopicPartitionConsumerGroupHref={\n                              viewTopicPartitionConsumerGroupHref\n                            }\n                            instanceDetailsHref={instanceDetailsHref}\n                            instanceTopicsHref={instanceTopicsHref}\n                            instanceConsumerGroupsHref={\n                              instanceConsumerGroupsHref\n                            }\n                          />\n                        </Route>\n                        <TopicConsumerGroupViewPartitionRoute\n                          instancesHref={instancesHref}\n                          instanceTopicConsumerGroupsHref={\n                            instanceTopicConsumerGroupHref\n                          }\n                          viewTopicPartitionConsumerGroupHref={\n                            viewTopicPartitionConsumerGroupHref\n                          }\n                          instanceDetailsHref={instanceDetailsHref}\n                          instanceTopicsHref={instanceTopicsHref}\n                          instanceConsumerGroupsHref={\n                            instanceConsumerGroupsHref\n                          }\n                        />\n                      </Route>\n                      <Route\n                        path={`${DataPlaneTopicRoutePath(\n                          root\n                        )}/consumer-groups/:consumerGroupId/reset-offset`}\n                      >\n                        <TopicConsumerGroupResetOffsetRoute\n                          instancesHref={instancesHref}\n                          instanceTopicConsumerGroupsHref={\n                            instanceTopicConsumerGroupHref\n                          }\n                          viewTopicPartitionConsumerGroupHref={\n                            viewTopicPartitionConsumerGroupHref\n                          }\n                          instanceDetailsHref={instanceDetailsHref}\n                          instanceTopicsHref={instanceTopicsHref}\n                          instanceConsumerGroupsHref={\n                            instanceConsumerGroupsHref\n                          }\n                        />\n                      </Route>\n                      <Route\n                        path={`${DataPlaneTopicRoutePath(\n                          root\n                        )}/consumer-groups/:consumerGroupId/delete`}\n                      >\n                        <TopicConsumerGroupDeleteRoute\n                          instancesHref={instancesHref}\n                          instanceTopicConsumerGroupsHref={\n                            instanceTopicConsumerGroupHref\n                          }\n                          viewTopicPartitionConsumerGroupHref={\n                            viewTopicPartitionConsumerGroupHref\n                          }\n                          instanceDetailsHref={instanceDetailsHref}\n                          instanceTopicsHref={instanceTopicsHref}\n                          instanceConsumerGroupsHref={\n                            instanceConsumerGroupsHref\n                          }\n                        />\n                      </Route>\n                    </Switch>\n                  </RedirectOnGateError>\n                  <TopicConsumerGroupsRoute\n                    instancesHref={instancesHref}\n                    instanceDetailsHref={instanceDetailsHref}\n                    instanceTopicsHref={instanceTopicsHref}\n                    instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n                  />\n                </Route>\n                <Route path={`${root}/topics/:topicName/messages`} exact>\n                  <TopicMessagesGroupsRoute\n                    instancesHref={instancesHref}\n                    instanceDetailsHref={instanceDetailsHref}\n                    instanceTopicsHref={instanceTopicsHref}\n                    instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n                  />\n                </Route>\n\n                <Route path={`${root}/topics/:topicName/properties/edit`} exact>\n                  <TopicEditPropertiesRoute\n                    instancesHref={instancesHref}\n                    instanceDetailsHref={instanceDetailsHref}\n                    instanceTopicsHref={instanceTopicsHref}\n                    instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n                  />\n                </Route>\n                <Route path={`${root}/topics/:topicName/properties`}>\n                  <Route path={`${root}/topics/:topicName/properties/delete`}>\n                    <TopicDeleteRoute\n                      instancesHref={instancesHref}\n                      instanceDetailsHref={instanceDetailsHref}\n                      instanceTopicsHref={instanceTopicsHref}\n                      instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n                      topicHref={topicHref}\n                      updateTopicHref={updateTopicHref}\n                      deleteTopicHref={deleteTopicHref}\n                    />\n                  </Route>\n                  <TopicPropertiesRoute\n                    instancesHref={instancesHref}\n                    instanceDetailsHref={instanceDetailsHref}\n                    instanceTopicsHref={instanceTopicsHref}\n                    instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n                    topicHref={topicPropertyHref}\n                    updateTopicHref={updateTopicHref}\n                    deleteTopicHref={deleteTopicHref}\n                  />\n                </Route>\n                <Route path={`${root}/topics/:topicName/schemas`} exact>\n                  <TopicSchemasRoute\n                    instancesHref={instancesHref}\n                    instanceDetailsHref={instanceDetailsHref}\n                    instanceTopicsHref={instanceTopicsHref}\n                    instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n                  />\n                </Route>\n                <Route path={`${root}/topics/:topicName/delete`} exact>\n                  <TopicDeleteRoute\n                    instancesHref={instancesHref}\n                    instanceDetailsHref={instanceDetailsHref}\n                    instanceTopicsHref={instanceTopicsHref}\n                    instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n                    topicHref={topicHref}\n                    updateTopicHref={updateTopicHref}\n                    deleteTopicHref={deleteTopicHref}\n                  />\n                </Route>\n                <Route path={`${root}/topics/:topicName/edit`} exact>\n                  <TopicEditPropertiesRoute\n                    instancesHref={instancesHref}\n                    instanceDetailsHref={instanceDetailsHref}\n                    instanceTopicsHref={instanceTopicsHref}\n                    instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n                  />\n                </Route>\n                <Redirect\n                  from={`${root}/topics/:topicName/`}\n                  to={`${root}/topics/:topicName/consumer-groups`}\n                  exact\n                />\n              </Switch>\n            </RedirectOnGateError>\n          </Route>\n          <Route path={`${root}/consumer-groups`}>\n            <RedirectOnGateError\n              redirectUrl={instanceConsumerGroupsHref(instanceId)}\n            >\n              <Switch>\n                <Route\n                  path={`${root}/consumer-groups/:consumerGroupId/view-partition`}\n                >\n                  <Route\n                    path={`${root}/consumer-groups/:consumerGroupId/view-partition/delete`}\n                  >\n                    <ConsumerGroupDeleteRoute\n                      instancesHref={instancesHref}\n                      instanceDetailsHref={instanceDetailsHref}\n                      instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n                      instanceTopicsHref={instanceTopicsHref}\n                      viewPartitionConsumerGroupHref={\n                        viewPartitionConsumerGroupHref\n                      }\n                    />\n                  </Route>\n                  <Route\n                    path={`${root}/consumer-groups/:consumerGroupId/view-partition/reset-offset`}\n                  >\n                    <ConsumerGroupResetOffsetRoute\n                      instancesHref={instancesHref}\n                      instanceDetailsHref={instanceDetailsHref}\n                      instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n                      instanceTopicsHref={instanceTopicsHref}\n                      viewPartitionConsumerGroupHref={\n                        viewPartitionConsumerGroupHref\n                      }\n                    />\n                  </Route>\n                  <ConsumerGroupViewPartitionRoute\n                    instancesHref={instancesHref}\n                    instanceDetailsHref={instanceDetailsHref}\n                    instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n                    instanceTopicsHref={instanceTopicsHref}\n                    viewPartitionConsumerGroupHref={\n                      viewPartitionConsumerGroupHref\n                    }\n                  />\n                </Route>\n                <Route\n                  path={`${root}/consumer-groups/:consumerGroupId/reset-offset`}\n                >\n                  <ConsumerGroupResetOffsetRoute\n                    instancesHref={instancesHref}\n                    instanceDetailsHref={instanceDetailsHref}\n                    instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n                    instanceTopicsHref={instanceTopicsHref}\n                    viewPartitionConsumerGroupHref={\n                      viewPartitionConsumerGroupHref\n                    }\n                  />\n                </Route>\n                <Route path={`${root}/consumer-groups/:consumerGroupId/delete`}>\n                  <ConsumerGroupDeleteRoute\n                    instancesHref={instancesHref}\n                    instanceDetailsHref={instanceDetailsHref}\n                    instanceConsumerGroupsHref={instanceConsumerGroupsHref}\n                    instanceTopicsHref={instanceTopicsHref}\n                    viewPartitionConsumerGroupHref={\n                      viewPartitionConsumerGroupHref\n                    }\n                  />\n                </Route>\n              </Switch>\n            </RedirectOnGateError>\n          </Route>\n          <Redirect from={`${root}`} to={`${root}/dashboard`} exact />\n\n          <Route>\n            <InvalidObject />\n          </Route>\n        </Switch>\n      </RedirectOnGateError>\n    </Route>\n  );\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { KafkaPageV3 } from \"ui\";\n\nexport const OverviewRoute: VoidFunctionComponent = () => {\n  return <KafkaPageV3 />;\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport { ControlPlaneRoutes, DrawerProvider } from \"./control-plane\";\nimport { DedicatedClustersRoute } from \"./control-plane/routes/DedicatedClustersRoute\";\nimport {\n  ControlPlaneClustersPath,\n  ControlPlaneRoutePath,\n  ControlPlaneRouteRoot,\n} from \"./control-plane/routesConsts\";\nimport { DataPlaneRoutes } from \"./data-plane\";\nimport { DataPlaneRoutePath } from \"./data-plane/routesConsts\";\nimport { OverviewRoute } from \"./overview\";\n\nexport const Routes: VoidFunctionComponent = () => {\n  return (\n    <Switch>\n      <Route path={\"/overview\"} exact>\n        <OverviewRoute />\n      </Route>\n\n      <Route path={\"/\"} exact>\n        <Redirect to={ControlPlaneRoutePath} />\n      </Route>\n\n      <Route path={ControlPlaneRouteRoot}>\n        <DrawerProvider>\n          {/* don't move these routes around! the order is important */}\n\n          <ControlPlaneRoutes />\n\n          <Route\n            path={DataPlaneRoutePath(ControlPlaneRouteRoot)}\n            render={({ match }) => (\n              <DataPlaneRoutes\n                root={DataPlaneRoutePath(ControlPlaneRouteRoot)}\n                instancesHref={ControlPlaneRouteRoot}\n                instanceId={match.params.id}\n              />\n            )}\n          />\n        </DrawerProvider>\n      </Route>\n\n      <Route path={ControlPlaneClustersPath}>\n        <DedicatedClustersRoute\n          instancesHref={ControlPlaneRoutePath}\n          clustersHref={ControlPlaneClustersPath}\n        />\n      </Route>\n    </Switch>\n  );\n};\n","import NotificationsPortal from \"@redhat-cloud-services/frontend-components-notifications/NotificationPortal\";\nimport { notificationsReducer } from \"@redhat-cloud-services/frontend-components-notifications/redux\";\nimport { getRegistry } from \"@redhat-cloud-services/frontend-components-utilities/Registry\";\nimport { useChrome } from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { memo, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport type { Reducer } from \"redux\";\n\nimport \"./App.scss\";\n\nimport { Routes } from \"./routes\";\n\nconst App = memo(() => {\n  const history = useHistory();\n  const { updateDocumentTitle, on } = useChrome();\n\n  const { t } = useTranslation();\n  const title = t(\"kafka:rhosakTitle\");\n\n  useEffect(() => {\n    const registry = getRegistry();\n    registry.register({ notifications: notificationsReducer as Reducer });\n\n    updateDocumentTitle(title);\n\n    const unregister = on(\"APP_NAVIGATION\", (event) => {\n      console.dir(event);\n      if (event.navId) {\n        history.push(\"/\" + event.navId === \"/\" ? \"\" : event.navId);\n      }\n    });\n    return () => {\n      if (unregister) {\n        unregister();\n      }\n    };\n  }, [history, on, title, updateDocumentTitle]);\n\n  return (\n    <>\n      <NotificationsPortal />\n      <Routes />\n    </>\n  );\n});\n\nexport default App;\n","/* eslint-disable */\n// @ts-nocheck\nimport { ScalprumComponent } from \"@scalprum/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { Suspense } from \"react\";\nimport { ErrorBoundary } from \"react-error-boundary\";\n\nexport const appIdentifier = \"applicationServices\";\n\nconst basePath = \"/apps/rhoas-guides-build\";\nconst getPath = () => {\n  return basePath;\n};\n\nexport const QuickstartLoader: VoidFunctionComponent = () => {\n  return (\n    <Suspense fallback={null}>\n      <ErrorBoundary fallbackRender={() => null}>\n        <ScalprumComponent\n          appName=\"applicationServices\"\n          scope=\"applicationServices\"\n          module=\"./Guides\"\n          ErrorComponent={null}\n        />\n      </ErrorBoundary>\n    </Suspense>\n  );\n};\n","import notificationsMiddleware from \"@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware\";\nimport type ReducerRegistry from \"@redhat-cloud-services/frontend-components-utilities/ReducerRegistry\";\nimport { getRegistry } from \"@redhat-cloud-services/frontend-components-utilities/Registry\";\nimport type { Middleware } from \"redux\";\nimport promiseMiddleware from \"redux-promise-middleware\";\n\n// eslint-disable-next-line  @typescript-eslint/no-explicit-any\nexport let registry: ReducerRegistry<any>;\n\nexport function init(...middleware: Middleware[]) {\n  registry = getRegistry({}, [\n    promiseMiddleware,\n    notificationsMiddleware({ errorDescriptionKey: [\"detail\", \"stack\"] }),\n    ...middleware,\n  ]);\n  return registry;\n}\n","import { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { ReactQueryDevtools } from \"@tanstack/react-query-devtools\";\nimport { isDevToolsEnabled } from \"local-storage-helpers\";\nimport type { FunctionComponent } from \"react\";\nimport { createContext, lazy, Suspense, useContext } from \"react\";\n\nconst ReactQueryDevtoolsProduction = lazy(() =>\n  import(\"@tanstack/react-query-devtools/build/lib/index.prod.js\").then(\n    (d) => ({\n      default: d.ReactQueryDevtools,\n    })\n  )\n);\n\ntype ApiContextProps = {\n  accessToken: () => Promise<string>;\n  basePath: string;\n  refetchInterval: number;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\nconst ApiContext = createContext<ApiContextProps>(null!);\n\nconst queryClient = new QueryClient();\n\nexport const ApiProvider: FunctionComponent<ApiContextProps> = ({\n  children,\n  ...context\n}) => {\n  const showDevTools = isDevToolsEnabled();\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ApiContext.Provider value={context}>\n        {children}\n        {showDevTools && (\n          <Suspense fallback={null}>\n            <ReactQueryDevtoolsProduction />\n          </Suspense>\n        )}\n      </ApiContext.Provider>\n    </QueryClientProvider>\n  );\n};\n\nexport function useApiConfiguration() {\n  return useContext(ApiContext);\n}\n\nexport { useQueryErrorResetBoundary } from \"@tanstack/react-query\";\n","import type { DedicatedClusterMeta } from \"ui-models/src/models/dedicated-cluster\";\nimport type { CloudProvider } from \"ui-models/src/models/kafka\";\n\nexport async function fetchClustersMeta(\n  basePath: string,\n  accessToken: string,\n  clusterIds: string[]\n): Promise<{\n  [id: string]: DedicatedClusterMeta;\n}> {\n  if (clusterIds.length <= 0) {\n    return {};\n  }\n  const url = `${basePath}/api/clusters_mgmt/v1/clusters?size=${\n    clusterIds.length\n  }&search=(${clusterIds.map((id) => `id='${id}'`).join(\" or \")})`;\n  const response = await fetch(url, {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${accessToken}`,\n    },\n  });\n  const data = (await response.json()) as {\n    items: {\n      id: string;\n      name: string;\n      display_name: string;\n      cloud_provider: { id: string; display_name: string };\n      region: {\n        id: string;\n        display_name: string;\n      };\n    }[];\n  };\n  const clusters = data.items;\n  return Object.fromEntries(\n    clusters.map((c) => [\n      c.id,\n      {\n        name: c.display_name || c.name,\n        cloudProvider: {\n          id: c.cloud_provider.id as CloudProvider,\n          displayName: c.cloud_provider.display_name || c.cloud_provider.id,\n        },\n        cloudRegion: {\n          id: c.region.id,\n          displayName: c.region.display_name || c.region.id,\n        },\n      },\n    ])\n  ) as {\n    [id: string]: DedicatedClusterMeta;\n  };\n}\n","import type {\n  ConsumerGroup as ConsumerGroupApi,\n  ConsumerGroupState,\n} from \"@rhoas/kafka-instance-sdk\";\nimport type {\n  Consumer,\n  ConsumerGroup,\n} from \"ui-models/src/models/consumer-group\";\n\nexport function consumerGroupTransformer(t: ConsumerGroupApi): ConsumerGroup {\n  const state = stateMapping[t.state as ConsumerGroupState];\n  return {\n    name: t.groupId,\n    state: state,\n    consumers: t.consumers.map<Consumer>((consumer) => ({\n      groupId: consumer.groupId,\n      topic: consumer.topic,\n      lag: consumer.lag,\n      memberId: consumer.memberId,\n      partition: consumer.partition,\n      offset: consumer.offset,\n      logEndOffset: consumer.logEndOffset,\n    })),\n    activeConsumers: t.metrics?.activeConsumers,\n    laggingPartitions: t.metrics?.laggingPartitions,\n    unassignedPartitions: t.metrics?.unassignedPartitions,\n  };\n}\n\nexport const stateMapping: {\n  [state in ConsumerGroupState]: ConsumerGroup[\"state\"];\n} = {\n  DEAD: \"Dead\",\n  EMPTY: \"Empty\",\n  STABLE: \"Stable\",\n  UNKNOWN: \"Unknown\",\n  COMPLETING_REBALANCE: \"CompletingRebalance\",\n  PREPARING_REBALANCE: \"PreparingRebalance\",\n};\n","import type { GroupsApi } from \"@rhoas/kafka-instance-sdk\";\nimport type { ConsumerGroup } from \"ui-models/src/models/consumer-group\";\nimport { consumerGroupTransformer } from \"../transformers/consumerGroupTransformer\";\n\nexport type FetchConsumerGroupParams = {\n  getConsumerGroupById: GroupsApi[\"getConsumerGroupById\"];\n  consumerGroupId: string;\n};\n\nexport async function fetchConsumerGroup({\n  getConsumerGroupById,\n  consumerGroupId,\n}: FetchConsumerGroupParams): Promise<ConsumerGroup> {\n  const response = await getConsumerGroupById(consumerGroupId);\n  return consumerGroupTransformer(response.data);\n}\n","import type {\n  ConsumerGroupState,\n  GroupsApi,\n  SortDirection,\n} from \"@rhoas/kafka-instance-sdk\";\nimport type { ConsumerGroup } from \"ui-models/src/models/consumer-group\";\nimport { stateMapping } from \"../transformers/consumerGroupTransformer\";\nimport type { KafkaConsumerGroupSortableColumn } from \"../types\";\n\nexport type FetchConsumerGroupsParams = {\n  getConsumerGroups: GroupsApi[\"getConsumerGroups\"];\n  page?: number;\n  perPage?: number;\n  sort?: KafkaConsumerGroupSortableColumn;\n  direction?: SortDirection;\n  topic?: string;\n  groupId?: string;\n};\n\nexport async function fetchConsumerGroups({\n  getConsumerGroups,\n  page,\n  perPage,\n  topic,\n  groupId,\n  sort,\n  direction,\n}: FetchConsumerGroupsParams): Promise<{\n  groups: ConsumerGroup[];\n  count: number;\n}> {\n  const response = await getConsumerGroups(\n    undefined,\n    undefined,\n    perPage,\n    page,\n    topic,\n    groupId,\n    direction,\n    sort\n  );\n  const groups = (response.data.items || []).map<ConsumerGroup>((t) => ({\n    name: t.groupId || \"\",\n    state: stateMapping[t.state as ConsumerGroupState],\n    consumers: t.consumers,\n    activeConsumers: t.metrics?.activeConsumers,\n    laggingPartitions: t.metrics?.laggingPartitions,\n    unassignedPartitions: t.metrics?.unassignedPartitions,\n  }));\n  const count = response.data.total;\n\n  return { count, groups };\n}\n","import type { EnterpriseDataplaneClustersApi } from \"@rhoas/kafka-management-sdk\";\nimport { AxiosError } from \"axios\";\nimport type {\n  DedicatedCluster,\n  DedicatedClusterMeta,\n} from \"ui-models/src/models/dedicated-cluster\";\nimport { dedicatedClusterTransformer } from \"../transformers/dedicatedClusterTransformer\";\n\nexport type FetchDedicatedClustersParams = {\n  getEnterpriseOsdClusters: EnterpriseDataplaneClustersApi[\"getEnterpriseOsdClusters\"];\n  fetchClustersMeta: (\n    clusterIds: string[]\n  ) => Promise<{ [id: string]: DedicatedClusterMeta }>;\n};\n\nexport async function fetchDedicatedClusters({\n  getEnterpriseOsdClusters,\n  fetchClustersMeta,\n}: FetchDedicatedClustersParams): Promise<{\n  isEntitled: boolean;\n  clusters: DedicatedCluster[];\n  count: number;\n}> {\n  try {\n    const response = await getEnterpriseOsdClusters();\n\n    const rawClusters = response.data.items || [];\n    const meta = await fetchClustersMeta(rawClusters.map((c) => c.id));\n    return {\n      isEntitled: true,\n      clusters: rawClusters.map((c) =>\n        dedicatedClusterTransformer(c, meta[c.id])\n      ),\n      count: response.data.total,\n    };\n  } catch (e) {\n    if (e instanceof AxiosError) {\n      if (e.response?.status === 403) {\n        return {\n          isEntitled: false,\n          clusters: [],\n          count: 0,\n        };\n      }\n    }\n    throw new Error(\"Unexpected error fetching dedicated clusters\");\n  }\n}\n","import type { EnterpriseCluster } from \"@rhoas/kafka-management-sdk\";\nimport type {\n  DedicatedCluster,\n  DedicatedClusterMeta,\n} from \"ui-models/src/models/dedicated-cluster\";\n\nexport function dedicatedClusterTransformer(\n  c: EnterpriseCluster & { [key: string]: any }, // TODO: remove this hack with the latest SDK,\n  meta: DedicatedClusterMeta\n): DedicatedCluster {\n  if (c.cluster_id === undefined || c.status === undefined) {\n    throw new Error(\"Invalid EnterpriseCluster data\");\n  }\n  return {\n    ...meta,\n    id: c.cluster_id,\n    status:\n      c.status === \"ready\"\n        ? \"ready\"\n        : c.status === \"failed\"\n        ? \"failed\"\n        : c.status === \"provisioning\"\n        ? \"provisioning\"\n        : c.status,\n    requiresPrivateNetwork: c.access_kafkas_via_private_network,\n    az: c.multi_az ? \"multi\" : \"single\",\n  };\n}\n","import type { QuotaCost } from \"@rhoas/account-management-sdk\";\n\nexport const standardId = \"RHOSAK\" as const;\nexport const developerId = \"RHOSAKTrial\" as const;\nexport const dedicatedId = \"RHOSAKCC\" as const;\nexport const resourceName = \"rhosak\" as const;\n\nexport function isStandardQuota(q: QuotaCost) {\n  return q.related_resources?.find((r) => r.billing_model === \"standard\");\n}\n\nexport function isMarketplaceQuota(q: QuotaCost) {\n  return q.related_resources?.find((r) => r.billing_model === \"marketplace\");\n}\n","import type { AppServicesApi } from \"@rhoas/account-management-sdk\";\nimport type { MarketPlaceSubscriptions } from \"ui-models/src/models/kafka\";\nimport {\n  dedicatedId,\n  isStandardQuota,\n  resourceName,\n} from \"../utilsAndConstants\";\n\nexport type DedicatedQuota = {\n  hasTrialQuota: boolean;\n  remainingDedicatedQuota: number | undefined;\n  remainingMarketplaceQuota: number | undefined;\n  marketplaceSubscriptions: MarketPlaceSubscriptions[];\n};\nexport const fetchDedicatedQuota = async (\n  api: AppServicesApi[\"apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet\"],\n  organizationId: string\n) => {\n  const quotaResponse = await api(\n    organizationId,\n    undefined,\n    true,\n    undefined,\n    true\n  );\n  if (quotaResponse.status !== 200) {\n    throw new Error(quotaResponse.statusText);\n  }\n  const dedicatedQuotas = quotaResponse.data.items?.filter((q) =>\n    q.related_resources?.find(\n      (r) => r.resource_name === resourceName && r.product === dedicatedId\n    )\n  );\n\n  const dedicatedQuota = dedicatedQuotas?.find(isStandardQuota);\n  const hasDedicatedQuota = dedicatedQuota !== undefined;\n\n  const remainingDedicatedQuota = dedicatedQuota\n    ? dedicatedQuota.allowed - dedicatedQuota.consumed\n    : undefined;\n\n  return {\n    hasDedicatedQuota,\n    remainingDedicatedQuota,\n  };\n};\n","import type { SupportedKafkaSize } from \"@rhoas/kafka-management-sdk\";\nimport type { SizeWithLimits } from \"../fetchers\";\n\nexport function apiSizeToComponentSize(\n  isDisabled: (id: string) => boolean,\n  apiSize: SupportedKafkaSize\n): SizeWithLimits {\n  const s = apiSize as Required<SupportedKafkaSize>;\n  return {\n    id: s.id,\n    displayName: s.display_name,\n    quota: s.quota_consumed,\n    ingress: (s.ingress_throughput_per_sec.bytes || 0) / 1048576,\n    egress: (s.egress_throughput_per_sec.bytes || 0) / 1048576,\n    storage: Math.round((s.max_data_retention_size.bytes || 0) / 1073741824),\n    connections: s.total_max_connections,\n    connectionRate: s.max_connection_attempts_per_sec,\n    maxPartitions: s.max_partitions,\n    messageSize: (s.max_message_size.bytes || 0) / 1048576,\n    status: s.maturity_status === \"stable\" ? \"stable\" : \"preview\",\n    trialDurationHours: s.lifespan_seconds ? s.lifespan_seconds / 60 / 60 : 0,\n    isDisabled: isDisabled(s.id),\n  };\n}\n","import type {\n  EnterpriseDataplaneClustersApi,\n  SupportedKafkaSize,\n} from \"@rhoas/kafka-management-sdk\";\nimport { apiSizeToComponentSize } from \"../transformers/apiSizeToComponentSize\";\nimport type { SizeWithLimits } from \"./fetchProviderRegionSizes\";\n\nexport type FetchDedicatedClusterSizesParams = {\n  getEnterpriseClusterById: EnterpriseDataplaneClustersApi[\"getEnterpriseClusterById\"];\n  clusterId: string;\n};\n\nexport async function fetchDedicatedClusterSizes({\n  getEnterpriseClusterById,\n  clusterId,\n}: FetchDedicatedClusterSizesParams): Promise<SizeWithLimits[]> {\n  const response = await getEnterpriseClusterById(clusterId);\n  const data = response.data;\n  if (!data) {\n    throw new Error(`Invalid response for cluster ${clusterId}`);\n  }\n  const supportedInstanceTypes = data.supported_instance_types?.instance_types;\n  if (!supportedInstanceTypes) {\n    throw new Error(\n      `Invalid response for cluster ${clusterId}, missing supported instance types`\n    );\n  }\n  const availableSizes = supportedInstanceTypes.flatMap((i) => i.sizes);\n  const sizes = availableSizes.map((s: SupportedKafkaSize) =>\n    apiSizeToComponentSize(\n      (id) =>\n        availableSizes.find((s) => s.id === id)!.capacity_consumed! >\n        (data.capacity_information?.remaining_kafka_streaming_units ===\n        undefined\n          ? Infinity\n          : data.capacity_information?.remaining_kafka_streaming_units),\n      s\n    )\n  );\n  return sizes;\n}\n","import type { DefaultApi, InstantQuery } from \"@rhoas/kafka-management-sdk\";\nimport type { NoUndefinedField } from \"../types\";\n\nexport async function fetchKafkaKpis(\n  getMetricsByInstantQuery: DefaultApi[\"getMetricsByInstantQuery\"],\n  id: string\n) {\n  let topics = 0,\n    topicPartitions = 0,\n    consumerGroups = 0;\n\n  const response = await getMetricsByInstantQuery(id, [\n    \"kafka_topic:kafka_topic_partitions:sum\", // (Number of topic partitions)\n    \"kafka_topic:kafka_topic_partitions:count\", // (Number of topics)\n    \"consumergroup:kafka_consumergroup_members:count\", // (number of consumer groups - note that this metric will appear after a consumer group is created. There should be handled by the UI in a way that the metric isn't visible if no consumer groups are created)\n  ]);\n\n  const safeMetrics: NoUndefinedField<InstantQuery[]> = (response.data.items ||\n    []) as NoUndefinedField<InstantQuery[]>;\n\n  safeMetrics.forEach(({ metric, value }) => {\n    const { __name__: name } = metric;\n\n    switch (name) {\n      case \"kafka_topic:kafka_topic_partitions:sum\":\n        topicPartitions = value;\n        break;\n      case \"kafka_topic:kafka_topic_partitions:count\":\n        topics = value;\n        break;\n      case \"consumergroup:kafka_consumergroup_members:count\":\n        consumerGroups = value;\n        break;\n    }\n  });\n  return {\n    consumerGroups,\n    topicPartitions,\n    topics,\n  };\n}\n","import type { DefaultApi } from \"@rhoas/kafka-management-sdk\";\nimport type {\n  BrokerBytesMetric,\n  GetKafkaInstanceMetricsResponse,\n  PartitionBytesMetric,\n  TimeSeriesMetrics,\n} from \"ui\";\nimport type { SafeRangeQuery } from \"../types\";\n\nexport type FetchKafkaMetricsProps = {\n  getMetricsByRangeQuery: DefaultApi[\"getMetricsByRangeQuery\"];\n  id: string;\n  duration: number;\n  interval: number;\n  selectedBroker: string | undefined;\n};\n\nexport async function fetchKafkaMetrics({\n  getMetricsByRangeQuery,\n  id,\n  duration,\n  interval,\n  selectedBroker,\n}: FetchKafkaMetricsProps): Promise<GetKafkaInstanceMetricsResponse> {\n  const response = await getMetricsByRangeQuery(id, duration, interval, [\n    \"kubelet_volume_stats_used_bytes\",\n    \"kafka_broker_quota_totalstorageusedbytes\",\n    \"kas_broker_partition_log_size_bytes_top50\",\n    \"kafka_namespace:kafka_server_socket_server_metrics_connection_creation_rate:sum\",\n    \"kafka_namespace:kafka_server_socket_server_metrics_connection_count:sum\",\n  ]);\n\n  // Remove all results with no data. Not sure this can really  happen but since\n  // the types allow for undefined we need to do a bit of defensive programming.\n\n  const safeMetrics: SafeRangeQuery[] = (response.data.items || []).filter(\n    (m) =>\n      // defensive programming\n      !(\n        m.values &&\n        m.metric &&\n        m.metric.topic &&\n        m.metric.name &&\n        m.metric.broker_id &&\n        m.metric.partition_id &&\n        m.metric.persistentvolumeclaim &&\n        m.metric.persistentvolumeclaim.includes(\"zookeeper\")\n      )\n  ) as SafeRangeQuery[];\n\n  const brokers = Array.from(\n    new Set(safeMetrics.map((m) => m.metric.broker_id))\n  );\n\n  const usedDiskSpaceMetrics: BrokerBytesMetric = {};\n  const connectionAttemptRateMetrics: TimeSeriesMetrics = {};\n  const clientConnectionsMetrics: TimeSeriesMetrics = {};\n  const bytesPerPartitionMetrics: PartitionBytesMetric = {};\n\n  const connectionRateLimit = 0,\n    connectionsLimit = 0,\n    diskSpaceLimit = 0;\n\n  safeMetrics.forEach((m) => {\n    const { __name__: name, topic, partition_id, broker_id } = m.metric;\n\n    function addAggregatedValuesTo(metric: TimeSeriesMetrics) {\n      m.values.forEach(\n        ({ value, timestamp }) =>\n          (metric[timestamp] = value + (metric[timestamp] || 0))\n      );\n    }\n\n    function addAggregateBrokerBytes() {\n      if (name === \"kubelet_volume_stats_used_bytes\") {\n        const broker = usedDiskSpaceMetrics[\"total\"] || {};\n        m.values.forEach(({ value, timestamp }) => {\n          broker[timestamp] = value + (broker[timestamp] || 0);\n        });\n        usedDiskSpaceMetrics[\"total\"] = broker;\n      } else {\n        const broker = usedDiskSpaceMetrics[broker_id] || {};\n        m.values.forEach(\n          ({ timestamp, value }) =>\n            (broker[timestamp] = value + broker[timestamp] || 0)\n        );\n        usedDiskSpaceMetrics[broker_id] = broker;\n      }\n    }\n\n    function addAggregatePartitionBytes() {\n      const partitionKey = selectedBroker\n        ? topic + \" / \" + partition_id\n        : broker_id + \" , \" + topic + \" / \" + partition_id;\n      const partition = bytesPerPartitionMetrics[broker_id] || {};\n      m.values.forEach(({ value, timestamp }) => {\n        partition[timestamp] = value + (partition[timestamp] || 0);\n      });\n      bytesPerPartitionMetrics[partitionKey] = partition;\n    }\n    switch (name) {\n      case \"kubelet_volume_stats_used_bytes\":\n      case \"kafka_broker_quota_totalstorageusedbytes\":\n        addAggregateBrokerBytes();\n        break;\n      case \"kas_broker_partition_log_size_bytes_top50\":\n        addAggregatePartitionBytes();\n        break;\n      case \"kafka_namespace:kafka_server_socket_server_metrics_connection_creation_rate:sum\":\n        addAggregatedValuesTo(connectionAttemptRateMetrics);\n        break;\n      case \"kafka_namespace:kafka_server_socket_server_metrics_connection_count:sum\":\n        addAggregatedValuesTo(clientConnectionsMetrics);\n        break;\n    }\n  });\n  return {\n    brokers,\n    usedDiskSpaceMetrics,\n    bytesPerPartitionMetrics,\n    clientConnectionsMetrics,\n    connectionAttemptRateMetrics,\n    diskSpaceLimit,\n    connectionRateLimit,\n    connectionsLimit,\n  };\n}\n","export function valuesToQuery(\n  field: string,\n  values: string[],\n  comparison: \"%\" | \"=\" | \"<>\",\n  join: \"and\" | \"or\"\n): string | undefined {\n  return values\n    .map((v) =>\n      comparison === \"%\"\n        ? `${field} like %${v.trim()}%`\n        : `${field} ${comparison} ${v.trim()}`\n    )\n    .join(` ${join} `);\n}\n","import type { DefaultApi, KafkaRequest } from \"@rhoas/kafka-management-sdk\";\nimport type { SimplifiedStatus } from \"ui-models/src/models/kafka\";\nimport { SimplifiedStatuses } from \"ui-models/src/models/kafka\";\nimport type { KafkaInstanceEnhanced } from \"../transformers/kafkaRequestToKafkaInstanceEnhanched\";\nimport type { KafkaInstancesSortableColumn } from \"../types\";\nimport { valuesToQuery } from \"./valuesToQuery\";\n\nconst uiColumnMapping: {\n  [key in KafkaInstancesSortableColumn]: keyof KafkaRequest;\n} = {\n  name: \"name\",\n  owner: \"owner\",\n  provider: \"cloud_provider\",\n  region: \"region\",\n  createdAt: \"created_at\",\n};\nexport type FetchKafkasParams = {\n  getKafkas: DefaultApi[\"getKafkas\"];\n  dataMapper: (data: KafkaRequest) => Promise<KafkaInstanceEnhanced>;\n  page: number;\n  perPage: number;\n  name: string[];\n  owner: string[];\n  status: SimplifiedStatus[];\n  sort: KafkaInstancesSortableColumn;\n  direction: \"asc\" | \"desc\";\n  instanceType: \"developer\" | \"legacy\" | \"dedicated\";\n  clusterIds?: string[];\n};\n\nexport async function fetchKafkas(params: FetchKafkasParams): Promise<{\n  instances: KafkaInstanceEnhanced[];\n  count: number;\n}> {\n  const {\n    name,\n    status,\n    owner,\n    sort,\n    direction,\n    page,\n    perPage,\n    instanceType,\n    clusterIds,\n    dataMapper,\n    getKafkas,\n  } = params;\n\n  if (\n    instanceType === \"dedicated\" &&\n    (clusterIds === undefined || clusterIds?.length === 0)\n  ) {\n    return Promise.resolve({ instances: [], count: 0 });\n  }\n\n  const search = filtersToSearch(name, owner, status, instanceType, clusterIds);\n\n  const res = await getKafkas(\n    page.toString(10),\n    perPage.toString(10),\n    sort ? `${uiColumnMapping[sort]} ${direction}` : undefined,\n    search\n  );\n  const rawInstances = res.data.items;\n  const count = res.data.total;\n  const instances = await Promise.all(rawInstances.map(dataMapper));\n  return {\n    instances,\n    count,\n  };\n}\n\nexport function filtersToSearch(\n  name: string[],\n  owner: string[],\n  status: SimplifiedStatus[],\n  deployment: \"developer\" | \"legacy\" | \"dedicated\",\n  clusters: string[] | undefined\n): string {\n  const querystring = [\n    valuesToQuery(\"name\", name, \"%\", \"or\"),\n    valuesToQuery(\"owner\", owner, \"%\", \"or\"),\n    valuesToQuery(\n      \"status\",\n      status.flatMap((s) => SimplifiedStatuses[s]),\n      \"=\",\n      \"or\"\n    ),\n    deployment === \"dedicated\" && clusters\n      ? valuesToQuery(\"cluster_id\", clusters, \"=\", \"or\")\n      : null,\n    deployment === \"developer\"\n      ? valuesToQuery(\"instance_type\", [\"developer\"], \"=\", \"or\")\n      : null,\n  ]\n    .filter(Boolean)\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    .map((q) => `(${q!})`)\n    .join(\" and \");\n  return querystring;\n}\n","import type { Record, RecordsApi } from \"@rhoas/kafka-instance-sdk\";\nimport type { Message } from \"ui-models/src/models/message\";\nimport type { DateIsoString } from \"../../../ui-models/src/types\";\n\nexport type FetchMessagesParams = {\n  consumeRecords: RecordsApi[\"consumeRecords\"];\n  topicName: string;\n  partition?: number;\n  offset?: number;\n  timestamp?: DateIsoString;\n  limit: number;\n};\n\nexport async function fetchMessages({\n  topicName,\n  consumeRecords,\n  partition,\n  offset,\n  timestamp,\n  limit,\n}: FetchMessagesParams): Promise<Message[]> {\n  const response = await consumeRecords(\n    topicName,\n    undefined,\n    limit,\n    undefined,\n    offset,\n    partition,\n    timestamp\n  );\n  return response.data.items.map((m: Record) => ({\n    partition: m.partition,\n    offset: m.offset,\n    timestamp: m.timestamp as DateIsoString,\n    key: m.key,\n    value: m.value,\n    headers: m.headers || {},\n  }));\n}\n","import type { AppServicesApi } from \"@rhoas/account-management-sdk\";\n\nexport async function fetchOrganization(\n  api: AppServicesApi[\"apiAccountsMgmtV1CurrentAccountGet\"]\n) {\n  const account = await api();\n  const orgId = account?.data?.organization?.id;\n  return orgId;\n}\n","import type { DefaultApi } from \"@rhoas/kafka-management-sdk\";\nimport type { Plan, Size } from \"ui-models/src/models/kafka\";\nimport { apiSizeToComponentSize } from \"../transformers/apiSizeToComponentSize\";\nimport type { CloudProviderInfoWithRegionsCapacity } from \"./fetchProvidersWithRegions\";\n\nexport type SizeWithLimits = Size & { trialDurationHours: number };\n\nexport async function fetchProviderRegionSizes(\n  api: DefaultApi[\"getInstanceTypesByCloudProviderAndRegion\"],\n  providerInfo: CloudProviderInfoWithRegionsCapacity,\n  region: string,\n  instanceType: Plan\n) {\n  const regions = providerInfo.regions;\n  const regionInfo = regions.find((r) => r.id === region);\n  const availableSizes =\n    regionInfo?.capacity.flatMap((c) =>\n      c.available_sizes.map((s) => `${c.instance_type}.${s}`)\n    ) || [];\n  const sizes = await api(providerInfo.id, region);\n  if (!sizes?.data?.instance_types) {\n    throw new Error(`No instance_types from backend`);\n  }\n\n  const standardSizes =\n    sizes?.data?.instance_types.find((i) => i.id === instanceType)?.sizes || [];\n\n  return standardSizes.map(\n    apiSizeToComponentSize.bind(\n      undefined,\n      (id) => !availableSizes.includes(`${instanceType}.${id}`)\n    )\n  );\n}\n\n//\n// export async function fetchProviderRegionSizesForPlanStandard (\n//   api: DefaultApi['getInstanceTypesByCloudProviderAndRegion'], providerInfo: CloudProviderInfoWithRegionsCapacity, region: string\n// )  {\n//   return fetchProviderRegionSizes(api, providerInfo, region, \"standard\");\n// };\n//\n// export const fetchProviderRegionSizesForPlanDeveloper = (\n//   api: DefaultApi['getInstanceTypesByCloudProviderAndRegion'], providerInfo: CloudProviderInfoWithRegionsCapacity, region: string\n//\n// ) => {\n//   const { data: standardSizes, isError } = await fetchProviderRegionSizes(\n//     provider,\n//     region,\n//     \"standard\"\n//   );\n//   const { data: developerSizes } = fetchProviderRegionSizes(\n//     provider,\n//     region,\n//     \"developer\"\n//   );\n//   return useQuery({\n//     queryKey: [],\n//     queryFn: () => {\n//       return {\n//         standard:\n//           standardSizes ||\n//           ([\n//             { id: \"1\", displayName: \"1\" },\n//             { id: \"2\", displayName: \"2\" },\n//           ] as StandardSizes),\n//         trial: developerSizes![0],\n//       };\n//     },\n//     enabled: (!!standardSizes || isError) && !!developerSizes,\n//   });\n// };\n","import type { DefaultApi } from \"@rhoas/kafka-management-sdk\";\nimport type { CloudProviderInfo } from \"ui\";\nimport type { CloudProvider, Plan } from \"ui-models/src/models/kafka\";\n\nexport type CloudProviderInfoWithRegionsCapacity = Omit<\n  CloudProviderInfo,\n  \"regions\"\n> & {\n  regions: Awaited<ReturnType<typeof fetchProviderRegions>>;\n};\n\nexport async function fetchProvidersWithRegions(\n  getCloudProviders: DefaultApi[\"getCloudProviders\"],\n  getCloudProviderRegions: DefaultApi[\"getCloudProviderRegions\"],\n  plan: Plan\n) {\n  const res = await getCloudProviders();\n  const allProviders = res?.data?.items || [];\n\n  const providers = (\n    await Promise.all(\n      allProviders\n        .filter((p) => p.enabled)\n        .map(async (provider) => {\n          const regions = await fetchProviderRegions(\n            getCloudProviderRegions,\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            provider.id!,\n            plan\n          );\n          const providerInfo: CloudProviderInfoWithRegionsCapacity = {\n            id: provider.id as CloudProvider,\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            displayName: provider.display_name!,\n            regions,\n          };\n          return regions.length > 0 ? providerInfo : null;\n        })\n    )\n  ).filter((p) => Boolean(p)) as CloudProviderInfoWithRegionsCapacity[];\n  if (providers.length === 0) {\n    throw new Error(\"No cloud providers with capacity found\");\n  }\n  const firstProvider = providers[0];\n  return { providers, defaultProvider: firstProvider?.id };\n}\n\nexport async function fetchProviderRegions(\n  getCloudProviderRegions: DefaultApi[\"getCloudProviderRegions\"],\n  provider: string,\n  instanceType: Plan\n) {\n  const res = await getCloudProviderRegions(provider);\n\n  if (!res?.data?.items) {\n    return Promise.reject(\"Invalid provider\");\n  }\n\n  const regionsForInstance = res.data.items.filter(\n    (region) =>\n      region.enabled &&\n      region.capacity.some((c) => c.instance_type === instanceType)\n  );\n\n  return regionsForInstance.map((r) => {\n    const max_capacity_reached = r.capacity?.some(\n      (c) => c.instance_type === instanceType && c.available_sizes?.length === 0\n    );\n\n    return {\n      id: r.id as CloudProvider,\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      displayName: r.display_name!,\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      isDisabled: max_capacity_reached,\n      capacity: r.capacity,\n    };\n  });\n}\n","import type { AppServicesApi } from \"@rhoas/account-management-sdk\";\nimport type {\n  MarketPlace,\n  MarketPlaceSubscriptions,\n} from \"ui-models/src/models/kafka\";\nimport {\n  developerId,\n  isMarketplaceQuota,\n  isStandardQuota,\n  resourceName,\n  standardId,\n} from \"../utilsAndConstants\";\n\nexport type StandardQuota = {\n  hasTrialQuota: boolean;\n  remainingPrepaidQuota: number | undefined;\n  remainingMarketplaceQuota: number | undefined;\n  marketplaceSubscriptions: MarketPlaceSubscriptions[];\n};\nexport const fetchStandardQuota = async (\n  api: AppServicesApi[\"apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet\"],\n  organizationId: string\n) => {\n  const quotaResponse = await api(\n    organizationId,\n    undefined,\n    true,\n    undefined,\n    true\n  );\n  if (quotaResponse.status !== 200) {\n    throw new Error(quotaResponse.statusText);\n  }\n  const standardQuotas = quotaResponse.data.items?.filter((q) =>\n    q.related_resources?.find(\n      (r) => r.resource_name === resourceName && r.product === standardId\n    )\n  );\n\n  const prepaidQuota = standardQuotas?.find(isStandardQuota);\n  const hasStandardQuota = prepaidQuota !== undefined;\n\n  const marketplaceQuotas = standardQuotas?.some(isMarketplaceQuota)\n    ? standardQuotas?.filter(isMarketplaceQuota)\n    : undefined;\n\n  const hasTrialQuota =\n    (prepaidQuota === undefined &&\n      marketplaceQuotas === undefined &&\n      quotaResponse.data.items?.some((q) =>\n        q.related_resources?.find(\n          (r) => r.resource_name === resourceName && r.product === developerId\n        )\n      )) ||\n    false;\n\n  const remainingPrepaidQuota = prepaidQuota\n    ? prepaidQuota.allowed - prepaidQuota.consumed\n    : undefined;\n  const remainingMarketplaceQuota = marketplaceQuotas\n    ? marketplaceQuotas.reduce((agg, q) => q.allowed - q.consumed + agg, 0)\n    : undefined;\n  const unaggregatedSubscriptions = marketplaceQuotas\n    ?.filter((q) => q.cloud_accounts !== undefined)\n    .flatMap((q) => q.cloud_accounts || []);\n  const subscriptionMarketplaces = Array.from(\n    new Set(\n      unaggregatedSubscriptions?.map((s) => s.cloud_provider_id as MarketPlace)\n    )\n  );\n  const marketplaceSubscriptions: MarketPlaceSubscriptions[] =\n    unaggregatedSubscriptions\n      ? subscriptionMarketplaces.map((marketplace) => ({\n          marketplace,\n          subscriptions: unaggregatedSubscriptions\n            .filter((s) => s.cloud_provider_id === marketplace)\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            .map((s) => s.cloud_account_id!),\n        }))\n      : [];\n\n  return {\n    hasStandardQuota,\n    hasTrialQuota,\n    remainingPrepaidQuota,\n    remainingMarketplaceQuota,\n    marketplaceSubscriptions,\n  };\n};\n","import type { TopicsApi } from \"@rhoas/kafka-instance-sdk\";\nimport type { Plan } from \"ui-models/src/models/kafka\";\nimport type { Topic } from \"ui-models/src/models/topic\";\nimport { topicTransformerFactory } from \"../transformers/topicTransformer\";\n\nexport type FetchTopicParams = {\n  getTopic: TopicsApi[\"getTopic\"];\n  topicName: string;\n  plan: Plan;\n};\n\nexport async function fetchTopic({\n  getTopic,\n  topicName,\n  plan,\n}: FetchTopicParams): Promise<Topic> {\n  const response = await getTopic(topicName);\n  return topicTransformerFactory(plan)(response.data);\n}\n","import type { SortDirection, TopicsApi } from \"@rhoas/kafka-instance-sdk\";\nimport type { Plan } from \"ui-models/src/models/kafka\";\nimport type { Topic } from \"ui-models/src/models/topic\";\nimport { topicTransformerFactory } from \"../transformers/topicTransformer\";\nimport type { KafkaTopicsSortableColumn } from \"../types\";\n\nexport type FetchTopicsParams = {\n  getTopics: TopicsApi[\"getTopics\"];\n  page?: number;\n  perPage?: number;\n  sort?: KafkaTopicsSortableColumn;\n  direction?: SortDirection;\n  filter?: string;\n  plan: Plan;\n};\n\nexport async function fetchTopics({\n  getTopics,\n  page,\n  perPage,\n  filter,\n  sort,\n  direction,\n  plan,\n}: FetchTopicsParams): Promise<{ topics: Topic[]; count: number }> {\n  const response = await getTopics(\n    undefined,\n    undefined,\n    perPage,\n    filter,\n    page,\n    direction,\n    sort\n  );\n  const topics = (response.data.items || []).map<Topic>(\n    topicTransformerFactory(plan)\n  );\n  const count = response.data.total;\n  return { count, topics };\n}\n","import type { DefaultApi } from \"@rhoas/kafka-management-sdk\";\nimport type {\n  GetTopicsMetricsResponse,\n  PartitionBytesMetric,\n  TimeSeriesMetrics,\n} from \"ui\";\nimport type { SafeRangeQuery } from \"../types\";\nimport { BrokerToggle } from \"ui/src/components/Metrics/components/BrokerToggle\";\n\nexport type FetchTopicsMetricsProps = {\n  getMetricsByRangeQuery: DefaultApi[\"getMetricsByRangeQuery\"];\n  id: string;\n  duration: number;\n  interval: number;\n  selectedTopic: string | undefined;\n};\n\nexport async function fetchTopicsMetrics({\n  getMetricsByRangeQuery,\n  id,\n  duration,\n  interval,\n  selectedTopic,\n}: FetchTopicsMetricsProps): Promise<\n  Omit<GetTopicsMetricsResponse, \"kafkaTopics\">\n> {\n  const response = await getMetricsByRangeQuery(id, duration, interval, [\n    \"kafka_topic:kafka_server_brokertopicmetrics_bytes_in_total:rate5m\",\n    \"kafka_topic:kafka_server_brokertopicmetrics_bytes_out_total:rate5m\",\n    \"kas_topic_partition_log_size_bytes\",\n    \"kafka_topic:kafka_server_brokertopicmetrics_messages_in_total:rate5m\",\n  ]);\n\n  // Remove all results with no data. Not sure this can really  happen but since\n  // the types allow for undefined we need to do a bit of defensive programming.\n  const safeMetrics: SafeRangeQuery[] = (response.data.items || []).filter(\n    (m) =>\n      // defensive programming\n      !(m.values && m.metric && m.metric.topic && m.metric.name)\n  ) as SafeRangeQuery[];\n\n  // Also filter for metrics about the selectedTopic, if specified\n  const filteredMetrics = safeMetrics.filter((m) =>\n    // filter for metrics for the selectedTopic, if needed\n    selectedTopic !== undefined ? m.metric?.topic === selectedTopic : true\n  );\n\n  // get the unique topics we have metrics for in the selected time range\n  const topics = Array.from(new Set(safeMetrics.map((m) => m.metric.topic)));\n\n  const bytesIncoming: TimeSeriesMetrics = {};\n  const bytesOutgoing: TimeSeriesMetrics = {};\n  const bytesPerPartition: PartitionBytesMetric = {};\n  const incomingMessageRate: TimeSeriesMetrics = {};\n\n  filteredMetrics.forEach((m) => {\n    const { __name__: name, topic, partition_id, broker_id } = m.metric;\n\n    function addAggregatedTotalBytesTo(metric: TimeSeriesMetrics) {\n      m.values.forEach(\n        ({ value, timestamp }) =>\n          (metric[timestamp] = value + (metric[timestamp] || 0))\n      );\n    }\n\n    function addAggregatePartitionBytes() {\n      const partitionKey = `${partition_id}`;\n      const partition = bytesPerPartition[partitionKey] || {};\n      m.values.forEach(\n        ({ value, timestamp }) =>\n          (partition[timestamp] = value + (partition[timestamp] || 0))\n      );\n      bytesPerPartition[partitionKey] = partition;\n    }\n\n    switch (name) {\n      case \"kafka_topic:kafka_server_brokertopicmetrics_bytes_in_total:rate5m\":\n        addAggregatedTotalBytesTo(bytesIncoming);\n        break;\n      case \"kafka_topic:kafka_server_brokertopicmetrics_bytes_out_total:rate5m\":\n        addAggregatedTotalBytesTo(bytesOutgoing);\n        break;\n      case \"kas_topic_partition_log_size_bytes\":\n        addAggregatePartitionBytes();\n        break;\n      case \"kafka_topic:kafka_server_brokertopicmetrics_messages_in_total:rate5m\":\n        addAggregatedTotalBytesTo(incomingMessageRate);\n        break;\n    }\n  });\n\n  return {\n    metricsTopics: topics,\n    bytesOutgoing,\n    bytesIncoming,\n    bytesPerPartition,\n    incomingMessageRate,\n  };\n}\n","import type {\n  Principal,\n  PrincipalApi,\n} from \"@redhat-cloud-services/rbac-client\";\nimport type { UserAccount } from \"ui-models/src/models/user-account\";\n\nexport type FetchUserAccountsParams = {\n  getUserAccounts: PrincipalApi[\"listPrincipals\"];\n};\n\nexport async function fetchUserAccounts({\n  getUserAccounts,\n}: FetchUserAccountsParams): Promise<{\n  accounts: UserAccount[];\n  count: number;\n}> {\n  try {\n    const response = await getUserAccounts(-1);\n    const accounts = response.data.data.map<UserAccount>((p) => {\n      const fullObject = p as Principal;\n      return {\n        username: fullObject.username,\n        displayName: `${fullObject.first_name || \"\"} ${\n          fullObject.last_name || \"\"\n        }`.trim(),\n        email: fullObject.email,\n        isOrgAdmin: fullObject.is_org_admin || false,\n      };\n    });\n    const count = accounts.length;\n    return { count, accounts };\n  } catch {\n    return { accounts: [], count: 0 };\n  }\n}\n","import type { AclsApi } from \"@rhoas/kafka-instance-sdk\";\nimport type { Permissions } from \"../../../ui\";\n\nexport type FetchPermissionsParams = {\n  getAcls: AclsApi[\"getAcls\"];\n  page?: number;\n  perPage?: number;\n};\n\nexport async function fetchPermissions({\n  getAcls,\n  page,\n  perPage,\n}: FetchPermissionsParams): Promise<{\n  groups: Permissions[];\n  count: number;\n}> {\n  const response = await getAcls(\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    page,\n    perPage\n  );\n  const groups = (response.data.items || []).map<Permissions>((t) => ({\n    account: t.principal || \"\",\n    permission: { permission: t.permission, operation: t.operation },\n    resource: {\n      resourceName: t.resourceName,\n      patternType: t.patternType,\n      resourceType: t.resourceType,\n    },\n  }));\n  const count = response.data.total;\n  return { count, groups };\n}\n","import type { SecurityApi } from \"@rhoas/kafka-management-sdk\";\nimport type { Account } from \"ui\";\nimport { PrincipalType } from \"ui\";\n\nexport type FetchServiceAccountsParams = {\n  getServiceAccounts: SecurityApi[\"getServiceAccounts\"];\n};\n\nexport async function fetchServiceAccounts({\n  getServiceAccounts,\n}: FetchServiceAccountsParams): Promise<{\n  serviceAccounts: Account[];\n}> {\n  const response = await getServiceAccounts();\n  const data = response.data.items;\n  const serviceAccounts: Account[] = data.map((t) => {\n    return {\n      principalType: PrincipalType.ServiceAccount,\n      id: t.id || \"\",\n      displayName: t.name || \"\",\n    };\n  });\n  return { serviceAccounts };\n}\n","import type { AppServicesApi } from \"@rhoas/account-management-sdk\";\n\nexport async function fetchSelfTermsReview(\n  api: AppServicesApi[\"apiAuthorizationsV1SelfTermsReviewPost\"]\n) {\n  const response = await api({\n    event_code: \"register\",\n    site_code: \"ocm\",\n  });\n  const { terms_required, terms_available, redirect_url } = response.data;\n  const areTermsAccepted =\n    terms_required === false && terms_available === false;\n  if (areTermsAccepted === false && redirect_url === undefined) {\n    throw new Error(\"Invalid Terms and Conditions \");\n  }\n  return {\n    areTermsAccepted,\n    termsUrl: (createHref: string, cancelHref: string) => {\n      if (redirect_url === undefined) {\n        throw new Error(\"Invalid Terms and Conditions \");\n      }\n      const url = new URL(redirect_url);\n      url.searchParams.set(\"redirect\", createHref);\n      url.searchParams.set(\"cancelRedirect\", cancelHref);\n      return url.href;\n    },\n  };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport type { FetchDedicatedClusterSizesParams } from \"../fetchers\";\nimport { fetchDedicatedClusterSizes } from \"../fetchers\";\nimport { dedicatedQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useDedicatedClusterSizesFetchQuery() {\n  const queryClient = useQueryClient();\n  const { dedicatedClusters } = useApi();\n  return async ({\n    clusterId,\n  }: Omit<FetchDedicatedClusterSizesParams, \"getEnterpriseClusterById\">) => {\n    const api = dedicatedClusters();\n    return queryClient.fetchQuery({\n      queryKey: dedicatedQueries.clusterSizes({ clusterId }),\n      queryFn: async () => {\n        return fetchDedicatedClusterSizes({\n          clusterId,\n          getEnterpriseClusterById: (...args) =>\n            api.getEnterpriseClusterById(...args),\n        });\n      },\n    });\n  };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport { useApiConfiguration } from \"../ApiProvider\";\nimport { fetchClustersMeta } from \"../fetchers\";\nimport { dedicatedQueries } from \"../queryKeys\";\n\nexport function useClustersMetaFetchQuery() {\n  const queryClient = useQueryClient();\n  const { basePath, accessToken } = useApiConfiguration();\n  return async (clusterIds: string[]) => {\n    return queryClient.fetchQuery({\n      queryKey: dedicatedQueries.clusterNames(clusterIds),\n      queryFn: async () => {\n        const token = await accessToken();\n        return fetchClustersMeta(\n          // the control plane uses the production API endpoint for its dependencies, so if we are targeting stage\n          // we need to use production for this call\n          basePath.includes(\"api.stage.openshift.com\")\n            ? \"https://api.openshift.com\"\n            : basePath,\n          token,\n          clusterIds\n        );\n      },\n    });\n  };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport { fetchDedicatedClusters } from \"../fetchers\";\nimport { dedicatedQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\nimport { useClustersMetaFetchQuery } from \"./useClustersMetaFetchQuery\";\n\nexport function useDedicatedClustersFetchQuery() {\n  const queryClient = useQueryClient();\n  const { dedicatedClusters } = useApi();\n  const fetchClustersMeta = useClustersMetaFetchQuery();\n  return async () => {\n    const api = dedicatedClusters();\n    return queryClient.fetchQuery({\n      queryKey: dedicatedQueries.clusters(),\n      queryFn: async () => {\n        const res = await fetchDedicatedClusters({\n          getEnterpriseOsdClusters: (...args) =>\n            api.getEnterpriseOsdClusters(...args),\n          fetchClustersMeta,\n        });\n        res.clusters.forEach((c) =>\n          queryClient.setQueryData(dedicatedQueries.cluster({ id: c.id }), c)\n        );\n        return res;\n      },\n    });\n  };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport { fetchDedicatedQuota, fetchOrganization } from \"../fetchers\";\nimport { masQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useDedicatedQuotaFetchQuery(skipCache = false) {\n  const queryClient = useQueryClient();\n  const { account } = useApi();\n  const ams = account();\n\n  return async () => {\n    const organization = await queryClient.fetchQuery({\n      queryKey: masQueries.organization(),\n      queryFn: () =>\n        fetchOrganization((...args) =>\n          ams.apiAccountsMgmtV1CurrentAccountGet(...args)\n        ),\n      staleTime: Infinity,\n    });\n    if (!organization) {\n      return Promise.reject(\"Missing organization id\");\n    }\n    return queryClient.fetchQuery({\n      queryKey: masQueries.quota.dedicatedAvailable(),\n      queryFn: () =>\n        fetchDedicatedQuota(\n          (...args) =>\n            ams.apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(...args),\n          organization\n        ),\n      staleTime: skipCache ? undefined : Infinity,\n    });\n  };\n}\n","import { useQuery } from \"@tanstack/react-query\";\nimport { useApiConfiguration } from \"../ApiProvider\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\nimport type { FetchConsumerGroupParams } from \"../fetchers\";\nimport { fetchConsumerGroup } from \"../fetchers\";\n\nexport function useConsumerGroup(\n  params: { id?: string; adminUrl?: string } & Omit<\n    FetchConsumerGroupParams,\n    \"getConsumerGroupById\"\n  >,\n  suspense = false\n) {\n  const { refetchInterval } = useApiConfiguration();\n  const { consumerGroups } = useApi();\n\n  return useQuery({\n    queryKey: kafkaQueries.instance.consumerGroup(params),\n    queryFn: () => {\n      if (!params.id) {\n        return Promise.reject(\"Invalid id\");\n      }\n      if (!params.adminUrl) {\n        return Promise.reject(\"Invalid adminUrl\");\n      }\n      if (!params.consumerGroupId) {\n        return Promise.reject(\"Invalid consumerGroupId\");\n      }\n      const api = consumerGroups(params.adminUrl);\n\n      return fetchConsumerGroup({\n        getConsumerGroupById: (...args) => api.getConsumerGroupById(...args),\n        ...params,\n      });\n    },\n    enabled:\n      Boolean(params.adminUrl) &&\n      Boolean(params.id) &&\n      Boolean(params.consumerGroupId),\n    refetchInterval,\n    suspense,\n  });\n}\n","import { useQuery } from \"@tanstack/react-query\";\nimport { useApiConfiguration } from \"../ApiProvider\";\nimport type { FetchConsumerGroupsParams } from \"../fetchers\";\nimport { fetchConsumerGroups } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useConsumerGroups(\n  params: { id?: string; adminUrl?: string } & Omit<\n    FetchConsumerGroupsParams,\n    \"getConsumerGroups\"\n  >,\n  suspense = false\n) {\n  const { refetchInterval } = useApiConfiguration();\n  const { consumerGroups } = useApi();\n\n  return useQuery({\n    queryKey: kafkaQueries.instance.consumerGroups(params),\n    queryFn: () => {\n      if (!params.id) {\n        return Promise.reject(\"Invalid id\");\n      }\n      if (!params.adminUrl) {\n        return Promise.reject(\"Invalid adminUrl\");\n      }\n      const api = consumerGroups(params.adminUrl);\n\n      return fetchConsumerGroups({\n        getConsumerGroups: (...args) => api.getConsumerGroups(...args),\n        ...params,\n      });\n    },\n    enabled: Boolean(params.adminUrl) && Boolean(params.id),\n    refetchInterval,\n    suspense,\n  });\n}\n","import type { KafkaRequestPayload } from \"@rhoas/kafka-management-sdk\";\nimport { APIErrorCodes, isServiceApiError } from \"@rhoas/kafka-management-sdk\";\nimport type { CreateKafkaInstanceServices } from \"ui\";\nimport { useApi } from \"../useApi\";\n\nconst ErrorCodes = {\n  /** Forbidden to perform this action*/\n  UNAUTHORIZED_USER: APIErrorCodes.ERROR_4,\n  /** Kafka cluster name is already used*/\n  DUPLICATE_INSTANCE_NAME: APIErrorCodes.ERROR_36,\n  /** The maximum number of allowed kafka instances has been reached*/\n  INTERNAL_CAPACITY_ERROR: APIErrorCodes.ERROR_24,\n  /** Insufficient quota*/\n  INSUFFICIENT_QUOTA: APIErrorCodes.ERROR_120,\n  /** Forbidden to create more instances than the maximum allowed*/\n  TRIAL_USED: APIErrorCodes.ERROR_5,\n  /** Failed to check quota*/\n  FAILED_TO_CHECK_QUOTA: APIErrorCodes.ERROR_121,\n  /** Bad request*/\n  OWNER_DOES_NOT_EXIST: APIErrorCodes.ERROR_21,\n};\n\n/**\n * Create Kafka instance hook that creates kafka instance\n */\nexport const useCreateInstance =\n  (): CreateKafkaInstanceServices[\"onCreate\"] => {\n    const { kafkasFleet } = useApi();\n\n    return (data, onSuccess, onError) => {\n      const runner = async () => {\n        const apisService = kafkasFleet();\n\n        try {\n          const kafkaRequest = {} as KafkaRequestPayload;\n          kafkaRequest.name = data.name;\n          kafkaRequest.cloud_provider = data.provider;\n          kafkaRequest.region = data.region;\n          kafkaRequest.plan = data.plan + \".\" + data.sizeId;\n          kafkaRequest.billing_model =\n            data.billing === \"prepaid\"\n              ? \"standard\"\n              : data.billing !== undefined\n              ? \"marketplace\"\n              : null;\n          kafkaRequest.billing_cloud_account_id =\n            data.billing && data.billing !== \"prepaid\"\n              ? data.billing.subscription\n              : null;\n          await apisService.createKafka(true, kafkaRequest);\n          onSuccess();\n        } catch (error) {\n          if (isServiceApiError(error)) {\n            const { code } = error?.response?.data || {};\n\n            switch (data.plan) {\n              case \"developer\":\n                switch (code) {\n                  case ErrorCodes.DUPLICATE_INSTANCE_NAME:\n                    onError(\"name-taken\");\n                    break;\n\n                  // regardless of the error, let's not give too many details to trial users\n                  default:\n                    onError(\"developer-unavailable\");\n                    break;\n                }\n                break;\n\n              case \"standard\":\n                switch (code) {\n                  case ErrorCodes.DUPLICATE_INSTANCE_NAME:\n                    onError(\"name-taken\");\n                    break;\n\n                  case ErrorCodes.INTERNAL_CAPACITY_ERROR:\n                    onError(\"region-unavailable\");\n                    break;\n\n                  case ErrorCodes.INSUFFICIENT_QUOTA:\n                    onError(\"insufficient-quota\");\n                    break;\n\n                  default:\n                    console.error(\n                      \"useAvailableProvidersAndDefault\",\n                      \"createKafka unknown error\",\n                      error\n                    );\n                    onError(\"unknown\");\n                }\n                break;\n            }\n          } else {\n            console.error(\n              \"useAvailableProvidersAndDefault\",\n              \"createKafka unexpected error\",\n              error\n            );\n          }\n        }\n      };\n      void runner();\n    };\n  };\n","import { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useApiConfiguration } from \"../ApiProvider\";\nimport { fetchDedicatedClusters } from \"../fetchers\";\nimport { useClustersMetaFetchQuery } from \"../fetchQueries/useClustersMetaFetchQuery\";\nimport { dedicatedQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useDedicatedClusters() {\n  const queryClient = useQueryClient();\n  const { refetchInterval } = useApiConfiguration();\n  const { dedicatedClusters } = useApi();\n  const fetchClustersMeta = useClustersMetaFetchQuery();\n\n  return useQuery({\n    queryKey: dedicatedQueries.clusters(),\n    queryFn: async () => {\n      const api = dedicatedClusters();\n\n      const res = await fetchDedicatedClusters({\n        getEnterpriseOsdClusters: (...args) =>\n          api.getEnterpriseOsdClusters(...args),\n        fetchClustersMeta,\n      });\n      res.clusters.forEach((c) =>\n        queryClient.setQueryData(dedicatedQueries.cluster({ id: c.id }), c)\n      );\n      return res;\n    },\n    refetchInterval,\n  });\n}\n","import type { KafkaRequest } from \"@rhoas/kafka-management-sdk\";\nimport type { DedicatedCluster } from \"ui-models/src/models/dedicated-cluster\";\nimport type {\n  CloudProvider,\n  Kafka,\n  MarketPlaceSubscriptions,\n  Plan,\n  Status,\n} from \"ui-models/src/models/kafka\";\nimport type { DateIsoString } from \"ui-models/src/types\";\n\nimport type { SizeWithLimits } from \"../fetchers\";\n\nexport type KafkaInstanceEnhanced = Required<Kafka> & {\n  request: KafkaRequest;\n};\n\nexport function kafkaRequestToKafkaInstanceEnhanched(\n  instance: KafkaRequest,\n  marketplaceSubscriptions: MarketPlaceSubscriptions[],\n  developerPlanInstanceLimits: SizeWithLimits[],\n  standardPlanInstanceLimits: SizeWithLimits[],\n  clusters: DedicatedCluster[]\n): KafkaInstanceEnhanced {\n  const enhancedInstance: KafkaInstanceEnhanced = {\n    billing: undefined,\n    connectionRate: 0,\n    connections: 0,\n    createdAt: (instance.created_at ||\n      new Date().toISOString()) as DateIsoString,\n    egress: 0,\n    expiryDate: instance.expires_at as DateIsoString | undefined,\n    id: instance.id,\n    ingress: 0,\n    maxPartitions: 0,\n    messageSize: { type: \"bytes\", value: BigInt(0) },\n    name: instance.name || \"\",\n    owner: instance.owner || \"\",\n    plan: instance.instance_type as Plan,\n    provider: instance.cloud_provider as CloudProvider,\n    region: instance.region || \"\",\n    size: \"1\",\n    status: apiStatusToUIStatus(instance.status || \"\"),\n    storage: { type: \"bytes\", value: BigInt(0) },\n    updatedAt: (instance.updated_at ||\n      new Date().toISOString()) as DateIsoString,\n    request: instance,\n    clusterId: instance.cluster_id ? instance.cluster_id : undefined,\n    clusterName: instance.cluster_id\n      ? clusters.find((c) => instance.cluster_id === c.id)?.name\n      : undefined,\n    version: instance.version || \"\",\n    bootstrapUrl: instance.bootstrap_server_host,\n    adminUrl: instance.admin_api_server_url,\n    az: instance.multi_az == true ? \"multi\" : \"single\",\n  };\n\n  // update the billing info\n  try {\n    const marketplaceForBilling = marketplaceSubscriptions.find((ms) =>\n      ms.subscriptions.find((s) => s === instance.billing_cloud_account_id)\n    )?.marketplace;\n\n    const billing: KafkaInstanceEnhanced[\"billing\"] =\n      instance.billing_model === \"enterprise\"\n        ? \"dedicated\"\n        : instance.billing_model === \"standard\"\n        ? \"prepaid\"\n        : marketplaceForBilling && instance.billing_cloud_account_id\n        ? {\n            marketplace: marketplaceForBilling,\n            subscription: instance.billing_cloud_account_id,\n          }\n        : undefined;\n    enhancedInstance.billing = billing;\n  } catch (e) {\n    console.warn(\n      \"kafkaRequestToKafkaInstance\",\n      `couldn't retrieve the billing info for`,\n      instance\n    );\n  }\n\n  // update the limits\n  try {\n    const limits =\n      instance.instance_type === \"developer\"\n        ? developerPlanInstanceLimits\n        : standardPlanInstanceLimits;\n    const thisInstanceLimits = limits.find((l) => l.id === instance.size_id);\n    if (thisInstanceLimits) {\n      enhancedInstance.size = thisInstanceLimits.displayName;\n      enhancedInstance.ingress = thisInstanceLimits.ingress;\n      enhancedInstance.egress = thisInstanceLimits.egress;\n      enhancedInstance.storage = {\n        type: \"bytes\",\n        value: BigInt(instance.max_data_retention_size?.bytes || 0),\n      };\n      enhancedInstance.connections = thisInstanceLimits.connections;\n      enhancedInstance.connectionRate = thisInstanceLimits.connectionRate;\n      enhancedInstance.maxPartitions = thisInstanceLimits.maxPartitions;\n      enhancedInstance.messageSize = {\n        type: \"bytes\",\n        value: BigInt(thisInstanceLimits.messageSize),\n      };\n    }\n  } catch (e) {\n    console.warn(\n      \"kafkaRequestToKafkaInstance\",\n      `couldn't retrieve the limits info for`,\n      instance\n    );\n  }\n\n  return enhancedInstance;\n}\n\nfunction apiStatusToUIStatus(status: string): Status {\n  const mapping: { [key: string]: Status } = {\n    accepted: \"accepted\",\n    preparing: \"preparing\",\n    provisioning: \"provisioning\",\n    ready: \"ready\",\n    failed: \"degraded\",\n    deprovision: \"deprovision\",\n    deleting: \"deleting\",\n  };\n  return mapping[status] || \"degraded\";\n}\n","import type { KafkaRequest } from \"@rhoas/kafka-management-sdk\";\nimport {\n  useDedicatedClustersFetchQuery,\n  useProviderRegionSizesFetchQuery,\n  useProvidersWithRegionsFetchQuery,\n  useStandardQuotaFetchQuery,\n} from \"../fetchQueries\";\nimport { kafkaRequestToKafkaInstanceEnhanched } from \"../transformers/kafkaRequestToKafkaInstanceEnhanched\";\n\nexport function useKafkaInstanceTransformer() {\n  const getStandardQuotaQuery = useStandardQuotaFetchQuery();\n  const getProvidersInfo = useProvidersWithRegionsFetchQuery();\n  const getProviderRegionsSizes = useProviderRegionSizesFetchQuery();\n  const getClusters = useDedicatedClustersFetchQuery();\n\n  return async function kafkaInstanceTransformer(instance: KafkaRequest) {\n    if (!instance.region) {\n      throw new Error(\n        `Invalid KafkaRequest, empty region: ${JSON.stringify(instance)}`\n      );\n    }\n    const standardQuota = await getStandardQuotaQuery();\n\n    const providersInfo = await getProvidersInfo(\n      instance.instance_type !== \"standard\" ? \"developer\" : \"standard\"\n    );\n    const providerInfo = providersInfo.providers.find(\n      (p) => p.id === instance.cloud_provider\n    );\n    if (!providerInfo) {\n      return Promise.reject(\"Invalid cloud provider\");\n    }\n    const standardPlanLimitsQuery = getProviderRegionsSizes(\n      providerInfo,\n      instance.region,\n      \"standard\"\n    );\n    const developerPlanLimitsQuery = getProviderRegionsSizes(\n      providerInfo,\n      instance.region,\n      \"developer\"\n    );\n    const [standardPlanLimits, developerPlanLimits] = await Promise.all([\n      standardPlanLimitsQuery,\n      developerPlanLimitsQuery,\n    ]);\n    const { clusters } = await getClusters();\n    return kafkaRequestToKafkaInstanceEnhanched(\n      instance,\n      standardQuota.marketplaceSubscriptions,\n      developerPlanLimits,\n      standardPlanLimits,\n      clusters\n    );\n  };\n}\n","import { useQuery } from \"@tanstack/react-query\";\nimport { useApiConfiguration } from \"../ApiProvider\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\nimport { useKafkaInstanceTransformer } from \"./useKafkaInstanceTransformer\";\n\nexport function useKafka(id: string | undefined, suspense = false) {\n  const { refetchInterval } = useApiConfiguration();\n  const dataMapper = useKafkaInstanceTransformer();\n  const { kafkasFleet } = useApi();\n  const api = kafkasFleet();\n\n  return useQuery({\n    enabled: Boolean(id),\n    queryKey: kafkaQueries.instance.details({ id }),\n    queryFn: async () => {\n      if (!id) {\n        return Promise.reject(\"Invalid Kafka instance id\");\n      }\n      const instance = await api.getKafkaById(id);\n      return dataMapper(instance.data);\n    },\n    refetchInterval,\n    suspense,\n  });\n}\n","import { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useApiConfiguration } from \"../ApiProvider\";\nimport type { FetchKafkasParams } from \"../fetchers\";\nimport { fetchKafkas } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\nimport { useDedicatedClusters } from \"./useDedicatedClusters\";\nimport { useKafkaInstanceTransformer } from \"./useKafkaInstanceTransformer\";\n\nexport function useKafkas(\n  params: Omit<FetchKafkasParams, \"dataMapper\" | \"getKafkas\" | \"clusterIds\">\n) {\n  const { refetchInterval } = useApiConfiguration();\n  const { data, isError } = useDedicatedClusters();\n  const queryClient = useQueryClient();\n  const dataMapper = useKafkaInstanceTransformer();\n  const { kafkasFleet } = useApi();\n  const api = kafkasFleet();\n  const clusterIds = data?.clusters.map((c) => c.id);\n\n  return useQuery({\n    queryKey: kafkaQueries.list({ ...params, clusterIds }),\n    queryFn: async () => {\n      const res = await fetchKafkas({\n        getKafkas: (...args) => api.getKafkas(...args),\n        dataMapper,\n        ...params,\n        clusterIds,\n      });\n      res.instances.forEach((i) =>\n        queryClient.setQueryData(kafkaQueries.instance.details({ id: i.id }), i)\n      );\n      return res;\n    },\n    enabled: Boolean(clusterIds) || isError,\n    refetchInterval,\n  });\n}\n","import { useQuery } from \"@tanstack/react-query\";\nimport { useApiConfiguration } from \"../ApiProvider\";\nimport type { FetchTopicParams } from \"../fetchers\";\nimport { fetchTopic } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useTopic(\n  params: { id?: string; adminUrl?: string } & Omit<\n    FetchTopicParams,\n    \"getTopic\"\n  >,\n  suspense = false\n) {\n  const { refetchInterval } = useApiConfiguration();\n  const { topics } = useApi();\n\n  return useQuery({\n    queryKey: kafkaQueries.instance.topic(params),\n    queryFn: () => {\n      if (!params.id) {\n        return Promise.reject(\"Invalid id\");\n      }\n      if (!params.adminUrl) {\n        return Promise.reject(\"Invalid adminUrl\");\n      }\n      const api = topics(params.adminUrl);\n\n      return fetchTopic({\n        getTopic: (...args) => api.getTopic(...args),\n        ...params,\n      });\n    },\n    enabled:\n      Boolean(params.adminUrl) &&\n      Boolean(params.id) &&\n      Boolean(params.topicName),\n    refetchInterval,\n    suspense,\n  });\n}\n","import { useQuery } from \"@tanstack/react-query\";\nimport { useApiConfiguration } from \"../ApiProvider\";\nimport type { FetchTopicsParams } from \"../fetchers\";\nimport { fetchTopics } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useTopics(\n  params: { id?: string; adminUrl?: string } & Omit<\n    FetchTopicsParams,\n    \"getTopics\"\n  >,\n  suspense = false\n) {\n  const { refetchInterval } = useApiConfiguration();\n  const { topics } = useApi();\n\n  return useQuery({\n    queryKey: kafkaQueries.instance.topics(params),\n    queryFn: () => {\n      if (!params.id) {\n        return Promise.reject(\"Invalid id\");\n      }\n      if (!params.adminUrl) {\n        return Promise.reject(\"Invalid adminUrl\");\n      }\n      const api = topics(params.adminUrl);\n\n      return fetchTopics({\n        getTopics: (...args) => api.getTopics(...args),\n        ...params,\n      });\n    },\n    enabled: Boolean(params.adminUrl) && Boolean(params.id),\n    refetchInterval,\n    suspense,\n  });\n}\n","import { useQuery } from \"@tanstack/react-query\";\nimport { useApiConfiguration } from \"../ApiProvider\";\nimport type { FetchUserAccountsParams } from \"../fetchers\";\nimport { fetchUserAccounts } from \"../fetchers\";\nimport { masQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useUserAccounts(\n  params: Omit<FetchUserAccountsParams, \"getUserAccounts\">,\n  suspense = false\n) {\n  const { refetchInterval } = useApiConfiguration();\n  const { userAccounts } = useApi();\n\n  return useQuery({\n    queryKey: masQueries.userAccounts(params),\n    queryFn: async () => {\n      const api = await userAccounts();\n\n      return fetchUserAccounts({\n        getUserAccounts: (...args) => api.listPrincipals(...args),\n        ...params,\n      });\n    },\n    refetchInterval,\n    suspense,\n  });\n}\n","import { useQuery } from \"@tanstack/react-query\";\nimport { useApiConfiguration } from \"../ApiProvider\";\nimport type { FetchPermissionsParams } from \"../fetchers\";\nimport { fetchPermissions } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useAcls(\n  params: { id?: string; adminUrl?: string } & Omit<\n    FetchPermissionsParams,\n    \"getAcls\"\n  >,\n  suspense = false\n) {\n  const { refetchInterval } = useApiConfiguration();\n  const { acls } = useApi();\n\n  return useQuery({\n    queryKey: kafkaQueries.instance.permissions(params),\n    queryFn: () => {\n      if (!params.adminUrl) {\n        return Promise.reject(\"Invalid adminUrl\");\n      }\n      if (!params.id) {\n        return Promise.reject(\"Invalid id\");\n      }\n      const api = acls(params.adminUrl);\n\n      return fetchPermissions({\n        getAcls: (...args) => api.getAcls(...args),\n        ...params,\n      });\n    },\n    enabled: Boolean(params.adminUrl),\n    refetchInterval,\n    suspense,\n  });\n}\n","import { useQuery } from \"@tanstack/react-query\";\nimport { useApiConfiguration } from \"../ApiProvider\";\nimport type { FetchServiceAccountsParams } from \"../fetchers\";\nimport { fetchServiceAccounts } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useServiceAccounts(\n  params: Omit<FetchServiceAccountsParams, \"getServiceAccounts\">,\n  suspense = false\n) {\n  const { refetchInterval } = useApiConfiguration();\n  const { serviceAccount } = useApi();\n\n  return useQuery({\n    queryKey: kafkaQueries.instance.serviceAccounts(params),\n    queryFn: () => {\n      const api = serviceAccount();\n\n      return fetchServiceAccounts({\n        getServiceAccounts: (...args) => api.getServiceAccounts(...args),\n        ...params,\n      });\n    },\n    refetchInterval,\n    suspense,\n  });\n}\n","import { useQuery } from \"@tanstack/react-query\";\nimport type { Status } from \"ui-models/src/models/kafka\";\nimport {\n  DeletingStatuses,\n  SuspendedStatuses,\n} from \"ui-models/src/models/kafka\";\nimport { masQueries } from \"../queryKeys\";\n\nexport function useUser({\n  getUser,\n  suspense,\n}: {\n  getUser: () => Promise<{\n    username: string | undefined;\n    isOrgAdmin: boolean | undefined;\n  }>;\n  suspense: boolean;\n}) {\n  return useQuery({\n    queryKey: masQueries.user(),\n    queryFn: async () => {\n      const { username, isOrgAdmin } = await getUser();\n\n      if (username === undefined) {\n        return Promise.reject(\"Invalid username\");\n      }\n\n      if (isOrgAdmin === undefined) {\n        return Promise.reject(\"Invalid username\");\n      }\n\n      const canOpenConnection = (status: Status): boolean => {\n        return ![...SuspendedStatuses, ...DeletingStatuses].includes(status);\n      };\n\n      const isUserOwnerOrAdmin = (owner: string) => {\n        return owner === username || isOrgAdmin;\n      };\n\n      const canChangeOwner = (owner: string, status: Status) => {\n        return (\n          owner === username ||\n          (isOrgAdmin && !SuspendedStatuses.includes(status))\n        );\n      };\n\n      return {\n        username,\n        isOrgAdmin,\n        canOpenConnection,\n        isUserOwnerOrAdmin,\n        canChangeOwner,\n      };\n    },\n    suspense,\n  });\n}\n","import { useQuery } from \"@tanstack/react-query\";\nimport { useApiConfiguration } from \"../ApiProvider\";\nimport { masQueries } from \"../queryKeys\";\n\nexport const useSSOProvider = () => {\n  const { basePath } = useApiConfiguration();\n\n  return useQuery({\n    queryKey: masQueries.tokenEndPointUrl(),\n    queryFn: async () => {\n      const response = await fetch(\n        `${basePath}/api/kafkas_mgmt/v1/sso_providers`\n      );\n      const providers = (await response.json()) as { token_url?: string };\n      const { token_url } = providers;\n      if (token_url === undefined || token_url === \"\") {\n        return Promise.reject(\"Invalid SSO token URL\");\n      }\n      return token_url;\n    },\n  });\n};\n","import { useQuery } from \"@tanstack/react-query\";\nimport { fetchSelfTermsReview } from \"../fetchers\";\nimport { masQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useSelfTermsReview(suspense = false) {\n  const { account } = useApi();\n\n  return useQuery({\n    queryKey: masQueries.selfTermsReview(),\n    queryFn: async () => {\n      const api = account();\n\n      return fetchSelfTermsReview((...args) =>\n        api.apiAuthorizationsV1SelfTermsReviewPost(...args)\n      );\n    },\n    suspense,\n  });\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport { fetchKafkas } from \"../fetchers\";\nimport { useKafkaInstanceTransformer } from \"../queries\";\nimport { kafkaQueries, masQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport const useDeveloperInstanceAvailabilityFetchQuery = () => {\n  const queryClient = useQueryClient();\n  const { kafkasFleet } = useApi();\n  const dataMapper = useKafkaInstanceTransformer();\n\n  return (getUsername: () => Promise<string>) => {\n    const fleetApi = kafkasFleet();\n    return queryClient.fetchQuery({\n      queryKey: masQueries.quota.developerAvailability(),\n      queryFn: async () => {\n        const username = await getUsername();\n        if (!username) {\n          return Promise.reject(new Error(\"Invalid username\"));\n        }\n\n        const { count } = await queryClient.fetchQuery({\n          queryKey: kafkaQueries.list({\n            direction: \"desc\",\n            sort: \"createdAt\",\n            name: [],\n            status: [],\n            owner: [username],\n            perPage: 10,\n            page: 1,\n            instanceType: \"developer\",\n          }),\n          queryFn: () =>\n            fetchKafkas({\n              getKafkas: (...args) => fleetApi.getKafkas(...args),\n              dataMapper,\n              direction: \"desc\",\n              sort: \"createdAt\",\n              name: [],\n              status: [],\n              owner: [username],\n              perPage: 10,\n              page: 1,\n              instanceType: \"developer\",\n            }),\n          staleTime: Infinity,\n        });\n\n        return count === 0;\n      },\n    });\n  };\n};\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport { useKafkaInstanceTransformer } from \"../queries\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useKafkaFetchQuery() {\n  const queryClient = useQueryClient();\n  const dataMapper = useKafkaInstanceTransformer();\n  const { kafkasFleet } = useApi();\n  return async (id: string) => {\n    const api = kafkasFleet();\n    return queryClient.fetchQuery({\n      queryKey: kafkaQueries.instance.details({ id }),\n      queryFn: async () => {\n        const instance = await api.getKafkaById(id);\n        return dataMapper(instance.data);\n      },\n    });\n  };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport { fetchKafkaKpis } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useKafkaKpisFetchQuery() {\n  const { kafkasFleet } = useApi();\n  const queryClient = useQueryClient();\n\n  return (id: string) => {\n    const api = kafkasFleet();\n\n    return queryClient.fetchQuery({\n      queryKey: kafkaQueries.instance.metrics.kpi({ id }),\n      queryFn: async () => {\n        return fetchKafkaKpis(\n          (...args) => api.getMetricsByInstantQuery(...args),\n          id\n        );\n      },\n    });\n  };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport type { FetchKafkaMetricsProps } from \"../fetchers\";\nimport { fetchKafkaMetrics } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useKafkaMetricsFetchQuery() {\n  const { kafkasFleet } = useApi();\n  const queryClient = useQueryClient();\n\n  return (params: Omit<FetchKafkaMetricsProps, \"getMetricsByRangeQuery\">) => {\n    const api = kafkasFleet();\n\n    return queryClient.fetchQuery({\n      queryKey: kafkaQueries.instance.metrics.instance(params),\n      queryFn: async () => {\n        return fetchKafkaMetrics({\n          getMetricsByRangeQuery: (...args) =>\n            api.getMetricsByRangeQuery(...args),\n          ...params,\n        });\n      },\n    });\n  };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport type { FetchMessagesParams } from \"../fetchers\";\nimport { fetchMessages } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useMessagesFetchQuery() {\n  const { records } = useApi();\n  const queryClient = useQueryClient();\n\n  return (\n    params: { id: string; adminUrl: string } & Omit<\n      FetchMessagesParams,\n      \"consumeRecords\"\n    >\n  ) => {\n    const api = records(params.adminUrl);\n\n    return queryClient.fetchQuery({\n      queryKey: kafkaQueries.instance.topicMessages(params),\n      queryFn: () => {\n        if (!params.id) {\n          return Promise.reject(\"Invalid id\");\n        }\n        if (!params.adminUrl) {\n          return Promise.reject(\"Invalid adminUrl\");\n        }\n\n        return fetchMessages({\n          consumeRecords: (...args) => api.consumeRecords(...args),\n          ...params,\n        });\n      },\n    });\n  };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport type { Plan } from \"ui-models/src/models/kafka\";\nimport type { CloudProviderInfoWithRegionsCapacity } from \"../fetchers\";\nimport { fetchProviderRegionSizes } from \"../fetchers\";\nimport { providerQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useProviderRegionSizesFetchQuery() {\n  const queryClient = useQueryClient();\n  const { kafkasFleet } = useApi();\n\n  return (\n    provider: CloudProviderInfoWithRegionsCapacity,\n    region: string,\n    plan: Plan\n  ) => {\n    const kms = kafkasFleet();\n    return queryClient.fetchQuery({\n      queryKey: providerQueries.limits[\n        plan === \"standard\" ? \"standard\" : \"developer\"\n      ]({ provider: provider.id, region }),\n      queryFn: () =>\n        fetchProviderRegionSizes(\n          (...args) => kms.getInstanceTypesByCloudProviderAndRegion(...args),\n          provider,\n          region,\n          plan\n        ),\n      staleTime: Infinity,\n    });\n  };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport type { Plan } from \"ui-models/src/models/kafka\";\nimport { fetchProvidersWithRegions } from \"../fetchers\";\nimport { providerQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useProvidersWithRegionsFetchQuery() {\n  const queryClient = useQueryClient();\n  const { kafkasFleet } = useApi();\n\n  return (plan: Plan) => {\n    const kms = kafkasFleet();\n    return queryClient.fetchQuery({\n      queryKey: providerQueries.list({ plan }),\n      queryFn: () =>\n        fetchProvidersWithRegions(\n          (...args) => kms.getCloudProviders(...args),\n          (...args) => kms.getCloudProviderRegions(...args),\n          plan\n        ),\n      staleTime: Infinity,\n    });\n  };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport { fetchOrganization, fetchStandardQuota } from \"../fetchers\";\nimport { masQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useStandardQuotaFetchQuery(skipCache = false) {\n  const queryClient = useQueryClient();\n  const { account } = useApi();\n  const ams = account();\n\n  return async () => {\n    const organization = await queryClient.fetchQuery({\n      queryKey: masQueries.organization(),\n      queryFn: () =>\n        fetchOrganization((...args) =>\n          ams.apiAccountsMgmtV1CurrentAccountGet(...args)\n        ),\n      staleTime: Infinity,\n    });\n    if (!organization) {\n      return Promise.reject(\"Missing organization id\");\n    }\n    return queryClient.fetchQuery({\n      queryKey: masQueries.quota.standardAvailable(),\n      queryFn: () =>\n        fetchStandardQuota(\n          (...args) =>\n            ams.apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(...args),\n          organization\n        ),\n      staleTime: skipCache ? undefined : Infinity,\n    });\n  };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport type { FetchTopicsParams } from \"../fetchers\";\nimport { fetchTopics } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useTopicsFetchQuery() {\n  const { topics } = useApi();\n  const queryClient = useQueryClient();\n\n  return (\n    params: Omit<FetchTopicsParams, \"getTopics\"> & {\n      id: string;\n      adminUrl: string;\n    }\n  ) => {\n    const api = topics(params.adminUrl);\n\n    return queryClient.fetchQuery({\n      queryKey: kafkaQueries.instance.topics(params),\n      queryFn: async () => {\n        return fetchTopics({\n          getTopics: (...args) => api.getTopics(...args),\n          ...params,\n        });\n      },\n    });\n  };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport type { FetchTopicsMetricsProps } from \"../fetchers\";\nimport { fetchTopicsMetrics } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useTopicsMetricsFetchQuery() {\n  const { kafkasFleet } = useApi();\n  const queryClient = useQueryClient();\n\n  return (params: Omit<FetchTopicsMetricsProps, \"getMetricsByRangeQuery\">) => {\n    const api = kafkasFleet();\n\n    return queryClient.fetchQuery({\n      queryKey: kafkaQueries.instance.metrics.topic(params),\n      queryFn: async () => {\n        return fetchTopicsMetrics({\n          getMetricsByRangeQuery: (...args) =>\n            api.getMetricsByRangeQuery(...args),\n          ...params,\n        });\n      },\n    });\n  };\n}\n","import type { KafkaRequestPayload } from \"@rhoas/kafka-management-sdk\";\nimport { APIErrorCodes, isServiceApiError } from \"@rhoas/kafka-management-sdk\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport type {\n  CreateDedicatedKafkaFormData,\n  CreateDedicatedKafkaInstanceError,\n} from \"ui\";\nimport { dedicatedQueries, kafkaQueries, masQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useCreateDedicatedKafkaMutation() {\n  const { kafkasFleet } = useApi();\n  const queryClient = useQueryClient();\n\n  return useMutation(\n    async function kafkaCreateInstance(props: {\n      instance: CreateDedicatedKafkaFormData;\n      onSuccess: () => void;\n      onError: (error: CreateDedicatedKafkaInstanceError) => void;\n    }) {\n      const { instance, onSuccess, onError } = props;\n      const api = kafkasFleet();\n      const kafkaRequest: KafkaRequestPayload = {\n        name: instance.name,\n        cluster_id: instance.cluster.id,\n      };\n      kafkaRequest.plan = \"standard.\" + instance.sizeId;\n      kafkaRequest.billing_model = \"enterprise\";\n      try {\n        await api.createKafka(true, kafkaRequest);\n        onSuccess();\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const { code } = error?.response?.data || {};\n\n          switch (code) {\n            case ErrorCodes.DUPLICATE_INSTANCE_NAME:\n              onError(\"name-taken\");\n              break;\n\n            case ErrorCodes.INTERNAL_CAPACITY_ERROR:\n              onError(\"cluster-unavailable\");\n              break;\n\n            case ErrorCodes.INSUFFICIENT_QUOTA:\n              onError(\"insufficient-quota\");\n              break;\n\n            default:\n              console.error(\n                \"useCreateDedicatedKafkaMutation\",\n                \"createKafka unknown error\",\n                error\n              );\n              onError(\"unknown\");\n          }\n        }\n      }\n    },\n    {\n      onSuccess: () => {\n        void queryClient.invalidateQueries([kafkaQueries._root()]);\n        void queryClient.invalidateQueries([masQueries.quota._root()]);\n        void queryClient.invalidateQueries([dedicatedQueries._root()]);\n      },\n    }\n  );\n}\n\nconst ErrorCodes = {\n  /** Forbidden to perform this action*/\n  UNAUTHORIZED_USER: APIErrorCodes.ERROR_4,\n  /** Kafka cluster name is already used*/\n  DUPLICATE_INSTANCE_NAME: APIErrorCodes.ERROR_36,\n  /** The maximum number of allowed kafka instances has been reached*/\n  INTERNAL_CAPACITY_ERROR: APIErrorCodes.ERROR_24,\n  /** Insufficient quota*/\n  INSUFFICIENT_QUOTA: APIErrorCodes.ERROR_120,\n  /** Forbidden to create more instances than the maximum allowed*/\n  TRIAL_USED: APIErrorCodes.ERROR_5,\n  /** Failed to check quota*/\n  FAILED_TO_CHECK_QUOTA: APIErrorCodes.ERROR_121,\n  /** Bad request*/\n  OWNER_DOES_NOT_EXIST: APIErrorCodes.ERROR_21,\n} as const;\n","import type { KafkaRequestPayload } from \"@rhoas/kafka-management-sdk\";\nimport { APIErrorCodes, isServiceApiError } from \"@rhoas/kafka-management-sdk\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport type { CreateKafkaFormData, CreateKafkaInstanceError } from \"ui\";\nimport { kafkaQueries, masQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useCreateKafkaMutation() {\n  const { kafkasFleet } = useApi();\n  const queryClient = useQueryClient();\n\n  return useMutation(\n    async function kafkaCreateInstance(props: {\n      instance: CreateKafkaFormData;\n      onSuccess: () => void;\n      onError: (error: CreateKafkaInstanceError) => void;\n    }) {\n      const { instance, onSuccess, onError } = props;\n      const api = kafkasFleet();\n      const kafkaRequest: KafkaRequestPayload = {\n        name: instance.name,\n        cloud_provider: instance.provider,\n        region: instance.region,\n      };\n      kafkaRequest.plan = instance.plan + \".\" + instance.sizeId;\n      kafkaRequest.billing_model =\n        instance.billing === \"prepaid\"\n          ? \"standard\"\n          : instance.billing !== undefined\n          ? \"marketplace\"\n          : null;\n      kafkaRequest.billing_cloud_account_id =\n        instance.billing && instance.billing !== \"prepaid\"\n          ? instance.billing.subscription\n          : null;\n      try {\n        await api.createKafka(true, kafkaRequest);\n        onSuccess();\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const { code } = error?.response?.data || {};\n\n          switch (instance.plan) {\n            case \"developer\":\n              switch (code) {\n                case ErrorCodes.DUPLICATE_INSTANCE_NAME:\n                  onError(\"name-taken\");\n                  break;\n\n                // regardless of the error, let's not give too many details to trial users\n                default:\n                  onError(\"developer-unavailable\");\n                  break;\n              }\n              break;\n\n            case \"standard\":\n              switch (code) {\n                case ErrorCodes.DUPLICATE_INSTANCE_NAME:\n                  onError(\"name-taken\");\n                  break;\n\n                case ErrorCodes.INTERNAL_CAPACITY_ERROR:\n                  onError(\"region-unavailable\");\n                  break;\n\n                case ErrorCodes.INSUFFICIENT_QUOTA:\n                  onError(\"insufficient-quota\");\n                  break;\n\n                default:\n                  console.error(\n                    \"useKafkaCreateInstanceMutation\",\n                    \"createKafka unknown error\",\n                    error\n                  );\n                  onError(\"unknown\");\n              }\n              break;\n          }\n        } else {\n          console.error(\n            \"useKafkaCreateInstanceMutation\",\n            \"createKafka unexpected error\",\n            error\n          );\n          onError(\"unknown\");\n        }\n      }\n    },\n    {\n      onSuccess: () => {\n        void queryClient.invalidateQueries([kafkaQueries._root()]);\n        void queryClient.invalidateQueries([masQueries.quota._root()]);\n      },\n    }\n  );\n}\n\nconst ErrorCodes = {\n  /** Forbidden to perform this action*/\n  UNAUTHORIZED_USER: APIErrorCodes.ERROR_4,\n  /** Kafka cluster name is already used*/\n  DUPLICATE_INSTANCE_NAME: APIErrorCodes.ERROR_36,\n  /** The maximum number of allowed kafka instances has been reached*/\n  INTERNAL_CAPACITY_ERROR: APIErrorCodes.ERROR_24,\n  /** Insufficient quota*/\n  INSUFFICIENT_QUOTA: APIErrorCodes.ERROR_120,\n  /** Forbidden to create more instances than the maximum allowed*/\n  TRIAL_USED: APIErrorCodes.ERROR_5,\n  /** Failed to check quota*/\n  FAILED_TO_CHECK_QUOTA: APIErrorCodes.ERROR_121,\n  /** Bad request*/\n  OWNER_DOES_NOT_EXIST: APIErrorCodes.ERROR_21,\n} as const;\n","import { isServiceApiError } from \"@rhoas/kafka-management-sdk\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { kafkaQueries, masQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useDeleteKafkaMutation() {\n  const { kafkasFleet } = useApi();\n  const queryClient = useQueryClient();\n\n  return useMutation(\n    async function kafkaCreateInstance(props: {\n      id: string;\n      onSuccess: () => void;\n      onError: (code: string, message: string) => void;\n    }) {\n      const { id, onSuccess, onError } = props;\n      const api = kafkasFleet();\n      try {\n        await api.deleteKafkaById(id, true);\n        onSuccess();\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const message = error?.message;\n          const { code } = error?.response?.data || {};\n\n          onError(code || \"?\", message);\n        }\n      }\n    },\n    {\n      onSuccess: () => {\n        void queryClient.invalidateQueries([kafkaQueries._root()]);\n        void queryClient.invalidateQueries([masQueries.quota._root()]);\n      },\n    }\n  );\n}\n","import { isServiceApiError } from \"@rhoas/kafka-management-sdk\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useDeleteTopicMutation() {\n  const { topics } = useApi();\n  const queryClient = useQueryClient();\n\n  return useMutation(\n    async function kafkaCreateInstance({\n      adminUrl,\n      name,\n      onSuccess,\n      onError,\n    }: {\n      instanceId: string;\n      adminUrl: string;\n      name: string;\n      onSuccess: () => void;\n      onError: (code: string, message: string) => void;\n    }) {\n      const api = topics(adminUrl);\n      try {\n        await api.deleteTopic(name);\n        onSuccess();\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const message = error?.message;\n          const { code } = error?.response?.data || {};\n\n          onError(code || \"?\", message);\n        }\n      }\n    },\n    {\n      onSuccess: (_, { adminUrl, instanceId }) => {\n        void queryClient.removeQueries([\n          kafkaQueries.instance._root({\n            id: instanceId,\n            adminUrl,\n          }),\n        ]);\n      },\n    }\n  );\n}\n","import type {\n  KafkaRequest,\n  KafkaUpdateRequest,\n} from \"@rhoas/kafka-management-sdk\";\nimport { getErrorCode, isServiceApiError } from \"@rhoas/kafka-management-sdk\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport type { AxiosResponse } from \"axios\";\nimport { AxiosError } from \"axios\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\ntype Errors = \"invalid-user\" | \"other\" | \"unknown\";\n\nexport function useUpdateKafkaMutation() {\n  const { kafkasFleet } = useApi();\n  const queryClient = useQueryClient();\n\n  return useMutation<\n    AxiosResponse<KafkaRequest>,\n    { type: Errors; message?: string },\n    { id: string; updates: KafkaUpdateRequest },\n    unknown\n  >(\n    async function kafkaCreateInstance({ id, updates }) {\n      const api = kafkasFleet();\n      try {\n        return await api.updateKafkaById(id, updates);\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const code = getErrorCode(error);\n\n          switch (code) {\n            case \"KAFKAS-MGMT-21\": {\n              return Promise.reject({\n                type: \"invalid-user\",\n                message: error.response?.data.reason,\n              });\n            }\n            default: {\n              return Promise.reject({\n                type: \"other\",\n                message: error.response?.data.reason,\n              });\n            }\n          }\n        } else if (error instanceof AxiosError) {\n          return Promise.reject({ type: \"unknown\", message: error.message });\n        } else {\n          return Promise.reject({ type: \"unknown\", message: \"unknown\" });\n        }\n      }\n    },\n    {\n      onSuccess: () => {\n        void queryClient.invalidateQueries([kafkaQueries._root()]);\n      },\n    }\n  );\n}\n","import { isServiceApiError } from \"@rhoas/kafka-management-sdk\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useDeleteConsumerGroupMutation() {\n  const { consumerGroups } = useApi();\n  const queryClient = useQueryClient();\n\n  return useMutation(\n    async function deleteConsumerGroup(props: {\n      instanceId: string;\n      adminUrl: string;\n      consumerGroupId: string;\n      onSuccess: () => void;\n      onError: (code: string, message: string) => void;\n    }) {\n      const { instanceId, adminUrl, consumerGroupId, onSuccess, onError } =\n        props;\n      const api = consumerGroups(adminUrl);\n      try {\n        await api.deleteConsumerGroupById(consumerGroupId);\n        onSuccess();\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const message = error?.message;\n          const { code } = error?.response?.data || {};\n\n          onError(code || \"?\", message);\n        }\n      }\n    },\n    {\n      onSuccess: (_, { adminUrl, instanceId }) => {\n        void queryClient.invalidateQueries([\n          kafkaQueries.instance._root({\n            id: instanceId,\n            adminUrl,\n          }),\n        ]);\n      },\n    }\n  );\n}\n","import { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useApi } from \"../useApi\";\nimport type { OffsetValue } from \"ui\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { isServiceApiError } from \"@rhoas/kafka-management-sdk\";\n\nexport function useResetConsumerGroupMutation() {\n  const { consumerGroups } = useApi();\n  const queryClient = useQueryClient();\n\n  return useMutation(\n    async function consumerGroupResetOffset(props: {\n      instanceId: string;\n      adminUrl: string;\n      consumerGroupId: string;\n      offset: OffsetValue;\n      topic: string;\n      partitions: number[];\n      value?: string;\n      onSuccess: () => void;\n      onError: (code: string, message: string) => void;\n    }) {\n      const {\n        instanceId,\n        adminUrl,\n        consumerGroupId,\n        offset,\n        topic,\n        partitions,\n        value,\n        onSuccess,\n        onError,\n      } = props;\n      const api = consumerGroups(adminUrl);\n      try {\n        await api.resetConsumerGroupOffset(consumerGroupId, {\n          value,\n          offset,\n          topics: [{ topic, partitions }],\n        });\n        onSuccess();\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const message = error?.message;\n          const { code } = error?.response?.data || {};\n\n          onError(code || \"?\", message);\n        }\n      }\n    },\n    {\n      onSuccess: (_, { adminUrl, instanceId }) => {\n        void queryClient.invalidateQueries([\n          kafkaQueries.instance._root({\n            id: instanceId,\n            adminUrl,\n          }),\n        ]);\n      },\n    }\n  );\n}\n","import { isServiceApiError } from \"@rhoas/kafka-management-sdk\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport type { AclFilter } from \"../types\";\nimport { useApi } from \"../useApi\";\n\nexport function useDeletePermissionsMutation() {\n  const { acls } = useApi();\n  const queryClient = useQueryClient();\n\n  return useMutation(\n    async function deletePermissions(props: {\n      instanceId: string;\n      adminUrl: string;\n      acl: AclFilter;\n      onSuccess: () => void;\n      onError: (code: string, message: string) => void;\n    }) {\n      const { adminUrl, acl, onSuccess, onError } = props;\n      const api = acls(adminUrl);\n      try {\n        await api.deleteAcls(\n          acl.resourceType,\n          acl.resourceName,\n          acl.patternType,\n          acl.principal,\n          acl.operation,\n          acl.permissionType\n        );\n        onSuccess();\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const message = error?.response?.data.reason || \"\";\n          const { code } = error?.response?.data || {};\n\n          onError(code || \"?\", message);\n        }\n      }\n    },\n    {\n      onSuccess: (_, { adminUrl, instanceId }) => {\n        void queryClient.invalidateQueries([\n          kafkaQueries.instance.permissions({\n            id: instanceId,\n            adminUrl,\n          }),\n        ]);\n      },\n    }\n  );\n}\n","import type { AclBinding } from \"@rhoas/kafka-instance-sdk\";\nimport { isServiceApiError } from \"@rhoas/kafka-management-sdk\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useUpdatePermissionsMutation() {\n  const { acls } = useApi();\n  const queryClient = useQueryClient();\n\n  return useMutation(\n    async function updatePermissionsPermissions(props: {\n      instanceId: string;\n      adminUrl: string;\n      acl: AclBinding;\n      onSuccess: () => void;\n      onError: (code: string, message: string) => void;\n    }) {\n      const { adminUrl, acl, onSuccess, onError } = props;\n      const api = acls(adminUrl);\n      try {\n        await api.createAcl({\n          resourceName: acl.resourceName,\n          resourceType: acl.resourceType,\n          patternType: acl.patternType,\n          permission: acl.permission,\n          principal: acl.principal,\n          operation: acl.operation,\n        });\n        onSuccess();\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const message = error?.message;\n          const { code } = error?.response?.data || {};\n\n          onError(code || \"?\", message);\n        }\n      }\n    },\n    {\n      onSuccess: (_, { adminUrl, instanceId }) => {\n        void queryClient.invalidateQueries([\n          kafkaQueries.instance._root({\n            id: instanceId,\n            adminUrl,\n          }),\n        ]);\n      },\n    }\n  );\n}\n","import { isServiceApiError } from \"@rhoas/kafka-management-sdk\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\nimport type { NewTopicInput } from \"@rhoas/kafka-instance-sdk\";\nimport { convertToTopicSettings } from \"consoledot-api/src/transformers/topicTransformer\";\nimport type { TopicForm } from \"ui\";\n\nexport function useCreateTopicMutation() {\n  const { topics } = useApi();\n  const queryClient = useQueryClient();\n\n  return useMutation(\n    async function createTopic(props: {\n      instanceId: string;\n      adminUrl: string;\n      topic: TopicForm;\n      onSuccess: () => void;\n      onError: (code: string, message: string) => void;\n    }) {\n      const { adminUrl, topic, onSuccess, onError } = props;\n      const api = topics(adminUrl);\n\n      const createTopic = (topic: TopicForm): NewTopicInput => {\n        const { name } = topic;\n        const topicSettings = convertToTopicSettings(topic);\n        return {\n          name,\n          settings: topicSettings,\n        };\n      };\n\n      try {\n        await api.createTopic(createTopic(topic));\n        onSuccess();\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const message = error?.response?.data.reason;\n          const { code } = error?.response?.data || {};\n\n          onError(code || \"?\", message || \"?\");\n        }\n      }\n    },\n    {\n      onSuccess: (_, { adminUrl, instanceId }) => {\n        void queryClient.invalidateQueries([\n          kafkaQueries.instance._root({\n            id: instanceId,\n            adminUrl,\n          }),\n        ]);\n      },\n    }\n  );\n}\n","import { isServiceApiError } from \"@rhoas/kafka-management-sdk\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\nimport { convertToTopicSettings } from \"consoledot-api/src/transformers/topicTransformer\";\nimport type { TopicForm } from \"ui\";\n\nexport function useUpdateTopicMutation() {\n  const { topics } = useApi();\n  const queryClient = useQueryClient();\n\n  return useMutation(\n    async function UpdateTopicMutation({\n      adminUrl,\n      topic,\n      onSuccess,\n      onError,\n    }: {\n      instanceId: string;\n      adminUrl: string;\n      topic: TopicForm;\n      onSuccess: () => void;\n      onError: (code: string, message: string) => void;\n    }) {\n      const api = topics(adminUrl);\n\n      const updateTopic = (topic: TopicForm) => {\n        const topicSettings = convertToTopicSettings(topic);\n        return topicSettings;\n      };\n\n      try {\n        await api.updateTopic(topic.name || \"\", updateTopic(topic));\n        onSuccess();\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const message = error?.response?.data.reason;\n          const { code } = error?.response?.data || {};\n\n          onError(code || \"?\", message || \"?\");\n        }\n      }\n    },\n    {\n      onSuccess: (_, { adminUrl, instanceId }) => {\n        void queryClient.removeQueries([\n          kafkaQueries.instance._root({\n            id: instanceId,\n            adminUrl,\n          }),\n        ]);\n      },\n    }\n  );\n}\n","import type {\n  AclOperationFilter,\n  AclPatternTypeFilter,\n  AclPermissionTypeFilter,\n  AclResourceTypeFilter,\n} from \"@rhoas/kafka-instance-sdk\";\nimport {\n  ConsumerGroupOrderKey,\n  TopicOrderKey,\n} from \"@rhoas/kafka-instance-sdk\";\nimport type { RangeQuery } from \"@rhoas/kafka-management-sdk\";\n\nexport type NoUndefinedField<T> = {\n  [P in keyof T]-?: NoUndefinedField<NonNullable<T[P]>>;\n};\n\nexport type SafeRangeQuery = NoUndefinedField<RangeQuery>;\n\nexport const KafkaInstancesSortableColumns = [\n  \"name\",\n  \"owner\",\n  \"createdAt\",\n  \"provider\",\n  \"region\",\n] as const;\n\nexport type KafkaInstancesSortableColumn =\n  (typeof KafkaInstancesSortableColumns)[number];\n\nexport const KafkaTopicsSortableColumns = [\n  ...Object.values(TopicOrderKey),\n] as const;\n\nexport type KafkaTopicsSortableColumn =\n  (typeof KafkaTopicsSortableColumns)[number];\n\nexport const KafkaConsumerGroupSortableColumns = [\n  ...Object.values(ConsumerGroupOrderKey),\n] as const;\n\nexport type KafkaConsumerGroupSortableColumn =\n  (typeof KafkaConsumerGroupSortableColumns)[number];\n\nexport type AclFilter = {\n  resourceType?: AclResourceTypeFilter;\n  resourceName?: string;\n  patternType?: AclPatternTypeFilter;\n  principal?: string;\n  operation?: AclOperationFilter;\n  permissionType?: AclPermissionTypeFilter;\n};\n","import type {\n  FetchConsumerGroupParams,\n  FetchConsumerGroupsParams,\n  FetchDedicatedClusterSizesParams,\n  FetchKafkaMetricsProps,\n  FetchKafkasParams,\n  FetchMessagesParams,\n  FetchPermissionsParams,\n  FetchServiceAccountsParams,\n  FetchTopicParams,\n  FetchTopicsMetricsProps,\n  FetchTopicsParams,\n  FetchUserAccountsParams,\n} from \"./fetchers\";\n\nexport const masQueries = {\n  _root: () => ({ scope: \"mas\" } as const),\n  organization: () =>\n    [{ ...masQueries._root(), entity: \"organization\" }] as const,\n  selfTermsReview: () =>\n    [{ ...masQueries._root(), entity: \"selfTermsReview\" }] as const,\n  userAccounts: (params: Omit<FetchUserAccountsParams, \"getUserAccounts\">) =>\n    [{ ...masQueries._root(), entity: \"userAccounts\" }, params] as const,\n  user: () => [{ ...masQueries._root(), entity: \"user\" }] as const,\n  tokenEndPointUrl: () =>\n    [{ ...masQueries._root(), entity: \"tokenEndPointUrl\" }] as const,\n\n  quota: {\n    _root: () => ({ ...masQueries._root(), entity: \"quota\" } as const),\n    standardAvailable: () =>\n      [\n        { ...masQueries.quota._root(), subentity: \"standardAvailable\" },\n      ] as const,\n    dedicatedAvailable: () =>\n      [\n        { ...masQueries.quota._root(), subentity: \"dedicatedAvailable\" },\n      ] as const,\n    developerAvailability: () =>\n      [\n        { ...masQueries.quota._root(), subentity: \"developerAvailability\" },\n      ] as const,\n    standardAvailability: () =>\n      [\n        { ...masQueries.quota._root(), subentity: \"standardAvailability\" },\n      ] as const,\n  },\n} as const;\n\nexport const dedicatedQueries = {\n  _root: () => ({ ...masQueries._root(), entity: \"dedicated\" } as const),\n  cluster: (params: { id: string }) =>\n    [{ ...dedicatedQueries._root(), subentity: \"cluster\" }, params] as const,\n  clusters: () =>\n    [{ ...dedicatedQueries._root(), subentity: \"clusters\" }] as const,\n  clusterNames: (clusterIds: string[]) =>\n    [\n      { ...dedicatedQueries._root(), subentity: \"clusterNames\" },\n      { clusterIds },\n    ] as const,\n  clusterSizes: (\n    params: Omit<FetchDedicatedClusterSizesParams, \"getEnterpriseClusterById\">\n  ) =>\n    [\n      { ...dedicatedQueries._root(), subentity: \"clusterSize\" },\n      params,\n    ] as const,\n};\n\nexport const kafkaQueries = {\n  _root: () => ({ scope: \"kafka\" } as const),\n  list: (params: Omit<FetchKafkasParams, \"dataMapper\" | \"getKafkas\">) =>\n    [\n      {\n        ...kafkaQueries._root(),\n        entity: \"list\",\n      },\n      params,\n    ] as const,\n  instance: {\n    _root: ({ id, adminUrl }: { id?: string; adminUrl?: string }) =>\n      ({ ...kafkaQueries._root(), entity: \"instance\", id, adminUrl } as const),\n    details: (params: { id?: string }) =>\n      [\n        { ...kafkaQueries.instance._root(params), subentity: \"details\" },\n      ] as const,\n    topics: ({\n      id,\n      adminUrl,\n      ...params\n    }: { id?: string; adminUrl?: string } & Omit<\n      FetchTopicsParams,\n      \"getTopics\"\n    >) =>\n      [\n        {\n          ...kafkaQueries.instance._root({ id, adminUrl }),\n          subentity: \"topics\",\n        },\n        params,\n      ] as const,\n    topic: ({\n      id,\n      adminUrl,\n      topicName,\n    }: { id?: string; adminUrl?: string } & Omit<\n      FetchTopicParams,\n      \"getTopic\"\n    >) =>\n      [\n        {\n          ...kafkaQueries.instance._root({ id, adminUrl }),\n          subentity: \"topic\",\n        },\n        { topicName },\n      ] as const,\n    topicMessages: ({\n      id,\n      adminUrl,\n      topicName,\n      ...params\n    }: { id?: string; adminUrl?: string } & Omit<\n      FetchMessagesParams,\n      \"consumeRecords\"\n    >) =>\n      [\n        {\n          ...kafkaQueries.instance._root({ id, adminUrl }),\n          subentity: \"topicMessages\",\n        },\n        { topicName, ...params },\n      ] as const,\n    consumerGroups: (\n      params: { id?: string; adminUrl?: string } & Omit<\n        FetchConsumerGroupsParams,\n        \"getConsumerGroups\"\n      >\n    ) =>\n      [\n        {\n          ...kafkaQueries.instance._root(params),\n          subentity: \"consumer-groups\",\n        },\n        params,\n      ] as const,\n    consumerGroup: ({\n      id,\n      adminUrl,\n      consumerGroupId,\n    }: { id?: string; adminUrl?: string } & Omit<\n      FetchConsumerGroupParams,\n      \"getConsumerGroupById\"\n    >) =>\n      [\n        {\n          ...kafkaQueries.instance._root({ id, adminUrl }),\n          subentity: \"consumerGroup\",\n        },\n        { consumerGroupId },\n      ] as const,\n    serviceAccounts: (\n      params: Omit<FetchServiceAccountsParams, \"getServiceAccounts\">\n    ) =>\n      [{ ...masQueries._root(), entity: \"serviceAccounts\" }, params] as const,\n    permissions: (\n      params: { id?: string; adminUrl?: string } & Omit<\n        FetchPermissionsParams,\n        \"getAcls\"\n      >\n    ) =>\n      [\n        {\n          ...kafkaQueries.instance._root(params),\n          subentity: \"acls\",\n        },\n        params,\n      ] as const,\n    metrics: {\n      _root: ({ id }: { id: string }) =>\n        ({\n          ...kafkaQueries.instance._root({ id }),\n          subentity: \"metrics\",\n          id,\n        } as const),\n      kpi: (params: { id: string }) =>\n        [{ ...kafkaQueries.instance._root(params), type: \"kpi\" }] as const,\n      instance: ({\n        id,\n        ...params\n      }: Omit<FetchKafkaMetricsProps, \"getMetricsByRangeQuery\">) =>\n        [\n          {\n            ...kafkaQueries.instance._root({ id }),\n            type: \"instance\",\n          },\n          params,\n        ] as const,\n      topic: ({\n        id,\n        ...params\n      }: Omit<FetchTopicsMetricsProps, \"getMetricsByRangeQuery\">) =>\n        [\n          {\n            ...kafkaQueries.instance._root({ id }),\n            type: \"topic\",\n          },\n          params,\n        ] as const,\n    },\n  },\n} as const;\n\nexport const providerQueries = {\n  _root: () => ({ scope: \"providers\" }),\n  list: (params: { plan?: string }) =>\n    [{ ...providerQueries._root(), entity: \"list\", ...params }] as const,\n  limits: {\n    _root: ({ provider }: { provider?: string }) =>\n      ({\n        ...providerQueries._root(),\n        entity: \"limits\",\n        provider,\n      } as const),\n    standard: ({ provider, region }: { provider?: string; region: string }) => [\n      {\n        ...providerQueries.limits._root({ provider }),\n        plan: \"standard\",\n        region,\n      },\n    ],\n    developer: ({\n      provider,\n      region,\n    }: {\n      provider?: string;\n      region: string;\n    }) => [\n      {\n        ...providerQueries.limits._root({ provider }),\n        plan: \"developer\",\n        region,\n      },\n    ],\n  },\n} as const;\n","import type { Topic as ApiTopic } from \"@rhoas/kafka-instance-sdk\";\nimport type { Plan } from \"ui-models/src/models/kafka\";\nimport type { Topic } from \"ui-models/src/models/topic\";\nimport type {\n  TopicConfig,\n  TopicConfigField,\n} from \"ui-models/src/models/topic-config\";\nimport type { Bytes, Milliseconds } from \"ui-models/src/types\";\nimport type { TopicSettings } from \"@rhoas/kafka-instance-sdk\";\nimport type { CustomRetentionSizeSelect, CustomSelect, TopicForm } from \"ui\";\nimport { convert } from \"convert\";\n\nexport const retentionTimeTransformer = (value: CustomSelect) => {\n  if (value.value != null)\n    switch (value.unit) {\n      case \"days\": {\n        const convertedValue = convert(BigInt(value.value), \"days\").to(\"ms\");\n        return convertedValue;\n      }\n      case \"weeks\": {\n        const convertedValue = convert(BigInt(value.value), \"weeks\").to(\"ms\");\n        return convertedValue;\n      }\n      case \"seconds\": {\n        const convertedValue = convert(BigInt(value.value), \"seconds\").to(\"ms\");\n        return convertedValue;\n      }\n      case \"hours\": {\n        const convertedValue = convert(BigInt(value.value), \"hours\").to(\"ms\");\n        return convertedValue;\n      }\n      case \"minutes\": {\n        const convertedValue = convert(BigInt(value.value), \"minutes\").to(\"ms\");\n        return convertedValue;\n      }\n      case \"unlimited\": {\n        return BigInt(value.value);\n      }\n      case \"milliseconds\": {\n        return BigInt(value.value);\n      }\n    }\n};\n\nexport const retentionSizeTransformer = (size: CustomRetentionSizeSelect) => {\n  switch (size.unit) {\n    case \"bytes\":\n      return BigInt(size.value);\n    case \"kibibytes\":\n      return convert(BigInt(size.value), \"kibibytes\").to(\"bytes\");\n    case \"mebibytes\":\n      return convert(BigInt(size.value), \"mebibytes\").to(\"bytes\");\n    case \"gibibytes\":\n      return convert(BigInt(size.value), \"gibibytes\").to(\"bytes\");\n    case \"tebibytes\":\n      return convert(BigInt(size.value), \"tebibytes\").to(\"bytes\");\n    case \"unlimited\":\n      return BigInt(size.value);\n  }\n};\n\nexport type UserEditable = Pick<\n  TopicConfig,\n  \"retention.ms\" | \"retention.bytes\" | \"cleanup.policy\"\n>;\n\nexport const developerDefaults: TopicConfig = {\n  \"cleanup.policy\": \"delete\",\n  \"delete.retention.ms\": { type: \"ms\", value: BigInt(\"86400000\") },\n  \"max.compaction.lag.ms\": { type: \"ms\", value: BigInt(\"9223372036854775807\") },\n  \"max.message.bytes\": { type: \"bytes\", value: BigInt(\"1048588\") },\n  \"message.downconversion.enable\": true,\n  \"message.timestamp.difference.max.ms\": {\n    type: \"ms\",\n    value: BigInt(\"9223372036854775807\"),\n  },\n  \"message.timestamp.type\": \"CreateTime\",\n  \"min.compaction.lag.ms\": { type: \"ms\", value: BigInt(\"0\") },\n  \"retention.bytes\": { type: \"bytes\", value: BigInt(\"-1\") },\n  \"retention.ms\": { type: \"ms\", value: BigInt(\"604800000\") },\n  \"segment.bytes\": { type: \"bytes\", value: BigInt(\"1073741824\") },\n  \"segment.ms\": { type: \"ms\", value: BigInt(\"604800000\") },\n  \"compression.type\": \"producer\",\n  \"file.delete.delay.ms\": { type: \"ms\", value: BigInt(\"60000\") },\n  \"flush.messages\": { type: \"ms\", value: BigInt(\"9223372036854775807\") },\n  \"flush.ms\": { type: \"ms\", value: BigInt(\"9223372036854775807\") },\n  \"index.interval.bytes\": { type: \"bytes\", value: BigInt(\"4096\") },\n  \"message.format.version\": \"3.0-IV1\",\n  \"min.cleanable.dirty.ratio\": 0.5,\n  \"min.insync.replicas\": 1,\n  \"segment.index.bytes\": { type: \"bytes\", value: BigInt(\"10485760\") },\n  \"segment.jitter.ms\": { type: \"ms\", value: BigInt(\"0\") },\n  \"unclean.leader.election.enable\": false,\n  preallocate: false,\n} as const;\n\nexport const standardDefaults: TopicConfig = {\n  \"cleanup.policy\": \"delete\",\n  \"delete.retention.ms\": { type: \"ms\", value: BigInt(\"86400000\") },\n  \"max.compaction.lag.ms\": { type: \"ms\", value: BigInt(\"9223372036854775807\") },\n  \"max.message.bytes\": { type: \"bytes\", value: BigInt(\"1048588\") },\n  \"message.downconversion.enable\": true,\n  \"message.timestamp.difference.max.ms\": {\n    type: \"ms\",\n    value: BigInt(\"9223372036854775807\"),\n  },\n  \"message.timestamp.type\": \"CreateTime\",\n  \"min.compaction.lag.ms\": { type: \"ms\", value: BigInt(\"0\") },\n  \"retention.bytes\": { type: \"bytes\", value: BigInt(\"-1\") },\n  \"retention.ms\": { type: \"ms\", value: BigInt(\"604800000\") },\n  \"segment.bytes\": { type: \"bytes\", value: BigInt(\"1073741824\") },\n  \"segment.ms\": { type: \"ms\", value: BigInt(\"604800000\") },\n  \"compression.type\": \"producer\",\n  \"file.delete.delay.ms\": { type: \"ms\", value: BigInt(\"60000\") },\n  \"flush.messages\": { type: \"ms\", value: BigInt(\"9223372036854775807\") },\n  \"flush.ms\": { type: \"ms\", value: BigInt(\"9223372036854775807\") },\n  \"index.interval.bytes\": { type: \"bytes\", value: BigInt(\"4096\") },\n  \"message.format.version\": \"3.0-IV1\",\n  \"min.cleanable.dirty.ratio\": 0.5,\n  \"min.insync.replicas\": 2,\n  \"segment.index.bytes\": { type: \"bytes\", value: BigInt(\"10485760\") },\n  \"segment.jitter.ms\": { type: \"ms\", value: BigInt(\"0\") },\n  \"unclean.leader.election.enable\": false,\n  preallocate: false,\n} as const;\n\nexport function topicTransformerFactory(plan: Plan) {\n  const d = plan === \"developer\" ? developerDefaults : standardDefaults;\n\n  return function topicTransformer(t: ApiTopic): Topic {\n    if (!t.name) {\n      throw new Error(`Invalid topic, name is empty: ${JSON.stringify(t)}`);\n    }\n    const cm = Object.fromEntries<string>(\n      t.config?.map((c) => [c.key as TopicConfigField, c.value]) || []\n    );\n    const config: TopicConfig = {\n      \"cleanup.policy\": cm[\"cleanup.policy\"] as TopicConfig[\"cleanup.policy\"],\n      \"delete.retention.ms\": configValueToMilliseconds(\n        cm[\"delete.retention.ms\"],\n        d[\"delete.retention.ms\"]\n      ),\n      \"max.compaction.lag.ms\": configValueToMilliseconds(\n        cm[\"max.compaction.lag.ms\"],\n        d[\"max.compaction.lag.ms\"]\n      ),\n      \"max.message.bytes\": configValueToBytes(\n        cm[\"max.message.bytes\"],\n        d[\"max.message.bytes\"]\n      ),\n      \"message.downconversion.enable\": configValueToBoolean(\n        cm[\"message.downconversion.enable\"],\n        d[\"message.downconversion.enable\"]\n      ),\n      \"message.timestamp.difference.max.ms\": configValueToMilliseconds(\n        cm[\"message.timestamp.difference.max.ms\"],\n        d[\"message.timestamp.difference.max.ms\"]\n      ),\n      \"message.timestamp.type\": cm[\n        \"message.timestamp.type\"\n      ] as TopicConfig[\"message.timestamp.type\"],\n      \"min.compaction.lag.ms\": configValueToMilliseconds(\n        cm[\"min.compaction.lag.ms\"],\n        d[\"min.compaction.lag.ms\"]\n      ),\n      \"retention.bytes\": configValueToBytes(\n        cm[\"retention.bytes\"],\n        d[\"retention.bytes\"]\n      ),\n      \"retention.ms\": configValueToMilliseconds(\n        cm[\"retention.ms\"],\n        d[\"retention.ms\"]\n      ),\n      \"segment.bytes\": configValueToBytes(\n        cm[\"segment.bytes\"],\n        d[\"segment.bytes\"]\n      ),\n      \"segment.ms\": configValueToMilliseconds(\n        cm[\"segment.ms\"],\n        d[\"segment.ms\"]\n      ),\n      \"compression.type\": cm[\n        \"compression.type\"\n      ] as TopicConfig[\"compression.type\"],\n      \"file.delete.delay.ms\": configValueToMilliseconds(\n        cm[\"file.delete.delay.ms\"],\n        d[\"file.delete.delay.ms\"]\n      ),\n      \"flush.messages\": configValueToMilliseconds(\n        cm[\"flush.messages\"],\n        d[\"flush.messages\"]\n      ),\n      \"flush.ms\": configValueToMilliseconds(cm[\"flush.ms\"], d[\"flush.ms\"]),\n      \"follower.replication.throttled.replicas\":\n        cm[\"follower.replication.throttled.replicas\"],\n      \"index.interval.bytes\": configValueToBytes(\n        cm[\"index.interval.bytes\"],\n        d[\"index.interval.bytes\"]\n      ),\n      \"leader.replication.throttled.replicas\":\n        cm[\"leader.replication.throttled.replicas\"],\n      \"message.format.version\": cm[\"message.format.version\"],\n      \"min.cleanable.dirty.ratio\": configValueToNumber(\n        cm[\"min.cleanable.dirty.ratio\"],\n        d[\"min.cleanable.dirty.ratio\"]\n      ),\n      \"min.insync.replicas\": configValueToNumber(\n        cm[\"min.insync.replicas\"],\n        d[\"min.insync.replicas\"]\n      ),\n      \"segment.index.bytes\": configValueToBytes(\n        cm[\"segment.index.bytes\"],\n        d[\"segment.index.bytes\"]\n      ),\n      \"segment.jitter.ms\": configValueToMilliseconds(\n        cm[\"segment.jitter.ms\"],\n        d[\"segment.jitter.ms\"]\n      ),\n      \"unclean.leader.election.enable\": configValueToBoolean(\n        cm[\"unclean.leader.election.enable\"],\n        d[\"unclean.leader.election.enable\"]\n      ),\n      preallocate: configValueToBoolean(cm[\"preallocate\"], d[\"preallocate\"]),\n    };\n    return {\n      name: t.name,\n      partitions: t.partitions || [],\n      ...config,\n    };\n  };\n}\n\nfunction configValueToMilliseconds(\n  value: string,\n  defaultIfEmpty: Milliseconds\n): Milliseconds {\n  return value && value.trim().length > 0\n    ? { type: \"ms\", value: BigInt(value.trim()) }\n    : defaultIfEmpty;\n}\n\nfunction configValueToBytes(value: string, defaultIfEmpty: Bytes): Bytes {\n  return value && value.trim().length > 0\n    ? { type: \"bytes\", value: BigInt(value.trim()) }\n    : defaultIfEmpty;\n}\n\nfunction configValueToNumber(value: string, defaultIfError: number): number {\n  return parseInt(value, 10) || defaultIfError;\n}\n\nfunction configValueToBoolean(value: string, defaultIfError: boolean): boolean {\n  try {\n    const v: unknown = JSON.parse(value);\n    if (typeof v === \"boolean\") {\n      return v;\n    }\n  } catch {\n    // not a boolean, fallback to the default\n  }\n  return defaultIfError;\n}\n\nexport const convertToKeyValuePairs = (inputObj: UserEditable) => {\n  const keyValuePairs: Array<{ key: string; value: string }> = [];\n  if (inputObj[\"retention.ms\"]) {\n    keyValuePairs.push({\n      key: \"retention.ms\",\n      value: inputObj[\"retention.ms\"].value.toString(),\n    });\n  }\n\n  if (inputObj[\"retention.bytes\"]) {\n    keyValuePairs.push({\n      key: \"retention.bytes\",\n      value: inputObj[\"retention.bytes\"].value.toString(),\n    });\n  }\n\n  if (inputObj[\"cleanup.policy\"]) {\n    keyValuePairs.push({\n      key: \"cleanup.policy\",\n      value: inputObj[\"cleanup.policy\"],\n    });\n  }\n\n  return keyValuePairs;\n};\n\nexport const convertToTopicSettings = (topic: TopicForm): TopicSettings => {\n  const tranformedValueInMilliseconds =\n    topic.retentionTime.value == -1\n      ? BigInt(-1)\n      : retentionTimeTransformer(topic.retentionTime);\n  const tranformedValueInBytes =\n    topic.retentionSize.value == -1\n      ? BigInt(-1)\n      : retentionSizeTransformer(topic.retentionSize);\n\n  const config: UserEditable = {\n    \"retention.ms\": {\n      value: tranformedValueInMilliseconds || BigInt(-1),\n      type: \"ms\",\n    },\n    \"retention.bytes\": {\n      value: tranformedValueInBytes || BigInt(-1),\n      type: \"bytes\",\n    },\n    \"cleanup.policy\": topic.cleanupPolicy,\n  };\n  const configEntries = convertToKeyValuePairs(config);\n  const topicSettings: TopicSettings = {\n    numPartitions: topic.partitions,\n    config: configEntries,\n  };\n  return topicSettings;\n};\n","import { PrincipalApi } from \"@redhat-cloud-services/rbac-client\";\nimport { AppServicesApi } from \"@rhoas/account-management-sdk\";\nimport {\n  Configuration,\n  DefaultApi,\n  SecurityApi,\n  EnterpriseDataplaneClustersApi\n} from \"@rhoas/kafka-management-sdk\";\nimport {\n  GroupsApi,\n  RecordsApi,\n  TopicsApi,\n  AclsApi,\n} from \"@rhoas/kafka-instance-sdk\";\nimport { useCallback } from \"react\";\nimport { useApiConfiguration } from \"./ApiProvider\";\n\nexport const useApi = () => {\n  const { basePath, accessToken } = useApiConfiguration();\n\n  const kafkasFleet = useCallback(\n    () =>\n      new DefaultApi(\n        new Configuration({\n          accessToken,\n          basePath,\n        })\n      ),\n    [accessToken, basePath]\n  );\n\n  const userAccounts = useCallback(async () => {\n    const token = await accessToken();\n    return new PrincipalApi({\n      accessToken: token,\n      basePath: `/api/rbac/v1`,\n    });\n  }, [accessToken]);\n\n  const serviceAccount = useCallback(\n    () =>\n      new SecurityApi(\n        new Configuration({\n          accessToken,\n          basePath,\n        })\n      ),\n    [accessToken, basePath]\n  );\n\n  const account = useCallback(\n    () =>\n      new AppServicesApi(\n        new Configuration({\n          accessToken,\n          basePath,\n        })\n      ),\n    [accessToken, basePath]\n  );\n\n  const topics = useCallback(\n    (adminUrl: string) =>\n      new TopicsApi(\n        new Configuration({\n          accessToken,\n          basePath: adminUrl,\n        })\n      ),\n    [accessToken]\n  );\n\n  const consumerGroups = useCallback(\n    (adminUrl: string) =>\n      new GroupsApi(\n        new Configuration({\n          accessToken,\n          basePath: adminUrl,\n        })\n      ),\n    [accessToken]\n  );\n\n  const acls = useCallback(\n    (adminUrl: string) =>\n      new AclsApi(\n        new Configuration({\n          accessToken,\n          basePath: adminUrl,\n        })\n      ),\n    [accessToken]\n  );\n\n  const records = useCallback(\n    (adminUrl: string) =>\n      new RecordsApi(\n        new Configuration({\n          accessToken,\n          basePath: adminUrl,\n        })\n      ),\n    [accessToken]\n  );\n\n  const dedicatedClusters = useCallback(\n    () =>\n      new EnterpriseDataplaneClustersApi(\n        new Configuration({\n          accessToken,\n          basePath,\n        })\n      ),\n    [accessToken, basePath]\n  );\n\n  return {\n    kafkasFleet,\n    account,\n    topics,\n    consumerGroups,\n    records,\n    userAccounts,\n    acls,\n    serviceAccount,\n    dedicatedClusters,\n  };\n};\n","const REACT_QUERY_DEVTOOLS = \"mas.devtools\";\nconst METRICS_LAG_ALERT = \"mas.rhosak.metrics.lag-alert-closed\";\n\nexport function isDevToolsEnabled() {\n  return localStorage.getItem(REACT_QUERY_DEVTOOLS) === \"true\";\n}\n\nexport function metricsIsLagAlertsDismissed() {\n  return localStorage.getItem(METRICS_LAG_ALERT) === \"true\";\n}\n\nexport function metricsDismissLagAlerts() {\n  return localStorage.setItem(METRICS_LAG_ALERT, \"true\");\n}\n","import type { Bytes, DateIsoString } from \"../types\";\n\n/**\n * All the details abut a Kafka instance.\n *\n * Unless differently specified, the values marked as accepting `undefined`\n * will come from extra API calls.\n */\nexport type Kafka = {\n  id: string;\n  name: string;\n  createdAt: DateIsoString;\n  updatedAt: DateIsoString;\n  expiryDate: DateIsoString | undefined;\n  owner: string;\n  provider: CloudProvider;\n  region: CloudRegion;\n  status: Status;\n  plan: Plan;\n  size: string | undefined;\n  ingress: number | undefined;\n  egress: number | undefined;\n  storage: Bytes | undefined;\n  maxPartitions: number | undefined;\n  connections: number | undefined;\n  connectionRate: number | undefined;\n  messageSize: Bytes | undefined;\n  az: AZ;\n  billing: \"prepaid\" | MarketplaceSubscription | \"dedicated\" | undefined;\n  clusterId: string | undefined;\n  clusterName: string | undefined;\n  version: string;\n  bootstrapUrl: string | undefined;\n  adminUrl: string | undefined;\n};\nexport type KafkaField = keyof Kafka;\n\n/**\n * Supported Cloud Providers. Extend this to add a new provider, then follow\n * Typescript errors to find where extra information need to be added (images,\n * translations).\n */\nexport type CloudProvider = \"aws\" | \"gcp\" | \"azure\";\n\n/**\n * A Cloud Region. Since this varies between Cloud Providers and has no extra\n * visual attached, we take its name from the API and do no further\n * transformation.\n */\nexport type CloudRegion = string;\n/**\n * Cloud provider multi availability zone\n */\nexport type AZ = \"single\" | \"multi\";\n/**\n * A number that describes how much does an instance cost to create\n */\nexport type Quota = number;\n/**\n * The capabilities of an instance, and its quota cost. Some sizes might not be\n * enabled, eg. because temporarily out of capacity\n */\nexport type Size = {\n  id: string;\n  displayName: string;\n  status: \"stable\" | \"preview\";\n  quota: Quota;\n  ingress: number;\n  egress: number;\n  storage: number;\n  connections: number;\n  connectionRate: number;\n  maxPartitions: number;\n  messageSize: number;\n  isDisabled: boolean;\n};\n/**\n * Paid for instances are `standard`, evaluation instances are `developer`.\n * `standard` instances have a `Quota` associated, and bigger sizes.\n * `developer` instances are free to be created (up to 1 per user), have a\n * single, smaller size option than `standard` ones, and they expire after a\n * few hours.\n *\n * Plan `enterprise` is the equivalent of `standard` instances but for dedicated\n * clusters.\n *\n * Note: a new kind of evaluation instance is being studied. They will have a\n * long expiration period and bigger sizes.\n */\nexport type Plan = \"standard\" | \"developer\" | \"dedicated\";\n/**\n * All the statuses an instance can be. If new statuses are added, ensure to\n * add them to the relevant status group (`ReadyStatuses` etc.).\n */\nexport const Statuses = [\n  \"ready\",\n  \"degraded\",\n  \"accepted\",\n  \"provisioning\",\n  \"preparing\",\n  \"deprovision\",\n  \"deleting\",\n  \"suspended\",\n  \"suspending\",\n  \"resuming\",\n] as const;\n\nexport type Status = (typeof Statuses)[number];\n\nexport const CreatingStatuses: readonly Status[] = [\n  \"accepted\",\n  \"provisioning\",\n  \"preparing\",\n];\nexport const ReadyStatuses: readonly Status[] = [\"ready\"];\nexport const DegradedStatuses: readonly Status[] = [\"degraded\"];\nexport const SuspendingStatuses: readonly Status[] = [\"suspending\"];\nexport const SuspendedStatuses: readonly Status[] = [\"suspended\"];\nexport const DeletingStatuses: readonly Status[] = [\"deleting\", \"deprovision\"];\nexport const ResumingStatuses: readonly Status[] = [\"resuming\"];\n\nexport const SimplifiedStatuses = {\n  creating: CreatingStatuses,\n  ready: ReadyStatuses,\n  degraded: DegradedStatuses,\n  suspended: SuspendedStatuses,\n  deleting: DeletingStatuses,\n  resuming: ResumingStatuses,\n  suspending: SuspendingStatuses,\n} as const;\nexport type SimplifiedStatus = keyof typeof SimplifiedStatuses;\n\n/**\n * A list of marketplaces where an instance can be billed to\n */\nexport type MarketPlace = CloudProvider | \"rhm\";\n/**\n * List of marketplaces where a user has some subscription\n */\nexport type MarketPlaceSubscriptions = {\n  marketplace: MarketPlace;\n  subscriptions: string[];\n};\n/**\n * A specific marketplace's subscription, assigned as billing option to an\n * instance.\n *\n * Note: the API will provide only the `subscription`; the `MarketPlace` will\n * have to be fetched querying for the `subscription`.\n */\nexport type MarketplaceSubscription = {\n  marketplace: MarketPlace;\n  subscription: string;\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { PlusCircleIcon } from \"@patternfly/react-icons\";\nimport { Trans, useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\n\nexport type EmptyStateNoDedicatedEntitlementProps = {\n  onQuickstartGuide: () => void;\n};\n\nexport const EmptyStateNoDedicatedEntitlement: VoidFunctionComponent<\n  EmptyStateNoDedicatedEntitlementProps\n> = ({ onQuickstartGuide }) => {\n  const { t } = useTranslation(\"kafka\");\n  return (\n    <EmptyState variant={EmptyStateVariant.xs} isFullHeight={true}>\n      <EmptyStateIcon icon={PlusCircleIcon} />\n      <Title headingLevel=\"h2\" size=\"lg\">\n        {t(\"empty_state_no_dedicated_entitlement_title\")}\n      </Title>\n      <EmptyStateBody>\n        <Trans\n          ns={\"kafka\"}\n          i18nKey={\"empty_state_no_dedicated_entitlement_body\"}\n          components={[<a onClick={onQuickstartGuide} />]}\n        />\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { PlusCircleIcon } from \"@patternfly/react-icons\";\nimport { Trans, useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\n\nexport type EmptyStateNoDedicatedInstancesProps = {\n  onCreate: () => void;\n  onQuickstartGuide: () => void;\n};\n\nexport const EmptyStateNoDedicatedInstances: VoidFunctionComponent<\n  EmptyStateNoDedicatedInstancesProps\n> = ({ onCreate, onQuickstartGuide }) => {\n  const { t } = useTranslation(\"kafka\");\n  return (\n    <EmptyState variant={EmptyStateVariant.xs} isFullHeight={true}>\n      <EmptyStateIcon icon={PlusCircleIcon} />\n      <Title headingLevel=\"h2\" size=\"lg\">\n        {t(\"empty_state_no_dedicated_instances_title\")}\n      </Title>\n      <EmptyStateBody>\n        <Trans\n          ns={\"kafka\"}\n          i18nKey={\"empty_state_no_dedicated_instances_body\"}\n          components={[<a onClick={onQuickstartGuide} />]}\n        />\n      </EmptyStateBody>\n      <Button ouiaId=\"button-create\" variant=\"primary\" onClick={onCreate}>\n        {t(\"empty_state_no_dedicated_instances_create_instance\")}\n      </Button>\n    </EmptyState>\n  );\n};\n","import {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { PlusCircleIcon } from \"@patternfly/react-icons\";\nimport { Trans, useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\n\nexport type EmptyStateNoInstancesProps = {\n  onCreate: () => void;\n  onQuickstartGuide: () => void;\n};\n\nexport const EmptyStateNoInstances: VoidFunctionComponent<\n  EmptyStateNoInstancesProps\n> = ({ onCreate, onQuickstartGuide }) => {\n  const { t } = useTranslation(\"kafka\");\n  return (\n    <EmptyState variant={EmptyStateVariant.xs} isFullHeight={true}>\n      <EmptyStateIcon icon={PlusCircleIcon} />\n      <Title headingLevel=\"h2\" size=\"lg\">\n        {t(\"empty_state_no_instances_title\")}\n      </Title>\n      <EmptyStateBody>\n        <Trans\n          ns={\"kafka\"}\n          i18nKey={\"empty_state_no_instances_body\"}\n          components={[<a onClick={onQuickstartGuide} />]}\n        />\n      </EmptyStateBody>\n      <Button ouiaId=\"button-create\" variant=\"primary\" onClick={onCreate}>\n        {t(\"empty_state_no_instances_create_instance\")}\n      </Button>\n    </EmptyState>\n  );\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { SearchIcon } from \"@patternfly/react-icons\";\nimport { Trans, useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\n\nexport type EmptyStateNoResultsProps = {\n  onClearAllFilters: () => void;\n};\n\nexport const EmptyStateNoResults: VoidFunctionComponent<\n  EmptyStateNoResultsProps\n> = ({ onClearAllFilters }) => {\n  const { t } = useTranslation(\"kafka\");\n  return (\n    <EmptyState variant={EmptyStateVariant.xs} isFullHeight={true}>\n      <EmptyStateIcon icon={SearchIcon} />\n      <Title headingLevel=\"h2\" size=\"lg\">\n        {t(\"empty_state_no_results_found_title\")}\n      </Title>\n      <EmptyStateBody>\n        <Trans\n          ns={\"kafka\"}\n          i18nKey={\"empty_state_no_results_found_body\"}\n          components={[<a onClick={onClearAllFilters} />]}\n        />\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import { Popover } from \"@patternfly/react-core\";\nimport { OutlinedQuestionCircleIcon } from \"@patternfly/react-icons\";\nimport type { FunctionComponent } from \"react\";\n\ntype ConsumerGroupPopoverProps = {\n  title: string;\n  description: string;\n};\n\nexport const ConsumerGroupPopover: FunctionComponent<\n  ConsumerGroupPopoverProps\n> = ({ title, description }) => {\n  return (\n    <Popover\n      aria-label=\"Consumer groups popover\"\n      headerContent={<div>{title}</div>}\n      bodyContent={<div>{description}</div>}\n    >\n      <OutlinedQuestionCircleIcon />\n    </Popover>\n  );\n};\n","import type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport type { State } from \"ui-models/src/models/consumer-group\";\n\nexport type ConsumerGroupStateLabelProps = {\n  state: State;\n};\n\nexport const ConsumerGroupStateLabel: FunctionComponent<\n  ConsumerGroupStateLabelProps\n> = ({ state }) => {\n  const { t } = useTranslation([\"kafka\"]);\n\n  switch (state) {\n    case \"Stable\":\n      return t(\"consumerGroup.state.stable\");\n    case \"Empty\":\n      return t(\"consumerGroup.state.empty\");\n    case \"Dead\":\n      return t(\"consumerGroup.state.dead\");\n    case \"CompletingRebalance\":\n      return t(\"consumerGroup.state.completing_rebalance\");\n    case \"PreparingRebalance\":\n      return t(\"consumerGroup.state.preparing_rebalance\");\n    case \"Unknown\":\n      return t(\"consumerGroup.state.unknown\");\n    default:\n      return null;\n  }\n};\n","import {\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Stack,\n} from \"@patternfly/react-core\";\nimport {\n  TableComposable,\n  TableVariant,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport type { Consumer, State } from \"ui-models/src/models/consumer-group\";\nimport { ConsumerGroupPopover } from \"./ConsumerGroupPopover\";\nimport { ConsumerGroupStateLabel } from \"./ConsumerGroupState\";\n\nexport type ConsumerGroupByKafkaProps = {\n  state: State;\n  consumers: Consumer[];\n  activeMembers: number;\n  partitionsWithLag: number;\n};\n\nexport const ConsumerGroupByKafka: FunctionComponent<\n  ConsumerGroupByKafkaProps\n> = ({ state, consumers, activeMembers, partitionsWithLag }) => {\n  const { t } = useTranslation([\"kafka\"]);\n\n  const columnNames = {\n    topic: t(\"topic.topic\"),\n    partition: t(\"consumerGroup.partition\"),\n    consumer_id: t(\"consumerGroup.consumer_id\"),\n    current_offset: t(\"consumerGroup.current_offset\"),\n    log_end_offset: t(\"consumerGroup.log_end_offset\"),\n    offset_lag: t(\"consumerGroup.offset_lag\"),\n  };\n\n  return (\n    <Stack hasGutter>\n      <DescriptionList\n        columnModifier={{ lg: \"3Col\" }}\n        className={\"pf-m-display-2xl\"}\n      >\n        <DescriptionListGroup>\n          <DescriptionListTerm>\n            {t(\"consumerGroup.active_members\")}\n          </DescriptionListTerm>\n          <DescriptionListDescription>\n            {activeMembers}\n          </DescriptionListDescription>\n        </DescriptionListGroup>\n        <DescriptionListGroup>\n          <DescriptionListTerm>\n            {t(\"consumerGroup.partitions_with_lag\")}{\" \"}\n            <ConsumerGroupPopover\n              title={t(\"consumerGroup.partitions_with_lag_name\")}\n              description={t(\"consumerGroup.partitions_with_lag_description\")}\n            />\n          </DescriptionListTerm>\n          <DescriptionListDescription>\n            {partitionsWithLag}\n          </DescriptionListDescription>\n        </DescriptionListGroup>\n        <DescriptionListGroup>\n          <DescriptionListTerm>\n            {t(\"consumerGroup.state_header\")}\n          </DescriptionListTerm>\n          <DescriptionListDescription>\n            <ConsumerGroupStateLabel state={state} />\n          </DescriptionListDescription>\n        </DescriptionListGroup>\n      </DescriptionList>\n      <TableComposable\n        aria-label={t(\"consumerGroup.consumer_group_info_table_aria\")}\n        variant={TableVariant.compact}\n      >\n        <Thead noWrap>\n          <Tr>\n            <Th width={20}>{columnNames.topic}</Th>\n            <Th width={20}>{columnNames.partition}</Th>\n            <Th width={20}>{columnNames.consumer_id}</Th>\n            <Th width={20}>{columnNames.current_offset}</Th>\n            <Th width={20}>{columnNames.log_end_offset}</Th>\n            <Th width={20}>{columnNames.offset_lag}</Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          {consumers.map(\n            ({\n              groupId,\n              partition,\n              topic,\n              memberId,\n              offset,\n              logEndOffset,\n              lag,\n            }) => {\n              return (\n                <Tr key={groupId}>\n                  <Td dataLabel={columnNames.topic}>{topic}</Td>\n                  <Td dataLabel={columnNames.partition}>{partition}</Td>\n                  <Td dataLabel={columnNames.consumer_id}>\n                    {memberId ? (\n                      `${groupId}\\n${memberId}`\n                    ) : (\n                      <i>{t(\"consumerGroup.unassigned\")}</i>\n                    )}\n                  </Td>\n                  <Td dataLabel={columnNames.current_offset}>{offset}</Td>\n                  <Td dataLabel={columnNames.log_end_offset}>{logEndOffset}</Td>\n                  <Td dataLabel={columnNames.offset_lag}>{lag}</Td>\n                </Tr>\n              );\n            }\n          )}\n        </Tbody>\n      </TableComposable>\n    </Stack>\n  );\n};\n","import {\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Stack,\n} from \"@patternfly/react-core\";\nimport {\n  TableComposable,\n  TableVariant,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport type { Consumer, State } from \"ui-models/src/models/consumer-group\";\nimport { ConsumerGroupPopover } from \"./ConsumerGroupPopover\";\nimport { ConsumerGroupStateLabel } from \"./ConsumerGroupState\";\n\nexport type ConsumerGroupByTopicProps = {\n  state: State;\n  consumers: Consumer[];\n  activeMembers: number;\n  partitionsWithLag: number;\n};\n\nexport const ConsumerGroupByTopic: FunctionComponent<\n  ConsumerGroupByTopicProps\n> = ({ state, consumers, activeMembers, partitionsWithLag }) => {\n  const { t } = useTranslation([\"kafka\"]);\n\n  const columnNames = {\n    partition: t(\"consumerGroup.partition\"),\n    consumer_id: t(\"consumerGroup.consumer_id\"),\n    current_offset: t(\"consumerGroup.current_offset\"),\n    log_end_offset: t(\"consumerGroup.log_end_offset\"),\n    offset_lag: t(\"consumerGroup.offset_lag\"),\n  };\n\n  return (\n    <Stack hasGutter>\n      <DescriptionList\n        columnModifier={{ lg: \"3Col\" }}\n        className={\"pf-m-display-2xl\"}\n      >\n        <DescriptionListGroup>\n          <DescriptionListTerm>\n            {t(\"consumerGroup.active_members_for_topic\")}\n          </DescriptionListTerm>\n          <DescriptionListDescription>\n            {activeMembers}\n          </DescriptionListDescription>\n        </DescriptionListGroup>\n        <DescriptionListGroup>\n          <DescriptionListTerm>\n            {t(\"consumerGroup.partitions_with_lag_for_topic\")}{\" \"}\n            <ConsumerGroupPopover\n              title={t(\"consumerGroup.partitions_with_lag_name\")}\n              description={t(\"consumerGroup.partitions_with_lag_description\")}\n            />\n          </DescriptionListTerm>\n          <DescriptionListDescription>\n            {partitionsWithLag}\n          </DescriptionListDescription>\n        </DescriptionListGroup>\n        <DescriptionListGroup>\n          <DescriptionListTerm>\n            {t(\"consumerGroup.state_header\")}\n          </DescriptionListTerm>\n          <DescriptionListDescription>\n            {<ConsumerGroupStateLabel state={state} />}\n          </DescriptionListDescription>\n        </DescriptionListGroup>\n      </DescriptionList>\n      <TableComposable\n        aria-label={t(\"consumerGroup.consumer_group_info_table_aria\")}\n        variant={TableVariant.compact}\n      >\n        <Thead noWrap>\n          <Tr>\n            <Th key={columnNames.partition} width={20}>\n              {columnNames.partition}\n            </Th>\n            <Th key={columnNames.consumer_id} width={20}>\n              {columnNames.consumer_id}\n            </Th>\n            <Th key={columnNames.current_offset} width={20}>\n              {columnNames.current_offset}\n            </Th>\n            <Th key={columnNames.log_end_offset} width={20}>\n              {columnNames.log_end_offset}\n            </Th>\n            <Th key={columnNames.offset_lag} width={20}>\n              {columnNames.offset_lag}\n            </Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          {consumers.map(\n            ({ groupId, partition, memberId, offset, logEndOffset, lag }) => {\n              return (\n                <Tr key={groupId}>\n                  <Td dataLabel={columnNames.partition}>{partition}</Td>\n                  <Td dataLabel={columnNames.consumer_id}>\n                    {memberId ? (\n                      `${groupId}\\n${memberId}`\n                    ) : (\n                      <i>{t(\"consumerGroup.unassigned\")}</i>\n                    )}{\" \"}\n                  </Td>\n                  <Td dataLabel={columnNames.current_offset}>{offset}</Td>\n                  <Td dataLabel={columnNames.log_end_offset}>{logEndOffset}</Td>\n                  <Td dataLabel={columnNames.offset_lag}>{lag}</Td>\n                </Tr>\n              );\n            }\n          )}\n        </Tbody>\n      </TableComposable>\n    </Stack>\n  );\n};\n","import type { FunctionComponent } from \"react\";\nimport type { Consumer, State } from \"ui-models/src/models/consumer-group\";\nimport { ConsumerGroupByKafka } from \"./ConsumerGroupByKafka\";\nimport { ConsumerGroupByTopic } from \"./ConsumerGroupByTopic\";\n\nexport type ConsumerGroupDetailsProps = {\n  consumerGroupByTopic: boolean;\n  state: State;\n  activeMembers: number;\n  partitionsWithLag: number;\n  consumers: Consumer[];\n};\n\nexport const ConsumerGroupDetails: FunctionComponent<\n  ConsumerGroupDetailsProps\n> = ({\n  consumerGroupByTopic,\n  state,\n  consumers,\n  activeMembers,\n  partitionsWithLag,\n}) => {\n  return (\n    <div>\n      {consumerGroupByTopic ? (\n        <ConsumerGroupByTopic\n          state={state}\n          consumers={consumers}\n          activeMembers={activeMembers}\n          partitionsWithLag={partitionsWithLag}\n        />\n      ) : (\n        <ConsumerGroupByKafka\n          state={state}\n          consumers={consumers}\n          activeMembers={activeMembers}\n          partitionsWithLag={partitionsWithLag}\n        />\n      )}\n    </div>\n  );\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from \"@patternfly/react-core\";\nimport { CubesIcon } from \"@patternfly/react-icons\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nexport const ConsumerGroupEmptyState: FunctionComponent = () => {\n  const { t } = useTranslation([\"kafka\"]);\n  return (\n    <EmptyState variant={EmptyStateVariant.large}>\n      <EmptyStateIcon icon={CubesIcon} />\n      <Title headingLevel={\"h1\"} size={TitleSizes.lg}>\n        {t(\"consumerGroup.empty_consumer_title\")}\n      </Title>\n      <EmptyStateBody>{t(\"consumerGroup.empty_consumer_body\")}</EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import { Select, SelectOption, SelectVariant } from \"@patternfly/react-core\";\nimport type { SelectProps } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport type { OffsetValue } from \"../types\";\n\nexport type OffsetSelectProps = {\n  value: OffsetValue;\n  onChange: (value: OffsetValue) => void;\n};\n\nexport const OffsetSelect: FunctionComponent<OffsetSelectProps> = ({\n  onChange,\n  value,\n}) => {\n  const { t } = useTranslation(\"kafka\");\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  const onToggle = (isOpen: boolean) => {\n    setIsOpen(isOpen);\n  };\n\n  const offsetValueOption: { [key in OffsetValue]: string } = {\n    absolute: t(\"consumerGroup.offset.absolute\"),\n    latest: t(\"consumerGroup.offset.latest\"),\n    earliest: t(\"consumerGroup.offset.earliest\"),\n  };\n\n  const onSelect: SelectProps[\"onSelect\"] = (_, selection) => {\n    onChange(selection as OffsetValue);\n    setIsOpen(false);\n  };\n\n  const makeOptions = () => {\n    return Object.entries(offsetValueOption).map(([value, label]) => (\n      <SelectOption key={value} value={value}>\n        {label}\n      </SelectOption>\n    ));\n  };\n\n  return (\n    <Select\n      aira-label={t(\"consumerGroup.reset_offset_new_offset_label\")}\n      toggleAriaLabel={t(\"consumerGroup.reset_offset_new_offset_label\")}\n      id={\"offset-select\"}\n      onToggle={onToggle}\n      onSelect={onSelect}\n      variant={SelectVariant.single}\n      isOpen={isOpen}\n      placeholderText={t(\"consumerGroup.select_offset\")}\n      selections={value}\n      menuAppendTo={\"parent\"}\n    >\n      {makeOptions()}\n    </Select>\n  );\n};\n","import { Select, SelectOption, SelectVariant } from \"@patternfly/react-core\";\nimport type { SelectProps } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nexport type TopicSelectProps = {\n  value: string;\n  topics: string[];\n  onChange: (topic: string) => void;\n};\n\nexport const TopicSelect: FunctionComponent<TopicSelectProps> = ({\n  topics,\n  onChange,\n  value,\n}) => {\n  const { t } = useTranslation(\"kafka\");\n\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  const onToggle = (isOpen: boolean) => {\n    setIsOpen(isOpen);\n  };\n\n  const onSelect: SelectProps[\"onSelect\"] = (_, topic) => {\n    onChange(topic as string);\n    setIsOpen(false);\n  };\n\n  return (\n    <Select\n      aira-label={t(\"consumerGroup.reset_offset_topic_label\")}\n      toggleAriaLabel={t(\"consumerGroup.reset_offset_topic_label\")}\n      id={\"topic-select\"}\n      variant={SelectVariant.single}\n      onToggle={onToggle}\n      onSelect={onSelect}\n      isOpen={isOpen}\n      selections={value}\n      placeholderText={t(\"consumerGroup.select_topic\")}\n      menuAppendTo={\"parent\"}\n      isDisabled={topics.length <= 0}\n    >\n      {topics.map((topic, index) => (\n        <SelectOption key={index} value={topic}>\n          {topic}\n        </SelectOption>\n      ))}\n    </Select>\n  );\n};\n","import {\n  Alert,\n  Button,\n  Checkbox,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  Stack,\n  StackItem,\n  TextInput,\n} from \"@patternfly/react-core\";\nimport {\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport { useCallback, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport type { Consumer } from \"ui-models/src/models/consumer-group\";\nimport \"../ConsumerGroup.css\";\nimport type { OffsetValue } from \"../types\";\nimport { OffsetSelect } from \"./OffsetSelect\";\nimport { TopicSelect } from \"./TopicSelect\";\nimport type { FunctionComponent } from \"react\";\nimport type { State } from \"ui-models/src/models/consumer-group\";\n\nexport type ConsumerGroupResetOffsetProps = {\n  isModalOpen: boolean;\n  state: State;\n  groupId: string;\n  topics: string[];\n  consumers: Consumer[];\n  onClickClose: () => void;\n  onClickResetOffset: (\n    topic: string,\n    offset: OffsetValue,\n    partitions: number[],\n    customOffset: string\n  ) => void;\n  disableFocusTrap?: boolean;\n  appendTo?: () => HTMLElement;\n};\n\nexport const ConsumerGroupResetOffset: FunctionComponent<\n  ConsumerGroupResetOffsetProps\n> = ({\n  groupId,\n  topics,\n  onClickClose,\n  isModalOpen,\n  onClickResetOffset,\n  disableFocusTrap,\n  appendTo,\n  consumers,\n  state,\n}) => {\n  const { t } = useTranslation([\"kafka\"]);\n\n  const [selectedTopic, setSelectedTopic] = useState<string>(\"\");\n  const [selectedOffset, setSelectedOffset] = useState<OffsetValue>(\"absolute\");\n  const [customOffsetValue, setcustomOffsetValue] = useState<string>();\n\n  const [isResetAccepted, setIsResetAccepted] = useState<boolean>(false);\n\n  const [selectedConsumer, setSelectedConsumer] = useState<Consumer[]>([]);\n\n  const isDisconnected = state !== \"Stable\";\n\n  const consumerList =\n    consumers.filter((consumer) => consumer.topic === selectedTopic) || [];\n\n  const isResetOffsetDisabled =\n    !selectedTopic ||\n    !selectedOffset ||\n    !isResetAccepted ||\n    !isDisconnected ||\n    selectedConsumer.length === 0;\n\n  const tableColumns = {\n    partition: t(\"consumerGroup.partition\"),\n    clientId: `${t(\"consumerGroup.client_id\")} + ${t(\n      \"consumerGroup.member_id\"\n    )}`,\n    current_offset: t(\"consumerGroup.current_offset\"),\n    log_end_offset: t(\"consumerGroup.log_end_offset\"),\n    offset_lag: t(\"consumerGroup.offset_lag\"),\n    new_offset: t(\"consumerGroup.new_offset\"),\n  };\n\n  const areAllConsumerSelected =\n    selectedConsumer.length === consumerList.length;\n\n  const onSelectAllConsumer = (isSelecting = true) => {\n    setSelectedConsumer(isSelecting ? consumerList : []);\n  };\n\n  const isConsumerSelected = (consumer: Consumer) => {\n    return selectedConsumer.includes(consumer);\n  };\n  const onSelect = (consumer: Consumer, isSelecting = true) => {\n    setSelectedConsumer(\n      isSelecting\n        ? [...selectedConsumer, consumer]\n        : selectedConsumer.filter((r) => r !== consumer)\n    );\n  };\n\n  const onResetOffset = useCallback(() => {\n    const partitions = selectedConsumer.map(({ partition }) => partition);\n    onClickResetOffset(\n      selectedTopic,\n      selectedOffset,\n      partitions,\n      customOffsetValue || \"0\"\n    );\n  }, [\n    onClickResetOffset,\n    selectedTopic,\n    selectedOffset,\n    selectedConsumer,\n    customOffsetValue,\n  ]);\n\n  return (\n    <Modal\n      variant={ModalVariant.large}\n      isOpen={isModalOpen}\n      aria-label={t(\"consumerGroup.reset_offset_modal_label\")}\n      title={t(\"consumerGroup.reset_offset\")}\n      showClose={true}\n      onClose={onClickClose}\n      aria-describedby=\"modal-message\"\n      disableFocusTrap={disableFocusTrap}\n      appendTo={appendTo}\n      position=\"top\"\n      actions={[\n        <Button\n          variant=\"danger\"\n          key={1}\n          isDisabled={isResetOffsetDisabled}\n          onClick={onResetOffset}\n        >\n          {t(\"consumerGroup.reset_offset\")}\n        </Button>,\n        <Button variant=\"link\" key={2} onClick={onClickClose}>\n          {t(\"common:cancel\")}\n        </Button>,\n      ]}\n    >\n      <Stack hasGutter>\n        <StackItem>\n          <Form isHorizontal>\n            <FormGroup\n              className=\"mas--ConsumerGroupResetOffset-form-group--readonly\"\n              label={t(\"consumerGroup.reset_offset_consumer_group_label\")}\n              fieldId=\"consumer-group-input\"\n            >\n              <TextInput\n                readOnlyVariant={\"default\"}\n                type=\"text\"\n                name={t(\"consumerGroup.reset_offset_consumer_group_label\")}\n                id={\"consumer-group-input\"}\n                value={groupId}\n              />\n            </FormGroup>\n            {isDisconnected && (\n              <FormGroup\n                label={t(\"consumerGroup.reset_offset_topic_label\")}\n                fieldId=\"topic-select\"\n              >\n                <TopicSelect\n                  value={selectedTopic}\n                  topics={topics}\n                  onChange={setSelectedTopic}\n                />\n              </FormGroup>\n            )}\n            {isDisconnected && selectedTopic && (\n              <FormGroup\n                label={t(\"consumerGroup.reset_offset_new_offset_label\")}\n                fieldId=\"offset-select\"\n              >\n                <OffsetSelect\n                  value={selectedOffset}\n                  onChange={setSelectedOffset}\n                />\n              </FormGroup>\n            )}\n            {isDisconnected &&\n              selectedTopic &&\n              selectedOffset === \"absolute\" && (\n                <FormGroup\n                  label={t(\"consumerGroup.reset_offset_custom_offset_label\")}\n                  fieldId=\"custom-offset-input\"\n                >\n                  <TextInput\n                    id=\"custom-offset-input\"\n                    name={t(\"consumerGroup.reset_offset_custom_offset_label\")}\n                    value={customOffsetValue}\n                    onChange={setcustomOffsetValue}\n                    type=\"number\"\n                  />\n                </FormGroup>\n              )}\n          </Form>\n        </StackItem>\n        <StackItem>\n          {!isDisconnected && (\n            <Alert\n              className=\"modal-alert\"\n              variant=\"danger\"\n              isInline\n              title={t(\"consumerGroup.reset_offset_connected_alert_title\")}\n            >\n              <p>{t(\"consumerGroup.reset_offset_connected_alert_body\")}</p>\n            </Alert>\n          )}\n        </StackItem>\n        <StackItem>\n          {isDisconnected && consumerList.length > 0 && selectedTopic && (\n            <Stack hasGutter>\n              <StackItem>\n                <TableComposable\n                  aria-label={t(\"consumerGroup.reset_offset_selectable table\")}\n                  className=\"consumer-table\"\n                >\n                  <Thead>\n                    <Tr>\n                      <Th\n                        select={{\n                          onSelect: (_event, isSelecting) =>\n                            onSelectAllConsumer(isSelecting),\n                          isSelected: areAllConsumerSelected,\n                        }}\n                      />\n                      <Th>{tableColumns.partition}</Th>\n                      <Th>{tableColumns.clientId}</Th>\n                      <Th>{tableColumns.current_offset}</Th>\n                      <Th>{tableColumns.log_end_offset}</Th>\n                      <Th>{tableColumns.offset_lag}</Th>\n                      <Th>{tableColumns.new_offset}</Th>\n                    </Tr>\n                  </Thead>\n                  <Tbody>\n                    {consumerList.map((consumer, index) => {\n                      return (\n                        <Tr key={index}>\n                          <Td\n                            select={{\n                              rowIndex: index,\n                              isSelected: isConsumerSelected(consumer),\n                              onSelect: (_event, isSelecting) =>\n                                onSelect(consumer, isSelecting),\n                            }}\n                          />\n                          <Td dataLabel={tableColumns.partition}>\n                            {consumer.partition}\n                          </Td>\n                          <Td dataLabel={tableColumns.clientId}>\n                            {String(consumer.groupId)}\n                            {String(consumer.memberId)}\n                          </Td>\n                          <Td dataLabel={tableColumns.current_offset}>\n                            {consumer.offset}\n                          </Td>\n                          <Td dataLabel={tableColumns.log_end_offset}>\n                            {consumer.logEndOffset}\n                          </Td>\n                          <Td dataLabel={tableColumns.offset_lag}>\n                            {consumer.lag}\n                          </Td>\n                          <Td dataLabel={tableColumns.offset_lag}>\n                            {isConsumerSelected(consumer) && selectedOffset\n                              ? selectedOffset === \"absolute\"\n                                ? customOffsetValue || 0\n                                : selectedOffset\n                              : \"-\"}\n                          </Td>\n                        </Tr>\n                      );\n                    })}\n                  </Tbody>\n                </TableComposable>\n              </StackItem>\n              <StackItem>\n                <Checkbox\n                  label={t(\"consumerGroup.reset_offset_accept\")}\n                  id=\"resetoffset-checkbox\"\n                  isChecked={isResetAccepted}\n                  onChange={setIsResetAccepted}\n                />\n              </StackItem>\n            </Stack>\n          )}\n        </StackItem>\n      </Stack>\n    </Modal>\n  );\n};\n","import { Alert, Text } from \"@patternfly/react-core\";\nimport { DeleteModal } from \"@rhoas/app-services-ui-components\";\nimport type { FunctionComponent } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport type { State } from \"ui-models/src/models/consumer-group\";\n\nexport type DeleteConsumerGroupProps = {\n  isModalOpen: boolean;\n  onClose: () => void;\n  onDeleteConsumer: () => void;\n  state: State;\n  consumerName: string;\n  appendTo: () => HTMLElement;\n  disableFocusTrap?: boolean;\n};\n\nexport const DeleteConsumerGroup: FunctionComponent<\n  DeleteConsumerGroupProps\n> = ({\n  isModalOpen,\n  onClose,\n  onDeleteConsumer,\n  state,\n  consumerName,\n  appendTo,\n  disableFocusTrap,\n}) => {\n  const { t } = useTranslation(\"kafka\");\n\n  const isConsumerConnected = state === \"Stable\";\n\n  return (\n    <div>\n      <DeleteModal\n        isDeleting={false}\n        isModalOpen={isModalOpen}\n        title={t(\"consumerGroup.delete\")}\n        onCancel={onClose}\n        onDelete={onDeleteConsumer}\n        variant={\"non-destructive\"}\n        appendTo={appendTo}\n        disableFocusTrap={disableFocusTrap}\n        isDisabled={isConsumerConnected}\n      >\n        {isConsumerConnected ? (\n          <Alert\n            className=\"modal-alert\"\n            variant=\"danger\"\n            isInline\n            title={t(\"consumerGroup.delete_consumer_connected_alert_title\", {\n              name: consumerName,\n            })}\n          >\n            {t(\"consumerGroup.delete_consumer_connected_alert_body\")}\n          </Alert>\n        ) : (\n          <Text id=\"modal-message\">\n            <Trans\n              ns={\"kafka\"}\n              i18nKey={\"consumerGroup.consumer_group_delete_message\"}\n              values={{\n                name: consumerName,\n              }}\n            />\n          </Text>\n        )}\n      </DeleteModal>\n    </div>\n  );\n};\n","import {\n  Drawer,\n  DrawerActions,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerContentBody,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerPanelContent,\n  Dropdown,\n  DropdownItem,\n  DropdownPosition,\n  KebabToggle,\n  Text,\n  TextContent,\n  TextVariants,\n  Title,\n} from \"@patternfly/react-core\";\nimport type { FunctionComponent, ReactNode } from \"react\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport type { Consumer, State } from \"ui-models/src/models/consumer-group\";\nimport \"./ConsumerGroup.css\";\nimport { ConsumerGroupDetails } from \"./ConsumerGroupDetails\";\n\nexport type ConsumerGroupDrawerProps = {\n  children: ReactNode;\n  consumerGroupByTopic: boolean;\n  state: State;\n  activeMembers: number;\n  partitionsWithLag: number;\n  consumers: Consumer[];\n  groupId: string;\n  onSelectDeleteConsumerGroup: () => void;\n  onSelectResetOffsetConsumerGroup: () => void;\n  isExpanded: boolean;\n  onClickClose: () => void;\n};\n\nexport const ConsumerGroupDrawer: FunctionComponent<\n  ConsumerGroupDrawerProps\n> = ({\n  children,\n  consumerGroupByTopic,\n  state,\n  activeMembers,\n  partitionsWithLag,\n  consumers,\n  groupId,\n  onSelectDeleteConsumerGroup,\n  onSelectResetOffsetConsumerGroup,\n  isExpanded,\n  onClickClose,\n}) => {\n  const { t } = useTranslation([\"kafka\"]);\n\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  const onToggle = (isOpen: boolean) => {\n    setIsOpen(isOpen);\n  };\n  const onSelect = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const dropdownItems = [\n    <DropdownItem key=\"reset offset\" onClick={onSelectResetOffsetConsumerGroup}>\n      {t(\"consumerGroup.reset_offset\")}\n    </DropdownItem>,\n    <DropdownItem key=\"delete\" onClick={onSelectDeleteConsumerGroup}>\n      {t(\"common:delete\")}\n    </DropdownItem>,\n  ];\n\n  const panelContent = (\n    <DrawerPanelContent widths={{ default: \"width_50\" }}>\n      <DrawerHead>\n        <TextContent>\n          <Text\n            component={TextVariants.small}\n            className={\"consumer-group-drawer__top-label\"}\n          >\n            {t(\"consumerGroup.consumer_group_id\")}\n          </Text>\n          <Title headingLevel={\"h1\"} className={\"consumer-group-drawer__title\"}>\n            {groupId}\n          </Title>\n        </TextContent>\n        <DrawerActions>\n          <Dropdown\n            onSelect={onSelect}\n            toggle={<KebabToggle onToggle={onToggle} id=\"toggle-data-plane\" />}\n            dropdownItems={dropdownItems}\n            isOpen={isOpen}\n            isPlain\n            position={DropdownPosition.right}\n          />\n          <DrawerCloseButton onClick={onClickClose} />\n        </DrawerActions>\n      </DrawerHead>\n      <DrawerPanelBody>\n        <ConsumerGroupDetails\n          consumerGroupByTopic={consumerGroupByTopic}\n          state={state}\n          activeMembers={activeMembers}\n          partitionsWithLag={partitionsWithLag}\n          consumers={consumers}\n        />\n      </DrawerPanelBody>\n    </DrawerPanelContent>\n  );\n\n  return (\n    <Drawer\n      isExpanded={isExpanded}\n      data-ouia-app-id={\"dataPlane-consumerGroupDetails\"}\n      isInline={true}\n    >\n      <DrawerContent panelContent={panelContent}>\n        <DrawerContentBody className=\"consumer-group-drawer__drawer-content-body\">\n          {children}\n        </DrawerContentBody>\n      </DrawerContent>\n    </Drawer>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport type {\n  CloudProvider,\n  KafkaField,\n  SimplifiedStatus,\n  Status,\n} from \"ui-models/src/models/kafka\";\n\nexport function useKafkaLabels() {\n  const { t } = useTranslation(\"kafka\");\n\n  const statuses: { [status in Status]: string } = {\n    ready: t(\"statuses.ready\"),\n    degraded: t(\"statuses.degraded\"),\n    accepted: t(\"statuses.accepted\"),\n    provisioning: t(\"statuses.provisioning\"),\n    preparing: t(\"statuses.preparing\"),\n    deprovision: t(\"statuses.deprovision\"),\n    deleting: t(\"statuses.deleting\"),\n    suspended: t(\"statuses.suspended\"),\n    suspending: t(\"statuses.suspending\"),\n    resuming: t(\"statuses.resuming\"),\n  };\n  const statusesSimplified: { [status in SimplifiedStatus]: string } = {\n    creating: t(\"statusesSimplified.creating\"),\n    ready: t(\"statusesSimplified.ready\"),\n    degraded: t(\"statusesSimplified.degraded\"),\n    deleting: t(\"statusesSimplified.deleting\"),\n    suspended: t(\"statusesSimplified.suspended\"),\n    suspending: t(\"statusesSimplified.suspending\"),\n    resuming: t(\"statusesSimplified.resuming\"),\n  };\n  const providers: { [provider in CloudProvider]: string } = {\n    aws: t(\"common:cloudProviders.aws\"),\n    gcp: t(\"common:cloudProviders.gcp\"),\n    azure: t(\"common:cloudProviders.azure\"),\n  };\n  const providerRegions: {\n    [provider in CloudProvider]: { [region: string]: string };\n  } = {\n    aws: {},\n    gcp: {},\n    azure: {},\n  };\n  const fields: {\n    [field in KafkaField]: string;\n  } = {\n    id: t(\"fields.id\"),\n    name: t(\"fields.name\"),\n    createdAt: t(\"fields.createdAt\"),\n    updatedAt: t(\"fields.updatedAt\"),\n    expiryDate: t(\"fields.expiryDate\"),\n    owner: t(\"fields.owner\"),\n    provider: t(\"fields.provider\"),\n    region: t(\"fields.region\"),\n    status: t(\"fields.status\"),\n    plan: t(\"fields.plan\"),\n    size: t(\"fields.size\"),\n    ingress: t(\"fields.ingress\"),\n    egress: t(\"fields.egress\"),\n    storage: t(\"fields.storage\"),\n    maxPartitions: t(\"fields.maxPartitions\"),\n    connections: t(\"fields.connections\"),\n    connectionRate: t(\"fields.connectionRate\"),\n    messageSize: t(\"fields.messageSize\"),\n    billing: t(\"fields.billing\"),\n    clusterId: t(\"fields.clusterId\"),\n    clusterName: t(\"fields.clusterName\"),\n    adminUrl: t(\"fields.adminUrl\"),\n    bootstrapUrl: t(\"fields.bootstrapUrl\"),\n    version: t(\"fields.version\"),\n    az: t(\"fields.availabilityZone\"),\n  };\n  return {\n    fields,\n    statuses,\n    statusesSimplified,\n    providers,\n    providerRegions,\n  };\n}\n","import { useTranslation } from \"react-i18next\";\nimport type { TopicField } from \"ui-models/src/models/topic\";\n\nexport function useTopicLabels() {\n  const { t } = useTranslation(\"topic\");\n\n  const fields: {\n    [field in TopicField]: string;\n  } = {\n    name: t(\"fields.name\"),\n    partitions: t(\"fields.partitions\"),\n    \"cleanup.policy\": t(\"fields.cleanup_policy\"),\n    \"delete.retention.ms\": t(\"fields.delete_retention_ms\"),\n    \"max.compaction.lag.ms\": t(\"fields.max_compaction_lag_ms\"),\n    \"max.message.bytes\": t(\"fields.max_message_bytes\"),\n    \"message.downconversion.enable\": t(\"fields.message_downconversion_enable\"),\n    \"message.timestamp.difference.max.ms\": t(\n      \"fields.message_timestamp_difference_max_ms\"\n    ),\n    \"message.timestamp.type\": t(\"fields.message_timestamp_type\"),\n    \"min.compaction.lag.ms\": t(\"fields.min_compaction_lag_ms\"),\n    \"retention.bytes\": t(\"fields.retention_bytes\"),\n    \"retention.ms\": t(\"fields.retention_ms\"),\n    \"segment.bytes\": t(\"fields.segment_bytes\"),\n    \"segment.ms\": t(\"fields.segment_ms\"),\n    \"compression.type\": t(\"fields.compression_type\"),\n    \"file.delete.delay.ms\": t(\"fields.file_delete_delay_ms\"),\n    \"flush.messages\": t(\"fields.flush_messages\"),\n    \"flush.ms\": t(\"fields.flush_ms\"),\n    \"follower.replication.throttled.replicas\": t(\n      \"fields.follower_replication_throttled_replicas\"\n    ),\n    \"index.interval.bytes\": t(\"fields.index_interval_bytes\"),\n    \"leader.replication.throttled.replicas\": t(\n      \"fields.leader_replication_throttled_replicas\"\n    ),\n    \"message.format.version\": t(\"fields.message_format_version\"),\n    \"min.cleanable.dirty.ratio\": t(\"fields.min_cleanable_dirty_ratio\"),\n    \"min.insync.replicas\": t(\"fields.min_insync_replicas\"),\n    \"segment.index.bytes\": t(\"fields.segment_index_bytes\"),\n    \"segment.jitter.ms\": t(\"fields.segment_jitter_ms\"),\n    \"unclean.leader.election.enable\": t(\n      \"fields.unclean_leader_election_enable\"\n    ),\n    preallocate: t(\"fields.preallocate\"),\n  };\n  return {\n    fields,\n  };\n}\n","import { useTranslation } from \"react-i18next\";\nimport type { ConsumerGroupField } from \"ui-models/src/models/consumer-group\";\n\nexport function useConsumerGroupLabels() {\n  const { t } = useTranslation(\"kafka\");\n\n  const fields: {\n    [field in ConsumerGroupField]: string;\n  } = {\n    name: t(\"consumerGroup.consumer_group_id\"),\n    activeConsumers: t(\"consumerGroup.active_members\"),\n    laggingPartitions: t(\"consumerGroup.partitions_with_lag\"),\n    state: t(\"consumerGroup.state_header\"),\n  };\n  return {\n    fields,\n  };\n}\n","import { useTranslation } from \"react-i18next\";\nimport type { DedicatedClusterField } from \"ui-models/src/models/dedicated-cluster\";\n\nexport function useDedicatedClusterLabels() {\n  const { t } = useTranslation(\"cluster\");\n\n  const fields: {\n    [field in DedicatedClusterField]: string;\n  } = {\n    id: t(\"fields.id\"),\n    name: t(\"fields.name\"),\n    status: t(\"fields.status\"),\n    cloudProvider: t(\"fields.cloudProvider\"),\n    az: t(\"fields.az\"),\n    cloudRegion: t(\"fields.cloudRegion\"),\n    requiresPrivateNetwork: t(\"fields.requiresPrivateNetwork\"),\n  };\n  return {\n    fields,\n  };\n}\n","import { isDevToolsEnabled } from \"local-storage-helpers\";\nimport { lazy } from \"react\";\n\nconst XStateInspector = lazy(() => import(\"./XStateInspector\"));\n\nexport function useXStateInspector() {\n  const showDevTools = isDevToolsEnabled();\n  return showDevTools ? XStateInspector : () => null;\n}\n","import { PageSection } from \"@patternfly/react-core\";\nimport { TableVariant } from \"@patternfly/react-table\";\nimport type { TableViewProps } from \"@rhoas/app-services-ui-components\";\nimport {\n  EmptyStateNoResults,\n  TableView,\n} from \"@rhoas/app-services-ui-components\";\nimport { useTranslation } from \"react-i18next\";\nimport type {\n  ConsumerGroup,\n  ConsumerGroupField,\n} from \"ui-models/src/models/consumer-group\";\nimport { ConsumerGroupEmptyState, ConsumerGroupStateLabel } from \"./components\";\nimport { useConsumerGroupLabels } from \"../../hooks\";\n\ntype SubUnion<T, U extends T> = U;\n\nconst Columns: SubUnion<\n  ConsumerGroupField,\n  \"name\" | \"activeConsumers\" | \"laggingPartitions\" | \"state\"\n>[] = [\"name\", \"activeConsumers\", \"laggingPartitions\", \"state\"];\n\nexport type ConsumerGroupsProps<T extends ConsumerGroup> = {\n  consumers: Array<T> | undefined;\n  onDelete: (row: T) => void;\n  onViewPartition: (row: T) => void;\n  onViewResetOffset: (row: T) => void;\n  consumerName: string[];\n  onSearchConsumer: (value: string) => void;\n  onRemoveConsumerChip: (value: string) => void;\n  onRemoveConsumerChips: () => void;\n} & Pick<\n  TableViewProps<T, (typeof Columns)[number]>,\n  | \"itemCount\"\n  | \"page\"\n  | \"perPage\"\n  | \"onPageChange\"\n  | \"isRowSelected\"\n  | \"isColumnSortable\"\n  | \"onClearAllFilters\"\n>;\n\nexport const ConsumerGroups = <T extends ConsumerGroup>({\n  consumers,\n  onDelete,\n  onViewPartition,\n  isColumnSortable,\n  itemCount,\n  onViewResetOffset,\n  onClearAllFilters,\n  page,\n  perPage,\n  onPageChange,\n  consumerName,\n  onSearchConsumer,\n  onRemoveConsumerChip,\n  onRemoveConsumerChips,\n}: ConsumerGroupsProps<T>) => {\n  const { t } = useTranslation(\"kafka\");\n\n  const labels = useConsumerGroupLabels();\n\n  const isFiltered = consumerName.length > 0;\n  return (\n    <PageSection isFilled={true} hasOverflowScroll={true} aria-label={\"TODO\"}>\n      <TableView\n        variant={TableVariant.compact}\n        tableOuiaId={\"card-table\"}\n        ariaLabel={t(\"consumerGroup.consumer_group_list\")}\n        data={consumers}\n        columns={Columns}\n        renderHeader={({ column, Th, key }) => (\n          <Th\n            key={key}\n            info={\n              column === \"laggingPartitions\"\n                ? {\n                    popover: (\n                      <div>\n                        {t(\"consumerGroup.partitions_with_lag_description\")}\n                      </div>\n                    ),\n                    ariaLabel: \"partitions with lag\",\n                    popoverProps: {\n                      headerContent: t(\n                        \"consumerGroup.partitions_with_lag_name\"\n                      ),\n                    },\n                  }\n                : undefined\n            }\n          >\n            {labels.fields[column]}\n          </Th>\n        )}\n        renderCell={({ column, row, Td, key }) => {\n          return (\n            <Td key={key} dataLabel={labels.fields[column]}>\n              {(() => {\n                switch (column) {\n                  case \"name\":\n                    return row.name;\n                  case \"activeConsumers\":\n                    return row.activeConsumers;\n                  case \"laggingPartitions\":\n                    return row.laggingPartitions;\n                  case \"state\":\n                    return <ConsumerGroupStateLabel state={row.state} />;\n                }\n              })()}\n            </Td>\n          );\n        }}\n        renderActions={({ row, ActionsColumn }) => (\n          <ActionsColumn\n            items={[\n              {\n                title: t(\"consumerGroup.view_partitions_offsets\"),\n                onClick: () => onViewPartition(row),\n              },\n              {\n                title: t(\"consumerGroup.reset_offset\"),\n                onClick: () => onViewResetOffset(row),\n              },\n              {\n                title: t(\"common:delete\"),\n                onClick: () => onDelete(row),\n              },\n            ]}\n          />\n        )}\n        isColumnSortable={isColumnSortable}\n        filters={{\n          [labels.fields.name]: {\n            type: \"search\",\n            chips: consumerName,\n            onSearch: onSearchConsumer,\n            onRemoveChip: onRemoveConsumerChip,\n            onRemoveGroup: onRemoveConsumerChips,\n            validate: (value: string) => !/[\"$^<>|+%/;:,\\s*=~#()]/.test(value),\n            errorMessage: t(\"input_field_invalid_message\"),\n          },\n        }}\n        itemCount={itemCount}\n        page={page}\n        onPageChange={onPageChange}\n        perPage={perPage}\n        isFiltered={isFiltered}\n        onClearAllFilters={onClearAllFilters}\n        emptyStateNoData={<ConsumerGroupEmptyState />}\n        emptyStateNoResults={<EmptyStateNoResults />}\n      />\n    </PageSection>\n  );\n};\n","import {\n  Divider,\n  Level,\n  LevelItem,\n  Nav,\n  NavItem,\n  NavList,\n  PageSection,\n  PageSectionVariants,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport {\n  ExternalLink,\n  Trans,\n  useTranslation,\n} from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { Link } from \"react-router-dom\";\n\ntype Sections = \"instances\" | \"clusters\";\n\nexport type ControlPlaneHeaderProps = {\n  activeSection: Sections;\n  sectionsHref: { [key in Sections]: string };\n};\n\nexport const ControlPlaneHeader: VoidFunctionComponent<\n  ControlPlaneHeaderProps\n> = ({ activeSection, sectionsHref }) => {\n  const { t } = useTranslation(\"kafka\");\n\n  return (\n    <>\n      <PageSection\n        variant={PageSectionVariants.light}\n        padding={{ default: \"noPadding\" }}\n        hasShadowBottom={true}\n        type={\"tabs\"}\n      >\n        <Level>\n          <LevelItem>\n            <TextContent className={\"pf-u-p-md pf-u-p-lg-on-xl\"}>\n              <Text component=\"h1\">{t(\"kafka:title\")}</Text>\n              <p>{t(\"kafka:description\")}</p>\n            </TextContent>\n          </LevelItem>\n        </Level>\n        {(activeSection === \"instances\" || activeSection === \"clusters\") && (\n          <Nav variant=\"tertiary\" className=\"pf-u-px-sm-on-xl\">\n            <NavList>\n              <NavItem\n                style={{ borderTop: 0 }}\n                data-testid=\"pageKafka-tabinstances\"\n                id=\"dashboard-tab-section\"\n                aria-label={t(\"controlPlaneNavigation.dedicated-instances\")}\n                ouiaId={\"tab-instances\"}\n                isActive={activeSection === \"instances\"}\n              >\n                <Link to={sectionsHref[\"instances\"]}>\n                  {t(\"controlPlaneNavigation.dedicated-instances\")}\n                </Link>\n              </NavItem>\n              <NavItem\n                style={{ borderTop: 0 }}\n                data-testid=\"pageKafka-tabclusters\"\n                id=\"dashboard-tab-section\"\n                aria-label={t(\"controlPlaneNavigation.clusters\")}\n                ouiaId={\"tab-clusters\"}\n                isActive={activeSection === \"clusters\"}\n              >\n                <Link to={sectionsHref[\"clusters\"]}>\n                  {t(\"controlPlaneNavigation.clusters\")}\n                </Link>\n              </NavItem>\n            </NavList>\n          </Nav>\n        )}\n        <Divider />\n        <div className=\"pf-u-p-md pf-u-p-lg-on-xl\">\n          {(() => {\n            switch (activeSection) {\n              case \"instances\":\n                return (\n                  <Trans\n                    ns={\"kafka\"}\n                    i18nKey={\"dedicated_description\"}\n                    components={[\n                      <ExternalLink\n                        href={\"https://access.redhat.com/articles/TODO\"}\n                        testId={\"instances-instances-support-link\"}\n                        className={\"pf-u-ml-xs\"}\n                      />,\n                    ]}\n                  />\n                );\n              case \"clusters\":\n                return (\n                  <Trans\n                    ns={\"kafka\"}\n                    i18nKey={\"clusters_description\"}\n                    components={[\n                      <ExternalLink\n                        href={\"https://access.redhat.com/articles/TODO\"}\n                        testId={\"clusters-support-link\"}\n                        className={\"pf-u-ml-xs\"}\n                      />,\n                    ]}\n                  />\n                );\n            }\n          })()}\n        </div>\n      </PageSection>\n    </>\n  );\n};\n","import type { CloudProvider, CloudRegion } from \"ui-models/src/models/kafka\";\nimport type { CloudProviderInfo } from \"../types\";\n\nexport function onProviderChange(\n  providers: CloudProviderInfo[],\n  provider: CloudProvider\n): { provider: CloudProvider; region: CloudRegion | undefined } {\n  const selectedProvider = providers.find((p) => p.id === provider);\n  const region =\n    selectedProvider?.defaultRegion ||\n    selectedProvider?.regions.filter((r) => !!r.isDisabled === false)[0]?.id;\n  return { provider, region };\n}\n","import {\n  CloudProvider,\n  CloudRegion,\n  MarketplaceSubscription,\n  Size,\n} from \"ui-models/src/models/kafka\";\nimport { assign, createMachine, send, sendParent } from \"xstate\";\nimport {\n  CreateKafkaFormData,\n  CreateKafkaInstanceError,\n  StandardPlanInitializationData,\n  StandardSizes,\n} from \"../types\";\nimport { onProviderChange } from \"./shared\";\n\nexport type StandardPlanMachineContext = {\n  // initial data coming from the APIs\n  capabilities: StandardPlanInitializationData;\n\n  // what the user is selecting\n  form: {\n    name?: string;\n    provider?: CloudProvider;\n    region?: CloudRegion;\n    size?: Size;\n    billing?: MarketplaceSubscription | \"prepaid\";\n  };\n\n  // based on the form.provider selection\n\n  // based on the form.provider and form.region selection\n  sizes: StandardSizes | undefined;\n\n  creationError: CreateKafkaInstanceError | undefined;\n};\n\nexport const StandardPlanMachine =\n  /** @xstate-layout N4IgpgJg5mDOIC5SwC4EMB2E0CcIAUAbTAWTQGMALASwzADoA3MHagMwE8BBRta4gEb9qKDgGJEoAA4B7WCOoyMkkAA9EAZgAcARnoBOfQAYdOrQHYArABYNAJnMAaEB0Q6j++reuXL5k3bWWpY65gC+Yc6omNh4RKQUNHT05Eps1FAArqwYUPTRKJmwYuQ4YGgoYCqy8iiKykhqmjp29OYW5hpGQYG+zq4Ilvoa9KZGlh4a5joAbPqBEVHoWLgExBhkVLQMqRjpWTl5bDI4ALZMaITUEGLpYIQQAJIYvFcQ1XIKSirqCKGG9Ds+ksU1m5n0M2s1n0-UQdgmllGdjsOj8QJm7ihixA0RWcXWmySOzSGWytCOJ3Or2uYlgmQEpxEH1q9R+bmMnnMnRR9n8di0RjssIQ-MFo2sgQ81lCGjm2NxsTWCS2yV2+zJuXoxzO+TQjHJJTKFTAAGVMuRyHB4I0al8GqBfoEZlp6FpISYdBp7PprFZhaK9JDAuDproQfLlor4htEtsUiSDuStZTdfrcobypUAKI4HAnZl2tkinn0WVTFFQrS+mb+jEzehzMz84btazjCMxVbRwlxtWkw7Js63aj3J4vS7XAt1b6NR0+etaWXzPmQmsuOGmRGWfmWRchbctGYdvFKmMq4l7ftJu4PWD0DBoU4ManYSoSG2faf2poIIL15GmDo+iLkBdhGOYa4DLMUKjKCljOkYbrDFox5RgSsaqgmGpHCOt73o+YAZsaU6srObj2F45gSn4UIaDY7QaMKMouohVgzNuHhgRoOioV26HnvGl6JpqN4QHeD5PmIElgAAwpQmAwCRM4OuRrS+tRVG2PRi5MexrSojM9iIW2VgSrx+LKkSgnqgOol3lIeb6hALAXG8xrvtIn6kSpgxAm00IosiEEzDMTjriKHj1hMEIoqE1iGeYdjmaePaYUJ2FarhYn0A5MhOSwRGVEp36-J6alUfCml0b6Onhci8UGJxnoSuBGj6Ml3YYReNnXll9mOdcBW5flOByQpVQfiyyk-mVlEabR2mMXVUr0EYgo+qGQHtJYHX8VZfbCTho53mUUD1K51zucVRYHl4hg6EEPisdYTHwkYgLDNKRjsSF0I7ZEOKRnxlm9lhtl9fQp31IVE2eVNJWqXNlULTVS1QXR5iAqidgzCYApui0u0g2lPUiRDUNKGIw2DaN8m5LDIC2l+RazepyNaajTFdJ4OM8hBnRejxAMKsDZ77WDvXHZDYBnZTFMYGN9PXWRfwUWzNEcwxTEGaWvgWA9Gg+P41hE2LoPpeDUvyAAXs+E6voRys+b6gbcW7czQu4tUDA44KrZCsogfyXqm6l3VXmTVvULb9CEDIaAQAaEBKAwtCMDIADWDAixZZskxHR14TbDBxwn5IIGnMjkBU9QANpGAAuk7P6gvQNi6HY2gPVCwr2HRbS6PoVG7lYQyh111kF5lUcx6XifpiweY4DlxAoNq5w5ylE8HRldn5NHJfx-PUAVy8Vc10o9dN5NhYq9uLqBMiwEWBKneWL3vKrSEiHDOBILDOPASO9LZFwPjDZujpQq6wAuxYwoEpj+n-qMT0254KG3ig9QB4sLaS1AbbKmA1nK03GhAtwi4sYeisPMQw9hay4wML6RKhhvrgiFksTsucw6T0OtPPBhF5aK0UjfZmKtcYuh9GBQwGIUS1kNgYT6Ewfqd26Fg82pNC7ZWLrSA+giGZM28j+KiLopjbkhPrcCuhaweGgT4Ux-hZj-XYSeTqQCJaRz4WIIQhAri5F0aQ388E26NnYuCZcEEXp1VxpjAmVYqKsOBEeYWQNOHbzcRou8XifF5BfFdYRBjfjbhGFoAUZjZjLj8L3YpmM1pWHCZVGYONVH5x4XvTJSYlCEA4GaAQsBSjUCkF+YosB7hgHICgbpvTWADIMfo6apU1rWDaO6EKa0goNMqfoPQ-gbC4x9MBQUGgmnhxaRDNpmoHJgCkHwCAXAsATL6dMpQQyRljPuVMkRcNb4+UPIiYpQI9y7ngsBYU3hFlrU9GYjwIRwhJI4VvVxOD3HZTOXkC5Vzri3IgG8-pgzaQvJQPgMo6L3h5LmW4IwUxXS7i9L4KwswtAgr7m3FEQxEq6EhEc7hu9Tn8CyQQvKNM-GkoRqres3FURxPsMiIEvdAUD0XIhHG8VEKOMBnClx2D1G8LEmIZOyQCjZ2SfCzVU87L+NmOMNo7hxjlgaYbd+kT+6aWCG-XcSrOXAKTinfI6BKg+vVXtNRBd-H8hxq6aUxtfQmCkf6WU9YWhgUqiETEEQAYYBkM5a0yAjUarjMwVgnAeB8EEMIUQ-iQjhtCm1WUEofTjGFFYAw3oQj2p9NRTleUWAAEVMgyHQP4gUIxOLQh8FoX2DLwoJtLI9cFWg63TESU4tCxNU4YFxJaAAqg+Xg-A0ACEIHoryZKEBcnep0NtwQuTSIdT7ClrpQoonmC0XQa1F1qucYG5I8tYBbr1MWvdB7-FckWdCYpD1+RujHTCOqVZSwB3GMiRcwxZgerSf6wod5MhrvpIyFAlQSWfI+TNRCpY2pVhCI+jmwohg8zilRA2Y7fSocRXkAoRR8g4ZEPh-x84DBmGlPjLko8IkDAXatLoi54Sd3hPBZjWq2NZsZkekVsGvTAR8C0ICVHwoTBdKYUKLbkSsQhHJ01KY0723NeCRZnpNkmFCqEMdsaUSrWYd0LkgcTOwo-SurltkUwvis8BUY4EMQ-3cA9G9cJcYjFCmtYIQRhhzEOd55dedjm7xTLAPU5IQ0oIbBYDw4x5wojCj7Kw+lZScV8PCT0pmWlZb1JAENCUDDhOs8CYI-pwSIgabFHGHtMGpdFlwz1IlKRWf8LBOzYJHNCmWl0Nura51uu+vV7lUtpL0DAKcAZAxCP5MQEw0YhS2xoJqhOqCiUh3OmleMCEKWl0jdSSx7V4kCL0As28c1asKoa2qlrSd4J6zdG+h0MEXoTbDZSQirVe8tuBeFSzKiDYfT0UMqYkETFNkg4Mu0aY4xFxQ6ezDk1JzNsfZyUVJHKtDYjDavMKTc6vSdyYtd-2Y6jNDEMutkB2VpLmpI+rKqi0mK+E8AbX0QJWXGCStD41Qbyd4WpkQi6Dt-HaHrMubiHmTJukghuaEXhdzPo8BCFbvPcHZRVy5L7k4affJsICbQSrDBAiHlFkUXRFluk7nReYY7nQwpJwr5pG3leEJcojg7x6Kv+yCBYEEtWuT+gep4UdpupEW-l7msPfP+oCqIYLl0wuUaA9vdYta8xDJei6EYy3SKToy3OlTw98MixTBdKFAWLQbBlTK+RO9gR+NfW4vFFCOfP0Zfz9LWWGBPvjm+w7maExkG8lCCCQUtimLSkRPSl3zokNDZD7n6fVum9z7V0BxbDnBQNOdEBSEXMh8CahO4MfzoG-pNnzM5TLMhd-Yi6cyTrgR6CygoiJ7BAhQhRf5vb7wxyt4a7tANidD6bDwPrzY+wOYNiBCc4hTNiPbvppajZoZ7zFyfYQCAbL6lQUQgiGygFuztDwjdYQjiZQiigZ5vqbyn5+bn7wEMCJzZb7rNbUGIAdBeC6DcRVheiSGYFwjAh6DAgmCKJWDaA+CwFkEHz0AADufAdQuQAAYicD2n2mgD9q0HQVMLyNMDjAguFDSnoOMF7L-KoQApPr5mNt-uQZ2jgCYf2qIarBYZDgwZ6EwZ7l0HeozoqkEBYhPiflPrwY3vwVfgEZspyPZohuxN6HIQgBJmAdIdtA5tCMHkQc9rDqahDOQYvPmAEbNJYdyFyIeHYQMM2qtG2GVDaozhoZUVoXPLlgERBLFtoPfAKFCEMCJs0MMG0IlNuCGIuJ-u4elokV4QfMXktl6A0TYQlP6D4DZkBH3uBMPKqtwQkZ4XASimrsRLUdoI1J0IZBSn4HAuEZIf5C1O4EMJ3GwqUaToruHsirykmOmiaPivUAAEpgAACOmQ1AZQBGSm7eKs+WEw6+OuVe4RChro1mI6iE0a3RUsFxHSXS9IkyOK9Qd4ducJsyKmKOFiEq0wPQNglSwQowwQ0EYE-GcR3xoeZ+SRBJGAnS2Kjya6KRMeIqkWmMf4-IwOdqD0vcGJ0IkObq7Q4wXBOapxpBPK3i7S-JRJPSDygyA6q+tJfg9JY6jJ9hFUWMkIoQDEDSnJJxHhGp+JAJ5yRK1ymKgpgy22u2ZaARFgIw8IxgGmFKDgoQjKoQq0AQ9qjmwIeJeEFxaK7pdyxJ+pZJHGep7yv+CJ3yfIXgtmfeW0Y6l2iAb+Yq7QAo2y7g8IcZ-xWprplySZWKKZmZTyOUbp9uopRYzCroHgi4i4dKesIKtg6egoxSJSbU0wNZGSLpqK7ZNyyZGZpJTyA6RugZ3Q386+A+v4qIQ6r8hsVZvIU59AKK5qpgbcIZ0wqJUKsqa0bQPo7EFiEoKGixJBr2ZqfpIGgBZe3siAhgxizoY+-Ib+xSX+-i9Cam5GmmPo1UjKe+iGypYEVYJgnK2WzAlJf+Ks-yUUmyJp9Bl5saQwDYJgTCa0Y+boRyIa0S8U56NaQIZ2ORrQwwaR3oNewEz5EQQAA */\n  createMachine(\n    {\n      context: {\n        capabilities: {} as StandardPlanInitializationData,\n        sizes: undefined,\n        form: {},\n        creationError: undefined,\n      },\n      tsTypes: {} as import(\"./StandardPlanMachine.typegen\").Typegen0,\n      predictableActionArguments: true,\n      schema: {\n        context: {} as StandardPlanMachineContext,\n        events: {} as\n          | { type: \"fieldInvalid\" }\n          | { type: \"nameChange\"; name: string }\n          | { type: \"providerChange\"; provider: CloudProvider }\n          | { type: \"regionChange\"; region: CloudRegion }\n          | { type: \"sizeChange\"; size: Size }\n          | {\n              type: \"selectSubscription\";\n              subscription: MarketplaceSubscription;\n            }\n          | { type: \"selectPrepaid\" }\n          | { type: \"billingChange\" }\n          | { type: \"nameIsValid\" }\n          | { type: \"nameIsInvalid\" }\n          | { type: \"nameIsTaken\" }\n          | { type: \"submit\" }\n          | { type: \"create\" }\n          | { type: \"createSuccess\" }\n          | { type: \"createError\"; error: CreateKafkaInstanceError },\n        services: {} as {\n          getSizes: {\n            data: StandardSizes;\n          };\n        },\n      },\n      initial: \"verifyAvailability\",\n      id: \"standardPlanMachine\",\n      states: {\n        verifyAvailability: {\n          entry: \"setInitialContext\",\n          always: [\n            {\n              cond: \"isOverQuota\",\n              target: \"overQuota\",\n            },\n            {\n              cond: \"isInstanceUnavailable\",\n              target: \"instanceUnavailable\",\n            },\n            {\n              cond: \"isRegionsUnavailable\",\n              target: \"regionsUnavailable\",\n            },\n            {\n              target: \"configuring\",\n            },\n          ],\n        },\n        overQuota: {\n          tags: \"blocked\",\n        },\n        instanceUnavailable: {\n          tags: \"blocked\",\n        },\n        regionsUnavailable: {\n          tags: \"blocked\",\n        },\n        configuring: {\n          type: \"parallel\",\n          states: {\n            status: {\n              initial: \"unsubmitted\",\n              states: {\n                unsubmitted: {\n                  tags: \"unsubmitted\",\n                },\n                submitting: {\n                  entry: \"triggerSubmit\",\n                  always: [\"submitted\"],\n                },\n                submitted: {\n                  tags: \"submitted\",\n                },\n              },\n              on: {\n                create: {\n                  description:\n                    \"Save is enabled all the time, if it's clicked before the form is completely filled out we should show the validation for all errored fields\",\n                  target: \".submitting\",\n                },\n              },\n            },\n            form: {\n              initial: \"invalid\",\n              states: {\n                invalid: {\n                  tags: \"formInvalid\",\n                },\n                valid: {\n                  entry: \"resetCreationErrorMessage\",\n                  tags: \"creatable\",\n                  on: {\n                    fieldInvalid: {\n                      target: \"invalid\",\n                    },\n                    submit: {\n                      target: \"saving\",\n                    },\n                  },\n                },\n                saving: {\n                  entry: [\"resetCreationErrorMessage\", \"triggerSave\"],\n                  tags: \"formSaving\",\n                  on: {\n                    createSuccess: {\n                      target: \"saved\",\n                    },\n                    createError: {\n                      actions: \"setCreationError\",\n                      target: \"invalid\",\n                    },\n                  },\n                },\n                saved: {\n                  type: \"final\",\n                },\n              },\n              on: {\n                fieldInvalid: {\n                  description:\n                    \"sent by the fields when their value change to an invalid value. This will transition the form to the invalid state, to then eventually transition to the valid state if the field state is marked as done (which means that all fields have a valid value selected)\",\n                  target: \".invalid\",\n                },\n              },\n            },\n            fields: {\n              tags: \"configurable\",\n              type: \"parallel\",\n              states: {\n                name: {\n                  initial: \"validate\",\n                  states: {\n                    empty: {\n                      tags: \"nameEmpty\",\n                    },\n                    invalid: {\n                      entry: \"fieldInvalid\",\n                      tags: \"nameInvalid\",\n                    },\n                    valid: {\n                      tags: \"nameValid\",\n                      type: \"final\",\n                    },\n                    validate: {\n                      always: [\n                        {\n                          cond: \"nameIsEmpty\",\n                          target: \"empty\",\n                        },\n                        {\n                          cond: \"nameIsValid\",\n                          target: \"valid\",\n                        },\n                        {\n                          target: \"invalid\",\n                        },\n                      ],\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    nameChange: {\n                      actions: \"setName\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n                provider: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"providerIsValid\",\n                          target: \"valid\",\n                        },\n                        {\n                          target: \"invalid\",\n                        },\n                      ],\n                    },\n                    invalid: {\n                      entry: \"fieldInvalid\",\n                      tags: \"providerInvalid\",\n                    },\n                    valid: {\n                      tags: \"providerValid\",\n                      type: \"final\",\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    providerChange: {\n                      actions: \"setProvider\",\n                      cond: \"didProviderChange\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n                region: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"regionIsValid\",\n                          target: \"valid\",\n                        },\n                        {\n                          target: \"invalid\",\n                        },\n                      ],\n                    },\n                    invalid: {\n                      entry: \"fieldInvalid\",\n                      tags: \"regionInvalid\",\n                    },\n                    valid: {\n                      tags: \"regionValid\",\n                      type: \"final\",\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    providerChange: {\n                      target: \".validate\",\n                    },\n                    regionChange: {\n                      actions: \"setRegion\",\n                      cond: \"didRegionChange\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n                size: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"noProviderOrRegion\",\n                          target: \"idle\",\n                        },\n                        {\n                          cond: \"noSizes\",\n                          target: \"loading\",\n                        },\n                        {\n                          cond: \"emptySizes\",\n                          target: \"error\",\n                        },\n                        {\n                          cond: \"sizeIsDisabled\",\n                          target: \"disabled\",\n                        },\n                        {\n                          cond: \"billingRequiredButNotSelected\",\n                          target: \"waitingForQuota\",\n                        },\n                        {\n                          cond: \"sizeIsOverQuota\",\n                          target: \"overQuota\",\n                        },\n                        {\n                          target: \"valid\",\n                        },\n                      ],\n                    },\n                    idle: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeIdle\",\n                    },\n                    disabled: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeDisabled\",\n                    },\n                    waitingForQuota: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeWaitingForQuota\",\n                    },\n                    overQuota: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeOverQuota\",\n                    },\n                    valid: {\n                      tags: \"sizeValid\",\n                      type: \"final\",\n                    },\n                    error: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeError\",\n                    },\n                    loading: {\n                      description:\n                        \"Fetch the data required to show the available sizes and limits\",\n                      invoke: {\n                        src: \"getSizes\",\n                        onDone: [\n                          {\n                            actions: \"setSizes\",\n                            target: \"validate\",\n                          },\n                        ],\n                        onError: [\n                          {\n                            target: \"error\",\n                          },\n                        ],\n                      },\n                      tags: \"sizeLoading\",\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    providerChange: {\n                      target: \".validate\",\n                    },\n                    regionChange: {\n                      target: \".validate\",\n                    },\n                    sizeChange: {\n                      actions: \"setSize\",\n                      cond: \"didSizeChange\",\n                      target: \".validate\",\n                    },\n                    billingChange: {\n                      target: \".validate\",\n                    },\n                  },\n                },\n                billing: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"onlyPrepaid\",\n                          target: \"prepaidOnly\",\n                        },\n                        {\n                          cond: \"singleSubscription\",\n                          target: \"singleSubscription\",\n                        },\n                        {\n                          cond: \"onlySubscriptions\",\n                          target: \"onlySubscriptions\",\n                        },\n                        {\n                          description:\n                            \"user has both prepaid and marketplace subscriptions\",\n                          target: \"prepaidAndSubscriptions\",\n                        },\n                      ],\n                    },\n                    prepaidOnly: {\n                      description:\n                        \"The user doesn't need to specify any option about the billing. The API will automatically figure out the right thing to do without giving it any information.\",\n                      tags: [\"noBilling\", \"billingValid\"],\n                      entry: \"setBillingToPrepaid\",\n                      type: \"final\",\n                    },\n                    singleSubscription: {\n                      description:\n                        \"The user doesn't need to specify any option about the billing. The API will automatically figure out the right thing to do without giving it any information.\",\n                      tags: [\"noBilling\", \"billingValid\", \"singleSubscription\"],\n                      entry: \"setBillingToSubscription\",\n                      type: \"final\",\n                    },\n                    onlySubscriptions: {\n                      description:\n                        \"More than one subscription exist. The user needs to select one to procede.\",\n                      initial: \"invalid\",\n                      type: \"final\",\n                      states: {\n                        invalid: {},\n                        valid: {\n                          entry: \"triggerBillingChange\",\n                          tags: \"billingValid\",\n                          type: \"final\",\n                        },\n                      },\n                      on: {\n                        selectSubscription: [\n                          {\n                            actions: \"setBillingToSubscription\",\n                            cond: \"matchesSelectedProviderOrRHMarketplaceAndHasQuota\",\n                            target: \".valid\",\n                          },\n                          {\n                            cond: \"noSelectedProvider\",\n                            target: \".valid\",\n                          },\n                        ],\n                      },\n                    },\n                    prepaidAndSubscriptions: {\n                      description:\n                        \"The user has both prepaid quota and one or more subscription to a marketplace. The user needs to select one to procede.\",\n                      initial: \"empty\",\n                      type: \"final\",\n                      states: {\n                        empty: {},\n                        subscription: {\n                          entry: \"triggerBillingChange\",\n                          tags: \"billingValid\",\n                          type: \"final\",\n                        },\n                        prepaid: {\n                          entry: \"triggerBillingChange\",\n                          tags: \"billingValid\",\n                          type: \"final\",\n                        },\n                      },\n                      on: {\n                        selectSubscription: [\n                          {\n                            actions: \"setBillingToSubscription\",\n                            cond: \"matchesSelectedProviderOrRHMarketplaceAndHasQuota\",\n                            target: \".subscription\",\n                          },\n                          {\n                            cond: \"noSelectedProvider\",\n                            target: \".subscription\",\n                          },\n                        ],\n                        selectPrepaid: {\n                          actions: \"setBillingToPrepaid\",\n                          cond: \"hasPrepaidQuota\",\n                          target: \".prepaid\",\n                        },\n                      },\n                    },\n                  },\n                  on: {\n                    providerChange: {\n                      actions: \"unsetSubscription\",\n                      description:\n                        \"If a new provider is selected, deselect any previously selected billing option.\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n              },\n              onDone: {\n                target: \"#standardPlanMachine.configuring.form.valid\",\n              },\n            },\n          },\n          onDone: {\n            target: \"saved\",\n          },\n        },\n        saved: {\n          type: \"final\",\n        },\n      },\n    },\n    {\n      actions: {\n        setInitialContext: assign((context) => {\n          return {\n            form: {\n              ...(context.capabilities.defaultProvider\n                ? onProviderChange(\n                    context.capabilities.availableProviders,\n                    context.capabilities.defaultProvider\n                  )\n                : {}),\n            },\n          };\n        }),\n        fieldInvalid: send(\"fieldInvalid\"),\n        setName: assign((context, { name }) => {\n          if (context.creationError === \"name-taken\") {\n            return {\n              form: { ...context.form, name },\n              creationError: undefined,\n            };\n          }\n          return { form: { ...context.form, name } };\n        }),\n        setProvider: assign((context, { provider }) => {\n          return {\n            form: {\n              ...context.form,\n              ...onProviderChange(\n                context.capabilities.availableProviders,\n                provider\n              ),\n            },\n            sizes: undefined,\n          };\n        }),\n        setRegion: assign((context, { region }) => {\n          if (context.creationError === \"region-unavailable\") {\n            return {\n              form: { ...context.form, region },\n              sizes: undefined,\n              creationError: undefined,\n            };\n          }\n          return {\n            form: {\n              ...context.form,\n              region,\n            },\n            sizes: undefined,\n          };\n        }),\n        setSize: assign((context, { size }) => ({\n          form: {\n            ...context.form,\n            size,\n          },\n        })),\n        setSizes: assign((context, event) => {\n          const sizes = event.data;\n          const smallestSize = sizes.sort((a, b) => a.quota - b.quota)[0];\n          return {\n            sizes,\n            form: {\n              ...context.form,\n              size: smallestSize,\n            },\n          };\n        }),\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        resetCreationErrorMessage: assign((_context) => ({\n          creationError: undefined,\n        })),\n        setCreationError: assign((_context, { error }) => {\n          return {\n            creationError: error,\n          };\n        }),\n        triggerSave: sendParent((context) => {\n          const form = context.form as Required<typeof context.form> &\n            Pick<typeof context.form, \"billing\">;\n          const data: CreateKafkaFormData = {\n            plan: \"standard\",\n            name: form.name,\n            provider: form.provider,\n            region: form.region,\n            sizeId: form.size.id,\n            billing: form.billing,\n          };\n          return {\n            type: \"save\",\n            data,\n          };\n        }),\n        triggerSubmit: send(\"submit\"),\n        triggerBillingChange: send(\"billingChange\"),\n        setBillingToPrepaid: assign((context) => {\n          const form = { ...context.form };\n          form.billing = \"prepaid\";\n          return { form };\n        }),\n        setBillingToSubscription: assign((context, event) => {\n          const form = { ...context.form };\n          if (event.type === \"selectSubscription\") {\n            form.billing = event.subscription;\n          } else {\n            // single subscription, take it from the context\n            const ms = context.capabilities.marketplaceSubscriptions[0];\n            form.billing = {\n              marketplace: ms.marketplace,\n              subscription: ms.subscriptions[0],\n            };\n          }\n          return { form };\n        }),\n        unsetSubscription: assign((context) => {\n          const form = { ...context.form };\n          form.billing = undefined;\n          return { form };\n        }),\n      },\n      guards: {\n        isOverQuota: ({ capabilities }) =>\n          capabilities === undefined ||\n          capabilities.instanceAvailability === \"out-of-quota\",\n        isInstanceUnavailable: ({ capabilities }) =>\n          capabilities === undefined ||\n          capabilities.instanceAvailability === \"instance-unavailable\",\n        isRegionsUnavailable: ({ capabilities }) =>\n          capabilities === undefined ||\n          capabilities.instanceAvailability === \"regions-unavailable\",\n        nameIsEmpty: ({ form }) =>\n          form.name === undefined || form.name.length === 0,\n        nameIsValid: ({ form }) =>\n          /^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(form.name || \"\"),\n        providerIsValid: ({ form, capabilities }) => {\n          const selectedProviderInfo = capabilities?.availableProviders.find(\n            (p) => p.id === form.provider\n          );\n          return (\n            // must have loaded a list of providers\n            (capabilities?.availableProviders || []).length > 0 &&\n            // must have selected a provider\n            selectedProviderInfo !== undefined\n          );\n        },\n        regionIsValid: ({ form, capabilities }) => {\n          const selectedProviderInfo = capabilities?.availableProviders.find(\n            (p) => p.id === form.provider\n          );\n          return (\n            // must have selected a region\n            form.region !== undefined &&\n            // the region must be included in the capabilities for the provider\n            selectedProviderInfo?.regions.find((r) => r.id === form.region) !==\n              undefined\n          );\n        },\n        noProviderOrRegion: ({ form }) =>\n          form.provider === undefined || form.region === undefined,\n        noSizes: ({ sizes }) => sizes === undefined,\n        emptySizes: ({ sizes }) => sizes !== undefined && sizes.length === 0,\n        sizeIsDisabled: ({ form, capabilities }) => {\n          if (capabilities === undefined) return true;\n          return form.size?.isDisabled === true;\n        },\n        billingRequiredButNotSelected: ({ form }, _, meta) => {\n          if (meta.state.hasTag(\"noBilling\")) {\n            return false;\n          }\n          return form.billing === undefined;\n        },\n        sizeIsOverQuota: ({ form, capabilities }) => {\n          if (capabilities === undefined || !form.size) return true;\n          const availableQuota =\n            form.billing === \"prepaid\" || form.billing === undefined\n              ? capabilities.remainingPrepaidQuota\n              : capabilities.remainingMarketplaceQuota;\n          if (!availableQuota) return true;\n          return form.size.quota > availableQuota;\n        },\n        didProviderChange: (context, event) =>\n          context.form.provider !== event.provider,\n        didRegionChange: (context, event) =>\n          context.form.region !== event.region,\n        didSizeChange: (context, event) =>\n          context.form.size?.id !== event.size.id,\n        onlyPrepaid: (context) =>\n          context.capabilities.marketplaceSubscriptions.length === 0,\n        singleSubscription: (context) =>\n          context.capabilities.remainingPrepaidQuota === undefined &&\n          context.capabilities.marketplaceSubscriptions.flatMap(\n            (m) => m.subscriptions\n          ).length === 1,\n        onlySubscriptions: (context) =>\n          context.capabilities.remainingPrepaidQuota === undefined &&\n          context.capabilities.marketplaceSubscriptions.length > 0,\n        matchesSelectedProviderOrRHMarketplaceAndHasQuota: (\n          { form, capabilities },\n          { subscription }\n        ) =>\n          capabilities.remainingMarketplaceQuota !== undefined &&\n          capabilities.remainingMarketplaceQuota > 0 &&\n          (subscription.marketplace === \"rhm\" ||\n            form.provider === subscription.marketplace),\n        hasPrepaidQuota: (context) =>\n          context.capabilities.remainingPrepaidQuota !== undefined &&\n          context.capabilities.remainingPrepaidQuota > 0,\n        noSelectedProvider: ({ form }) => form.provider === undefined,\n      },\n    }\n  );\n","import { CloudProvider, CloudRegion } from \"ui-models/src/models/kafka\";\nimport { assign, createMachine, send, sendParent } from \"xstate\";\nimport {\n  CreateKafkaFormData,\n  CreateKafkaInstanceError,\n  TrialPlanInitializationData,\n  TrialSizes,\n} from \"../types\";\nimport { onProviderChange } from \"./shared\";\n\nexport type TrialPlanMachineContext = {\n  // initial data coming from the APIs\n  capabilities: TrialPlanInitializationData;\n\n  // what the user is selecting\n  form: {\n    name?: string;\n    provider?: CloudProvider;\n    region?: CloudRegion;\n  };\n\n  // based on the form.provider and form.region selection\n  sizes: TrialSizes | undefined;\n\n  creationError: CreateKafkaInstanceError | undefined;\n};\n\nexport const TrialPlanMachine =\n  /** @xstate-layout N4IgpgJg5mDOIC5QBUBOBLAhgGwArcwDsBZTAYwAt1CwA6ANzAwDMBPAQXs3QICMf0AF1YBiRKAAOAe1hD0UwuJAAPRACYAbAA4AnLQ0AGNQBYArBo0BmHQHYNNywBoQrRDoO1bARjWmv54y8DY18AX1DnNCw8AhJyKhpaMgVmdCgAVwxCKFpYQUxBdNgRMlQwArAlaVlBeUUkFUQgtWdXBFNLY1o7LRDTG1NTLVNjG3DIjBx8IlJKajpkwlSMrJzmKVQAWwYcdAgRVLBsCABJQi5sPaqZOQUlVQQvLRs9NR1TI1Mdey0tNS1Wk1nqZaJodIEbEYTAZ7OMQFEprFZgkFik0plqGsNtsLnsSmUKtcanV7kCXqD3p9vjZfv9AQg1AYhrQDF4fH9jJ0aVo4QiYjN4vMkmiVpjaOstrlMPRMfjyoIwABldJkMhweANaq3eqgB5qSxqGwsgwmgzPHRBGxeemMrQeCwfAY6NT6s2mXmTflxOaJRbLDHZcXYqUy7JyioAUVQqA2RO1pIZBqNppN5st1pcTR04O6gX+9hMefdEXhnum3pRwqW6NWQa2B3QR1O512EDjtTuDQe-i+tD+Jpdxm0NhdpnpXlGXTNnIt-RCnOLE2i5eRQr9NbFh2OsFohEwmzouIgFTEmpuHZ1jQQxmG3VHfjUE7Zb3HGlGoK8Vo0-ksli0Vh0D1lyRQVfRFAM1kbbdd33MADmxZVeE2IR2xJLsmgNccbECWgvAsGwBkhBwb0sIDEQFH1UWrUVAy3CAdz3A8REYsAAGEKCIGBUM7XUMJaTNHg0QZQU5Axf0MYxRmwsivVXMDqIg8UoPo2gJBjGUICYHZLmPBVT0kc80N49o3lBQxgnBLkmQBATH20Wghy8WxnS0IJLA0GSV1Aqj-VrOidzUqQNKYeCtkQ5DBG4y9u0w2zLCePs33cxkmW0IdPJAyiq18zdlIC9S9hCwLgtQdjOMqM9iR4q8vFito7JBd4XhpGF-FGDKKMrdcaMgpsdzKKA6m0vYTyihNTEfY0TH-aFzGCccni6G8DGzf9WSE9KSz5Lysu6xT-NoAa6lCzZwpQyr43Qx46qaN4vFoawR1HT8Jv6DqKzXcC-Lyw6wEGhQRGKwrSo47IKoMqror48cTEsByOhItlLD8P93rknyN1on6joBnHCDKsGxqu2r+LaIJ3FoEYRytYYkZCNHvOyzHeug2QAC9D1bUaLovBNnjh2xnn-A1hgmmz6rtLRugMZrhhvJzF1LYDOs+hTvr63J0A52hsCkTAIFlCAFDoah6CkABrOhtsyrqvtyjX2boXX9cxBBTakMgCjqABtAwAF0ieM4x3k8O0jCc2qNDum0Bg0bpKXihxvmsYwGd2u2sYdrWnb1g2wyYGNUFUghBAlbZrZV+Scsz1ns513PXfdz2L19gOeaMq9g8asPHwtZKLRjs0+xRv5DHJzQ09ttX7drjmTrOyL2+qmLSfUC0uhMDRsysbRNH8SfVerlmVMdwGCs0kHysDmqboQSxgnuvD9THq1szCLayxtw-maUrO57xgmXEl5Q2uqvO+Zo9BBCsJCSwI5rA8g-srD6Vcf7+REEbRIeQKi0ArsgjGPVf7bmvt2QI90-BCx0PFWBXcbQPweoMLeidHyfAPignq6Dja5HyAqHBn9K74IgsQ9Q2g9CGBMOYACdgHBYU5KHay2FkbOhdOEEshApCaQ1CgPheCGBMHQGwTg3A+ACGEEI68YC8J6AtBHew35-wWDUKwugghPQAFVYCQDMW8ewuE+hsjZIMXwr4rFsgtLYp4Fgo5ONoC46Iri9xcB4JgXg2BwYgC1LzK6IQbR-j7FoJMYkhIRxpNEvGsB4nSiMck1JZjskCSCB4cEMtOQiNGDLLw0S9q1iwYUHc6RCCwHSEhIQCo2zAITM0ekQ4QTNSfhCbM9NEHkR0V0sUPSii5CGRFUZXj8mUwaayP4eFkb9HpNoOGkIVodBePYMSitcHoyZgQ9Zmj0mGWXogGk9I-weD+EMbMZpWTiVTks2SjNVm0WDKbVsXjg5xxlv+Zyj4CIWMRaCBhgwmQjD+KRUFO0p5HzrDiGF4ziaDD0P2KEQ5nijloStRKMIvjDmGMjTpGcsSSlgNKTEXiTRGleiaCaFprF0qlhNBWLomTHI8nir+bD9rBi5YwMZENLrGRMN8FkNIt4vGRSOWh2F9Ao1qu8Do+SZVLmWY8iFHLNhmJ-CCSlg5hy0vqX+SBtV2TPz-G8Nl08a4qRYrQfpggpAqgoJ40lxl-BqFBLoWBFhYEwn1E4epLwPVYr+K5dN9ztHWvZYQwNsFaBgE2BIUxUarwjilkJAYmh7DIxTVhTQuF+gcjsJQ38YxZX8KeftH6QboU6XtbfJysCWQdGnE1CaMs-WEoOkGo89rDUumZdmfof48Ljn-FLM0Tw7JOQsHO1BA7i1HkJJWh4nRY0WgGHhXQxhpzGGbXHfwNITAdt-LA49BCF2wXtWacc5hY3iPBEK5ovQf39o1kDC+wbCChvDZG1VmTo2Gusj4OcDghh2ByXYPse6wl3u-N2y1YL07+uPvlIKwNhq6TSRkjuV7-zww+P4NkQ4CKpvqi6e6IRmm6EZOu0jSsrXgoLQdWDWkh1XEvU0Do3RhzBzZEYb4ZgbSSRmS8MwbH77KJ7SsiTP0pNFyXXJhAd7KYOA5OSnQdowEukmvx7CgmVpNSg+raCJmAPi3UIC0O2gLK6HYx5meKk8bwcQ5QZDbzIYTK3p4N4nRAgfHzDCccQ5XjYW0AreKPxQsBv6n9Ia56FRmNgVLJy2E-DOiZPFHQMNx0zhHBxoSD6CtUd+v9QgtAZMqti2qmqwd9DWGpCjF0sCxxuuG50Fa35nQ-mkgZ-NlHC1Fe63RsxDgPB4Q+H+ecjIXz1P1EaGctigXDBEw88Tq2Dp4x8+OQVVnzK0yTO5Dra3Nba1Kwx95ID7CiPyXYL4wdDTfBtH3EbFlvxfsZLisj+Lv6-p+o7XrEAanmY4yCMehoTCHqEjaX4lXQeb38NvD7B1UdmZQ0x9QCnfCuXih8QYQQOgQ5HLhC0JohLaHwrmpBK350o7rgXWM5mLC7u-GCTkkltBTfqvYI0yMALzmnVdvNN2hd-xzi7bII6HP2C6GlTk+S-k+Ap8LjmD3bL-O6J6gYwRpn72W5rk9fUzG9HpJQ2NElqsvUCPD0T5GCXMzMSMb5Mth5Dn1N8Wm2holKpi4xj5DJ7OeEKbobT2ExJYXHd8XeIwRG2HVwL7y9rfOPAQeEIAA */\n  createMachine(\n    {\n      context: {\n        capabilities: {} as TrialPlanInitializationData,\n        sizes: undefined,\n        form: {},\n        creationError: undefined,\n      },\n      tsTypes: {} as import(\"./TrialPlanMachine.typegen\").Typegen0,\n      predictableActionArguments: true,\n      schema: {\n        context: {} as TrialPlanMachineContext,\n        events: {} as\n          | { type: \"fieldInvalid\" }\n          | { type: \"nameChange\"; name: string }\n          | { type: \"providerChange\"; provider: CloudProvider }\n          | { type: \"regionChange\"; region: CloudRegion }\n          | { type: \"nameIsValid\" }\n          | { type: \"nameIsInvalid\" }\n          | { type: \"nameIsTaken\" }\n          | { type: \"submit\" }\n          | { type: \"create\" }\n          | { type: \"createSuccess\" }\n          | { type: \"createError\"; error: CreateKafkaInstanceError },\n        services: {} as {\n          getSizes: {\n            data: TrialSizes;\n          };\n        },\n      },\n      initial: \"verifyAvailability\",\n      id: \"TrialPlanMachine\",\n      states: {\n        verifyAvailability: {\n          entry: \"setInitialContext\",\n          always: [\n            {\n              cond: \"isTrialUsed\",\n              target: \"trialUsed\",\n            },\n            {\n              cond: \"isTrialUnavailable\",\n              target: \"trialUnavailable\",\n            },\n            {\n              target: \"configuring\",\n            },\n          ],\n        },\n        trialUsed: {\n          tags: \"blocked\",\n        },\n        trialUnavailable: {\n          tags: \"blocked\",\n        },\n        regionsUnavailable: {\n          tags: \"blocked\",\n        },\n        configuring: {\n          type: \"parallel\",\n          states: {\n            status: {\n              initial: \"unsubmitted\",\n              states: {\n                unsubmitted: {\n                  tags: \"unsubmitted\",\n                },\n                submitting: {\n                  entry: \"triggerSubmit\",\n                  always: [\"submitted\"],\n                },\n                submitted: {\n                  tags: \"submitted\",\n                },\n              },\n              on: {\n                create: {\n                  description:\n                    \"Save is enabled all the time, if it's clicked before the form is completely filled out we should show the validation for all errored fields\",\n                  target: \".submitting\",\n                },\n              },\n            },\n            form: {\n              initial: \"invalid\",\n              states: {\n                invalid: {\n                  tags: \"formInvalid\",\n                },\n                valid: {\n                  entry: \"resetCreationErrorMessage\",\n                  on: {\n                    fieldInvalid: {\n                      target: \"invalid\",\n                    },\n                    submit: {\n                      target: \"saving\",\n                    },\n                  },\n                },\n                saving: {\n                  entry: [\"resetCreationErrorMessage\", \"triggerSave\"],\n                  tags: \"formSaving\",\n                  on: {\n                    createSuccess: {\n                      target: \"saved\",\n                    },\n                    createError: {\n                      actions: \"setCreationError\",\n                      target: \"invalid\",\n                    },\n                  },\n                },\n                saved: {\n                  type: \"final\",\n                },\n              },\n              on: {\n                fieldInvalid: {\n                  description:\n                    \"sent by the fields when their value change to an invalid value. This will transition the form to the invalid state, to then eventually transition to the valid state if the field state is marked as done (which means that all fields have a valid value selected)\",\n                  target: \".invalid\",\n                },\n              },\n            },\n            fields: {\n              tags: \"configurable\",\n              type: \"parallel\",\n              states: {\n                name: {\n                  initial: \"validate\",\n                  states: {\n                    empty: {\n                      tags: \"nameEmpty\",\n                    },\n                    invalid: {\n                      entry: \"fieldInvalid\",\n                      tags: \"nameInvalid\",\n                    },\n                    valid: {\n                      tags: \"nameValid\",\n                      type: \"final\",\n                    },\n                    validate: {\n                      always: [\n                        {\n                          cond: \"nameIsEmpty\",\n                          target: \"empty\",\n                        },\n                        {\n                          cond: \"nameIsValid\",\n                          target: \"valid\",\n                        },\n                        {\n                          target: \"invalid\",\n                        },\n                      ],\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    nameChange: {\n                      actions: \"setName\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n                provider: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"providerIsValid\",\n                          target: \"valid\",\n                        },\n                        {\n                          target: \"invalid\",\n                        },\n                      ],\n                    },\n                    invalid: {\n                      entry: \"fieldInvalid\",\n                      tags: \"providerInvalid\",\n                    },\n                    valid: {\n                      tags: \"providerValid\",\n                      type: \"final\",\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    providerChange: {\n                      actions: \"setProvider\",\n                      cond: \"didProviderChange\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n                region: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"regionIsValid\",\n                          target: \"valid\",\n                        },\n                        {\n                          target: \"invalid\",\n                        },\n                      ],\n                    },\n                    invalid: {\n                      entry: \"fieldInvalid\",\n                      tags: \"regionInvalid\",\n                    },\n                    valid: {\n                      tags: \"regionValid\",\n                      type: \"final\",\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    providerChange: {\n                      target: \".validate\",\n                    },\n                    regionChange: {\n                      actions: \"setRegion\",\n                      cond: \"didRegionChange\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n                size: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"noProviderAndRegion\",\n                          target: \"idle\",\n                        },\n                        {\n                          cond: \"noSizes\",\n                          target: \"loading\",\n                        },\n                        {\n                          cond: \"emptySizes\",\n                          target: \"error\",\n                        },\n                        {\n                          target: \"valid\",\n                        },\n                      ],\n                    },\n                    idle: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeIdle\",\n                    },\n                    valid: {\n                      tags: \"sizeValid\",\n                      type: \"final\",\n                    },\n                    error: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeError\",\n                    },\n                    loading: {\n                      description:\n                        \"Fetch the data required to show the available sizes and limits\",\n                      invoke: {\n                        src: \"getSizes\",\n                        onDone: [\n                          {\n                            actions: \"setSizes\",\n                            target: \"validate\",\n                          },\n                        ],\n                        onError: [\n                          {\n                            target: \"error\",\n                          },\n                        ],\n                      },\n                      tags: \"sizeLoading\",\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    providerChange: {\n                      target: \".validate\",\n                    },\n                    regionChange: {\n                      target: \".validate\",\n                    },\n                  },\n                },\n              },\n              onDone: {\n                target: \"#TrialPlanMachine.configuring.form.valid\",\n              },\n            },\n          },\n          onDone: {\n            target: \"saved\",\n          },\n        },\n        saved: {\n          type: \"final\",\n        },\n      },\n    },\n    {\n      actions: {\n        setInitialContext: assign((context) => {\n          return {\n            form: {\n              ...(context.capabilities.defaultProvider\n                ? onProviderChange(\n                    context.capabilities.availableProviders,\n                    context.capabilities.defaultProvider\n                  )\n                : {}),\n            },\n          };\n        }),\n        fieldInvalid: send(\"fieldInvalid\"),\n        setName: assign((context, { name }) => {\n          if (context.creationError === \"name-taken\") {\n            return {\n              form: { ...context.form, name },\n              creationError: undefined,\n            };\n          }\n          return { form: { ...context.form, name } };\n        }),\n        setProvider: assign((context, { provider }) => {\n          return {\n            form: {\n              ...context.form,\n              ...onProviderChange(\n                context.capabilities.availableProviders,\n                provider\n              ),\n            },\n            sizes: undefined,\n          };\n        }),\n        setRegion: assign((context, { region }) => {\n          if (context.creationError === \"region-unavailable\") {\n            return {\n              form: { ...context.form, region },\n              sizes: undefined,\n              creationError: undefined,\n            };\n          }\n          return {\n            form: {\n              ...context.form,\n              region,\n            },\n            sizes: undefined,\n          };\n        }),\n        setSizes: assign((_context, event) => {\n          const sizes = event.data;\n          return {\n            sizes,\n          };\n        }),\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        resetCreationErrorMessage: assign((_context) => ({\n          creationError: undefined,\n        })),\n        setCreationError: assign((_context, { error }) => ({\n          creationError: error,\n        })),\n        triggerSave: sendParent((context) => {\n          const form = context.form as Required<typeof context.form>;\n          const data: CreateKafkaFormData = {\n            plan: \"developer\",\n            name: form.name,\n            provider: form.provider,\n            region: form.region,\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            sizeId: context.sizes!.trial.id,\n            billing: undefined,\n          };\n          return {\n            type: \"save\",\n            data,\n          };\n        }),\n        triggerSubmit: send(\"submit\"),\n      },\n      guards: {\n        isTrialUsed: ({ capabilities }) =>\n          capabilities === undefined ||\n          capabilities.instanceAvailability === \"used\",\n        isTrialUnavailable: ({ capabilities }) =>\n          capabilities === undefined ||\n          capabilities.instanceAvailability === \"unavailable\",\n        nameIsEmpty: ({ form }) =>\n          form.name === undefined || form.name.length === 0,\n        nameIsValid: ({ form }) =>\n          /^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(form.name || \"\"),\n        providerIsValid: ({ form, capabilities }) => {\n          const selectedProviderInfo = capabilities?.availableProviders.find(\n            (p) => p.id === form.provider\n          );\n          return (\n            // must have loaded a list of providers\n            (capabilities?.availableProviders || []).length > 0 &&\n            // must have selected a provider\n            selectedProviderInfo !== undefined\n          );\n        },\n        regionIsValid: ({ form, capabilities }) => {\n          const selectedProviderInfo = capabilities?.availableProviders.find(\n            (p) => p.id === form.provider\n          );\n          return (\n            // must have selected a region\n            form.region !== undefined &&\n            // the region must be included in the capabilities for the provider\n            selectedProviderInfo?.regions.find((r) => r.id === form.region) !==\n              undefined\n          );\n        },\n        noProviderAndRegion: ({ form }) =>\n          form.provider === undefined || form.region === undefined,\n        noSizes: ({ sizes }) => sizes === undefined,\n        emptySizes: ({ sizes }) =>\n          sizes !== undefined && sizes.standard.length === 0,\n        didProviderChange: (context, event) =>\n          context.form.provider !== event.provider,\n        didRegionChange: (context, event) =>\n          context.form.region !== event.region,\n      },\n    }\n  );\n","import type { CloudProvider, CloudRegion } from \"ui-models/src/models/kafka\";\nimport { assign, createMachine, EventFrom, forwardTo, send } from \"xstate\";\nimport type {\n  CloudProvidersInfo,\n  CreateKafkaFormData,\n  CreateKafkaInitializationData,\n  CreateKafkaInstanceError,\n  StandardPlanInitializationData,\n  StandardSizes,\n  TrialPlanInitializationData,\n  TrialSizes,\n} from \"../types\";\nimport {\n  StandardPlanMachine,\n  StandardPlanMachineContext,\n} from \"./StandardPlanMachine\";\nimport { TrialPlanMachine, TrialPlanMachineContext } from \"./TrialPlanMachine\";\n\ntype Quota =\n  | Pick<\n      StandardPlanInitializationData,\n      | \"plan\"\n      | \"remainingPrepaidQuota\"\n      | \"marketplaceSubscriptions\"\n      | \"remainingMarketplaceQuota\"\n      | \"instanceAvailability\"\n    >\n  | Pick<TrialPlanInitializationData, \"plan\" | \"instanceAvailability\">;\n\nexport type CreateKafkaInstanceMachineContext = {\n  quota: Quota | undefined;\n  providers: CloudProvidersInfo | undefined;\n  defaultProvider: CloudProvider | undefined;\n  capabilities: CreateKafkaInitializationData | undefined;\n};\n\nconst CreateKafkaInstanceMachine =\n  /** @xstate-layout N4IgpgJg5mDOIC5QGMBOYCGAXMBpDAZgNYYCSAdrFhucmAHQA2A9hhAJblT0COArs2r1kACzDIinKAAIqNCBlQRp-QRgDEYVKmap6AB0bYCugLbD02PIRIU5tBizZTeAoaPGSus6uQVKVNwwETgA3ZmRsdmZyAG0ABgBdRFB9Zlh2LGjyFJAAD0QAFniAJnp4gGYAdkKATgAOeqr4qvrCgFYAGhAAT0QANir++n769tqq2sKARhKKjsKAX0XutEwcfGIySl86JlYOLlc1YTEJKR95RWVVanV7fxug6QxQjHYjACNGMFy0jKyMVyBQQxTKlRqDSaLTaXV6iHG8XoVXahX6UyqJVqJX6-WWq0sGxs23seych24twwp08Fwe10CanUzD4WGkzAIlz8DKpf3SmWywKKpXK1TqjWarQ63T6CHa8UK9Hqcw6JUK6palXxIDWVk2th2NDJBxcVJp5289ICVPU5GYXMejOoLzeHww31+SBA-wFQK9ILBoshEph0vhoPaw2hFRKasKbQa0yWKx1hOsWzsu0cJqOZqtEHUfIBgv9iCTU2RkZj03RYsjMoGyvo0yG40KJSq0wq02m9W1uqJGcNDn2zlzQXoEDAoTALH0WkLXp9gJypYQ5cVKP61drNXr4faFSRJVmdUmasjvf7af1JKzo4px3cZy8MinM7nWhd7y+H0yPU0bRdAMIwsBMVBzAHdMDVJbMx0pCcPAtN9p1nZh51Qb83U+P8sB6EJyHCSIVwSZIl35FchQQWpanaeh4y7JN5gqbFZgbOU1WRE96m3Bp+lRKoKmvdZoLvI04MfM0kNfaR3zQjCsN-Rh-3UOTP0wvhYEgItfVXUAQRouiGO7QpmNYkp2NMqolXqWZcSPCpRn6NFhL1YlM3Eh9TUQl8LjU9Cv1eH93VwgD-IUoLsJ+HTKLXQz6NskyzJPCzwwqdppnoWj4niaZ2kPepaiTaZXMHGD73JFwCDALBRAufQdFCdgp1QWB1Aa5gmpa2AXj8aR0CgbIesir5ovI4s-X0staNqegjzGcZ+hKHjeyqdj2jGcplu4moFSqKpStEjyR0qo5qtqkR6sa5qtDarQdD0QxjDMCwRNvY7jXg+hzrq7wOq626CKIqIYlImKSym9cMRsiY0RmaYFXiOFZUKfa5rqRy5mmWp4kGdpDve4dPsfH7Lr+67uvainbvZTCBqG6Q+HIEb3TG1IKIh-Jpsjeh2k7XHOw7QqWnY0Z6mbapakGNVqgR-GUygwnYK8rhVJiBg5BwV63KHZXTqgcHJq5hASlROj+lKCp6kqdUVvYq3Mr3ds0UaPLZgJ9yiY13xHSe8h6Gan57leT12YmvTjaxbd6NM+NDIVdLCkskUFmxyZt2cwYPd1+982kP36FgV4pHUKCAGU+GQOhYHgcbdKoxOjKR0p6nmYXlvt1Fyn6Lt1W7E9Jkc7Pys8vOC6LprVaggBRIDUENiOQSjioY7b+PTNRe2a152NbLy03M7y4exJHcKvwLwOwGDmcF6orFWl5i2Nt7toEYqUWpayrt5SW+z4ls4+H0GBn0wuPYuU80wVyrnAWuYd65rkbvRBUtQ6x9zaKLeMO8WhDB7PEKEtRAFe0nKhdS+cjD+wniXGec9b5rnvuLSMSNErxhmJUUWCMsrKmWngsEuJ5YpjtFOWBqY3qez1jmBCJxpJ0h9jyIItDIYI1SrKSM4tW6dmVB0TsaISoKxvGIiqEinzUnzAo42zRxYojmD3FEtk+bTFFkMZskYcS9mfiwwh4ivpmhAWYkEswGg2RwSxJosxSjrU4tjAePcEY8SKp4wx3ifK0m8CAxSIVlJ4T8QMfic1lrFVaMqeYDjwztjojxHhsYOxW1ssmAkoic6eX1sY7JCBWjsQ7LNKWjRKiLRxmieW9SdYjxOkY0mV1Oo3Vaq0msCoY7FCGOlWMsxkYIkxMiHh7RYyMPjEJPRDSRnExcJYCAso4GxUhrGQY5QMpjCSpedaExkRND5jorEFQ9lDLKifI5XBWmb3DC2TKlRGLVCxBeDoCTR49CoGAUwjNmaulGqHb0HMjYgkciiLK+UUFWRxt2VZbT1mt1GK0Fo-EOx4n2cMn53srgBAvhANmqLw53yaIqfi4xsQdnyu2d+aVqjONbmna2OJuxQpHGPchhdwEGzrhc42MZBXYwmD3CE-F+j21jCMZy8Ytxdlom0CVewpU0FacteUIwcXcpRKiOY7FsYrzBdbeMhUWJt2NcAkhAVQHSsvuaxos19rzUxelFsyiBjdhGC2UYLY4k9l0V8o6RC0lgMnnK85nMMVVPKJo2GbiirsOsrMd1uU1SWzqSImlQDiEfh9WQs18qs2IGWrk4N-9Q0ZUxJZJoSolWVBylYwqnrhDMFMIYGqKLlzNoQNUf+SomFoP2p2Ht1lcZ5Roj2IW4rqXfKAa0o87EaI3JyhtQS2Ntyo2WMsIAA */\n  createMachine(\n    {\n      context: {\n        providers: undefined,\n        defaultProvider: undefined,\n        quota: undefined,\n        capabilities: undefined,\n      },\n      predictableActionArguments: true,\n      tsTypes: {} as import(\"./CreateKafkaInstanceMachine.typegen\").Typegen0,\n      schema: {\n        context: {} as CreateKafkaInstanceMachineContext,\n        events: {} as\n          | {\n              type: \"standard quota available\";\n              quota: Pick<\n                StandardPlanInitializationData,\n                | \"remainingPrepaidQuota\"\n                | \"remainingMarketplaceQuota\"\n                | \"marketplaceSubscriptions\"\n              >;\n            }\n          | {\n              type: \"out of standard quota\";\n              quota: Pick<\n                StandardPlanInitializationData,\n                \"marketplaceSubscriptions\"\n              >;\n            }\n          | {\n              type: \"no standard quota available\";\n              hasTrialQuota: boolean;\n            }\n          | {\n              type: \"trial available\";\n              capabilities: TrialPlanInitializationData;\n            }\n          | { type: \"trial used\" }\n          | { type: \"developer available\" }\n          | { type: \"developer used\" }\n          | { type: \"developer unavailable\" }\n          | {\n              type: \"providers and regions available\";\n              providers: CloudProvidersInfo;\n              defaultProvider: CloudProvider | undefined;\n            }\n          | { type: \"providers or regions unavailable\" }\n          | { type: \"save\"; data: CreateKafkaFormData }\n          | { type: \"createSuccess\" }\n          | { type: \"createError\"; error: CreateKafkaInstanceError },\n        services: {} as {\n          checkStandardQuota: {\n            data: never;\n          };\n          checkDeveloperAvailability: {\n            data: never;\n          };\n          fetchProvidersWithRegions: {\n            data: never;\n          };\n          standardPlan: {\n            data: StandardPlanMachineContext;\n          };\n          trialPlan: {\n            data: TrialPlanMachineContext;\n          };\n        },\n      },\n      id: \"createKafkaInstance\",\n      initial: \"loading\",\n      states: {\n        loading: {\n          description: \"Fetch the data required to drive the creation flow\",\n          tags: \"loading\",\n          initial: \"quota\",\n          states: {\n            quota: {\n              initial: \"checking standard quota\",\n              states: {\n                \"checking standard quota\": {\n                  invoke: {\n                    src: \"checkStandardQuota\",\n                    onError: [\n                      {\n                        actions: \"setStandardUnavailable\",\n                        target: \"standard\",\n                      },\n                    ],\n                  },\n                  on: {\n                    \"standard quota available\": {\n                      actions: \"setStandardAvailable\",\n                      target: \"standard\",\n                    },\n                    \"out of standard quota\": {\n                      actions: \"setStandardOutOfQuota\",\n                      target: \"standard\",\n                    },\n                    \"no standard quota available\": {\n                      target: \"checking developer availability\",\n                    },\n                  },\n                },\n                standard: {\n                  type: \"final\",\n                  always: {\n                    target: \"#createKafkaInstance.loading.fetching providers\",\n                  },\n                },\n                developer: {\n                  type: \"final\",\n                  always: {\n                    target: \"#createKafkaInstance.loading.fetching providers\",\n                  },\n                },\n                \"checking developer availability\": {\n                  invoke: {\n                    src: \"checkDeveloperAvailability\",\n                    onError: [\n                      {\n                        actions: \"setDeveloperUnavailable\",\n                        target: \"developer\",\n                      },\n                    ],\n                  },\n                  on: {\n                    \"developer used\": {\n                      actions: \"setDeveloperUsed\",\n                      target: \"developer\",\n                    },\n                    \"developer available\": {\n                      actions: \"setDeveloperAvailable\",\n                      target: \"developer\",\n                    },\n                    \"developer unavailable\": {\n                      actions: \"setDeveloperUnavailable\",\n                      target: \"developer\",\n                    },\n                  },\n                },\n              },\n            },\n            \"fetching providers\": {\n              invoke: {\n                src: \"fetchProvidersWithRegions\",\n                onError: [\n                  {\n                    actions: \"setProvidersOrRegionsUnavailable\",\n                    target: \"ready\",\n                  },\n                ],\n              },\n              on: {\n                \"providers and regions available\": {\n                  actions: \"setProviders\",\n                  target: \"ready\",\n                },\n                \"providers or regions unavailable\": {\n                  actions: \"setProvidersOrRegionsUnavailable\",\n                  target: \"ready\",\n                },\n              },\n            },\n            ready: {\n              type: \"final\",\n              entry: \"setCapabilities\",\n            },\n          },\n          onDone: [\n            {\n              cond: \"standard plan\",\n              target: \"standard plan\",\n            },\n            {\n              cond: \"developer plan\",\n              target: \"developer plan\",\n            },\n            {\n              target: \"system unavailable\",\n            },\n          ],\n        },\n        \"system unavailable\": {\n          tags: \"systemUnavailable\",\n          type: \"final\",\n        },\n        \"standard plan\": {\n          invoke: {\n            src: \"standardPlan\",\n            id: \"standardPlanService\",\n          },\n          tags: \"standardPlan\",\n          initial: \"idle\",\n          states: {\n            idle: {\n              on: {\n                save: {\n                  target: \"saving\",\n                },\n              },\n            },\n            saving: {\n              invoke: {\n                src: \"createInstance\",\n              },\n              tags: \"saving\",\n              on: {\n                createSuccess: {\n                  target: \"#createKafkaInstance.complete\",\n                },\n                createError: {\n                  actions: \"notifyCreateErrorToStandardPlan\",\n                  target: \"idle\",\n                },\n              },\n            },\n          },\n        },\n        \"developer plan\": {\n          invoke: {\n            src: \"trialPlan\",\n            id: \"trialPlanService\",\n          },\n          tags: \"trialPlan\",\n          initial: \"idle\",\n          states: {\n            idle: {\n              on: {\n                save: {\n                  target: \"saving\",\n                },\n              },\n            },\n            saving: {\n              invoke: {\n                src: \"createInstance\",\n              },\n              tags: \"saving\",\n              on: {\n                createSuccess: {\n                  target: \"#createKafkaInstance.complete\",\n                },\n                createError: {\n                  actions: \"notifyCreateErrorToTrialPlan\",\n                  target: \"idle\",\n                },\n              },\n            },\n          },\n        },\n        complete: {\n          type: \"final\",\n        },\n      },\n    },\n    {\n      actions: {\n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        setDeveloperAvailable: assign((_) => ({\n          quota: {\n            plan: \"developer\" as const,\n            instanceAvailability: \"available\" as const,\n          },\n        })),\n        setDeveloperUnavailable: assign((_) => ({\n          quota: {\n            plan: \"developer\" as const,\n            instanceAvailability: \"unavailable\" as const,\n          },\n        })),\n        setDeveloperUsed: assign((_) => ({\n          quota: {\n            plan: \"developer\" as const,\n            instanceAvailability: \"used\" as const,\n          },\n        })),\n        setStandardAvailable: assign((_, event) => ({\n          quota: {\n            plan: \"standard\" as const,\n            instanceAvailability: \"available\" as const,\n            remainingPrepaidQuota: event.quota.remainingPrepaidQuota,\n            marketplaceSubscriptions: event.quota.marketplaceSubscriptions,\n            remainingMarketplaceQuota: event.quota.remainingMarketplaceQuota,\n          },\n        })),\n        setStandardOutOfQuota: assign((_, event) => ({\n          quota: {\n            plan: \"standard\" as const,\n            instanceAvailability: \"out-of-quota\" as const,\n            marketplaceSubscriptions: event.quota.marketplaceSubscriptions,\n            remainingMarketplaceQuota: 0,\n            remainingPrepaidQuota: 0,\n          },\n        })),\n        setStandardUnavailable: assign((_) => ({\n          quota: {\n            plan: \"standard\" as const,\n            instanceAvailability: \"instance-unavailable\" as const,\n            marketplaceSubscriptions: [],\n            remainingMarketplaceQuota: 0,\n            remainingPrepaidQuota: 0,\n          },\n        })),\n        setProviders: assign((_, event) => {\n          return {\n            providers: event.providers,\n            defaultProvider: event.defaultProvider,\n          };\n        }),\n        setProvidersOrRegionsUnavailable: assign((context) => {\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          const quota = context.quota!;\n          if (quota.plan === \"standard\") {\n            quota.instanceAvailability = \"regions-unavailable\";\n          } else {\n            quota.instanceAvailability = \"unavailable\";\n          }\n          return {\n            providers: [],\n            quota,\n          };\n        }),\n        setCapabilities: assign((context) => {\n          const { providers, defaultProvider, quota } = context;\n          if (!providers || !quota) {\n            throw new Error(\"unexpected condition, no providers or quota\");\n          }\n          if (quota.plan === \"standard\") {\n            const capabilities: StandardPlanInitializationData = {\n              plan: \"standard\",\n              availableProviders: providers,\n              defaultProvider,\n              instanceAvailability: quota.instanceAvailability,\n              marketplaceSubscriptions: quota.marketplaceSubscriptions,\n              remainingMarketplaceQuota: quota.remainingMarketplaceQuota,\n              remainingPrepaidQuota: quota.remainingPrepaidQuota,\n            };\n            return { capabilities };\n          } else {\n            const capabilities: TrialPlanInitializationData = {\n              plan: \"developer\",\n              availableProviders: providers,\n              defaultProvider,\n              instanceAvailability: quota.instanceAvailability,\n            };\n            return { capabilities };\n          }\n        }),\n        notifyCreateErrorToStandardPlan: forwardTo(\"standardPlanService\"),\n        notifyCreateErrorToTrialPlan: send(\n          (_, event) => {\n            return { type: \"createError\", error: event.error };\n          },\n          { to: \"trialPlanService\" }\n        ),\n        /* eslint-enable @typescript-eslint/no-unused-vars */\n      },\n      guards: {\n        \"standard plan\": (context) => context.quota?.plan === \"standard\",\n        \"developer plan\": (context) => context.quota?.plan === \"developer\",\n      },\n    }\n  );\n\ntype EventTypes = Pick<\n  EventFrom<typeof CreateKafkaInstanceMachine>,\n  \"type\"\n>[\"type\"];\n\ntype EventOptions<E extends EventTypes> = Omit<\n  EventFrom<typeof CreateKafkaInstanceMachine, E>,\n  \"type\"\n>;\n\nexport type CreateKafkaInstanceServices = {\n  checkStandardQuota: (events: {\n    onOutOfQuota: (p: EventOptions<\"out of standard quota\">) => void;\n    onQuotaAvailable: (p: EventOptions<\"standard quota available\">) => void;\n    onNoQuotaAvailable: (\n      p: EventOptions<\"no standard quota available\">\n    ) => void;\n  }) => void;\n  checkDeveloperAvailability: (events: {\n    onUsed: () => void;\n    onAvailable: () => void;\n    onUnavailable: () => void;\n  }) => void;\n  fetchProvidersWithRegions: (\n    plan: \"standard\" | \"developer\",\n    events: {\n      onAvailable: (p: EventOptions<\"providers and regions available\">) => void;\n      onUnavailable: () => void;\n    }\n  ) => void;\n  getStandardSizes: (\n    provider: CloudProvider,\n    region: CloudRegion\n  ) => Promise<StandardSizes>;\n  getTrialSizes: (\n    provider: CloudProvider,\n    region: CloudRegion\n  ) => Promise<TrialSizes>;\n  onCreate: (\n    data: CreateKafkaFormData,\n    onSuccess: () => void,\n    onError: (error: CreateKafkaInstanceError) => void\n  ) => void;\n};\n\nexport function makeCreateKafkaInstanceMachine({\n  checkStandardQuota: checkStandardQuotaCb,\n  checkDeveloperAvailability: checkDeveloperAvailabilityCb,\n  fetchProvidersWithRegions: fetchProvidersWithRegionsCb,\n  getStandardSizes: getStandardSizesCb,\n  getTrialSizes: getTrialSizesCb,\n  onCreate,\n}: CreateKafkaInstanceServices) {\n  return CreateKafkaInstanceMachine.withConfig({\n    services: {\n      checkStandardQuota: () => {\n        return (send) =>\n          checkStandardQuotaCb({\n            onNoQuotaAvailable: ({ hasTrialQuota }) => {\n              send({ type: \"no standard quota available\", hasTrialQuota });\n            },\n            onOutOfQuota: ({ quota }) => {\n              send({ type: \"out of standard quota\", quota });\n            },\n            onQuotaAvailable: ({ quota }) => {\n              send({ type: \"standard quota available\", quota });\n            },\n          });\n      },\n      checkDeveloperAvailability: () => {\n        return (send) => {\n          checkDeveloperAvailabilityCb({\n            onAvailable: () => send(\"developer available\"),\n            onUsed: () => send(\"developer used\"),\n            onUnavailable: () => send(\"developer unavailable\"),\n          });\n        };\n      },\n      fetchProvidersWithRegions: (context) => {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const instanceType = context.quota!.plan;\n        return (send) => {\n          fetchProvidersWithRegionsCb(instanceType, {\n            onAvailable: ({ providers, defaultProvider }) =>\n              send({\n                type: \"providers and regions available\",\n                providers,\n                defaultProvider,\n              }),\n            onUnavailable: () => send(\"providers or regions unavailable\"),\n          });\n        };\n      },\n      createInstance: (_context, event) => {\n        const form = event.data;\n\n        return (send) => {\n          function onSuccess() {\n            send(\"createSuccess\");\n          }\n\n          function onError(error: CreateKafkaInstanceError) {\n            send({ type: \"createError\", error });\n          }\n\n          onCreate(\n            {\n              plan: form.plan,\n              name: form.name,\n              provider: form.provider,\n              region: form.region,\n              sizeId: form.sizeId,\n              billing: form.billing,\n            },\n            onSuccess,\n            onError\n          );\n        };\n      },\n      standardPlan: (context) => {\n        return StandardPlanMachine.withContext({\n          capabilities: context.capabilities as StandardPlanInitializationData,\n          sizes: undefined,\n          form: {},\n          creationError: undefined,\n        }).withConfig({\n          services: {\n            getSizes: (context) => {\n              const form = context.form as Required<typeof context.form>;\n              return getStandardSizesCb(form.provider, form.region);\n            },\n          },\n        });\n      },\n      trialPlan: (context) => {\n        return TrialPlanMachine.withContext({\n          capabilities: context.capabilities as TrialPlanInitializationData,\n          sizes: undefined,\n          form: {},\n          creationError: undefined,\n        }).withConfig({\n          services: {\n            getSizes: (context) => {\n              const form = context.form as Required<typeof context.form>;\n              return getTrialSizesCb(form.provider, form.region);\n            },\n          },\n        });\n      },\n    },\n  });\n}\n","import { useInterpret } from \"@xstate/react\";\nimport type { FunctionComponent } from \"react\";\nimport { createContext } from \"react\";\nimport type { ActorRefFrom } from \"xstate\";\nimport type { CreateKafkaInstanceServices } from \"./CreateKafkaInstanceMachine\";\nimport { makeCreateKafkaInstanceMachine } from \"./CreateKafkaInstanceMachine\";\n\nexport const CreateKafkaInstanceContext = createContext<{\n  service: ActorRefFrom<ReturnType<typeof makeCreateKafkaInstanceMachine>>;\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n}>(null!);\n\nexport const CreateKafkaInstanceProvider: FunctionComponent<\n  CreateKafkaInstanceServices\n> = ({\n  onCreate,\n  checkStandardQuota,\n  checkDeveloperAvailability,\n  fetchProvidersWithRegions,\n  getStandardSizes,\n  getTrialSizes,\n  children,\n}) => {\n  const service = useInterpret(\n    () =>\n      makeCreateKafkaInstanceMachine({\n        checkStandardQuota,\n        checkDeveloperAvailability,\n        fetchProvidersWithRegions,\n        getStandardSizes,\n        getTrialSizes,\n        onCreate,\n      }),\n    { devTools: true }\n  );\n  return (\n    <CreateKafkaInstanceContext.Provider value={{ service }}>\n      {children}\n    </CreateKafkaInstanceContext.Provider>\n  );\n};\n","import { Popover } from \"@patternfly/react-core\";\nimport { OutlinedQuestionCircleIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { Trans, useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { Link } from \"react-router-dom\";\n\nexport type BillingHelpProps = {\n  type: \"rh-only\" | \"external-marketplaces\";\n  subscriptionOptionsHref: string;\n};\n\nexport const BillingHelp: VoidFunctionComponent<BillingHelpProps> = ({\n  type,\n  subscriptionOptionsHref,\n}) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n  return (\n    <Popover\n      aria-label={t(\"billing.field_label\")}\n      headerContent={t(\"billing.field_label\")}\n      bodyContent={\n        <Trans\n          i18nKey={\n            type === \"rh-only\"\n              ? \"billing.field_popover_rh_only\"\n              : \"billing.field_popover_external_marketplace\"\n          }\n          ns={\"create-kafka-instance\"}\n          components={[<Link to={subscriptionOptionsHref} />]}\n        />\n      }\n    >\n      <OutlinedQuestionCircleIcon />\n    </Popover>\n  );\n};\n","export const LogoAWS = new URL(\"./Logo-AWS.svg\", import.meta.url)\n  .href;\nexport const LogoAzure = new URL(\n  \"./Logo-Azure.svg\",\n  import.meta.url\n).href;\nexport const LogoGCP = new URL(\"./Logo-GCP.svg\", import.meta.url)\n  .href;\nexport const LogoRedhat = new URL(\n  \"./Logo-Redhat.svg\",\n  import.meta.url\n).href;","import type { FunctionComponent } from \"react\";\nimport { LogoAWS } from \"./images\";\n\nexport const AWSLogo: FunctionComponent = () => {\n  return (\n    <>\n      <img src={LogoAWS} alt={\"\"} style={{ height: \"60px\" }} />\n    </>\n  );\n};\n","import type { FunctionComponent } from \"react\";\nimport { LogoAzure } from \"./images\";\n\nexport const AzureLogo: FunctionComponent = () => {\n  return (\n    <>\n      <img src={LogoAzure} alt={\"\"} style={{ height: \"60px\" }} />\n    </>\n  );\n};\n","import type { FunctionComponent } from \"react\";\nimport { LogoGCP } from \"./images\";\n\nexport const GCPLogo: FunctionComponent = () => {\n  return (\n    <>\n      <img src={LogoGCP} alt={\"\"} style={{ height: \"60px\" }} />\n    </>\n  );\n};\n","import type { SelectProps } from \"@patternfly/react-core\";\nimport {\n  Flex,\n  FlexItem,\n  FormSelect,\n  FormSelectOption,\n  Gallery,\n  GalleryItem,\n  HelperText,\n  HelperTextItem,\n  Tile,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport type { MarketPlace } from \"ui-models/src/models/kafka\";\nimport { AWSLogo, AzureLogo, GCPLogo, RedhatLogo } from \"../../Logos\";\n\nexport type BillingTilesProps = {\n  value: \"prepaid\" | string | undefined;\n  hasPrepaid: boolean;\n  subscriptions: {\n    marketplace: MarketPlace;\n    subscription: string;\n    isDisabled: boolean;\n  }[];\n  isPrepaidOverQuota: boolean;\n  prepaidQuota: number;\n  isMarketplaceOverQuota: boolean;\n  marketplaceQuota: number;\n  onPrepaid: () => void;\n  onSubscription: (marketplace: MarketPlace, subscription: string) => void;\n  validated?: SelectProps[\"validated\"];\n};\nexport const BillingTiles: VoidFunctionComponent<BillingTilesProps> = ({\n  value,\n  hasPrepaid,\n  subscriptions,\n  isPrepaidOverQuota,\n  prepaidQuota,\n  isMarketplaceOverQuota,\n  marketplaceQuota,\n  onPrepaid,\n  onSubscription,\n  validated,\n}) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n  const marketplaces: { [key in MarketPlace]: string } = {\n    aws: t(\"billing.marketplace_aws\"),\n    azure: t(\"billing.marketplace_azure\"),\n    gcp: t(\"billing.marketplace_gcp\"),\n    rhm: t(\"billing.marketplace_rh\"),\n  };\n  return (\n    <>\n      <Flex\n        role=\"listbox\"\n        aria-label={t(\"select_billing\")}\n        direction={{ default: \"column\", md: \"row\" }}\n      >\n        {hasPrepaid && (\n          <Flex\n            flex={{ default: \"flex_1\" }}\n            direction={{ default: \"column\" }}\n            spaceItems={{ default: \"spaceItemsSm\" }}\n          >\n            <span className=\"pf-c-form__label\">\n              <span className=\"pf-c-form__label-text\">\n                {t(\"billing.prepaid\")}\n              </span>\n            </span>\n            <FlexItem flex={{ default: \"flex_1\" }}>\n              <Tile\n                className={\"pf-u-w-100\"}\n                title={t(\"billing.prepaid_option\")}\n                icon={tiles[\"rhm\"]}\n                isDisabled={isPrepaidOverQuota}\n                isStacked={true}\n                isSelected={value === \"prepaid\"}\n                onClick={onPrepaid}\n              >\n                &nbsp;\n              </Tile>\n            </FlexItem>\n            {isPrepaidOverQuota && prepaidQuota > 0 && (\n              <HelperText className={\"pf-c-form__helper-text\"}>\n                <HelperTextItem variant={\"error\"}>\n                  {t(\"billing.prepaid_out_of_quota\")}\n                </HelperTextItem>\n              </HelperText>\n            )}\n            {isPrepaidOverQuota && prepaidQuota === 0 && (\n              <HelperText className={\"pf-c-form__helper-text\"}>\n                <HelperTextItem variant={\"error\"}>\n                  {t(\"billing.prepaid_out_of_quota\")}\n                </HelperTextItem>\n              </HelperText>\n            )}\n          </Flex>\n        )}\n        {subscriptions.length > 0 && (\n          <Flex\n            flex={{ default: \"flex_1\" }}\n            direction={{ default: \"column\" }}\n            spaceItems={{ default: \"spaceItemsSm\" }}\n          >\n            {hasPrepaid && (\n              <span className=\"pf-c-form__label\">\n                <span className=\"pf-c-form__label-text\">\n                  {t(\"billing.marketplace\")}\n                </span>\n              </span>\n            )}\n            <Gallery hasGutter={true}>\n              {subscriptions.map(\n                ({ marketplace, subscription, isDisabled }) => (\n                  <GalleryItem key={`tile-${subscription}`}>\n                    <Tile\n                      className={\"pf-u-w-100\"}\n                      title={marketplaces[marketplace]}\n                      icon={tiles[marketplace]}\n                      isStacked={true}\n                      isSelected={value === subscription}\n                      isDisabled={isDisabled || isMarketplaceOverQuota}\n                      onClick={() => onSubscription(marketplace, subscription)}\n                    >\n                      {subscription}\n                    </Tile>\n                  </GalleryItem>\n                )\n              )}\n            </Gallery>\n            {isMarketplaceOverQuota && marketplaceQuota > 0 && (\n              <HelperText className={\"pf-c-form__helper-text\"}>\n                <HelperTextItem variant={\"error\"}>\n                  {t(\"billing.marketplace_out_of_quota\")}\n                </HelperTextItem>\n              </HelperText>\n            )}\n            {isMarketplaceOverQuota && marketplaceQuota === 0 && (\n              <HelperText className={\"pf-c-form__helper-text\"}>\n                <HelperTextItem variant={\"error\"}>\n                  {t(\"billing.marketplace_out_of_quota\")}\n                </HelperTextItem>\n              </HelperText>\n            )}\n          </Flex>\n        )}\n      </Flex>\n      <FormSelect\n        className={\"pf-u-display-none\"}\n        value={value}\n        id=\"form-billing-option\"\n        name=\"billing\"\n        validated={validated}\n        onChange={(value) => {\n          if (value === \"prepaid\") {\n            onPrepaid();\n          } else {\n            const s = subscriptions.find((s) => s.marketplace === value);\n            if (s) {\n              onSubscription(s.marketplace, s.subscription);\n            }\n          }\n        }}\n      >\n        {[\n          <FormSelectOption\n            value=\"\"\n            key=\"placeholder\"\n            label={t(\"select_billing\")}\n          />,\n          hasPrepaid ? (\n            <FormSelectOption\n              key={\"prepaid\"}\n              value={\"prepaid\"}\n              label={`prepaid`}\n            />\n          ) : null,\n          subscriptions.map(({ marketplace, subscription, isDisabled }) => {\n            return (\n              <FormSelectOption\n                key={`select-option-${subscription}`}\n                value={subscription}\n                label={`${marketplace} - ${subscription}`}\n                isDisabled={isDisabled}\n              />\n            );\n          }),\n        ]}\n      </FormSelect>\n    </>\n  );\n};\n\nconst tiles: { [id in MarketPlace]: JSX.Element } = {\n  aws: <AWSLogo />,\n  gcp: <GCPLogo />,\n  azure: <AzureLogo />,\n  rhm: <RedhatLogo />,\n};\n","import type { FunctionComponent } from \"react\";\nimport { LogoRedhat } from \"./images\";\n\nexport const RedhatLogo: FunctionComponent = () => {\n  return (\n    <>\n      <img src={LogoRedhat} alt={\"\"} style={{ height: \"60px\" }} />\n    </>\n  );\n};\n","import type { SelectProps } from \"@patternfly/react-core\";\nimport {\n  Flex,\n  FlexItem,\n  FormSelect,\n  FormSelectOption,\n  Skeleton,\n  Tile,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport type { CloudProvider } from \"ui-models/src/models/kafka\";\nimport { AWSLogo, AzureLogo, GCPLogo } from \"../../Logos\";\nimport type { CloudProviderInfo } from \"../types\";\n\nexport type CloudProvidersTilesProps = {\n  providers: (CloudProviderInfo & { isDisabled?: boolean })[];\n  value: CloudProvider | undefined;\n  onChange: (provider: CloudProvider) => void;\n  isDisabled: boolean;\n  validated?: SelectProps[\"validated\"];\n};\nexport const CloudProvidersTiles: VoidFunctionComponent<\n  CloudProvidersTilesProps\n> = ({ providers, value, onChange, isDisabled, validated }) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n  return (\n    <>\n      {providers.length === 0 && (\n        <Skeleton\n          className=\"pf-m-text-4xl\"\n          screenreaderText=\"Loading contents\"\n        />\n      )}\n      <div role=\"listbox\" aria-label={t(\"select_cloud_provider\")}>\n        <Flex\n          justifyContent={{ default: \"justifyContentSpaceBetween\" }}\n          spacer={{ default: \"spacerNone\" }}\n          spaceItems={{ default: \"spaceItemsXs\" }}\n        >\n          {providers.map(\n            ({ id, displayName, isDisabled: providerDisabled }) => (\n              <FlexItem grow={{ default: \"grow\" }} key={id}>\n                <Tile\n                  className={\"pf-u-w-100\"}\n                  title={displayName}\n                  icon={tiles[id]}\n                  isStacked={true}\n                  isSelected={value === id}\n                  isDisabled={providerDisabled || isDisabled}\n                  onClick={() => onChange(id)}\n                >\n                  {providerDisabled &&\n                    t(\"billing.provider_incompatible_with_current_billing\")}\n                  &nbsp;\n                </Tile>\n              </FlexItem>\n            )\n          )}\n        </Flex>\n      </div>\n      <FormSelect\n        className={\"pf-u-display-none\"}\n        value={value}\n        id=\"form-cloud-provider-option\"\n        name=\"cloud-provider\"\n        isDisabled={isDisabled}\n        validated={validated}\n        onChange={(value) => onChange(value as CloudProvider)}\n      >\n        {[\n          <FormSelectOption\n            value=\"\"\n            key=\"placeholder\"\n            label={t(\"select_cloud_provider\")}\n          />,\n          providers.map(({ id, displayName }, index) => {\n            return (\n              <FormSelectOption key={index} value={id} label={displayName} />\n            );\n          }),\n        ]}\n      </FormSelect>\n    </>\n  );\n};\n\nconst tiles: { [id in CloudProvider]: JSX.Element } = {\n  aws: <AWSLogo />,\n  gcp: <GCPLogo />,\n  azure: <AzureLogo />,\n};\n","import type { SelectProps } from \"@patternfly/react-core\";\nimport { Select, SelectOption, SelectVariant } from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { FunctionComponent } from \"react\";\nimport { useState } from \"react\";\nimport type { CloudRegion } from \"ui-models/src/models/kafka\";\nimport type { RegionInfo } from \"../types\";\n\nexport type CloudRegionProps = {\n  value: CloudRegion | undefined;\n  regions: RegionInfo[] | undefined;\n  isDisabled: boolean;\n  isSizeUnavailable: boolean;\n  onChange: (region: string) => void;\n  validated?: SelectProps[\"validated\"];\n  placeholderText: SelectProps[\"placeholderText\"];\n};\n\nexport const CloudRegionSelect: FunctionComponent<CloudRegionProps> = ({\n  value,\n  regions,\n  isDisabled,\n  isSizeUnavailable,\n  validated,\n  onChange,\n  placeholderText,\n}) => {\n  const { t } = useTranslation();\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  const onToggle = (isOpen: boolean) => {\n    setIsOpen(isOpen);\n  };\n\n  const onSelect: SelectProps[\"onSelect\"] = (_, value) => {\n    setIsOpen((prevState) => !prevState);\n    onChange(value as string);\n  };\n\n  const makeRegionOptions = regions?.map(\n    ({ id, displayName, isDisabled }, index) => (\n      <SelectOption\n        isDisabled={isDisabled}\n        disabled={isDisabled}\n        key={index}\n        value={id}\n        description={\n          isDisabled\n            ? t(\"create-kafka-instance:temporarily_unavailable\")\n            : undefined\n        }\n      >\n        {displayName}\n      </SelectOption>\n    )\n  );\n\n  return (\n    <Select\n      id=\"form-cloud-region-option\"\n      toggleId=\"form-cloud-region-option\"\n      name=\"form-cloud-region-option\"\n      variant={SelectVariant.single}\n      onToggle={onToggle}\n      onSelect={onSelect}\n      validated={validated}\n      selections={value}\n      isOpen={isOpen}\n      isDisabled={isDisabled}\n      aria-describedby={\n        isSizeUnavailable\n          ? \"instance-size-unavailable\"\n          : \"form-cloud-region-option\"\n      }\n      placeholderText={placeholderText}\n    >\n      {makeRegionOptions}\n    </Select>\n  );\n};\n","import {\n  FormGroup,\n  ToggleGroup,\n  ToggleGroupItem,\n  Tooltip,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport type { AZ } from \"ui-models/src/models/kafka\";\n\nexport type FieldAZProps = {\n  value: AZ | undefined;\n  validity: \"valid\" | \"required\";\n  options: AZ | \"all\";\n  isDisabled: boolean;\n  onChange: (value: AZ) => void;\n};\nexport const FieldAZ: VoidFunctionComponent<FieldAZProps> = ({\n  value,\n  options,\n  validity,\n  isDisabled,\n  onChange,\n}) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n  const validated = validity !== \"valid\" ? \"error\" : \"default\";\n  const disableAZTooltip = options === \"all\" || isDisabled;\n  const enabledZone = options === \"multi\" ? \"multi\" : \"single\";\n  const trigger = disableAZTooltip ? \"manual\" : undefined;\n  return (\n    <FormGroup\n      label={t(\"availability_zones\")}\n      fieldId=\"availability-zones\"\n      validated={validated}\n      helperTextInvalid={t(\"common:required\")}\n      data-testid={\"az\"}\n    >\n      <ToggleGroup aria-label={t(\"availability_zone_selection\")}>\n        <Tooltip\n          content={t(\"availability_zones_tooltip_message\", {\n            enabledZone,\n          })}\n          trigger={trigger}\n        >\n          <ToggleGroupItem\n            text={t(\"az.single\")}\n            value={\"single\"}\n            isDisabled={isDisabled || options === \"multi\"}\n            buttonId=\"single\"\n            isSelected={value === \"single\"}\n            onChange={() => onChange(\"single\")}\n          />\n        </Tooltip>\n\n        <Tooltip\n          trigger={trigger}\n          content={t(\"availability_zones_tooltip_message\", {\n            enabledZone,\n          })}\n        >\n          <ToggleGroupItem\n            text={t(\"az.multi\")}\n            value=\"multi\"\n            buttonId=\"multi\"\n            isDisabled={isDisabled || options === \"single\"}\n            isSelected={value === \"multi\"}\n            onChange={() => onChange(\"multi\")}\n          />\n        </Tooltip>\n      </ToggleGroup>\n    </FormGroup>\n  );\n};\n","import { FormGroup } from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { BillingHelpProps } from \"./BillingHelp\";\nimport { BillingHelp } from \"./BillingHelp\";\nimport type { BillingTilesProps } from \"./BillingTiles\";\nimport { BillingTiles } from \"./BillingTiles\";\n\nexport type FieldBillingTilesProps = {\n  isValid: boolean;\n  billingType: BillingHelpProps[\"type\"];\n  subscriptionOptionsHref: BillingHelpProps[\"subscriptionOptionsHref\"];\n} & Omit<BillingTilesProps, \"validated\">;\nexport const FieldBillingTiles: VoidFunctionComponent<\n  FieldBillingTilesProps\n> = ({\n  value,\n  hasPrepaid,\n  subscriptions,\n  isPrepaidOverQuota,\n  prepaidQuota,\n  isMarketplaceOverQuota,\n  marketplaceQuota,\n  onPrepaid,\n  onSubscription,\n  isValid,\n  billingType,\n  subscriptionOptionsHref,\n}) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n\n  const validated = !isValid ? \"error\" : \"default\";\n\n  return (\n    <FormGroup\n      label={\n        <>\n          {t(\"billing.field_label\")}{\" \"}\n          <BillingHelp\n            type={billingType}\n            subscriptionOptionsHref={subscriptionOptionsHref}\n          />\n        </>\n      }\n      fieldId=\"form-billing-option\"\n      validated={validated}\n      helperTextInvalid={\n        isPrepaidOverQuota || isMarketplaceOverQuota\n          ? \" \"\n          : t(\"common:required\")\n      }\n      isRequired\n    >\n      <BillingTiles\n        value={value}\n        hasPrepaid={hasPrepaid}\n        subscriptions={subscriptions}\n        isPrepaidOverQuota={isPrepaidOverQuota}\n        prepaidQuota={prepaidQuota}\n        isMarketplaceOverQuota={isMarketplaceOverQuota}\n        marketplaceQuota={marketplaceQuota}\n        onPrepaid={onPrepaid}\n        onSubscription={onSubscription}\n        validated={validated}\n      />\n    </FormGroup>\n  );\n};\n","import { FormGroup } from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { CloudProvidersTilesProps } from \"./CloudProviderTiles\";\nimport { CloudProvidersTiles } from \"./CloudProviderTiles\";\n\nexport type FieldCloudProviderProps = {\n  isValid: boolean;\n} & Omit<CloudProvidersTilesProps, \"validated\">;\nexport const FieldCloudProvider: VoidFunctionComponent<\n  FieldCloudProviderProps\n> = ({ value, providers, onChange, isDisabled, isValid }) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n\n  const validated = !isValid ? \"error\" : \"default\";\n\n  return (\n    <FormGroup\n      label={t(\"cloud_provider\")}\n      fieldId=\"form-cloud-provider-option\"\n      validated={validated}\n      helperTextInvalid={t(\"common:required\")}\n      isRequired\n    >\n      <CloudProvidersTiles\n        providers={providers}\n        value={value}\n        onChange={onChange}\n        isDisabled={isDisabled}\n        validated={validated}\n      />\n    </FormGroup>\n  );\n};\n","import { FormGroup, HelperText, HelperTextItem } from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { CloudRegionProps } from \"./CloudRegionsSelect\";\nimport { CloudRegionSelect } from \"./CloudRegionsSelect\";\n\nexport type FieldCloudRegionProps = {\n  validity: \"valid\" | \"region-unavailable\" | \"required\";\n} & Omit<CloudRegionProps, \"validated\" | \"placeholderText\">;\nexport const FieldCloudRegion: VoidFunctionComponent<FieldCloudRegionProps> = ({\n  value,\n  regions,\n  onChange,\n  isDisabled,\n  isSizeUnavailable,\n  validity,\n}) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n\n  const allRegionsUnavailable = regions\n    ? regions.every(({ isDisabled }) => isDisabled === true) ||\n      regions.length === 0\n    : true;\n\n  const disableControl =\n    isDisabled || allRegionsUnavailable || regions?.length === 0;\n\n  const someRegionsUnavailable =\n    !allRegionsUnavailable &&\n    regions?.some(({ isDisabled }) => isDisabled === true);\n\n  const validation =\n    validity !== \"valid\"\n      ? value !== undefined\n        ? \"error\"\n        : \"default\"\n      : \"default\";\n\n  const placeholder =\n    allRegionsUnavailable && regions\n      ? t(\"regions_temporarily_unavailable\")\n      : t(\"select_region\");\n\n  const helperTextInvalid = isDisabled ? undefined : validity ===\n    \"region-unavailable\" ? (\n    <HelperText className={\"pf-c-form__helper-text\"}>\n      <HelperTextItem variant=\"error\" hasIcon>\n        {t(\"form_errors.region_unavailable_message\")}\n      </HelperTextItem>\n    </HelperText>\n  ) : allRegionsUnavailable ? (\n    t(\"all_region_unavailable_helper_text\")\n  ) : (\n    t(\"common:required\")\n  );\n\n  return (\n    <FormGroup\n      data-testid=\"cloudRegion\"\n      label={t(\"cloud_region\")}\n      fieldId=\"form-cloud-region-option\"\n      isRequired\n      validated={validation}\n      helperText={\n        regions && (allRegionsUnavailable || someRegionsUnavailable) ? (\n          <HelperText className={\"pf-c-form__helper-text\"}>\n            <HelperTextItem\n              variant={someRegionsUnavailable ? \"warning\" : \"error\"}\n              hasIcon\n            >\n              {someRegionsUnavailable\n                ? t(\"some_region_unavailable_helper_text\")\n                : t(\"all_region_unavailable_helper_text\")}\n            </HelperTextItem>\n          </HelperText>\n        ) : undefined\n      }\n      helperTextInvalid={helperTextInvalid}\n    >\n      <CloudRegionSelect\n        value={value}\n        regions={regions}\n        onChange={onChange}\n        isDisabled={disableControl}\n        isSizeUnavailable={isSizeUnavailable}\n        validated={validation}\n        placeholderText={placeholder}\n      />\n    </FormGroup>\n  );\n};\n","import { FormGroup, TextInput } from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\n\nexport type FieldInstanceNameProps = {\n  value: string;\n  validity: \"valid\" | \"required\" | \"taken\" | \"invalid\";\n  isDisabled: boolean;\n  onChange: (value: string) => void;\n};\nexport const FieldInstanceName: VoidFunctionComponent<\n  FieldInstanceNameProps\n> = ({ value, validity, isDisabled, onChange }) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n  const validation = validity !== \"valid\" ? \"error\" : \"default\";\n\n  return (\n    <FormGroup\n      label={t(\"instance_name\")}\n      helperText={t(\"create_instance_name_helper_text\")}\n      helperTextInvalid={\n        validity === \"taken\"\n          ? t(\"create_instance_name_helper_text_name_taken\", { name: value })\n          : validity === \"invalid\"\n          ? t(\"create_instance_name_helper_text\")\n          : t(\"common:required\")\n      }\n      isRequired\n      validated={validation}\n      fieldId=\"form-instance-name\"\n    >\n      <TextInput\n        id=\"form-instance-name\"\n        isRequired\n        validated={validation}\n        type=\"text\"\n        value={value}\n        onChange={onChange}\n        autoFocus={true}\n        isDisabled={isDisabled}\n        maxLength={32}\n      />\n    </FormGroup>\n  );\n};\n","import {\n  Alert,\n  AlertVariant,\n  HelperText,\n  HelperTextItem,\n} from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { Trans, useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { ExternalLink } from \"@rhoas/app-services-ui-components\";\n\nexport const FieldSizeHelperText: VoidFunctionComponent<{\n  remainingQuota: number | undefined;\n  isPreview: boolean;\n  isUnavailable: boolean;\n  isError: boolean;\n}> = ({ remainingQuota, isPreview, isUnavailable, isError }) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n  return (\n    <HelperText className={\"pf-c-form__helper-text\"}>\n      {remainingQuota && (\n        <HelperTextItem>\n          {t(\"standard_kafka_streaming_unit\", {\n            count: remainingQuota,\n          })}\n        </HelperTextItem>\n      )}\n\n      {isUnavailable && (\n        <Alert\n          id=\"instance-size-unavailable\"\n          aria-live=\"polite\"\n          role={\"alert\"}\n          className=\"pf-u-mb-md pf-u-mt-lg\"\n          variant={isError ? \"danger\" : \"warning\"}\n          title={t(\"size_unavailable_title\")}\n          isInline\n        >\n          {t(\"size_unavailable_message\")}\n        </Alert>\n      )}\n      {isPreview && (\n        <Alert\n          aria-live=\"polite\"\n          role={\"alert\"}\n          className={`pf-u-mb-md ${isUnavailable ? \"\" : \"pf-u-mt-lg\"}`}\n          variant={AlertVariant.info}\n          title={t(\"size_preview_title\")}\n          isInline\n        >\n          <Trans\n            ns={\"create-kafka-instance\"}\n            i18nKey={\"size_preview_message\"}\n            components={[\n              <ExternalLink\n                href={\"https://access.redhat.com/articles/6473891\"}\n                testId={\"size-preview-support-link\"}\n                className={\"pf-u-ml-xs\"}\n              />,\n            ]}\n          />\n        </Alert>\n      )}\n    </HelperText>\n  );\n};\n","import {\n  Button,\n  ButtonVariant,\n  HelperText,\n  HelperTextItem,\n} from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const FieldSizeHelperTextOverQuota: VoidFunctionComponent<{\n  remainingQuota: number;\n  onClick: () => void;\n}> = ({ remainingQuota, onClick }) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n  return (\n    <>\n      <HelperText className={\"pf-c-form__helper-text\"}>\n        <HelperTextItem variant=\"error\" hasIcon>\n          {t(\"standard_kafka_streaming_unit\", {\n            count: remainingQuota,\n          })}\n        </HelperTextItem>\n      </HelperText>\n      <HelperText>\n        <HelperTextItem>\n          <Button\n            className=\"pf-c-form__helper-text\"\n            variant={ButtonVariant.link}\n            isInline\n            onClick={onClick}\n          >\n            {t(\"standard_kafka_size_description\")}\n          </Button>\n        </HelperTextItem>\n      </HelperText>\n    </>\n  );\n};\n","import {\n  Button,\n  ButtonVariant,\n  HelperText,\n  HelperTextItem,\n} from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const FieldSizeHelperTextTrial: VoidFunctionComponent<{\n  onClick: () => void;\n}> = ({ onClick }) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n  return (\n    <>\n      <HelperText className={\"pf-c-form__helper-text\"}>\n        <HelperTextItem>{t(\"trial_kafka_size_description\")}</HelperTextItem>\n      </HelperText>\n      <HelperText>\n        <HelperTextItem>\n          <Button\n            className=\"pf-c-form__helper-text\"\n            variant={ButtonVariant.link}\n            isInline\n            onClick={onClick}\n          >\n            {t(\"learn_about_sizes\")}\n          </Button>\n        </HelperTextItem>\n      </HelperText>\n    </>\n  );\n};\n","import type { SliderProps } from \"@patternfly/react-core\";\nimport { Grid, GridItem, Skeleton, Slider } from \"@patternfly/react-core\";\nimport {\n  FormGroupWithPopover,\n  useTranslation,\n} from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport type { Size } from \"ui-models/src/models/kafka\";\nimport { FieldSizeHelperText } from \"./FieldSizeHelperText\";\nimport { FieldSizeHelperTextOverQuota } from \"./FieldSizeHelperTextOverQuota\";\nimport { FieldSizeHelperTextTrial } from \"./FieldSizeHelperTextTrial\";\n\nexport type FieldSizeProps = {\n  value: number | undefined;\n  sizes: Size[] | undefined;\n  remainingQuota: number | undefined;\n  isDisabled: boolean;\n  isLoading: boolean;\n  isError: boolean;\n  isLoadingError: boolean;\n  validity: \"valid\" | \"required\" | \"out-of-quota\" | \"developer\" | \"disabled\";\n  onChange: (size: Size) => void;\n  onLearnHowToAddStreamingUnits: () => void;\n  onLearnMoreAboutSizes: () => void;\n};\nexport const FieldSize: VoidFunctionComponent<FieldSizeProps> = ({\n  value,\n  sizes,\n  remainingQuota,\n  isDisabled,\n  isLoading,\n  isError,\n  isLoadingError,\n  validity,\n  onChange,\n  onLearnHowToAddStreamingUnits,\n  onLearnMoreAboutSizes,\n}) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n\n  const isRequired = validity !== \"developer\";\n\n  const helperTextTrial = (\n    <FieldSizeHelperTextTrial onClick={onLearnMoreAboutSizes} />\n  );\n\n  if (isLoading || isLoadingError) {\n    return (\n      <FormGroupWithPopover\n        labelHead={t(\"common:size\")}\n        fieldId=\"streaming-size\"\n        fieldLabel={t(\"common:size\")}\n        labelBody={t(\"size_help_content\")}\n        buttonAriaLabel={t(\"size_field_aria\")}\n        isRequired={isRequired}\n        helperText={\n          <Grid sm={6} lg={12} hasGutter data-testid={\"size-loading\"}>\n            <GridItem>\n              <Skeleton width={\"50%\"} fontSize={\"3xl\"} />\n            </GridItem>\n            <GridItem>\n              <Skeleton width={\"40%\"} fontSize={\"sm\"} />\n            </GridItem>\n          </Grid>\n        }\n        validated={isLoadingError ? \"error\" : \"default\"}\n        helperTextInvalid={t(\"sizes_error\")}\n      />\n    );\n  }\n\n  if (sizes === undefined) {\n    return (\n      <FormGroupWithPopover\n        labelHead={t(\"common:size\")}\n        fieldId=\"streaming-size\"\n        fieldLabel={t(\"common:size\")}\n        labelBody={t(\"size_help_content\")}\n        buttonAriaLabel={t(\"size_field_aria\")}\n        isRequired={isRequired}\n        helperText={\n          validity === \"developer\" ? helperTextTrial : t(\"sizes_missing\")\n        }\n      >\n        <div data-testid={\"size-slider\"} />\n      </FormGroupWithPopover>\n    );\n  }\n\n  const valueIndex =\n    validity !== \"developer\"\n      ? sizes.findIndex((size) => size.quota === value)\n      : -1;\n\n  const steps: SliderProps[\"customSteps\"] = sizes.map((s, index) => ({\n    value: index,\n    label: `${s.quota}`,\n  }));\n\n  const isUnavailable = sizes[valueIndex]?.isDisabled;\n\n  const helperText = (\n    <FieldSizeHelperText\n      remainingQuota={remainingQuota}\n      isPreview={sizes[valueIndex]?.status === \"preview\"}\n      isUnavailable={isUnavailable}\n      isError={isError}\n    />\n  );\n  const helperTextOverQuota = remainingQuota && (\n    <FieldSizeHelperTextOverQuota\n      remainingQuota={remainingQuota}\n      onClick={onLearnHowToAddStreamingUnits}\n    />\n  );\n\n  const handleChange = (index: number) => {\n    onChange(sizes[index]);\n  };\n\n  const validation =\n    remainingQuota &&\n    value &&\n    (validity !== \"valid\" || remainingQuota < value) &&\n    validity !== \"developer\" &&\n    isError\n      ? \"error\"\n      : \"default\";\n\n  return (\n    <FormGroupWithPopover\n      labelHead={t(\"common:size\")}\n      fieldId=\"streaming-size\"\n      fieldLabel={t(\"common:size\")}\n      labelBody={t(\"size_help_content\")}\n      buttonAriaLabel={t(\"size_field_aria\")}\n      isRequired={isRequired}\n      validated={validation}\n      helperText={validity !== \"developer\" ? helperText : helperTextTrial}\n      helperTextInvalid={\n        validity === \"out-of-quota\" ? helperTextOverQuota : helperText\n      }\n    >\n      <div className=\"pf-c-input-group pf-u-w-50\">\n        <Slider\n          id=\"streaming-size\"\n          data-testid={\"size-slider\"}\n          max={steps.length - 1}\n          value={valueIndex}\n          showTicks={true}\n          customSteps={steps}\n          className=\"pf-u-w-100\"\n          isDisabled={isDisabled || validity === \"developer\"}\n          onChange={handleChange}\n          aria-describedby={\n            isUnavailable ? \"instance-size-unavailable\" : \"streaming-size\"\n          }\n        />\n        <span className=\"pf-c-input-group__text pf-m-plain pf-u-text-nowrap\">\n          {t(\"streaming_unit\")}\n        </span>\n      </div>\n    </FormGroupWithPopover>\n  );\n};\n","import {\n  Alert,\n  AlertGroup,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n} from \"@patternfly/react-core\";\nimport { Trans, useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport type {\n  CreateDedicatedKafkaInstanceError,\n  CreateKafkaInstanceError,\n} from \"../types\";\n\nexport type FormAlertsProps = {\n  error:\n    | CreateKafkaInstanceError\n    | CreateDedicatedKafkaInstanceError\n    | \"form-invalid\"\n    | undefined;\n  onClickContactUS: () => void;\n};\n\nexport const FormAlerts: VoidFunctionComponent<FormAlertsProps> = ({\n  error,\n  onClickContactUS,\n}) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n\n  return (\n    <AlertGroup aria-live=\"assertive\">\n      {(() => {\n        switch (error) {\n          case \"form-invalid\":\n          case \"name-taken\":\n            return (\n              <Alert\n                role={\"alert\"}\n                className=\"pf-u-mb-md\"\n                variant={AlertVariant.danger}\n                title={t(\"form_errors.form_invalid\")}\n                isInline\n              />\n            );\n\n          case \"insufficient-quota\":\n            return (\n              <Alert\n                role={\"alert\"}\n                className=\"pf-u-mb-md\"\n                variant={AlertVariant.danger}\n                title={t(\"form_errors.out_of_quota_title\")}\n                isInline\n              >\n                <Trans\n                  ns={[\"create-kafka-instance\"]}\n                  i18nKey={t(\"form_errors.out_of_quota_message\")}\n                  components={[\n                    <Button\n                      key=\"btn-contact-us\"\n                      variant={ButtonVariant.link}\n                      onClick={onClickContactUS}\n                      isInline\n                    />,\n                  ]}\n                />\n              </Alert>\n            );\n          case \"developer-unavailable\":\n            return (\n              <Alert\n                role={\"alert\"}\n                className=\"pf-u-mb-md\"\n                variant={AlertVariant.danger}\n                title={t(\"form_errors.trial_unavailable_title\")}\n                isInline\n              >\n                {t(\"form_errors.trial_unavailable_message\")}\n              </Alert>\n            );\n          case \"region-unavailable\":\n            return (\n              <Alert\n                role={\"alert\"}\n                className=\"pf-u-mb-md\"\n                variant={AlertVariant.danger}\n                title={t(\"form_errors.region_unavailable_title\")}\n                isInline\n              >\n                {t(\"form_errors.region_unavailable_message\")}\n              </Alert>\n            );\n          case \"unknown\":\n            return (\n              <Alert\n                role={\"alert\"}\n                className=\"pf-u-mb-md\"\n                variant={AlertVariant.danger}\n                title={t(\"form_errors.unknown_error_title\")}\n                isInline\n              >\n                {t(\"form_errors.unknown_error_message\")}\n              </Alert>\n            );\n        }\n        return null;\n      })()}\n    </AlertGroup>\n  );\n};\n","import {\n  Button,\n  ButtonVariant,\n  Card,\n  CardBody,\n  CardTitle,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Grid,\n  GridItem,\n  Stack,\n  StackItem,\n} from \"@patternfly/react-core\";\n\nimport { ClockIcon } from \"@patternfly/react-icons\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport type { MarketplaceSubscription } from \"ui-models/src/models/kafka\";\nimport type { BillingHelpProps } from \"./BillingHelp\";\nimport { BillingHelp } from \"./BillingHelp\";\n\nexport type InstanceInfoProps = {\n  isTrial: boolean;\n  onClickQuickStart: () => void;\n\n  trialDurationInHours: number | undefined;\n  ingress: number;\n  egress: number;\n  /**\n   * Max storage in GiB\n   */\n  storage: number;\n  maxPartitions: number;\n  connections: number;\n  /**\n   * Max connections/second\n   */\n  connectionRate: number;\n  /**\n   * Message size in MiB\n   */\n  messageSize: number;\n  streamingUnits: string | undefined;\n\n  billing:\n    | ({\n        value: \"prepaid\" | \"dedicated\" | MarketplaceSubscription;\n      } & BillingHelpProps)\n    | undefined;\n};\n\nexport const InstanceInfo: VoidFunctionComponent<InstanceInfoProps> = ({\n  isTrial,\n  trialDurationInHours,\n  ingress,\n  egress,\n  storage,\n  maxPartitions,\n  connections,\n  connectionRate,\n  messageSize,\n  onClickQuickStart,\n  streamingUnits,\n  billing,\n}) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n\n  return (\n    <Stack hasGutter data-testid={\"instance-info\"}>\n      <StackItem>\n        <Card isFlat>\n          <CardTitle component=\"h2\">{t(\"instance_information\")}</CardTitle>\n          <CardBody>\n            <DescriptionList isCompact>\n              <DescriptionListGroup>\n                <Grid sm={6} lg={12} hasGutter>\n                  {!isTrial && (\n                    <GridItem data-testid={\"instance-size\"}>\n                      <DescriptionListTerm>\n                        {t(\"common:size\")}\n                      </DescriptionListTerm>\n                      <DescriptionListDescription>\n                        {t(\"stream_unit_value\", { size: streamingUnits })}\n                      </DescriptionListDescription>\n                    </GridItem>\n                  )}\n                  {isTrial && (\n                    <GridItem>\n                      <DescriptionListTerm>\n                        {t(\"kafka:duration\")}\n                      </DescriptionListTerm>\n                      <DescriptionListDescription>\n                        <ClockIcon color=\"var(--pf-global--info-color--100)\" />{\" \"}\n                        {t(\"duration_value\", {\n                          value: trialDurationInHours,\n                        })}\n                      </DescriptionListDescription>\n                    </GridItem>\n                  )}\n                  <GridItem>\n                    <DescriptionListTerm>\n                      {t(\"kafka:ingress\")}\n                    </DescriptionListTerm>\n                    <DescriptionListDescription>\n                      {t(\"ingress_value\", {\n                        value: ingress,\n                      })}\n                    </DescriptionListDescription>\n                  </GridItem>\n                  <GridItem>\n                    <DescriptionListTerm>\n                      {t(\"kafka:egress\")}\n                    </DescriptionListTerm>\n                    <DescriptionListDescription>\n                      {t(\"egress_value\", {\n                        value: egress,\n                      })}\n                    </DescriptionListDescription>\n                  </GridItem>\n                  <GridItem>\n                    <DescriptionListTerm>\n                      {t(\"kafka:storage\")}\n                    </DescriptionListTerm>\n                    <DescriptionListDescription>\n                      {t(\"storage_value\", {\n                        value: storage,\n                      })}\n                    </DescriptionListDescription>\n                  </GridItem>\n                  <GridItem>\n                    <DescriptionListTerm>\n                      {t(\"kafka:partitions\")}\n                    </DescriptionListTerm>\n                    <DescriptionListDescription>\n                      {t(\"partitions_value\", {\n                        value: maxPartitions,\n                      })}\n                    </DescriptionListDescription>\n                  </GridItem>\n                  <GridItem>\n                    <DescriptionListTerm>\n                      {t(\"kafka:client_connections\")}\n                    </DescriptionListTerm>\n                    <DescriptionListDescription>\n                      {t(\"client_connections_value\", {\n                        value: connections,\n                      })}\n                    </DescriptionListDescription>\n                  </GridItem>\n                  <GridItem>\n                    <DescriptionListTerm>\n                      {t(\"kafka:connection_rate\")}\n                    </DescriptionListTerm>\n                    <DescriptionListDescription>\n                      {t(\"connection_rate_value\", {\n                        value: connectionRate,\n                      })}\n                    </DescriptionListDescription>\n                  </GridItem>\n                  <GridItem>\n                    <DescriptionListTerm>\n                      {t(\"kafka:message_size\")}\n                    </DescriptionListTerm>\n                    <DescriptionListDescription>\n                      {t(\"message_size_value\", {\n                        value: messageSize,\n                      })}\n                    </DescriptionListDescription>\n                  </GridItem>\n                  {billing && (\n                    <GridItem>\n                      <DescriptionListTerm>\n                        {t(\"billing.field_label\")}&nbsp;\n                        <BillingHelp\n                          type={billing.type}\n                          subscriptionOptionsHref={\n                            billing.subscriptionOptionsHref\n                          }\n                        />\n                      </DescriptionListTerm>\n                      <DescriptionListDescription>\n                        {(() => {\n                          if (billing.value === \"prepaid\") {\n                            return t(\"billing.prepaid_option\");\n                          } else if (billing.value === \"dedicated\") {\n                            return t(\"billing.dedicated_option\");\n                          }\n                          switch (billing.value.marketplace) {\n                            case \"aws\":\n                              return (\n                                <>\n                                  {t(\"billing.marketplace_aws\")}\n                                  <br />\n                                  {billing.value.subscription}\n                                </>\n                              );\n                            case \"gcp\":\n                              return (\n                                <>\n                                  {t(\"billing.marketplace_gcp\")}\n                                  <br />\n                                  {billing.value.subscription}\n                                </>\n                              );\n                            case \"azure\":\n                              return (\n                                <>\n                                  {t(\"billing.marketplace_azure\")}\n                                  <br />\n                                  {billing.value.subscription}\n                                </>\n                              );\n                            case \"rhm\":\n                              return (\n                                <>\n                                  {t(\"billing.marketplace_rh\")}\n                                  <br />\n                                  {billing.value.subscription}\n                                </>\n                              );\n                          }\n                        })()}\n                      </DescriptionListDescription>\n                    </GridItem>\n                  )}\n                </Grid>\n              </DescriptionListGroup>\n            </DescriptionList>\n          </CardBody>\n        </Card>\n      </StackItem>\n      <StackItem>\n        <Card isFlat isCompact>\n          <CardTitle component=\"h2\">{t(\"quick_start_guide_title\")}</CardTitle>\n          <CardBody>\n            <Button\n              isSmall\n              isInline\n              variant={ButtonVariant.link}\n              onClick={onClickQuickStart}\n            >\n              {t(\"quick_start_guide_message_exp\")}\n            </Button>\n          </CardBody>\n        </Card>\n      </StackItem>\n    </Stack>\n  );\n};\n","import {\n  Button,\n  ButtonVariant,\n  Card,\n  CardBody,\n  CardTitle,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Grid,\n  GridItem,\n  Skeleton,\n  Stack,\n  StackItem,\n} from \"@patternfly/react-core\";\nimport { ClockIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport type InstanceInfoSkeletonProps = {\n  isTrial: boolean;\n  onClickQuickStart: () => void;\n};\n\nexport const InstanceInfoSkeleton: VoidFunctionComponent<\n  InstanceInfoSkeletonProps\n> = ({ isTrial, onClickQuickStart }) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n  return (\n    <Stack hasGutter data-testid={\"instance-info\"}>\n      <StackItem>\n        <Card isFlat>\n          <CardTitle component=\"h2\">{t(\"instance_information\")}</CardTitle>\n          <CardBody>\n            <DescriptionList isCompact>\n              <DescriptionListGroup>\n                <Grid sm={6} lg={12} hasGutter>\n                  {!isTrial && (\n                    <GridItem data-testid={\"instance-size\"}>\n                      <DescriptionListTerm>\n                        {t(\"common:size\")}\n                      </DescriptionListTerm>\n                      <DescriptionListDescription>\n                        <Skeleton\n                          width=\"35%\"\n                          screenreaderText=\"Loading contents\"\n                        />\n                      </DescriptionListDescription>\n                    </GridItem>\n                  )}\n                  {isTrial && (\n                    <GridItem>\n                      <DescriptionListTerm>\n                        {t(\"kafka:duration\")}\n                      </DescriptionListTerm>\n                      <DescriptionListDescription>\n                        <ClockIcon color=\"var(--pf-global--info-color--100)\" />{\" \"}\n                        <Skeleton\n                          width=\"35%\"\n                          screenreaderText=\"Loading contents\"\n                        />\n                      </DescriptionListDescription>\n                    </GridItem>\n                  )}\n                  <GridItem>\n                    <DescriptionListTerm>\n                      {t(\"kafka:ingress\")}\n                    </DescriptionListTerm>\n                    <DescriptionListDescription>\n                      <Skeleton width=\"75%\" />\n                    </DescriptionListDescription>\n                  </GridItem>\n                  <GridItem>\n                    <DescriptionListTerm>\n                      {t(\"kafka:egress\")}\n                    </DescriptionListTerm>\n                    <DescriptionListDescription>\n                      <Skeleton width=\"66%\" />\n                    </DescriptionListDescription>\n                  </GridItem>\n                  <GridItem>\n                    <DescriptionListTerm>\n                      {t(\"kafka:storage\")}\n                    </DescriptionListTerm>\n                    <DescriptionListDescription>\n                      <Skeleton width=\"66%\" />\n                    </DescriptionListDescription>\n                  </GridItem>\n                  <GridItem>\n                    <DescriptionListTerm>\n                      {t(\"kafka:partitions\")}\n                    </DescriptionListTerm>\n                    <DescriptionListDescription>\n                      <Skeleton width=\"50%\" />\n                    </DescriptionListDescription>\n                  </GridItem>\n                  <GridItem>\n                    <DescriptionListTerm>\n                      {t(\"kafka:client_connections\")}\n                    </DescriptionListTerm>\n                    <DescriptionListDescription>\n                      <Skeleton width=\"33%\" />\n                    </DescriptionListDescription>\n                  </GridItem>\n                  <GridItem>\n                    <DescriptionListTerm>\n                      {t(\"kafka:connection_rate\")}\n                    </DescriptionListTerm>\n                    <DescriptionListDescription>\n                      <Skeleton width=\"25%\" />\n                    </DescriptionListDescription>\n                  </GridItem>\n                  <GridItem>\n                    <DescriptionListTerm>\n                      {t(\"kafka:message_size\")}\n                    </DescriptionListTerm>\n                    <DescriptionListDescription>\n                      <Skeleton width=\"55%\" />\n                    </DescriptionListDescription>\n                  </GridItem>\n                </Grid>\n              </DescriptionListGroup>\n            </DescriptionList>\n          </CardBody>\n        </Card>\n      </StackItem>\n      <StackItem>\n        <Card isFlat isCompact>\n          <CardTitle component=\"h2\">{t(\"quick_start_guide_title\")}</CardTitle>\n          <CardBody>\n            <Button\n              isSmall\n              isInline\n              variant={ButtonVariant.link}\n              onClick={onClickQuickStart}\n            >\n              {t(\"quick_start_guide_message_exp\")}\n            </Button>\n          </CardBody>\n        </Card>\n      </StackItem>\n    </Stack>\n  );\n};\n","import { Alert, AlertVariant, Spinner } from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const ModalAlertsLoading: VoidFunctionComponent = () => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n\n  return (\n    <Alert\n      role={\"alert\"}\n      className=\"pf-u-mb-md\"\n      variant={AlertVariant.info}\n      title={t(\"checking_instance_title\")}\n      isInline\n      customIcon={\n        <Spinner size=\"md\" aria-valuetext={t(\"checking_instance_message\")} />\n      }\n    />\n  );\n};\n","import {\n  Alert,\n  AlertGroup,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n} from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { Trans, useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { StandardPlanAvailability } from \"../types\";\n\nexport type ModalAlertsStandardPlanProps = {\n  instanceAvailability: StandardPlanAvailability;\n  onClickContactUs: () => void;\n};\n\nexport const ModalAlertsStandardPlan: VoidFunctionComponent<\n  ModalAlertsStandardPlanProps\n> = ({ instanceAvailability, onClickContactUs }) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n\n  return (\n    <AlertGroup>\n      {(() => {\n        switch (instanceAvailability) {\n          case \"out-of-quota\":\n            return (\n              <Alert\n                role={\"alert\"}\n                className=\"pf-u-mb-md\"\n                variant={AlertVariant.warning}\n                title={t(\"modal_alerts.out_of_quota_title\")}\n                isInline\n              >\n                <Trans\n                  ns={[\"create-kafka-instance\"]}\n                  i18nKey={t(\"modal_alerts.out_of_quota_message\")}\n                  components={[\n                    <Button\n                      key=\"btn-contact-us\"\n                      variant={ButtonVariant.link}\n                      onClick={onClickContactUs}\n                      isInline\n                    />,\n                  ]}\n                />\n              </Alert>\n            );\n          case \"regions-unavailable\":\n            return (\n              <Alert\n                role={\"alert\"}\n                className=\"pf-u-mb-md\"\n                variant={AlertVariant.warning}\n                title={t(\"modal_alerts.instance_unavailable_title\")}\n                isInline\n              >\n                {t(\"modal_alerts.regions_unavailable_message\")}\n              </Alert>\n            );\n          case \"instance-unavailable\":\n            return (\n              <Alert\n                role={\"alert\"}\n                className=\"pf-u-mb-md\"\n                variant={AlertVariant.warning}\n                title={t(\"modal_alerts.instance_unavailable_title\")}\n                isInline\n              >\n                {t(\"modal_alerts.instance_unavailable_message\")}\n              </Alert>\n            );\n          case \"available\":\n            return null;\n        }\n      })()}\n    </AlertGroup>\n  );\n};\n","import {\n  Alert,\n  AlertGroup,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n} from \"@patternfly/react-core\";\nimport { Trans, useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport type { DedicatedPlanAvailability } from \"../types\";\n\nexport type ModalAlertsDedicatedPlanProps = {\n  instanceAvailability: DedicatedPlanAvailability;\n  onClickContactUs: () => void;\n};\n\nexport const ModalAlertsDedicatedPlan: VoidFunctionComponent<\n  ModalAlertsDedicatedPlanProps\n> = ({ instanceAvailability, onClickContactUs }) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n\n  return (\n    <AlertGroup>\n      {(() => {\n        switch (instanceAvailability) {\n          case \"out-of-quota\":\n            return (\n              <Alert\n                role={\"alert\"}\n                className=\"pf-u-mb-md\"\n                variant={AlertVariant.warning}\n                title={t(\"modal_alerts.out_of_quota_title\")}\n                isInline\n              >\n                <Trans\n                  ns={[\"create-kafka-instance\"]}\n                  i18nKey={t(\"modal_alerts.out_of_quota_message\")}\n                  components={[\n                    <Button\n                      key=\"btn-contact-us\"\n                      variant={ButtonVariant.link}\n                      onClick={onClickContactUs}\n                      isInline\n                    />,\n                  ]}\n                />\n              </Alert>\n            );\n          case \"clusters-unavailable\":\n            return (\n              <Alert\n                role={\"alert\"}\n                className=\"pf-u-mb-md\"\n                variant={AlertVariant.warning}\n                title={t(\"modal_alerts.cluster_unavailable_title\")}\n                isInline\n              >\n                {t(\"modal_alerts.cluster_unavailable_message\")}\n              </Alert>\n            );\n          case \"available\":\n            return null;\n        }\n      })()}\n    </AlertGroup>\n  );\n};\n","import { Alert, AlertVariant } from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const ModalAlertsSystemUnavailable: VoidFunctionComponent = () => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n\n  return (\n    <Alert\n      role={\"alert\"}\n      className=\"pf-u-mb-md\"\n      variant={AlertVariant.warning}\n      title={t(\"modal_alerts.system_unavailable_title\")}\n      isInline\n    >\n      {t(\"modal_alerts.system_unavailable_message\")}\n    </Alert>\n  );\n};\n","import {\n  Alert,\n  AlertGroup,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Spinner,\n} from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { Trans, useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { TrialPlanAvailability } from \"../types\";\n\nexport type ModalAlertsTrialPlanProps = {\n  instanceAvailability: TrialPlanAvailability;\n  trialDurationInHours: number | undefined;\n  onClickKafkaOverview: () => void;\n};\n\nexport const ModalAlertsTrialPlan: VoidFunctionComponent<\n  ModalAlertsTrialPlanProps\n> = ({ instanceAvailability, trialDurationInHours, onClickKafkaOverview }) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n\n  return (\n    <AlertGroup>\n      {(() => {\n        switch (instanceAvailability) {\n          case \"unavailable\":\n            return (\n              <Alert\n                role={\"alert\"}\n                className=\"pf-u-mb-md\"\n                variant={AlertVariant.warning}\n                title={t(\"modal_alerts.trial_unavailable_title\")}\n                isInline\n              >\n                {t(\"modal_alerts.trial_unavailable_message\")}\n              </Alert>\n            );\n          case \"used\":\n            return (\n              <Alert\n                role={\"alert\"}\n                className=\"pf-u-mb-md\"\n                variant={AlertVariant.warning}\n                title={t(\"modal_alerts.trial_used_title\")}\n                isInline\n              >\n                <Trans\n                  ns={[\"create-kafka-instance\"]}\n                  i18nKey={t(\"modal_alerts.trial_used_message\")}\n                  components={[\n                    <Button\n                      key=\"btn-overview\"\n                      variant={ButtonVariant.link}\n                      onClick={onClickKafkaOverview}\n                      isInline\n                    />,\n                  ]}\n                />\n              </Alert>\n            );\n          case \"available\":\n            return (\n              <Alert\n                role={\"alert\"}\n                className=\"pf-u-mb-md\"\n                variant={AlertVariant.info}\n                title={t(\"modal_alerts.trial_available_title\")}\n                isInline\n              >\n                <Trans\n                  ns={[\"create-kafka-instance\"]}\n                  i18nKey=\"modal_alerts.trial_available_message\"\n                  components={[\n                    <Button\n                      key=\"btn-pricing-purchasing\"\n                      variant={ButtonVariant.link}\n                      onClick={onClickKafkaOverview}\n                      isInline\n                    />,\n                    trialDurationInHours ? <></> : <Spinner size={\"sm\"} />,\n                  ]}\n                  values={{\n                    time: trialDurationInHours,\n                  }}\n                />\n              </Alert>\n            );\n        }\n      })()}\n    </AlertGroup>\n  );\n};\n","import { Flex, FlexItem, Form } from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport type { FieldSizeProps } from \"./components\";\nimport {\n  FieldAZ,\n  FieldCloudProvider,\n  FieldCloudRegion,\n  FieldInstanceName,\n  FieldSize,\n  InstanceInfoSkeleton,\n} from \"./components\";\n\nexport type LoadingFormProps = {\n  onLearnHowToAddStreamingUnits: () => void;\n  onLearnMoreAboutSizes: () => void;\n  onClickQuickStart: () => void;\n};\n\nexport const LoadingForm: VoidFunctionComponent<LoadingFormProps> = ({\n  onLearnHowToAddStreamingUnits,\n  onLearnMoreAboutSizes,\n  onClickQuickStart,\n}) => {\n  return (\n    <>\n      <Flex\n        direction={{ default: \"column\", lg: \"row\" }}\n        alignItems={{ lg: \"alignItemsFlexStart\" }}\n      >\n        <FlexItem flex={{ default: \"flex_2\" }}>\n          <Form onSubmit={() => false}>\n            <DisabledFieldInstanceName />\n            <DisabledFieldCloudProvider />\n            <DisabledFieldCloudRegion />\n            <DisabledFieldAZ />\n            <DisabledFieldSize\n              onLearnHowToAddStreamingUnits={onLearnHowToAddStreamingUnits}\n              onLearnMoreAboutSizes={onLearnMoreAboutSizes}\n            />\n          </Form>\n        </FlexItem>\n        <FlexItem\n          flex={{ default: \"flex_1\" }}\n          className=\"mas--CreateKafkaInstance__sidebar\"\n        >\n          <InstanceInfoSkeleton\n            isTrial={false}\n            onClickQuickStart={onClickQuickStart}\n          />\n        </FlexItem>\n      </Flex>\n    </>\n  );\n};\n\nexport const DisabledFieldInstanceName: VoidFunctionComponent = () => {\n  return (\n    <FieldInstanceName\n      value={\"\"}\n      validity={\"valid\"}\n      isDisabled={true}\n      onChange={() => false}\n    />\n  );\n};\n\nexport const DisabledFieldCloudProvider: VoidFunctionComponent = () => {\n  return (\n    <FieldCloudProvider\n      isValid={true}\n      providers={[]}\n      value={undefined}\n      isDisabled={true}\n      onChange={() => false}\n    />\n  );\n};\n\nexport const DisabledFieldCloudRegion: VoidFunctionComponent = () => {\n  return (\n    <FieldCloudRegion\n      validity={\"valid\"}\n      regions={undefined}\n      value={undefined}\n      isDisabled={true}\n      isSizeUnavailable={false}\n      onChange={() => false}\n    />\n  );\n};\n\nexport const DisabledFieldAZ: VoidFunctionComponent = () => {\n  return (\n    <FieldAZ\n      validity={\"valid\"}\n      options={\"multi\"}\n      value={\"multi\"}\n      isDisabled={true}\n      onChange={() => false}\n    />\n  );\n};\n\nexport const DisabledFieldSize: VoidFunctionComponent<\n  Pick<\n    FieldSizeProps,\n    \"onLearnHowToAddStreamingUnits\" | \"onLearnMoreAboutSizes\"\n  >\n> = ({ onLearnHowToAddStreamingUnits, onLearnMoreAboutSizes }) => {\n  return (\n    <FieldSize\n      value={1}\n      sizes={undefined}\n      //TODO remainingQuota={capabilities.remainingQuota || 0}\n      remainingQuota={0}\n      isDisabled={true}\n      isLoading={true}\n      isError={false}\n      isLoadingError={false}\n      validity={\"disabled\"}\n      onChange={() => false}\n      onLearnHowToAddStreamingUnits={onLearnHowToAddStreamingUnits}\n      onLearnMoreAboutSizes={onLearnMoreAboutSizes}\n    />\n  );\n};\n","import { DedicatedCluster } from \"ui-models/src/models/dedicated-cluster\";\nimport { MarketplaceSubscription, Size } from \"ui-models/src/models/kafka\";\nimport { assign, createMachine, send, sendParent } from \"xstate\";\nimport {\n  CreateDedicatedKafkaFormData,\n  CreateDedicatedKafkaInstanceError,\n  DedicatedPlanInitializationData,\n  StandardSizes,\n} from \"../types\";\n\nexport type DedicatedPlanMachineContext = {\n  // initial data coming from the APIs\n  capabilities: DedicatedPlanInitializationData;\n\n  // what the user is selecting\n  form: {\n    name?: string;\n    cluster?: DedicatedCluster;\n    size?: Size;\n    billing?: \"prepaid\";\n  };\n\n  sizes: StandardSizes | undefined;\n\n  creationError: CreateDedicatedKafkaInstanceError | undefined;\n};\n\nexport const DedicatedPlanMachine =\n  /** @xstate-layout N4IgpgJg5mDOIC5SwC4EMB2E0CcIAUAbTAWTQGMALASwzADoA3MHagMwE8BBRta4gEb9qKDgGJEoAA4B7WCOoyMkkAA9EAZgAcARnoBOfQAYdOrQHYArABYNAJnMAaEB0Q6j++reuXL5k3bWWpY65gC+Yc6omNh4RKQUNHT05Eps1FAArqwYUPTRKJmwYuQ4YGgoYCqy8iiKykhqmjp29OYW5hpGQYG+zq4Ilvoa9KZGlh4a5joAbPqBEVHoWLgExBhkVLQMqRjpWTl5bDI4ALZMaITUEGLpYIQQAJIYvFcQ1XIKSirqCKGG9Ds+ksU1m5n0M2s1n0-UQdgmllGdjsOj8QJm7ihixA0RWcXWmySOzSGWytCOJ3Or2uYlgmQEpxEH1q9R+bmMnnMnRR9n8di0RjssIQ-MFo2sgQ81lCGjm2NxsTWCS2yV2+zJuXoxzO+TQjHJJTKFTAAGVMuRyHB4I0al8GqBfoEZlp6FpISYdBp7PprFZhaK9JDAuDproQfLlor4htEtsUiSDuStZTdfrcobypUAKI4HAnZl2tkinn0WVTFFQrS+mb+jEzehzMz84btazjCMxVbRwlxtWkw7Js63aj3J4vS7XAt1b6NR0+etaWXzPmQmsuOGmRGWfmWRchbctGYdvFKmMq4l7ftJu4PWD0DBoU4ManYSoSG2faf2poIIL15GmDo+iLkBdhGOYa4DLMUKjKCljOkYbrDFox5RgSsaqgmGpHCOt73o+YAZsaU6srObj2F45gSn4UIaDY7QaMKMouohVgzNuHhgRoOioV26HnvGl6JpqN4QHeD5PmIElgAAwpQmAwCRM4OuRrS+tRVG2PRi5MexrSojM9iIW2VgSrx+LKkSgnqgOol3lIeb6hALAXG8xrvtIn6kSpgxAm00IosiEEzDMTjriKHj1hMEIoqE1iGeYdjmaePaYUJ2FarhYn0A5MhOSwRGVEp36-J6alUfCml0b6Onhci8UGJxnoSuBGj6Ml3YYReNnXll9mOdcBW5flOByQpVQfiyyk-mVlEabR2mMXVUr0EYgo+qGQHtJYHX8VZfbCTho53mUUD1K51zucVRYHl4hg6EEPisdYTHwkYgLDNKRjsSF0I7ZEOKRnxlm9lhtl9fQp31IVE2eVNJWqXNlULTVS1QXR5iAqidgzCYApui0u0g2lPUiRDUNKGIw2DaN8m5LDIC2l+RazepyNaajTFdJ4OM8hBnRejxAMKsDZ77WDvXHZDYBnZTFMYGN9PXWRfwUWzNEcwxTEGaWvgWA9Gg+P41hE2LoPpeDUvyAAXs+E6voRys+b6gbcW7czQu4tUDA44KrZCsogfyXqm6l3VXmTVvULb9CEDIaAQAaEBKAwtCMDIADWDAixZZskxHR14TbDBxwn5IIGnMjkBU9QANpGAAuk7P6gvQNi6HY2gPVCwr2HRbS6PoVG7lYQyh111kF5lUcx6XifpiweY4DlxAoNq5w5ylE8HRldn5NHJfx-PUAVy8Vc10o9dN5NhYq9uLqBMiwEWBKneWL3vKrSEiHDOBILDOPASO9LZFwPjDZujpQq6wAuxYwoEpj+n-qMT0254KG3ig9QB4sLaS1AbbKmA1nK03GhAtwi4sYeisPMQw9hay4wML6RKhhvrgiFksTsucw6T0OtPPBhF5aK0UjfZmKtcYuh9GBQwGIUS1kNgYT6Ewfqd26Fg82pNC7ZWLrSA+giGZM28j+KiLopjbkhPrcCuhaweGgT4Ux-hZj-XYSeTqQCJaRz4WIIQhAri5F0aQ388E26NnYuCZcEEXp1VxpjAmVYqKsOBEeYWQNOHbzcRou8XifF5BfFdYRBjfjbhGFoAUZjZjLj8L3YpmM1pWHCZVGYONVH5x4XvTJSYlCEA4GaAQsBSjUCkF+YosB7hgHICgbpvTWADIMfo6apU1rWDaO6EKa0goNMqfoPQ-gbC4x9MBQUGgmnhxaRDNpmoHJgCkHwCAXAsATL6dMpQQyRljPuVMkRcNb4+UPIiYpQI9y7ngsBYU3hFlrU9GYjwIRwhJI4VvVxOD3HZTOXkC5Vzri3IgG8-pgzaQvJQPgMo6L3h5LmW4IwUxXS7i9L4KwswtAgr7m3FEQxEq6EhEc7hu9Tn8CyQQvKNM-GkoRqres3FURxPsMiIEvdAUD0XIhHG8VEKOMBnClx2D1G8LEmIZOyQCjZ2SfCzVU87L+NmOMNo7hxjlgaYbd+kT+6aWCG-XcSrOXAKTinfI6BKg+vVXtNRBd-H8hxq6aUxtfQmCkf6WU9YWhgUqiETEEQAYYBkM5a0yAjUarjMwVgnAeB8EEMIUQ-iQjhtCm1WUEofTjGFFYAw3oQj2p9NRTleUWAAEVMgyHQP4gUIxOLQh8FoX2DLwoJtLI9cFWg63TESU4tCxNU4YFxJaAAqg+Xg-A0ACEIHoryZKEBcnep0NtwQuTSIdT7ClrpQoonmC0XQa1F1qucYG5I8tYBbr1MWvdB7-FckWdCYpD1+RujHTCOqVZSwB3GMiRcwxZgerSf6wod5MhrvpIyFAlQSWfI+TNRCpY2pVhCI+jmwohg8zilRA2Y7fSocRXkAoRR8g4ZEPh-x84DBmGlPjLko8IkDAXatLoi54Sd3hPBZjWq2NZsZkekVsGvTAR8C0ICVHwoTBdKYUKLbkSsQhHJ01KY0723NeCRZnpNkmFCqEMdsaUSrWYd0LkgcTOwo-SurltkUwvis8BUY4EMQ-3cA9G9cJcYjFCmtYIQRhhzEOd55dedjm7xTLAPU5IQ0oIbBYDw4x5wojCj7Kw+lZScV8PCT0pmWlZb1JAENCUDDhOs8CYI-pwSIgabFHGHtMGpdFlwz1IlKRWf8LBOzYJHNCmWl0Nura51uu+vV7lUtpL0DAKcAZAxCP5MQEw0YhS2xoJqhOqCiUh3OmleMCEKWl0jdSSx7V4kCL0As28c1asKoa2qlrSd4J6zdG+h0MEXoTbDZSQirVe8tuBeFSzKiDYfT0UMqYkETFNkg4Mu0aY4xFxQ6ezDk1JzNsfZyUVJHKtDYjDavMKTc6vSdyYtd-2Y6jNDEMutkB2VpLmpI+rKqi0mK+E8AbX0QJWXGCStD41Qbyd4WpkQi6Dt-HaHrMubiHmTJukghuaEXhdzPo8BCFbvPcHZRVy5L7k4affJsICbQSrDBAiHlFkUXRFluk7nReYY7nQwpJwr5pG3leEJcojg7x6Kv+yCBYEEtWuT+gep4UdpupEW-l7msPfP+oCqIYLl0wuUaA9vdYta8xDJei6EYy3SKToy3OlTw98MixTBdKFAWLQbBlTK+RO9gR+NfW4vFFCOfP0Zfz9LWWGBPvjm+w7maExkG8lCCCQUtimLSkRPSl3zokNDZD7n6fVum9z7V0BxbDnBQNOdEBSEXMh8CahO4MfzoG-pNnzM5TLMhd-Yi6cyTrgR6CygoiJ7BAhQhRf5vb7wxyt4a7tANidD6bDwPrzY+wOYNiBCc4hTNiPbvppajZoZ7zFyfYQCAbL6lQUQgiGygFuztDwjdYQjiZQiigZ5vqbyn5+bn7wEMCJzZb7rNbUGIAdBeC6DcRVheiSGYFwjAh6DAgmCKJWDaA+CwFkEHz0AADufAdQuQAAYicD2n2mgD9q0HQVMLyNMDjAguFDSnoOMF7L-KoQApPr5mNt-uQZ2jgCYf2qIarBYZDgwZ6EwZ7l0HeozoqkEBYhPiflPrwY3vwVfgEZspyPZohuxN6HIQgBJmAdIdtA5tCMHkQc9rDqahDOQYvPmAEbNJYdyFyIeHYQMM2qtG2GVDaozhoZUVoXPLlgERBLFtoPfAKFCEMCJs0MMG0IlNuCGIuJ-u4elokV4QfMXktl6A0TYQlP6D4DZkBH3uBMPKqtwQkZ4XASimrsRLUdoI1J0IZBSn4HAuEZIf5C1O4EMJ3GwqUaToruHsirykmOmiaPivUAAEpgAACOmQ1AZQBGSm7eKs+WEw6+OuVe4RChro1mI6iE0a3RUsFxHSXS9IkyOK9Qd4ducJsyKmKOFiEq0wPQNglSwQowwQ0EYE-GcR3xoeZ+SRBJGAnS2Kjya6KRMeIqkWmMf4-IwOdqD0vcGJ0IkObq7Q4wXBOapxpBPK3i7S-JRJPSDygyA6q+tJfg9JY6jJ9hFUWMkIoQDEDSnJJxHhGp+JAJ5yRK1ymKgpgy22u2ZaARFgIw8IxgGmFKDgoQjKoQq0AQ9qjmwIeJeEFxaK7pdyxJ+pZJHGep7yv+CJ3yfIXgtmfeW0Y6l2iAb+Yq7QAo2y7g8IcZ-xWprplySZWKKZmZTyOUbp9uopRYzCroHgi4i4dKesIKtg6egoxSJSbU0wNZGSLpqK7ZNyyZGZpJTyA6RugZ3Q386+A+v4qIQ6r8hsVZvIU59AKK5qpgbcIZ0wqJUKsqa0bQPo7EFiEoKGixJBr2ZqfpIGgBZe3siAhgxizoY+-Ib+xSX+-i9Cam5GmmPo1UjKe+iGypYEVYJgnK2WzAlJf+Ks-yUUmyJp9Bl5saQwDYJgTCa0Y+boRyIa0S8U56NaQIZ2ORrQwwaR3oNewEz5EQQAA */\n  createMachine(\n    {\n      context: {\n        capabilities: {} as DedicatedPlanInitializationData,\n        sizes: undefined,\n        form: {},\n        creationError: undefined,\n      },\n      tsTypes: {} as import(\"./DedicatedPlanMachine.typegen\").Typegen0,\n      predictableActionArguments: true,\n      schema: {\n        context: {} as DedicatedPlanMachineContext,\n        events: {} as\n          | { type: \"fieldInvalid\" }\n          | { type: \"nameChange\"; name: string }\n          | { type: \"clusterChange\"; cluster: DedicatedCluster }\n          | { type: \"sizeChange\"; size: Size }\n          | {\n              type: \"selectSubscription\";\n              subscription: MarketplaceSubscription;\n            }\n          | { type: \"selectPrepaid\" }\n          | { type: \"billingChange\" }\n          | { type: \"nameIsValid\" }\n          | { type: \"nameIsInvalid\" }\n          | { type: \"nameIsTaken\" }\n          | { type: \"submit\" }\n          | { type: \"create\" }\n          | { type: \"createSuccess\" }\n          | { type: \"createError\"; error: CreateDedicatedKafkaInstanceError },\n        services: {} as {\n          getSizes: {\n            data: StandardSizes;\n          };\n        },\n      },\n      initial: \"verifyAvailability\",\n      id: \"dedicatedPlanMachine\",\n      states: {\n        verifyAvailability: {\n          entry: \"setInitialContext\",\n          always: [\n            {\n              cond: \"isOverQuota\",\n              target: \"overQuota\",\n            },\n            {\n              cond: \"isClusterUnavailable\",\n              target: \"clusterUnavailable\",\n            },\n            {\n              target: \"configuring\",\n            },\n          ],\n        },\n        overQuota: {\n          tags: \"blocked\",\n        },\n        clusterUnavailable: {\n          tags: \"blocked\",\n        },\n        configuring: {\n          type: \"parallel\",\n          states: {\n            status: {\n              initial: \"unsubmitted\",\n              states: {\n                unsubmitted: {\n                  tags: \"unsubmitted\",\n                },\n                submitting: {\n                  entry: \"triggerSubmit\",\n                  always: [\"submitted\"],\n                },\n                submitted: {\n                  tags: \"submitted\",\n                },\n              },\n              on: {\n                create: {\n                  description:\n                    \"Save is enabled all the time, if it's clicked before the form is completely filled out we should show the validation for all errored fields\",\n                  target: \".submitting\",\n                },\n              },\n            },\n            form: {\n              initial: \"invalid\",\n              states: {\n                invalid: {\n                  tags: \"formInvalid\",\n                },\n                valid: {\n                  entry: \"resetCreationErrorMessage\",\n                  tags: \"creatable\",\n                  on: {\n                    fieldInvalid: {\n                      target: \"invalid\",\n                    },\n                    submit: {\n                      target: \"saving\",\n                    },\n                  },\n                },\n                saving: {\n                  entry: [\"resetCreationErrorMessage\", \"triggerSave\"],\n                  tags: \"formSaving\",\n                  on: {\n                    createSuccess: {\n                      target: \"saved\",\n                    },\n                    createError: {\n                      actions: \"setCreationError\",\n                      target: \"invalid\",\n                    },\n                  },\n                },\n                saved: {\n                  type: \"final\",\n                },\n              },\n              on: {\n                fieldInvalid: {\n                  description:\n                    \"sent by the fields when their value change to an invalid value. This will transition the form to the invalid state, to then eventually transition to the valid state if the field state is marked as done (which means that all fields have a valid value selected)\",\n                  target: \".invalid\",\n                },\n              },\n            },\n            fields: {\n              tags: \"configurable\",\n              type: \"parallel\",\n              states: {\n                name: {\n                  initial: \"validate\",\n                  states: {\n                    empty: {\n                      tags: \"nameEmpty\",\n                    },\n                    invalid: {\n                      entry: \"fieldInvalid\",\n                      tags: \"nameInvalid\",\n                    },\n                    valid: {\n                      tags: \"nameValid\",\n                      type: \"final\",\n                    },\n                    validate: {\n                      always: [\n                        {\n                          cond: \"nameIsEmpty\",\n                          target: \"empty\",\n                        },\n                        {\n                          cond: \"nameIsValid\",\n                          target: \"valid\",\n                        },\n                        {\n                          target: \"invalid\",\n                        },\n                      ],\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    nameChange: {\n                      actions: \"setName\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n                cluster: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"clusterIsValid\",\n                          target: \"valid\",\n                        },\n                        {\n                          target: \"invalid\",\n                        },\n                      ],\n                    },\n                    invalid: {\n                      entry: \"fieldInvalid\",\n                      tags: \"clusterInvalid\",\n                    },\n                    valid: {\n                      tags: \"clusterValid\",\n                      type: \"final\",\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    clusterChange: {\n                      actions: \"setCluster\",\n                      cond: \"didClusterChange\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n                size: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"noCluster\",\n                          target: \"idle\",\n                        },\n                        {\n                          cond: \"noSizes\",\n                          target: \"loading\",\n                        },\n                        {\n                          cond: \"emptySizes\",\n                          target: \"error\",\n                        },\n                        {\n                          cond: \"sizeIsDisabled\",\n                          target: \"disabled\",\n                        },\n                        {\n                          cond: \"billingRequiredButNotSelected\",\n                          target: \"waitingForQuota\",\n                        },\n                        {\n                          cond: \"sizeIsOverQuota\",\n                          target: \"overQuota\",\n                        },\n                        {\n                          target: \"valid\",\n                        },\n                      ],\n                    },\n                    idle: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeIdle\",\n                    },\n                    disabled: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeDisabled\",\n                    },\n                    waitingForQuota: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeWaitingForQuota\",\n                    },\n                    overQuota: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeOverQuota\",\n                    },\n                    valid: {\n                      tags: \"sizeValid\",\n                      type: \"final\",\n                    },\n                    error: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeError\",\n                    },\n                    loading: {\n                      description:\n                        \"Fetch the data required to show the available sizes and limits\",\n                      invoke: {\n                        src: \"getSizes\",\n                        onDone: [\n                          {\n                            actions: \"setSizes\",\n                            target: \"validate\",\n                          },\n                        ],\n                        onError: [\n                          {\n                            target: \"error\",\n                          },\n                        ],\n                      },\n                      tags: \"sizeLoading\",\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    clusterChange: {\n                      target: \".validate\",\n                    },\n                    sizeChange: {\n                      actions: \"setSize\",\n                      cond: \"didSizeChange\",\n                      target: \".validate\",\n                    },\n                    billingChange: {\n                      target: \".validate\",\n                    },\n                  },\n                },\n                billing: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          target: \"prepaidOnly\",\n                        },\n                      ],\n                    },\n                    prepaidOnly: {\n                      description:\n                        \"The user doesn't need to specify any option about the billing. The API will automatically figure out the right thing to do without giving it any information.\",\n                      tags: [\"noBilling\", \"billingValid\"],\n                      entry: \"setBillingToPrepaid\",\n                      type: \"final\",\n                    },\n                  },\n                },\n              },\n              onDone: {\n                target: \"#dedicatedPlanMachine.configuring.form.valid\",\n              },\n            },\n          },\n          onDone: {\n            target: \"saved\",\n          },\n        },\n        saved: {\n          type: \"final\",\n        },\n      },\n    },\n    {\n      actions: {\n        setInitialContext: assign((context) => {\n          return {\n            form: {\n              cluster: context.capabilities.defaultCluster,\n            },\n          };\n        }),\n        fieldInvalid: send(\"fieldInvalid\"),\n        setName: assign((context, { name }) => {\n          if (context.creationError === \"name-taken\") {\n            return {\n              form: { ...context.form, name },\n              creationError: undefined,\n            };\n          }\n          return { form: { ...context.form, name } };\n        }),\n        setCluster: assign((context, { cluster }) => {\n          return {\n            form: {\n              cluster,\n            },\n            sizes: undefined,\n          };\n        }),\n        setSize: assign((context, { size }) => ({\n          form: {\n            ...context.form,\n            size,\n          },\n        })),\n        setSizes: assign((context, event) => {\n          const sizes = event.data;\n          const smallestSize = sizes.sort((a, b) => a.quota - b.quota)[0];\n          return {\n            sizes,\n            form: {\n              ...context.form,\n              size: smallestSize,\n            },\n          };\n        }),\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        resetCreationErrorMessage: assign((_context) => ({\n          creationError: undefined,\n        })),\n        setCreationError: assign((_context, { error }) => {\n          return {\n            creationError: error,\n          };\n        }),\n        triggerSave: sendParent((context) => {\n          const form = context.form as Required<typeof context.form>;\n          const data: CreateDedicatedKafkaFormData = {\n            plan: \"dedicated\",\n            name: form.name,\n            cluster: form.cluster,\n            sizeId: form.size.id,\n            billing: \"dedicated\",\n          };\n          return {\n            type: \"save\",\n            data,\n          };\n        }),\n        triggerSubmit: send(\"submit\"),\n        setBillingToPrepaid: assign((context) => {\n          const form = { ...context.form };\n          form.billing = \"prepaid\";\n          return { form };\n        }),\n      },\n      guards: {\n        isOverQuota: ({ capabilities }) =>\n          capabilities === undefined ||\n          capabilities.instanceAvailability === \"out-of-quota\",\n        isClusterUnavailable: ({ capabilities }) =>\n          capabilities === undefined ||\n          capabilities.instanceAvailability === \"clusters-unavailable\",\n        nameIsEmpty: ({ form }) =>\n          form.name === undefined || form.name.length === 0,\n        nameIsValid: ({ form }) =>\n          /^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(form.name || \"\"),\n        clusterIsValid: ({ form, capabilities }) => {\n          const selectedCluster = capabilities?.availableClusters.find(\n            (p) => p.id === form.cluster?.id\n          );\n          return (\n            // must have loaded a list of providers\n            (capabilities?.availableClusters || []).length > 0 &&\n            // must have selected a provider\n            selectedCluster !== undefined\n          );\n        },\n        noCluster: ({ form }) => form.cluster === undefined,\n        noSizes: ({ sizes }) => sizes === undefined,\n        emptySizes: ({ sizes }) => sizes !== undefined && sizes.length === 0,\n        sizeIsDisabled: ({ form, capabilities }) => {\n          if (capabilities === undefined) return true;\n          return form.size?.isDisabled === true;\n        },\n        billingRequiredButNotSelected: ({ form }, _, meta) => {\n          if (meta.state.hasTag(\"noBilling\")) {\n            return false;\n          }\n          return form.billing === undefined;\n        },\n        sizeIsOverQuota: ({ form, capabilities }) => {\n          if (capabilities === undefined || !form.size) return true;\n          const availableQuota = capabilities.remainingDedicatedQuota;\n          if (!availableQuota) return true;\n          return form.size.quota > availableQuota;\n        },\n        didClusterChange: (context, event) =>\n          context.form.cluster !== event.cluster,\n        didSizeChange: (context, event) =>\n          context.form.size?.id !== event.size.id,\n      },\n    }\n  );\n","import { DedicatedCluster } from \"ui-models/src/models/dedicated-cluster\";\nimport { assign, createMachine, EventFrom, forwardTo } from \"xstate\";\nimport type {\n  CreateDedicatedKafkaFormData,\n  CreateDedicatedKafkaInstanceError,\n  DedicatedPlanInitializationData,\n  DedicatedSizes,\n} from \"../types\";\nimport { DedicatedClustersInfo } from \"../types\";\nimport {\n  DedicatedPlanMachine,\n  DedicatedPlanMachineContext,\n} from \"./DedicatedPlanMachine\";\n\ntype Quota = Pick<\n  DedicatedPlanInitializationData,\n  \"plan\" | \"remainingDedicatedQuota\" | \"instanceAvailability\"\n>;\n\nexport type CreateDedicatedKafkaInstanceMachineContext = {\n  quota: Quota | undefined;\n  clusters: DedicatedClustersInfo | undefined;\n  defaultCluster: DedicatedCluster | undefined;\n  capabilities: DedicatedPlanInitializationData | undefined;\n};\n\nconst CreateDedicatedKafkaInstanceMachine =\n  /** @xstate-layout N4IgpgJg5mDOIC5QGMBOYCGAXMBpDAZgNYYCSAdrFhucmAHQA2A9hhAJblT0COArs2r1kACzDIinKAAIqNCBlQRp-QRgDEYVKmap6AB0bYCugLbD02PIRIU5tBizZTeAoaPGSus6uQVKVNwwETgA3ZmRsdmZyAG0ABgBdRFB9Zlh2LGjyFJAAD0QAFniAJnp4gGYAdkKATgAOeqr4qvrCgFYAGhAAT0QANir++n769tqq2sKARhKKjsKAX0XutEwcfGIySl86JlYOLlc1YTEJKR95RWVVanV7fxug6QxQjHYjACNGMFy0jKyMVyBQQxTKlRqDSaLTaXV6iHG8XoVXahX6UyqJVqJX6-WWq0sGxs23seych24twwp08Fwe10CanUzD4WGkzAIlz8DKpf3SmWywKKpXK1TqjWarQ63T6CHa8UK9Hqcw6JUK6palXxIDWVk2th2NDJBxcVJp5289ICVPU5GYXMejOoLzeHww31+SBA-wFQK9ILBoshEph0vhoPaw2hFRKasKbQa0yWKx1hOsWzsu0cJqOZqtEHUfIBgv9iCTU2RkZj03RYsjMoGyvo0yG40KJSq0wq02m9W1uqJGcNDn2zlzQXoEDAoTALH0WkLXp9gJypYQ5cVKP61drNXr4faFSRJVmdUmasjvf7af1JKzo4px3cZy8MinM7nWhd7y+H0yPU0bRdAMIwsBMVBzAHdMDVJbMx0pCcPAtN9p1nZh51Qb83U+P8sB6EJyHCSIVwSZIl35FchQQWpanaeh4y7JN5gqbFZgbOU1WRE96m3Bp+lRKoKmvdZoLvI04MfM0kNfaR3zQjCsN-Rh-3UOTP0wvhYEgItfVXUAQRouiGO7QpmNYkp2NMqolXqWZcSPCpRn6NFhL1YlM3Eh9TUQl8LjU9Cv1eH93VwgD-IUoLsJ+HTKLXQz6NskyzJPCzwwqdppnoWj4niaZ2kPepaiTaZXMHGD73JFwCDALBRAufQdFCdgp1QWB1Aa5gmpa2AXj8aR0CgbIesir5ovI4s-X0staNqegjzGcZ+hKHjeyqdj2jGcplu4moFSqKpStEjyR0qo5qtqkR6sa5qtDarQdD0QxjDMCwRNvY7jXg+hzrq7wOq626CKIqIYlImKSym9cMRsiY0RmaYFXiOFZUKfa5rqRy5mmWp4kGdpDve4dPsfH7Lr+67uvainbvZTCBqG6Q+HIEb3TG1IKIh-Jpsjeh2k7XHOw7QqWnY0Z6mbapakGNVqgR-GUygwnYK8rhVJiBg5BwV63KHZXTqgcHJq5hASlROj+lKCp6kqdUVvYq3Mr3ds0UaPLZgJ9yiY13xHSe8h6Gan57leT12YmvTjaxbd6NM+NDIVdLCkskUFmxyZt2cwYPd1+982kP36FgV4pHUKCAGU+GQOhYHgcbdKoxOjKR0p6nmYXlvt1Fyn6Lt1W7E9Jkc7Pys8vOC6LprVaggBRIDUENiOQSjioY7b+PTNRe2a152NbLy03M7y4exJHcKvwLwOwGDmcF6orFWl5i2Nt7toEYqUWpayrt5SW+z4ls4+H0GBn0wuPYuU80wVyrnAWuYd65rkbvRBUtQ6x9zaKLeMO8WhDB7PEKEtRAFe0nKhdS+cjD+wniXGec9b5rnvuLSMSNErxhmJUUWCMsrKmWngsEuJ5YpjtFOWBqY3qez1jmBCJxpJ0h9jyIItDIYI1SrKSM4tW6dmVB0TsaISoKxvGIiqEinzUnzAo42zRxYojmD3FEtk+bTFFkMZskYcS9mfiwwh4ivpmhAWYkEswGg2RwSxJosxSjrU4tjAePcEY8SKp4wx3ifK0m8CAxSIVlJ4T8QMfic1lrFVaMqeYDjwztjojxHhsYOxW1ssmAkoic6eX1sY7JCBWjsQ7LNKWjRKiLRxmieW9SdYjxOkY0mV1Oo3Vaq0msCoY7FCGOlWMsxkYIkxMiHh7RYyMPjEJPRDSRnExcJYCAso4GxUhrGQY5QMpjCSpedaExkRND5jorEFQ9lDLKifI5XBWmb3DC2TKlRGLVCxBeDoCTR49CoGAUwjNmaulGqHb0HMjYgkciiLK+UUFWRxt2VZbT1mt1GK0Fo-EOx4n2cMn53srgBAvhANmqLw53yaIqfi4xsQdnyu2d+aVqjONbmna2OJuxQpHGPchhdwEGzrhc42MZBXYwmD3CE-F+j21jCMZy8Ytxdlom0CVewpU0FacteUIwcXcpRKiOY7FsYrzBdbeMhUWJt2NcAkhAVQHSsvuaxos19rzUxelFsyiBjdhGC2UYLY4k9l0V8o6RC0lgMnnK85nMMVVPKJo2GbiirsOsrMd1uU1SWzqSImlQDiEfh9WQs18qs2IGWrk4N-9Q0ZUxJZJoSolWVBylYwqnrhDMFMIYGqKLlzNoQNUf+SomFoP2p2Ht1lcZ5Roj2IW4rqXfKAa0o87EaI3JyhtQS2Ntyo2WMsIAA */\n  createMachine(\n    {\n      context: {\n        clusters: undefined,\n        defaultCluster: undefined,\n        quota: undefined,\n        capabilities: undefined,\n      },\n      predictableActionArguments: true,\n      tsTypes:\n        {} as import(\"./CreateDedicatedKafkaInstanceMachine.typegen\").Typegen0,\n      schema: {\n        context: {} as CreateDedicatedKafkaInstanceMachineContext,\n        events: {} as\n          | {\n              type: \"dedicated quota available\";\n              quota: Pick<\n                DedicatedPlanInitializationData,\n                \"remainingDedicatedQuota\"\n              >;\n            }\n          | {\n              type: \"out of dedicated quota\";\n            }\n          | {\n              type: \"no dedicated quota available\";\n            }\n          | {\n              type: \"clusters available\";\n              clusters: DedicatedClustersInfo;\n              defaultCluster: DedicatedCluster | undefined;\n            }\n          | { type: \"clusters unavailable\" }\n          | { type: \"save\"; data: CreateDedicatedKafkaFormData }\n          | { type: \"createSuccess\" }\n          | { type: \"createError\"; error: CreateDedicatedKafkaInstanceError },\n        services: {} as {\n          checkDedicatedQuota: {\n            data: never;\n          };\n          fetchClusters: {\n            data: never;\n          };\n          dedicatedPlan: {\n            data: DedicatedPlanMachineContext;\n          };\n        },\n      },\n      id: \"createDedicatedKafkaInstance\",\n      initial: \"loading\",\n      states: {\n        loading: {\n          description: \"Fetch the data required to drive the creation flow\",\n          tags: \"loading\",\n          initial: \"quota\",\n          states: {\n            quota: {\n              initial: \"checking dedicated quota\",\n              states: {\n                \"checking dedicated quota\": {\n                  invoke: {\n                    src: \"checkDedicatedQuota\",\n                    onError: [\n                      {\n                        actions: \"setDedicatedUnavailable\",\n                        target:\n                          \"#createDedicatedKafkaInstance.system unavailable\",\n                      },\n                    ],\n                  },\n                  on: {\n                    \"dedicated quota available\": {\n                      actions: \"setDedicatedAvailable\",\n                      target: \"dedicated\",\n                    },\n                    \"out of dedicated quota\": {\n                      actions: \"setDedicatedOutOfQuota\",\n                      target: \"dedicated\",\n                    },\n                    \"no dedicated quota available\": {\n                      actions: \"setDedicatedUnavailable\",\n                      target:\n                        \"#createDedicatedKafkaInstance.system unavailable\",\n                    },\n                  },\n                },\n                dedicated: {\n                  type: \"final\",\n                  always: {\n                    target:\n                      \"#createDedicatedKafkaInstance.loading.fetching clusters\",\n                  },\n                },\n              },\n            },\n            \"fetching clusters\": {\n              invoke: {\n                src: \"fetchClusters\",\n                onError: [\n                  {\n                    actions: \"setClustersUnavailable\",\n                    target: \"ready\",\n                  },\n                ],\n              },\n              on: {\n                \"clusters available\": {\n                  actions: \"setClusters\",\n                  target: \"ready\",\n                },\n                \"clusters unavailable\": {\n                  actions: \"setClustersUnavailable\",\n                  target: \"ready\",\n                },\n              },\n            },\n            ready: {\n              type: \"final\",\n              entry: \"setCapabilities\",\n            },\n          },\n          onDone: [\n            {\n              cond: \"dedicated plan\",\n              target: \"dedicated plan\",\n            },\n            {\n              target: \"system unavailable\",\n            },\n          ],\n        },\n        \"system unavailable\": {\n          tags: \"systemUnavailable\",\n          type: \"final\",\n        },\n        \"dedicated plan\": {\n          invoke: {\n            src: \"dedicatedPlan\",\n            id: \"dedicatedPlanService\",\n          },\n          tags: \"dedicatedPlan\",\n          initial: \"idle\",\n          states: {\n            idle: {\n              on: {\n                save: {\n                  target: \"saving\",\n                },\n              },\n            },\n            saving: {\n              invoke: {\n                src: \"createInstance\",\n              },\n              tags: \"saving\",\n              on: {\n                createSuccess: {\n                  target: \"#createDedicatedKafkaInstance.complete\",\n                },\n                createError: {\n                  actions: \"notifyCreateErrorToDedicatedPlan\",\n                  target: \"idle\",\n                },\n              },\n            },\n          },\n        },\n        complete: {\n          type: \"final\",\n        },\n      },\n    },\n    {\n      actions: {\n        setDedicatedAvailable: assign((_, event) => ({\n          quota: {\n            plan: \"dedicated\" as const,\n            instanceAvailability: \"available\" as const,\n            remainingDedicatedQuota: event.quota.remainingDedicatedQuota,\n          },\n        })),\n        setDedicatedOutOfQuota: assign((_, event) => ({\n          quota: {\n            plan: \"dedicated\" as const,\n            instanceAvailability: \"out-of-quota\" as const,\n            remainingDedicatedQuota: 0,\n          },\n        })),\n        setDedicatedUnavailable: assign((_) => ({\n          quota: {\n            plan: \"dedicated\" as const,\n            instanceAvailability: \"clusters-unavailable\" as const,\n            remainingDedicatedQuota: 0,\n          },\n        })),\n        setClusters: assign((_, event) => {\n          return {\n            clusters: event.clusters,\n            defaultCluster: event.defaultCluster,\n          };\n        }),\n        setClustersUnavailable: assign((context) => {\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          const quota = context.quota!;\n          quota.instanceAvailability = \"clusters-unavailable\";\n          return {\n            providers: [],\n            quota,\n          };\n        }),\n        setCapabilities: assign((context) => {\n          const { clusters, defaultCluster, quota } = context;\n          if (!clusters || !quota || quota.plan !== \"dedicated\") {\n            throw new Error(\"unexpected condition, invalid quota\");\n          }\n          const capabilities: DedicatedPlanInitializationData = {\n            plan: \"dedicated\",\n            availableClusters: clusters,\n            defaultCluster,\n            instanceAvailability: quota.instanceAvailability,\n            remainingDedicatedQuota: quota.remainingDedicatedQuota,\n          };\n          return { capabilities };\n        }),\n        notifyCreateErrorToDedicatedPlan: forwardTo(\"dedicatedPlanService\"),\n      },\n      guards: {\n        \"dedicated plan\": (context) => context.quota?.plan === \"dedicated\",\n      },\n    }\n  );\n\ntype EventTypes = Pick<\n  EventFrom<typeof CreateDedicatedKafkaInstanceMachine>,\n  \"type\"\n>[\"type\"];\n\ntype EventOptions<E extends EventTypes> = Omit<\n  EventFrom<typeof CreateDedicatedKafkaInstanceMachine, E>,\n  \"type\"\n>;\n\nexport type CreateDedicatedKafkaInstanceServices = {\n  checkDedicatedQuota: (events: {\n    onOutOfQuota: (p: EventOptions<\"out of dedicated quota\">) => void;\n    onQuotaAvailable: (p: EventOptions<\"dedicated quota available\">) => void;\n    onNoQuotaAvailable: (\n      p: EventOptions<\"no dedicated quota available\">\n    ) => void;\n  }) => void;\n  fetchClusters: (\n    plan: \"dedicated\",\n    events: {\n      onAvailable: (p: EventOptions<\"clusters available\">) => void;\n      onUnavailable: () => void;\n    }\n  ) => void;\n  getDedicatedSizes: (cluster: DedicatedCluster) => Promise<DedicatedSizes>;\n  onCreate: (\n    data: CreateDedicatedKafkaFormData,\n    onSuccess: () => void,\n    onError: (error: CreateDedicatedKafkaInstanceError) => void\n  ) => void;\n};\n\nexport function makeCreateDedicatedKafkaInstanceMachine({\n  checkDedicatedQuota: checkDedicatedQuotaCb,\n  fetchClusters: fetchClustersCb,\n  getDedicatedSizes: getDedicatedSizesCb,\n  onCreate,\n}: CreateDedicatedKafkaInstanceServices) {\n  return CreateDedicatedKafkaInstanceMachine.withConfig({\n    services: {\n      checkDedicatedQuota: () => {\n        return (send) =>\n          checkDedicatedQuotaCb({\n            onNoQuotaAvailable: () => {\n              send({ type: \"no dedicated quota available\" });\n            },\n            onOutOfQuota: () => {\n              send({ type: \"out of dedicated quota\" });\n            },\n            onQuotaAvailable: ({ quota }) => {\n              send({ type: \"dedicated quota available\", quota });\n            },\n          });\n      },\n      fetchClusters: (context) => {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const instanceType = context.quota!.plan;\n        return (send) => {\n          fetchClustersCb(instanceType, {\n            onAvailable: ({ clusters, defaultCluster }) =>\n              send({\n                type: \"clusters available\",\n                clusters,\n                defaultCluster,\n              }),\n            onUnavailable: () => send(\"clusters unavailable\"),\n          });\n        };\n      },\n      createInstance: (_context, event) => {\n        const form = event.data;\n\n        return (send) => {\n          function onSuccess() {\n            send(\"createSuccess\");\n          }\n\n          function onError(error: CreateDedicatedKafkaInstanceError) {\n            send({ type: \"createError\", error });\n          }\n\n          onCreate(\n            {\n              plan: form.plan,\n              name: form.name,\n              cluster: form.cluster,\n              sizeId: form.sizeId,\n              billing: form.billing,\n            },\n            onSuccess,\n            onError\n          );\n        };\n      },\n      dedicatedPlan: (context) => {\n        return DedicatedPlanMachine.withContext({\n          capabilities: context.capabilities as DedicatedPlanInitializationData,\n          sizes: undefined,\n          form: {},\n          creationError: undefined,\n        }).withConfig({\n          services: {\n            getSizes: (context) => {\n              const form = context.form as Required<typeof context.form>;\n              return getDedicatedSizesCb(form.cluster);\n            },\n          },\n        });\n      },\n    },\n  });\n}\n","import { useInterpret } from \"@xstate/react\";\nimport type { FunctionComponent } from \"react\";\nimport { createContext } from \"react\";\nimport type { ActorRefFrom } from \"xstate\";\nimport type { CreateDedicatedKafkaInstanceServices } from \"./CreateDedicatedKafkaInstanceMachine\";\nimport { makeCreateDedicatedKafkaInstanceMachine } from \"./CreateDedicatedKafkaInstanceMachine\";\n\nexport const CreateDedicatedKafkaInstanceContext = createContext<{\n  service: ActorRefFrom<\n    ReturnType<typeof makeCreateDedicatedKafkaInstanceMachine>\n  >;\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n}>(null!);\n\nexport const CreateDedicatedKafkaInstanceProvider: FunctionComponent<\n  CreateDedicatedKafkaInstanceServices\n> = ({\n  onCreate,\n  checkDedicatedQuota,\n  fetchClusters,\n  getDedicatedSizes,\n  children,\n}) => {\n  const service = useInterpret(\n    () =>\n      makeCreateDedicatedKafkaInstanceMachine({\n        checkDedicatedQuota,\n        fetchClusters,\n        getDedicatedSizes,\n        onCreate,\n      }),\n    { devTools: true }\n  );\n\n  return (\n    <CreateDedicatedKafkaInstanceContext.Provider value={{ service }}>\n      {children}\n    </CreateDedicatedKafkaInstanceContext.Provider>\n  );\n};\n","import { useSelector } from \"@xstate/react\";\nimport { useCallback, useContext } from \"react\";\nimport type { ActorRefFrom } from \"xstate\";\nimport { CreateKafkaInstanceContext } from \"./CreateKafkaInstanceProvider\";\nimport type { StandardPlanMachine } from \"./StandardPlanMachine\";\nimport type { TrialPlanMachine } from \"./TrialPlanMachine\";\n\nexport type UseCreateKafkaInstanceSelectorReturn = {\n  standardPlanMachine: ActorRefFrom<typeof StandardPlanMachine> | undefined;\n  trialPlanMachine: ActorRefFrom<typeof TrialPlanMachine> | undefined;\n  isLoading: boolean;\n  isSystemUnavailable: boolean;\n  isStandardPlan: boolean;\n  isTrialPlan: boolean;\n  isSaving: boolean;\n  isSaved: boolean;\n};\n\nexport function useCreateKafkaInstance() {\n  const { service } = useContext(CreateKafkaInstanceContext);\n  return useSelector<typeof service, UseCreateKafkaInstanceSelectorReturn>(\n    service,\n    useCallback((state) => {\n      const standardPlanMachine = state.children[\"standardPlanService\"] as\n        | ActorRefFrom<typeof StandardPlanMachine>\n        | undefined;\n      const trialPlanMachine = state.children[\"trialPlanService\"] as\n        | ActorRefFrom<typeof TrialPlanMachine>\n        | undefined;\n\n      const isLoading = state.hasTag(\"loading\");\n      const isSystemUnavailable = state.hasTag(\"systemUnavailable\");\n      const isStandardPlan = state.hasTag(\"standardPlan\");\n      const isTrialPlan = state.hasTag(\"trialPlan\");\n      const isSaving = state.hasTag(\"saving\");\n      const isSaved = state.done === true;\n\n      return {\n        standardPlanMachine,\n        trialPlanMachine,\n        isLoading,\n        isSystemUnavailable,\n        isStandardPlan,\n        isTrialPlan,\n        isSaving,\n        isSaved,\n      };\n    }, [])\n  );\n}\n","import { useSelector } from \"@xstate/react\";\nimport { useCallback, useContext } from \"react\";\nimport type { ActorRefFrom } from \"xstate\";\nimport { CreateDedicatedKafkaInstanceContext } from \"./CreateDedicatedKafkaInstanceProvider\";\nimport type { DedicatedPlanMachine } from \"./DedicatedPlanMachine\";\n\nexport type UseCreateDedicatedKafkaInstanceSelectorReturn = {\n  dedicatedPlanMachine: ActorRefFrom<typeof DedicatedPlanMachine> | undefined;\n  isLoading: boolean;\n  isSystemUnavailable: boolean;\n  isAvailable: boolean;\n  isSaving: boolean;\n  isSaved: boolean;\n};\n\nexport function useCreateDedicatedKafkaInstance() {\n  const { service } = useContext(CreateDedicatedKafkaInstanceContext);\n  return useSelector<\n    typeof service,\n    UseCreateDedicatedKafkaInstanceSelectorReturn\n  >(\n    service,\n    useCallback((state) => {\n      const dedicatedPlanMachine = state.children[\"dedicatedPlanService\"] as\n        | ActorRefFrom<typeof DedicatedPlanMachine>\n        | undefined;\n\n      const isLoading = state.hasTag(\"loading\");\n      const isSystemUnavailable = state.hasTag(\"systemUnavailable\");\n      const isAvailable = state.hasTag(\"dedicatedPlan\");\n      const isSaving = state.hasTag(\"saving\");\n      const isSaved = state.done === true;\n\n      return {\n        dedicatedPlanMachine,\n        isLoading,\n        isSystemUnavailable,\n        isAvailable,\n        isSaving,\n        isSaved,\n      };\n    }, [])\n  );\n}\n","import { useSelector } from \"@xstate/react\";\nimport { useCallback } from \"react\";\nimport type {\n  CloudProvider,\n  CloudRegion,\n  MarketPlace,\n  MarketplaceSubscription,\n  Size,\n} from \"ui-models/src/models/kafka\";\nimport type { CloudProviderInfo, CreateKafkaInstanceError } from \"../types\";\nimport type { StandardPlanMachineContext } from \"./StandardPlanMachine\";\nimport { useCreateKafkaInstance } from \"./useCreateKafkaInstance\";\n\ntype SelectorReturn = {\n  form: StandardPlanMachineContext[\"form\"];\n  capabilities: StandardPlanMachineContext[\"capabilities\"];\n  selectedProvider: CloudProviderInfo | undefined;\n  selectedSize: Size | undefined;\n  sizes: StandardPlanMachineContext[\"sizes\"];\n  selectedBilling: \"prepaid\" | MarketplaceSubscription | undefined;\n  billingType: \"rh-only\" | \"external-marketplaces\";\n  remainingQuota: number | undefined;\n\n  isFormEnabled: boolean;\n\n  isNameInvalid: boolean;\n  isNameEmpty: boolean;\n  isNameError: boolean;\n  isNameTaken: boolean;\n  isSizeDisabled: boolean;\n  isSizeOverQuota: boolean;\n  isSizeLoadingError: boolean;\n  isSizeAvailable: boolean;\n  isSizeError: boolean;\n  isBillingError: boolean;\n  isBillingSingleSubscription: boolean;\n  isBillingSelectionRequired: boolean;\n  isBillingPrepaidAvailable: boolean;\n  isBillingPrepaidOverQuota: boolean;\n  isBillingMarketplaceOverQuota: boolean;\n  isBillingSingleMarketplace: MarketplaceSubscription | false;\n\n  isProviderError: boolean;\n  isRegionError: boolean;\n\n  isLoading: boolean;\n  isLoadingSizes: boolean;\n  isSaving: boolean;\n\n  error: CreateKafkaInstanceError | \"form-invalid\" | undefined;\n\n  setName: (name: string) => void;\n  setProvider: (name: CloudProvider) => void;\n  setRegion: (name: CloudRegion) => void;\n  onCreate: () => void;\n  setSize: (size: Size) => void;\n  setBillingSubscription: (\n    marketplace: MarketPlace,\n    subscription: string\n  ) => void;\n  setBillingPrepaid: () => void;\n};\n\nexport function useStandardPlanMachine(): SelectorReturn {\n  const {\n    standardPlanMachine: service,\n    isLoading,\n    isSaving,\n  } = useCreateKafkaInstance();\n\n  if (!service) {\n    throw new Error(\n      \"useStandardPlanMachine should be called only when the parent CreateKafkaInstanceMachine is in the right state\"\n    );\n  }\n\n  const setName = useCallback(\n    (name: string) => service.send({ type: \"nameChange\", name }),\n    [service]\n  );\n  const setProvider = useCallback(\n    (provider: CloudProvider) =>\n      service.send({ type: \"providerChange\", provider }),\n    [service]\n  );\n  const setRegion = useCallback(\n    (region: CloudRegion) => service.send({ type: \"regionChange\", region }),\n    [service]\n  );\n  const onCreate = useCallback(() => service.send(\"create\"), [service]);\n  const setSize = useCallback(\n    (size: Size) => service.send({ type: \"sizeChange\", size }),\n    [service]\n  );\n\n  const setBillingSubscription = useCallback(\n    (marketplace: MarketPlace, subscription: string) =>\n      service.send({\n        type: \"selectSubscription\",\n        subscription: { marketplace, subscription },\n      }),\n    [service]\n  );\n\n  const setBillingPrepaid = useCallback(\n    () =>\n      service.send({\n        type: \"selectPrepaid\",\n      }),\n    [service]\n  );\n\n  return useSelector<typeof service, SelectorReturn>(\n    service,\n    useCallback(\n      (state) => {\n        const { creationError, capabilities, form, sizes } = state.context;\n        const isBlocked = state.hasTag(\"blocked\");\n        const isFormInvalid =\n          state.hasTag(\"formInvalid\") && state.hasTag(\"submitted\");\n        const isNameTaken = creationError === \"name-taken\";\n        const isConfigurable = state.hasTag(\"configurable\");\n        const isLoadingSizes = state.hasTag(\"sizeLoading\");\n        const isBillingSelectionRequired =\n          !state.hasTag(\"noBilling\") && !isBlocked;\n\n        const marketplaces = Array.from(\n          new Set(\n            capabilities.marketplaceSubscriptions.flatMap<MarketplaceSubscription>(\n              (m) =>\n                m.subscriptions.map((s) => ({\n                  marketplace: m.marketplace,\n                  subscription: s,\n                }))\n            )\n          )\n        );\n        const isBillingSingleSubscription = state.hasTag(\"singleSubscription\");\n        const isBillingSingleMarketplace =\n          isBillingSingleSubscription ||\n          (marketplaces.length === 1 &&\n            capabilities.remainingPrepaidQuota === undefined)\n            ? marketplaces[0]\n            : false;\n\n        const isBillingPrepaidAvailable =\n          capabilities.remainingPrepaidQuota !== undefined;\n\n        const selectedProvider = isBlocked\n          ? undefined\n          : capabilities.availableProviders.find((p) => p.id === form.provider);\n\n        const selectedSize = isBlocked\n          ? undefined\n          : sizes?.find((s) => form.size?.id === s.id);\n\n        const billingType = capabilities.marketplaceSubscriptions.some(\n          (m) => m.marketplace !== \"rhm\"\n        )\n          ? \"external-marketplaces\"\n          : \"rh-only\";\n\n        const selectedBilling =\n          form.billing === \"prepaid\" ? \"prepaid\" : form.billing;\n\n        const error: SelectorReturn[\"error\"] = creationError\n          ? creationError\n          : isFormInvalid\n          ? \"form-invalid\"\n          : undefined;\n\n        const remainingQuota =\n          form.billing === \"prepaid\" || form.billing === undefined\n            ? capabilities.remainingPrepaidQuota\n            : capabilities.remainingMarketplaceQuota;\n\n        const isBillingPrepaidOverQuota: boolean = (() => {\n          if (\n            capabilities.remainingPrepaidQuota !== undefined &&\n            capabilities.remainingPrepaidQuota === 0\n          ) {\n            return true;\n          } else if (\n            selectedSize?.quota &&\n            capabilities.remainingPrepaidQuota\n          ) {\n            return selectedSize.quota > capabilities.remainingPrepaidQuota;\n          }\n          return false;\n        })();\n\n        const isBillingMarketplaceOverQuota: boolean = (() => {\n          if (\n            capabilities.remainingMarketplaceQuota !== undefined &&\n            capabilities.remainingMarketplaceQuota === 0\n          ) {\n            return true;\n          } else if (\n            selectedSize?.quota &&\n            capabilities.remainingMarketplaceQuota\n          ) {\n            return selectedSize.quota > capabilities.remainingMarketplaceQuota;\n          }\n          return false;\n        })();\n\n        return {\n          form: form,\n          capabilities,\n          selectedProvider,\n          selectedSize,\n          sizes: sizes,\n          billingType,\n          selectedBilling,\n          remainingQuota,\n\n          isFormEnabled: !isLoading && !isSaving && !isBlocked,\n          isNameInvalid: state.hasTag(\"nameInvalid\"),\n          isNameEmpty: state.hasTag(\"nameEmpty\"),\n          isNameError:\n            state.hasTag(\"nameInvalid\") ||\n            isNameTaken ||\n            (!state.hasTag(\"nameValid\") && isFormInvalid),\n          isNameTaken,\n          isSizeDisabled: state.hasTag(\"sizeDisabled\"),\n          isSizeOverQuota: state.hasTag(\"sizeOverQuota\"),\n          isSizeLoadingError: state.hasTag(\"sizeError\"),\n          isSizeAvailable: !state.hasTag(\"sizeIdle\"),\n          isSizeError: !state.hasTag(\"sizeValid\") && isFormInvalid,\n          isProviderError: !state.hasTag(\"providerValid\") && isFormInvalid,\n          isRegionError: !state.hasTag(\"regionValid\") && isFormInvalid,\n          isBillingError: !state.hasTag(\"billingValid\") && isFormInvalid,\n          isBillingSingleSubscription,\n          isBillingSelectionRequired,\n          isBillingPrepaidAvailable,\n          isBillingPrepaidOverQuota,\n          isBillingMarketplaceOverQuota,\n          isBillingSingleMarketplace,\n          isLoading,\n          isLoadingSizes,\n          isConfigurable,\n          isSaving,\n\n          error,\n\n          setName,\n          setProvider,\n          setRegion,\n          onCreate,\n          setSize,\n          setBillingSubscription,\n          setBillingPrepaid,\n        };\n      },\n      [\n        isLoading,\n        isSaving,\n        onCreate,\n        setBillingPrepaid,\n        setBillingSubscription,\n        setName,\n        setProvider,\n        setRegion,\n        setSize,\n      ]\n    )\n  );\n}\n","import { useSelector } from \"@xstate/react\";\nimport { useCallback } from \"react\";\nimport type { CloudProvider, CloudRegion } from \"ui-models/src/models/kafka\";\nimport type { CloudProviderInfo, CreateKafkaInstanceError } from \"../types\";\nimport type { TrialPlanMachineContext } from \"./TrialPlanMachine\";\nimport { useCreateKafkaInstance } from \"./useCreateKafkaInstance\";\n\ntype SelectorReturn = {\n  form: TrialPlanMachineContext[\"form\"];\n  capabilities: TrialPlanMachineContext[\"capabilities\"];\n  selectedProvider: CloudProviderInfo | undefined;\n  sizes: TrialPlanMachineContext[\"sizes\"];\n\n  isFormEnabled: boolean;\n\n  isNameInvalid: boolean;\n  isNameEmpty: boolean;\n  isNameError: boolean;\n  isNameTaken: boolean;\n  isSizeLoadingError: boolean;\n  isSizeAvailable: boolean;\n  isSizeError: boolean;\n\n  isProviderError: boolean;\n  isRegionError: boolean;\n\n  isLoading: boolean;\n  isLoadingSizes: boolean;\n  isSaving: boolean;\n\n  error: CreateKafkaInstanceError | \"form-invalid\" | undefined;\n\n  setName: (name: string) => void;\n  setProvider: (name: CloudProvider) => void;\n  setRegion: (name: CloudRegion) => void;\n  onCreate: () => void;\n};\n\nexport function useTrialPlanMachine(): SelectorReturn {\n  const {\n    trialPlanMachine: service,\n    isLoading,\n    isSaving,\n  } = useCreateKafkaInstance();\n\n  if (!service) {\n    throw new Error(\n      \"useTrialPlanMachine should be called only when the parent CreateKafkaInstanceMachine is in the right state\"\n    );\n  }\n\n  const setName = useCallback(\n    (name: string) => service.send({ type: \"nameChange\", name }),\n    [service]\n  );\n  const setProvider = useCallback(\n    (provider: CloudProvider) =>\n      service.send({ type: \"providerChange\", provider }),\n    [service]\n  );\n  const setRegion = useCallback(\n    (region: CloudRegion) => service.send({ type: \"regionChange\", region }),\n    [service]\n  );\n  const onCreate = useCallback(() => service.send(\"create\"), [service]);\n\n  return useSelector<typeof service, SelectorReturn>(\n    service,\n    useCallback(\n      (state) => {\n        const isBlocked = state.hasTag(\"blocked\");\n        const isFormInvalid =\n          state.hasTag(\"formInvalid\") && state.hasTag(\"submitted\");\n        const isNameTaken = state.context.creationError === \"name-taken\";\n        const isConfigurable = state.hasTag(\"configurable\");\n        const isLoadingSizes = state.hasTag(\"sizeLoading\");\n\n        const selectedProvider = isBlocked\n          ? undefined\n          : state.context.capabilities.availableProviders.find(\n              (p) => p.id === state.context.form.provider\n            );\n\n        const error: SelectorReturn[\"error\"] = state.context.creationError\n          ? state.context.creationError\n          : isFormInvalid\n          ? \"form-invalid\"\n          : undefined;\n\n        return {\n          form: state.context.form,\n          capabilities: state.context.capabilities,\n          selectedProvider,\n          sizes: state.context.sizes,\n\n          isFormEnabled: !isLoading && !isSaving && !isBlocked,\n\n          isNameInvalid: state.hasTag(\"nameInvalid\"),\n          isNameEmpty: state.hasTag(\"nameEmpty\"),\n          isNameError:\n            state.hasTag(\"nameInvalid\") ||\n            isNameTaken ||\n            (!state.hasTag(\"nameValid\") && isFormInvalid),\n          isNameTaken,\n          isSizeLoadingError: state.hasTag(\"sizeError\"),\n          isSizeAvailable: !state.hasTag(\"sizeIdle\"),\n          isSizeError: !state.hasTag(\"sizeValid\") && isFormInvalid,\n\n          isProviderError: !state.hasTag(\"providerValid\") && isFormInvalid,\n          isRegionError: !state.hasTag(\"regionValid\") && isFormInvalid,\n\n          isLoading,\n          isLoadingSizes,\n          isConfigurable,\n          isSaving,\n\n          error,\n\n          setName,\n          setProvider,\n          setRegion,\n          onCreate,\n        };\n      },\n      [isLoading, isSaving, onCreate, setName, setProvider, setRegion]\n    )\n  );\n}\n","import { useSelector } from \"@xstate/react\";\nimport { useCallback } from \"react\";\nimport type { DedicatedCluster } from \"ui-models/src/models/dedicated-cluster\";\nimport type { Size } from \"ui-models/src/models/kafka\";\nimport type { CreateDedicatedKafkaInstanceError } from \"../types\";\nimport type { DedicatedPlanMachineContext } from \"./DedicatedPlanMachine\";\nimport { useCreateDedicatedKafkaInstance } from \"./useCreateDedicatedKafkaInstance\";\n\ntype SelectorReturn = {\n  form: DedicatedPlanMachineContext[\"form\"];\n  capabilities: DedicatedPlanMachineContext[\"capabilities\"];\n  selectedCluster: DedicatedCluster | undefined;\n  selectedSize: Size | undefined;\n  sizes: DedicatedPlanMachineContext[\"sizes\"];\n  remainingQuota: number | undefined;\n\n  isFormEnabled: boolean;\n\n  isNameInvalid: boolean;\n  isNameEmpty: boolean;\n  isNameError: boolean;\n  isNameTaken: boolean;\n  isSizeDisabled: boolean;\n  isSizeOverQuota: boolean;\n  isSizeLoadingError: boolean;\n  isSizeAvailable: boolean;\n  isSizeError: boolean;\n  isBillingError: boolean;\n  isBillingPrepaidAvailable: boolean;\n  isBillingPrepaidOverQuota: boolean;\n\n  isClusterError: boolean;\n\n  isLoading: boolean;\n  isLoadingSizes: boolean;\n  isSaving: boolean;\n\n  error: CreateDedicatedKafkaInstanceError | \"form-invalid\" | undefined;\n\n  setName: (name: string) => void;\n  setCluster: (name: DedicatedCluster) => void;\n  onCreate: () => void;\n  setSize: (size: Size) => void;\n  setBillingPrepaid: () => void;\n};\n\nexport function useDedicatedPlanMachine(): SelectorReturn {\n  const {\n    dedicatedPlanMachine: service,\n    isLoading,\n    isSaving,\n  } = useCreateDedicatedKafkaInstance();\n\n  if (!service) {\n    throw new Error(\n      \"useDedicatedPlanMachine should be called only when the parent CreateDedicatedKafkaInstanceMachine is in the right state\"\n    );\n  }\n\n  const setName = useCallback(\n    (name: string) => service.send({ type: \"nameChange\", name }),\n    [service]\n  );\n  const setCluster = useCallback(\n    (cluster: DedicatedCluster) =>\n      service.send({ type: \"clusterChange\", cluster }),\n    [service]\n  );\n  const onCreate = useCallback(() => service.send(\"create\"), [service]);\n  const setSize = useCallback(\n    (size: Size) => service.send({ type: \"sizeChange\", size }),\n    [service]\n  );\n\n  const setBillingPrepaid = useCallback(\n    () =>\n      service.send({\n        type: \"selectPrepaid\",\n      }),\n    [service]\n  );\n\n  return useSelector<typeof service, SelectorReturn>(\n    service,\n    useCallback(\n      (state) => {\n        const { creationError, capabilities, form, sizes } = state.context;\n        const isBlocked = state.hasTag(\"blocked\");\n        const isFormInvalid =\n          state.hasTag(\"formInvalid\") && state.hasTag(\"submitted\");\n        const isNameTaken = creationError === \"name-taken\";\n        const isConfigurable = state.hasTag(\"configurable\");\n        const isLoadingSizes = state.hasTag(\"sizeLoading\");\n\n        const isBillingPrepaidAvailable =\n          capabilities.remainingDedicatedQuota !== undefined;\n\n        const selectedCluster = isBlocked\n          ? undefined\n          : capabilities.availableClusters.find(\n              (p) => p.id === form.cluster?.id\n            );\n\n        const selectedSize = isBlocked\n          ? undefined\n          : sizes?.find((s) => form.size?.id === s.id);\n\n        const error: SelectorReturn[\"error\"] = creationError\n          ? creationError\n          : isFormInvalid\n          ? \"form-invalid\"\n          : undefined;\n\n        const remainingQuota = capabilities.remainingDedicatedQuota;\n\n        const isBillingPrepaidOverQuota: boolean = (() => {\n          if (\n            capabilities.remainingDedicatedQuota !== undefined &&\n            capabilities.remainingDedicatedQuota === 0\n          ) {\n            return true;\n          } else if (\n            selectedSize?.quota &&\n            capabilities.remainingDedicatedQuota\n          ) {\n            return selectedSize.quota > capabilities.remainingDedicatedQuota;\n          }\n          return false;\n        })();\n\n        return {\n          form: form,\n          capabilities,\n          selectedCluster,\n          selectedSize,\n          sizes: sizes,\n          remainingQuota,\n\n          isFormEnabled: !isLoading && !isSaving && !isBlocked,\n          isNameInvalid: state.hasTag(\"nameInvalid\"),\n          isNameEmpty: state.hasTag(\"nameEmpty\"),\n          isNameError:\n            state.hasTag(\"nameInvalid\") ||\n            isNameTaken ||\n            (!state.hasTag(\"nameValid\") && isFormInvalid),\n          isNameTaken,\n          isSizeDisabled: state.hasTag(\"sizeDisabled\"),\n          isSizeOverQuota: state.hasTag(\"sizeOverQuota\"),\n          isSizeLoadingError: state.hasTag(\"sizeError\"),\n          isSizeAvailable: !state.hasTag(\"sizeIdle\"),\n          isSizeError: !state.hasTag(\"sizeValid\") && isFormInvalid,\n          isClusterError: !state.hasTag(\"clusterValid\") && isFormInvalid,\n          isBillingError: !state.hasTag(\"billingValid\") && isFormInvalid,\n          isBillingPrepaidAvailable,\n          isBillingPrepaidOverQuota,\n          isLoading,\n          isLoadingSizes,\n          isConfigurable,\n          isSaving,\n\n          error,\n\n          setName,\n          setCluster,\n          onCreate,\n          setSize,\n          setBillingPrepaid,\n        };\n      },\n      [\n        isLoading,\n        isSaving,\n        onCreate,\n        setBillingPrepaid,\n        setName,\n        setCluster,\n        setSize,\n      ]\n    )\n  );\n}\n","import { Flex, FlexItem, Form } from \"@patternfly/react-core\";\nimport type { FormEvent, VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport type { CloudProvider, MarketPlace } from \"ui-models/src/models/kafka\";\nimport type {\n  FieldInstanceNameProps,\n  FieldSizeProps,\n  InstanceInfoProps,\n} from \"./components\";\nimport {\n  FieldAZ,\n  FieldBillingTiles,\n  FieldCloudProvider,\n  FieldCloudRegion,\n  FieldInstanceName,\n  FieldSize,\n  FormAlerts,\n  InstanceInfo,\n  InstanceInfoSkeleton,\n  ModalAlertsStandardPlan,\n} from \"./components\";\nimport { useStandardPlanMachine } from \"./machines\";\n\nexport type StandardInstanceFormProps = {\n  formId: string;\n  onClickContactUs: () => void;\n  onLearnHowToAddStreamingUnits: () => void;\n  onLearnMoreAboutSizes: () => void;\n  onClickQuickStart: () => void;\n  subscriptionOptionsHref: string;\n};\n\nexport const StandardInstanceForm: VoidFunctionComponent<\n  StandardInstanceFormProps\n> = ({\n  formId,\n  onClickContactUs,\n  onLearnHowToAddStreamingUnits,\n  onLearnMoreAboutSizes,\n  onClickQuickStart,\n  subscriptionOptionsHref,\n}) => {\n  const {\n    isBillingSelectionRequired,\n    isBillingSingleMarketplace,\n    capabilities,\n    selectedSize,\n    billingType,\n    error,\n    onCreate,\n  } = useStandardPlanMachine();\n\n  const onSubmit = useCallback(\n    (event: FormEvent<HTMLFormElement>) => {\n      event.preventDefault();\n      onCreate();\n    },\n    [onCreate]\n  );\n\n  const instanceInfoBilling: InstanceInfoProps[\"billing\"] = (() => {\n    if (!isBillingSelectionRequired) {\n      if (isBillingSingleMarketplace === false) {\n        return {\n          value: \"prepaid\",\n          subscriptionOptionsHref,\n          type: billingType,\n        };\n      } else {\n        return {\n          value: isBillingSingleMarketplace,\n          subscriptionOptionsHref,\n          type: billingType,\n        };\n      }\n    }\n    return undefined;\n  })();\n\n  return (\n    <>\n      <ModalAlertsStandardPlan\n        instanceAvailability={capabilities.instanceAvailability}\n        onClickContactUs={onClickContactUs}\n      />\n\n      <Flex\n        direction={{ default: \"column\", lg: \"row\" }}\n        alignItems={{ lg: \"alignItemsFlexStart\" }}\n      >\n        <FlexItem flex={{ default: \"flex_2\" }}>\n          <FormAlerts error={error} onClickContactUS={onClickContactUs} />\n          <Form onSubmit={onSubmit} id={formId}>\n            <ConnectedFieldInstanceName />\n            <ConnectedFieldCloudProvider />\n            <ConnectedFieldCloudRegion />\n            <ConnectedFieldAZ />\n            <ConnectedFieldSize\n              onLearnHowToAddStreamingUnits={onLearnHowToAddStreamingUnits}\n              onLearnMoreAboutSizes={onLearnMoreAboutSizes}\n            />\n            {isBillingSelectionRequired && (\n              <ConnectedBillingTiles\n                subscriptionOptionsHref={subscriptionOptionsHref}\n              />\n            )}\n          </Form>\n        </FlexItem>\n        <FlexItem\n          flex={{ default: \"flex_1\" }}\n          className=\"mas--CreateKafkaInstance__sidebar\"\n        >\n          {selectedSize === undefined ? (\n            <InstanceInfoSkeleton\n              isTrial={false}\n              onClickQuickStart={onClickQuickStart}\n            />\n          ) : (\n            <InstanceInfo\n              isTrial={false}\n              trialDurationInHours={undefined}\n              ingress={selectedSize.ingress}\n              egress={selectedSize.egress}\n              storage={selectedSize.storage}\n              maxPartitions={selectedSize.maxPartitions}\n              connections={selectedSize.connections}\n              connectionRate={selectedSize.connectionRate}\n              messageSize={selectedSize.messageSize}\n              onClickQuickStart={onClickQuickStart}\n              streamingUnits={selectedSize.displayName}\n              billing={instanceInfoBilling}\n            />\n          )}\n        </FlexItem>\n      </Flex>\n    </>\n  );\n};\n\nexport const ConnectedFieldInstanceName: VoidFunctionComponent = () => {\n  const {\n    form,\n    isNameTaken,\n    isNameInvalid,\n    isNameEmpty,\n    isNameError,\n    isFormEnabled,\n    setName,\n  } = useStandardPlanMachine();\n\n  const validity: FieldInstanceNameProps[\"validity\"] = (() => {\n    if (isNameTaken) {\n      return \"taken\";\n    } else if (isNameInvalid) {\n      return \"invalid\";\n    } else if (isNameEmpty && isNameError) {\n      return \"required\";\n    }\n    return \"valid\";\n  })();\n\n  return (\n    <FieldInstanceName\n      value={form.name || \"\"}\n      validity={validity}\n      isDisabled={!isFormEnabled}\n      onChange={setName}\n    />\n  );\n};\n\nexport const ConnectedFieldCloudProvider: VoidFunctionComponent = () => {\n  const {\n    form,\n    capabilities,\n    isProviderError,\n    isFormEnabled,\n    isBillingSingleMarketplace,\n    setProvider,\n  } = useStandardPlanMachine();\n\n  const providers =\n    isBillingSingleMarketplace &&\n    isBillingSingleMarketplace.marketplace !== \"rhm\"\n      ? capabilities.availableProviders.map((p) => ({\n          ...p,\n          isDisabled: p.id !== isBillingSingleMarketplace.marketplace,\n        }))\n      : capabilities.availableProviders;\n\n  return (\n    <FieldCloudProvider\n      isValid={!isProviderError}\n      providers={providers}\n      value={form.provider}\n      isDisabled={!isFormEnabled}\n      onChange={setProvider}\n    />\n  );\n};\n\nexport const ConnectedFieldCloudRegion: VoidFunctionComponent = () => {\n  const {\n    form,\n    selectedProvider,\n    selectedSize,\n    isRegionError,\n    isFormEnabled,\n    capabilities,\n    error,\n    setRegion,\n  } = useStandardPlanMachine();\n\n  return (\n    <FieldCloudRegion\n      validity={\n        isRegionError\n          ? \"required\"\n          : error === \"region-unavailable\" ||\n            capabilities.instanceAvailability === \"regions-unavailable\"\n          ? \"region-unavailable\"\n          : \"valid\"\n      }\n      regions={selectedProvider?.regions}\n      value={form.region}\n      isDisabled={!isFormEnabled}\n      isSizeUnavailable={selectedSize?.isDisabled || false}\n      onChange={setRegion}\n    />\n  );\n};\n\nexport const ConnectedFieldAZ: VoidFunctionComponent = () => {\n  const { isFormEnabled } = useStandardPlanMachine();\n\n  return (\n    <FieldAZ\n      validity={\"valid\"}\n      options={\"multi\"}\n      value={\"multi\"}\n      isDisabled={!isFormEnabled}\n      onChange={() => false} // AZ is defined by the backend, we just visualize the value here\n    />\n  );\n};\n\nexport const ConnectedFieldSize: VoidFunctionComponent<\n  Pick<\n    FieldSizeProps,\n    \"onLearnHowToAddStreamingUnits\" | \"onLearnMoreAboutSizes\"\n  >\n> = ({ onLearnHowToAddStreamingUnits, onLearnMoreAboutSizes }) => {\n  const {\n    form,\n    sizes,\n    isSizeOverQuota,\n    isSizeDisabled,\n    isSizeError,\n    isSizeLoadingError,\n    isBillingSelectionRequired,\n    isFormEnabled,\n    isLoadingSizes,\n    isLoading,\n    setSize,\n    remainingQuota,\n  } = useStandardPlanMachine();\n\n  return (\n    <FieldSize\n      value={form.size?.quota}\n      sizes={sizes}\n      remainingQuota={isBillingSelectionRequired ? undefined : remainingQuota}\n      isDisabled={!isFormEnabled || sizes === undefined}\n      isLoading={isLoading || isLoadingSizes}\n      isError={isSizeError}\n      isLoadingError={isSizeLoadingError}\n      validity={\n        isSizeOverQuota ? \"out-of-quota\" : isSizeDisabled ? \"required\" : \"valid\"\n      }\n      onChange={setSize}\n      onLearnHowToAddStreamingUnits={onLearnHowToAddStreamingUnits}\n      onLearnMoreAboutSizes={onLearnMoreAboutSizes}\n    />\n  );\n};\n\nfunction isMarketplaceDisabled(\n  marketplace: MarketPlace,\n  selectedProvider: CloudProvider | undefined\n) {\n  if (marketplace === \"rhm\") {\n    return false;\n  } else if (selectedProvider) {\n    return marketplace !== selectedProvider;\n  }\n  return false;\n}\n\nexport const ConnectedBillingTiles: VoidFunctionComponent<{\n  subscriptionOptionsHref: string;\n}> = ({ subscriptionOptionsHref }) => {\n  const {\n    form,\n    capabilities,\n    selectedBilling,\n    billingType,\n    isBillingPrepaidAvailable,\n    isSizeOverQuota,\n    isBillingError,\n    isBillingPrepaidOverQuota,\n    isBillingMarketplaceOverQuota,\n    setBillingPrepaid,\n    setBillingSubscription,\n  } = useStandardPlanMachine();\n\n  return (\n    <FieldBillingTiles\n      value={\n        selectedBilling === \"prepaid\"\n          ? \"prepaid\"\n          : selectedBilling?.subscription\n      }\n      hasPrepaid={isBillingPrepaidAvailable}\n      subscriptions={capabilities.marketplaceSubscriptions.flatMap((mq) =>\n        mq.subscriptions.map((subscription) => ({\n          marketplace: mq.marketplace,\n          subscription,\n          isDisabled: isMarketplaceDisabled(mq.marketplace, form.provider),\n        }))\n      )}\n      isPrepaidOverQuota={isBillingPrepaidOverQuota}\n      prepaidQuota={capabilities.remainingPrepaidQuota || 0} // we can default to 0 here just to make TS happy, we will have the info here\n      isMarketplaceOverQuota={isBillingMarketplaceOverQuota}\n      marketplaceQuota={capabilities.remainingMarketplaceQuota || 0} // we can default to 0 here just to make TS happy, we will have the info here\n      onPrepaid={setBillingPrepaid}\n      onSubscription={setBillingSubscription}\n      isValid={!isSizeOverQuota && !isBillingError}\n      billingType={billingType}\n      subscriptionOptionsHref={subscriptionOptionsHref}\n    />\n  );\n};\n","import { Flex, FlexItem, Form } from \"@patternfly/react-core\";\nimport type { FormEvent, VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport type { FieldSizeProps } from \"./components\";\nimport {\n  ModalAlertsTrialPlan,\n  FormAlerts,\n  InstanceInfoSkeleton,\n  InstanceInfo,\n  FieldInstanceName,\n  FieldCloudProvider,\n  FieldCloudRegion,\n  FieldAZ,\n  FieldSize,\n} from \"./components\";\nimport { useTrialPlanMachine } from \"./machines\";\n\nexport type TrialInstanceFormProps = {\n  formId: string;\n  onClickContactUs: () => void;\n  onLearnHowToAddStreamingUnits: () => void;\n  onLearnMoreAboutSizes: () => void;\n  onClickQuickStart: () => void;\n  onClickKafkaOverview: () => void;\n};\n\nexport const TrialInstanceForm: VoidFunctionComponent<\n  TrialInstanceFormProps\n> = ({\n  formId,\n  onClickContactUs,\n  onLearnHowToAddStreamingUnits,\n  onLearnMoreAboutSizes,\n  onClickQuickStart,\n  onClickKafkaOverview,\n}) => {\n  const { capabilities, error, isLoadingSizes, sizes, onCreate } =\n    useTrialPlanMachine();\n\n  const onSubmit = useCallback(\n    (event: FormEvent<HTMLFormElement>) => {\n      event.preventDefault();\n      onCreate();\n    },\n    [onCreate]\n  );\n\n  return (\n    <>\n      <ModalAlertsTrialPlan\n        instanceAvailability={capabilities.instanceAvailability}\n        trialDurationInHours={sizes?.trial.trialDurationHours}\n        onClickKafkaOverview={onClickKafkaOverview}\n      />\n\n      <Flex\n        direction={{ default: \"column\", lg: \"row\" }}\n        alignItems={{ lg: \"alignItemsFlexStart\" }}\n      >\n        <FlexItem flex={{ default: \"flex_2\" }}>\n          <FormAlerts error={error} onClickContactUS={onClickContactUs} />\n          <Form onSubmit={onSubmit} id={formId}>\n            <ConnectedFieldInstanceName />\n            <ConnectedFieldCloudProvider />\n            <ConnectedFieldCloudRegion />\n            <ConnectedFieldAZ />\n            <ConnectedFieldSize\n              onLearnHowToAddStreamingUnits={onLearnHowToAddStreamingUnits}\n              onLearnMoreAboutSizes={onLearnMoreAboutSizes}\n            />\n          </Form>\n        </FlexItem>\n        <FlexItem\n          flex={{ default: \"flex_1\" }}\n          className=\"mas--CreateKafkaInstance__sidebar\"\n        >\n          {isLoadingSizes || !sizes ? (\n            <InstanceInfoSkeleton\n              isTrial={false}\n              onClickQuickStart={onClickQuickStart}\n            />\n          ) : (\n            <InstanceInfo\n              isTrial={true}\n              trialDurationInHours={sizes.trial.trialDurationHours}\n              ingress={sizes.trial.ingress}\n              egress={sizes.trial.egress}\n              storage={sizes.trial.storage}\n              maxPartitions={sizes.trial.maxPartitions}\n              connections={sizes.trial.connections}\n              connectionRate={sizes.trial.connectionRate}\n              messageSize={sizes.trial.messageSize}\n              onClickQuickStart={onClickQuickStart}\n              streamingUnits={sizes.trial.displayName}\n              billing={undefined}\n            />\n          )}\n        </FlexItem>\n      </Flex>\n    </>\n  );\n};\n\nexport const ConnectedFieldInstanceName: VoidFunctionComponent = () => {\n  const {\n    form,\n    isNameTaken,\n    isNameInvalid,\n    isNameEmpty,\n    isNameError,\n    isFormEnabled,\n    setName,\n  } = useTrialPlanMachine();\n\n  return (\n    <FieldInstanceName\n      value={form.name || \"\"}\n      validity={\n        isNameTaken\n          ? \"taken\"\n          : isNameInvalid\n          ? \"invalid\"\n          : isNameEmpty && isNameError\n          ? \"required\"\n          : \"valid\"\n      }\n      isDisabled={!isFormEnabled}\n      onChange={setName}\n    />\n  );\n};\n\nexport const ConnectedFieldCloudProvider: VoidFunctionComponent = () => {\n  const { form, capabilities, isProviderError, isFormEnabled, setProvider } =\n    useTrialPlanMachine();\n\n  return (\n    <FieldCloudProvider\n      isValid={!isProviderError}\n      providers={capabilities.availableProviders || []}\n      value={form.provider}\n      isDisabled={!isFormEnabled}\n      onChange={setProvider}\n    />\n  );\n};\n\nexport const ConnectedFieldCloudRegion: VoidFunctionComponent = () => {\n  const {\n    form,\n    selectedProvider,\n    isRegionError,\n    isFormEnabled,\n    error,\n    setRegion,\n  } = useTrialPlanMachine();\n\n  return (\n    <FieldCloudRegion\n      validity={\n        isRegionError\n          ? \"required\"\n          : error === \"region-unavailable\"\n          ? \"region-unavailable\"\n          : \"valid\"\n      }\n      regions={selectedProvider?.regions}\n      value={form.region}\n      isDisabled={!isFormEnabled}\n      isSizeUnavailable={false}\n      onChange={setRegion}\n    />\n  );\n};\n\nexport const ConnectedFieldAZ: VoidFunctionComponent = () => {\n  const { isFormEnabled } = useTrialPlanMachine();\n\n  return (\n    <FieldAZ\n      validity={\"valid\"}\n      options={\"single\"}\n      value={\"single\"}\n      isDisabled={!isFormEnabled}\n      onChange={() => false} // AZ is defined by the backend, we just visualize the value here\n    />\n  );\n};\n\nexport const ConnectedFieldSize: VoidFunctionComponent<\n  Pick<\n    FieldSizeProps,\n    \"onLearnHowToAddStreamingUnits\" | \"onLearnMoreAboutSizes\"\n  >\n> = ({ onLearnHowToAddStreamingUnits, onLearnMoreAboutSizes }) => {\n  const { sizes, isSizeError, isSizeLoadingError, isLoadingSizes, isLoading } =\n    useTrialPlanMachine();\n\n  return (\n    <FieldSize\n      value={1}\n      sizes={sizes?.standard}\n      remainingQuota={undefined}\n      isDisabled={true}\n      isLoading={isLoading || isLoadingSizes}\n      isError={isSizeError}\n      isLoadingError={isSizeLoadingError}\n      validity={\"developer\"}\n      onChange={() => false} // for trial instances users can't change the size. This will never get fired\n      onLearnHowToAddStreamingUnits={onLearnHowToAddStreamingUnits}\n      onLearnMoreAboutSizes={onLearnMoreAboutSizes}\n    />\n  );\n};\n","import {\n  Alert,\n  Button,\n  Modal,\n  ModalVariant,\n  Stack,\n  StackItem,\n} from \"@patternfly/react-core\";\nimport { OutlinedClockIcon } from \"@patternfly/react-icons\";\nimport type { FunctionComponent, VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nimport { CreateKafkaInstanceProvider } from \"./machines/CreateKafkaInstanceProvider\";\n\nimport \"./CreateKafkaInstance.css\";\nimport { LoadingForm } from \"./LoadingForm\";\nimport { useCreateKafkaInstance } from \"./machines\";\nimport { StandardInstanceForm } from \"./StandardInstanceForm\";\nimport { TrialInstanceForm } from \"./TrialInstanceForm\";\nimport type { CreateKafkaInstanceServices } from \"./machines\";\nimport { ModalAlertsLoading, ModalAlertsSystemUnavailable } from \"./components\";\n\nexport type CreateKafkaInstanceProps = ConnectedCreateKafkaInstanceProps &\n  CreateKafkaInstanceServices;\nexport const CreateKafkaInstance: FunctionComponent<\n  CreateKafkaInstanceProps\n> = ({\n  checkStandardQuota,\n  checkDeveloperAvailability,\n  fetchProvidersWithRegions,\n  getStandardSizes,\n  getTrialSizes,\n  onCreate,\n  ...props\n}) =>\n  props.isModalOpen ? (\n    <CreateKafkaInstanceProvider\n      checkStandardQuota={checkStandardQuota}\n      checkDeveloperAvailability={checkDeveloperAvailability}\n      fetchProvidersWithRegions={fetchProvidersWithRegions}\n      getStandardSizes={getStandardSizes}\n      getTrialSizes={getTrialSizes}\n      onCreate={onCreate}\n    >\n      <ConnectedCreateKafkaInstance {...props} />\n    </CreateKafkaInstanceProvider>\n  ) : null;\n\nexport type ConnectedCreateKafkaInstanceProps = {\n  /**\n   *\n   * Flag to show the modal\n   */\n  isModalOpen: boolean;\n\n  /**\n   * Set this to `true` on Storybook when there are multiple modals open at a time.\n   */\n  disableFocusTrap?: boolean;\n  /**\n   * The parent container to append the modal to. Defaults to document.body\n   */\n  appendTo?: () => HTMLElement;\n\n  /**\n   * A callback for when the cancel or close button are clicked.\n   */\n  onCancel: () => void;\n  onClickQuickStart: () => void;\n  onClickContactUs: () => void;\n  onLearnHowToAddStreamingUnits: () => void;\n  onLearnMoreAboutSizes: () => void;\n  onClickKafkaOverview: () => void;\n  subscriptionOptionsHref: string;\n};\nexport const ConnectedCreateKafkaInstance: VoidFunctionComponent<\n  ConnectedCreateKafkaInstanceProps\n> = ({\n  isModalOpen,\n  appendTo,\n  onClickQuickStart,\n  onCancel,\n  disableFocusTrap,\n  onClickContactUs,\n  onLearnHowToAddStreamingUnits,\n  onLearnMoreAboutSizes,\n  onClickKafkaOverview,\n  subscriptionOptionsHref,\n}) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n\n  const { isLoading, isStandardPlan, isTrialPlan, isSaving } =\n    useCreateKafkaInstance();\n\n  const FORM_ID = \"create_kafka_instance_form\";\n\n  return (\n    <Modal\n      id=\"modalCreateKafka\"\n      variant={ModalVariant.large}\n      title={t(\"create_instance_title\")}\n      disableFocusTrap={disableFocusTrap}\n      isOpen={isModalOpen}\n      ouiaId=\"modal-create-kafka\"\n      onClose={onCancel}\n      appendTo={appendTo}\n      position=\"top\"\n      footer={\n        <Stack hasGutter={true}>\n          <StackItem>\n            <Alert\n              className=\"mas--CreateKafkaInstance__creationTimeAlert\"\n              customIcon={<OutlinedClockIcon />}\n              variant=\"info\"\n              isInline\n              isPlain\n              title={t(\"instance_creation_time_alert\")}\n            />\n          </StackItem>\n          <StackItem>\n            <Button\n              key=\"submit\"\n              variant=\"primary\"\n              type=\"submit\"\n              form={FORM_ID}\n              spinnerAriaValueText={t(\"common:submitting_request\")}\n              isDisabled={isLoading || isSaving}\n              isLoading={isSaving}\n              data-testid=\"modalCreateKafka-buttonSubmit\"\n              ouiaId=\"button-create\"\n            >\n              {t(\"create_instance\")}\n            </Button>\n            <Button\n              key=\"cancel\"\n              variant=\"link\"\n              onClick={onCancel}\n              data-testid=\"modalCreateKafka-buttonCancel\"\n            >\n              {t(\"common:cancel\")}\n            </Button>\n          </StackItem>\n        </Stack>\n      }\n    >\n      {(() => {\n        switch (true) {\n          case isLoading:\n            return (\n              <>\n                <ModalAlertsLoading />\n                <LoadingForm\n                  onLearnHowToAddStreamingUnits={onLearnHowToAddStreamingUnits}\n                  onLearnMoreAboutSizes={onLearnMoreAboutSizes}\n                  onClickQuickStart={onClickQuickStart}\n                />\n              </>\n            );\n          case isStandardPlan:\n            return (\n              <StandardInstanceForm\n                formId={FORM_ID}\n                onClickContactUs={onClickContactUs}\n                onLearnHowToAddStreamingUnits={onLearnHowToAddStreamingUnits}\n                onLearnMoreAboutSizes={onLearnMoreAboutSizes}\n                onClickQuickStart={onClickQuickStart}\n                subscriptionOptionsHref={subscriptionOptionsHref}\n              />\n            );\n          case isTrialPlan:\n            return (\n              <TrialInstanceForm\n                formId={FORM_ID}\n                onClickContactUs={onClickContactUs}\n                onLearnHowToAddStreamingUnits={onLearnHowToAddStreamingUnits}\n                onLearnMoreAboutSizes={onLearnMoreAboutSizes}\n                onClickQuickStart={onClickQuickStart}\n                onClickKafkaOverview={onClickKafkaOverview}\n              />\n            );\n          default:\n            return (\n              <>\n                <ModalAlertsSystemUnavailable />\n                <LoadingForm\n                  onLearnHowToAddStreamingUnits={onLearnHowToAddStreamingUnits}\n                  onLearnMoreAboutSizes={onLearnMoreAboutSizes}\n                  onClickQuickStart={onClickQuickStart}\n                />\n              </>\n            );\n        }\n      })()}\n    </Modal>\n  );\n};\n","import type { SelectProps } from \"@patternfly/react-core\";\nimport {\n  Card,\n  CardBody,\n  CardTitle,\n  Flex,\n  FlexItem,\n  FormSelect,\n  FormSelectOption,\n  Skeleton,\n  Spinner,\n  TextContent,\n  TextList,\n  TextListItem,\n  TextListItemVariants,\n  TextListVariants,\n  Truncate,\n} from \"@patternfly/react-core\";\nimport { ErrorCircleOIcon, OkIcon } from \"@patternfly/react-icons\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { CSSProperties, VoidFunctionComponent } from \"react\";\nimport type { DedicatedCluster } from \"ui-models/src/models/dedicated-cluster\";\nimport { useDedicatedClusterLabels } from \"../../../hooks\";\n\nexport type DedicatedClusterTilesProps = {\n  clusters: (DedicatedCluster & { isDisabled?: boolean })[];\n  value: DedicatedCluster | undefined;\n  onChange: (provider: DedicatedCluster) => void;\n  isDisabled: boolean;\n  validated?: SelectProps[\"validated\"];\n};\nexport const DedicatedClusterTiles: VoidFunctionComponent<\n  DedicatedClusterTilesProps\n> = ({ clusters, value, onChange, isDisabled, validated }) => {\n  const { t } = useTranslation([\"create-kafka-instance\"]);\n  const { fields } = useDedicatedClusterLabels();\n  return (\n    <>\n      {clusters.length === 0 && (\n        <Skeleton\n          className=\"pf-m-text-4xl\"\n          screenreaderText=\"Loading contents\"\n        />\n      )}\n      <div\n        className={\"pf-u-mt-sm\"}\n        role=\"listbox\"\n        aria-label={t(\"selected_dedicated_cluster\")}\n      >\n        <Flex\n          justifyContent={{ default: \"justifyContentSpaceBetween\" }}\n          spacer={{ default: \"spacerNone\" }}\n          spaceItems={{ default: \"spaceItemsXs\" }}\n        >\n          {clusters.map((c) => (\n            <FlexItem grow={{ default: \"grow\" }} key={c.id}>\n              <Card\n                className={\"pf-u-w-100\"}\n                hasSelectableInput={true}\n                isSelected={value === c}\n                isSelectableRaised={true}\n                isDisabledRaised={isDisabled || c.status !== \"ready\"}\n                onSelectableInputChange={() => onChange(c)}\n                onClick={() => onChange(c)}\n              >\n                <CardTitle>{c.name}</CardTitle>\n                <CardBody>\n                  <TextContent>\n                    <TextList component={TextListVariants.dl}>\n                      <TextListItem component={TextListItemVariants.dt}>\n                        {fields.id}\n                      </TextListItem>\n                      <TextListItem\n                        component={TextListItemVariants.dd}\n                        className=\"pf-u-max-width\"\n                        style={\n                          {\n                            \"--pf-u-max-width--MaxWidth\": \"10ch\",\n                          } as CSSProperties\n                        }\n                      >\n                        <Truncate\n                          content={c.id}\n                          trailingNumChars={5}\n                          position={\"middle\"}\n                        />\n                      </TextListItem>\n                      <TextListItem component={TextListItemVariants.dt}>\n                        {fields.status}\n                      </TextListItem>\n                      <TextListItem component={TextListItemVariants.dd}>\n                        {(() => {\n                          switch (c.status) {\n                            case \"ready\":\n                              return <OkIcon />;\n                            case \"provisioning\":\n                              return <Spinner size={\"sm\"} />;\n                            case \"failed\":\n                              return <ErrorCircleOIcon />;\n                          }\n                        })()}\n                        &nbsp;\n                        {c.status}\n                      </TextListItem>\n                      <TextListItem component={TextListItemVariants.dt}>\n                        {fields.cloudProvider}\n                      </TextListItem>\n                      <TextListItem component={TextListItemVariants.dd}>\n                        {c.cloudProvider.displayName}\n                      </TextListItem>\n                      <TextListItem component={TextListItemVariants.dt}>\n                        {fields.cloudRegion}\n                      </TextListItem>\n                      <TextListItem component={TextListItemVariants.dd}>\n                        {c.cloudRegion.displayName}\n                      </TextListItem>\n                    </TextList>\n                  </TextContent>\n                </CardBody>\n              </Card>\n            </FlexItem>\n          ))}\n        </Flex>\n      </div>\n      <FormSelect\n        className={\"pf-u-display-none\"}\n        value={value}\n        id=\"form-cluster-option\"\n        name=\"cluster\"\n        isDisabled={isDisabled}\n        validated={validated}\n        onChange={(value) => onChange(value as unknown as DedicatedCluster)}\n      >\n        {[\n          <FormSelectOption\n            value={value?.id}\n            key=\"placeholder\"\n            label={t(\"select_dedicated_cluster\")}\n          />,\n          clusters.map((c, index) => {\n            return <FormSelectOption key={index} value={c.id} label={c.id} />;\n          }),\n        ]}\n      </FormSelect>\n    </>\n  );\n};\n","import { FormGroup } from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport type { DedicatedClusterTilesProps } from \"./DedicatedClusterTiles\";\nimport { DedicatedClusterTiles } from \"./DedicatedClusterTiles\";\n\nexport type FieldDedicatedClusterProps = {\n  isValid: boolean;\n} & Omit<DedicatedClusterTilesProps, \"validated\">;\nexport const FieldDedicatedCluster: VoidFunctionComponent<\n  FieldDedicatedClusterProps\n> = ({ value, clusters, onChange, isDisabled, isValid }) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n\n  const validated = !isValid ? \"error\" : \"default\";\n\n  return (\n    <FormGroup\n      label={t(\"openshift_cluster\")}\n      fieldId=\"form-cluster-option\"\n      validated={validated}\n      helperTextInvalid={t(\"common:required\")}\n      isRequired\n    >\n      <DedicatedClusterTiles\n        clusters={clusters}\n        value={value}\n        onChange={onChange}\n        isDisabled={isDisabled}\n        validated={validated}\n      />\n    </FormGroup>\n  );\n};\n","import { Flex, FlexItem, Form } from \"@patternfly/react-core\";\nimport type { FormEvent, VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport type { FieldInstanceNameProps, FieldSizeProps } from \"./components\";\nimport {\n  FieldAZ,\n  FieldInstanceName,\n  FieldSize,\n  FormAlerts,\n  InstanceInfo,\n  InstanceInfoSkeleton,\n  ModalAlertsDedicatedPlan,\n} from \"./components\";\nimport { FieldDedicatedCluster } from \"./components/FieldDedicatedCluster\";\nimport { useDedicatedPlanMachine } from \"./machines\";\n\nexport type DedicatedInstanceFormProps = {\n  formId: string;\n  onClickContactUs: () => void;\n  onLearnHowToAddStreamingUnits: () => void;\n  onLearnMoreAboutSizes: () => void;\n  onClickQuickStart: () => void;\n  subscriptionOptionsHref: string;\n};\n\nexport const DedicatedInstanceForm: VoidFunctionComponent<\n  DedicatedInstanceFormProps\n> = ({\n  formId,\n  onClickContactUs,\n  onLearnHowToAddStreamingUnits,\n  onLearnMoreAboutSizes,\n  onClickQuickStart,\n  subscriptionOptionsHref,\n}) => {\n  const { capabilities, selectedSize, error, onCreate } =\n    useDedicatedPlanMachine();\n\n  const onSubmit = useCallback(\n    (event: FormEvent<HTMLFormElement>) => {\n      event.preventDefault();\n      onCreate();\n    },\n    [onCreate]\n  );\n\n  return (\n    <>\n      <ModalAlertsDedicatedPlan\n        instanceAvailability={capabilities.instanceAvailability}\n        onClickContactUs={onClickContactUs}\n      />\n\n      <Flex\n        direction={{ default: \"column\", lg: \"row\" }}\n        alignItems={{ lg: \"alignItemsFlexStart\" }}\n      >\n        <FlexItem flex={{ default: \"flex_2\" }}>\n          <FormAlerts error={error} onClickContactUS={onClickContactUs} />\n          <Form onSubmit={onSubmit} id={formId}>\n            <ConnectedFieldInstanceName />\n            <ConnectedFieldCluster />\n            <ConnectedFieldAZ />\n            <ConnectedFieldSize\n              onLearnHowToAddStreamingUnits={onLearnHowToAddStreamingUnits}\n              onLearnMoreAboutSizes={onLearnMoreAboutSizes}\n            />\n          </Form>\n        </FlexItem>\n        <FlexItem\n          flex={{ default: \"flex_1\" }}\n          className=\"mas--CreateKafkaInstance__sidebar\"\n        >\n          {selectedSize === undefined ? (\n            <InstanceInfoSkeleton\n              isTrial={false}\n              onClickQuickStart={onClickQuickStart}\n            />\n          ) : (\n            <InstanceInfo\n              isTrial={false}\n              trialDurationInHours={undefined}\n              ingress={selectedSize.ingress}\n              egress={selectedSize.egress}\n              storage={selectedSize.storage}\n              maxPartitions={selectedSize.maxPartitions}\n              connections={selectedSize.connections}\n              connectionRate={selectedSize.connectionRate}\n              messageSize={selectedSize.messageSize}\n              onClickQuickStart={onClickQuickStart}\n              streamingUnits={selectedSize.displayName}\n              billing={{\n                value: \"dedicated\",\n                subscriptionOptionsHref,\n                type: \"rh-only\",\n              }}\n            />\n          )}\n        </FlexItem>\n      </Flex>\n    </>\n  );\n};\n\nexport const ConnectedFieldInstanceName: VoidFunctionComponent = () => {\n  const {\n    form,\n    isNameTaken,\n    isNameInvalid,\n    isNameEmpty,\n    isNameError,\n    isFormEnabled,\n    setName,\n  } = useDedicatedPlanMachine();\n\n  const validity: FieldInstanceNameProps[\"validity\"] = (() => {\n    if (isNameTaken) {\n      return \"taken\";\n    } else if (isNameInvalid) {\n      return \"invalid\";\n    } else if (isNameEmpty && isNameError) {\n      return \"required\";\n    }\n    return \"valid\";\n  })();\n\n  return (\n    <FieldInstanceName\n      value={form.name || \"\"}\n      validity={validity}\n      isDisabled={!isFormEnabled}\n      onChange={setName}\n    />\n  );\n};\n\nexport const ConnectedFieldCluster: VoidFunctionComponent = () => {\n  const { form, capabilities, isClusterError, isFormEnabled, setCluster } =\n    useDedicatedPlanMachine();\n\n  const clusters = capabilities.availableClusters;\n\n  return (\n    <FieldDedicatedCluster\n      isValid={!isClusterError}\n      clusters={clusters}\n      value={form.cluster}\n      isDisabled={!isFormEnabled}\n      onChange={setCluster}\n    />\n  );\n};\n\nexport const ConnectedFieldAZ: VoidFunctionComponent = () => {\n  const { isFormEnabled } = useDedicatedPlanMachine();\n\n  return (\n    <FieldAZ\n      validity={\"valid\"}\n      options={\"multi\"}\n      value={\"multi\"}\n      isDisabled={!isFormEnabled}\n      onChange={() => false} // AZ is defined by the backend, we just visualize the value here\n    />\n  );\n};\n\nexport const ConnectedFieldSize: VoidFunctionComponent<\n  Pick<\n    FieldSizeProps,\n    \"onLearnHowToAddStreamingUnits\" | \"onLearnMoreAboutSizes\"\n  >\n> = ({ onLearnHowToAddStreamingUnits, onLearnMoreAboutSizes }) => {\n  const {\n    form,\n    sizes,\n    isSizeOverQuota,\n    isSizeDisabled,\n    isSizeError,\n    isSizeLoadingError,\n    isFormEnabled,\n    isLoadingSizes,\n    isLoading,\n    setSize,\n    remainingQuota,\n  } = useDedicatedPlanMachine();\n\n  return (\n    <FieldSize\n      value={form.size?.quota}\n      sizes={sizes}\n      remainingQuota={remainingQuota}\n      isDisabled={!isFormEnabled || sizes === undefined}\n      isLoading={isLoading || isLoadingSizes}\n      isError={isSizeError}\n      isLoadingError={isSizeLoadingError}\n      validity={\n        isSizeOverQuota ? \"out-of-quota\" : isSizeDisabled ? \"required\" : \"valid\"\n      }\n      onChange={setSize}\n      onLearnHowToAddStreamingUnits={onLearnHowToAddStreamingUnits}\n      onLearnMoreAboutSizes={onLearnMoreAboutSizes}\n    />\n  );\n};\n","import {\n  Alert,\n  Button,\n  Modal,\n  ModalVariant,\n  Stack,\n  StackItem,\n} from \"@patternfly/react-core\";\nimport { OutlinedClockIcon } from \"@patternfly/react-icons\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { FunctionComponent, VoidFunctionComponent } from \"react\";\nimport { ModalAlertsLoading, ModalAlertsSystemUnavailable } from \"./components\";\n\nimport \"./CreateKafkaInstance.css\";\nimport { DedicatedInstanceForm } from \"./DedicatedInstanceForm\";\nimport { LoadingForm } from \"./LoadingForm\";\nimport type { CreateDedicatedKafkaInstanceServices } from \"./machines\";\nimport {\n  CreateDedicatedKafkaInstanceProvider,\n  useCreateDedicatedKafkaInstance,\n} from \"./machines\";\n\nexport type CreateDedicatedKafkaInstanceProps =\n  ConnectedCreateDedicatedKafkaInstanceProps &\n    CreateDedicatedKafkaInstanceServices;\nexport const CreateDedicatedKafkaInstance: FunctionComponent<\n  CreateDedicatedKafkaInstanceProps\n> = ({\n  checkDedicatedQuota,\n  getDedicatedSizes,\n  fetchClusters,\n  onCreate,\n  ...props\n}) =>\n  props.isModalOpen ? (\n    <CreateDedicatedKafkaInstanceProvider\n      checkDedicatedQuota={checkDedicatedQuota}\n      getDedicatedSizes={getDedicatedSizes}\n      fetchClusters={fetchClusters}\n      onCreate={onCreate}\n    >\n      <ConnectedCreateDedicatedKafkaInstance {...props} />\n    </CreateDedicatedKafkaInstanceProvider>\n  ) : null;\n\nexport type ConnectedCreateDedicatedKafkaInstanceProps = {\n  /**\n   *\n   * Flag to show the modal\n   */\n  isModalOpen: boolean;\n\n  /**\n   * Set this to `true` on Storybook when there are multiple modals open at a time.\n   */\n  disableFocusTrap?: boolean;\n  /**\n   * The parent container to append the modal to. Defaults to document.body\n   */\n  appendTo?: () => HTMLElement;\n\n  /**\n   * A callback for when the cancel or close button are clicked.\n   */\n  onCancel: () => void;\n  onClickQuickStart: () => void;\n  onClickContactUs: () => void;\n  onLearnHowToAddStreamingUnits: () => void;\n  onLearnMoreAboutSizes: () => void;\n  onClickKafkaOverview: () => void;\n  subscriptionOptionsHref: string;\n};\nexport const ConnectedCreateDedicatedKafkaInstance: VoidFunctionComponent<\n  ConnectedCreateDedicatedKafkaInstanceProps\n> = ({\n  isModalOpen,\n  appendTo,\n  onClickQuickStart,\n  onCancel,\n  disableFocusTrap,\n  onClickContactUs,\n  onLearnHowToAddStreamingUnits,\n  onLearnMoreAboutSizes,\n  onClickKafkaOverview,\n  subscriptionOptionsHref,\n}) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n\n  const { isLoading, isAvailable, isSaving } =\n    useCreateDedicatedKafkaInstance();\n\n  const FORM_ID = \"create_kafka_instance_form\";\n\n  return (\n    <Modal\n      id=\"modalCreateKafka\"\n      variant={ModalVariant.large}\n      title={t(\"create_instance_title\")}\n      disableFocusTrap={disableFocusTrap}\n      isOpen={isModalOpen}\n      ouiaId=\"modal-create-kafka\"\n      onClose={onCancel}\n      appendTo={appendTo}\n      position=\"top\"\n      footer={\n        <Stack hasGutter={true}>\n          <StackItem>\n            <Alert\n              className=\"mas--CreateDedicatedKafkaInstance__creationTimeAlert\"\n              customIcon={<OutlinedClockIcon />}\n              variant=\"info\"\n              isInline\n              isPlain\n              title={t(\"instance_creation_time_alert\")}\n            />\n          </StackItem>\n          <StackItem>\n            <Button\n              key=\"submit\"\n              variant=\"primary\"\n              type=\"submit\"\n              form={FORM_ID}\n              spinnerAriaValueText={t(\"common:submitting_request\")}\n              isDisabled={isLoading || isSaving}\n              isLoading={isSaving}\n              data-testid=\"modalCreateKafka-buttonSubmit\"\n              ouiaId=\"button-create\"\n            >\n              {t(\"create_instance\")}\n            </Button>\n            <Button\n              key=\"cancel\"\n              variant=\"link\"\n              onClick={onCancel}\n              data-testid=\"modalCreateKafka-buttonCancel\"\n            >\n              {t(\"common:cancel\")}\n            </Button>\n          </StackItem>\n        </Stack>\n      }\n    >\n      {(() => {\n        switch (true) {\n          case isLoading:\n            return (\n              <>\n                <ModalAlertsLoading />\n                <LoadingForm\n                  onLearnHowToAddStreamingUnits={onLearnHowToAddStreamingUnits}\n                  onLearnMoreAboutSizes={onLearnMoreAboutSizes}\n                  onClickQuickStart={onClickQuickStart}\n                />\n              </>\n            );\n          case isAvailable:\n            return (\n              <DedicatedInstanceForm\n                formId={FORM_ID}\n                onClickContactUs={onClickContactUs}\n                onLearnHowToAddStreamingUnits={onLearnHowToAddStreamingUnits}\n                onLearnMoreAboutSizes={onLearnMoreAboutSizes}\n                onClickQuickStart={onClickQuickStart}\n                subscriptionOptionsHref={subscriptionOptionsHref}\n              />\n            );\n          default:\n            return (\n              <>\n                <ModalAlertsSystemUnavailable />\n                <LoadingForm\n                  onLearnHowToAddStreamingUnits={onLearnHowToAddStreamingUnits}\n                  onLearnMoreAboutSizes={onLearnMoreAboutSizes}\n                  onClickQuickStart={onClickQuickStart}\n                />\n              </>\n            );\n        }\n      })()}\n    </Modal>\n  );\n};\n","import { DropdownGroup } from \"@patternfly/react-core\";\nimport { ActionsColumn } from \"@patternfly/react-table\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\n\nexport type KafkaInstanceActionsProps = {\n  onDetails: () => void;\n  onConnection: () => void;\n  canOpenConnection: boolean;\n  canChangeOwner: boolean;\n  onChangeOwner: () => void;\n  canDelete: boolean;\n  onDelete: () => void;\n};\n\nexport const KafkaInstanceActions: VoidFunctionComponent<\n  KafkaInstanceActionsProps\n> = ({\n  onDetails,\n  onConnection,\n  canOpenConnection,\n  canChangeOwner,\n  onChangeOwner,\n  canDelete,\n  onDelete,\n}) => {\n  const { t } = useTranslation(\"kafka\");\n  return (\n    <ActionsColumn\n      items={[\n        {\n          customChild: (\n            <DropdownGroup\n              label={t(\"table.actions.view-instance-information\")}\n            />\n          ),\n        },\n        {\n          title: t(\"table.actions.details\"),\n          onClick: onDetails,\n        },\n        {\n          title: t(\"table.actions.connection\"),\n          ...(!canOpenConnection\n            ? {\n                isDisabled: true,\n                tooltipProps: {\n                  position: \"left\",\n                  content: t(\"kafka:no_permission_to_see_connections\"),\n                },\n                tooltip: true,\n                style: {\n                  pointerEvents: \"auto\",\n                  cursor: \"default\",\n                },\n              }\n            : {\n                onClick: onConnection,\n              }),\n        },\n        {\n          isSeparator: true,\n        },\n        {\n          title: t(\"table.actions.change-owner\"),\n          ...(!canChangeOwner\n            ? {\n                isDisabled: true,\n                tooltipProps: {\n                  position: \"left\",\n                  content: t(\"kafka:no_permission_to_change_owner\"),\n                },\n                tooltip: true,\n                style: {\n                  pointerEvents: \"auto\",\n                  cursor: \"default\",\n                },\n              }\n            : {\n                onClick: onChangeOwner,\n              }),\n        },\n        {\n          title: t(\"table.actions.delete\"),\n          ...(!canDelete\n            ? {\n                isDisabled: true,\n                tooltipProps: {\n                  position: \"left\",\n                  content: t(\"kafka:no_permission_to_delete_kafka\"),\n                },\n                tooltip: true,\n                style: {\n                  pointerEvents: \"auto\",\n                  cursor: \"default\",\n                },\n              }\n            : {\n                onClick: onDelete,\n              }),\n        },\n      ]}\n    />\n  );\n};\n","import {\n  Breadcrumb,\n  BreadcrumbItem,\n  Level,\n  LevelItem,\n  Nav,\n  NavItem,\n  NavList,\n  PageSection,\n  PageSectionVariants,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport type { KafkaInstanceActionsProps } from \"./KafkaInstanceActions\";\nimport { KafkaInstanceActions } from \"./KafkaInstanceActions\";\n\ntype Sections =\n  | \"dashboard\"\n  | \"topics\"\n  | \"consumer\"\n  | \"permissions\"\n  | \"settings\";\n\nexport type DataPlaneHeaderProps = {\n  instancesHref: string;\n  instanceName: string;\n  activeSection: Sections;\n  sectionsHref: { [key in Sections]: string };\n} & KafkaInstanceActionsProps;\n\nexport const DataPlaneHeader: VoidFunctionComponent<DataPlaneHeaderProps> = ({\n  instancesHref,\n  instanceName,\n  activeSection,\n  sectionsHref,\n  ...actionsProps\n}) => {\n  const { t } = useTranslation(\"kafka\");\n\n  return (\n    <>\n      <PageSection\n        variant={PageSectionVariants.light}\n        padding={{ default: \"noPadding\" }}\n        hasShadowBottom={true}\n      >\n        <Breadcrumb\n          ouiaId={\"breadcrumb\"}\n          className=\"pf-c-page__main-breadcrumb\"\n        >\n          <BreadcrumbItem\n            render={() => (\n              <Link to={instancesHref}>{t(\"common:kafka_instance\")}</Link>\n            )}\n          />\n          <BreadcrumbItem isActive={true}>{instanceName}</BreadcrumbItem>\n        </Breadcrumb>\n        <Level>\n          <LevelItem>\n            <TextContent className={\"pf-u-p-md pf-u-p-lg-on-xl\"}>\n              <Text component=\"h1\">{instanceName}</Text>\n            </TextContent>\n          </LevelItem>\n          <LevelItem>\n            <KafkaInstanceActions {...actionsProps} />\n          </LevelItem>\n        </Level>\n        <Nav\n          variant=\"tertiary\"\n          data-testid=\"pageKafka-tabProperties\"\n          className=\"pf-u-px-sm-on-xl\"\n        >\n          <NavList>\n            <NavItem\n              style={{ borderTop: 0 }}\n              data-testid=\"pageKafka-tabDashboard\"\n              id=\"dashboard-tab-section\"\n              aria-label={t(\"dataPlaneNavigation.dashboard\")}\n              ouiaId={\"tab-Dashboard\"}\n              isActive={activeSection === \"dashboard\"}\n            >\n              <Link to={sectionsHref[\"dashboard\"]}>\n                {t(\"dataPlaneNavigation.dashboard\")}\n              </Link>\n            </NavItem>\n            <NavItem\n              style={{ borderTop: 0 }}\n              data-testid=\"pageKafka-tabTopics\"\n              id=\"topics-tab-section\"\n              aria-label={t(\"dataPlaneNavigation.topics\")}\n              ouiaId={\"tab-Topics\"}\n              isActive={activeSection === \"topics\"}\n            >\n              <Link to={sectionsHref[\"topics\"]}>\n                {t(\"dataPlaneNavigation.topics\")}\n              </Link>\n            </NavItem>\n            <NavItem\n              style={{ borderTop: 0 }}\n              data-testid=\"pageKafka-tabConsumers\"\n              id=\"consumer-groups-tab-section\"\n              aria-label={t(\"dataPlaneNavigation.consumer_groups\")}\n              ouiaId={\"tab-Consumers\"}\n              isActive={activeSection === \"consumer\"}\n            >\n              <Link to={sectionsHref[\"consumer\"]}>\n                {t(\"dataPlaneNavigation.consumer_groups\")}\n              </Link>\n            </NavItem>\n            <NavItem\n              style={{ borderTop: 0 }}\n              data-testid=\"pageKafka-tabPermissions\"\n              id=\"permissions-tab-section\"\n              aria-label={t(\"dataPlaneNavigation.permissions\")}\n              ouiaId={\"tab-Permissions\"}\n              isActive={activeSection === \"permissions\"}\n            >\n              <Link to={sectionsHref[\"permissions\"]}>\n                {t(\"dataPlaneNavigation.permissions\")}\n              </Link>\n            </NavItem>\n            <NavItem\n              style={{ borderTop: 0 }}\n              data-testid=\"pageKafka-tabSettings\"\n              id=\"settings-tab-section\"\n              aria-label={t(\"dataPlaneNavigation.settings\")}\n              ouiaId={\"tab-Settings\"}\n              isActive={activeSection === \"settings\"}\n            >\n              <Link to={sectionsHref[\"settings\"]}>\n                {t(\"dataPlaneNavigation.settings\")}\n              </Link>\n            </NavItem>\n          </NavList>\n        </Nav>\n      </PageSection>\n    </>\n  );\n};\n","import {\n  Breadcrumb,\n  BreadcrumbItem,\n  Level,\n  LevelItem,\n  Nav,\n  NavItem,\n  NavList,\n  PageSection,\n  PageSectionVariants,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport type { KafkaInstanceActionsProps } from \"./KafkaInstanceActions\";\nimport { KafkaInstanceActions } from \"./KafkaInstanceActions\";\n\ntype Sections = \"consumer\" | \"messages\" | \"properties\" | \"schemas\";\n\nexport type DataPlaneTopicHeaderProps = {\n  instancesHref: string;\n  instanceName: string;\n  instanceDetailHref: string;\n  instanceTopicsHref: string;\n  topicName: string;\n  activeSection: Sections;\n  tabsHref: { [key in Sections]: string };\n} & KafkaInstanceActionsProps;\n\nexport const DataPlaneTopicHeader: VoidFunctionComponent<\n  DataPlaneTopicHeaderProps\n> = ({\n  instancesHref,\n  instanceName,\n  instanceDetailHref,\n  instanceTopicsHref,\n  topicName,\n  activeSection,\n  tabsHref,\n  ...actionsProps\n}) => {\n  const { t } = useTranslation(\"kafka\");\n\n  return (\n    <>\n      <section className=\"pf-c-page__main-breadcrumb\">\n        <Breadcrumb ouiaId={\"breadcrumb\"}>\n          <BreadcrumbItem\n            render={() => (\n              <Link to={instancesHref}>{t(\"common:kafka_instance\")}</Link>\n            )}\n          />\n          <BreadcrumbItem\n            render={() => <Link to={instanceDetailHref}>{instanceName}</Link>}\n          />\n          <BreadcrumbItem\n            render={() => (\n              <Link to={instanceTopicsHref}>\n                {t(\"dataPlaneNavigation.topics\")}\n              </Link>\n            )}\n          />\n          <BreadcrumbItem isActive={true}>{topicName}</BreadcrumbItem>\n        </Breadcrumb>\n      </section>\n      <PageSection variant={PageSectionVariants.light}>\n        <Level>\n          <LevelItem>\n            <TextContent>\n              <Text component=\"h1\">{topicName}</Text>\n            </TextContent>\n          </LevelItem>\n          <LevelItem>\n            <KafkaInstanceActions {...actionsProps} />\n          </LevelItem>\n        </Level>\n      </PageSection>\n      <PageSection\n        variant={PageSectionVariants.light}\n        padding={{ default: \"noPadding\" }}\n        className=\"pf-c-page__main-tabs\"\n        hasShadowBottom={true}\n      >\n        <Nav variant=\"tertiary\" className=\"pf-u-px-sm-on-xl\">\n          <NavList>\n            <NavItem\n              style={{ borderTop: 0 }}\n              aria-label={t(\"dataPlaneTopicNavigation.consumer_groups\")}\n              ouiaId={\"tab-Dashboard\"}\n              isActive={activeSection === \"consumer\"}\n            >\n              <Link to={tabsHref[\"consumer\"]}>\n                {t(\"dataPlaneTopicNavigation.consumer_groups\")}\n              </Link>\n            </NavItem>\n            <NavItem\n              style={{ borderTop: 0 }}\n              aria-label={t(\"dataPlaneTopicNavigation.messages\")}\n              ouiaId={\"tab-Topics\"}\n              isActive={activeSection === \"messages\"}\n            >\n              <Link to={tabsHref[\"messages\"]}>\n                {t(\"dataPlaneTopicNavigation.messages\")}\n              </Link>\n            </NavItem>\n            <NavItem\n              style={{ borderTop: 0 }}\n              aria-label={t(\"dataPlaneTopicNavigation.properties\")}\n              ouiaId={\"tab-Permissions\"}\n              isActive={activeSection === \"properties\"}\n            >\n              <Link to={tabsHref[\"properties\"]}>\n                {t(\"dataPlaneTopicNavigation.properties\")}\n              </Link>\n            </NavItem>\n            <NavItem\n              style={{ borderTop: 0 }}\n              aria-label={t(\"dataPlaneTopicNavigation.schemas\")}\n              ouiaId={\"tab-Settings\"}\n              isActive={activeSection === \"schemas\"}\n            >\n              <Link to={tabsHref[\"schemas\"]}>\n                {t(\"dataPlaneTopicNavigation.schemas\")}\n              </Link>\n            </NavItem>\n          </NavList>\n        </Nav>\n      </PageSection>\n    </>\n  );\n};\n","import {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { PlusCircleIcon } from \"@patternfly/react-icons\";\nimport { Trans, useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\n\nexport type EmptyStateNoDedicatedClustersProps = {\n  onQuickstartGuide: () => void;\n};\n\nexport const EmptyStateNoDedicatedClusters: VoidFunctionComponent<\n  EmptyStateNoDedicatedClustersProps\n> = ({ onQuickstartGuide }) => {\n  const { t } = useTranslation(\"kafka\");\n  return (\n    <EmptyState variant={EmptyStateVariant.xs}>\n      <EmptyStateIcon icon={PlusCircleIcon} />\n      <Title headingLevel=\"h2\" size=\"lg\">\n        {t(\"empty_state_no_dedicated_clusters_title\")}\n      </Title>\n      <EmptyStateBody>\n        <Trans\n          ns={\"kafka\"}\n          i18nKey={\"empty_state_no_dedicated_clusters_body\"}\n          components={[<a onClick={onQuickstartGuide} />]}\n        />\n      </EmptyStateBody>\n      <Button\n        ouiaId=\"button-create\"\n        variant=\"primary\"\n        onClick={onQuickstartGuide}\n      >\n        {t(\"empty_state_no_dedicated_clusters_prerequisite_button\")}\n      </Button>\n    </EmptyState>\n  );\n};\n","import { PageSection } from \"@patternfly/react-core\";\nimport type { TableViewProps } from \"@rhoas/app-services-ui-components\";\nimport { TableView } from \"@rhoas/app-services-ui-components\";\nimport type { DedicatedCluster } from \"ui-models/src/models/dedicated-cluster\";\nimport { useDedicatedClusterLabels } from \"../../hooks\";\nimport type { EmptyStateNoDedicatedClustersProps } from \"./components\";\nimport { EmptyStateNoDedicatedClusters } from \"./components\";\n\nconst Columns = [\"name\", \"id\", \"status\"] as const;\n\nexport type DedicatedClustersProps<\n  T extends DedicatedCluster = DedicatedCluster\n> = {\n  clusters: Array<T> | undefined | null;\n} & Pick<\n  TableViewProps<T, (typeof Columns)[number]>,\n  \"itemCount\" | \"page\" | \"onPageChange\"\n> &\n  EmptyStateNoDedicatedClustersProps;\n\nexport const DedicatedClusters = <T extends DedicatedCluster>({\n  clusters,\n  itemCount,\n  page,\n  onPageChange,\n  onQuickstartGuide,\n}: DedicatedClustersProps<T>) => {\n  const labels = useDedicatedClusterLabels();\n  const breakpoint = \"lg\";\n\n  return (\n    <PageSection isFilled={true}>\n      <TableView\n        ariaLabel={\"TODO\"}\n        data={clusters}\n        columns={Columns}\n        renderHeader={({ column, Th, key }) => (\n          <Th key={key}>{labels.fields[column]}</Th>\n        )}\n        renderCell={({ column, row, Td, key }) => {\n          return (\n            <Td key={key} dataLabel={labels.fields[column]}>\n              {(() => {\n                switch (column) {\n                  case \"name\":\n                    return row.name;\n                  case \"id\":\n                    return row.id;\n                  case \"status\":\n                    return row.status;\n                }\n              })()}\n            </Td>\n          );\n        }}\n        toolbarBreakpoint={breakpoint}\n        itemCount={itemCount}\n        page={page}\n        onPageChange={onPageChange}\n        emptyStateNoData={\n          <EmptyStateNoDedicatedClusters\n            onQuickstartGuide={onQuickstartGuide}\n          />\n        }\n        emptyStateNoResults={\n          <div>&bsp; {/* as users can't filter this is not needed */}</div>\n        }\n      />\n    </PageSection>\n  );\n};\n","import type { DeleteModalProps } from \"@rhoas/app-services-ui-components\";\nimport {\n  DeleteModal,\n  Trans,\n  useTranslation,\n} from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\n\nexport type DeleteKafkaInstanceProps = {\n  instanceName: string | undefined;\n} & Omit<\n  DeleteModalProps,\n  \"title\" | \"variant\" | \"confirmationValue\" | \"children\"\n>;\n\nexport const DeleteKafkaInstance: VoidFunctionComponent<\n  DeleteKafkaInstanceProps\n> = ({ instanceName, ...props }) => {\n  const { t } = useTranslation(\"kafka\");\n\n  return (\n    <DeleteModal\n      {...props}\n      variant={\"destructive\"}\n      title={t(\"delete_instance_title\")}\n      confirmationValue={instanceName}\n    >\n      <Trans\n        ns={\"kafka\"}\n        i18nKey={\"delete_instance_message\"}\n        components={[<strong />]}\n        values={{\n          instanceName,\n        }}\n      />\n    </DeleteModal>\n  );\n};\n","import type { I18nProviderProps } from \"@rhoas/app-services-ui-components\";\nimport { I18nProvider as UiComponentsI18nProvider } from \"@rhoas/app-services-ui-components\";\nimport type { FunctionComponent } from \"react\";\n\nexport const I18nProvider: FunctionComponent<\n  Omit<I18nProviderProps, \"resources\">\n> = ({ lng, debug, children }) => {\n  return (\n    <UiComponentsI18nProvider\n      lng={lng}\n      resources={{\n        en: {\n          common: () =>\n            import(\"@rhoas/app-services-ui-components/locales/en/common.json\"),\n          \"create-kafka-instance\": () =>\n            import(\"locales/en/create-kafka-instance.json\"),\n          kafka: () => import(\"locales/en/kafka.json\"),\n          \"kafkaoverview-v3\": () => import(\"locales/en/kafkaoverview-v3.json\"),\n          metrics: () => import(\"locales/en/metrics.json\"),\n          topic: () => import(\"locales/en/topic.json\"),\n          \"manage-kafka-permissions\": () =>\n            import(\"locales/en/manage-kafka-permissions.json\"),\n          \"create-topic\": () => import(\"locales/en/create-topic.json\"),\n          \"message-browser\": () => import(\"locales/en/message-browser.json\"),\n          \"connection-tab\": () => import(\"locales/en/connection-tab.json\"),\n          \"connection-tab-p1\": () =>\n            import(\"locales/en/connection-tab-p1.json\"),\n          \"terms-and-conditions\": () =>\n            import(\"locales/en/terms-and-conditions.json\"),\n          cluster: () => import(\"locales/en/cluster.json\"),\n        },\n        it: {\n          common: () => Promise.resolve({ delete: \"Elimina\" }),\n        },\n      }}\n      debug={debug}\n    >\n      {children}\n    </UiComponentsI18nProvider>\n  );\n};\n","import { Alert } from \"@patternfly/react-core\";\nimport { differenceInHours } from \"date-fns\";\nimport type { FunctionComponent } from \"react\";\nimport { Trans } from \"@rhoas/app-services-ui-components\";\nimport { FormatDate } from \"@rhoas/app-services-ui-components\";\n\ntype DetailsTabAlertProps = {\n  expiryDate: Date;\n};\n\nexport const DetailsTabAlert: FunctionComponent<DetailsTabAlertProps> = ({\n  expiryDate,\n}) => {\n  const hoursLeft = expiryDate ? differenceInHours(expiryDate, Date.now()) : 0;\n  return (\n    <Alert\n      variant={\n        hoursLeft > 24\n          ? \"info\"\n          : hoursLeft < 24 && hoursLeft > 5\n          ? \"warning\"\n          : \"danger\"\n      }\n      title={\n        <Trans\n          i18nKey=\"kafka:will_expire\"\n          components={{\n            time: <FormatDate date={expiryDate} format=\"expiration\" />,\n          }}\n        />\n      }\n      aria-live=\"polite\"\n      isInline\n      className=\"pf-u-mb-lg\"\n    />\n  );\n};\n","import {\n  Skeleton,\n  TextContent,\n  TextList,\n  TextListItem,\n  TextListItemVariants,\n  TextListVariants,\n  Truncate,\n} from \"@patternfly/react-core\";\nimport { FormatDate, useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { ReactChild, VoidFunctionComponent } from \"react\";\nimport type { MarketplaceSubscription, Plan } from \"ui-models/src/models/kafka\";\nimport type { Bytes } from \"../../../../../ui-models/src/types\";\nimport { DetailsTabAlert } from \"./DetailsTabAlert\";\n\n/**\n * All fields marked as accepting undefined will show a skeleton loader until the value is available.\n * This is to support fetching the data from different APIs.\n */\nexport type KafkaDetailsTabProps = {\n  id: string;\n  createdAt: Date;\n  updatedAt: Date;\n  expiryDate: Date | undefined;\n  owner: string;\n  deployment:\n    | { type: \"cluster\"; name: string; id: string }\n    | {\n        type: \"cloud\";\n        provider: string;\n        region: string;\n      };\n  instanceType: Plan;\n  size: string | undefined;\n  ingress: number | undefined;\n  egress: number | undefined;\n  storage: Bytes | undefined;\n  maxPartitions: number | undefined;\n  connections: number | undefined;\n  connectionRate: number | undefined;\n  messageSize: Bytes | undefined;\n  billing: \"prepaid\" | MarketplaceSubscription | \"dedicated\" | undefined;\n  kafkaVersion: string;\n};\n\nexport const KafkaDetailsTab: VoidFunctionComponent<KafkaDetailsTabProps> = ({\n  id,\n  createdAt,\n  updatedAt,\n  owner,\n  deployment,\n  expiryDate,\n  instanceType,\n  size,\n  ingress,\n  egress,\n  storage,\n  maxPartitions,\n  connections,\n  connectionRate,\n  messageSize,\n  billing,\n  kafkaVersion,\n}) => {\n  const { t } = useTranslation(\"kafka\");\n\n  const renderTextListItem = (title: string, value: ReactChild | undefined) => (\n    <>\n      <TextListItem component={TextListItemVariants.dt}>{title}</TextListItem>\n      {value ? (\n        <TextListItem component={TextListItemVariants.dd}>{value}</TextListItem>\n      ) : (\n        <Skeleton\n          width=\"50%\"\n          screenreaderText={t(\"common:skeleton_loader_screenreader_text\", {\n            contentName: title,\n          })}\n        />\n      )}\n    </>\n  );\n  return (\n    <div className=\"mas--details__drawer--tab-content\">\n      {instanceType !== \"standard\" && expiryDate && (\n        <DetailsTabAlert expiryDate={expiryDate} />\n      )}\n      <TextContent>\n        <TextList component={TextListVariants.dl}>\n          {instanceType === \"standard\" &&\n            renderTextListItem(\n              t(\"common:size\"),\n              size\n                ? t(\"create-kafka-instance:streaming_size_value\", {\n                    value: size,\n                  })\n                : undefined\n            )}\n          {renderTextListItem(\n            t(\"ingress\"),\n            ingress\n              ? t(\"create-kafka-instance:ingress_value\", {\n                  value: ingress,\n                })\n              : undefined\n          )}\n          {renderTextListItem(\n            t(\"egress\"),\n            egress\n              ? t(\"create-kafka-instance:egress_value\", {\n                  value: egress,\n                })\n              : undefined\n          )}\n          {renderTextListItem(\n            t(\"storage\"),\n            storage?.value\n              ? t(\"create-kafka-instance:storage_value\", {\n                  value: storage.value,\n                })\n              : undefined\n          )}\n          {renderTextListItem(\n            t(\"partitions\"),\n            maxPartitions\n              ? t(\"create-kafka-instance:partitions_value\", {\n                  value: maxPartitions,\n                })\n              : undefined\n          )}\n          {renderTextListItem(\n            t(\"client_connections\"),\n            connections\n              ? t(\"create-kafka-instance:client_connections_value\", {\n                  value: connections,\n                })\n              : undefined\n          )}\n          {renderTextListItem(\n            t(\"connection_rate\"),\n            connectionRate\n              ? t(\"create-kafka-instance:connection_rate_value\", {\n                  value: connectionRate,\n                })\n              : undefined\n          )}\n          {renderTextListItem(\n            t(\"message_size\"),\n            messageSize?.value\n              ? t(\"create-kafka-instance:message_size_value\", {\n                  value: messageSize.value,\n                })\n              : undefined\n          )}\n\n          {renderTextListItem(t(\"common:id\"), id)}\n          {renderTextListItem(t(\"common:kafka_version\"), kafkaVersion)}\n          {renderTextListItem(t(\"common:owner\"), owner)}\n          {renderTextListItem(\n            t(\"common:time_created\"),\n            <FormatDate date={createdAt} format={\"long\"} />\n          )}\n          {renderTextListItem(\n            t(\"common:time_updated\"),\n            <FormatDate date={updatedAt} format={\"long\"} />\n          )}\n          {deployment.type === \"cluster\" ? (\n            renderTextListItem(\n              t(\"create-kafka-instance:openshift_cluster\"),\n              <>\n                {deployment.name}\n                <br />\n                <Truncate content={deployment.id} position={\"middle\"} />\n              </>\n            )\n          ) : (\n            <>\n              {renderTextListItem(\n                t(\"common:cloud_provider\"),\n                deployment.provider\n              )}\n              {renderTextListItem(t(\"common:region\"), deployment.region)}\n            </>\n          )}\n          {renderTextListItem(\n            t(\"create-kafka-instance:billing.field_label\"),\n            (() => {\n              if (billing === undefined) {\n                return undefined;\n              } else if (billing === \"prepaid\") {\n                return t(\"create-kafka-instance:billing.prepaid_option\");\n              } else if (billing === \"dedicated\") {\n                return t(\"create-kafka-instance:billing.dedicated_option\");\n              } else {\n                switch (billing.marketplace) {\n                  case \"aws\":\n                    return (\n                      <>\n                        {t(\"create-kafka-instance:billing.marketplace_aws\")}\n                        <br />\n                        {billing.subscription}\n                      </>\n                    );\n                  case \"azure\":\n                    return (\n                      <>\n                        {t(\"create-kafka-instance:billing.marketplace_azure\")}\n                        <br />\n                        {billing.subscription}\n                      </>\n                    );\n                  case \"gcp\":\n                    return (\n                      <>\n                        {t(\"create-kafka-instance:billing.marketplace_gcp\")}\n                        <br />\n                        {billing.subscription}\n                      </>\n                    );\n                  case \"rhm\":\n                    return (\n                      <>\n                        {t(\"create-kafka-instance:billing.marketplace_rh\")}\n                        <br />\n                        {billing.subscription}\n                      </>\n                    );\n                }\n              }\n            })()\n          )}\n        </TextList>\n      </TextContent>\n    </div>\n  );\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from \"@patternfly/react-core\";\nimport { ExclamationTriangleIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const SuspendedConnection: VoidFunctionComponent = () => {\n  const { t } = useTranslation(\"kafka\");\n  return (\n    <EmptyState variant={EmptyStateVariant.small}>\n      <EmptyStateIcon icon={ExclamationTriangleIcon} color={\"#f0ab00\"} />\n      <Title headingLevel={\"h1\"} size={TitleSizes.lg}>\n        {t(\"suspend_empty_state_title\")}\n      </Title>\n      <EmptyStateBody>{t(\"suspend_empty_state_body\")}</EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import {\n  Button,\n  ButtonVariant,\n  ClipboardCopy,\n  ExpandableSection,\n  Label,\n  Popover,\n  Skeleton,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { HelpIcon } from \"@patternfly/react-icons\";\nimport {\n  ExternalLink,\n  Trans,\n  useTranslation,\n} from \"@rhoas/app-services-ui-components\";\nimport type { FunctionComponent } from \"react\";\nimport { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { SuspendedConnection } from \"./SuspendedConnection\";\n\nexport type KafkaConnectionTabP2Props = {\n  isKafkaSuspended?: boolean;\n  isKafkaPending?: boolean;\n  externalServer?: string;\n  tokenEndPointUrl: string | undefined;\n  linkToServiceAccount: string;\n  linkToAccessTab: string;\n  adminAPIUrl: string | undefined;\n  showCreateServiceAccountModal: () => void;\n  kafkaFleetManagerUrl: string;\n};\n\nexport const KafkaConnectionTabP2: FunctionComponent<\n  KafkaConnectionTabP2Props\n> = ({\n  isKafkaSuspended,\n  isKafkaPending,\n  externalServer,\n  tokenEndPointUrl,\n  linkToServiceAccount,\n  linkToAccessTab,\n  adminAPIUrl,\n  kafkaFleetManagerUrl,\n  showCreateServiceAccountModal,\n}) => {\n  const { t } = useTranslation();\n\n  const [isExpanded, setIsExpanded] = useState<boolean>(false);\n\n  const onChangeExpandedSection = () => {\n    setIsExpanded(!isExpanded);\n  };\n\n  return isKafkaSuspended ? (\n    <SuspendedConnection />\n  ) : (\n    <div className=\"mas--details__drawer--tab-content\">\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.small}>\n          {t(\"connection-tab:drawer_resource_tab_body_description_1\")}\n        </Text>\n        <Text component={TextVariants.h3} className=\"pf-u-mt-xl\">\n          {t(\"connection-tab:bootstrap_server\")}\n        </Text>\n        <Text component={TextVariants.small}>\n          {t(\"connection-tab:bootstrap_server_description\")}\n        </Text>\n        {isKafkaPending ? (\n          <Skeleton fontSize=\"2xl\" />\n        ) : (\n          <ClipboardCopy\n            data-testid=\"drawerStreams-copyBootstrapURL\"\n            textAriaLabel={t(\"connection-tab:bootstrap_server\")}\n            isReadOnly\n          >\n            {externalServer}\n          </ClipboardCopy>\n        )}\n      </TextContent>\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.h3} className=\"pf-u-mt-xl\">\n          {t(\"connection-tab:service_accounts_small\")}\n        </Text>\n        <Text component={TextVariants.small}>\n          {\n            <Trans\n              i18nKey={\n                \"connection-tab:create_service_account_to_generate_credentials\"\n              }\n              components={{\n                value: (\n                  <a\n                    href={linkToServiceAccount}\n                    data-testid=\"tableStreams-linkKafka\"\n                  ></a>\n                ),\n              }}\n            />\n          }\n        </Text>\n      </TextContent>\n      <Button\n        variant={ButtonVariant.secondary}\n        isInline\n        data-testid=\"drawerStreams-buttonCreateServiceAccount\"\n        href={linkToServiceAccount}\n        component={\"a\"}\n      >\n        {t(\"connection-tab:create_service_account\")}\n      </Button>\n      <TextContent className=\"pf-u-pt-sm\">\n        <Text component={TextVariants.small}>\n          {\n            <Trans\n              i18nKey={\"connection-tab:current_instance\"}\n              components={{\n                value: isKafkaPending ? (\n                  <span>Link is not available yet</span>\n                ) : (\n                  <Link to={linkToAccessTab}></Link>\n                ),\n              }}\n            />\n          }\n        </Text>\n      </TextContent>\n      <TextContent className=\"pf-u-pb-sm\">\n        <ExpandableSection\n          toggleContent={\n            <div className=\"pf-c-content\">\n              <Text component={TextVariants.h3} className={\"pf-c-content\"}>\n                {t(\"connection-tab:rest_api_header\")}\n              </Text>\n            </div>\n          }\n          isExpanded={isExpanded}\n          onToggle={onChangeExpandedSection}\n          className=\"pf-u-mt-lg\"\n        >\n          <TextContent className=\"pf-u-pb-sm\">\n            <Text component={TextVariants.small}>\n              {t(\"connection-tab:rest_api_description\")}\n            </Text>\n          </TextContent>\n          <TextContent>\n            <strong>\n              {t(\"connection-tab:kafka_instance_url_label\")}\n              <Popover\n                headerContent={\n                  <div>\n                    {t(\"connection-tab:kafka_instance_url_popover_label\")}\n                  </div>\n                }\n                bodyContent={\n                  <TextContent>\n                    <p>{t(\"connection-tab:kafka_instance_url_popover_body\")}</p>\n                    <p>\n                      <Trans\n                        ns={\"connection-tab\"}\n                        i18nKey={\"popover_helper_text\"}\n                        components={[\n                          <Button\n                            isInline\n                            variant={ButtonVariant.link}\n                            component=\"a\"\n                            href=\"https://console.redhat.com/docs/api/kafkainstance?github-owner=redhat-developer&github-repo=app-services-sdk-core&github-content=kafka-admin-rest.yaml%3Fref%3Ddoc-portal&readonly=true\"\n                          />,\n                          <ExternalLink\n                            testId={\"customerPortal-link\"}\n                            href=\"https://access.redhat.com/documentation/en-us/red_hat_openshift_application_services/1/guide/2409253a-45ee-470e-bdc9-5db4bfcf9d0f\"\n                            className={\"pf-u-ml-xs\"}\n                          />,\n                        ]}\n                      />\n                    </p>\n                  </TextContent>\n                }\n              >\n                <Button\n                  variant={ButtonVariant.plain}\n                  aria-label={t(\n                    \"connection-tab:kafka_instance_url_button_aria_label\"\n                  )}\n                >\n                  <HelpIcon />\n                </Button>\n              </Popover>\n            </strong>\n            {adminAPIUrl ? (\n              <ClipboardCopy\n                textAriaLabel={t(\"connection-tab:kafka_instance_url_label\")}\n                isReadOnly\n              >\n                {adminAPIUrl}\n              </ClipboardCopy>\n            ) : (\n              <Skeleton fontSize=\"2xl\" />\n            )}\n            <TextContent className=\"pf-u-pt-sm\">\n              <Text component={TextVariants.small}>\n                {t(\"connection-tab:kafka_instance_url_description\")}\n              </Text>\n            </TextContent>\n          </TextContent>\n          <TextContent className=\"pf-u-mt-md\">\n            <strong>\n              {t(\"connection-tab:kafka_management_url\")}\n              <Popover\n                headerContent={\n                  <div>\n                    {t(\"connection-tab:kafka_management_popover_header\")}\n                  </div>\n                }\n                bodyContent={\n                  <TextContent>\n                    <p>{t(\"connection-tab:kafka_management_popover_body\")}</p>\n                    <p>\n                      <Trans\n                        ns={\"connection-tab\"}\n                        i18nKey={\"popover_helper_text\"}\n                        components={[\n                          <Button\n                            isInline\n                            variant={ButtonVariant.link}\n                            component=\"a\"\n                            href=\"https://console.redhat.com/docs/api/kafkamgmt?github-owner=redhat-developer&github-repo=app-services-sdk-core&github-content=kas-fleet-manager.yaml%3Fref%3Ddoc-portal\"\n                          />,\n                          <ExternalLink\n                            testId={\"customerPortal-link\"}\n                            href=\"https://access.redhat.com/documentation/en-us/red_hat_openshift_application_services/1/guide/2409253a-45ee-470e-bdc9-5db4bfcf9d0f\"\n                            className={\"pf-u-ml-xs\"}\n                          />,\n                        ]}\n                      />\n                    </p>\n                  </TextContent>\n                }\n              >\n                <Button\n                  variant={ButtonVariant.plain}\n                  aria-label={t(\n                    \"connection-tab:kafka_management_button_aria_label\"\n                  )}\n                >\n                  <HelpIcon />\n                </Button>\n              </Popover>\n            </strong>\n            {isKafkaPending ? (\n              <Skeleton fontSize=\"2xl\" />\n            ) : (\n              <ClipboardCopy\n                textAriaLabel={t(\"connection-tab:kafka_management_url\")}\n                isReadOnly\n              >\n                {kafkaFleetManagerUrl}\n              </ClipboardCopy>\n            )}\n            <TextContent className=\"pf-u-pt-sm\">\n              <Text component={TextVariants.small}>\n                {t(\"connection-tab:kafka_management_description\")}\n              </Text>\n            </TextContent>\n          </TextContent>\n        </ExpandableSection>\n      </TextContent>\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.h3} className=\"pf-u-mt-xl\">\n          {t(\"connection-tab:authentication_method\")}\n        </Text>\n        <Text component={TextVariants.h4} className=\"pf-u-mt-md\">\n          {t(\"connection-tab:sasl_oauthbearer\")}{\" \"}\n          <Label color=\"green\">{t(\"connection-tab:recommended\")}</Label>\n          <Popover\n            aria-label={t(\"connection-tab:sasl_oauthbearer\")}\n            bodyContent={\n              <div>{t(\"connection-tab:sasl_oauthbearer_popover_content\")}</div>\n            }\n          >\n            <Button\n              variant={ButtonVariant.plain}\n              aria-label={t(\"connection-tab:more_info_about_sasl_oauthbearer\")}\n            >\n              <HelpIcon />\n            </Button>\n          </Popover>\n        </Text>\n        <Text component={TextVariants.small}>\n          {t(\"connection-tab:sasl_oauthbearer_description\")}\n        </Text>\n        <strong>{t(\"connection-tab:token_endpoint_url\")}</strong>\n        {tokenEndPointUrl === undefined ? (\n          <Skeleton fontSize=\"2xl\" />\n        ) : (\n          <ClipboardCopy\n            textAriaLabel={t(\"connection-tab:token_endpoint_url\")}\n            isReadOnly\n          >\n            {tokenEndPointUrl}\n          </ClipboardCopy>\n        )}\n      </TextContent>\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.h4} className=\"pf-u-mt-md\">\n          {t(\"connection-tab:sasl_plain\")}\n        </Text>\n        <Text component={TextVariants.small}>\n          {t(\"connection-tab:sasl_plain_description\")}\n        </Text>\n      </TextContent>\n    </div>\n  );\n};\n","import {\n  ClipboardCopyButton,\n  CodeBlock,\n  CodeBlockAction,\n  CodeBlockCode,\n  ExpandableSection,\n  ExpandableSectionToggle,\n} from \"@patternfly/react-core\";\nimport { useEffect, useState } from \"react\";\nimport type { VoidFunctionComponent } from \"react\";\n\nexport type ClientType = \"java\" | \"python\" | \"quarkus\" | \"springboot\";\n\nexport type SampleCodeSnippetProps = {\n  expandableCode?: string;\n  codeBlockCode: string;\n  codeSnippet?: ClientType;\n};\n\nexport const SampleCodeSnippet: VoidFunctionComponent<\n  SampleCodeSnippetProps\n> = ({ expandableCode, codeBlockCode, codeSnippet }) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  const [copied, setCopied] = useState<boolean>(false);\n\n  useEffect(() => {\n    setIsExpanded(false);\n  }, [codeSnippet]);\n\n  const clipboardCopyFunc = (_event: any, text: string) => {\n    navigator.clipboard\n      .writeText(text.toString())\n      .then(() => {\n        setCopied(true);\n      })\n      .catch(() => {\n        setCopied(false);\n      });\n  };\n\n  const onToggle = (isExpanded: boolean) => {\n    setIsExpanded(isExpanded);\n  };\n\n  const copyCode = expandableCode\n    ? codeBlockCode + \"\\n\" + expandableCode\n    : codeBlockCode;\n\n  const actions = (\n    <CodeBlockAction>\n      <ClipboardCopyButton\n        id=\"basic-copy-button\"\n        textId=\"code-content\"\n        aria-label=\"Copy to clipboard\"\n        exitDelay={600}\n        maxWidth=\"110px\"\n        variant=\"plain\"\n        onClick={(e) => clipboardCopyFunc(e, copyCode)}\n      >\n        {copied ? \"Successfully copied to clipboard!\" : \"Copy to clipboard\"}\n      </ClipboardCopyButton>\n    </CodeBlockAction>\n  );\n\n  return (\n    <CodeBlock actions={actions}>\n      <CodeBlockCode id=\"code-content\">\n        {codeBlockCode}\n\n        <ExpandableSection\n          isExpanded={isExpanded}\n          isDetached\n          contentId=\"code-block-expand\"\n        >\n          {expandableCode}\n        </ExpandableSection>\n      </CodeBlockCode>\n      {expandableCode ? (\n        <ExpandableSectionToggle\n          isExpanded={isExpanded}\n          onToggle={onToggle}\n          contentId=\"code-block-expand\"\n          direction=\"up\"\n        >\n          {isExpanded ? \"Show Less\" : \"Show More\"}\n        </ExpandableSectionToggle>\n      ) : null}\n    </CodeBlock>\n  );\n};\n","export const javaConfigCodeBlock = (\n  kafkaBootstrapUrl: string,\n  tokenEndpointUrl: string\n) => {\n  return `package org.example;\nimport org.apache.kafka.clients.producer.ProducerConfig;  \nimport java.util.Properties;\n    \npublic class KafkaConfig {\n    \n    static Properties properties() {\n    \n        String kafkaHost = \"${kafkaBootstrapUrl}\";\n        String rhoasClientID = \"<client_id>\";\n        String rhoasClientSecret = \"<client_secret>\";\n        String rhoasOauthTokenUrl = \"${tokenEndpointUrl}\";`;\n};\n\nexport const javaConfigExpandabledBlock = `\n        var properties= new Properties();\n\n        properties.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaHost);\n        properties.setProperty(\"security.protocol\", \"SASL_SSL\");\n        properties.setProperty(\"sasl.mechanism\", \"OAUTHBEARER\");\n\n        properties.setProperty(\"sasl.jaas.config\", \"org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required clientId=\\\\\"\" + rhoasClientID + \"\\\\\" clientSecret=\\\\\"\" + rhoasClientSecret + \"\\\\\" oauth.token.endpoint.uri=\\\\\"\" + rhoasOauthTokenUrl + \"\\\\\";\");\n\n        properties.setProperty(\"sasl.login.callback.handler.class\", \"org.apache.kafka.common.security.oauthbearer.secured.OAuthBearerLoginCallbackHandler\");\n        properties.setProperty(\"sasl.oauthbearer.token.endpoint.url\", rhoasOauthTokenUrl);\n        properties.setProperty(\"sasl.oauthbearer.scope.claim.name\", \"api.iam.service_accounts\");\n\n        return properties;\n    }\n}`;\n\nexport const javaProducerCodeBlock = `package org.example;\n \nimport org.apache.kafka.clients.producer.ProducerConfig;\nimport org.apache.kafka.clients.producer.ProducerRecord;\nimport org.apache.kafka.clients.producer.KafkaProducer;\nimport org.apache.kafka.common.serialization.StringSerializer;\n \npublic class ProducerExample {\n \n   public static void main(String[] args) {`;\n\nexport const javaProducerExpandableBlock = `\n   //Creating producer properties\n   var properties= KafkaConfig.properties();\n   properties.setProperty(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n   properties.setProperty(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n\n   KafkaProducer<String,String> producer= new KafkaProducer<String,String>(properties);\n\n   producer.send(new ProducerRecord<>(<\"topic\">, \"Test Message\"));\n   producer.flush();\n   producer.close();\n  }\n}`;\n\nexport const javaConsumerCodeBlock = `package org.example;\n \nimport java.util.Arrays;\n\nimport org.apache.kafka.clients.consumer.ConsumerConfig;\nimport org.apache.kafka.clients.consumer.KafkaConsumer;\nimport org.apache.kafka.common.serialization.StringDeserializer;\nimport org.apache.kafka.clients.consumer.ConsumerRecord;\nimport org.apache.kafka.clients.consumer.ConsumerRecords;\nimport java.time.Duration;`;\n\nexport const javaConsumerExpandableBlock = `\npublic class ConsumerExample {\n\n    public static void main(String[] args) {\n\n        var properties= KafkaConfig.properties();\n\n        properties.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n        properties.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n        properties.setProperty(ConsumerConfig.GROUP_ID_CONFIG,\"test_group_2\");\n        properties.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n\n        KafkaConsumer<String,String> consumer = new KafkaConsumer<String,String>(properties);\n\n        //Subscribing\n        consumer.subscribe(Arrays.asList(\"<topic>\"));\n\n        //polling\n        while(true){\n            ConsumerRecords<String,String> records=consumer.poll(Duration.ofMillis(100));\n            for(ConsumerRecord<String,String> record: records) {\n                System.out.println(\"Key: \"+ record.key() + \", Value:\" +record.value());\n                System.out.println(\"Partition:\" + record.partition()+\",Offset:\"+record.offset());\n            }\n        }\n    }\n}`;\n\nexport const pythonConfigCodeBlock = (tokenEndpointUrl: string) => {\n  return `import time\nimport requests\n    \ndef _get_token(config):\n    payload = {\"grant_type\": \"client_credentials\", \"scope\": \"api.iam.service_accounts\"}\n    resp = requests.post(\n        \"${tokenEndpointUrl}\",\n        auth=(\n            <client_id>,\n            <client_secret>,\n        ),\n        data=payload,\n    )`;\n};\n\nexport const pythonConfigExpandabledBlock = (kafkaBootstrapUrl: string) => {\n  return `\n    token = resp.json()\n    return token[\"access_token\"], time.time() + float(token[\"expires_in\"])\n    \n    common_config = {\n    'bootstrap.servers': \"${kafkaBootstrapUrl}\",\n    'security.protocol': 'SASL_SSL',\n    'sasl.mechanisms': 'OAUTHBEARER',\n    'oauth_cb': _get_token,\n    }\n    \n    topic=<topic>`;\n};\n\nexport const pythonProducer = `from confluent_kafka import Producer\n \nproducer = Producer(common_config)\n \nproducer.produce(topic=<topic>, value=b\"Sample Message\")\nproducer.flush()`;\n\nexport const pythonConsumerCodeBlock = `from confluent_kafka import Consumer\n \nconsumer_config = {\n    \"group.id\": \"test-group\",\n    'session.timeout.ms': 6000,\n    'auto.offset.reset': 'earliest',\n}\n\nconsumer = Consumer({ **consumer_config, **common_config })\n\nconsumer.subscribe([<topic>])`;\n\nexport const pythonConsumerExpandableBlock = `while True:\ntry:\n    msg = consumer.poll(1.0)\n    if msg is None:\n        continue\n\n    print(msg.value())\nexcept KeyboardInterrupt:\n    break\n\nconsumer.close()`;\n\nexport const quarkusConfigCodeBlock = `# Quarkus config\nquarkus.ssl.native=true\n\n# Configure the Kafka sink (we write to it)\nmp.messaging.outgoing.generated-price.connector=smallrye-kafka\nmp.messaging.outgoing.generated-price.topic=<topic>\nmp.messaging.outgoing.generated-price.value.serializer=org.apache.kafka.common.serialization.IntegerSerializer\n\n# Configure the Kafka source (we read from it)\nmp.messaging.incoming.prices.connector=smallrye-kafka\nmp.messaging.incoming.prices.topic=<topic>\nmp.messaging.incoming.prices.value.deserializer=org.apache.kafka.common.serialization.IntegerDeserializer`;\n\nexport const quarkusConfigExpandableBlock = (\n  kafkaBootstrapUrl: string,\n  tokenEndpointUrl: string\n) => {\n  return `\n# Configure docker config\nquarkus.container-image.builder=jib\nquarkus.kubernetes.deployment-target=kubernetes\nquarkus.container-image.build=false\nquarkus.container-image.push=false\n    \n## dev profile using user defined environment variables that uses SASL/OAUTHBEARER\n## ./mvnw quarkus:dev\n## ./mvnw package -Dquarkus.profile=dev\n    \n%dev.kafka.bootstrap.servers=\\${\"${kafkaBootstrapUrl}\"}\n%dev.kafka.security.protocol=SASL_SSL\n    \n%dev.kafka.sasl.mechanism=OAUTHBEARER\n%dev.kafka.sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\\\n    oauth.client.id=\"\\${<client_id>}\" \\\\\n    oauth.client.secret=\"\\${<client_secret>}\" \\\\\n    oauth.token.endpoint.uri=\"\\${\"${tokenEndpointUrl}\"}\" ;\n%dev.kafka.sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler`;\n};\n\nexport const quarkusProducerCodeBlock = `package org.acme.kafka;\nimport java.time.Duration;\nimport java.util.Random;\n\nimport javax.enterprise.context.ApplicationScoped;\n\nimport io.smallrye.mutiny.Multi;\nimport org.eclipse.microprofile.reactive.messaging.Outgoing;`;\n\nexport const quarkusProducerExpandableBlock = `\n/**\n* A bean producing random prices every 5 seconds.\n* The prices are written to a Kafka topic (prices). The Kafka configuration is specified in the application configuration.\n*/\n@ApplicationScoped\npublic class PriceGenerator {\n\n   private Random random = new Random();\n\n   @Outgoing(\"generated-price\")\n   public Multi<Integer> generate() {\n       return Multi.createFrom().ticks().every(Duration.ofSeconds(5))\n               .onOverflow().drop()\n               .map(tick -> random.nextInt(100));\n   }\n\n}`;\n\nexport const quarkusConsumerCodeBlock = `package org.acme.kafka;\nimport javax.enterprise.context.ApplicationScoped;\n\nimport org.eclipse.microprofile.reactive.messaging.Acknowledgment;\nimport org.eclipse.microprofile.reactive.messaging.Incoming;\nimport org.eclipse.microprofile.reactive.messaging.Outgoing;\n\nimport io.smallrye.reactive.messaging.annotations.Broadcast;\n\n/**\n * A bean consuming data from the \"prices\" Kafka topic and applying some conversion.\n * The result is pushed to the \"my-data-stream\" stream which is an in-memory stream.\n */\n@ApplicationScoped`;\n\nexport const quarkusConsumerExpandableBlock = `public class PriceConverter {\n\n    private static final double CONVERSION_RATE = 0.88;\n\n    // Consume from the \\`prices\\` channel and produce to the \\`my-data-stream\\` channel\n    @Incoming(\"prices\")\n    @Outgoing(\"my-data-stream\")\n    // Send to all subscribers\n    @Broadcast\n    // Acknowledge the messages before calling this method.\n    @Acknowledgment(Acknowledgment.Strategy.PRE_PROCESSING)\n    public double process(int priceInUsd) {\n        return priceInUsd * CONVERSION_RATE;\n    }\n\n}`;\n\nexport const springBootConfigCodeBlock = (\n  kafkaBootstrapUrl: string,\n  tokenEndpointUrl: string\n) => {\n  return `package com.example.kafkaconfig;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class KafkaConfig {\n\n   public static Map<String, Object> Config() {\n\n       Map<String, Object> config = new HashMap<>();\n\n       String kafkaHost = \"${kafkaBootstrapUrl}\";\n       String rhoasClientID = \"<client_id>\";\n       String rhoasClientSecret = \"<client_secret>\";\n       String rhoasOauthTokenUrl = \"${tokenEndpointUrl}\";`;\n};\n\nexport const springBootConfigExpandableBlock = `\n    config.put(\"bootstrap.servers\", kafkaHost);\n\n    config.put(\"security.protocol\", \"SASL_SSL\");\n    config.put(\"sasl.mechanism\", \"OAUTHBEARER\");\n\n    config.put(\"sasl.jaas.config\", \"org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required clientId=\\\\\"\" + rhoasClientID + \"\\\\\" clientSecret=\\\\\"\" + rhoasClientSecret + \"\\\\\" oauth.token.endpoint.uri=\\\\\"\" + rhoasOauthTokenUrl + \"\\\\\";\");\n    config.put(\"sasl.login.callback.handler.class\", \"org.apache.kafka.common.security.oauthbearer.secured.OAuthBearerLoginCallbackHandler\");\n    config.put(\"sasl.oauthbearer.token.endpoint.url\", rhoasOauthTokenUrl);\n    config.put(\"sasl.oauthbearer.scope.claim.name\", \"api.iam.service_accounts\");\n\n    return config;\n   }\n}`;\n\nexport const springBootProducerCodeBlock = `package com.example.kafkademo;\nimport org.apache.kafka.clients.producer.ProducerConfig;\nimport org.apache.kafka.common.serialization.StringSerializer;\nimport org.springframework.boot.ApplicationRunner;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.kafka.core.DefaultKafkaProducerFactory;\nimport org.springframework.kafka.core.KafkaTemplate;\nimport org.springframework.kafka.core.ProducerFactory;\nimport com.example.kafkaconfig.KafkaConfig;\n\nimport java.util.Map;`;\n\nexport const springBootProducerExpandableBlock = `\n@SpringBootApplication\npublic class KafkaProducerExample {\n\n  public static void main(String[] args) throws Exception {\n    SpringApplication.run(KafkaProducerExample.class, args);\n  }\n\n  @Bean\n  public ProducerFactory<String, String> producerFactory() {\n    Map<String, Object> config = KafkaConfig.Config();\n\n    config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n    config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n\n    return new DefaultKafkaProducerFactory<String, String>(config);\n  }\n\n  @Bean\n  public KafkaTemplate<String, String> kafkaTemplate() {\n    return new KafkaTemplate<>(producerFactory());\n  }\n\n  @Bean\n  public ApplicationRunner runner(KafkaTemplate<String, String> template) {\n    return args -> {\n      template.send(<\"topic\">, \"Test Message\");\n    };\n  }\n\n}`;\n\nexport const springBootListenerCodeBlock = `package com.example.kafkaconsumer.listener;\n\nimport com.example.kafkaconfig.KafkaConfig;\nimport org.apache.kafka.clients.consumer.ConsumerConfig;\nimport org.apache.kafka.common.serialization.StringDeserializer;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.kafka.annotation.KafkaListener;\nimport org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;\nimport org.springframework.kafka.core.ConsumerFactory;\nimport org.springframework.kafka.core.DefaultKafkaConsumerFactory;\nimport org.springframework.stereotype.Component;\n\nimport java.util.Map;`;\n\nexport const springBootListenerExpandableBlock = `@Component\npublic class Listener {\n\n    @KafkaListener(topics = <\"topic\">,\n            containerFactory = \"concurrentKafkaListenerContainerFactory\",\n            groupId = \"test_group\")\n\n    // Method\n    public void consume(String message)\n    {\n        // Print statement\n        System.out.println(message);\n    }\n}`;\n\nexport const springBootConsumerConfigCodeBlock = `package com.example.kafkaconsumer.config;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport com.example.kafkaconfig.KafkaConfig;\nimport org.apache.kafka.clients.consumer.ConsumerConfig;\nimport org.apache.kafka.common.serialization.StringDeserializer;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.kafka.annotation.EnableKafka;\nimport org.springframework.kafka.core.ConsumerFactory;\nimport org.springframework.kafka.core.DefaultKafkaConsumerFactory;\nimport org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;`;\n\nexport const springBootConsumerConfigExpandableBlock = `// Annotations\n@EnableKafka\n@Configuration\n\npublic class KafkaConsumerConfig {\n\n    @Bean\n    public ConsumerFactory<String, String> consumerFactory() {\n        Map<String, Object> config = KafkaConfig.Config();\n\n        config.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n        config.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n\n        return new DefaultKafkaConsumerFactory<>(config);\n    }\n\n    @Bean\n    public ConcurrentKafkaListenerContainerFactory concurrentKafkaListenerContainerFactory() {\n        ConcurrentKafkaListenerContainerFactory<\n                String, String> factory\n                = new ConcurrentKafkaListenerContainerFactory<>();\n        factory.setConsumerFactory(consumerFactory());\n        return factory;\n    }\n}`;\n\nexport const springBootConsumerExampleCodeBlock = `\npackage com.example.kafkaconsumer;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;`;\n\nexport const springBootConsumerExampleExpandableBlock = `\n@SpringBootApplication\npublic class KafkaConsumerExample {\n\n    public static void main(String[] args) {\n        SpringApplication.run(KafkaConsumerExample.class, args);\n    }\n\n}`;\n","import {\n  TextContent,\n  TextVariants,\n  Text,\n  ToggleGroup,\n  ToggleGroupItem,\n  Skeleton,\n} from \"@patternfly/react-core\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useState } from \"react\";\nimport { SampleCodeSnippet } from \"./SampleCodeSnippet\";\nimport {\n  javaConfigCodeBlock,\n  javaConfigExpandabledBlock,\n  javaConsumerCodeBlock,\n  javaConsumerExpandableBlock,\n  javaProducerCodeBlock,\n  javaProducerExpandableBlock,\n  pythonConfigCodeBlock,\n  pythonConfigExpandabledBlock,\n  pythonConsumerCodeBlock,\n  pythonConsumerExpandableBlock,\n  pythonProducer,\n  quarkusConfigCodeBlock,\n  quarkusConfigExpandableBlock,\n  quarkusConsumerCodeBlock,\n  quarkusConsumerExpandableBlock,\n  quarkusProducerCodeBlock,\n  quarkusProducerExpandableBlock,\n  springBootConfigCodeBlock,\n  springBootConfigExpandableBlock,\n  springBootConsumerConfigCodeBlock,\n  springBootConsumerConfigExpandableBlock,\n  springBootConsumerExampleCodeBlock,\n  springBootConsumerExampleExpandableBlock,\n  springBootListenerCodeBlock,\n  springBootListenerExpandableBlock,\n  springBootProducerCodeBlock,\n  springBootProducerExpandableBlock,\n} from \"./CodeSnippets\";\n\nexport type ClientType = \"java\" | \"python\" | \"quarkus\" | \"springboot\";\n\nexport type KafkaSampleCodeProps = {\n  kafkaBootstrapUrl: string;\n  tokenEndpointUrl: string | undefined;\n};\n\nexport const KafkaSampleCode: VoidFunctionComponent<KafkaSampleCodeProps> = ({\n  kafkaBootstrapUrl,\n  tokenEndpointUrl,\n}) => {\n  const { t } = useTranslation(\"kafka\");\n\n  const [clientSelect, setClientSelect] = useState<ClientType>(\"java\");\n\n  const clientProvider: { [provider in ClientType]: string } = {\n    java: t(\"sample_code.clients.java\"),\n    python: t(\"sample_code.clients.python\"),\n    quarkus: t(\"sample_code.clients.quarkus\"),\n    springboot: t(\"sample_code.clients.spring_boot\"),\n  };\n\n  return (\n    <div className=\"mas--details__drawer--tab-content\">\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.small}>\n          {t(\"sample_code.code_snippet_description_1\")}\n        </Text>\n        <Text component={TextVariants.small}>\n          {t(\"sample_code.code_snippet_description_2\")}\n        </Text>\n        <ToggleGroup>\n          <ToggleGroupItem\n            text={clientProvider[\"java\"]}\n            value=\"java\"\n            buttonId=\"java\"\n            isSelected={clientSelect === \"java\"}\n            onChange={() => setClientSelect(\"java\")}\n          />\n          <ToggleGroupItem\n            text={clientProvider[\"python\"]}\n            value=\"python\"\n            buttonId=\"python\"\n            isSelected={clientSelect === \"python\"}\n            onChange={() => setClientSelect(\"python\")}\n          />\n          <ToggleGroupItem\n            text={clientProvider[\"quarkus\"]}\n            value=\"quarkus\"\n            buttonId=\"quarkus\"\n            isSelected={clientSelect === \"quarkus\"}\n            onChange={() => setClientSelect(\"quarkus\")}\n          />\n          <ToggleGroupItem\n            text={clientProvider[\"springboot\"]}\n            value=\"springboot\"\n            buttonId=\"springboot\"\n            isSelected={clientSelect === \"springboot\"}\n            onChange={() => setClientSelect(\"springboot\")}\n          />\n        </ToggleGroup>\n        <Text component={TextVariants.h3} className=\"pf-u-mt-xl\">\n          {t(\"sample_code.sample_configuration_code\")}\n        </Text>\n        <Text component={TextVariants.small}>\n          {t(\"sample_code.sample_configuration_code_description\")}\n        </Text>\n        <Text component={TextVariants.small}>\n          {t(\"sample_code.bracket_text\")}\n        </Text>\n        {(() => {\n          switch (clientSelect) {\n            case \"java\":\n              return tokenEndpointUrl ? (\n                <SampleCodeSnippet\n                  codeBlockCode={javaConfigCodeBlock(\n                    kafkaBootstrapUrl,\n                    tokenEndpointUrl\n                  )}\n                  expandableCode={javaConfigExpandabledBlock}\n                  codeSnippet={clientSelect}\n                />\n              ) : (\n                <Skeleton fontSize=\"4xl\" />\n              );\n            case \"python\":\n              return tokenEndpointUrl ? (\n                <SampleCodeSnippet\n                  codeBlockCode={pythonConfigCodeBlock(tokenEndpointUrl)}\n                  expandableCode={pythonConfigExpandabledBlock(\n                    kafkaBootstrapUrl\n                  )}\n                  codeSnippet={clientSelect}\n                />\n              ) : (\n                <Skeleton fontSize=\"4xl\" />\n              );\n            case \"quarkus\":\n              return tokenEndpointUrl ? (\n                <SampleCodeSnippet\n                  codeBlockCode={quarkusConfigCodeBlock}\n                  expandableCode={quarkusConfigExpandableBlock(\n                    kafkaBootstrapUrl,\n                    tokenEndpointUrl\n                  )}\n                  codeSnippet={clientSelect}\n                />\n              ) : (\n                <Skeleton fontSize=\"4xl\" />\n              );\n            case \"springboot\":\n              return tokenEndpointUrl ? (\n                <SampleCodeSnippet\n                  codeBlockCode={springBootConfigCodeBlock(\n                    kafkaBootstrapUrl,\n                    tokenEndpointUrl\n                  )}\n                  expandableCode={springBootConfigExpandableBlock}\n                  codeSnippet={clientSelect}\n                />\n              ) : (\n                <Skeleton fontSize=\"4xl\" />\n              );\n            default:\n              return null;\n          }\n        })()}\n        <Text component={TextVariants.h3} className=\"pf-u-mt-xl\">\n          {t(\"sample_code.sample_producer_code\")}\n        </Text>\n        {clientSelect === \"quarkus\" ? (\n          <>\n            <Text component={TextVariants.small}>\n              {t(\"sample_code.sample_producer_code_quarkus_description\")}\n            </Text>\n            <SampleCodeSnippet\n              codeBlockCode={quarkusProducerCodeBlock}\n              expandableCode={quarkusProducerExpandableBlock}\n              codeSnippet={clientSelect}\n            />\n          </>\n        ) : (\n          <>\n            <Text component={TextVariants.small}>\n              <Trans\n                ns={\"kafka\"}\n                i18nKey={\"sample_code.sample_producer_code_description\"}\n                values={{\n                  client_type: clientProvider[clientSelect],\n                }}\n              />\n            </Text>\n            <Text component={TextVariants.small}>\n              {t(\"sample_code.bracket_text\")}\n            </Text>\n            {(() => {\n              switch (clientSelect) {\n                case \"java\":\n                  return (\n                    <SampleCodeSnippet\n                      codeBlockCode={javaProducerCodeBlock}\n                      expandableCode={javaProducerExpandableBlock}\n                      codeSnippet={clientSelect}\n                    />\n                  );\n                case \"python\":\n                  return <SampleCodeSnippet codeBlockCode={pythonProducer} />;\n                case \"springboot\":\n                  return (\n                    <SampleCodeSnippet\n                      codeBlockCode={springBootProducerCodeBlock}\n                      expandableCode={springBootProducerExpandableBlock}\n                      codeSnippet={clientSelect}\n                    />\n                  );\n                default:\n                  return null;\n              }\n            })()}\n          </>\n        )}\n\n        <Text component={TextVariants.h3} className=\"pf-u-mt-xl\">\n          {t(\"sample_code.sample_consumer_code\")}\n        </Text>\n        {clientSelect === \"springboot\" ? (\n          <>\n            <Text component={TextVariants.small}>\n              {t(\"sample_code.spring_boot_sample_consumer_code_description\")}\n            </Text>\n            <Text component={TextVariants.h4} className=\"pf-u-mt-xl\">\n              {t(\"sample_code.spring_boot_consumer_configuration\")}\n            </Text>\n            <Text component={TextVariants.small}>\n              {t(\"sample_code.spring_boot_consumer_configuration_description\")}\n            </Text>\n            <SampleCodeSnippet\n              codeBlockCode={springBootConsumerConfigCodeBlock}\n              expandableCode={springBootConsumerConfigExpandableBlock}\n              codeSnippet={clientSelect}\n            />\n            <Text component={TextVariants.h4} className=\"pf-u-mt-xl\">\n              {t(\"sample_code.spring_boot_listener\")}\n            </Text>\n            <Text component={TextVariants.small}>\n              {t(\"sample_code.spring_boot_listener_description\")}\n            </Text>\n            <Text component={TextVariants.small}>\n              {t(\"sample_code.bracket_text\")}\n            </Text>\n            <SampleCodeSnippet\n              codeBlockCode={springBootListenerCodeBlock}\n              expandableCode={springBootListenerExpandableBlock}\n              codeSnippet={clientSelect}\n            />\n            <Text component={TextVariants.h4} className=\"pf-u-mt-xl\">\n              {t(\"sample_code.spring_boot_consumer\")}\n            </Text>\n            <Text component={TextVariants.small}>\n              {t(\"sample_code.spring_boot_consumer_description\")}\n            </Text>\n            <SampleCodeSnippet\n              codeBlockCode={springBootConsumerExampleCodeBlock}\n              expandableCode={springBootConsumerExampleExpandableBlock}\n              codeSnippet={clientSelect}\n            />\n          </>\n        ) : (\n          <>\n            <Text component={TextVariants.small}>\n              <Trans\n                ns={\"kafka\"}\n                i18nKey={\"sample_code.sample_consumer_code_description\"}\n                values={{\n                  client_type: clientProvider[clientSelect],\n                }}\n              />\n            </Text>\n            {clientSelect === \"quarkus\" ? null : (\n              <Text component={TextVariants.small}>\n                {t(\"sample_code.bracket_text\")}\n              </Text>\n            )}\n            {(() => {\n              switch (clientSelect) {\n                case \"java\":\n                  return (\n                    <SampleCodeSnippet\n                      codeBlockCode={javaConsumerCodeBlock}\n                      expandableCode={javaConsumerExpandableBlock}\n                      codeSnippet={clientSelect}\n                    />\n                  );\n                case \"python\":\n                  return (\n                    <SampleCodeSnippet\n                      codeBlockCode={pythonConsumerCodeBlock}\n                      expandableCode={pythonConsumerExpandableBlock}\n                      codeSnippet={clientSelect}\n                    />\n                  );\n                case \"quarkus\":\n                  return (\n                    <SampleCodeSnippet\n                      codeBlockCode={quarkusConsumerCodeBlock}\n                      expandableCode={quarkusConsumerExpandableBlock}\n                      codeSnippet={clientSelect}\n                    />\n                  );\n                default:\n                  return null;\n              }\n            })()}\n          </>\n        )}\n      </TextContent>\n    </div>\n  );\n};\n","import type { TabsProps } from \"@patternfly/react-core\";\nimport {\n  Drawer,\n  DrawerActions,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerContentBody,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerPanelContent,\n  Tab,\n  Tabs,\n  TabTitleText,\n  Text,\n  TextContent,\n  TextVariants,\n  Title,\n  TitleSizes,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { parseISO } from \"date-fns\";\nimport type { FunctionComponent, VoidFunctionComponent } from \"react\";\nimport { useCallback, useMemo } from \"react\";\nimport type { Kafka } from \"ui-models/src/models/kafka\";\nimport { CreatingStatuses } from \"ui-models/src/models/kafka\";\nimport { useKafkaLabels } from \"../../hooks\";\nimport {\n  KafkaConnectionTabP2,\n  KafkaDetailsTab,\n  KafkaSampleCode,\n} from \"./components\";\n\nexport type KafkaInstanceDrawerProps = {\n  instance?: Kafka;\n  isExpanded: boolean;\n  activeTab: KafkaInstanceDrawerTab;\n  onTabChange: (tab: KafkaInstanceDrawerTab) => void;\n  tokenEndpointUrl: string | undefined;\n  onClose: () => void;\n};\n\nexport const KafkaInstanceDrawer: FunctionComponent<\n  KafkaInstanceDrawerProps\n> = ({\n  instance,\n  activeTab,\n  isExpanded,\n  onTabChange,\n  onClose,\n  children,\n  tokenEndpointUrl,\n}) => {\n  const content = useMemo(() => {\n    return (\n      <DrawerPanelContent>\n        {instance ? (\n          <KafkaInstanceDrawerPanel\n            instance={instance}\n            activeTab={activeTab}\n            onTabChange={onTabChange}\n            onClose={onClose}\n            tokenEndpointUrl={tokenEndpointUrl}\n          />\n        ) : null}\n      </DrawerPanelContent>\n    );\n  }, [activeTab, instance, onClose, onTabChange, tokenEndpointUrl]);\n  return (\n    <Drawer isExpanded={isExpanded} isInline={true}>\n      <DrawerContent panelContent={content}>\n        <DrawerContentBody\n          className={\"pf-u-display-flex pf-u-flex-direction-column\"}\n        >\n          {children}\n        </DrawerContentBody>\n      </DrawerContent>\n    </Drawer>\n  );\n};\n\nexport type KafkaInstanceDrawerTab = \"details\" | \"connections\";\n\nexport const KafkaInstanceDrawerPanel: VoidFunctionComponent<\n  Required<Omit<KafkaInstanceDrawerProps, \"isExpanded\">> & {\n    activeTab: KafkaInstanceDrawerTab;\n  }\n> = ({ instance, activeTab, onTabChange, onClose, tokenEndpointUrl }) => {\n  const { t } = useTranslation([\"kafka\"]);\n  const labels = useKafkaLabels();\n\n  const handleSelect: TabsProps[\"onSelect\"] = useCallback(\n    (_, tab) => {\n      const t = tab as KafkaInstanceDrawerTab;\n      onTabChange(t);\n    },\n    [onTabChange]\n  );\n\n  const isKafkaPending = CreatingStatuses.includes(instance.status);\n\n  return (\n    <>\n      <DrawerHead>\n        <TextContent>\n          <Text component={TextVariants.small} className={\"pf-u-mb-0\"}>\n            {t(\"common:name\")}\n          </Text>\n          <Title\n            headingLevel={\"h1\"}\n            size={TitleSizes[\"xl\"]}\n            className={\"pf-u-mt-0\"}\n          >\n            {instance.name}\n          </Title>\n        </TextContent>\n        <DrawerActions>\n          <DrawerCloseButton onClick={onClose} />\n        </DrawerActions>\n      </DrawerHead>\n      <DrawerPanelBody>\n        <Tabs activeKey={activeTab} onSelect={handleSelect}>\n          <Tab\n            eventKey={\"details\"}\n            title={<TabTitleText>{t(\"drawer-tabs.details\")}</TabTitleText>}\n          >\n            <div className={\"pf-u-pt-md pf-u-pb-md\"}>\n              <KafkaDetailsTab\n                id={instance.id}\n                owner={instance.owner}\n                createdAt={parseISO(instance.createdAt)}\n                updatedAt={parseISO(instance.updatedAt)}\n                expiryDate={\n                  instance.expiryDate\n                    ? parseISO(instance.expiryDate)\n                    : undefined\n                }\n                size={instance.size}\n                ingress={instance.ingress}\n                egress={instance.egress}\n                storage={instance.storage}\n                maxPartitions={instance.maxPartitions}\n                connections={instance.connections}\n                connectionRate={instance.connectionRate}\n                messageSize={instance.messageSize}\n                deployment={\n                  instance.clusterName !== undefined &&\n                  instance.clusterId !== undefined\n                    ? {\n                        type: \"cluster\",\n                        name: instance.clusterName,\n                        id: instance.clusterId,\n                      }\n                    : {\n                        type: \"cloud\",\n                        provider:\n                          labels.providers[instance.provider] ||\n                          instance.provider,\n                        region:\n                          labels.providerRegions[instance.provider][\n                            instance.region\n                          ] || instance.region,\n                      }\n                }\n                instanceType={instance.plan}\n                billing={instance.billing}\n                kafkaVersion={instance.version}\n              />\n            </div>\n          </Tab>\n          <Tab\n            eventKey={\"connections\"}\n            title={<TabTitleText>{t(\"drawer-tabs.connections\")}</TabTitleText>}\n            data-testid=\"drawerStreams-tabConnect\"\n          >\n            <div className={\"pf-u-pt-md pf-u-pb-md\"}>\n              <KafkaConnectionTabP2\n                isKafkaPending={isKafkaPending}\n                externalServer={getExternalServer(instance.bootstrapUrl)}\n                tokenEndPointUrl={tokenEndpointUrl}\n                linkToServiceAccount={`${\n                  document.location.pathname.startsWith(\"/beta\") ? \"/beta\" : \"\"\n                }/application-services/service-accounts`}\n                linkToAccessTab={`${instance.id}/details/acls`}\n                adminAPIUrl={getAdminServerUrl(instance.adminUrl)}\n                showCreateServiceAccountModal={() => {\n                  /* TODO */\n                }}\n                kafkaFleetManagerUrl={\n                  \"https://api.openshift.com/api/kafkas_mgmt/v1/openapi\"\n                }\n              />\n            </div>\n          </Tab>\n          <Tab\n            eventKey={\"samplecode\"}\n            title={<TabTitleText>{t(\"drawer-tabs.sample-code\")}</TabTitleText>}\n          >\n            <div className={\"pf-u-pt-md pf-u-pb-md\"}>\n              <KafkaSampleCode\n                kafkaBootstrapUrl={getExternalServer(instance.bootstrapUrl)!}\n                tokenEndpointUrl={tokenEndpointUrl}\n              />\n            </div>\n          </Tab>\n        </Tabs>\n      </DrawerPanelBody>\n    </>\n  );\n};\n\nconst getExternalServer = (bootstrapUrl: string | undefined) => {\n  if (!bootstrapUrl) {\n    return undefined;\n  }\n  return bootstrapUrl?.endsWith(\":443\") ? bootstrapUrl : `${bootstrapUrl}:443`;\n};\n\nconst getAdminServerUrl = (adminUrl: string | undefined) => {\n  return adminUrl ? `${adminUrl}/openapi` : undefined;\n};\n","import {\n  Alert,\n  Button,\n  Flex,\n  FlexItem,\n  HelperText,\n  HelperTextItem,\n  Spinner,\n  Split,\n  SplitItem,\n} from \"@patternfly/react-core\";\nimport {\n  CheckCircleIcon,\n  ExclamationTriangleIcon,\n} from \"@patternfly/react-icons\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { forwardRef } from \"react\";\nimport type { Status } from \"ui-models/src/models/kafka\";\nimport {\n  CreatingStatuses,\n  DegradedStatuses,\n  DeletingStatuses,\n  ReadyStatuses,\n  ResumingStatuses,\n  SuspendedStatuses,\n  SuspendingStatuses,\n} from \"ui-models/src/models/kafka\";\nimport \"./StatusLabel.css\";\n\ntype StatusLabelProps = {\n  value: Status;\n  showWarning?: boolean;\n  showError?: boolean;\n  withPopover?: boolean;\n};\n\n/**\n *<strong> Introduction </strong>\n *These are the various statuses that can show in the Kafka instances table under the \"Status\" header.\n */\nexport const StatusLabel = forwardRef<HTMLButtonElement, StatusLabelProps>(\n  (\n    { value, showWarning = false, showError = false, withPopover = false },\n    ref\n  ) => {\n    const { t } = useTranslation(\"kafka\");\n\n    const buttonVariant = withPopover ? \"link\" : \"plain\";\n\n    switch (true) {\n      case ReadyStatuses.includes(value):\n        return (\n          <div>\n            <Split hasGutter className=\"mas-c-status\">\n              <SplitItem>\n                <CheckCircleIcon className=\"mas-m-ready\" />\n              </SplitItem>\n              <SplitItem>{t(\"statuses.ready\")}</SplitItem>\n            </Split>\n          </div>\n        );\n\n      case CreatingStatuses.includes(value):\n        switch (true) {\n          case showWarning:\n            return (\n              <div>\n                <Split hasGutter className=\"mas-c-status\">\n                  <SplitItem>\n                    <Spinner size=\"md\" />\n                  </SplitItem>\n                  <SplitItem>\n                    <Button ref={ref} variant={buttonVariant} isInline>\n                      {t(\"statuses.creating\")}\n                    </Button>\n                  </SplitItem>\n                </Split>\n                <Alert\n                  variant=\"warning\"\n                  isInline\n                  isPlain\n                  title=\"This is taking longer than expected.\"\n                />\n              </div>\n            );\n          case showError:\n            return (\n              <div>\n                <Split hasGutter className=\"mas-c-status\">\n                  <SplitItem>\n                    <Spinner size=\"md\" />\n                  </SplitItem>\n                  <SplitItem>\n                    <Button ref={ref} variant={buttonVariant} isInline>\n                      {t(\"statuses.creating\")}\n                    </Button>\n                  </SplitItem>\n                </Split>\n                <Alert\n                  variant=\"danger\"\n                  isInline\n                  isPlain\n                  title={t(\"status_warning_or_error_title\")}\n                />\n              </div>\n            );\n          default:\n            return (\n              <div>\n                <Split hasGutter className=\"mas-c-status\">\n                  <SplitItem>\n                    <Spinner size=\"md\" />\n                  </SplitItem>\n                  <SplitItem>\n                    <Button ref={ref} variant={buttonVariant} isInline>\n                      {t(\"statuses.creating\")}\n                    </Button>\n                    <Flex>\n                      <FlexItem>\n                        <HelperText>\n                          <HelperTextItem variant=\"indeterminate\">\n                            {t(\"status_created_shortly_help\")}\n                          </HelperTextItem>\n                        </HelperText>\n                      </FlexItem>\n                    </Flex>\n                  </SplitItem>\n                </Split>\n              </div>\n            );\n        }\n\n      case DegradedStatuses.includes(value):\n        return (\n          <div>\n            <Split hasGutter className=\"mas-c-status\">\n              <SplitItem>\n                <ExclamationTriangleIcon className=\"mas-m-degraded\" />\n              </SplitItem>\n              <SplitItem>{t(\"statuses.degraded\")}</SplitItem>\n            </Split>\n          </div>\n        );\n\n      case SuspendingStatuses.includes(value):\n        return (\n          <div>\n            <p className=\"mas-m-deleting\"> {t(\"statuses.suspending\")}</p>\n          </div>\n        );\n      case SuspendedStatuses.includes(value):\n        return (\n          <div>\n            <Split hasGutter className=\"mas-c-status\">\n              <SplitItem>\n                <ExclamationTriangleIcon className=\"mas-m-degraded\" />\n              </SplitItem>\n              <SplitItem>\n                <Button ref={ref} variant={buttonVariant} isInline>\n                  {t(\"statuses.suspended\")}\n                </Button>\n              </SplitItem>\n            </Split>\n          </div>\n        );\n      case ResumingStatuses.includes(value):\n        return (\n          <div>\n            <Split hasGutter className=\"mas-c-status\">\n              <SplitItem>\n                <Spinner size=\"md\" />\n              </SplitItem>\n              <SplitItem>{t(\"statuses.resuming\")}</SplitItem>\n            </Split>\n          </div>\n        );\n      case DeletingStatuses.includes(value):\n        return (\n          <div>\n            <p className=\"mas-m-deleting\"> {t(\"statuses.deleting\")}</p>\n          </div>\n        );\n      default:\n        return null;\n    }\n  }\n);\n","export type KafkaStatus =\n  | \"ready\"\n  | \"degraded\"\n  | \"accepted\"\n  | \"provisioning\"\n  | \"preparing\"\n  | \"deprovision\"\n  | \"deleting\"\n  | \"suspended\"\n  | \"suspending\"\n  | \"resuming\";\n\nexport type PopoverStatus =\n  | \"pending\"\n  | \"provisioning\"\n  | \"preparing\"\n  | \"ready\"\n  | \"suspended\";\n\nexport const PopoverStatusOrder: PopoverStatus[] = [\n  \"pending\",\n  \"preparing\",\n  \"provisioning\",\n];\n\nexport const KafkaToPopoverMapping: {\n  [status in KafkaStatus]: PopoverStatus | null;\n} = {\n  ready: null,\n  degraded: null,\n  accepted: \"pending\",\n  provisioning: \"provisioning\",\n  preparing: \"preparing\",\n  deprovision: null,\n  deleting: null,\n  suspended: \"suspended\",\n  suspending: null,\n  resuming: null,\n};\n","import { ProgressStep, ProgressStepper } from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { PopoverStatus } from \"../types\";\nimport { PopoverStatusOrder } from \"../types\";\n\ntype StatusProgressStepperProps = {\n  currentStatus: PopoverStatus;\n};\n\nexport const StatusProgressStepper: VoidFunctionComponent<\n  StatusProgressStepperProps\n> = ({ currentStatus }) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n\n  const currentStep = PopoverStatusOrder.findIndex((s) => s === currentStatus);\n\n  const getVariant = (index: number) =>\n    (currentStep === index && \"info\") ||\n    (currentStep > index && \"success\") ||\n    \"default\";\n\n  return (\n    <ProgressStepper isVertical={true}>\n      <ProgressStep\n        id={\"pending\"}\n        titleId={\"pending\"}\n        isCurrent={currentStatus === \"pending\"}\n        description={t(\"kafka_status_popover.pending.description\")}\n        aria-label={t(\"kafka_status_popover.pending.description\")}\n        variant={getVariant(0)}\n      >\n        {t(\"kafka_status_popover.pending.title\")}\n      </ProgressStep>\n\n      <ProgressStep\n        id={\"provisioning\"}\n        titleId={\"provisioning\"}\n        isCurrent={currentStatus === \"provisioning\"}\n        description={t(\"kafka_status_popover.provisioning.description\")}\n        aria-label={t(\"kafka_status_popover.provisioning.description\")}\n        variant={getVariant(1)}\n      >\n        {t(\"kafka_status_popover.provisioning.title\")}\n      </ProgressStep>\n      <ProgressStep\n        id={\"preparing\"}\n        titleId={\"preparing\"}\n        isCurrent={currentStatus === \"preparing\"}\n        description={t(\"kafka_status_popover.preparing.description\")}\n        aria-label={t(\"kafka_status_popover.preparing.description\")}\n        variant={getVariant(2)}\n      >\n        {t(\"kafka_status_popover.preparing.title\")}\n      </ProgressStep>\n    </ProgressStepper>\n  );\n};\n","import {\n  Alert,\n  Button,\n  ButtonVariant,\n  Stack,\n  StackItem,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { Trans, useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { PopoverStatus } from \"../types\";\nimport { PopoverStatusOrder } from \"../types\";\nimport { StatusProgressStepper } from \"./StatusProgressStepper\";\n\nexport type StatusPopoverContentProps = {\n  currentStatus: PopoverStatus;\n  showWarning?: boolean;\n  showError?: boolean;\n  onClickConnectionTabLink: () => void;\n  onClickSupportLink: () => void;\n};\n\nexport const StatusPopoverContent: VoidFunctionComponent<\n  StatusPopoverContentProps\n> = ({\n  currentStatus,\n  showWarning = false,\n  showError = false,\n  onClickConnectionTabLink,\n  onClickSupportLink,\n}) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n\n  const currentStep = PopoverStatusOrder.findIndex((s) => s === currentStatus);\n\n  return (\n    <div>\n      <Stack hasGutter>\n        <StackItem>\n          {showWarning && (\n            <Alert\n              variant=\"warning\"\n              isInline\n              isPlain\n              title={t(\"kafka_status_popover.warning_or_error_title\")}\n            >\n              <TextContent>\n                <Text component={TextVariants.small}>\n                  <Trans\n                    ns={[\"create-kafka-instance\"]}\n                    i18nKey=\"kafka_status_popover.header_content_with_warning\"\n                    components={[\n                      <Button\n                        key=\"btn-connetcion-tab\"\n                        variant={ButtonVariant.link}\n                        onClick={onClickConnectionTabLink}\n                        isInline\n                      />,\n                    ]}\n                  />\n                </Text>\n              </TextContent>\n            </Alert>\n          )}\n          {showError && (\n            <Alert\n              variant=\"danger\"\n              isInline\n              isPlain\n              title={t(\"kafka_status_popover.warning_or_error_title\")}\n            >\n              <TextContent>\n                <Text component={TextVariants.small}>\n                  <Trans\n                    ns={[\"create-kafka-instance\"]}\n                    i18nKey=\"kafka_status_popover.header_content_with_error\"\n                    components={[\n                      <Button\n                        key=\"btn-connetcion-tab\"\n                        variant={ButtonVariant.link}\n                        onClick={onClickConnectionTabLink}\n                        isInline\n                      />,\n                      <Button\n                        key=\"btn-support-case\"\n                        variant={ButtonVariant.link}\n                        onClick={onClickSupportLink}\n                        isInline\n                      />,\n                    ]}\n                  />\n                </Text>\n              </TextContent>\n            </Alert>\n          )}\n          {!showError && !showWarning && (\n            <TextContent>\n              <Text component={TextVariants.small}>\n                <Trans\n                  ns={[\"create-kafka-instance\"]}\n                  i18nKey=\"kafka_status_popover.header_content\"\n                  components={[\n                    <Button\n                      key=\"btn-connetcion-tab\"\n                      variant={ButtonVariant.link}\n                      onClick={onClickConnectionTabLink}\n                      isInline\n                    />,\n                  ]}\n                />\n              </Text>\n            </TextContent>\n          )}\n        </StackItem>\n        <StackItem>\n          {t(\"common:progress_stepper_current_step\", {\n            currentStep,\n            total: PopoverStatusOrder.length,\n          })}\n        </StackItem>\n        <StackItem>\n          <StatusProgressStepper currentStatus={currentStatus} />\n        </StackItem>\n      </Stack>\n    </div>\n  );\n};\n","import type { PopoverProps } from \"@patternfly/react-core\";\nimport { Popover } from \"@patternfly/react-core\";\nimport type { RefObject, VoidFunctionComponent } from \"react\";\nimport { useCallback, useState } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { PopoverStatus } from \"../types\";\nimport type { StatusPopoverContentProps } from \"./StatusPopoverContent\";\nimport { StatusPopoverContent } from \"./StatusPopoverContent\";\n\nexport type StatusPopoverProps = {\n  status: PopoverStatus;\n  initialOpen?: boolean;\n  showWarning?: boolean;\n  showError?: boolean;\n  children?: PopoverProps[\"children\"];\n  onClickConnectionTabLink: StatusPopoverContentProps[\"onClickConnectionTabLink\"];\n  onClickSupportLink: StatusPopoverContentProps[\"onClickSupportLink\"];\n  reference?: RefObject<HTMLButtonElement>;\n};\n\n/**\n * ## Introduction\n *\n * This is a popover that can be reached from the Kafka Instance table while the status of the instance in question is “Creating”.\n * A Kafka instance usually takes a few minutes to create. The purpose of this popover is to give the user some insights into\n * the creation process of their instance while they wait for it to be available to use.\n *\n * - The text at the top explains that the instance will be ready shortly & suggests that the user creates a service account while they wait.\n *  (Provides a link to the “Connections tab\" where this is done).\n *\n * - The steps shown in the progress stepper are statuses that show in the api. They have been grouped together under the one overall\n * “Creating status” in the table.There is some descriptive text accompanying each step too. When these steps are complete the instance will be ready for use\n *\n * - The popover is only available while instance creation is in progress.\n * - After creation is complete the table displays the ready status and the popover is no longer available.\n *\n */\nexport const StatusPopover: VoidFunctionComponent<StatusPopoverProps> = ({\n  initialOpen = false,\n  status,\n  showWarning = false,\n  showError = false,\n  onClickConnectionTabLink,\n  onClickSupportLink,\n  reference,\n  children,\n}) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n\n  const [isVisible, setIsVisible] = useState(initialOpen);\n  const onClose = () => setIsVisible(false);\n\n  const handleClickConnectionTabLink = useCallback(() => {\n    onClose();\n    onClickConnectionTabLink();\n  }, [onClickConnectionTabLink]);\n\n  const handleClickSupportLink = useCallback(() => {\n    onClose();\n    onClickSupportLink();\n  }, [onClickSupportLink]);\n\n  return (\n    <Popover\n      headerContent={t(\"kafka_status_popover.title\")}\n      bodyContent={\n        <StatusPopoverContent\n          currentStatus={status}\n          showWarning={showWarning}\n          showError={showError}\n          onClickConnectionTabLink={handleClickConnectionTabLink}\n          onClickSupportLink={handleClickSupportLink}\n        />\n      }\n      isVisible={isVisible}\n      shouldOpen={() => setIsVisible(true)}\n      shouldClose={() => setIsVisible(false)}\n      position={\"right\"}\n      enableFlip={true}\n      reference={reference}\n    >\n      {children}\n    </Popover>\n  );\n};\n","import type { PopoverProps } from \"@patternfly/react-core\";\nimport { Popover, TextContent } from \"@patternfly/react-core\";\nimport { ExclamationTriangleIcon } from \"@patternfly/react-icons\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { RefObject, VoidFunctionComponent } from \"react\";\n\nexport type SuspendedPopoverProps = {\n  children?: PopoverProps[\"children\"];\n  reference?: RefObject<HTMLButtonElement>;\n};\n\nexport const SuspendedPopover: VoidFunctionComponent<SuspendedPopoverProps> = ({\n  children,\n  reference,\n}) => {\n  const { t } = useTranslation(\"kafka\");\n  return (\n    <Popover\n      alertSeverityVariant={\"warning\"}\n      headerIcon={<ExclamationTriangleIcon />}\n      headerContent={t(\"suspend_popover_title\")}\n      bodyContent={\n        <TextContent>\n          <p>{t(\"suspend_popover_body_1\")}</p>\n        </TextContent>\n      }\n      position={\"right\"}\n      reference={reference}\n    >\n      {children}\n    </Popover>\n  );\n};\n","import { useInterval } from \"@rhoas/app-services-ui-components\";\nimport { differenceInMinutes } from \"date-fns\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback, useRef, useState } from \"react\";\nimport type { Status } from \"ui-models/src/models/kafka\";\nimport type { StatusPopoverProps } from \"./components\";\nimport { StatusLabel, StatusPopover, SuspendedPopover } from \"./components\";\nimport { KafkaToPopoverMapping } from \"./types\";\n\nexport type KafkaInstanceStatusProps = {\n  status: Status;\n  createdAt: Date;\n  warningAfterMinutes?: number;\n  errorAfterMinutes?: number;\n} & Pick<StatusPopoverProps, \"onClickConnectionTabLink\" | \"onClickSupportLink\">;\n\n/**\n * A component to show the status of a Kafka instance combining the\n * `StatusPopover` with the `StatusLabel`, with automatic handling of which\n * statuses should have a companion popover.\n */\nexport const KafkaInstanceStatus: VoidFunctionComponent<\n  KafkaInstanceStatusProps\n> = ({\n  status,\n  createdAt,\n  warningAfterMinutes = 15,\n  errorAfterMinutes = 30,\n  onClickConnectionTabLink,\n  onClickSupportLink,\n}) => {\n  const popoverStatus = KafkaToPopoverMapping[status];\n  const [alert, setAlert] = useState<\"warning\" | \"error\" | false>(false);\n  const labelRef = useRef<HTMLButtonElement>(null);\n\n  const checkCreatedAt = useCallback(() => {\n    const elapsed = differenceInMinutes(new Date(), createdAt);\n    if (elapsed > errorAfterMinutes) {\n      setAlert(\"error\");\n    } else if (elapsed > warningAfterMinutes) {\n      setAlert(\"warning\");\n    } else {\n      setAlert(false);\n    }\n  }, [createdAt, errorAfterMinutes, warningAfterMinutes]);\n\n  useInterval(checkCreatedAt, 5000);\n  const showWarning = alert === \"warning\";\n  const showError = alert === \"error\";\n  return (\n    <>\n      {popoverStatus === \"suspended\" ? (\n        <SuspendedPopover reference={labelRef} />\n      ) : (\n        popoverStatus && (\n          <StatusPopover\n            status={popoverStatus}\n            showWarning={showWarning}\n            showError={showError}\n            onClickConnectionTabLink={onClickConnectionTabLink}\n            onClickSupportLink={onClickSupportLink}\n            reference={labelRef}\n          />\n        )\n      )}\n      <StatusLabel\n        value={status}\n        showWarning={showWarning}\n        showError={showError}\n        withPopover={popoverStatus !== undefined}\n        ref={labelRef}\n      />\n    </>\n  );\n};\n","import { Button, PageSection, Stack, StackItem } from \"@patternfly/react-core\";\nimport type { TableViewProps } from \"@rhoas/app-services-ui-components\";\nimport {\n  FormatDate,\n  TableView,\n  Trans,\n  useTranslation,\n} from \"@rhoas/app-services-ui-components\";\nimport { parseISO } from \"date-fns\";\nimport { Link } from \"react-router-dom\";\nimport type { Kafka, SimplifiedStatus } from \"ui-models/src/models/kafka\";\nimport { DeletingStatuses } from \"ui-models/src/models/kafka\";\nimport { useKafkaLabels } from \"../../hooks\";\nimport { KafkaInstanceActions } from \"../KafkaInstanceActions\";\nimport { KafkaInstanceStatus } from \"../KafkaInstanceStatus\";\nimport type {\n  EmptyStateNoInstancesProps,\n  EmptyStateNoResultsProps,\n} from \"./components\";\nimport { EmptyStateNoInstances, EmptyStateNoResults } from \"./components\";\n\nconst StandardColumns = [\n  \"name\",\n  \"owner\",\n  \"createdAt\",\n  \"provider\",\n  \"region\",\n  \"status\",\n] as const;\n\nconst DedicatedColumns = [\n  \"name\",\n  \"owner\",\n  \"createdAt\",\n  \"clusterName\",\n  \"status\",\n] as const;\n\nexport type KafkaInstancesProps = {\n  columns: \"standard\" | \"dedicated\";\n  instances: Array<Kafka> | undefined | null;\n  getUrlForInstance: (row: Kafka) => string;\n  names: string[];\n  owners: string[];\n  statuses: string[];\n  onCreate: () => void;\n  onSearchName: (value: string) => void;\n  onRemoveNameChip: (value: string) => void;\n  onRemoveNameChips: () => void;\n  onSearchOwner: (value: string) => void;\n  onRemoveOwnerChip: (value: string) => void;\n  onRemoveOwnerChips: () => void;\n  onSearchStatus: (value: SimplifiedStatus) => void;\n  onRemoveStatusChip: (value: SimplifiedStatus) => void;\n  onRemoveStatusChips: () => void;\n  onDetails: (row: Kafka) => void;\n  onConnection: (row: Kafka) => void;\n  canChangeOwner: (row: Kafka) => boolean;\n  onChangeOwner: (row: Kafka) => void;\n  canDelete: (row: Kafka) => boolean;\n  onDelete: (row: Kafka) => void;\n  onClickConnectionTabLink: (row: Kafka) => void;\n  onClickSupportLink: () => void;\n  onInstanceLinkClick: (row: Kafka) => void;\n  canHaveInstanceLink: (row: Kafka) => boolean;\n  canOpenConnection: (row: Kafka) => boolean;\n} & Pick<\n  TableViewProps<\n    Kafka,\n    (typeof StandardColumns | typeof DedicatedColumns)[number]\n  >,\n  | \"itemCount\"\n  | \"page\"\n  | \"perPage\"\n  | \"onPageChange\"\n  | \"isRowSelected\"\n  | \"isColumnSortable\"\n  | \"onClearAllFilters\"\n> &\n  Partial<\n    Pick<\n      TableViewProps<\n        Kafka,\n        (typeof StandardColumns | typeof DedicatedColumns)[number]\n      >,\n      \"emptyStateNoData\"\n    >\n  > &\n  EmptyStateNoInstancesProps &\n  EmptyStateNoResultsProps;\n\nexport const KafkaInstances = <\n  Columns extends typeof StandardColumns | typeof DedicatedColumns\n>({\n  columns,\n  instances,\n  itemCount,\n  page,\n  perPage,\n  names,\n  owners,\n  statuses,\n  getUrlForInstance,\n  isRowSelected,\n  isColumnSortable,\n  onPageChange,\n  onDetails,\n  onConnection,\n  canChangeOwner,\n  onChangeOwner,\n  canDelete,\n  onDelete,\n  onCreate,\n  onQuickstartGuide,\n  onClickConnectionTabLink,\n  onClickSupportLink,\n  onInstanceLinkClick,\n  onSearchName,\n  onRemoveNameChip,\n  onRemoveNameChips,\n  onSearchOwner,\n  onRemoveOwnerChip,\n  onRemoveOwnerChips,\n  onSearchStatus,\n  onRemoveStatusChip,\n  onRemoveStatusChips,\n  onClearAllFilters,\n  emptyStateNoData,\n  canHaveInstanceLink,\n  canOpenConnection,\n}: KafkaInstancesProps) => {\n  const { t } = useTranslation(\"kafka\");\n  const labels = useKafkaLabels();\n  const breakpoint = \"lg\";\n\n  const isFiltered =\n    names.length > 0 || owners.length > 0 || statuses.length > 0;\n\n  return (\n    <PageSection isFilled={true}>\n      <TableView\n        data={instances}\n        columns={columns === \"standard\" ? StandardColumns : DedicatedColumns}\n        renderHeader={({ column, Th, key }) => (\n          <Th key={key}>{labels.fields[column]}</Th>\n        )}\n        renderCell={({ column, row, Td, key }) => {\n          const timeCreatedDate = parseISO(row.createdAt);\n          const instanceLinkEnable = canHaveInstanceLink(row);\n          return (\n            <Td key={key} dataLabel={labels.fields[column]}>\n              {(() => {\n                switch (column) {\n                  case \"name\":\n                    return (\n                      <Button\n                        variant=\"link\"\n                        component={(props) => (\n                          <Link to={getUrlForInstance(row)} {...props}>\n                            {row.name}\n                          </Link>\n                        )}\n                        isInline={true}\n                        isAriaDisabled={!instanceLinkEnable}\n                        isDisabled={!instanceLinkEnable}\n                        onClick={() => onInstanceLinkClick(row)}\n                      />\n                    );\n                  case \"provider\":\n                    return labels.providers[row.provider];\n                  case \"createdAt\":\n                    return (\n                      <Stack>\n                        <StackItem>\n                          <FormatDate\n                            date={timeCreatedDate}\n                            format={\"distanceToNowWithAgo\"}\n                          />\n                        </StackItem>\n                        {row.expiryDate && (\n                          <StackItem>\n                            <Trans\n                              i18nKey=\"will_expire_short\"\n                              ns={[\"kafka\"]}\n                              components={{\n                                time: (\n                                  <FormatDate\n                                    date={parseISO(row.expiryDate)}\n                                    format=\"expiration\"\n                                  />\n                                ),\n                              }}\n                            />\n                          </StackItem>\n                        )}\n                      </Stack>\n                    );\n                  case \"status\":\n                    return (\n                      <KafkaInstanceStatus\n                        status={row[\"status\"]}\n                        createdAt={timeCreatedDate}\n                        onClickConnectionTabLink={() =>\n                          onClickConnectionTabLink(row)\n                        }\n                        onClickSupportLink={onClickSupportLink}\n                      />\n                    );\n                  case \"clusterName\":\n                    return row.clusterName;\n                  default:\n                    return row[column];\n                }\n              })()}\n            </Td>\n          );\n        }}\n        renderActions={({ row }) => {\n          const changeOwnerEnabled = canChangeOwner(row);\n          const deleteEnabled = canDelete(row);\n          const openConnectionEnabled = canOpenConnection(row);\n          return (\n            <KafkaInstanceActions\n              onDetails={() => onDetails(row)}\n              onConnection={() => onConnection(row)}\n              canOpenConnection={openConnectionEnabled}\n              canChangeOwner={changeOwnerEnabled}\n              onChangeOwner={() => onChangeOwner(row)}\n              canDelete={deleteEnabled}\n              onDelete={() => onDelete(row)}\n            />\n          );\n        }}\n        onRowClick={({ row }) => onDetails(row)}\n        isColumnSortable={isColumnSortable}\n        isRowSelected={isRowSelected}\n        isRowDeleted={({ row }) => DeletingStatuses.includes(row[\"status\"])}\n        toolbarBreakpoint={breakpoint}\n        filters={{\n          [labels.fields.name]: {\n            type: \"search\",\n            chips: names,\n            onSearch: onSearchName,\n            onRemoveChip: onRemoveNameChip,\n            onRemoveGroup: onRemoveNameChips,\n            validate: (value) => /^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(value),\n            errorMessage: t(\"kafka:input_field_invalid_message\"),\n          },\n          [labels.fields.owner]: {\n            type: \"search\",\n            chips: owners,\n            onSearch: onSearchOwner,\n            onRemoveChip: onRemoveOwnerChip,\n            onRemoveGroup: onRemoveOwnerChips,\n            validate: (value: string) => !/[\"$^<>|+%/;:,\\s*=~#()]/.test(value),\n            errorMessage: t(\"kafka:input_field_invalid_message\"),\n          },\n          [labels.fields.status]: {\n            type: \"checkbox\",\n            chips: statuses,\n            options: labels.statusesSimplified,\n            onToggle: onSearchStatus,\n            onRemoveChip: onRemoveStatusChip,\n            onRemoveGroup: onRemoveStatusChips,\n          },\n        }}\n        actions={[\n          {\n            label: t(\"create_instance\"),\n            onClick: onCreate,\n            isPrimary: true,\n          },\n        ]}\n        itemCount={itemCount}\n        page={page}\n        perPage={perPage}\n        onPageChange={onPageChange}\n        onClearAllFilters={onClearAllFilters}\n        ariaLabel={t(\"table.title\")}\n        isFiltered={isFiltered}\n        emptyStateNoData={\n          emptyStateNoData || (\n            <EmptyStateNoInstances\n              onCreate={onCreate}\n              onQuickstartGuide={onQuickstartGuide}\n            />\n          )\n        }\n        emptyStateNoResults={\n          <EmptyStateNoResults onClearAllFilters={onClearAllFilters} />\n        }\n      />\n    </PageSection>\n  );\n};\n","import type { DatePickerProps, TimePickerProps } from \"@patternfly/react-core\";\nimport { DatePicker, InputGroup, TimePicker } from \"@patternfly/react-core\";\nimport { formatISO, parseISO, setHours, setMinutes } from \"date-fns\";\nimport { format } from \"date-fns-tz\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useState } from \"react\";\nimport type { DateIsoString } from \"../../../../../ui-models/src/types\";\n\nexport type DateTimePickerProps = {\n  isDisabled: boolean;\n  value: DateIsoString | undefined;\n  onChange: (value: DateIsoString) => void;\n};\nexport const DateTimePicker: VoidFunctionComponent<DateTimePickerProps> = ({\n  isDisabled,\n  value,\n  onChange,\n}) => {\n  const date = value ? parseISO(value) : undefined;\n\n  const [time, setTime] = useState<string | null>(null);\n\n  const onSelectCalendar: DatePickerProps[\"onChange\"] = (_, newDate) => {\n    if (newDate) {\n      onChange(formatISO(newDate) as DateIsoString);\n    }\n  };\n\n  const onSelectTime: TimePickerProps[\"onChange\"] = (\n    time,\n    hour,\n    minute,\n    __,\n    isValid\n  ) => {\n    if (\n      isValid &&\n      date &&\n      hour != undefined &&\n      hour > 0 &&\n      (time.includes(\"AM\") || time.includes(\"PM\"))\n    ) {\n      let newDate = date;\n      if (hour !== undefined) {\n        newDate = setHours(newDate, hour);\n      }\n      if (minute !== undefined) {\n        newDate = setMinutes(newDate, minute);\n      }\n      setTime(time);\n      onChange(formatISO(newDate) as DateIsoString);\n    }\n  };\n\n  return (\n    <InputGroup>\n      <DatePicker\n        isDisabled={isDisabled}\n        value={date ? format(date, \"yyyy-MM-dd\") : undefined}\n        onChange={onSelectCalendar}\n      />\n      <TimePicker\n        isDisabled={!date || isDisabled}\n        time={time ? time : \"\"}\n        onChange={onSelectTime}\n      />\n    </InputGroup>\n  );\n};\n","import {\n  Dropdown,\n  DropdownItem,\n  DropdownPosition,\n  DropdownSeparator,\n  DropdownToggle,\n  InputGroup,\n  TextInput,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useState } from \"react\";\nimport type { DateIsoString } from \"../../../../../ui-models/src/types\";\nimport { DateTimePicker } from \"./DateTimePicker\";\n\ntype Category = \"offset\" | \"timestamp\" | \"epoch\" | \"latest\";\nexport type FilterGroupProps = {\n  isDisabled: boolean;\n  offset: number | undefined;\n  epoch: number | undefined;\n  timestamp: DateIsoString | undefined;\n  onOffsetChange: (value: number | undefined) => void;\n  onTimestampChange: (value: DateIsoString | undefined) => void;\n  onEpochChange: (value: number | undefined) => void;\n  onLatest: () => void;\n};\nexport const FilterGroup: VoidFunctionComponent<FilterGroupProps> = ({\n  isDisabled,\n  offset,\n  epoch,\n  timestamp,\n  onOffsetChange,\n  onTimestampChange,\n  onEpochChange,\n  onLatest,\n}) => {\n  const { t } = useTranslation(\"message-browser\");\n  const [currentCategory, setCurrentCategory] = useState<Category>(\"latest\");\n  const [isOpen, setIsOpen] = useState(false);\n  const labels: { [key in Category]: string } = {\n    offset: t(\"filter.offset\"),\n    timestamp: t(\"filter.timestamp\"),\n    epoch: t(\"filter.epoch\"),\n    latest: t(\"filter.latest\"),\n  };\n  return (\n    <ToolbarItem>\n      <InputGroup>\n        <Dropdown\n          data-testid={\"filter-group-dropdown\"}\n          toggle={\n            <DropdownToggle\n              onToggle={setIsOpen}\n              isDisabled={isDisabled}\n              data-testid={\"filter-group\"}\n            >\n              {labels[currentCategory]}\n            </DropdownToggle>\n          }\n          position={DropdownPosition.left}\n          isOpen={isOpen}\n          onSelect={() => setIsOpen(false)}\n          dropdownItems={[\n            <DropdownItem\n              key=\"offset\"\n              value=\"offset\"\n              autoFocus={currentCategory === \"offset\"}\n              onClick={() => setCurrentCategory(\"offset\")}\n            >\n              {labels[\"offset\"]}\n            </DropdownItem>,\n            <DropdownItem\n              key=\"timestamp\"\n              value=\"timestamp\"\n              autoFocus={currentCategory === \"timestamp\"}\n              onClick={() => setCurrentCategory(\"timestamp\")}\n            >\n              {labels[\"timestamp\"]}\n            </DropdownItem>,\n            <DropdownItem\n              key=\"epoch\"\n              value=\"epoch\"\n              autoFocus={currentCategory === \"epoch\"}\n              onClick={() => setCurrentCategory(\"epoch\")}\n            >\n              {labels[\"epoch\"]}\n            </DropdownItem>,\n            <DropdownSeparator key={\"divider\"} />,\n            <DropdownItem\n              key=\"latest\"\n              value=\"latest\"\n              autoFocus={currentCategory === \"latest\"}\n              onClick={() => {\n                setCurrentCategory(\"latest\");\n                onLatest();\n              }}\n            >\n              {labels[\"latest\"]}\n            </DropdownItem>,\n          ]}\n        />\n        {currentCategory === \"offset\" && (\n          <TextInput\n            isDisabled={isDisabled}\n            type={\"number\"}\n            aria-label={t(\"filter.offset_aria_label\")}\n            placeholder={t(\"filter.offset_placeholder\")}\n            onChange={(value) => {\n              if (value !== \"\") {\n                const newOffset = parseInt(value, 10);\n                if (Number.isInteger(newOffset)) {\n                  onOffsetChange(newOffset);\n                }\n              } else {\n                onOffsetChange(undefined);\n              }\n            }}\n            value={offset === undefined ? \"\" : offset}\n          />\n        )}\n        {currentCategory === \"timestamp\" && (\n          <DateTimePicker\n            isDisabled={isDisabled}\n            value={timestamp}\n            onChange={onTimestampChange}\n          />\n        )}\n        {currentCategory === \"epoch\" && (\n          <TextInput\n            isDisabled={isDisabled}\n            type={\"number\"}\n            aria-label={t(\"filter.epoch_aria_label\")}\n            placeholder={t(\"filter.epoch_placeholder\")}\n            className=\"pf-u-flex-basis-auto pf-u-flex-grow-0 pf-u-w-initial\"\n            size={t(\"filter.epoch_placeholder\").length}\n            onChange={(value) => {\n              if (value !== \"\" && Number(value) >= 0)\n                onEpochChange(Number(value));\n              else onEpochChange(undefined);\n            }}\n            value={epoch == undefined ? \"\" : epoch}\n          />\n        )}\n      </InputGroup>\n    </ToolbarItem>\n  );\n};\n","import {\n  InputGroup,\n  InputGroupText,\n  Select,\n  SelectOption,\n} from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport type LimitSelectorProps = {\n  value: number;\n  isDisabled: boolean;\n  onChange: (value: number) => void;\n};\nexport const LimitSelector: VoidFunctionComponent<LimitSelectorProps> = ({\n  value,\n  isDisabled,\n  onChange,\n}) => {\n  const { t } = useTranslation(\"message-browser\");\n  const [isOpen, setIsOpen] = useState(false);\n  const toggleOpen = (isOpen: boolean) => setIsOpen(isOpen);\n  const titleId = \"limit-selector\";\n\n  return (\n    <InputGroup>\n      <InputGroupText className=\"pf-c-content\">\n        {t(\"limit_label\")}\n      </InputGroupText>\n      <div>\n        <span id={titleId} hidden>\n          Select a state\n        </span>\n\n        <Select\n          aria-label={t(\"per_page_aria_label\")}\n          onToggle={toggleOpen}\n          selections={value !== undefined ? [t(\"limit\", { value })] : undefined}\n          isOpen={isOpen}\n          isDisabled={isDisabled}\n          onSelect={() => setIsOpen(false)}\n          data-testid={\"limit-selector\"}\n        >\n          {[10, 20, 50].map((value, idx) => (\n            <SelectOption\n              key={idx}\n              value={t(\"limit\", { value })}\n              onClick={() => onChange(value)}\n            />\n          ))}\n        </Select>\n      </div>\n    </InputGroup>\n  );\n};\n","import type { Message } from \"ui-models/src/models/message\";\n\nexport function isSameMessage(m1: Message, m2: Message) {\n  return JSON.stringify(m1) === JSON.stringify(m2);\n}\n\nexport function beautifyUnknownValue(value: string): string {\n  try {\n    return JSON.stringify(JSON.parse(value), null, 2);\n  } catch (e) {\n    // noop\n  }\n  return value;\n}\n\nexport function truncate(value: string, length: number): [string, boolean] {\n  const shouldTruncate = value.length > length;\n  return [\n    shouldTruncate ? `${value.substring(0, length)}...` : value,\n    shouldTruncate,\n  ];\n}\n","export enum RetentionTimeUnits {\n  MILLISECOND = \"milliseconds\",\n  SECOND = \"seconds\",\n  MINUTE = \"minutes\",\n  HOUR = \"hours\",\n  DAY = \"days\",\n  WEEK = \"weeks\",\n  CUSTOM = \"custom\",\n  UNLIMITED = \"unlimited\",\n}\n\nexport enum RetentionSizeUnits {\n  BYTE = \"bytes\",\n  KIBIBYTE = \"kibibytes\",\n  MEBIBYTE = \"mebibytes\",\n  GIBIBYTE = \"gibibytes\",\n  TEBIBYTE = \"tebibytes\",\n  CUSTOM = \"custom\",\n  UNLIMITED = \"unlimited\",\n}\n\nexport const unitsToBytes = {\n  [RetentionSizeUnits.BYTE]: BigInt(\"1\"),\n  [RetentionSizeUnits.KIBIBYTE]: BigInt(\"1024\"),\n  [RetentionSizeUnits.MEBIBYTE]: BigInt(\"1048576\"),\n  [RetentionSizeUnits.GIBIBYTE]: BigInt(\"1073741824\"),\n  [RetentionSizeUnits.TEBIBYTE]: BigInt(\"1099511627776\"),\n};\n\nexport const unitsToMilliSecond = {\n  [RetentionTimeUnits.MILLISECOND]: BigInt(\"1\"),\n  [RetentionTimeUnits.SECOND]: BigInt(\"1000\"),\n  [RetentionTimeUnits.MINUTE]: BigInt(\"60000\"),\n  [RetentionTimeUnits.HOUR]: BigInt(\"3600000\"),\n  [RetentionTimeUnits.DAY]: BigInt(\"86400000\"),\n};\n\ntype ConversionUnit = {\n  value: bigint;\n  unit: string;\n};\n\nexport const millisecondsToTime = (value: bigint): ConversionUnit => {\n  if (value) {\n    if (value % unitsToMilliSecond.days == BigInt(0))\n      return { value: value / unitsToMilliSecond.days, unit: \"days\" };\n    if (value % unitsToMilliSecond.hours == BigInt(0))\n      return { value: value / unitsToMilliSecond.hours, unit: \"hours\" };\n    if (value % unitsToMilliSecond.minutes == BigInt(0))\n      return { value: value / unitsToMilliSecond.minutes, unit: \"minutes\" };\n    if (value % unitsToMilliSecond.seconds == BigInt(0))\n      return { value: value / unitsToMilliSecond.seconds, unit: \"seconds\" };\n  }\n\n  return { value, unit: \"milliseconds\" };\n};\n\nexport const formattedRetentionTime = (time: bigint): string => {\n  const { unit, value } = millisecondsToTime(time);\n  return Number(value) === -1 ? \"Unlimited\" : `${time} ms (${value} ${unit})`;\n};\n\nexport const formattedRetentionSize = (size: bigint): string => {\n  const { unit, value } = bytesToMemorySize(size);\n  return Number(value) === -1\n    ? \"Unlimited\"\n    : `${size} bytes (${value} ${unit})`;\n};\n\nexport const bytesToMemorySize = (value: bigint): ConversionUnit => {\n  if (value) {\n    if (value % unitsToBytes.tebibytes == BigInt(0))\n      return { value: value / unitsToBytes.tebibytes, unit: \"tebibytes\" };\n    if (value % unitsToBytes.gibibytes == BigInt(0))\n      return { value: value / unitsToBytes.gibibytes, unit: \"gibibytes\" };\n    if (value % unitsToBytes.mebibytes == BigInt(0))\n      return { value: value / unitsToBytes.mebibytes, unit: \"mebibytes\" };\n    if (value % unitsToBytes.kibibytes == BigInt(0))\n      return { value: value / unitsToBytes.kibibytes, unit: \"kibibytes\" };\n  }\n\n  return { value, unit: \"bytes\" };\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport type NoDataCellProps = {\n  columnLabel: string;\n};\nexport const NoDataCell: VoidFunctionComponent<NoDataCellProps> = ({\n  columnLabel,\n}) => {\n  const { t } = useTranslation(\"common\");\n  return (\n    <span className=\"pf-u-color-400\">\n      {t(\"table_cell_no_data\", { column: columnLabel })}\n    </span>\n  );\n};\n","import {\n  ClipboardCopy,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  DrawerActions,\n  DrawerCloseButton,\n  DrawerContentBody,\n  DrawerHead,\n  DrawerPanelContent,\n  Flex,\n  FlexItem,\n  Tab,\n  Tabs,\n  TabTitleText,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { FormatDate, useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { parseISO } from \"date-fns\";\nimport type { VoidFunctionComponent } from \"react\";\nimport type { Message } from \"ui-models/src/models/message\";\nimport { beautifyUnknownValue } from \"../utils\";\nimport { NoDataCell } from \"./NoDataCell\";\n\nexport type MessageDetailsProps = {\n  onClose: () => void;\n  defaultTab: MessageDetailsBodyProps[\"defaultTab\"];\n  message: Message | undefined;\n};\nexport const MessageDetails: VoidFunctionComponent<MessageDetailsProps> = ({\n  onClose,\n  defaultTab,\n  message,\n}) => {\n  const { t } = useTranslation(\"message-browser\");\n\n  return (\n    <DrawerPanelContent isResizable={true} minSize={\"400px\"}>\n      <DrawerHead>\n        <TextContent>\n          <Text component={TextVariants.h2}>{t(\"message\")}</Text>\n        </TextContent>\n        <DrawerActions>\n          <DrawerCloseButton onClick={onClose} />\n        </DrawerActions>\n      </DrawerHead>\n      <DrawerContentBody>\n        {message && (\n          <MessageDetailsBody\n            defaultTab={defaultTab}\n            messageKey={message.key}\n            {...message}\n          />\n        )}\n      </DrawerContentBody>\n    </DrawerPanelContent>\n  );\n};\n\nexport type MessageDetailsBodyProps = {\n  defaultTab: \"value\" | \"headers\";\n  messageKey: Message[\"key\"];\n} & Omit<Message, \"key\">;\n\nexport const MessageDetailsBody: VoidFunctionComponent<\n  MessageDetailsBodyProps\n> = ({ defaultTab, ...message }) => {\n  const { t } = useTranslation(\"message-browser\");\n\n  return (\n    <Flex direction={{ default: \"column\" }} data-testid={\"message-details\"}>\n      <FlexItem>\n        <DescriptionList isHorizontal isCompact>\n          <DescriptionListGroup>\n            <DescriptionListTerm>{t(\"field.partition\")}</DescriptionListTerm>\n            <DescriptionListDescription>\n              {message.partition}\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>{t(\"field.offset\")}</DescriptionListTerm>\n            <DescriptionListDescription>\n              {message.offset}\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>{t(\"field.timestamp\")}</DescriptionListTerm>\n            <DescriptionListDescription>\n              {message.timestamp ? (\n                <FormatDate\n                  date={parseISO(message.timestamp)}\n                  format={\"longWithMilliseconds\"}\n                />\n              ) : (\n                <NoDataCell columnLabel={t(\"field.timestamp\")} />\n              )}\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>{t(\"field.epoch\")}</DescriptionListTerm>\n            <DescriptionListDescription>\n              {message.timestamp ? (\n                <FormatDate\n                  date={parseISO(message.timestamp)}\n                  format={\"epoch\"}\n                />\n              ) : (\n                <NoDataCell columnLabel={t(\"field.epoch\")} />\n              )}\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>{t(\"field.key\")}</DescriptionListTerm>\n            <DescriptionListDescription>\n              {message.messageKey ? (\n                message.messageKey\n              ) : (\n                <NoDataCell columnLabel={t(\"field.key\")} />\n              )}\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n        </DescriptionList>\n      </FlexItem>\n      <FlexItem>\n        {/* set key to be a random number to force redraw the tabs in order to change the active tab from the outside */}\n        <Tabs defaultActiveKey={defaultTab} key={Math.random()}>\n          <Tab\n            eventKey={\"value\"}\n            title={<TabTitleText>{t(\"field.value\")}</TabTitleText>}\n          >\n            <ClipboardCopy isCode={true} isExpanded={true} isReadOnly={true}>\n              {beautifyUnknownValue(message.value || \"\")}\n            </ClipboardCopy>\n          </Tab>\n          <Tab\n            eventKey={\"headers\"}\n            title={<TabTitleText>{t(\"field.headers\")}</TabTitleText>}\n          >\n            <ClipboardCopy isCode={true} isExpanded={true} isReadOnly={true}>\n              {beautifyUnknownValue(JSON.stringify(message.headers) || \"\")}\n            </ClipboardCopy>\n          </Tab>\n        </Tabs>\n      </FlexItem>\n    </Flex>\n  );\n};\n","import {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { CubesIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const NoDataEmptyState: VoidFunctionComponent<{\n  onRefresh: () => void;\n}> = ({ onRefresh }) => {\n  const { t } = useTranslation(\"message-browser\");\n  return (\n    <EmptyState variant={EmptyStateVariant.large}>\n      <EmptyStateIcon icon={CubesIcon} />\n      <Title headingLevel=\"h4\" size=\"lg\">\n        {t(\"no_data_title\")}\n      </Title>\n      <EmptyStateBody>{t(\"no_data_body\")}</EmptyStateBody>\n      <Button onClick={onRefresh}>{t(\"no_data_refresh\")}</Button>\n    </EmptyState>\n  );\n};\n","import {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { SearchIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const NoResultsEmptyState: VoidFunctionComponent<{\n  onReset: () => void;\n}> = ({ onReset }) => {\n  const { t } = useTranslation(\"message-browser\");\n  return (\n    <EmptyState variant={EmptyStateVariant.large}>\n      <EmptyStateIcon icon={SearchIcon} />\n      <Title headingLevel=\"h4\" size=\"lg\">\n        {t(\"no_results_title\")}\n      </Title>\n      <EmptyStateBody>{t(\"no_results_body\")}</EmptyStateBody>\n      <Button variant={\"link\"} onClick={onReset}>\n        {t(\"no_results_reset\")}\n      </Button>\n    </EmptyState>\n  );\n};\n","import { Text, TextContent } from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const OffsetRange: VoidFunctionComponent<{\n  min: number;\n  max: number;\n}> = ({ min, max }) => {\n  const { t } = useTranslation(\"message-browser\");\n  return (\n    <TextContent className=\"pf-u-font-size\">\n      <Text>\n        {t(\"offset\")} <span className=\"custom-text\">{min}</span> -{\" \"}\n        <span className=\"custom-text\">{max}</span>\n      </Text>\n    </TextContent>\n  );\n};\n","import type { SelectProps } from \"@patternfly/react-core\";\nimport {\n  InputGroup,\n  InputGroupText,\n  InputGroupTextVariant,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback, useMemo, useState } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nconst MAX_OPTIONS = 20;\n\nexport type PartitionSelectorProps = {\n  value: number | undefined;\n  partitions: number | undefined;\n  isDisabled: boolean;\n  onChange: (value: number | undefined) => void;\n};\nexport const PartitionSelector: VoidFunctionComponent<\n  PartitionSelectorProps\n> = ({ value, partitions, isDisabled, onChange }) => {\n  const { t } = useTranslation(\"message-browser\");\n  const [isOpen, setIsOpen] = useState(false);\n  const toggleOpen = (isOpen: boolean) => setIsOpen(isOpen);\n  const titleId = \"partition-selector\";\n\n  const handleChange = useCallback(\n    (value: string) => {\n      if (value !== \"\") {\n        const valueAsNum = parseInt(value, 10);\n        if (Number.isInteger(valueAsNum)) {\n          onChange(valueAsNum);\n        }\n      }\n      setIsOpen(false);\n    },\n    [onChange]\n  );\n\n  const allPartitions = useMemo(() => {\n    return new Array(partitions).fill(0).map((_, index) => index.toString());\n  }, [partitions]);\n\n  const makeOptions = useCallback(\n    (values: string[]) => {\n      const options = values\n        .slice(0, MAX_OPTIONS)\n        .map((v) => <SelectOption key={v} value={v} />);\n      const hiddenOptionsCount = values.length - options.length;\n      return hiddenOptionsCount\n        ? [\n            ...options,\n            <SelectOption\n              key={\"more-info\"}\n              isDisabled={true}\n              description={t(\"partitions_hidden\", {\n                count: hiddenOptionsCount,\n              })}\n            />,\n          ]\n        : options;\n    },\n    [t]\n  );\n\n  const options = useMemo(() => {\n    return makeOptions(allPartitions);\n  }, [allPartitions, makeOptions]);\n\n  const handleFilter: SelectProps[\"onFilter\"] = useCallback(\n    (_, filter: string) => {\n      if (filter !== \"\") {\n        return makeOptions(\n          allPartitions.filter((partition) => partition.includes(filter))\n        );\n      }\n      return options;\n    },\n    [allPartitions, makeOptions, options]\n  );\n\n  return (\n    <InputGroup>\n      <InputGroupText className=\"pf-c-content\">\n        {t(\"field.partition\")}\n      </InputGroupText>\n      <div>\n        <span id={titleId} hidden>\n          {t(\"select_partition_aria_label\")}\n        </span>\n        <Select\n          variant={SelectVariant.typeahead}\n          typeAheadAriaLabel={t(\"select_partition_typeahead\")}\n          onToggle={toggleOpen}\n          onSelect={(_, value) => handleChange(value as string)}\n          selections={value !== undefined ? [`${value}`] : undefined}\n          isOpen={isOpen}\n          aria-labelledby={titleId}\n          maxHeight={200}\n          width={150}\n          onFilter={handleFilter}\n          isInputValuePersisted={false}\n          isDisabled={isDisabled}\n          placeholderText={t(\"partition_placeholder\")}\n          onClear={() => onChange(undefined)}\n          data-testid={\"partition-selector\"}\n        >\n          {options}\n        </Select>\n      </div>\n      <InputGroupText\n        id={`${titleId}-input`}\n        variant={InputGroupTextVariant.plain}\n        className=\"pf-c-content\"\n      >\n        {t(\"select_partition_of_count\", { partitions })}\n      </InputGroupText>\n    </InputGroup>\n  );\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { truncate } from \"../utils\";\nimport { Flex, FlexItem } from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nconst PREVIEW_LENGTH = 170;\n\nexport type UnknownValuePreviewProps = {\n  value: string;\n  truncateAt?: number;\n  onClick?: () => void;\n};\nexport const UnknownValuePreview: VoidFunctionComponent<\n  UnknownValuePreviewProps\n> = ({ value, truncateAt = PREVIEW_LENGTH, onClick }) => {\n  const { t } = useTranslation(\"message-browser\");\n  const [preview, truncated] = truncate(value, truncateAt);\n  return (\n    <Flex\n      direction={{ default: \"column\" }}\n      spaceItems={{ default: \"spaceItemsXs\" }}\n    >\n      <FlexItem>{preview}</FlexItem>\n      {truncated && (\n        <FlexItem>\n          <a\n            onClick={\n              onClick\n                ? (e) => {\n                    e.stopPropagation();\n                    onClick();\n                  }\n                : undefined\n            }\n          >\n            {t(\"show_more\")}\n          </a>\n        </FlexItem>\n      )}\n    </Flex>\n  );\n};\n","import type { Message } from \"ui-models/src/models/message\";\nimport { assign, createMachine } from \"xstate\";\nimport type { DateIsoString } from \"../../../../ui-models/src/types\";\nimport { isSameMessage } from \"./utils\";\n\nexport type MessageApiResponse = {\n  lastUpdated: Date;\n  messages: Message[];\n  partitions: number;\n  offsetMin: number;\n  offsetMax: number;\n\n  filter: {\n    partition: number | undefined;\n    offset: number | undefined;\n    timestamp: DateIsoString | undefined;\n    limit: number | undefined;\n    epoch: number | undefined;\n  };\n};\n\nexport const MessageBrowserMachine = createMachine(\n  {\n    id: \"message-browser\",\n    predictableActionArguments: true,\n    tsTypes: {} as import(\"./MessageBrowserMachine.typegen\").Typegen0,\n    schema: {\n      context: {} as {\n        // response\n        response: MessageApiResponse | undefined;\n\n        limit: number;\n        // optional input\n        partition: number | undefined;\n        offset: number | undefined;\n        epoch: number | undefined;\n        timestamp: DateIsoString | undefined;\n        selectedMessage: Message | undefined;\n      },\n      events: {} as\n        | {\n            type: \"fetchSuccess\";\n            messages: Message[];\n            partitions: number;\n            offsetMin: number;\n            offsetMax: number;\n          }\n        | { type: \"fetchFail\" }\n        | { type: \"refresh\" }\n        | { type: \"setPartition\"; value: number | undefined }\n        | { type: \"setOffset\"; value: number | undefined }\n        | { type: \"setTimestamp\"; value: DateIsoString | undefined }\n        | { type: \"setEpoch\"; value: number | undefined }\n        | { type: \"setLatest\" }\n        | { type: \"setLimit\"; value: number }\n        | { type: \"selectMessage\"; message: Message }\n        | { type: \"deselectMessage\" },\n    },\n    initial: \"initialLoading\",\n    context: {\n      // response\n      response: undefined,\n\n      limit: 10,\n      // optional input\n      partition: undefined,\n      offset: undefined,\n      timestamp: undefined,\n      selectedMessage: undefined,\n      epoch: undefined,\n    },\n    states: {\n      initialLoading: {\n        invoke: {\n          src: \"api\",\n        },\n        on: {\n          fetchSuccess: {\n            actions: \"setMessages\",\n            target: \"verifyMessages\",\n          },\n          fetchFail: \"error\",\n        },\n      },\n      verifyMessages: {\n        always: [{ cond: \"noMessages\", target: \"noData\" }, { target: \"ready\" }],\n      },\n      noData: {\n        on: {\n          refresh: \"initialLoading\",\n        },\n      },\n      error: {\n        on: {\n          refresh: \"initialLoading\",\n        },\n      },\n      ready: {\n        initial: \"pristine\",\n        states: {\n          pristine: {},\n          dirty: {\n            tags: \"dirty\",\n          },\n          shouldSearch: {\n            always: [\n              {\n                cond: \"areFiltersChanged\",\n                target: \"dirty\",\n              },\n              { target: \"pristine\" },\n            ],\n          },\n        },\n        always: [\n          {\n            cond: \"selectedMessageNotAvailable\",\n            actions: \"deselectMessage\",\n          },\n        ],\n        on: {\n          refresh: \"refreshing\",\n          setPartition: {\n            target: \".shouldSearch\",\n            actions: \"setPartition\",\n          },\n          setEpoch: {\n            actions: \"setEpoch\",\n            target: \".shouldSearch\",\n          },\n          setTimestamp: {\n            target: \".shouldSearch\",\n            actions: \"setTimestamp\",\n          },\n          setOffset: {\n            target: \".shouldSearch\",\n            actions: \"setOffset\",\n          },\n          setLatest: {\n            target: \".shouldSearch\",\n            actions: \"setLatest\",\n          },\n          setLimit: {\n            target: \".shouldSearch\",\n            actions: \"setLimit\",\n          },\n          selectMessage: {\n            actions: \"selectMessage\",\n          },\n          deselectMessage: {\n            actions: \"deselectMessage\",\n          },\n        },\n      },\n      refreshing: {\n        invoke: {\n          src: \"api\",\n        },\n        on: {\n          fetchSuccess: {\n            actions: \"setMessages\",\n            target: \"ready\",\n          },\n          fetchFail: {\n            target: \"ready\",\n          },\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      setMessages: assign(\n        (context, { messages, partitions, offsetMin, offsetMax }) => ({\n          response: {\n            lastUpdated: new Date(),\n            messages,\n            partitions,\n            offsetMin,\n            offsetMax,\n            filter: {\n              partition: context.partition,\n              timestamp: context.timestamp,\n              offset: context.offset,\n              limit: context.limit,\n              epoch: context.epoch,\n            },\n          },\n        })\n      ),\n      setPartition: assign((_, { value }) => ({ partition: value })),\n      setEpoch: assign((_, { value }) => ({\n        epoch: value,\n      })),\n      setTimestamp: assign((_, { value }) => ({\n        timestamp: value,\n      })),\n      setOffset: assign((_, { value }) => ({\n        offset: value,\n      })),\n      setLimit: assign((_, { value }) => ({\n        limit: value,\n      })),\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      setLatest: assign((_) => ({\n        timestamp: undefined,\n        offset: undefined,\n      })),\n      selectMessage: assign((_, { message }) => ({ selectedMessage: message })),\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      deselectMessage: assign((_) => ({ selectedMessage: undefined })),\n    },\n    guards: {\n      noMessages: ({ response }) =>\n        response === undefined || response.messages.length === 0,\n      selectedMessageNotAvailable: ({ response, selectedMessage }) =>\n        selectedMessage !== undefined &&\n        response?.messages.find((m) => isSameMessage(m, selectedMessage)) ===\n          undefined,\n      areFiltersChanged: (context) =>\n        context.response?.filter.limit !== context.limit ||\n        context.response?.filter.offset !== context.offset ||\n        context.response?.filter.partition !== context.partition ||\n        context.response?.filter.timestamp !== context.timestamp ||\n        context.response?.filter.epoch !== context.epoch,\n    },\n  }\n);\n","import {\n  Button,\n  Drawer,\n  DrawerContent,\n  PageSection,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n} from \"@patternfly/react-core\";\nimport { FilterIcon, SearchIcon } from \"@patternfly/react-icons\";\nimport type { BaseCellProps } from \"@patternfly/react-table\";\nimport {\n  InnerScrollContainer,\n  OuterScrollContainer,\n} from \"@patternfly/react-table\";\nimport {\n  FormatDate,\n  Loading,\n  RefreshButton,\n  ResponsiveTable,\n  useTranslation,\n} from \"@rhoas/app-services-ui-components\";\nimport { useMachine } from \"@xstate/react\";\nimport { parseISO } from \"date-fns\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useMemo, useState } from \"react\";\nimport type { Message } from \"ui-models/src/models/message\";\nimport type { DateIsoString } from \"../../../../ui-models/src/types\";\nimport type { MessageDetailsProps } from \"./components\";\nimport {\n  FilterGroup,\n  LimitSelector,\n  MessageDetails,\n  NoDataCell,\n  NoDataEmptyState,\n  NoResultsEmptyState,\n  OffsetRange,\n  PartitionSelector,\n  UnknownValuePreview,\n} from \"./components\";\nimport \"./KafkaMessageBrowser.css\";\nimport type { MessageApiResponse } from \"./MessageBrowserMachine\";\nimport { MessageBrowserMachine } from \"./MessageBrowserMachine\";\nimport { beautifyUnknownValue, isSameMessage } from \"./utils\";\n\nconst columns = [\n  \"partition\",\n  \"offset\",\n  \"timestamp\",\n  \"key\",\n  \"headers\",\n  \"value\",\n] as const;\n\nconst columnWidths: BaseCellProps[\"width\"][] = [10, 10, 15, 10, undefined, 30];\n\nexport type KafkaMessageBrowserProps = {\n  getMessages: (props: {\n    partition?: number;\n    offset?: number;\n    timestamp?: DateIsoString;\n    limit: number;\n  }) => Promise<{ messages: Message[]; partitions: number }>;\n};\nexport const KafkaMessageBrowser: VoidFunctionComponent<\n  KafkaMessageBrowserProps\n> = ({ getMessages }) => {\n  const [state, send] = useMachine(() => MessageBrowserMachine, {\n    devTools: true,\n    services: {\n      api: (context) => {\n        return (send) => {\n          getMessages({\n            partition: context.partition,\n            offset: context.offset,\n            timestamp: context.timestamp,\n            limit: context.limit,\n          })\n            .then(({ messages, partitions }) =>\n              send({\n                type: \"fetchSuccess\",\n                messages,\n                partitions,\n                offsetMin: context.offset || 0,\n                offsetMax: messages.reduce(\n                  (max, m) => Math.max(max, m.offset || 0),\n                  0\n                ),\n              })\n            )\n            .catch(() => send({ type: \"fetchFail\" }));\n        };\n      },\n    },\n  });\n\n  return (\n    <KafkaMessageBrowserConnected\n      isFirstLoad={state.matches(\"initialLoading\")}\n      isNoData={state.matches(\"noData\") || state.matches(\"error\")}\n      isRefreshing={state.matches(\"refreshing\")}\n      requiresSearch={state.hasTag(\"dirty\")}\n      selectedMessage={state.context.selectedMessage}\n      response={state.context.response}\n      lastUpdated={state.context.response?.lastUpdated}\n      partition={state.context.partition}\n      limit={state.context.limit}\n      filterOffset={state.context.offset}\n      filterEpoch={state.context.epoch}\n      filterTimestamp={state.context.timestamp}\n      setPartition={(value: number | undefined) =>\n        send({ type: \"setPartition\", value })\n      }\n      setOffset={(value: number | undefined) =>\n        send({ type: \"setOffset\", value })\n      }\n      setTimestamp={(value: DateIsoString | undefined) =>\n        send({ type: \"setTimestamp\", value })\n      }\n      setEpoch={(value: number | undefined) =>\n        send({ type: \"setEpoch\", value })\n      }\n      setLatest={() => send({ type: \"setLatest\" })}\n      setLimit={(value: number) => send({ type: \"setLimit\", value })}\n      refresh={() => send({ type: \"refresh\" })}\n      selectMessage={(message: Message) =>\n        send({ type: \"selectMessage\", message })\n      }\n      deselectMessage={() => send({ type: \"deselectMessage\" })}\n    />\n  );\n};\n\nexport type KafkaMessageBrowserConnectedProps = {\n  isFirstLoad: boolean;\n  isNoData: boolean;\n  isRefreshing: boolean;\n  requiresSearch: boolean;\n  selectedMessage: Message | undefined;\n  lastUpdated: Date | undefined;\n  response: MessageApiResponse | undefined;\n  partition: number | undefined;\n  limit: number;\n  filterOffset: number | undefined;\n  filterEpoch: number | undefined;\n  filterTimestamp: DateIsoString | undefined;\n  setPartition: (value: number | undefined) => void;\n  setOffset: (value: number | undefined) => void;\n  setTimestamp: (value: DateIsoString | undefined) => void;\n  setEpoch: (value: number | undefined) => void;\n  setLatest: () => void;\n  setLimit: (value: number) => void;\n  refresh: () => void;\n  selectMessage: (message: Message) => void;\n  deselectMessage: () => void;\n};\nexport const KafkaMessageBrowserConnected: VoidFunctionComponent<\n  KafkaMessageBrowserConnectedProps\n> = ({\n  isFirstLoad,\n  isNoData,\n  isRefreshing,\n  requiresSearch,\n  selectedMessage,\n  response,\n  partition,\n  limit,\n  filterOffset,\n  filterEpoch,\n  filterTimestamp,\n  setPartition,\n  setOffset,\n  setTimestamp,\n  setEpoch,\n  setLatest,\n  setLimit,\n  refresh,\n  selectMessage,\n  deselectMessage,\n}) => {\n  const { t } = useTranslation(\"message-browser\");\n  const [defaultTab, setDefaultTab] =\n    useState<MessageDetailsProps[\"defaultTab\"]>(\"value\");\n\n  const columnLabels: { [key in typeof columns[number]]: string } = useMemo(\n    () =>\n      ({\n        partition: t(\"field.partition\"),\n        offset: t(\"field.offset\"),\n        timestamp: t(\"field.timestamp\"),\n        key: t(\"field.key\"),\n        value: t(\"field.value\"),\n        headers: t(\"field.headers\"),\n      } as const),\n    [t]\n  );\n\n  switch (true) {\n    case isFirstLoad:\n      return <Loading />;\n    case isNoData:\n      return <NoDataEmptyState onRefresh={refresh} />;\n    default:\n      return (\n        <PageSection\n          isFilled={true}\n          hasOverflowScroll={true}\n          aria-label={\"TODO\"}\n        >\n          <Drawer isInline={true} isExpanded={selectedMessage !== undefined}>\n            <DrawerContent\n              panelContent={\n                <MessageDetails\n                  message={selectedMessage}\n                  defaultTab={defaultTab}\n                  onClose={deselectMessage}\n                />\n              }\n            >\n              <OuterScrollContainer>\n                <Toolbar\n                  className={\"mas-KafkaMessageBrowser-Toolbar\"}\n                  data-testid={\"message-browser-toolbar\"}\n                >\n                  <ToolbarContent>\n                    <ToolbarToggleGroup\n                      toggleIcon={<FilterIcon />}\n                      breakpoint=\"2xl\"\n                    >\n                      <ToolbarGroup variant=\"filter-group\">\n                        <ToolbarItem>\n                          <PartitionSelector\n                            value={partition}\n                            partitions={response?.partitions || 0}\n                            onChange={setPartition}\n                            isDisabled={isRefreshing}\n                          />\n                        </ToolbarItem>\n                      </ToolbarGroup>\n                      <ToolbarGroup variant=\"filter-group\">\n                        <FilterGroup\n                          isDisabled={isRefreshing}\n                          offset={filterOffset}\n                          epoch={filterEpoch}\n                          timestamp={filterTimestamp}\n                          onOffsetChange={setOffset}\n                          onTimestampChange={setTimestamp}\n                          onEpochChange={setEpoch}\n                          onLatest={setLatest}\n                        />\n                      </ToolbarGroup>\n                      <ToolbarGroup>\n                        <LimitSelector\n                          value={limit}\n                          onChange={setLimit}\n                          isDisabled={isRefreshing}\n                        />\n                      </ToolbarGroup>\n                    </ToolbarToggleGroup>\n                    <ToolbarGroup>\n                      <ToolbarItem>\n                        <Button\n                          variant={\"plain\"}\n                          isDisabled={!requiresSearch || isRefreshing}\n                          aria-label={t(\"common:search_button_label\")}\n                          onClick={refresh}\n                        >\n                          <SearchIcon />\n                        </Button>\n                      </ToolbarItem>\n                      <ToolbarItem>\n                        <RefreshButton\n                          onClick={refresh}\n                          isRefreshing={isRefreshing}\n                          isDisabled={requiresSearch}\n                        />\n                      </ToolbarItem>\n                    </ToolbarGroup>\n                    <ToolbarGroup alignment={{ default: \"alignRight\" }}>\n                      {response?.filter.partition !== undefined &&\n                        response?.messages.length > 0 && (\n                          <OffsetRange\n                            min={response?.offsetMin || 0}\n                            max={response?.offsetMax || 0}\n                          />\n                        )}\n                    </ToolbarGroup>\n                  </ToolbarContent>\n                </Toolbar>\n                <InnerScrollContainer>\n                  <ResponsiveTable\n                    ariaLabel={t(\"table_aria_label\")}\n                    columns={columns}\n                    data={response?.messages}\n                    expectedLength={response?.messages?.length}\n                    renderHeader={({ column, Th, key }) => (\n                      <Th key={key}>{columnLabels[column]}</Th>\n                    )}\n                    renderCell={({ column, row, colIndex, Td, key }) => (\n                      <Td\n                        key={key}\n                        dataLabel={columnLabels[column]}\n                        width={columnWidths[colIndex]}\n                      >\n                        {(() => {\n                          const empty = (\n                            <NoDataCell columnLabel={columnLabels[column]} />\n                          );\n                          switch (column) {\n                            case \"partition\":\n                              return row.partition;\n                            case \"offset\":\n                              return row.offset;\n                            case \"timestamp\":\n                              return row.timestamp ? (\n                                <FormatDate\n                                  date={parseISO(row.timestamp)}\n                                  format={\"longWithMilliseconds\"}\n                                />\n                              ) : (\n                                empty\n                              );\n                            case \"key\":\n                              return row.key ? (\n                                <UnknownValuePreview\n                                  value={row.key}\n                                  truncateAt={40}\n                                />\n                              ) : (\n                                empty\n                              );\n                            case \"headers\":\n                              return Object.keys(row.headers).length > 0 ? (\n                                <UnknownValuePreview\n                                  value={beautifyUnknownValue(\n                                    JSON.stringify(row.headers)\n                                  )}\n                                  onClick={() => {\n                                    setDefaultTab(\"headers\");\n                                    selectMessage(row);\n                                  }}\n                                />\n                              ) : (\n                                empty\n                              );\n                            case \"value\":\n                              return row.value ? (\n                                <UnknownValuePreview\n                                  value={beautifyUnknownValue(row.value || \"\")}\n                                  onClick={() => {\n                                    setDefaultTab(\"value\");\n                                    selectMessage(row);\n                                  }}\n                                />\n                              ) : (\n                                empty\n                              );\n                          }\n                        })()}\n                      </Td>\n                    )}\n                    isRowSelected={({ row }) =>\n                      selectedMessage !== undefined &&\n                      isSameMessage(row, selectedMessage)\n                    }\n                    onRowClick={({ row }) => {\n                      setDefaultTab(\"value\");\n                      selectMessage(row);\n                    }}\n                  >\n                    <NoResultsEmptyState\n                      onReset={() => {\n                        setLatest();\n                        setPartition(undefined);\n                        refresh();\n                      }}\n                    />\n                  </ResponsiveTable>\n                </InnerScrollContainer>\n              </OuterScrollContainer>\n            </DrawerContent>\n          </Drawer>\n        </PageSection>\n      );\n  }\n};\n","import {\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface CapacityTable {\n  name: string;\n  firstStreamingUnit: string;\n  secondStreamingUnit: string;\n}\n\nexport const KafkaInstanceCapacityTable: FunctionComponent = () => {\n  const { t } = useTranslation(\"kafkaoverview-v2\");\n\n  const capacityTable: CapacityTable[] = [\n    {\n      name: \"Ingress (MB/second)\",\n      firstStreamingUnit: \"up to 50\",\n      secondStreamingUnit: \"up to 100\",\n    },\n    {\n      name: \"Egress (MB/second)\",\n      firstStreamingUnit: \"up to 100\",\n      secondStreamingUnit: \"up to 200\",\n    },\n    {\n      name: \"Storage* (GB)\",\n      firstStreamingUnit: \"up to 1000\",\n      secondStreamingUnit: \"up to 2000\",\n    },\n    {\n      name: \"Topic partitions\",\n      firstStreamingUnit: \"up to 1500\",\n      secondStreamingUnit: \"up to 3000\",\n    },\n    {\n      name: \"Client connections\",\n      firstStreamingUnit: \"up to 3000\",\n      secondStreamingUnit: \"up to 6000\",\n    },\n    {\n      name: \"Connection rate (connections/second)\",\n      firstStreamingUnit: \"up to 100\",\n      secondStreamingUnit: \"up to 200\",\n    },\n    {\n      name: \"Message size (MB)\",\n      firstStreamingUnit: \"up to 1\",\n      secondStreamingUnit: \"up to 1\",\n    },\n  ];\n\n  const columnNames = {\n    name: \"\",\n    firstStreamingUnit: t(\"firstStreamingUnit\"),\n    secondStreamingUnit: t(\"secondStreamingUnit\"),\n  };\n\n  return (\n    <TableComposable>\n      <Thead>\n        <Tr>\n          <Th>{columnNames.name}</Th>\n          <Th>{columnNames.firstStreamingUnit}</Th>\n          <Th>{columnNames.secondStreamingUnit}</Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        {capacityTable.map((table) => {\n          return (\n            <Tr key={table.name}>\n              <Td dataLabel={columnNames.name}>{table.name}</Td>\n              <Td dataLabel={columnNames.firstStreamingUnit}>\n                {table.firstStreamingUnit}\n              </Td>\n              <Td dataLabel={columnNames.secondStreamingUnit}>\n                {table.secondStreamingUnit}\n              </Td>\n            </Tr>\n          );\n        })}\n      </Tbody>\n    </TableComposable>\n  );\n};\n","import {\n  Bullseye,\n  Card,\n  PageSection,\n  PageSectionVariants,\n  Stack,\n  StackItem,\n  Text,\n  TextVariants,\n  Title,\n} from \"@patternfly/react-core\";\nimport classNames from \"classnames\";\nimport type {\n  CSSProperties,\n  FunctionComponent,\n  ReactNode,\n  VoidFunctionComponent,\n} from \"react\";\nimport \"./MarketingPage.css\";\n\nexport type MarketingPageHeroProps = {\n  title: string;\n  tagLine: string;\n  description: string;\n  description2?: string;\n  heroImage: string;\n  heroImageSize: number;\n  heroImageCanRepeat?: boolean;\n  heroImagePositionY?: number;\n  cta?: ReactNode;\n  variant?: \"light\" | \"dark\";\n};\n\nexport const MarketingPageHero: VoidFunctionComponent<\n  MarketingPageHeroProps\n> = ({\n  title,\n  tagLine,\n  description,\n  description2,\n  heroImage,\n  heroImageSize,\n  heroImageCanRepeat = true,\n  heroImagePositionY = 0,\n  cta,\n  variant = \"light\",\n}) => {\n  const style = {\n    \"--appsrv-marketing--banner--before--BackgroundImage\": `url(${heroImage})`,\n    \"--appsrv-marketing--banner--before--BackgroundSize\": `${heroImageSize}px`,\n    \"--appsrv-marketing--banner--before--BackgroundRepeat\": heroImageCanRepeat\n      ? \"repeat\"\n      : \"no-repeat\",\n    \"--appsrv-marketing--banner--before--BackgroundPositionY\": `${heroImagePositionY}px`,\n  } as CSSProperties;\n  return (\n    <PageSection\n      className={classNames(\"appsrv-marketing--banner\", {\n        \"pf-u-background-color-dark-100\": variant === \"dark\",\n        \"pf-u-background-color-100\": variant === \"light\",\n      })}\n      variant={\n        variant === \"dark\"\n          ? PageSectionVariants.dark\n          : PageSectionVariants.light\n      }\n      style={style}\n    >\n      <Stack hasGutter>\n        <Title headingLevel=\"h1\" size=\"2xl\">\n          {title}\n        </Title>\n        <Text\n          className={`appsrv-marketing--banner__tagline ${\n            variant === \"dark\" ? \"\" : \"pf-u-color-200\"\n          }`}\n        >\n          {tagLine}\n        </Text>\n        <Text component={TextVariants.p}>{description}</Text>\n        {description2 && (\n          <Text component={TextVariants.p} className=\"pf-u-mt-md\">\n            {description2}\n          </Text>\n        )}\n        {cta && <StackItem>{cta}</StackItem>}\n      </Stack>\n    </PageSection>\n  );\n};\n\nexport const MarketingPageBanner: FunctionComponent = ({ children }) => {\n  return (\n    <PageSection\n      variant={PageSectionVariants.light}\n      className=\"appsrv-marketing--page-section--marketing pf-u-background-color-100\"\n    >\n      <Bullseye>\n        <Text\n          component={TextVariants.p}\n          className=\"appsrv-marketing--banner--text-only\"\n        >\n          {children}\n        </Text>\n      </Bullseye>\n    </PageSection>\n  );\n};\n\nexport type MarketingPageSectionProps = {\n  className?: string;\n};\n\nexport const MarketingPageSection: FunctionComponent<\n  MarketingPageSectionProps & {\n    variant?: \"dark\" | \"light\" | \"default\";\n  }\n> = ({\n  className = \"appsrv-marketing--page-section--marketing\",\n  variant = \"default\",\n  children,\n}) => (\n  <PageSection\n    isWidthLimited\n    className={classNames(className, {\n      \"pf-u-background-color-dark-100\": variant === \"dark\",\n      \"pf-u-background-color-100\": variant === \"light\",\n    })}\n    variant={\n      variant === \"dark\"\n        ? PageSectionVariants.dark\n        : variant === \"light\"\n        ? PageSectionVariants.light\n        : PageSectionVariants.default\n    }\n  >\n    {children}\n  </PageSection>\n);\n\nexport const MarketingPageVideoCard: VoidFunctionComponent<{\n  src: string;\n  title: string;\n}> = ({ src, title }) => (\n  <Card className=\"appsrv-marketing--video\">\n    <div className=\"appsrv-marketing--video__wrapper\">\n      <iframe\n        src={src}\n        title={title}\n        frameBorder=\"0\"\n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n        allowFullScreen\n      ></iframe>\n    </div>\n  </Card>\n);\n","import {\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n  CardHeaderMain,\n  CardTitle,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Divider,\n  Flex,\n  FlexItem,\n  Grid,\n  Split,\n  SplitItem,\n  Stack,\n  Text,\n  TextContent,\n  TextVariants,\n  Title,\n} from \"@patternfly/react-core\";\nimport {\n  AppSpeedKeyArt,\n  ExternalLink,\n} from \"@rhoas/app-services-ui-components\";\nimport type { FunctionComponent } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { KafkaInstanceCapacityTable } from \"./KafkaInstanceCapacityTable\";\nimport { LogoAWS, LogoAzure, LogoGCP } from \"./Logos/images\";\nimport { MarketingPageHero, MarketingPageSection } from \"./MarketingPage\";\n\nexport const KafkaPageV3: FunctionComponent = () => {\n  const { t } = useTranslation([\"kafkaoverview-v3\"]);\n  return (\n    <>\n      <MarketingPageHero\n        title={t(\"heroTitle\")}\n        tagLine={t(\"heroTagline\")}\n        description={t(\"heroDescription\")}\n        heroImage={AppSpeedKeyArt}\n        heroImageSize={478}\n        heroImageCanRepeat={false}\n        heroImagePositionY={-99}\n      />\n      <MarketingPageSection>\n        <Grid hasGutter lg={6}>\n          <Card\n            ouiaId=\"card-overview-purchase-now\"\n            aria-label={t(\"kafkaoverview:purchaseCardTitle\")}\n          >\n            <CardHeader>\n              <CardHeaderMain>\n                <CardTitle>\n                  <Title headingLevel=\"h2\">\n                    <Trans\n                      ns={\"kafkaoverview-v3\"}\n                      i18nKey={\"purchaseCardTitle\"}\n                    >\n                      <span className=\"pf-u-color-200 pf-u-font-size-sm\"></span>\n                    </Trans>\n                  </Title>\n                </CardTitle>\n              </CardHeaderMain>\n            </CardHeader>\n            <CardBody>{t(\"purchaseCardMainText\")}</CardBody>\n            <CardFooter>\n              <Flex spaceItems={{ default: \"spaceItems2xl\" }}>\n                <FlexItem>\n                  <ExternalLink\n                    href={\n                      \"https://marketplace.redhat.com/en-us/products/red-hat-openshift-streams-for-apache-kafka\"\n                    }\n                    testId={\"cardPurchase-buttonRH\"}\n                    className={\"pf-u-ml-md \"}\n                  >\n                    <Trans\n                      ns={\"kafkaoverview-v3\"}\n                      i18nKey={\"purchaseCardCallToActionButtonRedHat\"}\n                      components={{\n                        bold: <strong />,\n                        size: <span className=\"pf-u-font-size-lg\" />,\n                      }}\n                    />\n                  </ExternalLink>\n                </FlexItem>\n\n                <FlexItem>\n                  <ExternalLink\n                    href={\n                      \"https://aws.amazon.com/marketplace/pp/prodview-3xohcoyuwkumc\"\n                    }\n                    testId={\"cardPurchase-buttonAWS\"}\n                    className={\"pf-u-ml-md\"}\n                  >\n                    <Trans\n                      ns={\"kafkaoverview-v3\"}\n                      i18nKey={\"purchaseCardCallToActionButtonAWS\"}\n                      components={{\n                        bold: <strong />,\n                        size: <span className=\"pf-u-font-size-lg\" />,\n                      }}\n                    />\n                  </ExternalLink>\n                </FlexItem>\n              </Flex>\n            </CardFooter>\n          </Card>\n          <Card\n            ouiaId=\"card-overview-contact-sales\"\n            aria-label={t(\"kafkaoverview:contactSalesCardTitle\")}\n          >\n            <CardHeader>\n              <CardTitle>\n                <Title headingLevel=\"h2\">\n                  <Trans\n                    ns={\"kafkaoverview-v3\"}\n                    i18nKey={\"contactSalesCardTitle\"}\n                  >\n                    <span className=\"pf-u-color-200 pf-u-font-size-sm\"></span>\n                  </Trans>\n                </Title>\n              </CardTitle>\n            </CardHeader>\n            <CardBody>{t(\"contactSalesCardMainText\")}</CardBody>\n            <CardFooter>\n              <ExternalLink\n                href={\n                  \"https://www.redhat.com/en/technologies/cloud-computing/openshift/openshift-streams-for-apache-kafka#contact-us\"\n                }\n                testId={\"cardContactSales-buttonCTA\"}\n                className={\"pf-u-ml-md\"}\n              >\n                <Trans\n                  ns={\"kafkaoverview-v3\"}\n                  i18nKey={\"contactSalesCardCallToActionButton\"}\n                  components={{\n                    bold: <strong />,\n                    size: <span className=\"pf-u-font-size-lg\" />,\n                  }}\n                />\n              </ExternalLink>\n            </CardFooter>\n          </Card>\n        </Grid>\n      </MarketingPageSection>\n      <MarketingPageSection\n        className={\"kafka-overview--page-section--marketing\"}\n      >\n        <Card>\n          <CardTitle>\n            <Title headingLevel=\"h2\">{t(\"pricingModalTitle\")}</Title>\n          </CardTitle>\n          <CardBody>\n            <Flex spaceItems={{ default: \"spaceItemsXl\" }}>\n              <Flex\n                alignSelf={{ default: \"alignSelfCenter\" }}\n                justifyContent={{ default: \"justifyContentCenter\" }}\n                flex={{ default: \"flex_1\" }}\n              >\n                <FlexItem>\n                  <DescriptionList isHorizontal>\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>\n                        {t(\"steamingUnit\")}\n                      </DescriptionListTerm>\n                      <DescriptionListDescription>\n                        {t(\"streamingUnit_price\")}\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>\n                        {t(\"dataTransfer\")}\n                      </DescriptionListTerm>\n                      <DescriptionListDescription>\n                        {t(\"dataTransfer_price\")}\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>{t(\"storage\")}</DescriptionListTerm>\n                      <DescriptionListDescription>\n                        {t(\"storage_price\")}\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                  </DescriptionList>\n                </FlexItem>\n              </Flex>\n              <Divider isVertical />\n              <FlexItem flex={{ default: \"flex_1\" }}>\n                <TextContent>\n                  <Text component={TextVariants.p}>\n                    <Trans\n                      ns={\"kafkaoverview-v3\"}\n                      i18nKey={\"streamingUnitText\"}\n                      components={{ bold: <strong /> }}\n                    />\n                  </Text>\n                </TextContent>\n              </FlexItem>\n            </Flex>\n          </CardBody>\n        </Card>\n      </MarketingPageSection>\n      <MarketingPageSection\n        className={\"kafka-overview--page-section--marketing\"}\n      >\n        <Card>\n          <CardTitle>\n            <Title headingLevel=\"h2\">{t(\"kafkaInstanceCapacityTitle\")}</Title>\n          </CardTitle>\n          <CardBody>\n            <Stack hasGutter>\n              <Text component={TextVariants.p}>\n                {t(\"kafkaInstanceCapacityDescription\")}\n              </Text>\n              <KafkaInstanceCapacityTable />\n            </Stack>\n          </CardBody>\n          <CardFooter>\n            <TextContent className={\"pf-u-font-size-sm\"}>\n              <Trans\n                ns={\"kafkaoverview-v3\"}\n                i18nKey={\"kafkaInstanceCapacityfooter\"}\n                components={[\n                  <ExternalLink\n                    href={\"https://access.redhat.com/support\"}\n                    testId={\"SupportLink\"}\n                    className={\"pf-u-ml-xs\"}\n                  />,\n                  <ExternalLink\n                    href={\n                      \"https://access.redhat.com/documentation/en-us/red_hat_openshift_streams_for_apache_kafka/1/guide/aced8e5e-8229-4cb2-82f9-87a8caa24bb3\"\n                    }\n                    testId={\"MonitoringDiskSpaceLink\"}\n                    className={\"pf-u-ml-xs\"}\n                  />,\n                ]}\n              />\n            </TextContent>\n          </CardFooter>\n        </Card>\n      </MarketingPageSection>\n      <MarketingPageSection\n        className={\"kafka-overview--page-section--marketing\"}\n      >\n        <Card>\n          <CardTitle>\n            <Title headingLevel=\"h2\">{t(\"cloudProvidersTitle\")}</Title>\n          </CardTitle>\n          <CardBody>\n            <Flex\n              spaceItems={{ default: \"spaceItemsXl\" }}\n              direction={{ default: \"column\", xl: \"row\" }}\n            >\n              <Flex\n                justifyContent={{ default: \"justifyContentCenter\" }}\n                flex={{ default: \"flex_1\" }}\n              >\n                <FlexItem>\n                  <Split hasGutter>\n                    <SplitItem>\n                      <img src={LogoAWS} alt={\"\"} style={{ height: \"60px\" }} />\n                    </SplitItem>\n                    <SplitItem>\n                      <Title headingLevel=\"h2\" className={\"pf-u-pt-sm\"}>\n                        {t(\"awsWebServiceTitle\")}\n                      </Title>\n                    </SplitItem>\n                  </Split>\n                </FlexItem>\n              </Flex>\n              <Divider\n                orientation={{ default: \"horizontal\", xl: \"vertical\" }}\n              />\n              <Flex\n                justifyContent={{ default: \"justifyContentCenter\" }}\n                flex={{ default: \"flex_1\" }}\n              >\n                <FlexItem>\n                  <Split hasGutter>\n                    <SplitItem>\n                      <img src={LogoGCP} alt={\"\"} style={{ height: \"60px\" }} />\n                    </SplitItem>\n                    <SplitItem>\n                      <Title headingLevel=\"h2\" className={\"pf-u-pt-sm\"}>\n                        {t(\"googleCloudProviderTitle\")}\n                      </Title>\n                      <Text\n                        component={TextVariants.p}\n                        className={\"pf-u-color-200\"}\n                      >\n                        {t(\"googleCloudProviderDescription\")}\n                      </Text>\n                    </SplitItem>\n                  </Split>\n                </FlexItem>\n              </Flex>\n              <Divider\n                orientation={{ default: \"horizontal\", xl: \"vertical\" }}\n              />\n              <Flex\n                justifyContent={{ default: \"justifyContentCenter\" }}\n                flex={{ default: \"flex_1\" }}\n              >\n                <FlexItem>\n                  <Split hasGutter>\n                    <SplitItem>\n                      <img\n                        src={LogoAzure}\n                        alt={\"\"}\n                        style={{ height: \"60px\" }}\n                      />\n                    </SplitItem>\n                    <SplitItem>\n                      <Title headingLevel=\"h2\" className={\"pf-u-pt-sm\"}>\n                        {t(\"microsoftAzureTitle\")}\n                      </Title>\n                      <Text\n                        component={TextVariants.p}\n                        className={\"pf-u-color-200\"}\n                      >\n                        {t(\"microsoftAzureDescription\")}\n                      </Text>\n                    </SplitItem>\n                  </Split>\n                </FlexItem>\n              </Flex>\n            </Flex>\n          </CardBody>\n        </Card>\n      </MarketingPageSection>\n    </>\n  );\n};\n","import {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { PlusCircleIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nexport type EmptyStateNoTopicProps = {\n  onCreateTopic: () => void;\n};\n\nexport const EmptyStateNoTopic: VoidFunctionComponent<\n  EmptyStateNoTopicProps\n> = ({ onCreateTopic }) => {\n  const { t } = useTranslation(\"topic\");\n\n  return (\n    <EmptyState\n      data-ouia-page-id=\"emptyStateTopics\"\n      variant={EmptyStateVariant.large}\n    >\n      <EmptyStateIcon icon={PlusCircleIcon} />\n      <Title headingLevel=\"h2\" size=\"lg\">\n        {t(\"empty_topics_title\")}\n      </Title>\n      <EmptyStateBody>{t(\"empty_topics_body\")}</EmptyStateBody>\n      <Button\n        data-testid=\"actionCreateTopic\"\n        ouiaId=\"button-create\"\n        variant=\"primary\"\n        onClick={onCreateTopic}\n      >\n        {t(\"create_topic\")}\n      </Button>\n    </EmptyState>\n  );\n};\n","import type { ResourceOperationValue } from \"./components/ResourceOperation\";\nimport type { ResourcePermissionValue } from \"./components/ResourcePermission\";\nimport type { ResourcePrefixRuleValue } from \"./components/ResourcePrefixRule\";\nimport type { ResourceTypeValue } from \"./components/ResourceType\";\n\nexport type AclOperation =\n  | \"ALL\"\n  | \"READ\"\n  | \"WRITE\"\n  | \"CREATE\"\n  | \"DELETE\"\n  | \"ALTER\"\n  | \"DESCRIBE\"\n  | \"DESCRIBE_CONFIGS\"\n  | \"ALTER_CONFIGS\";\n\nexport type AclResourceType =\n  | \"GROUP\"\n  | \"TOPIC\"\n  | \"CLUSTER\"\n  | \"TRANSACTIONAL_ID\";\n\nexport type AclPatternType = \"LITERAL\" | \"PREFIXED\";\n\nexport type AclPermissionType = \"ALLOW\" | \"DENY\";\n\nexport interface AclBinding {\n  /**\n   *\n   * @type {AclResourceType}\n   * @memberof AclBinding\n   */\n  resourceType: AclResourceType;\n  /**\n   *\n   * @type {string}\n   * @memberof AclBinding\n   */\n  resourceName: string;\n  /**\n   *\n   * @type {AclPatternType}\n   * @memberof AclBinding\n   */\n  patternType: AclPatternType;\n  /**\n   * Identifies the user or service account to which an ACL entry is bound. The literal prefix value of `User:` is required. May be used to specify all users with value `User:*`.\n   * @type {string}\n   * @memberof AclBinding\n   */\n  principal: string;\n  /**\n   *\n   * @type {AclOperation}\n   * @memberof AclBinding\n   */\n  operation: AclOperation;\n  /**\n   *\n   * @type {AclPermissionType}\n   * @memberof AclBinding\n   */\n  permission: AclPermissionType;\n}\nexport type AclTablePermissionsType = {\n  permission: AclPermissionType;\n  operation: AclOperation;\n};\nexport type AclTableResourceType = {\n  resourceType: AclResourceType;\n  resourceName: string;\n  patternType: AclPatternType;\n};\nexport type Permissions = {\n  account: string;\n  permission: AclTablePermissionsType;\n  resource: AclTableResourceType;\n};\nexport enum PrincipalType {\n  UserAccount = \"USER_ACCOUNT\",\n  ServiceAccount = \"SERVICE_ACCOUNT\",\n}\n\nexport type Account = {\n  id: string;\n  principalType: PrincipalType;\n  displayName: string;\n  email?: string;\n};\n\ntype ManualAcl = {\n  resourceType: ResourceTypeValue | undefined;\n  resourcePrefix: ResourcePrefixRuleValue;\n  resourceName: string | undefined;\n  resourcePermission: ResourcePermissionValue;\n  resourceOperation: ResourceOperationValue | undefined;\n};\n\ntype ProduceTopicTemplate = {\n  prefixRuleValue: ResourcePrefixRuleValue;\n  resourceNameValue: string | undefined;\n};\n\ntype ConsumeTopicTemplate = {\n  consumerResourceName: string | undefined;\n  consumerResourcePrefixRule: ResourcePrefixRuleValue;\n  topicResourceName: string | undefined;\n  topicResourcePrefixRule: ResourcePrefixRuleValue;\n};\n\ntype ManageAccessTemplate = {\n  instanceName: string;\n};\nexport type AddAclType =\n  | ({ type: \"manual\" } & ManualAcl)\n  | ({ type: \"consume-topic\" } & ConsumeTopicTemplate)\n  | ({ type: \"produce-topic\" } & ProduceTopicTemplate)\n  | ({ type: \"manage-access\" } & ManageAccessTemplate);\n\nexport const createEmptyManualAcl = (): AddAclType => {\n  return {\n    type: \"manual\",\n    resourceName: undefined,\n    resourceType: undefined,\n    resourceOperation: undefined,\n    resourcePrefix: \"Is\",\n    resourcePermission: \"allow\",\n  };\n};\nexport const createEmptyProduceTopicAcl = (): AddAclType => {\n  return {\n    type: \"produce-topic\",\n    prefixRuleValue: \"Is\",\n    resourceNameValue: undefined,\n  };\n};\nexport const createEmptyConsumeTopicAcl = (): AddAclType => {\n  return {\n    type: \"consume-topic\",\n    consumerResourceName: undefined,\n    consumerResourcePrefixRule: \"Is\",\n    topicResourceName: undefined,\n    topicResourcePrefixRule: \"Is\",\n  };\n};\nexport const createEmptyManageAccessAcl = (kafkaName: string): AddAclType => {\n  return {\n    type: \"manage-access\",\n    instanceName: kafkaName,\n  };\n};\n","import { PageSection } from \"@patternfly/react-core\";\nimport { TableVariant } from \"@patternfly/react-table\";\nimport type { TableViewProps } from \"@rhoas/app-services-ui-components\";\nimport {\n  EmptyStateNoResults,\n  TableView,\n} from \"@rhoas/app-services-ui-components\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport type { Topic, TopicField } from \"ui-models/src/models/topic\";\nimport { useTopicLabels } from \"../../hooks\";\nimport type { EmptyStateNoTopicProps } from \"./components\";\nimport { EmptyStateNoTopic } from \"./components\";\nimport { formattedRetentionSize, formattedRetentionTime } from \"./types\";\n\ntype SubUnion<T, U extends T> = U;\n\nconst Columns: SubUnion<\n  TopicField,\n  \"name\" | \"partitions\" | \"retention.ms\" | \"retention.bytes\"\n>[] = [\"name\", \"partitions\", \"retention.ms\", \"retention.bytes\"];\n\nexport type KafkaTopicsProps<T extends Topic> = {\n  topics: Array<T> | undefined;\n  getUrlFortopic: (row: T) => string;\n  onDelete: (row: T) => void;\n  onEdit: (row: T) => void;\n  topicName: string[];\n  onSearchTopic: (value: string) => void;\n  onRemoveTopicChip: (value: string) => void;\n  onRemoveTopicChips: () => void;\n} & Pick<\n  TableViewProps<T, (typeof Columns)[number]>,\n  | \"itemCount\"\n  | \"page\"\n  | \"perPage\"\n  | \"onPageChange\"\n  | \"isRowSelected\"\n  | \"isColumnSortable\"\n  | \"onClearAllFilters\"\n> &\n  EmptyStateNoTopicProps;\n\nexport const KafkaTopics = <T extends Topic>({\n  topics,\n  onDelete,\n  onEdit,\n  isColumnSortable,\n  itemCount,\n  onSearchTopic,\n  topicName,\n  onClearAllFilters,\n  onCreateTopic,\n  page,\n  perPage,\n  onPageChange,\n  onRemoveTopicChip,\n  onRemoveTopicChips,\n  getUrlFortopic,\n}: KafkaTopicsProps<T>) => {\n  const { t } = useTranslation(\"topic\");\n\n  const labels = useTopicLabels();\n\n  const isFiltered = topicName.length > 0;\n  return (\n    <PageSection isFilled={true} hasOverflowScroll={true} aria-label={\"TODO\"}>\n      <TableView\n        variant={TableVariant.compact}\n        tableOuiaId={\"card-table\"}\n        ariaLabel={t(\"topic_list_table\")}\n        data={topics}\n        columns={Columns}\n        renderHeader={({ column, Th, key }) => (\n          <Th key={key}>{labels.fields[column]}</Th>\n        )}\n        renderCell={({ column, row, Td, key }) => {\n          return (\n            <Td key={key} dataLabel={labels.fields[column]}>\n              {(() => {\n                switch (column) {\n                  case \"name\":\n                    return (\n                      <Link\n                        to={getUrlFortopic(row)}\n                        data-testid=\"tableTopics-linkTopic\"\n                        data-ouia-component-id=\"table-link\"\n                      >\n                        {row.name}\n                      </Link>\n                    );\n                  case \"partitions\":\n                    return row.partitions.length;\n                  case \"retention.ms\":\n                    return formattedRetentionTime(row[\"retention.ms\"].value);\n                  case \"retention.bytes\":\n                    return formattedRetentionSize(row[\"retention.bytes\"].value);\n                }\n              })()}\n            </Td>\n          );\n        }}\n        renderActions={({ row, ActionsColumn }) => (\n          <ActionsColumn\n            items={[\n              {\n                title: t(\"table.actions.edit\"),\n                onClick: () => onEdit(row),\n              },\n              {\n                title: t(\"table.actions.delete\"),\n                onClick: () => onDelete(row),\n              },\n            ]}\n          />\n        )}\n        isColumnSortable={isColumnSortable}\n        filters={{\n          [labels.fields.name]: {\n            type: \"search\",\n            chips: topicName,\n            onSearch: onSearchTopic,\n            onRemoveChip: onRemoveTopicChip,\n            onRemoveGroup: onRemoveTopicChips,\n            validate: (value: string) => !/[\"$^<>|+%/;:,\\s*=~#()]/.test(value),\n            errorMessage: t(\"input_field_invalid_message\"),\n          },\n        }}\n        actions={[\n          {\n            label: t(\"create_topic\"),\n            onClick: onCreateTopic,\n            isPrimary: true,\n          },\n        ]}\n        itemCount={itemCount}\n        page={page}\n        onPageChange={onPageChange}\n        perPage={perPage}\n        isFiltered={isFiltered}\n        onClearAllFilters={onClearAllFilters}\n        emptyStateNoData={<EmptyStateNoTopic onCreateTopic={onCreateTopic} />}\n        emptyStateNoResults={<EmptyStateNoResults />}\n      />\n    </PageSection>\n  );\n};\n","import type { CardKafkaInstanceMetricsLimits } from \"./components\";\n\nexport type TimeSeriesMetrics = { [timestamp: string]: number };\nexport type PartitionBytesMetric = {\n  [partition: string]: TimeSeriesMetrics;\n};\nexport type BrokerBytesMetric = {\n  [broker: \"total\" | string]: TimeSeriesMetrics;\n};\n\nexport enum DurationOptions {\n  Last5minutes = 5,\n  Last15minutes = 15,\n  Last30minutes = 30,\n  Last1hour = 60,\n  Last3hours = 3 * 60,\n  Last6hours = 6 * 60,\n  Last12hours = 12 * 60,\n  Last24hours = 24 * 60,\n  Last2days = 2 * 24 * 60,\n  Last7days = 7 * 24 * 60,\n}\n\nexport type GetTopicsMetricsResponse = {\n  kafkaTopics: string[];\n  metricsTopics: string[];\n  bytesOutgoing: TimeSeriesMetrics;\n  bytesIncoming: TimeSeriesMetrics;\n  bytesPerPartition: PartitionBytesMetric;\n  incomingMessageRate: TimeSeriesMetrics;\n};\n\nexport type GetKafkaInstanceMetricsResponse = {\n  brokers: string[];\n  usedDiskSpaceMetrics: BrokerBytesMetric;\n  bytesPerPartitionMetrics: PartitionBytesMetric;\n  clientConnectionsMetrics: TimeSeriesMetrics;\n  connectionAttemptRateMetrics: TimeSeriesMetrics;\n} & CardKafkaInstanceMetricsLimits;\n\nexport type GetMetricsKpiResponse = {\n  topics: number;\n  topicPartitions: number;\n  consumerGroups: number;\n  topicPartitionsLimit: number;\n};\n\nexport type BrokerFilter = \"total\" | \"perBroker\";\n\nexport type PartitionSelect = \"Top10\" | \"Top20\";\n","import type { MenuProps } from \"@patternfly/react-core\";\nimport {\n  Divider,\n  Dropdown,\n  DropdownToggle,\n  DropdownToggleAction,\n  Menu,\n  MenuContent,\n  MenuGroup,\n  MenuItem,\n  MenuList,\n  Popper,\n} from \"@patternfly/react-core\";\nimport type {\n  MouseEvent as ReactMouseEvent,\n  VoidFunctionComponent,\n} from \"react\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nexport type PermissionsDropdownProps = {\n  onAddPermission: () => void;\n  onShortcutConsumeTopic: () => void;\n  onShortcutProduceTopic: () => void;\n  onShortcutManageAccess: () => void;\n};\n\nexport const PermissionsDropdown: VoidFunctionComponent<\n  PermissionsDropdownProps\n> = ({\n  onAddPermission,\n  onShortcutConsumeTopic,\n  onShortcutProduceTopic,\n  onShortcutManageAccess,\n}) => {\n  const { t } = useTranslation([\"manage-kafka-permissions\"]);\n\n  const [isOpen, setIsOpen] = useState(false);\n  useState<string | number | undefined>(0);\n\n  const menuRef = useRef<HTMLDivElement>(null);\n\n  const handleMenuKeys = useCallback(\n    (event: KeyboardEvent) => {\n      if (\n        isOpen &&\n        menuRef.current &&\n        event.target &&\n        menuRef.current.contains(event.target as Node)\n      ) {\n        if (event.key === \"Escape\" || event.key === \"Tab\") {\n          setIsOpen(!isOpen);\n        }\n      }\n    },\n    [isOpen]\n  );\n\n  const handleClickOutside = useCallback(\n    (event: MouseEvent) => {\n      if (\n        isOpen &&\n        menuRef.current &&\n        !menuRef.current.contains(event.target as Node)\n      ) {\n        setIsOpen(false);\n      }\n    },\n    [isOpen]\n  );\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", handleMenuKeys);\n    window.addEventListener(\"click\", handleClickOutside);\n\n    return () => {\n      window.removeEventListener(\"keydown\", handleMenuKeys);\n      window.removeEventListener(\"click\", handleClickOutside);\n    };\n  }, [handleClickOutside, handleMenuKeys, isOpen, menuRef]);\n\n  const onToggleClick = useCallback((open: boolean, ev: ReactMouseEvent) => {\n    ev.stopPropagation(); // Stop handleClickOutside from handling\n    setTimeout(() => {\n      if (menuRef.current) {\n        const firstElement = menuRef.current.querySelector(\n          \"li > button,input:not(:disabled)\"\n        );\n        firstElement && (firstElement as HTMLElement).focus();\n      }\n    }, 0);\n    setIsOpen(open);\n  }, []);\n\n  const handleSelect: MenuProps[\"onSelect\"] = (_event, itemId) => {\n    setIsOpen(false);\n    switch (itemId) {\n      case \"add_permission\":\n        onAddPermission();\n        break;\n      case \"shortcut_consume_topic\":\n        onShortcutConsumeTopic();\n        break;\n      case \"shortcut_produce_topic\":\n        onShortcutProduceTopic();\n        break;\n      case \"shortcut_manage_access\":\n        onShortcutManageAccess();\n        break;\n    }\n  };\n\n  const onActionClick = (\n    event: ReactMouseEvent<HTMLButtonElement, MouseEvent>\n  ) => {\n    event.preventDefault();\n    onAddPermission();\n  };\n\n  const menu = (\n    <Menu onSelect={handleSelect} key=\"acls-menu\" ref={menuRef}>\n      <MenuContent>\n        <MenuList>\n          <MenuGroup>\n            <MenuList>\n              <MenuItem itemId={\"add_permission\"}>\n                {t(\"permissions_dropdown.add_permission\")}\n              </MenuItem>\n            </MenuList>\n          </MenuGroup>\n\n          <Divider />\n          <MenuGroup label={t(\"permissions_dropdown.task_based_permission\")}>\n            <MenuList>\n              <MenuItem\n                itemId={\"shortcut_consume_topic\"}\n                description={t(\n                  \"permissions_dropdown.shortcut_consume_topic_description\"\n                )}\n              >\n                {t(\"permissions_dropdown.shortcut_consume_topic\")}\n              </MenuItem>\n              <MenuItem\n                itemId={\"shortcut_produce_topic\"}\n                description={t(\n                  \"permissions_dropdown.shortcut_produce_topic_description\"\n                )}\n              >\n                {t(\"permissions_dropdown.shortcut_produce_topic\")}\n              </MenuItem>\n              <MenuItem\n                itemId={\"shortcut_manage_access\"}\n                description={t(\n                  \"permissions_dropdown.shortcut_manage_access_description\"\n                )}\n              >\n                {t(\"permissions_dropdown.shortcut_manage_access\")}\n              </MenuItem>\n            </MenuList>\n          </MenuGroup>\n        </MenuList>\n      </MenuContent>\n    </Menu>\n  );\n\n  const toggle = (\n    <Dropdown\n      toggle={\n        <DropdownToggle\n          data-testid={\"permissions-dropdown-toggle\"}\n          splitButtonItems={[\n            <DropdownToggleAction\n              key=\"cog-action\"\n              aria-label={t(\"permissions_dropdown.add_permission\")}\n              onClick={onActionClick}\n            >\n              {t(\"permissions_dropdown.add_permission\")}\n            </DropdownToggleAction>,\n          ]}\n          splitButtonVariant=\"action\"\n          onToggle={onToggleClick}\n        />\n      }\n    />\n  );\n\n  return (\n    <Popper\n      trigger={toggle}\n      popper={menu}\n      isVisible={isOpen}\n      popperMatchesTriggerWidth={false}\n    />\n  );\n};\n","import type { VFC } from \"react\";\nimport type { LabelProps } from \"@patternfly/react-core\";\nimport { Label } from \"@patternfly/react-core\";\nimport type { AclResourceType } from \"../types\";\nimport \"./ResourceTypeLabel.css\";\n\nexport type SolidLabelProps = {\n  variant: AclResourceType;\n};\n\ntype Variant = {\n  labelColor: LabelProps[\"color\"];\n  content: string;\n};\n\nexport const ResourceTypeLabel: VFC<SolidLabelProps> = ({ variant }) => {\n  const getVariant = (): Variant => {\n    switch (variant) {\n      case \"GROUP\":\n        return { labelColor: \"green\", content: \"G\" };\n      case \"CLUSTER\":\n        return { labelColor: \"grey\", content: \"KI\" };\n      case \"TOPIC\":\n        return { labelColor: \"blue\", content: \"T\" };\n      case \"TRANSACTIONAL_ID\":\n        return { labelColor: \"orange\", content: \"TI\" };\n    }\n  };\n\n  const { labelColor, content } = getVariant() || {};\n\n  return (\n    <Label isCompact color={labelColor} className={`mas-m-solid`}>\n      {content}\n    </Label>\n  );\n};\n","import type { FunctionComponent, VFC } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { Label, LabelGroup, Tooltip } from \"@patternfly/react-core\";\n\nimport type {\n  Account,\n  AclOperation,\n  AclPatternType,\n  AclPermissionType,\n  AclResourceType,\n} from \"../types\";\nimport { ResourceTypeLabel } from \"./ResourceTypeLabel\";\nimport { RemoveButton } from \"@rhoas/app-services-ui-components\";\nimport { InfoCircleIcon } from \"@patternfly/react-icons\";\nimport { PrincipalType } from \"..\";\n\nexport const DisplayResourceName: VFC<{ resourceType: AclResourceType }> = ({\n  resourceType,\n}) => {\n  const { t } = useTranslation([\"manage-kafka-permissions\"]);\n\n  switch (resourceType) {\n    case \"GROUP\":\n      return t(\"resourceTypes.consumer_group\");\n    case \"TOPIC\":\n      return t(\"resourceTypes.topic\");\n    case \"CLUSTER\":\n      return t(\"resourceTypes.kafka_instance\");\n    case \"TRANSACTIONAL_ID\":\n      return t(\"resourceTypes.transactional_id\");\n  }\n};\n\nconst PatternType: VFC<{ patternType: AclPatternType }> = ({ patternType }) => {\n  const { t } = useTranslation([\"manage-kafka-permissions\"]);\n  if (patternType === \"PREFIXED\") {\n    return t(\"pattern_type_prefixed\");\n  } else {\n    return t(\"pattern_type_literal\");\n  }\n};\n\nexport type ResourceCellProps = {\n  resourceType: AclResourceType;\n  patternType: AclPatternType;\n  resourceName: string;\n};\n\nexport const ResourceCell: FunctionComponent<ResourceCellProps> = ({\n  resourceType,\n  patternType,\n  resourceName,\n}) => {\n  if (resourceType === \"CLUSTER\") {\n    return (\n      <>\n        <ResourceTypeLabel variant={resourceType} />{\" \"}\n        <DisplayResourceName resourceType={resourceType} />\n      </>\n    );\n  }\n\n  return (\n    <>\n      <ResourceTypeLabel variant={resourceType} />{\" \"}\n      <DisplayResourceName resourceType={resourceType} />{\" \"}\n      <PatternType patternType={patternType} /> \"{resourceName}\"\n    </>\n  );\n};\n\nexport type PermissionOperationCellProps = {\n  permission: AclPermissionType;\n  operation: AclOperation | AclOperation[];\n};\n\nexport const PermissionOperationCell: FunctionComponent<\n  PermissionOperationCellProps\n> = ({ permission, operation }) => {\n  const { t } = useTranslation(\"manage-kafka-permissions\");\n  const permissions: { [key in AclPermissionType]: string } = {\n    ALLOW: t(\"permissions.allow\"),\n    DENY: t(\"permissions.deny\"),\n  };\n  const operations: { [key in AclOperation]: string } = {\n    ALL: t(\"operations.all\"),\n    READ: t(\"operations.read\"),\n    WRITE: t(\"operations.write\"),\n    CREATE: t(\"operations.create\"),\n    DELETE: t(\"operations.delete\"),\n    ALTER: t(\"operations.alter\"),\n    DESCRIBE: t(\"operations.describe\"),\n    DESCRIBE_CONFIGS: t(\"operations.describe_configs\"),\n    ALTER_CONFIGS: t(\"operations.alter_configs\"),\n  };\n  return (\n    <LabelGroup numLabels={4}>\n      {permission && (\n        <Label\n          variant=\"outline\"\n          color={permission === \"DENY\" ? \"red\" : undefined}\n        >\n          {permissions[permission]}\n        </Label>\n      )}\n      {Array.isArray(operation) ? (\n        operation.map((value, key) => (\n          <Label key={key} variant=\"outline\">\n            {operations[value]}\n          </Label>\n        ))\n      ) : (\n        <Label variant=\"outline\">{operations[operation]}</Label>\n      )}\n    </LabelGroup>\n  );\n};\n\nexport type PrincipalCellProps = {\n  isDeleteEnabled: boolean;\n  isAllAccounts?: boolean;\n  onRemoveAcl?: () => void;\n  isReviewTable?: boolean;\n  principal?: string;\n  allAccounts?: Account;\n};\n\nexport const PrincipalCell: VFC<PrincipalCellProps> = ({\n  isDeleteEnabled,\n  isAllAccounts,\n  onRemoveAcl,\n  isReviewTable = true,\n  principal,\n  allAccounts,\n}) => {\n  const { t } = useTranslation([\"manage-kafka-permissions\"]);\n\n  const principalWithTooltip = () => {\n    return allAccounts?.principalType == PrincipalType.ServiceAccount &&\n      !isReviewTable ? (\n      <Tooltip\n        content={\n          <div>\n            Type: {allAccounts && allAccounts.principalType} <br />\n          </div>\n        }\n      >\n        <span tabIndex={0}>\n          {\" \"}\n          {principal?.split(\":\")[1]} <InfoCircleIcon color=\"grey\" />\n        </span>\n      </Tooltip>\n    ) : (\n      !isReviewTable && (\n        <Tooltip\n          content={\n            <div>\n              Type: {allAccounts?.principalType} <br />\n              Name: {allAccounts?.displayName} <br />\n              Email: {allAccounts?.email}\n            </div>\n          }\n        >\n          <span tabIndex={0}>\n            {principal?.split(\":\")[1]} <InfoCircleIcon color=\"grey\" />\n          </span>\n        </Tooltip>\n      )\n    );\n  };\n\n  return (\n    <div\n      className={\n        isReviewTable\n          ? \"pf-u-display-flex pf-u-justify-content-space-between pf-u-justify-content-flex-end-on-lg pf-u-align-items-center\"\n          : \"\"\n      }\n    >\n      {isAllAccounts && isReviewTable ? (\n        <Label variant=\"outline\">{t(\"table.all_accounts\")}</Label>\n      ) : !isReviewTable && principal == \"User:*\" ? (\n        <Label variant={\"outline\"}>{t(\"table.all_accounts\")}</Label>\n      ) : (\n        principalWithTooltip()\n      )}\n\n      {isDeleteEnabled && onRemoveAcl != undefined && (\n        <RemoveButton\n          variant=\"link\"\n          tooltip={t(\"remove_permission_tooltip\")}\n          onClick={onRemoveAcl}\n          ariaLabel={t(\"operations.delete\")}\n        />\n      )}\n    </div>\n  );\n};\n","import {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { SearchIcon } from \"@patternfly/react-icons\";\nimport type React from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nexport type PermissionsTableEmptyStateProps = {\n  openManagePermissions: () => void;\n};\nexport const PermissionsTableEmptyState: React.FunctionComponent<\n  PermissionsTableEmptyStateProps\n> = ({ openManagePermissions }) => {\n  const { t } = useTranslation(\"manage-kafka-permissions\");\n  return (\n    <EmptyState\n      data-ouia-page-id=\"emptyStateTopics\"\n      variant={EmptyStateVariant.large}\n    >\n      <EmptyStateIcon icon={SearchIcon} />\n      <Title headingLevel=\"h2\" size=\"lg\">\n        {t(\"no_results_title\")}\n      </Title>\n      <EmptyStateBody>{t(\"no_results_body\")}</EmptyStateBody>\n      <Button\n        data-testid=\"actionManagePermissions\"\n        ouiaId=\"button-manage-permissions\"\n        variant=\"primary\"\n        onClick={openManagePermissions}\n      >\n        {t(\"dialog_title\")}\n      </Button>\n    </EmptyState>\n  );\n};\n","import { TableVariant } from \"@patternfly/react-table\";\nimport type { TableViewProps } from \"@rhoas/app-services-ui-components\";\nimport { TableView } from \"@rhoas/app-services-ui-components\";\nimport { useTranslation } from \"react-i18next\";\nimport type { Account, Permissions } from \"../types\";\nimport { PrincipalCell, PermissionOperationCell, ResourceCell } from \"./Cells\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { PageSection } from \"@patternfly/react-core\";\nimport { PermissionsTableEmptyState } from \"./EmptyPermissionsTable\";\n\ntype SubUnion<T, U extends T> = U;\nexport type PermissionsField = keyof Permissions;\nconst Columns: SubUnion<\n  PermissionsField,\n  \"account\" | \"permission\" | \"resource\"\n>[] = [\"account\", \"permission\", \"resource\"];\n\nexport type PermissionsTableProps<T extends Permissions> = {\n  allAccounts: Account[] | undefined;\n  permissions: Array<T> | undefined;\n  onDelete: (rowIndex: number) => void;\n  onDeleteSelected: (rowIndex: number[]) => void;\n  onManagePermissions: () => void;\n  onManagePermissionsActionItem: (account: string) => void;\n  onPerPageChange: (page: number, perPage: number) => void;\n} & Pick<\n  TableViewProps<T, (typeof Columns)[number]>,\n  | \"itemCount\"\n  | \"page\"\n  | \"perPage\"\n  | \"onPageChange\"\n  | \"isRowSelected\"\n  | \"onClearAllFilters\"\n  | \"onCheck\"\n>;\n\nexport const PermissionsTable = <T extends Permissions>({\n  allAccounts,\n  permissions,\n  onDelete,\n  itemCount,\n  page,\n  perPage,\n  onDeleteSelected,\n  onPageChange,\n  onManagePermissions,\n  onManagePermissionsActionItem,\n}: PermissionsTableProps<T>) => {\n  const { t } = useTranslation(\"manage-kafka-permissions\");\n  const [checkedRows, setCheckedRows] = useState<number[]>([]);\n\n  useEffect(() => {\n    //Only clear all the checked row when they are deleted\n    setCheckedRows([]);\n  }, [permissions]);\n\n  const labels: { [field in (typeof Columns)[number]]: string } = {\n    account: t(\"account_id_title\"),\n    permission: t(\"table.permissions_column_title\"),\n    resource: t(\"table.resource_column_title\"),\n  };\n\n  const onCheck: TableViewProps<T, (typeof Columns)[number]>[\"onCheck\"] =\n    useCallback(\n      ({ rowIndex }, isSelecting) => {\n        if (rowIndex != undefined) {\n          setCheckedRows(\n            isSelecting\n              ? [...checkedRows, rowIndex]\n              : checkedRows.filter((t) => t !== rowIndex)\n          );\n        }\n      },\n      [checkedRows]\n    );\n\n  const isRowChecked = (rowIndex: number) => {\n    return checkedRows.includes(rowIndex);\n  };\n\n  const onBulkDelete = () => {\n    onDeleteSelected(checkedRows);\n  };\n\n  return (\n    <PageSection hasOverflowScroll={true}>\n      <TableView\n        variant={TableVariant.compact}\n        tableOuiaId={\"permissions-table\"}\n        ariaLabel={t(\"consumerGroup.consumer_group_list\")}\n        actions={[\n          {\n            onClick: onManagePermissions,\n            label: t(\"dialog_title\"),\n            isPrimary: true,\n          },\n        ]}\n        kebabActions={[\n          {\n            onClick: onBulkDelete,\n            label: t(\"delete_selected\"),\n            isDisabled: checkedRows.length > 0 ? false : true,\n          },\n        ]}\n        data={permissions}\n        columns={Columns}\n        onCheck={onCheck}\n        isRowChecked={({ rowIndex }) => isRowChecked(rowIndex)}\n        renderHeader={({ column, Th, key }) => (\n          <Th key={key}>{labels[column]}</Th>\n        )}\n        renderCell={({ column, row, Td, key }) => {\n          return (\n            <Td key={key} dataLabel={labels[column]}>\n              {(() => {\n                switch (column) {\n                  case \"account\":\n                    return (\n                      <PrincipalCell\n                        isReviewTable={false}\n                        principal={row.account}\n                        isDeleteEnabled={false}\n                        allAccounts={\n                          allAccounts?.filter(\n                            (value) => `User:${value.id}` == row.account\n                          )[0]\n                        }\n                      />\n                    );\n                  case \"permission\":\n                    return (\n                      <PermissionOperationCell\n                        permission={row.permission.permission}\n                        operation={row.permission.operation}\n                      />\n                    );\n                  case \"resource\":\n                    return (\n                      <ResourceCell\n                        patternType={row.resource.patternType}\n                        resourceType={row.resource.resourceType}\n                        resourceName={row.resource.resourceName}\n                      />\n                    );\n                }\n              })()}\n            </Td>\n          );\n        }}\n        renderActions={({ ActionsColumn, rowIndex, row }) => (\n          <ActionsColumn\n            items={[\n              {\n                title: t(\"manage\"),\n                onClick: () =>\n                  onManagePermissionsActionItem(\n                    row.account == \"User:*\"\n                      ? \"all-accounts\"\n                      : row.account?.split(\":\")[1]\n                  ),\n              },\n              {\n                title: t(\"common:delete\"),\n                onClick: () => onDelete(rowIndex),\n              },\n            ]}\n          />\n        )}\n        itemCount={itemCount}\n        page={page}\n        onPageChange={onPageChange}\n        perPage={perPage}\n        emptyStateNoData={\n          <PermissionsTableEmptyState\n            openManagePermissions={onManagePermissions}\n          />\n        }\n        emptyStateNoResults={\n          <PermissionsTableEmptyState\n            openManagePermissions={onManagePermissions}\n          />\n        }\n      />\n    </PageSection>\n  );\n};\n","import type React from \"react\";\nimport { useLayoutEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport type { Account } from \"../types\";\nimport { PrincipalType } from \"../types\";\nimport type { SelectProps } from \"@patternfly/react-core\";\nimport { Button, Form, Modal } from \"@patternfly/react-core\";\nimport { Skeleton } from \"@patternfly/react-core\";\nimport { FormGroup, Popover } from \"@patternfly/react-core\";\nimport {\n  Divider,\n  Select,\n  SelectGroup,\n  SelectOption,\n  SelectVariant,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { HelpIcon } from \"@patternfly/react-icons\";\n\nexport type SelectAccountProps = {\n  accounts: Account[] | undefined;\n  initialOpen?: boolean;\n  kafkaName: string;\n  id?: string;\n  onNext: (selectedAccount: string | undefined) => void;\n  onClose: () => void;\n};\n\nexport const SelectAccount: React.VFC<SelectAccountProps> = ({\n  accounts,\n  initialOpen = false,\n  kafkaName,\n  id,\n  onNext,\n  onClose,\n}) => {\n  const { t } = useTranslation([\"manage-kafka-permissions\"]);\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const [isDirty, setIsDirty] = useState<boolean>(false);\n  const [selectedAccount, setSelectedAccount] = useState<string>();\n\n  // for Storybook, allows opening the select programmatically respecting the initialization needed by the modal and Popper.js\n  useLayoutEffect(() => setIsOpen(initialOpen), [initialOpen]);\n\n  const onToggle = (newState: boolean) => {\n    setIsOpen(newState);\n  };\n\n  const clearSelection = () => {\n    setSelectedAccount(undefined);\n    setIsDirty(true);\n    setIsOpen(false);\n  };\n\n  const noServiceAccounts = [\n    <SelectOption\n      isNoResultsOption={true}\n      isDisabled={true}\n      key={t(\"no_results_found\")}\n    >\n      {t(\"no_results_found\")}\n    </SelectOption>,\n  ];\n  const noUserAccounts = [\n    <SelectOption\n      isNoResultsOption={true}\n      isDisabled={true}\n      key={\"no_user_accounts\"}\n    >\n      {t(\"no_results_found\")}\n    </SelectOption>,\n  ];\n\n  function makeOptions(filterValue = \"\") {\n    const filter = filterValue.toLowerCase();\n    const filteredAccounts =\n      filter !== \"\"\n        ? accounts?.filter(\n            (principal) =>\n              principal.displayName.toLowerCase().includes(filter) ||\n              principal.id.includes(filter)\n          )\n        : accounts;\n\n    const serviceAccountOptions = filteredAccounts\n      ?.filter(\n        (principal) => principal.principalType === PrincipalType.ServiceAccount\n      )\n      .sort((a, b) =>\n        a.displayName && b.displayName\n          ? a.displayName.localeCompare(b.displayName)\n          : -1\n      )\n      .map((principal, index) => (\n        <SelectOption\n          key={index}\n          value={principal.id}\n          description={principal.displayName}\n        >\n          {principal.id}\n        </SelectOption>\n      ));\n\n    const userAccountOperations = filteredAccounts\n      ?.filter(\n        (principal) => principal.principalType === PrincipalType.UserAccount\n      )\n      .map((principal, index) => (\n        <SelectOption\n          key={index}\n          value={principal.id}\n          description={principal.displayName}\n        >\n          {principal.id}\n        </SelectOption>\n      ));\n\n    return [\n      <SelectGroup key=\"all_accounts_group\">\n        <SelectOption\n          key={t(\"all_accounts_title\")}\n          value={t(\"all_accounts_title\")}\n          description={t(\"all_accounts_description\")}\n        >\n          {t(\"all_accounts_title\")}\n        </SelectOption>\n      </SelectGroup>,\n\n      <Divider key=\"all_accounts_divider\" />,\n      <SelectGroup\n        label={t(\"all_accounts_service_account_group\")}\n        key=\"service_accounts_group\"\n      >\n        {serviceAccountOptions?.length\n          ? serviceAccountOptions\n          : noServiceAccounts}\n      </SelectGroup>,\n      <Divider key=\"user_account_divider2\" />,\n      <SelectGroup\n        label={t(\"all_accounts_user_account_group\")}\n        key=\"user_accounts_group\"\n      >\n        {userAccountOperations?.length ? userAccountOperations : noUserAccounts}\n      </SelectGroup>,\n    ];\n  }\n\n  const onSelect: SelectProps[\"onSelect\"] = (_, value) => {\n    setSelectedAccount(value as string);\n    setIsDirty(false);\n    setIsOpen(false);\n  };\n\n  const validated: ValidatedOptions = isDirty\n    ? ValidatedOptions.error\n    : ValidatedOptions.default;\n\n  return (\n    <Modal\n      id=\"manage-permissions-modal\"\n      variant={\"large\"}\n      isOpen={true}\n      aria-label={t(\"dialog_aria_label\")}\n      position=\"top\"\n      title={t(\"dialog_title\")}\n      showClose={true}\n      aria-describedby=\"modal-message\"\n      onClose={onClose}\n      onEscapePress={onClose}\n      appendTo={() =>\n        id ? document.getElementById(id) || document.body : document.body\n      }\n      actions={[\n        <Button\n          key={1}\n          variant=\"primary\"\n          isDisabled={\n            selectedAccount == \"\" || selectedAccount == undefined ? true : false\n          }\n          onClick={() => onNext(selectedAccount)}\n          aria-label={t(\"step_1_submit_button\")}\n        >\n          {t(\"step_1_submit_button\")}\n        </Button>,\n        <Button\n          onClick={onClose}\n          key={2}\n          variant=\"secondary\"\n          aria-label={t(\"common:cancel\")}\n        >\n          {t(\"common:cancel\")}\n        </Button>,\n      ]}\n    >\n      <Form onSubmit={(e) => e.preventDefault()}>\n        <FormGroup\n          fieldId=\"kafka-instance-name\"\n          label={t(\"kafka_instance\")}\n          id=\"modal-message\"\n        >\n          {kafkaName}\n        </FormGroup>\n\n        <FormGroup\n          fieldId=\"account-name\"\n          validated={validated}\n          helperTextInvalid={t(\"common:required\")}\n          isRequired\n          label={t(\"account_id_title\")}\n          labelIcon={\n            <Popover bodyContent={t(\"account_id_help\")}>\n              <button\n                type=\"button\"\n                onClick={(e) => e.preventDefault()}\n                className=\"pf-c-form__group-label-help\"\n                aria-label={t(\"account_help\")}\n              >\n                <HelpIcon noVerticalAlign />\n              </button>\n            </Popover>\n          }\n        >\n          {accounts ? (\n            <Select\n              id={\"account-id\"}\n              data-testid=\"acls-select-account\"\n              className=\"kafka-ui--select--limit-height\"\n              variant={SelectVariant.typeahead}\n              typeAheadAriaLabel={t(\"account_id_title\")}\n              maxHeight={400}\n              onToggle={onToggle}\n              onSelect={onSelect}\n              onClear={clearSelection}\n              selections={selectedAccount}\n              onFilter={(_, value) => makeOptions(value)}\n              isOpen={isOpen}\n              placeholderText={t(\"account_id_typeahead_placeholder\")}\n              isCreatable\n              menuAppendTo=\"parent\"\n              validated={validated}\n              createText={t(\"resourcePrefix.create_text\")}\n              isGrouped\n              onCreateOption={() => {\n                setIsOpen(false);\n                setIsDirty(false);\n              }}\n            >\n              {makeOptions()}\n            </Select>\n          ) : (\n            <Skeleton width={\"100%\"} />\n          )}\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport type { ResourceTypeValue } from \"./ResourceType\";\nimport type { ResourcePrefixRuleValue } from \"./ResourcePrefixRule\";\nimport { AsyncTypeaheadSelect } from \"@rhoas/app-services-ui-components\";\n\ntype ResourceNameProps = {\n  value: string | undefined;\n  onChangeValue: (value: string | undefined) => void;\n  onFetchOptions: (filter: string) => string[];\n  submitted: boolean;\n  resourceType: ResourceTypeValue | undefined;\n  resourcePrefixRule: ResourcePrefixRuleValue;\n  setIsNameValid: (value: boolean) => void;\n};\n\nexport const ResourceName: React.VFC<ResourceNameProps> = ({\n  value,\n  onChangeValue,\n  submitted,\n  resourceType,\n  resourcePrefixRule,\n  onFetchOptions,\n  setIsNameValid,\n}) => {\n  const { t } = useTranslation([\"manage-kafka-permissions\"]);\n  const validationCheck = (\n    resourceType: ResourceTypeValue | undefined,\n    resourcePreixCondition: \"Starts with\" | \"Is\",\n    filter: string | undefined\n  ) => {\n    const regExp = new RegExp(\"^[0-9A-Za-z_.-]+$\");\n\n    if (filter === undefined || filter === \"\" || filter == \"*\")\n      return { isValid: true, message: undefined };\n    if (resourcePreixCondition == \"Is\" && resourceType == \"topic\") {\n      if (filter == \".\" || filter == \"..\")\n        return {\n          isValid: false,\n          message: t(\"resourcePrefix.invalid_topic_name\"),\n        };\n    }\n\n    if (resourceType == \"topic\" && !regExp.test(filter))\n      return {\n        isValid: false,\n        message: t(\"resourcePrefix.invalid_topic\"),\n      };\n\n    if (resourceType == \"consumer-group\" && !regExp.test(filter))\n      return {\n        isValid: false,\n        message: t(\"resourcePrefix.invalid_consumer_group\"),\n      };\n    if (filter.length > 32)\n      return { isValid: false, message: t(\"resourcePrefix.invalid_length\") };\n\n    return { isValid: true, message: undefined };\n  };\n\n  const onValidation = (filter: string | undefined) => {\n    const validationMessage = validationCheck(\n      resourceType,\n      resourcePrefixRule,\n      filter\n    );\n    setIsNameValid(validationMessage.isValid);\n    return validationMessage;\n  };\n\n  return (\n    <AsyncTypeaheadSelect\n      id=\"resource-name\"\n      ariaLabel={\n        resourcePrefixRule === \"Is\"\n          ? t(\"resourcePrefix.aria_label_name_is\", { value: resourceType })\n          : t(\"resourcePrefix.aria_label_name_starts_with\", {\n              value: resourceType,\n            })\n      }\n      value={value}\n      placeholderText={\n        resourcePrefixRule === \"Is\"\n          ? t(\"resourcePrefix.placeholder_name_is\")\n          : t(\"resourcePrefix.placeholder_name_starts_with\")\n      }\n      onChange={onChangeValue}\n      required={true}\n      submitted={submitted}\n      onFetchOptions={onFetchOptions}\n      onValidationCheck={onValidation}\n      isInputFilterPersisted={true}\n      isInputValuePersisted={true}\n      width={220}\n    />\n  );\n};\n","import { useLayoutEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport type { SelectProps } from \"@patternfly/react-core\";\nimport {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\n\nexport type ResourceOperationValue =\n  | \"All\"\n  | \"Read\"\n  | \"Write\"\n  | \"Create\"\n  | \"Delete\"\n  | \"Alter\"\n  | \"Describe\"\n  | \"Describe configs\"\n  | \"Alter configs\";\n\ntype ResourceOperationProps = {\n  value: ResourceOperationValue | undefined;\n  onChangeValue: (value: ResourceOperationValue | undefined) => void;\n  initialOpen?: boolean;\n  invalid: boolean;\n  resourceTypeOptions: string[];\n};\n\nexport const ResourceOperation: React.VFC<ResourceOperationProps> = ({\n  value,\n  onChangeValue,\n  initialOpen = false,\n  invalid,\n  resourceTypeOptions,\n}) => {\n  const { t } = useTranslation([\"manage-kafka-permissions\"]);\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  // for Storybook, allows opening the select programmatically respecting the initialization needed by the modal and Popper.js\n  useLayoutEffect(() => setIsOpen(initialOpen), [initialOpen]);\n\n  const onToggle = (value: boolean) => {\n    setIsOpen(value);\n  };\n  const onSelect: SelectProps[\"onSelect\"] = (_, selection) => {\n    onChangeValue(selection as ResourceOperationValue);\n    setIsOpen(false);\n  };\n  const makeOptions = () => {\n    return resourceTypeOptions.map((value, index) => (\n      <SelectOption key={index} value={value}>\n        {value}\n      </SelectOption>\n    ));\n  };\n\n  return (\n    <FormGroup\n      validated={invalid ? ValidatedOptions.error : ValidatedOptions.default}\n      helperTextInvalid={t(\"common:required\")}\n      fieldId={\"resource-operation-select\"}\n    >\n      <Select\n        id={\"resource-operation-select\"}\n        aria-label={t(\"operations.aria_label\", value)}\n        data-testid=\"acls-resource-operation-select\"\n        variant={SelectVariant.single}\n        onToggle={onToggle}\n        onSelect={onSelect}\n        isOpen={isOpen}\n        width={200}\n        placeholderText={t(\"operations.placeholder_text\")}\n        validated={invalid ? ValidatedOptions.error : ValidatedOptions.default}\n        selections={value}\n        menuAppendTo={document.body}\n      >\n        {makeOptions()}\n      </Select>\n    </FormGroup>\n  );\n};\n","import { useLayoutEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport type { SelectProps } from \"@patternfly/react-core\";\nimport { Select, SelectOption, SelectVariant } from \"@patternfly/react-core\";\n\nexport type ResourcePermissionValue = \"allow\" | \"deny\";\n\ntype ResourcePermissionProps = {\n  value: ResourcePermissionValue;\n  onChangeValue: (value: ResourcePermissionValue) => void;\n  initialOpen?: boolean;\n};\n\nexport const ResourcePermission: React.VFC<ResourcePermissionProps> = ({\n  value,\n  onChangeValue,\n  initialOpen = false,\n}) => {\n  const { t } = useTranslation([\"manage-kafka-permissions\"]);\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  // for Storybook, allows opening the select programmatically respecting the initialization needed by the modal and Popper.js\n  useLayoutEffect(() => setIsOpen(initialOpen), [initialOpen]);\n\n  const resourcePermissionOptions: {\n    [key in ResourcePermissionValue]: string;\n  } = {\n    allow: t(\"permissions.allow\"),\n    deny: t(\"permissions.deny\"),\n  };\n  const onToggle = (value: boolean) => {\n    setIsOpen(value);\n  };\n  const onSelect: SelectProps[\"onSelect\"] = (_, selection) => {\n    onChangeValue(selection as ResourcePermissionValue);\n    setIsOpen(false);\n  };\n  const makeOptions = () => {\n    return Object.entries(resourcePermissionOptions).map(([value, label]) => (\n      <SelectOption key={value} value={value}>\n        {label}\n      </SelectOption>\n    ));\n  };\n\n  return (\n    <Select\n      id={\"resource-permission-select\"}\n      aria-label={t(\"permissions.aria_label\", { value })}\n      data-testid=\"acls-resource-permission-select\"\n      variant={SelectVariant.single}\n      onToggle={onToggle}\n      onSelect={onSelect}\n      isOpen={isOpen}\n      width={150}\n      selections={value}\n      menuAppendTo={document.body}\n    >\n      {makeOptions()}\n    </Select>\n  );\n};\n","import type { SelectProps } from \"@patternfly/react-core\";\nimport { Select, SelectOption, SelectVariant } from \"@patternfly/react-core\";\nimport { useLayoutEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nexport type ResourcePrefixRuleValue = \"Is\" | \"Starts with\";\n\ntype ResourcePrefixRuleProps = {\n  value: ResourcePrefixRuleValue;\n  onChangeValue: (value: ResourcePrefixRuleValue) => void;\n  initialOpen?: boolean;\n};\n\nexport const ResourcePrefixRule: React.VFC<ResourcePrefixRuleProps> = ({\n  value,\n  onChangeValue,\n  initialOpen = false,\n}) => {\n  const { t } = useTranslation([\"manage-kafka-permissions\"]);\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  // for Storybook, allows opening the select programmatically respecting the initialization needed by the modal and Popper.js\n  useLayoutEffect(() => setIsOpen(initialOpen), [initialOpen]);\n\n  const resourcePrefixRuleOptions: {\n    [key in ResourcePrefixRuleValue]: { label: string; description: string };\n  } = {\n    \"Starts with\": {\n      label: t(\"resource_prefix_rule.starts_with\"),\n      description: t(\"resource_prefix_rule.starts_with_description\"),\n    },\n    Is: {\n      label: t(\"resource_prefix_rule.is\"),\n      description: t(\"resource_prefix_rule.is_description\"),\n    },\n  };\n\n  const onToggle = (value: boolean) => {\n    setIsOpen(value);\n  };\n  const onSelect: SelectProps[\"onSelect\"] = (_, selection) => {\n    onChangeValue(selection as ResourcePrefixRuleValue);\n    setIsOpen(false);\n  };\n  const makeOptions = () => {\n    return Object.entries(resourcePrefixRuleOptions).map(\n      ([key, { label, description }]) => (\n        <SelectOption key={key} value={key} description={description}>\n          {label}\n        </SelectOption>\n      )\n    );\n  };\n\n  return (\n    <Select\n      id={\"resource-prefix-rule-select\"}\n      aria-label={t(\"resource_prefix_rule.aria_label\", { value })}\n      data-testid=\"acls-resource-prefix-rule-select\"\n      variant={SelectVariant.single}\n      onToggle={onToggle}\n      onSelect={onSelect}\n      isOpen={isOpen}\n      width={150}\n      selections={value}\n      menuAppendTo={document.body}\n    >\n      {makeOptions()}\n    </Select>\n  );\n};\n","import { useLayoutEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport type { SelectProps } from \"@patternfly/react-core\";\nimport {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\n\nexport type ResourceTypeValue =\n  | \"topic\"\n  | \"consumer-group\"\n  | \"kafka-instance\"\n  | \"transactional-id\";\n\ntype ResourceTypeProps = {\n  value: ResourceTypeValue | undefined;\n  onChangeValue: (value: ResourceTypeValue | undefined) => void;\n  initialOpen?: boolean;\n  invalid: boolean;\n};\n\nexport const ResourceType: React.VFC<ResourceTypeProps> = ({\n  value,\n  onChangeValue,\n  initialOpen = false,\n  invalid,\n}) => {\n  const { t } = useTranslation([\"manage-kafka-permissions\"]);\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  // for Storybook, allows opening the select programmatically respecting the initialization needed by the modal and Popper.js\n  useLayoutEffect(() => setIsOpen(initialOpen), [initialOpen]);\n\n  const resourceTypeOptions: { [key in ResourceTypeValue]: string } = {\n    \"consumer-group\": t(\"resourceTypes.consumer_group\"),\n    topic: t(\"resourceTypes.topic\"),\n    \"kafka-instance\": t(\"resourceTypes.kafka_instance\"),\n    \"transactional-id\": t(\"resourceTypes.transactional_id\"),\n  };\n  const onToggle = (value: boolean) => {\n    setIsOpen(value);\n  };\n  const onSelect: SelectProps[\"onSelect\"] = (_, selection) => {\n    onChangeValue(selection as ResourceTypeValue);\n    setIsOpen(false);\n  };\n  const makeOptions = () => {\n    return Object.entries(resourceTypeOptions).map(([value, label]) => (\n      <SelectOption key={value} value={value}>\n        {label}\n      </SelectOption>\n    ));\n  };\n\n  return (\n    <FormGroup\n      validated={invalid ? ValidatedOptions.error : ValidatedOptions.default}\n      helperTextInvalid={t(\"common:required\")}\n      fieldId={\"resource-type-select\"}\n    >\n      <Select\n        id={\"resource-type-select\"}\n        aria-label={\n          value != undefined\n            ? t(\"resourceTypes.resource_type_selected\", { value: value })\n            : t(\"resourceTypes.resource_type\")\n        }\n        data-testid=\"acls-resource-type-select\"\n        variant={SelectVariant.single}\n        onToggle={onToggle}\n        onSelect={onSelect}\n        isOpen={isOpen}\n        width={180}\n        placeholderText={t(\"resourceTypes.placeholder_text\")}\n        validated={invalid ? ValidatedOptions.error : ValidatedOptions.default}\n        selections={value}\n        menuAppendTo={document.body}\n      >\n        {makeOptions()}\n      </Select>\n    </FormGroup>\n  );\n};\n","import { Th, Thead, Tr } from \"@patternfly/react-table\";\nimport { useTranslation } from \"react-i18next\";\n\nexport const ShortcutsTableHead: React.FC = () => {\n  const { t } = useTranslation([\"manage-kafka-permissions\"]);\n  return (\n    <Thead>\n      <Tr>\n        <Th>{t(\"table.resource_column_title\")}</Th>\n        <Th />\n\n        <Th />\n\n        <Th>{t(\"table.permissions_column_title\")}</Th>\n        <Th />\n        <Th />\n      </Tr>\n    </Thead>\n  );\n};\n","import { Tbody, Td, Tr } from \"@patternfly/react-table\";\nimport { useTranslation } from \"react-i18next\";\nimport { ResourceType } from \"./ResourceType\";\nimport type { ResourceTypeValue } from \"./ResourceType\";\nimport { ResourcePermission } from \"./ResourcePermission\";\nimport type { ResourcePermissionValue } from \"./ResourcePermission\";\nimport { ResourceOperation } from \"./ResourceOperation\";\nimport type { ResourceOperationValue } from \"./ResourceOperation\";\nimport { RemoveButton } from \"@rhoas/app-services-ui-components\";\nexport type KafkaInstanceManualPermissions = {\n  resourceType: ResourceTypeValue | undefined;\n  onChangeResourceType: (value: ResourceTypeValue | undefined) => void;\n  submitted: boolean;\n  resourcePermission: ResourcePermissionValue;\n  onChangeResourcePermission: (value: ResourcePermissionValue) => void;\n  resourceOperation: ResourceOperationValue | undefined;\n  onChangeResourceOperation: (\n    value: ResourceOperationValue | undefined\n  ) => void;\n  row: number;\n  onDelete: (row: number) => void;\n};\n\nexport const KafkaInstanceManualPermissions: React.FC<\n  KafkaInstanceManualPermissions\n> = ({\n  resourceType,\n  resourceOperation,\n  resourcePermission,\n  submitted,\n  onChangeResourceOperation,\n  onChangeResourcePermission,\n  onChangeResourceType,\n  row,\n  onDelete,\n}) => {\n  const { t } = useTranslation([\"manage-kafka-permissions\"]);\n  return (\n    <Tbody>\n      <Tr>\n        <Td width={60}>\n          <ResourceType\n            value={resourceType}\n            onChangeValue={onChangeResourceType}\n            invalid={submitted && resourceType === undefined}\n          />\n        </Td>\n\n        <Td />\n        <Td />\n\n        <Td>\n          <ResourcePermission\n            value={resourcePermission}\n            onChangeValue={onChangeResourcePermission}\n          />\n        </Td>\n        <Td>\n          <ResourceOperation\n            value={resourceOperation}\n            onChangeValue={onChangeResourceOperation}\n            resourceTypeOptions={[\n              t(\"operations.alter\"),\n              t(\"operations.describe\"),\n            ]}\n            invalid={submitted && resourceOperation === undefined}\n          />\n        </Td>\n        <Td>\n          <RemoveButton\n            variant=\"link\"\n            onClick={() => onDelete(row)}\n            tooltip={t(\"operations.delete\")}\n          />\n        </Td>\n      </Tr>\n    </Tbody>\n  );\n};\n","import { Tbody, Tr, Td } from \"@patternfly/react-table\";\nimport { ResourceName } from \"./ResourceName\";\nimport { ResourceOperation } from \"./ResourceOperation\";\nimport type { ResourceOperationValue } from \"./ResourceOperation\";\nimport { ResourcePermission } from \"./ResourcePermission\";\nimport type { ResourcePermissionValue } from \"./ResourcePermission\";\nimport { ResourcePrefixRule } from \"./ResourcePrefixRule\";\nimport type { ResourcePrefixRuleValue } from \"./ResourcePrefixRule\";\nimport { ResourceType } from \"./ResourceType\";\nimport type { ResourceTypeValue } from \"./ResourceType\";\nimport { ShortcutsTableHead } from \"./ShortcutsTableHead\";\nimport { useTranslation } from \"react-i18next\";\nimport { KafkaInstanceManualPermissions } from \"./KafkaInstanceManualPermissions\";\nimport { RemoveButton } from \"@rhoas/app-services-ui-components\";\n\nexport type AssignPermissionsManualProps = {\n  resourceType: ResourceTypeValue | undefined;\n  onChangeResourceType: (value: ResourceTypeValue | undefined) => void;\n  submitted: boolean;\n  resourcePrefix: ResourcePrefixRuleValue;\n  onChangeResourcePrefix: (value: ResourcePrefixRuleValue) => void;\n  resourceName: string | undefined;\n  onChangeResource: (value: string | undefined) => void;\n  onFetchResourceNameOptions: (filter: string) => string[];\n  resourcePermission: ResourcePermissionValue;\n  onChangeResourcePermission: (value: ResourcePermissionValue) => void;\n  resourceOperation: ResourceOperationValue | undefined;\n  onChangeResourceOperation: (\n    value: ResourceOperationValue | undefined\n  ) => void;\n  multipleShorctutPermissions?: boolean;\n  row: number;\n  onDelete: (row: number) => void;\n  setIsNameValid: (value: boolean) => void;\n};\n\nexport const AssignPermissionsManual: React.FC<\n  AssignPermissionsManualProps\n> = ({\n  resourceType,\n  onChangeResourceType,\n  submitted,\n  resourcePrefix,\n  onChangeResourcePrefix,\n  resourceName,\n  onChangeResource,\n  onFetchResourceNameOptions,\n  resourcePermission,\n  resourceOperation,\n  onChangeResourceOperation,\n  onChangeResourcePermission,\n  multipleShorctutPermissions = true,\n  row,\n  onDelete,\n  setIsNameValid,\n}) => {\n  const { t } = useTranslation(\"manage-kafka-permissions\");\n  const resourceTypeOptions = () => {\n    switch (resourceType) {\n      case \"consumer-group\":\n        return [\n          t(\"operations.all\"),\n          t(\"operations.read\"),\n          t(\"operations.delete\"),\n          t(\"operations.describe\"),\n        ];\n      case \"kafka-instance\":\n        return [t(\"operations.alter\"), t(\"operations.describe\")];\n      case \"transactional-id\":\n        return [\n          t(\"operations.all\"),\n          t(\"operations.write\"),\n          t(\"operations.describe\"),\n        ];\n      default:\n        return [\n          t(\"operations.all\"),\n          t(\"operations.read\"),\n          t(\"operations.write\"),\n          t(\"operations.create\"),\n          t(\"operations.delete\"),\n          t(\"operations.alter\"),\n          t(\"operations.describe\"),\n          t(\"operations.describe_configs\"),\n          t(\"operations.alter_configs\"),\n        ];\n    }\n  };\n\n  return (\n    <>\n      {!multipleShorctutPermissions ? <ShortcutsTableHead /> : null}\n      {resourceType === \"kafka-instance\" ? (\n        <KafkaInstanceManualPermissions\n          resourceOperation={resourceOperation}\n          resourcePermission={resourcePermission}\n          resourceType={resourceType}\n          submitted={submitted}\n          onChangeResourceOperation={onChangeResourceOperation}\n          onChangeResourcePermission={onChangeResourcePermission}\n          onChangeResourceType={onChangeResourceType}\n          onDelete={onDelete}\n          row={row}\n        />\n      ) : (\n        <Tbody>\n          <Tr>\n            <Td>\n              <ResourceType\n                value={resourceType}\n                onChangeValue={onChangeResourceType}\n                invalid={submitted && resourceType === undefined}\n              />\n            </Td>\n            <Td>\n              <ResourcePrefixRule\n                value={resourcePrefix}\n                onChangeValue={onChangeResourcePrefix}\n              />\n            </Td>\n            <Td>\n              <ResourceName\n                value={resourceName}\n                onChangeValue={onChangeResource}\n                onFetchOptions={onFetchResourceNameOptions}\n                submitted={submitted}\n                resourceType={resourceType}\n                resourcePrefixRule={resourcePrefix}\n                setIsNameValid={setIsNameValid}\n              />\n            </Td>\n            <Td>\n              <ResourcePermission\n                value={resourcePermission}\n                onChangeValue={onChangeResourcePermission}\n              />\n            </Td>\n            <Td>\n              <ResourceOperation\n                resourceTypeOptions={resourceTypeOptions()}\n                value={resourceOperation}\n                onChangeValue={onChangeResourceOperation}\n                invalid={\n                  submitted && resourceOperation === undefined ? true : false\n                }\n              />\n            </Td>\n            <Td>\n              <RemoveButton\n                variant=\"link\"\n                onClick={() => onDelete(row)}\n                tooltip={t(\"remove_permission_tooltip\")}\n                ariaLabel={t(\"manual_delete\")}\n              />\n            </Td>\n          </Tr>\n        </Tbody>\n      )}\n    </>\n  );\n};\n","import { Tr, Td } from \"@patternfly/react-table\";\nimport { ResourceTypeLabel } from \"./ResourceTypeLabel\";\nimport { DisplayResourceName, PermissionOperationCell } from \"./Cells\";\nimport { ResourceName } from \"./ResourceName\";\nimport { ResourcePrefixRule } from \"./ResourcePrefixRule\";\nimport type { ResourcePrefixRuleValue } from \"./ResourcePrefixRule\";\n\nexport type ProduceTopicRowProps = {\n  onChange: (value: ResourcePrefixRuleValue) => void;\n  prefixRuleValue: ResourcePrefixRuleValue;\n  resourceNameValue: string | undefined;\n  onChangeResourceName: (value: string | undefined) => void;\n  onFetchResourceNameOptions: (filter: string) => string[];\n  submitted: boolean;\n  isConsumeTopicShortcut?: boolean;\n  setIsNameValid: (value: boolean) => void;\n};\nexport const ProduceTopicRow: React.FC<ProduceTopicRowProps> = ({\n  onChange,\n  prefixRuleValue,\n  resourceNameValue,\n  onChangeResourceName,\n  onFetchResourceNameOptions,\n  submitted,\n  isConsumeTopicShortcut,\n  setIsNameValid,\n}) => {\n  return (\n    <Tr style={{ borderBottom: isConsumeTopicShortcut ? \"none\" : \"\" }}>\n      <Td>\n        {\" \"}\n        <ResourceTypeLabel variant={\"TOPIC\"} />{\" \"}\n        <DisplayResourceName resourceType={\"TOPIC\"} />{\" \"}\n      </Td>\n      <Td>\n        {\n          <ResourcePrefixRule\n            value={prefixRuleValue}\n            onChangeValue={onChange}\n          />\n        }\n      </Td>\n      <Td>\n        <ResourceName\n          value={resourceNameValue}\n          onChangeValue={onChangeResourceName}\n          onFetchOptions={onFetchResourceNameOptions}\n          submitted={submitted}\n          resourceType={\"topic\"}\n          resourcePrefixRule={prefixRuleValue}\n          setIsNameValid={setIsNameValid}\n        />\n      </Td>\n      <Td colSpan={2}>\n        <PermissionOperationCell\n          permission={\"ALLOW\"}\n          operation={\n            isConsumeTopicShortcut\n              ? [\"READ\", \"DESCRIBE\"]\n              : [\"WRITE\", \"CREATE\", \"DESCRIBE\"]\n          }\n        />\n      </Td>\n    </Tr>\n  );\n};\n","import { Popover, Title } from \"@patternfly/react-core\";\nimport { Tbody, Td, Tr } from \"@patternfly/react-table\";\nimport { useTranslation } from \"react-i18next\";\nimport { ResourceTypeLabel } from \"./ResourceTypeLabel\";\nimport { ResourcePrefixRule } from \"./ResourcePrefixRule\";\nimport type { ResourcePrefixRuleValue } from \"./ResourcePrefixRule\";\n\nimport { ResourceName } from \"./ResourceName\";\nimport { DisplayResourceName, PermissionOperationCell } from \"./Cells\";\nimport { ProduceTopicRow } from \"./ProduceTopicRow\";\nimport { ShortcutsTableHead } from \"./ShortcutsTableHead\";\nimport { HelpIcon } from \"@patternfly/react-icons\";\nimport { RemoveButton } from \"@rhoas/app-services-ui-components\";\n\nexport type ConsumeTopicShortcutProps = {\n  onChangeConsumerResourcePrefixRule: (value: ResourcePrefixRuleValue) => void;\n  onChangeTopicResourcePrefixRule: (value: ResourcePrefixRuleValue) => void;\n  consumerPrefixRuleValue: ResourcePrefixRuleValue;\n  topicPrefixRuleValue: ResourcePrefixRuleValue;\n  consumerResourceNameValue: string | undefined;\n  topicResourceNameValue: string | undefined;\n  onChangeConsumerResourceName: (value: string | undefined) => void;\n  onChangeTopicResourceName: (value: string | undefined) => void;\n  onFetchConsumerResourceNameOptions: (filter: string) => string[];\n  onFetchTopicResourceNameOptions: (filter: string) => string[];\n  submitted: boolean;\n  multipleShorctutPermissions?: boolean;\n  onDelete: (row: number) => void;\n  row: number;\n  setIsNameValid: (value: boolean) => void;\n};\nexport const ConsumeTopicShortcut: React.FC<ConsumeTopicShortcutProps> = ({\n  onChangeConsumerResourceName,\n  topicPrefixRuleValue,\n  topicResourceNameValue,\n  consumerPrefixRuleValue,\n  consumerResourceNameValue,\n  submitted,\n  onChangeConsumerResourcePrefixRule,\n  onChangeTopicResourceName,\n  onChangeTopicResourcePrefixRule,\n  onFetchConsumerResourceNameOptions,\n  onFetchTopicResourceNameOptions,\n  onDelete,\n  multipleShorctutPermissions = true,\n  row,\n  setIsNameValid,\n}) => {\n  const { t } = useTranslation([\"manage-kafka-permissions\"]);\n\n  return (\n    <>\n      {!multipleShorctutPermissions ? <ShortcutsTableHead /> : null}\n\n      <Tbody>\n        <Tr style={{ borderBottom: \"none\" }}>\n          <Td colSpan={5}>\n            <Title headingLevel=\"h6\">\n              {t(\"permissions_dropdown.shortcut_consume_topic\")}{\" \"}\n              <Popover\n                headerContent={t(\"permissions_dropdown.shortcut_consume_topic\")}\n                bodyContent={t(\n                  \"permissions_dropdown.shortcut_consume_topic_description\"\n                )}\n              >\n                <button\n                  type=\"button\"\n                  onClick={(e) => e.preventDefault()}\n                  className=\"pf-c-form__group-label-help\"\n                >\n                  <HelpIcon noVerticalAlign />\n                </button>\n              </Popover>\n            </Title>\n          </Td>\n\n          <Td>\n            <RemoveButton\n              variant=\"link\"\n              onClick={() => onDelete(row)}\n              tooltip={t(\"remove_permission_tooltip\")}\n              ariaLabel={t(\"delete_consumer\")}\n            />\n          </Td>\n        </Tr>\n        <ProduceTopicRow\n          setIsNameValid={setIsNameValid}\n          isConsumeTopicShortcut={true}\n          onChange={onChangeTopicResourcePrefixRule}\n          prefixRuleValue={topicPrefixRuleValue}\n          resourceNameValue={topicResourceNameValue}\n          onChangeResourceName={onChangeTopicResourceName}\n          onFetchResourceNameOptions={onFetchTopicResourceNameOptions}\n          submitted={submitted}\n        />\n        <Tr>\n          <Td>\n            {\" \"}\n            <ResourceTypeLabel variant={\"GROUP\"} />{\" \"}\n            <DisplayResourceName resourceType={\"GROUP\"} />{\" \"}\n          </Td>\n          <Td>\n            <ResourcePrefixRule\n              value={consumerPrefixRuleValue}\n              onChangeValue={onChangeConsumerResourcePrefixRule}\n            />\n          </Td>\n          <Td>\n            {\n              <ResourceName\n                value={consumerResourceNameValue}\n                onChangeValue={onChangeConsumerResourceName}\n                onFetchOptions={onFetchConsumerResourceNameOptions}\n                submitted={submitted}\n                resourceType={\"topic\"}\n                resourcePrefixRule={consumerPrefixRuleValue}\n                setIsNameValid={setIsNameValid}\n              />\n            }\n          </Td>\n          <Td>\n            <PermissionOperationCell\n              permission={\"ALLOW\"}\n              operation={[\"READ\"]}\n            />\n          </Td>\n        </Tr>\n      </Tbody>\n    </>\n  );\n};\n","import { Popover, Title } from \"@patternfly/react-core\";\nimport { Tbody, Td, Tr } from \"@patternfly/react-table\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpIcon } from \"@patternfly/react-icons\";\nimport { ResourceTypeLabel } from \"./ResourceTypeLabel\";\nimport { DisplayResourceName, PermissionOperationCell } from \"./Cells\";\nimport { RemoveButton } from \"@rhoas/app-services-ui-components\";\nimport { ShortcutsTableHead } from \"./ShortcutsTableHead\";\n\nexport type ManageAccessShortcutProps = {\n  onDelete: (row: number) => void;\n  multipleShorctutPermissions?: boolean;\n  instanceName: string;\n  row: number;\n};\nexport const ManageAccessShortcut: React.FC<ManageAccessShortcutProps> = ({\n  onDelete,\n  multipleShorctutPermissions = true,\n  instanceName,\n  row,\n}) => {\n  const { t } = useTranslation([\"manage-kafka-permissions\"]);\n\n  return (\n    <>\n      {!multipleShorctutPermissions ? <ShortcutsTableHead /> : null}\n\n      <Tbody>\n        <Tr style={{ borderBottom: \"none\" }}>\n          <Td colSpan={5}>\n            <Title headingLevel=\"h6\">\n              {t(\"permissions_dropdown.shortcut_manage_access\")}{\" \"}\n              <Popover\n                headerContent={t(\"permissions_dropdown.shortcut_manage_access\")}\n                bodyContent={t(\n                  \"permissions_dropdown.shortcut_manage_access_description\"\n                )}\n              >\n                <button\n                  type=\"button\"\n                  onClick={(e) => e.preventDefault()}\n                  className=\"pf-c-form__group-label-help\"\n                >\n                  <HelpIcon noVerticalAlign />\n                </button>\n              </Popover>\n            </Title>\n          </Td>\n          <Td>\n            <RemoveButton\n              variant=\"link\"\n              onClick={() => onDelete(row)}\n              tooltip={t(\"remove_permission_tooltip\")}\n              ariaLabel={t(\"delete_access\")}\n            />\n          </Td>\n        </Tr>\n\n        <Tr>\n          <Td colSpan={2}>\n            <ResourceTypeLabel variant={\"CLUSTER\"} />{\" \"}\n            <DisplayResourceName resourceType={\"CLUSTER\"} />{\" \"}\n            {t(\"is_kafka_instance\", { value: instanceName })}\n          </Td>\n\n          <Td />\n\n          <Td>\n            <PermissionOperationCell\n              permission={\"ALLOW\"}\n              operation={[\"ALTER\"]}\n            />\n          </Td>\n        </Tr>\n      </Tbody>\n    </>\n  );\n};\n","import { Popover, Title } from \"@patternfly/react-core\";\nimport { Tbody, Td, Tr } from \"@patternfly/react-table\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpIcon } from \"@patternfly/react-icons\";\nimport type { ResourcePrefixRuleValue } from \"./ResourcePrefixRule\";\nimport { RemoveButton } from \"@rhoas/app-services-ui-components\";\nimport { ShortcutsTableHead } from \"./ShortcutsTableHead\";\n\nimport { ProduceTopicRow } from \"./ProduceTopicRow\";\n\nexport type ProduceTopicShortcutProps = {\n  onChange: (value: ResourcePrefixRuleValue) => void;\n  prefixRuleValue: ResourcePrefixRuleValue;\n  resourceNameValue: string | undefined;\n  onChangeResourceName: (value: string | undefined) => void;\n  onFetchResourceNameOptions: (filter: string) => string[];\n  submitted: boolean;\n  onDelete: (row: number) => void;\n  multipleShorctutPermissions?: boolean;\n  row: number;\n  setIsNameValid: (value: boolean) => void;\n};\nexport const ProduceTopicShortcut: React.FC<ProduceTopicShortcutProps> = ({\n  onChange,\n  onDelete,\n  prefixRuleValue,\n  onChangeResourceName,\n  resourceNameValue,\n  submitted,\n  onFetchResourceNameOptions,\n  multipleShorctutPermissions = true,\n  row,\n  setIsNameValid,\n}) => {\n  const { t } = useTranslation([\"manage-kafka-permissions\"]);\n\n  return (\n    <>\n      {!multipleShorctutPermissions ? <ShortcutsTableHead /> : null}\n\n      <Tbody>\n        <Tr style={{ borderBottom: \"none\" }}>\n          <Td colSpan={5}>\n            <Title headingLevel=\"h6\">\n              {t(\"permissions_dropdown.shortcut_produce_topic\")}{\" \"}\n              <Popover\n                headerContent={t(\"permissions_dropdown.shortcut_produce_topic\")}\n                bodyContent={t(\n                  \"permissions_dropdown.shortcut_produce_topic_description\"\n                )}\n              >\n                <button\n                  type=\"button\"\n                  onClick={(e) => e.preventDefault()}\n                  className=\"pf-c-form__group-label-help\"\n                >\n                  <HelpIcon noVerticalAlign />\n                </button>\n              </Popover>\n            </Title>\n          </Td>\n          <Td>\n            <RemoveButton\n              variant=\"link\"\n              onClick={() => onDelete(row)}\n              tooltip={t(\"remove_permission_tooltip\")}\n              ariaLabel={t(\"delete_producer\")}\n            />\n          </Td>\n        </Tr>\n\n        <ProduceTopicRow\n          onChange={onChange}\n          prefixRuleValue={prefixRuleValue}\n          resourceNameValue={resourceNameValue}\n          onChangeResourceName={onChangeResourceName}\n          onFetchResourceNameOptions={onFetchResourceNameOptions}\n          submitted={submitted}\n          setIsNameValid={setIsNameValid}\n        />\n      </Tbody>\n    </>\n  );\n};\n","import { ActionList, ActionListItem } from \"@patternfly/react-core\";\nimport { TableComposable } from \"@patternfly/react-table\";\nimport { PermissionsDropdown } from \"./PermissionsDropdown\";\nimport type { AddAclType } from \"../types\";\nimport { AssignPermissionsManual } from \"./AssignPermissionsManual\";\nimport { ConsumeTopicShortcut } from \"./ConsumeTopicShortcut\";\nimport { ManageAccessShortcut } from \"./ManageAccessShortcut\";\nimport { ProduceTopicShortcut } from \"./ProduceTopicShortcut\";\nimport { ShortcutsTableHead } from \"./ShortcutsTableHead\";\n\nexport type AssignPermissionsProps = {\n  submitted: boolean;\n  onDelete: (index: number) => void;\n  topicNameOptions: (filter: string) => string[];\n  consumerGroupNameOptions: (filter: string) => string[];\n  addedAcls?: AddAclType[];\n  onAddManualPermissions: () => void;\n  onAddProduceTopicShortcut: () => void;\n  onConsumeTopicShortcut: () => void;\n  onManageAccessShortcut: () => void;\n  kafkaName: string;\n  setAddedAcls: (value: AddAclType[]) => void;\n  setIsNameValid: (value: boolean) => void;\n};\n\nexport const AssignPermissions: React.VFC<AssignPermissionsProps> = ({\n  submitted,\n  onDelete,\n  topicNameOptions,\n  consumerGroupNameOptions,\n  onAddManualPermissions,\n  onAddProduceTopicShortcut,\n  onConsumeTopicShortcut,\n  onManageAccessShortcut,\n  addedAcls,\n  kafkaName,\n  setAddedAcls,\n  setIsNameValid,\n}) => {\n  return (\n    <>\n      <TableComposable variant=\"compact\" gridBreakPoint=\"grid-lg\">\n        {addedAcls && addedAcls.length > 0 && <ShortcutsTableHead />}\n        {addedAcls &&\n          addedAcls.map((aclTemplate, idx) => {\n            switch (aclTemplate.type) {\n              case \"manual\":\n                return (\n                  <AssignPermissionsManual\n                    key={idx}\n                    setIsNameValid={setIsNameValid}\n                    resourceType={aclTemplate.resourceType}\n                    onChangeResourceType={(value) =>\n                      setAddedAcls(\n                        [...addedAcls].map((resourceValues, row) => {\n                          return row === idx\n                            ? { ...resourceValues, resourceType: value }\n                            : { ...resourceValues };\n                        })\n                      )\n                    }\n                    submitted={submitted}\n                    resourcePrefix={aclTemplate.resourcePrefix}\n                    onChangeResourcePrefix={(value) =>\n                      setAddedAcls(\n                        [...addedAcls].map((resourceValues, row) => {\n                          return row === idx\n                            ? { ...resourceValues, resourcePrefix: value }\n                            : { ...resourceValues };\n                        })\n                      )\n                    }\n                    resourceName={aclTemplate.resourceName}\n                    onChangeResource={(value) =>\n                      setAddedAcls(\n                        [...addedAcls].map((resourceValues, row) => {\n                          return row === idx\n                            ? { ...resourceValues, resourceName: value }\n                            : { ...resourceValues };\n                        })\n                      )\n                    }\n                    onFetchResourceNameOptions={topicNameOptions}\n                    resourcePermission={aclTemplate.resourcePermission}\n                    onChangeResourcePermission={(value) =>\n                      setAddedAcls(\n                        [...addedAcls].map((resourceValues, row) => {\n                          return row === idx\n                            ? {\n                                ...resourceValues,\n                                resourcePermission: value,\n                              }\n                            : { ...resourceValues };\n                        })\n                      )\n                    }\n                    resourceOperation={aclTemplate.resourceOperation}\n                    onChangeResourceOperation={(value) =>\n                      setAddedAcls(\n                        [...addedAcls].map((resourceValues, row) => {\n                          return row === idx\n                            ? {\n                                ...resourceValues,\n                                resourceOperation: value,\n                              }\n                            : { ...resourceValues };\n                        })\n                      )\n                    }\n                    row={idx}\n                    onDelete={onDelete}\n                  />\n                );\n\n              case \"consume-topic\":\n                return (\n                  <ConsumeTopicShortcut\n                    key={idx}\n                    setIsNameValid={setIsNameValid}\n                    onChangeConsumerResourcePrefixRule={(value) =>\n                      setAddedAcls(\n                        [...addedAcls].map((resourceValues, row) => {\n                          return row === idx\n                            ? {\n                                ...resourceValues,\n                                consumerResourcePrefixRule: value,\n                              }\n                            : { ...resourceValues };\n                        })\n                      )\n                    }\n                    onChangeTopicResourcePrefixRule={(value) =>\n                      setAddedAcls(\n                        [...addedAcls].map((resourceValues, row) => {\n                          return row === idx\n                            ? {\n                                ...resourceValues,\n                                topicResourcePrefixRule: value,\n                              }\n                            : { ...resourceValues };\n                        })\n                      )\n                    }\n                    consumerPrefixRuleValue={\n                      aclTemplate.consumerResourcePrefixRule\n                    }\n                    topicPrefixRuleValue={aclTemplate.topicResourcePrefixRule}\n                    consumerResourceNameValue={aclTemplate.consumerResourceName}\n                    topicResourceNameValue={aclTemplate.topicResourceName}\n                    onChangeConsumerResourceName={(value) =>\n                      setAddedAcls(\n                        [...addedAcls].map((resourceValues, row) => {\n                          return row === idx\n                            ? {\n                                ...resourceValues,\n                                consumerResourceName: value,\n                              }\n                            : { ...resourceValues };\n                        })\n                      )\n                    }\n                    onChangeTopicResourceName={(value) =>\n                      setAddedAcls(\n                        [...addedAcls].map((resourceValues, row) => {\n                          return row === idx\n                            ? {\n                                ...resourceValues,\n                                topicResourceName: value,\n                              }\n                            : { ...resourceValues };\n                        })\n                      )\n                    }\n                    onFetchConsumerResourceNameOptions={\n                      consumerGroupNameOptions\n                    }\n                    onFetchTopicResourceNameOptions={topicNameOptions}\n                    submitted={submitted}\n                    onDelete={onDelete}\n                    row={idx}\n                  />\n                );\n\n              case \"produce-topic\":\n                return (\n                  <ProduceTopicShortcut\n                    key={idx}\n                    setIsNameValid={setIsNameValid}\n                    onChange={(value) =>\n                      setAddedAcls(\n                        [...addedAcls].map((resourceValues, row) => {\n                          return row === idx\n                            ? { ...resourceValues, prefixRuleValue: value }\n                            : { ...resourceValues };\n                        })\n                      )\n                    }\n                    prefixRuleValue={aclTemplate.prefixRuleValue}\n                    resourceNameValue={aclTemplate.resourceNameValue}\n                    onChangeResourceName={(value) =>\n                      setAddedAcls(\n                        [...addedAcls].map((resourceValues, row) => {\n                          return row === idx\n                            ? {\n                                ...resourceValues,\n                                resourceNameValue: value,\n                              }\n                            : { ...resourceValues };\n                        })\n                      )\n                    }\n                    onFetchResourceNameOptions={topicNameOptions}\n                    submitted={submitted}\n                    onDelete={onDelete}\n                    row={idx}\n                  />\n                );\n\n              case \"manage-access\":\n                return (\n                  <ManageAccessShortcut\n                    key={idx}\n                    row={idx}\n                    instanceName={kafkaName}\n                    onDelete={onDelete}\n                  />\n                );\n            }\n          })}\n      </TableComposable>\n      <ActionList>\n        <ActionListItem style={{ paddingTop: \"20px\" }}>\n          <PermissionsDropdown\n            onAddPermission={onAddManualPermissions}\n            onShortcutConsumeTopic={onConsumeTopicShortcut}\n            onShortcutProduceTopic={onAddProduceTopicShortcut}\n            onShortcutManageAccess={onManageAccessShortcut}\n          />\n        </ActionListItem>\n      </ActionList>\n    </>\n  );\n};\n","import type React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Modal,\n  ModalVariant,\n  Button,\n  ButtonVariant,\n} from \"@patternfly/react-core\";\n\nexport type PreCancelModalProps = {\n  isOpen: boolean;\n  closeModal: () => void;\n  resumeEditing: () => void;\n};\n\nconst PreCancelModal: React.FC<PreCancelModalProps> = ({\n  isOpen,\n  closeModal,\n  resumeEditing,\n}) => {\n  const { t } = useTranslation([\"manage-kafka-permissions\"]);\n  return (\n    <Modal\n      id=\"manage-permissions-precancel-modal\"\n      variant={ModalVariant.small}\n      isOpen={isOpen}\n      aria-label={t(\"pre_cancel_label\")}\n      title={t(\"pre_cancel_title\")}\n      titleIconVariant=\"warning\"\n      showClose={true}\n      aria-describedby=\"modal-message\"\n      onClose={resumeEditing}\n      onEscapePress={closeModal}\n      actions={[\n        <Button onClick={closeModal} key={1} variant={ButtonVariant.primary}>\n          {t(\"discard_changes\")}\n        </Button>,\n        <Button\n          onClick={resumeEditing}\n          key={2}\n          variant={ButtonVariant.secondary}\n        >\n          {t(\"resume_editing\")}\n        </Button>,\n      ]}\n    >\n      {t(\"cancel_description\")}\n    </Modal>\n  );\n};\n\nexport { PreCancelModal };\n","import type { VFC } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport {\n  TableComposable,\n  TableVariant,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\n\nimport type { AclBinding } from \"../types\";\nimport { PermissionOperationCell, PrincipalCell, ResourceCell } from \"./Cells\";\n\nexport type ReviewPermissionsTableProps = {\n  acls: AclBinding[];\n  selectedAccountId: string;\n  onRemoveAcl: (idx: number) => void;\n};\n\nexport const ReviewPermissionsTable: VFC<ReviewPermissionsTableProps> = ({\n  selectedAccountId,\n  acls = [],\n  onRemoveAcl,\n}) => {\n  const { t } = useTranslation([\"manage-kafka-permissions\"]);\n\n  return (\n    <TableComposable\n      variant={TableVariant.compact}\n      aria-label={t(\"review_permissions_table\")}\n    >\n      <Thead noWrap>\n        <Tr>\n          <Th width={60}>{t(\"table.resource_column_title\")}</Th>\n          <Th width={20}>{t(\"table.permissions_column_title\")}</Th>\n          <Th width={20} />\n        </Tr>\n      </Thead>\n      <Tbody>\n        {acls.map((acl, idx) => {\n          const {\n            patternType,\n            resourceType,\n            resourceName,\n            operation,\n            permission,\n            principal,\n          } = acl;\n          const isDeleteEnabled =\n            selectedAccountId === \"All accounts\" ||\n            principal === `User:${selectedAccountId}` ||\n            principal != `User:*`;\n          const isAllAccounts = principal === \"User:*\";\n\n          return (\n            <Tr key={idx}>\n              <Td>\n                <ResourceCell\n                  patternType={patternType}\n                  resourceType={resourceType}\n                  resourceName={resourceName}\n                />\n              </Td>\n              <Td>\n                <PermissionOperationCell\n                  permission={permission}\n                  operation={operation}\n                />\n              </Td>\n              <Td>\n                <PrincipalCell\n                  isDeleteEnabled={isDeleteEnabled}\n                  isAllAccounts={isAllAccounts}\n                  onRemoveAcl={() => onRemoveAcl(idx)}\n                />\n              </Td>\n            </Tr>\n          );\n        })}\n      </Tbody>\n    </TableComposable>\n  );\n};\n","import { Text, TextContent, TextVariants } from \"@patternfly/react-core\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport type { AclBinding } from \"../types\";\nimport { ReviewPermissionsTable } from \"./ReviewPermissionsTable\";\n\nexport type ViewAccountDetailsProps = {\n  accountId: string | undefined;\n  existingAcls: AclBinding[];\n  onRemoveAcl: (index: number) => void;\n};\n\nexport const ViewAccountDetails: React.VFC<ViewAccountDetailsProps> = ({\n  accountId,\n  existingAcls,\n  onRemoveAcl,\n}) => {\n  const { t } = useTranslation([\"manage-kafka-permissions\"]);\n  const HelperText: React.FunctionComponent = () => {\n    if (accountId === \"All accounts\") {\n      return t(\"all_accounts_help\");\n    }\n    return (\n      <Trans ns={[\"manage-kafka-permissions\"]} i18nKey=\"selected_account_help\">\n        Review the list of existing permissions for the selected account. The\n        list includes account-specific permissions and permissions applied to\n        all accounts within this Kafka instance. Permissions labeled\n        <strong>All accounts</strong> cannot be removed when an individual\n        account ID is selected.\n      </Trans>\n    );\n  };\n  return (\n    <>\n      <TextContent>\n        <Text component={TextVariants.small}>\n          <HelperText />\n        </Text>\n      </TextContent>\n      <ReviewPermissionsTable\n        acls={existingAcls}\n        selectedAccountId={accountId ? accountId : \"\"}\n        onRemoveAcl={onRemoveAcl}\n      />\n    </>\n  );\n};\n","import type { ResourceOperationValue } from \"./components/ResourceOperation\";\nimport type { ResourceTypeValue } from \"./components/ResourceType\";\nimport type { AclBinding } from \"@rhoas/kafka-instance-sdk\";\nimport { AclResourceType } from \"@rhoas/kafka-instance-sdk\";\nimport type { AddAclType } from \"./types\";\n\nexport const transformPermissions = (\n  transformAclData: AclBinding[],\n  newAcls?: AddAclType[],\n  selectedAccount?: string\n) => {\n  // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n  const selectedAccountName = `User:${selectedAccount}`;\n  newAcls?.map((value) => {\n    switch (value.type) {\n      case \"manual\": {\n        transformAclData.push({\n          resourceName:\n            value.resourceType == \"kafka-instance\"\n              ? \"kafka-cluster\"\n              : value.resourceName\n              ? value.resourceName\n              : \"\",\n          resourceType: transformResourceType(value.resourceType),\n          patternType: value.resourcePrefix == \"Is\" ? \"LITERAL\" : \"PREFIXED\",\n          operation: transformResourceOperation(value.resourceOperation),\n          permission: value.resourcePermission == \"allow\" ? \"ALLOW\" : \"DENY\",\n          principal:\n            selectedAccount == \"All accounts\" ? `User:*` : selectedAccountName,\n        });\n        break;\n      }\n      case \"manage-access\":\n        {\n          transformAclData.push({\n            resourceName: \"kafka-cluster\",\n            resourceType: \"CLUSTER\",\n            patternType: \"LITERAL\",\n            operation: \"ALTER\",\n            permission: \"ALLOW\",\n            principal:\n              selectedAccount == \"All accounts\"\n                ? `User:*`\n                : selectedAccountName,\n          });\n        }\n        break;\n      case \"consume-topic\":\n        {\n          transformAclData.push(\n            {\n              resourceName: value.topicResourceName || \"\",\n              resourceType: \"TOPIC\",\n              patternType:\n                value.topicResourcePrefixRule == \"Is\" ? \"LITERAL\" : \"PREFIXED\",\n              operation: \"READ\",\n              permission: \"ALLOW\",\n              principal:\n                selectedAccount == \"All accounts\"\n                  ? `User:*`\n                  : selectedAccountName,\n            },\n            {\n              resourceName: value.topicResourceName || \"\",\n              resourceType: \"TOPIC\",\n              patternType:\n                value.topicResourcePrefixRule == \"Is\" ? \"LITERAL\" : \"PREFIXED\",\n              operation: \"DESCRIBE\",\n              permission: \"ALLOW\",\n              principal:\n                selectedAccount == \"All accounts\"\n                  ? `User:*`\n                  : selectedAccountName,\n            },\n            {\n              resourceName: value.consumerResourceName || \"\",\n              resourceType: \"GROUP\",\n              patternType:\n                value.consumerResourcePrefixRule == \"Is\"\n                  ? \"LITERAL\"\n                  : \"PREFIXED\",\n              operation: \"READ\",\n              permission: \"ALLOW\",\n              principal:\n                selectedAccount == \"All accounts\"\n                  ? `User:*`\n                  : selectedAccountName,\n            }\n          );\n        }\n        break;\n      case \"produce-topic\": {\n        transformAclData.push(\n          {\n            resourceName: value.resourceNameValue || \"\",\n            resourceType: \"TOPIC\",\n            patternType: value.prefixRuleValue == \"Is\" ? \"LITERAL\" : \"PREFIXED\",\n            operation: \"WRITE\",\n            permission: \"ALLOW\",\n            principal:\n              selectedAccount == \"All accounts\"\n                ? `User:*`\n                : selectedAccountName,\n          },\n          {\n            resourceName: value.resourceNameValue || \"\",\n            resourceType: \"TOPIC\",\n            patternType: value.prefixRuleValue == \"Is\" ? \"LITERAL\" : \"PREFIXED\",\n            operation: \"CREATE\",\n            permission: \"ALLOW\",\n            principal:\n              selectedAccount == \"All accounts\"\n                ? `User:*`\n                : selectedAccountName,\n          },\n          {\n            resourceName: value.resourceNameValue || \"\",\n            resourceType: \"TOPIC\",\n            patternType: value.prefixRuleValue == \"Is\" ? \"LITERAL\" : \"PREFIXED\",\n            operation: \"DESCRIBE\",\n            permission: \"ALLOW\",\n            principal:\n              selectedAccount == \"All accounts\"\n                ? `User:*`\n                : selectedAccountName,\n          }\n        );\n      }\n    }\n  });\n};\n\nexport const transformResourceType = (value: ResourceTypeValue | undefined) => {\n  switch (value) {\n    case \"consumer-group\":\n      return AclResourceType.Group;\n    case \"kafka-instance\":\n      return AclResourceType.Cluster;\n    case \"topic\":\n      return AclResourceType.Topic;\n    default:\n      return AclResourceType.TransactionalId;\n  }\n};\nexport const transformResourceOperation = (\n  value: ResourceOperationValue | undefined\n) => {\n  switch (value) {\n    case \"All\":\n      return \"ALL\";\n    case \"Alter\":\n      return \"ALTER\";\n    case \"Alter configs\":\n      return \"ALTER_CONFIGS\";\n    case \"Create\":\n      return \"CREATE\";\n    case \"Delete\":\n      return \"DELETE\";\n    case \"Describe\":\n      return \"DESCRIBE\";\n    case \"Describe configs\":\n      return \"DESCRIBE_CONFIGS\";\n    case \"Read\":\n      return \"READ\";\n    default:\n      return \"WRITE\";\n  }\n};\n","import {\n  Button,\n  ExpandableSection,\n  Form,\n  FormGroup,\n  Modal,\n  TextContent,\n  TextVariants,\n  Text,\n  Badge,\n  Alert,\n  Popover,\n} from \"@patternfly/react-core\";\nimport { HelpIcon } from \"@patternfly/react-icons\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { AssignPermissions } from \"./AssignPermissions\";\nimport { PreCancelModal } from \"./PreCancelModal\";\nimport { ViewAccountDetails } from \"./ViewAccountDetails\";\nimport type { AddAclType } from \"../types\";\nimport type { AclBinding } from \"@rhoas/kafka-instance-sdk\";\nimport type { Permissions } from \"ui\";\nimport {\n  createEmptyConsumeTopicAcl,\n  createEmptyManageAccessAcl,\n  createEmptyManualAcl,\n  createEmptyProduceTopicAcl,\n} from \"../types\";\nimport { transformPermissions } from \"../utils\";\n\nexport type AclType = {\n  groups: Permissions[];\n  count: number;\n};\n\nexport type EditPermissionsProps = {\n  onCancel: () => void;\n  kafkaName: string;\n  onSave: (\n    acls: AclBinding[] | undefined,\n    deletedAcls: AclBinding[] | undefined\n  ) => void;\n  acls: AclBinding[];\n  topicsList: string[];\n  consumerGroupsList: string[];\n  id?: string;\n  selectedAccount: string | undefined;\n};\n\nexport const EditPermissions: React.FC<EditPermissionsProps> = ({\n  onCancel,\n  kafkaName,\n  acls,\n  onSave,\n  topicsList,\n  consumerGroupsList,\n  selectedAccount,\n  id,\n}) => {\n  const { t } = useTranslation([\n    \"manage-kafka-permissions\",\n    \"create-kafka-instance\",\n  ]);\n\n  const escapeClosesModal = useRef<boolean>(true);\n  const [\n    isExpandedExistingPermissionSection,\n    setIsExpandedExistingPermissionSection,\n  ] = useState<boolean>(false);\n  const [isAclDeleted, setIsAclDeleted] = useState<boolean>(false);\n  const [\n    isExpandedAssignPermissionsSection,\n    setIsExpandedAssignPermissionsSection,\n  ] = useState<boolean>(true);\n  const [isNameValid, setIsNameValid] = useState<boolean>(true);\n  const [canSave, setCanSave] = useState<boolean>(false);\n  const [submitted, setSubmitted] = useState<boolean>(false);\n  const [isOpenPreCancelModal, setIsOpenPreCancelModal] =\n    useState<boolean>(false);\n  const [existingAcls, setExistingAcls] = useState<AclBinding[]>(acls);\n  const [newAcls, setNewAcls] = useState<AddAclType[]>();\n  const [deletedAcls, setDeletedAcls] = useState<AclBinding[] | undefined>(\n    undefined\n  );\n\n  const checkValidation = useCallback(() => {\n    if (newAcls) {\n      const isRowInvalid = newAcls?.map((value) =>\n        value.type == \"manual\" &&\n        value.resourceType == \"kafka-instance\" &&\n        value.resourceOperation != undefined\n          ? false\n          : Object.values(value).includes(undefined)\n      );\n      isRowInvalid.includes(true) ? setCanSave(false) : setCanSave(true);\n      if (canSave == true && isNameValid) return true;\n      else return false;\n    }\n    if (deletedAcls && deletedAcls.length > 0) {\n      setCanSave(true);\n      return true;\n    } else return false;\n  }, [canSave, deletedAcls, isNameValid, newAcls]);\n\n  useEffect(() => {\n    checkValidation();\n  }, [checkValidation, newAcls]);\n\n  useEffect(() => {\n    //Fetch the latest table for exiting acls, only when no row is scheduled for deletion\n    if (deletedAcls == undefined) setExistingAcls(acls);\n  }, [acls, deletedAcls]);\n\n  const onEscapePress = () => {\n    if (escapeClosesModal.current) {\n      onCancel();\n    }\n  };\n  const topicFilter = (filter: string) => {\n    if (filter == \"\" || filter == undefined) return topicsList;\n    else return topicsList.filter((v) => v.includes(filter));\n  };\n\n  const consumerGroupsFilter = (filter: string) => {\n    if (filter == \"\" || filter == undefined) return consumerGroupsList;\n    else return consumerGroupsList.filter((v) => v.includes(filter));\n  };\n\n  const aclsToSave: AclBinding[] = [];\n\n  const onClickSubmit = () => {\n    if (\n      (newAcls && newAcls.length > 0) ||\n      (deletedAcls && deletedAcls.length > 0)\n    ) {\n      setSubmitted(true);\n      const isAclValid = checkValidation();\n      transformPermissions(aclsToSave, newAcls, selectedAccount);\n      isAclValid && onSave(aclsToSave, deletedAcls);\n    }\n  };\n\n  const onAddManualPermissions = () => {\n    setSubmitted(false);\n    setNewAcls((prevState) =>\n      prevState\n        ? [...prevState, createEmptyManualAcl()]\n        : [createEmptyManualAcl()]\n    );\n  };\n  const onAddProduceTopicShortcut = () => {\n    setSubmitted(false);\n    setNewAcls((prevState) =>\n      prevState\n        ? [...prevState, createEmptyProduceTopicAcl()]\n        : [createEmptyProduceTopicAcl()]\n    );\n  };\n  const onConsumeTopicShortcut = () => {\n    setSubmitted(false);\n    setNewAcls((prevState) =>\n      prevState\n        ? [...prevState, createEmptyConsumeTopicAcl()]\n        : [createEmptyConsumeTopicAcl()]\n    );\n  };\n  const onManageAccessShortcut = () => {\n    setSubmitted(false);\n    setNewAcls((prevState) =>\n      prevState\n        ? [...prevState, createEmptyManageAccessAcl(kafkaName)]\n        : [createEmptyManageAccessAcl(kafkaName)]\n    );\n  };\n\n  const onDeleteNewAcl = (row: number) => {\n    setNewAcls(\n      (prevState) => prevState && prevState.filter((_, index) => index !== row)\n    );\n  };\n\n  const onChangeExpandedExistingPermissionsSection = (value: boolean) => {\n    setIsExpandedExistingPermissionSection(value);\n  };\n  const onChangeExpandedAssignPermissionsSection = (value: boolean) => {\n    setIsExpandedAssignPermissionsSection(value);\n  };\n\n  const isDisabled =\n    (submitted && !canSave) ||\n    ((newAcls == undefined || newAcls.length < 1) && !isAclDeleted) ||\n    !isNameValid\n      ? true\n      : false;\n  const onClose = () => {\n    !isDisabled || (newAcls && newAcls?.length > 0)\n      ? setIsOpenPreCancelModal(true)\n      : onCancel();\n  };\n\n  const closePreCancelModal = () => {\n    setIsOpenPreCancelModal(false);\n    onCancel();\n  };\n\n  const resumeEditingPermissions = () => {\n    setIsOpenPreCancelModal(false);\n  };\n\n  const updateExistingAcls = (row: number) => {\n    setExistingAcls((existingAcls || []).filter((_, index) => index != row));\n  };\n\n  const onRemoveAcls = (row: number) => {\n    setDeletedAcls((prevState) =>\n      existingAcls && prevState != undefined\n        ? [...prevState, existingAcls[row]]\n        : existingAcls && [existingAcls[row]]\n    );\n    setIsAclDeleted(true);\n    updateExistingAcls(row);\n  };\n  //The value received will have a prefix 'User:'.Remove the prefix when displaying value\n  const accountDisplayName =\n    selectedAccount === \"All accounts\"\n      ? t(\"all_accounts_title\")\n      : selectedAccount?.includes(\"User:\")\n      ? selectedAccount?.split(\":\")[1]\n      : selectedAccount;\n  return (\n    <Modal\n      id=\"manage-permissions-modal\"\n      variant={\"large\"}\n      isOpen={true}\n      aria-label={t(\"dialog_aria_label\")}\n      position=\"top\"\n      title={t(\"dialog_title\")}\n      showClose={true}\n      aria-describedby=\"modal-message\"\n      onClose={onClose}\n      onEscapePress={onEscapePress}\n      appendTo={() =>\n        id ? document.getElementById(id) || document.body : document.body\n      }\n      actions={[\n        <Button\n          key={1}\n          variant=\"primary\"\n          isDisabled={isDisabled}\n          onClick={onClickSubmit}\n          aria-label={t(\"step_2_submit_button\")}\n        >\n          {t(\"step_2_submit_button\")}\n        </Button>,\n        <Button\n          onClick={onClose}\n          key={2}\n          variant=\"secondary\"\n          aria-label={t(\"common:cancel\")}\n        >\n          {t(\"common:cancel\")}\n        </Button>,\n      ]}\n    >\n      <PreCancelModal\n        isOpen={isOpenPreCancelModal}\n        closeModal={closePreCancelModal}\n        resumeEditing={resumeEditingPermissions}\n      />\n      <Form onSubmit={(e) => e.preventDefault()}>\n        <FormGroup\n          fieldId=\"kafka-instance-name\"\n          label={t(\"kafka_instance\")}\n          id=\"modal-message\"\n        >\n          {kafkaName}\n        </FormGroup>\n\n        <FormGroup\n          fieldId=\"account-name\"\n          label={t(\"account_id_title\")}\n          labelIcon={\n            <Popover bodyContent={t(\"account_id_help\")}>\n              <button\n                type=\"button\"\n                onClick={(e) => e.preventDefault()}\n                className=\"pf-c-form__group-label-help\"\n                aria-label={t(\"account_help\")}\n              >\n                <HelpIcon noVerticalAlign />\n              </button>\n            </Popover>\n          }\n        >\n          {accountDisplayName}\n        </FormGroup>\n        {(!canSave || !isNameValid) && submitted && (\n          <Alert\n            isInline\n            title={t(\"create-kafka-instance:form_errors.form_invalid\")}\n            variant={\"danger\"}\n          />\n        )}\n        <ExpandableSection\n          isIndented={true}\n          isExpanded={isExpandedExistingPermissionSection}\n          onToggle={onChangeExpandedExistingPermissionsSection}\n          toggleContent={\n            <div>\n              <span>{t(\"review_existing_title\")}</span>{\" \"}\n              <Badge isRead={existingAcls.length == 0 ? true : false}>\n                {existingAcls.length}\n              </Badge>\n            </div>\n          }\n        >\n          <ViewAccountDetails\n            accountId={selectedAccount}\n            existingAcls={existingAcls}\n            onRemoveAcl={onRemoveAcls}\n          />\n        </ExpandableSection>\n        <FormGroup>\n          <ExpandableSection\n            toggleText={t(\"assign_permissions_title\")}\n            isIndented={true}\n            isExpanded={isExpandedAssignPermissionsSection}\n            onToggle={onChangeExpandedAssignPermissionsSection}\n          >\n            <FormGroup>\n              <TextContent>\n                <Text component={TextVariants.small}>\n                  {selectedAccount === \"All accounts\"\n                    ? t(\"assign_permissions_all_description\")\n                    : t(\"assign_permissions_description\", {\n                        value: accountDisplayName,\n                      })}\n                </Text>\n                {newAcls && newAcls?.length > 0 && (\n                  <Text component={TextVariants.small}>\n                    {t(\"all_fields_required\")}\n                  </Text>\n                )}\n              </TextContent>\n            </FormGroup>\n            <AssignPermissions\n              setIsNameValid={setIsNameValid}\n              submitted={submitted}\n              onAddManualPermissions={onAddManualPermissions}\n              onAddProduceTopicShortcut={onAddProduceTopicShortcut}\n              onConsumeTopicShortcut={onConsumeTopicShortcut}\n              onManageAccessShortcut={onManageAccessShortcut}\n              onDelete={onDeleteNewAcl}\n              topicNameOptions={topicFilter}\n              consumerGroupNameOptions={consumerGroupsFilter}\n              addedAcls={newAcls}\n              kafkaName={kafkaName}\n              setAddedAcls={setNewAcls}\n            />\n          </ExpandableSection>\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateVariant,\n  PageSection,\n} from \"@patternfly/react-core\";\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\n\nexport const EmptyStateInitialLoading: VoidFunctionComponent = () => {\n  return (\n    <PageSection isFilled={true}>\n      <EmptyState variant={EmptyStateVariant.xs}>\n        <EmptyStateBody data-chromatic=\"ignore\">\n          <AppServicesLoading />\n        </EmptyStateBody>\n      </EmptyState>\n    </PageSection>\n  );\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  PageSection,\n  Title,\n} from \"@patternfly/react-core\";\nimport { TachometerAltIcon } from \"@patternfly/react-icons\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { FunctionComponent } from \"react\";\n\nexport const EmptyStateMetricsUnavailable: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <PageSection isFilled={true}>\n      <EmptyState variant={EmptyStateVariant.xs}>\n        <EmptyStateIcon icon={TachometerAltIcon} />\n        <Title headingLevel=\"h3\" size=\"lg\">\n          {t(\"metrics:empty_state_no_data_title\")}\n        </Title>\n        <EmptyStateBody>{t(\"metrics:empty_state_no_data_body\")}</EmptyStateBody>\n      </EmptyState>\n    </PageSection>\n  );\n};\n","import { Grid, GridItem, PageSection } from \"@patternfly/react-core\";\nimport type { FunctionComponent, ReactElement } from \"react\";\n\ntype MetricsLayoutProps = {\n  metricsLagAlert: ReactElement;\n  topicsKpi: ReactElement;\n  topicPartitionsKpi: ReactElement;\n  consumerGroupKpi: ReactElement;\n  diskSpaceMetrics: ReactElement;\n  topicMetrics: ReactElement;\n};\nexport const MetricsLayout: FunctionComponent<MetricsLayoutProps> = ({\n  metricsLagAlert,\n  topicsKpi,\n  topicPartitionsKpi,\n  consumerGroupKpi,\n  diskSpaceMetrics,\n  topicMetrics,\n}) => {\n  return (\n    <PageSection\n      hasOverflowScroll={true}\n      aria-label={\"TODO\"}\n      padding={{ default: \"noPadding\" }}\n      className={\n        \"pf-u-px-lg-on-xl pf-u-pt-sm-on-xl pf-u-pb-lg-on-xl pf-u-px-md pf-u-pb-md\"\n      }\n    >\n      <Grid hasGutter>\n        <GridItem>{metricsLagAlert}</GridItem>\n        <GridItem sm={4}>{topicsKpi}</GridItem>\n        <GridItem sm={4}>{topicPartitionsKpi}</GridItem>\n        <GridItem sm={4}>{consumerGroupKpi}</GridItem>\n        <GridItem lg={6}>{diskSpaceMetrics}</GridItem>\n        <GridItem lg={6}>{topicMetrics}</GridItem>\n      </Grid>\n    </PageSection>\n  );\n};\n","import { CardBody, Bullseye, Spinner } from \"@patternfly/react-core\";\nimport type { FunctionComponent } from \"react\";\n\nexport const CardBodyLoading: FunctionComponent = () => (\n  <CardBody>\n    <Bullseye>\n      <Spinner isSVG data-chromatic=\"ignore\" />\n    </Bullseye>\n  </CardBody>\n);\n","import { DurationOptions } from \"./types\";\n\nexport const timeIntervalsMapping = {\n  [DurationOptions.Last5minutes]: {\n    interval: 1 * 60,\n    ticks: 6,\n    showDate: false,\n  },\n  [DurationOptions.Last15minutes]: {\n    interval: 3 * 60,\n    ticks: 6,\n    showDate: false,\n  },\n  [DurationOptions.Last30minutes]: {\n    interval: 5 * 60,\n    ticks: 7,\n    showDate: false,\n  },\n  [DurationOptions.Last1hour]: { interval: 10 * 60, ticks: 6, showDate: false },\n  [DurationOptions.Last3hours]: {\n    interval: 30 * 60,\n    ticks: 7,\n    showDate: false,\n  },\n  [DurationOptions.Last6hours]: {\n    interval: 1 * 60 * 60,\n    ticks: 7,\n    showDate: false,\n  },\n  [DurationOptions.Last12hours]: {\n    interval: 2 * 60 * 60,\n    ticks: 7,\n    showDate: false,\n  },\n  [DurationOptions.Last24hours]: {\n    interval: 4 * 60 * 60,\n    ticks: 7,\n    showDate: true,\n  },\n  [DurationOptions.Last2days]: {\n    interval: 8 * 60 * 60,\n    ticks: 7,\n    showDate: true,\n  },\n  [DurationOptions.Last7days]: {\n    interval: 24 * 60 * 60,\n    ticks: 8,\n    showDate: true,\n  },\n} as const;\n\nexport const chartHeight = 350;\nexport const chartPadding = {\n  bottom: 110, // Adjusted to accomodate legend\n  left: 120,\n  right: 40,\n  top: 10,\n};\n","import { Flex, FlexItem, Skeleton } from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { chartHeight, chartPadding } from \"../consts\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const ChartSkeletonLoader: VoidFunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <Flex direction={{ default: \"column\" }} data-chromatic=\"ignore\">\n      <FlexItem>\n        <Skeleton\n          height={`${chartHeight - chartPadding.bottom}px`}\n          screenreaderText={t(\"common:skeleton_loader_screenreader_text\")}\n        />\n      </FlexItem>\n      <FlexItem>\n        <Skeleton height={`${chartPadding.bottom / 2 - 12.5}px`} width=\"20%\" />\n      </FlexItem>\n      <FlexItem>\n        <Skeleton height={`${chartPadding.bottom / 2 - 12.5}px`} width=\"40%\" />\n      </FlexItem>\n    </Flex>\n  );\n};\n","import type { RefObject } from \"react\";\nimport { useEffect, useLayoutEffect, useRef, useState } from \"react\";\n\nexport function useChartWidth(): [RefObject<HTMLDivElement>, number] {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [width, setWidth] = useState<number>(0);\n\n  const handleResize = () =>\n    containerRef.current && setWidth(containerRef.current.clientWidth);\n\n  useLayoutEffect(() => {\n    handleResize();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n  return [containerRef, width];\n}\n","import byteSize from \"byte-size\";\nimport { fromUnixTime, sub } from \"date-fns\";\nimport { formatInTimeZone } from \"date-fns-tz\";\nimport { timeIntervalsMapping } from \"../consts\";\nimport type { DurationOptions } from \"../types\";\n\nexport function formatBytes(bytes: number): string {\n  return byteSize(bytes, { units: \"iec\" }).toString();\n}\n\nexport const shouldShowDate = (timeDuration: DurationOptions): boolean => {\n  return timeIntervalsMapping[timeDuration].showDate;\n};\n\nexport const dateToChartValue = (\n  timestamp: number,\n  { showDate }: { showDate: boolean } = { showDate: false }\n): string => {\n  const date = fromUnixTime(timestamp / 1000);\n  return formatInTimeZone(date, \"utc\", showDate ? \"HH:mm'\\n'MMM dd\" : \"HH:mm\");\n};\n\nexport function timestampsToTicks(\n  timestamps: string[],\n  duration: DurationOptions\n): number[] {\n  const allTimestamps = [...timestamps];\n  allTimestamps.sort();\n  const mostRecentTs =\n    parseInt(allTimestamps[allTimestamps.length - 1]) || Date.now();\n  return new Array(\n    Math.max(timeIntervalsMapping[duration].ticks, allTimestamps.length)\n  )\n    .fill(mostRecentTs)\n    .map((d: number, index) =>\n      sub(new Date(d), {\n        seconds: timeIntervalsMapping[duration].interval * index,\n      }).getTime()\n    );\n}\n","import type { ChartVoronoiContainerProps } from \"@patternfly/react-charts\";\nimport {\n  Chart,\n  ChartArea,\n  ChartAxis,\n  ChartGroup,\n  ChartLegend,\n  ChartThemeColor,\n  ChartThreshold,\n  ChartVoronoiContainer,\n} from \"@patternfly/react-charts\";\nimport {\n  chart_color_black_500,\n  chart_color_blue_300,\n} from \"@patternfly/react-tokens\";\nimport type { ReactElement, VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { chartHeight, chartPadding } from \"../consts\";\nimport type { DurationOptions, TimeSeriesMetrics } from \"../types\";\nimport { ChartSkeletonLoader } from \"./ChartSkeletonLoader\";\nimport { useChartWidth } from \"./useChartWidth\";\nimport { dateToChartValue, shouldShowDate, timestampsToTicks } from \"./utils\";\n\ntype ChartData = {\n  areaColor: string;\n  softLimitColor: string;\n  area: BrokerChartData[];\n  softLimit: BrokerChartData[];\n};\n\ntype BrokerChartData = {\n  name: string;\n  x: number;\n  y: number;\n};\n\ntype LegendData = {\n  name: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n};\n\ntype ChartLinearWithOptionalLimitProps = {\n  metrics: TimeSeriesMetrics;\n  duration: DurationOptions;\n  chartName: string;\n  xLabel?: string;\n  yLabel?: string;\n  usageLimit?: number;\n  formatValue?: (d: number) => string;\n  isLoading: boolean;\n  emptyState: ReactElement;\n};\n\nexport const ChartLinearWithOptionalLimit: VoidFunctionComponent<\n  ChartLinearWithOptionalLimitProps\n> = ({\n  metrics,\n  duration,\n  chartName,\n  xLabel,\n  yLabel,\n  usageLimit,\n  formatValue = (d) => `${d}`,\n  isLoading,\n  emptyState,\n}) => {\n  const { t } = useTranslation();\n  const [containerRef, width] = useChartWidth();\n\n  const itemsPerRow = width && width > 650 ? 6 : 3;\n\n  const { chartData, legendData, tickValues } = getChartData(\n    metrics,\n    duration,\n    chartName,\n    t(\"metrics:limit\"),\n    usageLimit\n  );\n\n  const hasMetrics = Object.keys(metrics).length > 0;\n  const showDate = shouldShowDate(duration);\n\n  switch (true) {\n    case isLoading:\n      return <ChartSkeletonLoader />;\n    case !hasMetrics:\n      return emptyState;\n    default: {\n      const labels: ChartVoronoiContainerProps[\"labels\"] = ({ datum }) =>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/restrict-template-expressions,@typescript-eslint/no-unsafe-argument\n        `${datum.name}: ${formatValue(datum.y)}`;\n      return (\n        <div ref={containerRef}>\n          <Chart\n            ariaTitle={chartName}\n            containerComponent={\n              <ChartVoronoiContainer labels={labels} constrainToVisibleArea />\n            }\n            legendPosition=\"bottom-left\"\n            legendComponent={\n              <ChartLegend\n                orientation={\"horizontal\"}\n                data={legendData}\n                itemsPerRow={itemsPerRow}\n              />\n            }\n            height={chartHeight}\n            padding={chartPadding}\n            themeColor={ChartThemeColor.multiUnordered}\n            width={width}\n            legendAllowWrap={true}\n          >\n            <ChartAxis\n              label={\"\\n\" + (xLabel || t(\"metrics:axis-label-time\") || \"\")}\n              tickValues={tickValues}\n              tickFormat={(d: number) =>\n                dateToChartValue(d, {\n                  showDate,\n                })\n              }\n            />\n            <ChartAxis\n              label={\"\\n\\n\\n\\n\\n\" + (yLabel || chartName)}\n              dependentAxis\n              tickFormat={formatValue}\n            />\n            <ChartGroup>\n              {chartData.map((value, index) => (\n                <ChartArea\n                  key={`chart-area-${index}`}\n                  data={value.area}\n                  style={{\n                    data: {\n                      // TODO: check if this is needed\n                      // stroke: value.color,\n                    },\n                  }}\n                />\n              ))}\n            </ChartGroup>\n            <ChartThreshold\n              key={`chart-softlimit`}\n              data={chartData[0].softLimit}\n              style={{\n                data: {\n                  stroke: chartData[0].softLimitColor,\n                },\n              }}\n            />\n          </Chart>\n        </div>\n      );\n    }\n  }\n};\n\nfunction getChartData(\n  metrics: TimeSeriesMetrics,\n  duration: number,\n  lineLabel: string,\n  limitLabel: string,\n  usageLimit?: number\n): {\n  legendData: Array<LegendData>;\n  chartData: Array<ChartData>;\n  tickValues: number[];\n} {\n  const legendData = [\n    usageLimit\n      ? {\n          name: limitLabel,\n          symbol: { fill: chart_color_black_500.value, type: \"threshold\" },\n        }\n      : undefined,\n    { name: lineLabel, symbol: { fill: chart_color_blue_300.value } },\n  ].filter((d) => !!d) as Array<LegendData>;\n\n  const areaColor = chart_color_blue_300.value;\n  const softLimitColor = chart_color_black_500.value;\n  const chartData: Array<ChartData> = [];\n  const area: Array<BrokerChartData> = [];\n  const softLimit: Array<BrokerChartData> = [];\n\n  Object.entries(metrics).map(([timestamp, bytes]) => {\n    area.push({ name: lineLabel, x: parseInt(timestamp, 10), y: bytes });\n  });\n  chartData.push({ areaColor, softLimitColor, area, softLimit });\n\n  const tickValues = timestampsToTicks(Object.keys(metrics), duration);\n\n  if (usageLimit) {\n    tickValues.forEach((timestamp) =>\n      softLimit.push({\n        name: limitLabel,\n        x: timestamp,\n        y: usageLimit,\n      })\n    );\n  }\n\n  return {\n    legendData,\n    chartData,\n    tickValues,\n  };\n}\n","import type { ChartVoronoiContainerProps } from \"@patternfly/react-charts\";\nimport { ChartLine } from \"@patternfly/react-charts\";\nimport {\n  Chart,\n  ChartAxis,\n  ChartGroup,\n  ChartLegend,\n  ChartThemeColor,\n  ChartVoronoiContainer,\n} from \"@patternfly/react-charts\";\nimport {\n  chart_color_blue_300,\n  chart_color_cyan_300,\n} from \"@patternfly/react-tokens\";\nimport type { FunctionComponent, ReactElement } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { chartHeight, chartPadding } from \"../consts\";\nimport type { PartitionBytesMetric, PartitionSelect } from \"../types\";\nimport { ChartSkeletonLoader } from \"./ChartSkeletonLoader\";\nimport { useChartWidth } from \"./useChartWidth\";\nimport {\n  dateToChartValue,\n  formatBytes,\n  shouldShowDate,\n  timestampsToTicks,\n} from \"./utils\";\n\nconst colors = [chart_color_cyan_300.value, chart_color_blue_300.value];\n\ntype ChartData = {\n  color: string;\n  area: PartitionChartData[];\n};\n\ntype PartitionChartData = {\n  name: string;\n  x: number;\n  y: number;\n};\n\ntype LegendData = {\n  name: string;\n};\n\nexport type ChartLogSizePerPartitionProps = {\n  partitions: PartitionBytesMetric;\n  topic: string | undefined;\n  duration: number;\n  isLoading: boolean;\n  emptyState: ReactElement;\n  selectedPartition: PartitionSelect;\n};\nexport const ChartLogSizePerPartition: FunctionComponent<\n  ChartLogSizePerPartitionProps\n> = ({\n  partitions,\n  topic,\n  duration,\n  isLoading,\n  emptyState,\n  selectedPartition,\n}) => {\n    const { t } = useTranslation();\n    const [containerRef, width] = useChartWidth();\n\n    const { chartData, legendData, tickValues } = getChartData(\n      partitions,\n      topic,\n      duration,\n      selectedPartition\n    );\n\n    const hasMetrics = Object.keys(partitions).length > 0;\n\n    const showDate = shouldShowDate(duration);\n\n    return (\n      <div ref={containerRef} style={{ marginTop: \"-30px\", height: \"700px\", width: \"650px\" }}>\n        {(() => {\n          switch (true) {\n            case isLoading:\n              return <ChartSkeletonLoader />;\n            case !hasMetrics:\n              return emptyState;\n            default: {\n              const labels: ChartVoronoiContainerProps[\"labels\"] = ({ datum }) =>\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/restrict-template-expressions,@typescript-eslint/no-unsafe-argument\n                `${datum.name}: ${formatBytes(datum.y)}`;\n\n              return (\n                <Chart\n                  ariaTitle={t(\"metrics:log_size_per_partition\")}\n                  containerComponent={\n                    <ChartVoronoiContainer\n                      labels={labels}\n                      constrainToVisibleArea\n                    />\n                  }\n                  legendPosition=\"bottom-left\"\n                  legendComponent={<ChartLegend data={legendData} />}\n                  height={chartHeight}\n                  padding={chartPadding}\n                  themeColor={ChartThemeColor.multiOrdered}\n                  width={width}\n                  legendAllowWrap={true}\n                >\n                  <ChartAxis\n                    label={\"\\n\" + t(\"metrics:axis-label-time\")}\n                    tickValues={tickValues}\n                    tickFormat={(d: number) =>\n                      dateToChartValue(d, {\n                        showDate,\n                      })\n                    }\n                  />\n                  <ChartAxis\n                    label={\"\\n\\n\\n\\n\\n\" + t(\"metrics:axis-label-bytes\")}\n                    dependentAxis\n                    tickFormat={formatBytes}\n                  />\n                  <ChartGroup>\n                    {chartData.map((value, index) => (\n                      <ChartLine key={`chart-area-${index}`} data={value.area} />\n                    ))}\n                  </ChartGroup>\n                </Chart>\n              );\n            }\n          }\n        })()}\n      </div>\n    );\n  };\n\nexport function getChartData(\n  partitions: PartitionBytesMetric,\n  topic: string | undefined,\n  duration: number,\n  selectedPartition: PartitionSelect\n): {\n  legendData: Array<LegendData>;\n  chartData: Array<ChartData>;\n  tickValues: number[];\n} {\n  const legendData: Array<LegendData> = [];\n  const chartData: Array<ChartData> = [];\n\n  const top50Partition = Object.entries(partitions).sort((a, b) => {\n    const aValue = Object.values(a[1]).reduce((sum, val) => sum + val, 0);\n    const bValue = Object.values(b[1]).reduce((sum, val) => sum + val, 0);\n    return bValue - aValue;\n  });\n\n  selectedPartition === \"Top10\"\n    ? top50Partition.slice(0, 10).map(([partition, dataMap], index) => {\n      const name = topic ? `${topic} / ${partition}` : partition;\n      const color = colors[index];\n      legendData.push({\n        name,\n      });\n      const area: Array<PartitionChartData> = [];\n\n      Object.entries(dataMap).map(([timestamp, value]) => {\n        area.push({ name, x: parseInt(timestamp, 10), y: value });\n      });\n      chartData.push({ color, area });\n    })\n    : top50Partition\n      .slice(0, 20)\n      .sort((a, b) => {\n        const dataMapAValues = Object.values(a[1]);\n        const dataMapBValues = Object.values(b[1]);\n        const aValueSum = dataMapAValues.reduce((sum, val) => sum + val, 0);\n        const bValueSum = dataMapBValues.reduce((sum, val) => sum + val, 0);\n        return bValueSum - aValueSum;\n      })\n      .sort((a, b) => b[1][1] - a[1][1])\n      .slice(0, 20)\n      .map(([partition, dataMap], index) => {\n        const name = topic ? `${topic} / ${partition}` : partition;\n        const color = colors[index];\n        legendData.push({\n          name,\n        });\n        const area: Array<PartitionChartData> = [];\n\n        Object.entries(dataMap).map(([timestamp, value]) => {\n          area.push({ name, x: parseInt(timestamp, 10), y: value });\n        });\n        chartData.push({ color, area });\n      });\n\n  const allTimestamps = Array.from(\n    new Set(Object.values(partitions).flatMap((m) => Object.keys(m)))\n  );\n  const tickValues = timestampsToTicks(allTimestamps, duration);\n\n  return {\n    legendData,\n    chartData,\n    tickValues,\n  };\n}\n","import { Popover } from \"@patternfly/react-core\";\nimport { OutlinedQuestionCircleIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\ntype ChartPopoverProps = {\n  title: string;\n  description: string;\n};\n\nexport const ChartPopover: VoidFunctionComponent<ChartPopoverProps> = ({\n  title,\n  description,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <Popover\n      aria-label={title}\n      headerContent={<div>{title}</div>}\n      bodyContent={<div>{description}</div>}\n    >\n      <OutlinedQuestionCircleIcon\n        aria-label={t(\"metrics:chart-popover-icon-screenreader-text\", {\n          title,\n        })}\n      />\n    </Popover>\n  );\n};\n","import type { ChartVoronoiContainerProps } from \"@patternfly/react-charts\";\nimport {\n  Chart,\n  ChartAxis,\n  ChartGroup,\n  ChartLegend,\n  ChartLine,\n  ChartThemeColor,\n  ChartVoronoiContainer,\n} from \"@patternfly/react-charts\";\nimport {\n  chart_color_blue_300,\n  chart_color_green_300,\n} from \"@patternfly/react-tokens\";\nimport type { FunctionComponent, ReactElement } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { chartHeight, chartPadding, timeIntervalsMapping } from \"../consts\";\nimport type { TimeSeriesMetrics } from \"../types\";\nimport { ChartSkeletonLoader } from \"./ChartSkeletonLoader\";\nimport { useChartWidth } from \"./useChartWidth\";\nimport {\n  dateToChartValue,\n  formatBytes,\n  shouldShowDate,\n  timestampsToTicks,\n} from \"./utils\";\n\ntype ChartData = {\n  color: string;\n  line: TopicChartData[];\n};\n\ntype TopicChartData = {\n  name: string;\n  x: number;\n  y: number;\n};\n\ntype LegendData = {\n  name: string;\n  symbol: {\n    fill: string;\n    type?: string;\n  };\n};\n\ntype ChartTotalBytesProps = {\n  incomingTopicsData: TimeSeriesMetrics;\n  outgoingTopicsData: TimeSeriesMetrics;\n  selectedTopic: string | undefined;\n  duration: number;\n  isLoading: boolean;\n  emptyState: ReactElement;\n};\nexport const ChartTotalBytes: FunctionComponent<ChartTotalBytesProps> = ({\n  incomingTopicsData,\n  outgoingTopicsData,\n  selectedTopic,\n  duration,\n  isLoading,\n  emptyState,\n}) => {\n  const { t } = useTranslation();\n  const [containerRef, width] = useChartWidth();\n\n  const itemsPerRow = width && width > 650 ? 6 : 3;\n\n  const { chartData, legendData, tickValues } = getBytesChartData(\n    incomingTopicsData,\n    outgoingTopicsData,\n    duration,\n    selectedTopic\n      ? t(\"metrics:incoming_bytes\", {\n          topic: selectedTopic,\n        })\n      : t(\"metrics:incoming_bytes_all_topics\"),\n    selectedTopic\n      ? t(\"metrics:outgoing_bytes\", {\n          topic: selectedTopic,\n        })\n      : t(\"metrics:outgoing_bytes_all_topics\")\n  );\n\n  const hasMetrics =\n    Object.keys(incomingTopicsData).length > 0 ||\n    Object.keys(outgoingTopicsData).length > 0;\n\n  const showDate = shouldShowDate(duration);\n\n  switch (true) {\n    case isLoading:\n      return <ChartSkeletonLoader />;\n    case !hasMetrics:\n      return emptyState;\n    default: {\n      const labels: ChartVoronoiContainerProps[\"labels\"] =\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/restrict-template-expressions,@typescript-eslint/no-unsafe-argument\n        ({ datum }) => `${datum.name}: ${formatBytes(datum.y)}`;\n      return (\n        <div ref={containerRef}>\n          <Chart\n            ariaTitle={t(\"metrics:total_bytes\")}\n            containerComponent={\n              <ChartVoronoiContainer labels={labels} constrainToVisibleArea />\n            }\n            legendAllowWrap={true}\n            legendPosition=\"bottom-left\"\n            legendComponent={\n              <ChartLegend data={legendData} itemsPerRow={itemsPerRow} />\n            }\n            height={chartHeight}\n            padding={chartPadding}\n            themeColor={ChartThemeColor.multiUnordered}\n            width={width}\n          >\n            <ChartAxis\n              label={\"\\n\" + t(\"metrics:axis-label-time\")}\n              tickValues={tickValues}\n              tickCount={timeIntervalsMapping[duration].ticks}\n              tickFormat={(d: number) =>\n                dateToChartValue(d, {\n                  showDate,\n                })\n              }\n            />\n            <ChartAxis\n              label={\"\\n\\n\\n\\n\\n\" + t(\"metrics:axis-label-bytes\")}\n              dependentAxis\n              tickFormat={formatBytes}\n            />\n            <ChartGroup>\n              {chartData.map((value, index) => (\n                <ChartLine\n                  key={`chart-line-${index}`}\n                  data={value.line}\n                  style={{\n                    data: {\n                      stroke: value.color,\n                    },\n                  }}\n                />\n              ))}\n            </ChartGroup>\n          </Chart>\n        </div>\n      );\n    }\n  }\n};\n\nexport function getBytesChartData(\n  incomingTopic: TimeSeriesMetrics,\n  outgoingTopic: TimeSeriesMetrics,\n  duration: number,\n  incomingTopicName: string,\n  outgoingTopicName: string\n): {\n  legendData: Array<LegendData>;\n  chartData: Array<ChartData>;\n  tickValues: number[];\n} {\n  const legendData: Array<LegendData> = [];\n  const chartData: Array<ChartData> = [];\n\n  const incomingLine = metricsToLine(incomingTopic, incomingTopicName);\n  if (incomingLine.length > 0) {\n    const color = chart_color_blue_300.value;\n    chartData.push({ color, line: incomingLine });\n    legendData.push({\n      name: incomingTopicName,\n      symbol: {\n        fill: color,\n      },\n    });\n  }\n\n  const outgoingLine = metricsToLine(outgoingTopic, outgoingTopicName);\n  if (outgoingLine.length > 0) {\n    const color = chart_color_green_300.value;\n    chartData.push({ color, line: outgoingLine });\n    legendData.push({\n      name: outgoingTopicName,\n      symbol: {\n        fill: color,\n      },\n    });\n  }\n  const allTimestamps = Array.from(\n    new Set([...Object.keys(incomingTopic), ...Object.keys(outgoingTopic)])\n  );\n  const tickValues = timestampsToTicks(allTimestamps, duration);\n\n  return {\n    legendData,\n    chartData,\n    tickValues,\n  };\n}\n\nexport function metricsToLine(\n  metrics: TimeSeriesMetrics,\n  name: string\n): Array<TopicChartData> {\n  const line: Array<TopicChartData> = [];\n\n  Object.entries(metrics).map(([timestamp, bytes]) => {\n    line.push({ name, x: parseInt(timestamp, 10), y: bytes });\n  });\n  return line;\n}\n","import {\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { ExclamationTriangleIcon } from \"@patternfly/react-icons\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const EmptyStateNoMetricsData: FunctionComponent = () => {\n  const { t } = useTranslation([\"metrics\"]);\n  return (\n    <EmptyState variant={EmptyStateVariant.xs}>\n      <EmptyStateIcon\n        icon={ExclamationTriangleIcon}\n        color=\"var(--pf-global--warning-color--100)\"\n      />\n      <Title headingLevel=\"h3\" size=\"md\">\n        {t(\"metric_not_available\")}\n      </Title>\n    </EmptyState>\n  );\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { SearchIcon } from \"@patternfly/react-icons\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const EmptyStateNoMetricsDataForSelection: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState variant={EmptyStateVariant.xs}>\n      <EmptyStateIcon icon={SearchIcon} />\n      <Title headingLevel=\"h3\" size=\"lg\">\n        {t(\"metrics:empty_state_no_metrics_data_title\")}\n      </Title>\n      <EmptyStateBody>\n        {t(\"metrics:empty_state_no_metrics_data_body\")}\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { WrenchIcon } from \"@patternfly/react-icons\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\ntype EmptyStateNoTopicsProps = {\n  onCreateTopic?: () => void;\n};\nexport const EmptyStateNoTopics: FunctionComponent<EmptyStateNoTopicsProps> = ({\n  onCreateTopic,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState variant={EmptyStateVariant.xs}>\n      <EmptyStateIcon icon={WrenchIcon} />\n      <Title headingLevel=\"h3\" size=\"lg\">\n        {t(\"metrics:empty_state_no_topics_title\")}\n      </Title>\n      <EmptyStateBody>{t(\"metrics:empty_state_no_topics_body\")}</EmptyStateBody>\n      {onCreateTopic && (\n        <Button\n          ouiaId=\"button-create\"\n          variant=\"primary\"\n          onClick={onCreateTopic}\n        >\n          {t(\"metrics:empty_state_no_topics_create_topic\")}\n        </Button>\n      )}\n    </EmptyState>\n  );\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { FilterIcon } from \"@patternfly/react-icons\";\nimport { Trans, useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\n\nexport const EmptyStateNoTopicSelected: VoidFunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState variant={EmptyStateVariant.xs}>\n      <EmptyStateIcon icon={FilterIcon} />\n      <Title headingLevel=\"h3\" size=\"lg\">\n        {t(\"metrics:empty_state_no_filter_title\")}\n      </Title>\n      <EmptyStateBody>\n        <Trans\n          ns={\"metrics\"}\n          i18nKey={\"empty_state_no_filter_body\"}\n          components={{ bold: <strong /> }}\n        />\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import type { SelectProps } from \"@patternfly/react-core\";\nimport {\n  Select,\n  SelectOption,\n  SelectVariant,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport type { PartitionSelect } from \"../types\";\n\ntype FilterByPartitionProps = {\n  partitionValue: PartitionSelect;\n  onSetSelectedPartition: (value: PartitionSelect) => void;\n};\n\nexport const FilterByPartition: VoidFunctionComponent<\n  FilterByPartitionProps\n> = ({ partitionValue, onSetSelectedPartition }) => {\n  const { t } = useTranslation(\"metrics\");\n\n  const [ispartitionSelectOpen, setIspartitionSelectOpen] =\n    useState<boolean>(false);\n\n  const onBrokerToggle = (ispartitionSelectOpen: boolean) => {\n    setIspartitionSelectOpen(ispartitionSelectOpen);\n  };\n\n  const partitionSelectOption: { [key in PartitionSelect]: string } = {\n    Top10: t(\"top10_partitions\"),\n    Top20: t(\"top20_partitions\"),\n  };\n\n  const onBrokerSelect: SelectProps[\"onSelect\"] = (_, partition) => {\n    onSetSelectedPartition(partition as PartitionSelect);\n    setIspartitionSelectOpen(false);\n  };\n\n  const partitionOptions = () => {\n    return Object.entries(partitionSelectOption).map(([value, label]) => (\n      <SelectOption key={value} value={value}>\n        {label}\n      </SelectOption>\n    ));\n  };\n\n  return (\n    <ToolbarItem>\n      <Select\n        variant={SelectVariant.single}\n        isOpen={ispartitionSelectOpen}\n        onToggle={onBrokerToggle}\n        onSelect={onBrokerSelect}\n        selections={partitionValue}\n        position=\"left\"\n        placeholderText={t(\"top10_partitions\")}\n        aria-label={t(\"filter-by-partitions\")}\n      >\n        {partitionOptions()}\n      </Select>\n    </ToolbarItem>\n  );\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { useState } from \"react\";\nimport type { SelectProps } from \"@patternfly/react-core\";\nimport {\n  ToolbarItem,\n  Select,\n  SelectVariant,\n  SelectGroup,\n  SelectOption,\n} from \"@patternfly/react-core\";\nimport { DurationOptions } from \"../types\";\n\nexport const DurationOptionsMap = {\n  [DurationOptions.Last5minutes]: \"Last 5 minutes\",\n  [DurationOptions.Last15minutes]: \"Last 15 minutes\",\n  [DurationOptions.Last30minutes]: \"Last 30 minutes\",\n  [DurationOptions.Last1hour]: \"Last 1 hour\",\n  [DurationOptions.Last3hours]: \"Last 3 hours\",\n  [DurationOptions.Last6hours]: \"Last 6 hours\",\n  [DurationOptions.Last12hours]: \"Last 12 hours\",\n  [DurationOptions.Last24hours]: \"Last 24 hours\",\n  [DurationOptions.Last2days]: \"Last 2 days\",\n  [DurationOptions.Last7days]: \"Last 7 days\",\n} as const;\n\ntype FilterByTimeProps = {\n  duration: DurationOptions;\n  onDurationChange: (value: DurationOptions) => void;\n  keyText: string;\n  ariaLabel: string;\n  disableToolbar: boolean;\n};\n\nexport const FilterByTime: VoidFunctionComponent<FilterByTimeProps> = ({\n  duration,\n  keyText,\n  ariaLabel,\n  disableToolbar,\n  onDurationChange,\n}) => {\n  const [isTimeSelectOpen, setIsTimeSelectOpen] = useState<boolean>(false);\n\n  const onTimeToggle = (isTimeSelectOpen: boolean) => {\n    setIsTimeSelectOpen(isTimeSelectOpen);\n  };\n\n  const onTimeSelect: SelectProps[\"onSelect\"] = (_, selection) => {\n    const mapping = Object.entries(DurationOptionsMap).find(\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      ([_, value]) => value === selection\n    );\n    if (mapping) {\n      onDurationChange(parseInt(mapping[0], 10) as DurationOptions);\n    }\n    setIsTimeSelectOpen(false);\n  };\n\n  const timeOptions = (keyText: string) => [\n    <SelectGroup label=\"Relative time ranges\" key={`${keyText}-group`}>\n      {Object.values(DurationOptionsMap).map((label, idx) => (\n        <SelectOption key={`${keyText}-${idx}`} value={label} />\n      ))}\n    </SelectGroup>,\n  ];\n  const ariaId = `filter-by-time-${Date.now()}`;\n  return (\n    <ToolbarItem>\n      <label hidden id={ariaId}>\n        {ariaLabel}\n      </label>\n      <Select\n        variant={SelectVariant.single}\n        aria-labelledby={ariaId}\n        onToggle={onTimeToggle}\n        onSelect={onTimeSelect}\n        selections={DurationOptionsMap[duration]}\n        isOpen={isTimeSelectOpen}\n        isDisabled={disableToolbar}\n      >\n        {timeOptions(keyText)}\n      </Select>\n    </ToolbarItem>\n  );\n};\n","import type { SelectProps } from \"@patternfly/react-core\";\nimport {\n  Select,\n  SelectGroup,\n  SelectOption,\n  SelectVariant,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { FilterIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport \"./FilterByTopic.css\";\n\nconst widths = {\n  default: \"150px\",\n  sm: \"150px\",\n  md: \"150px\",\n  lg: \"200px\",\n  xl: \"200px\",\n  \"2xl\": \"200px\",\n};\n\ntype FilterByTopicProps = {\n  selectedTopic: string | undefined;\n  topicList: string[];\n  disableToolbar: boolean;\n  ariaLabel: string;\n  onSetSelectedTopic: (value: string | undefined) => void;\n};\n\nexport const FilterByTopic: VoidFunctionComponent<FilterByTopicProps> = ({\n  selectedTopic,\n  topicList = [],\n  disableToolbar,\n  ariaLabel,\n  onSetSelectedTopic,\n}) => {\n  const { t } = useTranslation();\n  const [isTopicSelectOpen, setIsTopicSelectOpen] = useState<boolean>(false);\n  const [selectKey, setSelectKey] = useState(Math.random());\n\n  useEffect(() => setSelectKey(Math.random()), [topicList]);\n\n  const allTopicsLabel = t(\"metrics:all_topics\");\n\n  const onTopicToggle = (isTopicSelectOpen: boolean) => {\n    setIsTopicSelectOpen(isTopicSelectOpen);\n  };\n\n  const onTopicSelect: SelectProps[\"onSelect\"] = (_, selection) => {\n    selection !== allTopicsLabel\n      ? onSetSelectedTopic(selection as string)\n      : onSetSelectedTopic(undefined);\n    setIsTopicSelectOpen(false);\n  };\n\n  const onTopicFilter = (_: unknown, textInput: string) => {\n    const filteredTopics =\n      topicList.filter((topic) => topic.indexOf(textInput) != -1) || [];\n    return topicOptions(filteredTopics);\n  };\n\n  const topicOptions = (topicList: string[]) => [\n    <SelectOption key={\"topic-filter-0\"} value={allTopicsLabel} />,\n    <SelectGroup label=\"Filter by topic\" key=\"topic-filter-group\">\n      {topicList.map((topic, index) => (\n        <SelectOption\n          key={`topic-filter-${index + 1}`}\n          value={topic}\n          title={topic}\n        />\n      ))}\n    </SelectGroup>,\n  ];\n\n  const isDisabled = disableToolbar || topicList.length === 0;\n  const ariaId = `filter-by-topic-${Date.now()}`;\n\n  return (\n    <ToolbarItem widths={widths}>\n      <label hidden id={ariaId}>\n        {ariaLabel}\n      </label>\n      <Select\n        key={selectKey}\n        variant={SelectVariant.single}\n        onToggle={onTopicToggle}\n        onSelect={onTopicSelect}\n        selections={selectedTopic || allTopicsLabel}\n        isOpen={isTopicSelectOpen}\n        placeholderText={\n          <>\n            <FilterIcon /> {allTopicsLabel}\n          </>\n        }\n        aria-labelledby={ariaId}\n        onFilter={onTopicFilter}\n        isGrouped\n        hasInlineFilter\n        isDisabled={isDisabled}\n        position=\"left\"\n        className={\"appserv-metrics-filterbytopic\"}\n      >\n        {topicOptions(topicList)}\n      </Select>\n    </ToolbarItem>\n  );\n};\n","import { ToolbarItem } from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { FormatDate, RefreshButton } from \"@rhoas/app-services-ui-components\";\n\nexport type ToolbarRefreshProps = {\n  isRefreshing: boolean;\n  lastUpdated: Date | undefined;\n  ariaLabel: string;\n  onRefresh: () => void;\n};\n\nexport const ToolbarRefresh: VoidFunctionComponent<ToolbarRefreshProps> = ({\n  isRefreshing,\n  lastUpdated = new Date(),\n  ariaLabel,\n  onRefresh,\n}) => {\n  const { t } = useTranslation([\"metrics\"]);\n\n  return (\n    <>\n      <ToolbarItem>\n        <RefreshButton\n          ariaLabel={ariaLabel}\n          onClick={onRefresh}\n          isRefreshing={isRefreshing}\n        />\n      </ToolbarItem>\n      <ToolbarItem\n        alignment={{ default: \"alignRight\" }}\n        style={{ color: \"var(--pf-global--Color--200)\" }}\n      >\n        <div className=\"pf-u-font-size-xs\">\n          {isRefreshing ? (\n            t(\"metrics:refreshing\")\n          ) : (\n            <>\n              {t(\"metrics:last-refresh\")}\n              <br />\n              <FormatDate date={lastUpdated} format=\"distanceToNow\" />\n              {t(\"metrics:last-refresh-distance\")}\n            </>\n          )}\n        </div>\n      </ToolbarItem>\n    </>\n  );\n};\n","import {\n  CardHeader,\n  CardTitle,\n  Divider,\n  Toolbar,\n  ToolbarContent,\n} from \"@patternfly/react-core\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { DurationOptions } from \"../types\";\nimport { FilterByTime } from \"./FilterByTime\";\nimport { FilterByTopic } from \"./FilterByTopic\";\nimport type { ToolbarRefreshProps } from \"./ToolbarRefresh\";\nimport { ToolbarRefresh } from \"./ToolbarRefresh\";\n\ntype ToolbarTopicsMetricsProps = {\n  title: string;\n  selectedTopic: string | undefined;\n  topicList: string[];\n  duration: DurationOptions;\n  isDisabled: boolean;\n  onSetTimeDuration: (value: DurationOptions) => void;\n  onSetSelectedTopic: (value: string | undefined) => void;\n} & Omit<ToolbarRefreshProps, \"ariaLabel\">;\nexport const ToolbarTopicsMetrics: FunctionComponent<\n  ToolbarTopicsMetricsProps\n> = ({\n  title,\n  selectedTopic,\n  topicList,\n  duration,\n  isDisabled,\n  isRefreshing,\n  lastUpdated,\n  onSetTimeDuration,\n  onRefresh,\n  onSetSelectedTopic,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <CardHeader>\n        <CardTitle component=\"h2\">{title}</CardTitle>\n      </CardHeader>\n      <Divider />\n      <Toolbar>\n        <ToolbarContent>\n          <FilterByTopic\n            ariaLabel={t(\"metrics:topics_filter_by_topic\")}\n            selectedTopic={selectedTopic}\n            onSetSelectedTopic={onSetSelectedTopic}\n            topicList={topicList}\n            disableToolbar={isDisabled}\n          />\n          <FilterByTime\n            ariaLabel={t(\"metrics:topics_filter_by_time\")}\n            duration={duration}\n            onDurationChange={onSetTimeDuration}\n            disableToolbar={isDisabled}\n            keyText={\"topic-metrics-time-filter\"}\n          />\n          <ToolbarRefresh\n            isRefreshing={isRefreshing}\n            lastUpdated={lastUpdated}\n            onRefresh={onRefresh}\n            ariaLabel={t(\"metrics:topics_refresh\")}\n          />\n        </ToolbarContent>\n      </Toolbar>\n      <Divider />\n    </>\n  );\n};\n","import {\n  Card,\n  CardBody,\n  CardTitle,\n  Divider,\n  Toolbar,\n  ToolbarContent,\n} from \"@patternfly/react-core\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport type {\n  DurationOptions,\n  PartitionBytesMetric,\n  PartitionSelect,\n  TimeSeriesMetrics,\n} from \"../types\";\nimport { CardBodyLoading } from \"./CardBodyLoading\";\nimport { ChartLinearWithOptionalLimit } from \"./ChartLinearWithOptionalLimit\";\nimport { ChartLogSizePerPartition } from \"./ChartLogSizePerPartition\";\nimport { ChartPopover } from \"./ChartPopover\";\nimport { ChartTotalBytes } from \"./ChartTotalBytes\";\nimport { EmptyStateNoMetricsData } from \"./EmptyStateNoMetricsData\";\nimport { EmptyStateNoMetricsDataForSelection } from \"./EmptyStateNoMetricsDataForSelection\";\nimport { EmptyStateNoTopics } from \"./EmptyStateNoTopics\";\nimport { EmptyStateNoTopicSelected } from \"./EmptyStateNoTopicSelected\";\nimport { FilterByPartition } from \"./FilterByPartition\";\nimport type { ToolbarRefreshProps } from \"./ToolbarRefresh\";\nimport { ToolbarTopicsMetrics } from \"./ToolbarTopicsMetrics\";\n\ntype CardTopicsMetricsProps = {\n  topics: string[];\n  incomingTopicsData: TimeSeriesMetrics;\n  outgoingTopicsData: TimeSeriesMetrics;\n  partitions: PartitionBytesMetric;\n  incomingMessageRate: TimeSeriesMetrics;\n  duration: DurationOptions;\n  backendUnavailable: boolean;\n  isInitialLoading: boolean;\n  isLoading: boolean;\n  isJustCreated: boolean;\n  selectedTopic: string | undefined;\n  onCreateTopic: () => void;\n  onSelectedTopic: (topic: string | undefined) => void;\n  onDurationChange: (duration: DurationOptions) => void;\n  onSelectedPartition: (value: PartitionSelect) => void;\n  selectedPartition: PartitionSelect;\n} & Omit<ToolbarRefreshProps, \"ariaLabel\">;\n\nexport const CardTopicsMetrics: FunctionComponent<CardTopicsMetricsProps> = ({\n  topics,\n  incomingTopicsData,\n  outgoingTopicsData,\n  incomingMessageRate,\n  selectedTopic,\n  duration,\n  partitions,\n  backendUnavailable,\n  isInitialLoading,\n  isLoading,\n  isRefreshing,\n  isJustCreated,\n  lastUpdated,\n  onCreateTopic,\n  onRefresh,\n  onSelectedTopic,\n  onDurationChange,\n  selectedPartition,\n  onSelectedPartition,\n}) => {\n  const { t } = useTranslation();\n  const noTopics = topics.length === 0;\n  const selectedTopicNotInList =\n    selectedTopic !== undefined &&\n    topics.find((t) => t === selectedTopic) === undefined;\n  const chartEmptyState = selectedTopicNotInList ? (\n    <EmptyStateNoMetricsDataForSelection />\n  ) : (\n    <EmptyStateNoMetricsData />\n  );\n  return (\n    <Card data-testid={\"metrics-topics\"}>\n      <ToolbarTopicsMetrics\n        title={t(\"metrics:topic_metrics\")}\n        duration={duration}\n        onSetTimeDuration={onDurationChange}\n        isDisabled={\n          backendUnavailable || isJustCreated || noTopics || isLoading\n        }\n        isRefreshing={isRefreshing}\n        selectedTopic={selectedTopic}\n        onSetSelectedTopic={onSelectedTopic}\n        onRefresh={onRefresh}\n        topicList={topics}\n        lastUpdated={lastUpdated}\n      />\n      {(() => {\n        switch (true) {\n          case isInitialLoading:\n            return <CardBodyLoading />;\n\n          case backendUnavailable:\n            return (\n              <CardBody>\n                <EmptyStateNoMetricsData />\n              </CardBody>\n            );\n\n          case isJustCreated && !noTopics:\n            return (\n              <CardBody>\n                <EmptyStateNoTopics />\n              </CardBody>\n            );\n\n          case isJustCreated && noTopics:\n            return (\n              <CardBody>\n                <EmptyStateNoTopics onCreateTopic={onCreateTopic} />\n              </CardBody>\n            );\n\n          case selectedTopic !== undefined:\n            return (\n              <>\n                <TotalBytesTitle />\n                <CardBody>\n                  <ChartTotalBytes\n                    incomingTopicsData={incomingTopicsData}\n                    outgoingTopicsData={outgoingTopicsData}\n                    selectedTopic={selectedTopic}\n                    duration={duration}\n                    isLoading={isLoading}\n                    emptyState={chartEmptyState}\n                  />\n                </CardBody>\n                <Divider />\n                <IncomingMessageRate />\n                <CardBody>\n                  <ChartLinearWithOptionalLimit\n                    chartName={t(\"metrics:topic_incoming_message_rate\")}\n                    yLabel={t(\"metrics:topic_incoming_message_rate_y_axis\")}\n                    metrics={incomingMessageRate}\n                    duration={duration}\n                    isLoading={isLoading}\n                    emptyState={chartEmptyState}\n                  />\n                </CardBody>\n                <Divider />\n                <PartitionSizeTitle />\n                <CardBody>\n                  <Toolbar>\n                    <ToolbarContent>\n                      <FilterByPartition\n                        onSetSelectedPartition={onSelectedPartition}\n                        partitionValue={selectedPartition}\n                      />\n                    </ToolbarContent>\n                  </Toolbar>\n                  <ChartLogSizePerPartition\n                    partitions={partitions}\n                    topic={selectedTopic}\n                    duration={duration}\n                    isLoading={isLoading}\n                    emptyState={chartEmptyState}\n                    selectedPartition={selectedPartition}\n                  />\n                </CardBody>\n              </>\n            );\n\n          default:\n            return (\n              <>\n                <TotalBytesTitle />\n                <CardBody>\n                  <ChartTotalBytes\n                    incomingTopicsData={incomingTopicsData}\n                    outgoingTopicsData={outgoingTopicsData}\n                    selectedTopic={selectedTopic}\n                    duration={duration}\n                    isLoading={isLoading}\n                    emptyState={chartEmptyState}\n                  />\n                </CardBody>\n                <Divider />\n                <IncomingMessageRate />\n                <CardBody>\n                  <ChartLinearWithOptionalLimit\n                    chartName={t(\"metrics:topic_incoming_message_rate\")}\n                    yLabel={t(\"metrics:topic_incoming_message_rate_y_axis\")}\n                    metrics={incomingMessageRate}\n                    duration={duration}\n                    isLoading={isLoading}\n                    emptyState={chartEmptyState}\n                  />\n                </CardBody>\n                <Divider />\n                <PartitionSizeTitle />\n                <CardBody>\n                  <EmptyStateNoTopicSelected />\n                </CardBody>\n              </>\n            );\n        }\n      })()}\n    </Card>\n  );\n};\n\nconst TotalBytesTitle: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <CardTitle component=\"h3\">\n      {t(\"metrics:total_bytes\")}{\" \"}\n      <ChartPopover\n        title={t(\"metrics:total_bytes_popover_header\")}\n        description={t(\"metrics:topic_metrics_help_text\")}\n      />\n    </CardTitle>\n  );\n};\n\nconst PartitionSizeTitle: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <CardTitle component=\"h3\">\n      {t(\"metrics:partition_size\")}{\" \"}\n      <ChartPopover\n        title={t(\"metrics:topic_partition_size_popover_header\")}\n        description={t(\"metrics:topic_partition_size_help_text\")}\n      />\n    </CardTitle>\n  );\n};\n\nconst IncomingMessageRate: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <CardTitle component=\"h3\">\n      {t(\"metrics:topic_incoming_message_rate\")}{\" \"}\n      <ChartPopover\n        title={t(\"metrics:topic_incoming_message_rate_popover_header\")}\n        description={t(\"metrics:topic_incoming_message_rate_help_text\")}\n      />\n    </CardTitle>\n  );\n};\n","import type { SelectProps } from \"@patternfly/react-core\";\nimport { SelectGroup } from \"@patternfly/react-core\";\nimport {\n  Select,\n  SelectOption,\n  SelectVariant,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\ntype FilterByBrokerProps = {\n  selectedBroker: string | undefined;\n  brokerList: string[];\n  onSetSelectedBroker: (value: string | undefined) => void;\n  disableToolbar: boolean;\n};\n\nexport const FilterByBroker: VoidFunctionComponent<FilterByBrokerProps> = ({\n  selectedBroker,\n  brokerList,\n  onSetSelectedBroker,\n  disableToolbar,\n}) => {\n  const { t } = useTranslation(\"metrics\");\n\n  const [isBrokerSelectOpen, setIsBrokerSelectOpen] = useState<boolean>(false);\n\n  const onBrokerToggle = (isBrokerSelectOpen: boolean) => {\n    setIsBrokerSelectOpen(isBrokerSelectOpen);\n  };\n\n  const onBrokerSelect: SelectProps[\"onSelect\"] = (_, broker) => {\n    broker !== t(\"all_brokers\")\n      ? onSetSelectedBroker(broker as string)\n      : onSetSelectedBroker(undefined);\n    setIsBrokerSelectOpen(false);\n  };\n\n  const brokerOptions = (brokerList: string[]) => [\n    <SelectOption key={\"broker-filter-0\"} value={t(\"all_brokers\")} />,\n    <SelectGroup label=\"Filter by broker\" key=\"broker-filter-group\">\n      {brokerList.map((broker, index) => (\n        <SelectOption\n          key={`broker-filter-${index + 1}`}\n          value={broker}\n          title={broker}\n        />\n      ))}\n    </SelectGroup>,\n  ];\n\n  const isDisabled = disableToolbar || brokerList.length === 0;\n\n  return (\n    <ToolbarItem>\n      <Select\n        variant={SelectVariant.single}\n        isOpen={isBrokerSelectOpen}\n        onToggle={onBrokerToggle}\n        onSelect={onBrokerSelect}\n        selections={selectedBroker || t(\"all_brokers\")}\n        position=\"left\"\n        placeholderText={t(\"all_brokers\")}\n        aria-label={t(\"filter-by-broker\")}\n        isDisabled={isDisabled}\n      >\n        {brokerOptions(brokerList)}\n      </Select>\n    </ToolbarItem>\n  );\n};\n","import type { FunctionComponent } from \"react\";\nimport {\n  CardHeader,\n  CardTitle,\n  Divider,\n  Toolbar,\n  ToolbarContent,\n} from \"@patternfly/react-core\";\nimport { FilterByTime } from \"./FilterByTime\";\nimport { FilterByBroker } from \"./FilterByBroker\";\nimport type { DurationOptions } from \"../types\";\nimport { useTranslation } from \"react-i18next\";\nimport type { ToolbarRefreshProps } from \"./ToolbarRefresh\";\nimport { ToolbarRefresh } from \"./ToolbarRefresh\";\n\ntype ToolbarKafkaInstanceMetricProps = {\n  title: string;\n  selectedBroker: string | undefined;\n  brokerList: string[];\n  isDisabled: boolean;\n  duration: DurationOptions;\n  onSetTimeDuration: (value: DurationOptions) => void;\n  onSetSelectedBroker: (value: string | undefined) => void;\n} & Omit<ToolbarRefreshProps, \"ariaLabel\">;\nexport const ToolbarKafkaInstanceMetric: FunctionComponent<\n  ToolbarKafkaInstanceMetricProps\n> = ({\n  title,\n  isDisabled,\n  isRefreshing,\n  lastUpdated,\n  duration,\n  onSetTimeDuration,\n  onRefresh,\n  selectedBroker,\n  brokerList,\n  onSetSelectedBroker,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <CardHeader>\n        <CardTitle component=\"h2\">{title}</CardTitle>\n      </CardHeader>\n      <Divider />\n      <Toolbar>\n        <ToolbarContent>\n          <FilterByBroker\n            selectedBroker={selectedBroker}\n            brokerList={brokerList}\n            onSetSelectedBroker={onSetSelectedBroker}\n            disableToolbar={isDisabled}\n          />\n          <FilterByTime\n            ariaLabel={t(\"metrics:kafka_instance_filter_by_time\")}\n            duration={duration}\n            onDurationChange={onSetTimeDuration}\n            keyText={\"kafka-metrics-time-filter\"}\n            disableToolbar={isDisabled}\n          />\n          <ToolbarRefresh\n            isRefreshing={isRefreshing}\n            lastUpdated={lastUpdated}\n            onRefresh={onRefresh}\n            ariaLabel={t(\"metrics:kafka_instance_refresh\")}\n          />\n        </ToolbarContent>\n      </Toolbar>\n      <Divider />\n    </>\n  );\n};\n","import { ToggleGroup, ToggleGroupItem } from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport type { BrokerFilter } from \"../types\";\n\nexport type BrokerToggleProps = {\n  value: BrokerFilter;\n  onChange: (value: BrokerFilter) => void;\n  selectedBroker: string | undefined;\n};\n\nexport const BrokerToggle: VoidFunctionComponent<BrokerToggleProps> = ({\n  value,\n  onChange,\n  selectedBroker,\n}) => {\n  const { t } = useTranslation(\"metrics\");\n\n  return (\n    <ToggleGroup>\n      <ToggleGroupItem\n        text={t(\"broker_filter.total\")}\n        value=\"total\"\n        buttonId=\"total\"\n        isSelected={value === \"total\"}\n        onChange={() => onChange(\"total\")}\n        isDisabled={selectedBroker !== undefined}\n      />\n      <ToggleGroupItem\n        text={t(\"broker_filter.per_broker\")}\n        value=\"perBroker\"\n        buttonId=\"perBroker\"\n        isSelected={value === \"perBroker\" || selectedBroker !== undefined}\n        onChange={() => onChange(\"perBroker\")}\n      />\n    </ToggleGroup>\n  );\n};\n","import type { ChartVoronoiContainerProps } from \"@patternfly/react-charts\";\nimport { ChartLine } from \"@patternfly/react-charts\";\nimport {\n  Chart,\n  ChartAxis,\n  ChartGroup,\n  ChartLegend,\n  ChartThemeColor,\n  ChartVoronoiContainer,\n} from \"@patternfly/react-charts\";\nimport {\n  chart_color_blue_300,\n  chart_color_cyan_300,\n} from \"@patternfly/react-tokens\";\nimport type { FunctionComponent, ReactElement } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { chartHeight, chartPadding } from \"../consts\";\nimport type { PartitionBytesMetric, PartitionSelect } from \"../types\";\nimport { ChartSkeletonLoader } from \"./ChartSkeletonLoader\";\nimport { useChartWidth } from \"./useChartWidth\";\nimport {\n  dateToChartValue,\n  formatBytes,\n  shouldShowDate,\n  timestampsToTicks,\n} from \"./utils\";\n\nconst colors = [chart_color_cyan_300.value, chart_color_blue_300.value];\n\ntype ChartData = {\n  color: string;\n  area: PartitionChartData[];\n};\n\ntype PartitionChartData = {\n  name: string;\n  x: number;\n  y: number;\n};\n\ntype LegendData = {\n  name: string;\n};\n\nexport type ChartPartitionLogSizePerBrokerProps = {\n  partitions: PartitionBytesMetric;\n  broker: string | undefined;\n  duration: number;\n  isLoading: boolean;\n  emptyState: ReactElement;\n  selectedPartition: PartitionSelect;\n};\nexport const ChartPartitionLogSizePerBroker: FunctionComponent<\n  ChartPartitionLogSizePerBrokerProps\n> = ({\n  partitions,\n  broker,\n  duration,\n  isLoading,\n  emptyState,\n  selectedPartition,\n}) => {\n    const { t } = useTranslation();\n    const [containerRef, width] = useChartWidth();\n\n    const { chartData, legendData, tickValues } = getChartData(\n      partitions,\n      broker,\n      duration,\n      selectedPartition\n    );\n\n    const hasMetrics = Object.keys(partitions).length > 0;\n\n    const showDate = shouldShowDate(duration);\n\n    return (\n      <div ref={containerRef} style={{ height: \"700px\" }}>\n        {(() => {\n          switch (true) {\n            case isLoading:\n              return <ChartSkeletonLoader />;\n            case !hasMetrics:\n              return emptyState;\n            default: {\n              const labels: ChartVoronoiContainerProps[\"labels\"] = ({ datum }) =>\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/restrict-template-expressions,@typescript-eslint/no-unsafe-argument\n                `${datum.name}: ${formatBytes(datum.y)}`;\n\n              return (\n                <Chart\n                  ariaTitle={t(\"metrics:log_size_per_partition\")}\n                  containerComponent={\n                    <ChartVoronoiContainer\n                      labels={labels}\n                      constrainToVisibleArea\n                    />\n                  }\n                  legendPosition=\"bottom-left\"\n                  legendComponent={<ChartLegend data={legendData} />}\n                  height={chartHeight}\n                  padding={chartPadding}\n                  themeColor={ChartThemeColor.multiOrdered}\n                  width={width}\n                  legendAllowWrap={true}\n                >\n                  <ChartAxis\n                    label={\"\\n\" + t(\"metrics:axis-label-time\")}\n                    tickValues={tickValues}\n                    tickFormat={(d: number) =>\n                      dateToChartValue(d, {\n                        showDate,\n                      })\n                    }\n                  />\n                  <ChartAxis\n                    label={\"\\n\\n\\n\\n\\n\" + t(\"metrics:axis-label-bytes\")}\n                    dependentAxis\n                    tickFormat={formatBytes}\n                  />\n                  <ChartGroup>\n                    {chartData.map((value, index) => (\n                      <ChartLine key={`chart-area-${index}`} data={value.area} />\n                    ))}\n                  </ChartGroup>\n                </Chart>\n              );\n            }\n          }\n        })()}\n      </div>\n    );\n  };\n\nexport function getChartData(\n  partitions: PartitionBytesMetric,\n  broker: string | undefined,\n  duration: number,\n  selectedPartition: PartitionSelect\n): {\n  legendData: Array<LegendData>;\n  chartData: Array<ChartData>;\n  tickValues: number[];\n} {\n  const legendData: Array<LegendData> = [];\n  const chartData: Array<ChartData> = [];\n\n  const top50Partition = Object.entries(partitions).sort((a, b) => {\n    const aValue = Object.values(a[1]).reduce((sum, val) => sum + val, 0);\n    const bValue = Object.values(b[1]).reduce((sum, val) => sum + val, 0);\n    return bValue - aValue;\n  });\n  selectedPartition === \"Top10\"\n    ? top50Partition.slice(0, 10).map(([partition, dataMap], index) => {\n      const name = broker ? ` ${partition}` : partition;\n      const color = colors[index];\n      legendData.push({\n        name,\n      });\n      const area: Array<PartitionChartData> = [];\n\n      Object.entries(dataMap).map(([timestamp, value]) => {\n        area.push({ name, x: parseInt(timestamp, 10), y: value });\n      });\n      chartData.push({ color, area });\n    })\n    : top50Partition.slice(0, 20).map(([partition, dataMap], index) => {\n      const name = broker ? `${partition}` : partition;\n      const color = colors[index];\n      legendData.push({\n        name,\n      });\n      const area: Array<PartitionChartData> = [];\n\n      Object.entries(dataMap).map(([timestamp, value]) => {\n        area.push({ name, x: parseInt(timestamp, 10), y: value });\n      });\n      chartData.push({ color, area });\n    });\n\n  const allTimestamps = Array.from(\n    new Set(Object.values(partitions).flatMap((m) => Object.keys(m)))\n  );\n  const tickValues = timestampsToTicks(allTimestamps, duration);\n\n  return {\n    legendData,\n    chartData,\n    tickValues,\n  };\n}\n","import type { ChartVoronoiContainerProps } from \"@patternfly/react-charts\";\nimport { ChartLine } from \"@patternfly/react-charts\";\nimport {\n  Chart,\n  ChartAxis,\n  ChartGroup,\n  ChartLegend,\n  ChartThemeColor,\n  ChartVoronoiContainer,\n  ChartThreshold,\n} from \"@patternfly/react-charts\";\nimport {\n  chart_color_blue_300,\n  chart_color_cyan_300,\n  chart_color_black_500,\n} from \"@patternfly/react-tokens\";\nimport type { FunctionComponent, ReactElement } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { chartHeight, chartPadding } from \"../consts\";\nimport type { BrokerBytesMetric, BrokerFilter } from \"../types\";\nimport { ChartSkeletonLoader } from \"./ChartSkeletonLoader\";\nimport { useChartWidth } from \"./useChartWidth\";\nimport {\n  dateToChartValue,\n  formatBytes,\n  shouldShowDate,\n  timestampsToTicks,\n} from \"./utils\";\n\nconst colors = [chart_color_cyan_300.value, chart_color_blue_300.value];\n\ntype ChartData = {\n  color: string;\n  softLimitColor: string;\n  area: BrokerChartData[];\n  softLimit: BrokerChartData[];\n};\n\ntype BrokerChartData = {\n  name: string;\n  x: number;\n  y: number;\n};\n\ntype LegendData = {\n  name: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n};\n\nexport type ChartUsedDiskSpaceProps = {\n  metrics: BrokerBytesMetric;\n  broker: string | undefined;\n  duration: number;\n  isLoading: boolean;\n  emptyState: ReactElement;\n  brokerToggle: BrokerFilter;\n  usageLimit?: number;\n};\nexport const ChartUsedDiskSpace: FunctionComponent<ChartUsedDiskSpaceProps> = ({\n  metrics,\n  broker,\n  duration,\n  isLoading,\n  emptyState,\n  brokerToggle,\n  usageLimit,\n}) => {\n  const { t } = useTranslation();\n  const [containerRef, width] = useChartWidth();\n\n  const { chartData, legendData, tickValues } = getChartData(\n    metrics,\n    broker,\n    duration,\n    brokerToggle,\n    t(\"metrics:limit\"),\n    usageLimit\n  );\n\n  const hasMetrics = Object.keys(metrics).length > 0;\n\n  const showDate = shouldShowDate(duration);\n\n  return (\n    <div ref={containerRef} style={{ height: \"400px\" }}>\n      {(() => {\n        switch (true) {\n          case isLoading:\n            return <ChartSkeletonLoader />;\n          case !hasMetrics:\n            return emptyState;\n          default: {\n            const labels: ChartVoronoiContainerProps[\"labels\"] = ({ datum }) =>\n              // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/restrict-template-expressions,@typescript-eslint/no-unsafe-argument\n              `${datum.name}: ${formatBytes(datum.y)}`;\n\n            return (\n              <Chart\n                ariaTitle={t(\"metrics:log_size_per_partition\")}\n                containerComponent={\n                  <ChartVoronoiContainer\n                    labels={labels}\n                    constrainToVisibleArea\n                  />\n                }\n                legendPosition=\"bottom-left\"\n                legendComponent={<ChartLegend data={legendData} />}\n                height={chartHeight}\n                padding={chartPadding}\n                themeColor={ChartThemeColor.multiOrdered}\n                width={width}\n                legendAllowWrap={true}\n              >\n                <ChartAxis\n                  label={\"\\n\" + t(\"metrics:axis-label-time\")}\n                  tickValues={tickValues}\n                  tickFormat={(d: number) =>\n                    dateToChartValue(d, {\n                      showDate,\n                    })\n                  }\n                />\n                <ChartAxis\n                  label={\"\\n\\n\\n\\n\\n\" + t(\"metrics:axis-label-bytes\")}\n                  dependentAxis\n                  tickFormat={formatBytes}\n                />\n                <ChartGroup>\n                  {chartData.map((value, index) => (\n                    <ChartLine key={`chart-area-${index}`} data={value.area} />\n                  ))}\n                </ChartGroup>\n                <ChartThreshold\n                  key={`chart-softlimit`}\n                  data={chartData[0].softLimit}\n                  style={{\n                    data: {\n                      stroke: chartData[0].softLimitColor,\n                    },\n                  }}\n                />\n              </Chart>\n            );\n          }\n        }\n      })()}\n    </div>\n  );\n};\n\nexport function getChartData(\n  metrics: BrokerBytesMetric,\n  broker: string | undefined,\n  duration: number,\n  brokerToggle: BrokerFilter,\n  limitLabel: string,\n  usageLimit?: number\n): {\n  legendData: Array<LegendData>;\n  chartData: Array<ChartData>;\n  tickValues: number[];\n} {\n  const legendData = [\n    usageLimit\n      ? {\n          name: limitLabel,\n          symbol: { fill: chart_color_black_500.value, type: \"threshold\" },\n        }\n      : undefined,\n  ].filter((d) => !!d) as Array<LegendData>;\n\n  const chartData: Array<ChartData> = [];\n  const softLimit: Array<BrokerChartData> = [];\n  const softLimitColor = chart_color_black_500.value;\n\n  if (broker && metrics[broker]) {\n    const area: Array<BrokerChartData> = [];\n    const color = chart_color_blue_300.value;\n    legendData.push({ name: broker, symbol: { fill: color } });\n    Object.entries(metrics[broker]).forEach(([timestamp, bytes]) => {\n      area.push({ name: broker, x: parseInt(timestamp, 10), y: bytes });\n    });\n    chartData.push({ color, softLimitColor, area, softLimit });\n  } else if (brokerToggle === \"total\") {\n    const area: Array<BrokerChartData> = [];\n\n    const color = chart_color_blue_300.value;\n    legendData.push({ name: \"Instance\", symbol: { fill: color } });\n    metrics[brokerToggle] &&\n      Object.entries(metrics[brokerToggle]).forEach(([timestamp, bytes]) => {\n        area.push({ name: \"Instance\", x: parseInt(timestamp, 10), y: bytes });\n      });\n    chartData.push({ color, softLimitColor, area, softLimit });\n  } else {\n    Object.entries(metrics)\n      .filter((metric) => metric[0] !== \"total\")\n      .map(([metric, dataMap], index) => {\n        const name = metric;\n\n        const color = colors[index];\n        legendData.push({ name });\n        const area: Array<BrokerChartData> = [];\n\n        Object.entries(dataMap).forEach(([timestamp, value]) => {\n          area.push({ name, x: parseInt(timestamp, 10), y: value });\n        });\n        chartData.push({ color, softLimitColor, area, softLimit });\n      });\n  }\n\n  const allTimestamps = Array.from(\n    new Set(Object.values(metrics).flatMap((m) => Object.keys(m)))\n  );\n  const tickValues = timestampsToTicks(allTimestamps, duration);\n\n  if (usageLimit) {\n    tickValues.forEach((timestamp) =>\n      softLimit.push({\n        name: limitLabel,\n        x: timestamp,\n        y: usageLimit,\n      })\n    );\n  }\n  return {\n    legendData,\n    chartData,\n    tickValues,\n  };\n}\n","import {\n  Alert,\n  Card,\n  CardBody,\n  CardTitle,\n  Divider,\n  Grid,\n  GridItem,\n  Toolbar,\n  ToolbarContent,\n} from \"@patternfly/react-core\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport type {\n  BrokerBytesMetric,\n  BrokerFilter,\n  DurationOptions,\n  PartitionBytesMetric,\n  PartitionSelect,\n  TimeSeriesMetrics,\n} from \"../types\";\nimport { CardBodyLoading } from \"./CardBodyLoading\";\nimport { ChartPopover } from \"./ChartPopover\";\nimport { ChartLinearWithOptionalLimit } from \"./ChartLinearWithOptionalLimit\";\nimport { EmptyStateMetricsUnavailable } from \"./EmptyStateMetricsUnavailable\";\nimport { ToolbarKafkaInstanceMetric } from \"./ToolbarKafkaInstanceMetric\";\nimport { EmptyStateNoMetricsData } from \"./EmptyStateNoMetricsData\";\nimport type { ToolbarRefreshProps } from \"./ToolbarRefresh\";\nimport { BrokerToggle } from \"./BrokerToggle\";\nimport { ChartPartitionLogSizePerBroker } from \"./ChartPartitionLogSizePerBroker\";\nimport { FilterByPartition } from \"./FilterByPartition\";\nimport { ChartUsedDiskSpace } from \"./CardUsedDiskSpaceMetrics\";\n\nexport type CardKafkaInstanceMetricsLimits = {\n  diskSpaceLimit: number;\n  connectionsLimit: number;\n  connectionRateLimit: number;\n};\n\nexport type CardKafkaInstanceMetricsProps = {\n  usedDiskMetrics: BrokerBytesMetric;\n  brokers: string[];\n  clientConnectionsMetrics: TimeSeriesMetrics;\n  connectionAttemptRateMetrics: TimeSeriesMetrics;\n  duration: DurationOptions;\n  lastUpdated: Date | undefined;\n  backendUnavailable: boolean;\n  isInitialLoading: boolean;\n  isLoading: boolean;\n  isJustCreated: boolean;\n  selectedBroker: string | undefined;\n  onSelectedBroker: (broker: string | undefined) => void;\n  onDurationChange: (duration: DurationOptions) => void;\n  selectToggle: BrokerFilter;\n  onSelectedToggle: (value: BrokerFilter) => void;\n  bytesPerPartitions: PartitionBytesMetric;\n  onSelectedPartition: (value: PartitionSelect) => void;\n  selectedPartition: PartitionSelect;\n} & Omit<ToolbarRefreshProps, \"ariaLabel\"> &\n  CardKafkaInstanceMetricsLimits;\n\ntype ChartTitleProps = {\n  title: string;\n  helperText: string;\n};\n\nexport const CardKafkaInstanceMetrics: FunctionComponent<\n  CardKafkaInstanceMetricsProps\n> = ({\n  usedDiskMetrics,\n  brokers,\n  clientConnectionsMetrics,\n  connectionAttemptRateMetrics,\n  duration,\n  lastUpdated,\n  backendUnavailable,\n  isInitialLoading,\n  isLoading,\n  isRefreshing,\n  isJustCreated,\n  diskSpaceLimit,\n  connectionsLimit,\n  connectionRateLimit,\n  onRefresh,\n  onDurationChange,\n  selectedBroker,\n  onSelectedBroker,\n  selectToggle,\n  onSelectedToggle,\n  selectedPartition,\n  onSelectedPartition,\n  bytesPerPartitions,\n}) => {\n  const { t } = useTranslation(\"metrics\");\n\n  return (\n    <Card data-testid={\"metrics-kafka-instance\"}>\n      <ToolbarKafkaInstanceMetric\n        title={t(\"kafka_instance_metrics\")}\n        duration={duration}\n        lastUpdated={lastUpdated}\n        onSetTimeDuration={onDurationChange}\n        isDisabled={backendUnavailable || isJustCreated || isLoading}\n        isRefreshing={isRefreshing}\n        onRefresh={onRefresh}\n        selectedBroker={selectedBroker}\n        onSetSelectedBroker={onSelectedBroker}\n        brokerList={brokers}\n      />\n      {(() => {\n        switch (true) {\n          case isInitialLoading:\n            return <CardBodyLoading />;\n\n          case backendUnavailable:\n            return (\n              <CardBody>\n                <EmptyStateNoMetricsData />\n              </CardBody>\n            );\n\n          case isJustCreated:\n            return (\n              <CardBody>\n                <EmptyStateMetricsUnavailable />\n              </CardBody>\n            );\n\n          default:\n            return (\n              <>\n                <ChartTitle\n                  title={t(\"used_disk_space\")}\n                  helperText={t(\"used_disk_space_help_text\")}\n                />\n                <CardBody>\n                  <BrokerToggle\n                    value={selectToggle}\n                    onChange={onSelectedToggle}\n                    selectedBroker={selectedBroker}\n                  />\n                  <ChartUsedDiskSpace\n                    metrics={usedDiskMetrics}\n                    broker={selectedBroker}\n                    duration={duration}\n                    isLoading={isLoading}\n                    emptyState={<EmptyStateNoMetricsData />}\n                    brokerToggle={selectToggle}\n                    usageLimit={diskSpaceLimit}\n                  />\n                </CardBody>\n                <Divider />\n                <ChartTitle\n                  title={t(\"partition_size\")}\n                  helperText={t(\"broker_partition_size_help_text\")}\n                />\n                <CardBody>\n                  <Toolbar>\n                    <ToolbarContent>\n                      <FilterByPartition\n                        onSetSelectedPartition={onSelectedPartition}\n                        partitionValue={selectedPartition}\n                      />\n                    </ToolbarContent>\n                    <ChartPartitionLogSizePerBroker\n                      partitions={bytesPerPartitions}\n                      broker={selectedBroker}\n                      duration={duration}\n                      isLoading={isLoading}\n                      selectedPartition={selectedPartition}\n                      emptyState={<EmptyStateNoMetricsData />}\n                    />\n                  </Toolbar>\n                </CardBody>\n                <Divider />\n                <ChartTitle\n                  title={t(\"client_connections\")}\n                  helperText={t(\"client_connections_helper_text\")}\n                />\n                <CardBody>\n                  <Grid hasGutter>\n                    <GridItem>\n                      {selectedBroker ? (\n                        <Alert\n                          variant=\"info\"\n                          isInline\n                          title={t(\"client_connection_alert\")}\n                        />\n                      ) : null}\n                    </GridItem>\n                    <GridItem>\n                      <ChartLinearWithOptionalLimit\n                        chartName={t(\"client_connections\")}\n                        yLabel={t(\"client_connections_y_axis\")}\n                        metrics={clientConnectionsMetrics}\n                        duration={duration}\n                        usageLimit={connectionsLimit}\n                        isLoading={isLoading}\n                        emptyState={<EmptyStateNoMetricsData />}\n                      />\n                    </GridItem>\n                  </Grid>\n                </CardBody>\n                <Divider />\n                <ChartTitle\n                  title={t(\"connection_attempt_rate\")}\n                  helperText={t(\"connection_attempt_rate_help_text\")}\n                />\n                <CardBody>\n                  <Grid hasGutter>\n                    <GridItem>\n                      {selectedBroker ? (\n                        <Alert\n                          variant=\"info\"\n                          isInline\n                          title={t(\"connection_attempt_rate_alert\")}\n                        />\n                      ) : null}\n                    </GridItem>\n                    <GridItem>\n                      <ChartLinearWithOptionalLimit\n                        chartName={t(\"connection_attempt_rate\")}\n                        yLabel={t(\"connection_attempt_rate_yaxis\")}\n                        metrics={connectionAttemptRateMetrics}\n                        duration={duration}\n                        usageLimit={connectionRateLimit}\n                        isLoading={isLoading}\n                        emptyState={<EmptyStateNoMetricsData />}\n                      />\n                    </GridItem>\n                  </Grid>\n                </CardBody>\n              </>\n            );\n        }\n      })()}\n    </Card>\n  );\n};\n\nexport const ChartTitle: FunctionComponent<ChartTitleProps> = ({\n  title,\n  helperText,\n}) => {\n  return (\n    <CardTitle component=\"h3\">\n      {title} <ChartPopover title={title} description={helperText} />\n    </CardTitle>\n  );\n};\n","import {\n  Bullseye,\n  Card,\n  CardBody,\n  CardTitle,\n  Skeleton,\n  Title,\n} from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { ChartPopover } from \"./ChartPopover\";\nimport { EmptyStateNoMetricsData } from \"./EmptyStateNoMetricsData\";\n\ntype CardKpiProps = {\n  metric: string | number | undefined;\n  name: string;\n  popover: string;\n  isLoading: boolean;\n};\n\nexport const CardKpi: VoidFunctionComponent<CardKpiProps> = ({\n  metric,\n  name,\n  popover,\n  isLoading,\n}) => {\n  return (\n    <Card isFullHeight data-testid={name}>\n      <CardTitle component=\"h3\">\n        {name} <ChartPopover title={name} description={popover} />\n      </CardTitle>\n      <CardBody>\n        {!isLoading &&\n          (metric === undefined ? (\n            <Bullseye>\n              <EmptyStateNoMetricsData />\n            </Bullseye>\n          ) : (\n            <Title\n              headingLevel=\"h3\"\n              size=\"4xl\"\n              aria-valuetext={`${metric} ${name}`}\n            >\n              {metric}\n            </Title>\n          ))}\n        {isLoading && <Skeleton width=\"50px\" shape=\"square\" />}\n      </CardBody>\n    </Card>\n  );\n};\n","import { assign, createMachine } from \"xstate\";\nimport type {\n  BrokerBytesMetric,\n  BrokerFilter,\n  GetKafkaInstanceMetricsResponse,\n  PartitionBytesMetric,\n  PartitionSelect,\n  TimeSeriesMetrics,\n} from \"../types\";\nimport { DurationOptions } from \"../types\";\n\nconst MAX_RETRIES = 3;\n\nconst apiState = {\n  initial: \"loading\",\n  states: {\n    loading: {\n      invoke: {\n        src: \"api\",\n      },\n      on: {\n        fetchFail: {\n          actions: \"incrementRetries\",\n          target: \"failure\",\n        },\n      },\n    },\n    failure: {\n      after: {\n        1000: [\n          { cond: \"canRetryFetching\", target: \"loading\" },\n          { target: \"#kafkaInstanceMetrics.criticalFail\" },\n        ],\n      },\n    },\n  },\n};\n\nexport type KafkaInstanceMetricsMachineContext = {\n  lastUpdated: Date | undefined;\n\n  // from the UI elements\n  duration: DurationOptions;\n  selectedBroker: string | undefined;\n  selectedToggle: BrokerFilter;\n  selectedPartition: PartitionSelect;\n\n  // from the api\n  brokers: string[];\n  usedDiskSpaceMetrics: BrokerBytesMetric;\n  clientConnectionsMetrics: TimeSeriesMetrics;\n  connectionAttemptRateMetrics: TimeSeriesMetrics;\n  bytesPerPartitionMetrics: PartitionBytesMetric;\n  diskSpaceLimit: number | undefined;\n  connectionsLimit: number | undefined;\n  connectionRateLimit: number | undefined;\n  // how many time did we try a fetch (that combines more api)\n  fetchFailures: number;\n};\n\nexport const KafkaInstanceMetricsMachine = createMachine(\n  {\n    tsTypes: {} as import(\"./KafkaInstanceMetricsMachine.typegen\").Typegen0,\n    schema: {\n      context: {} as KafkaInstanceMetricsMachineContext,\n      events: {} as\n        | ({ type: \"fetchSuccess\" } & GetKafkaInstanceMetricsResponse)\n        | { type: \"fetchFail\" }\n        // to refresh the data\n        | { type: \"refresh\" }\n        // from the UI elements\n        | { type: \"selectTopic\"; topic: string | undefined }\n        | { type: \"selectDuration\"; duration: DurationOptions }\n        | { type: \"selectBroker\"; broker: string | undefined }\n        | { type: \"selectToggle\"; value: BrokerFilter }\n        | { type: \"selectPartition\"; value: PartitionSelect },\n    },\n    id: \"kafkaInstanceMetrics\",\n    context: {\n      lastUpdated: undefined,\n      selectedBroker: undefined,\n      duration: DurationOptions.Last1hour,\n      usedDiskSpaceMetrics: {},\n      bytesPerPartitionMetrics: {},\n      clientConnectionsMetrics: {},\n      connectionAttemptRateMetrics: {},\n      diskSpaceLimit: undefined,\n      connectionsLimit: undefined,\n      connectionRateLimit: undefined,\n      fetchFailures: 0,\n      brokers: [],\n      selectedToggle: \"total\",\n      selectedPartition: \"Top10\",\n    },\n    initial: \"initialLoading\",\n    states: {\n      initialLoading: {\n        ...apiState,\n        tags: \"initialLoading\",\n        entry: \"setFetchTimestamp\",\n        on: {\n          fetchSuccess: [\n            {\n              cond: \"isJustCreated\",\n              actions: \"setMetrics\",\n              target: \"#kafkaInstanceMetrics.withResponse\",\n            },\n            { actions: \"setMetrics\", target: \"justCreated\" },\n          ],\n        },\n      },\n      callApi: {\n        ...apiState,\n        tags: \"loading\",\n        entry: \"setFetchTimestamp\",\n        on: {\n          fetchSuccess: {\n            actions: \"setMetrics\",\n            target: \"#kafkaInstanceMetrics.withResponse\",\n          },\n        },\n      },\n      criticalFail: {\n        tags: \"failed\",\n        on: {\n          refresh: {\n            actions: \"resetRetries\",\n            target: \"callApi\",\n          },\n        },\n      },\n      justCreated: {\n        tags: \"justCreated\",\n        on: {\n          refresh: {\n            target: \"initialLoading\",\n          },\n        },\n      },\n      withResponse: {\n        tags: \"withResponse\",\n        on: {\n          refresh: {\n            target: \"refreshing\",\n          },\n          selectDuration: {\n            actions: \"setDuration\",\n            target: \"callApi\",\n          },\n          selectBroker: {\n            actions: \"setBroker\",\n            target: \"callApi\",\n          },\n          selectToggle: {\n            actions: \"setToggle\",\n            target: \"callApi\",\n          },\n          selectPartition: {\n            actions: \"setPartition\",\n          },\n        },\n      },\n      refreshing: {\n        tags: \"refreshing\",\n        entry: \"setFetchTimestamp\",\n        invoke: {\n          src: \"api\",\n        },\n        on: {\n          fetchSuccess: {\n            actions: \"setMetrics\",\n            target: \"withResponse\",\n          },\n          fetchFail: {\n            // 👀 we silently ignore this happened and go back to the right\n            // state depending on the previous data\n            target: \"withResponse\",\n          },\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      setFetchTimestamp: assign({\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        lastUpdated: (_context) => new Date(),\n      }),\n      setMetrics: assign((_, event) => {\n        const {\n          usedDiskSpaceMetrics,\n          bytesPerPartitionMetrics,\n          clientConnectionsMetrics,\n          connectionAttemptRateMetrics,\n          diskSpaceLimit,\n          connectionsLimit,\n          connectionRateLimit,\n          brokers,\n        } = event;\n        return {\n          brokers,\n          usedDiskSpaceMetrics,\n          bytesPerPartitionMetrics,\n          clientConnectionsMetrics,\n          connectionAttemptRateMetrics,\n          diskSpaceLimit: diskSpaceLimit * 1024 ** 3, // convert it to GiB\n          connectionsLimit,\n          connectionRateLimit,\n        };\n      }),\n      incrementRetries: assign({\n        fetchFailures: (context) => context.fetchFailures + 1,\n      }),\n      resetRetries: assign({\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        fetchFailures: (_context) => 0,\n      }),\n      setDuration: assign((_context, event) => ({\n        duration: event.duration,\n        usedDiskSpaceMetrics: {},\n        bytesPerPartitionMetrics: {},\n        clientConnectionsMetrics: {},\n        connectionAttemptRateMetrics: {},\n      })),\n      setBroker: assign({\n        selectedBroker: (_context, event) => event.broker,\n      }),\n      setToggle: assign((_, { value }) => ({ selectedToggle: value })),\n      setPartition: assign((_, { value }) => ({ selectedPartition: value })),\n    },\n    guards: {\n      canRetryFetching: (context) => context.fetchFailures < MAX_RETRIES,\n      isJustCreated: (_, event) => {\n        if (event.type === \"fetchSuccess\") {\n          return (\n            Object.keys(event.clientConnectionsMetrics).length > 0 ||\n            Object.keys(event.connectionAttemptRateMetrics).length > 0 ||\n            Object.keys(event.usedDiskSpaceMetrics).length > 0 ||\n            Object.keys(event.bytesPerPartitionMetrics).length > 0\n          );\n        }\n        return false;\n      },\n    },\n  }\n);\n\nexport type KafkaInstanceMetricsMachineType =\n  typeof KafkaInstanceMetricsMachine;\n","import { assign, createMachine } from \"xstate\";\nimport type {\n  GetTopicsMetricsResponse,\n  PartitionBytesMetric,\n  PartitionSelect,\n  TimeSeriesMetrics,\n} from \"../types\";\nimport { DurationOptions } from \"../types\";\n\nconst MAX_RETRIES = 3;\n\nconst apiState = {\n  initial: \"loading\",\n  states: {\n    loading: {\n      invoke: {\n        src: \"api\",\n      },\n      on: {\n        fetchFail: {\n          actions: \"incrementRetries\",\n          target: \"failure\",\n        },\n      },\n    },\n    failure: {\n      after: {\n        1000: [\n          { cond: \"canRetryFetching\", target: \"loading\" },\n          { target: \"#topicsMetrics.criticalFail\" },\n        ],\n      },\n    },\n  },\n};\n\nexport type TopicsMetricsMachineContext = {\n  lastUpdated: Date | undefined;\n\n  // from the UI elements\n  selectedTopic: string | undefined;\n  duration: DurationOptions;\n  selectedPartition: PartitionSelect;\n  // from the api\n  kafkaTopics: string[];\n  metricsTopics: string[];\n  bytesOutgoing: TimeSeriesMetrics;\n  bytesIncoming: TimeSeriesMetrics;\n  bytesPerPartition: PartitionBytesMetric;\n  incomingMessageRate: TimeSeriesMetrics;\n\n  // how many time did we try a fetch (that combines more api)\n  fetchFailures: number;\n};\n\nexport const TopicsMetricsMachine = createMachine(\n  {\n    tsTypes: {} as import(\"./TopicsMetricsMachine.typegen\").Typegen0,\n    schema: {\n      context: {} as TopicsMetricsMachineContext,\n      events: {} as  // called when a new kafka id has been specified\n        | ({ type: \"fetchSuccess\" } & GetTopicsMetricsResponse)\n        | { type: \"fetchFail\" }\n\n        // to refresh the data\n        | { type: \"refresh\" }\n\n        // from the UI elements\n        | { type: \"selectTopic\"; topic: string | undefined }\n        | { type: \"selectDuration\"; duration: DurationOptions }\n        | { type: \"selectPartition\"; value: PartitionSelect },\n    },\n    id: \"topicsMetrics\",\n    context: {\n      lastUpdated: undefined,\n\n      // from the UI elements\n      selectedTopic: undefined,\n      duration: DurationOptions.Last1hour,\n      selectedPartition: \"Top10\",\n\n      // from the api\n      kafkaTopics: [],\n      metricsTopics: [],\n      bytesOutgoing: {},\n      bytesIncoming: {},\n      bytesPerPartition: {},\n      incomingMessageRate: {},\n\n      // how many time did we try a fetch (that combines more api)\n      fetchFailures: 0,\n    },\n    initial: \"initialLoading\",\n    states: {\n      initialLoading: {\n        ...apiState,\n        tags: \"initialLoading\",\n        entry: \"setFetchTimestamp\",\n        on: {\n          fetchSuccess: [\n            {\n              cond: \"isJustCreated\",\n              actions: \"setMetrics\",\n              target: \"#topicsMetrics.withResponse\",\n            },\n            { actions: \"setMetrics\", target: \"justCreated\" },\n          ],\n        },\n      },\n      callApi: {\n        ...apiState,\n        tags: \"loading\",\n        entry: \"setFetchTimestamp\",\n        on: {\n          fetchSuccess: {\n            actions: \"setMetrics\",\n            target: \"#topicsMetrics.withResponse\",\n          },\n        },\n      },\n      criticalFail: {\n        tags: \"failed\",\n        on: {\n          refresh: {\n            actions: \"resetRetries\",\n            target: \"callApi\",\n          },\n        },\n      },\n      justCreated: {\n        tags: \"justCreated\",\n        on: {\n          refresh: {\n            target: \"initialLoading\",\n          },\n        },\n      },\n      withResponse: {\n        tags: \"withResponse\",\n        initial: \"idle\",\n        states: {\n          idle: {},\n          refreshing: {\n            tags: \"refreshing\",\n            entry: \"setFetchTimestamp\",\n            invoke: {\n              src: \"api\",\n            },\n            on: {\n              fetchSuccess: {\n                actions: \"setMetrics\",\n                target: \"#topicsMetrics.withResponse\",\n              },\n              fetchFail: {\n                // 👀 we silently ignore this happened\n                target: \"#topicsMetrics.withResponse\",\n              },\n            },\n          },\n        },\n        on: {\n          refresh: {\n            target: \"#topicsMetrics.withResponse.refreshing\",\n          },\n          selectTopic: {\n            actions: \"setTopic\",\n            target: \"callApi\",\n          },\n          selectDuration: {\n            actions: \"setDuration\",\n            target: \"callApi\",\n          },\n          selectPartition: {\n            actions: \"setPartition\",\n          },\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      setFetchTimestamp: assign({\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        lastUpdated: (_context) => new Date(),\n      }),\n      setMetrics: assign((_context, event) => {\n        const {\n          kafkaTopics,\n          metricsTopics,\n          bytesPerPartition,\n          bytesIncoming,\n          bytesOutgoing,\n          incomingMessageRate,\n        } = event;\n        return {\n          kafkaTopics,\n          metricsTopics,\n          bytesPerPartition,\n          bytesIncoming,\n          bytesOutgoing,\n          incomingMessageRate,\n        };\n      }),\n      incrementRetries: assign({\n        fetchFailures: (context) => context.fetchFailures + 1,\n      }),\n      resetRetries: assign({\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        fetchFailures: (_context) => 0,\n      }),\n      setTopic: assign({\n        selectedTopic: (_context, event) => event.topic,\n      }),\n      setDuration: assign({\n        duration: (_, event) => event.duration,\n      }),\n      setPartition: assign((_, { value }) => ({ selectedPartition: value })),\n    },\n    guards: {\n      canRetryFetching: (context) => context.fetchFailures < MAX_RETRIES,\n      isJustCreated: (_, event) => {\n        if (event.type === \"fetchSuccess\") {\n          return (\n            Object.keys(event.bytesIncoming).length > 0 ||\n            Object.keys(event.bytesOutgoing).length > 0 ||\n            Object.keys(event.bytesPerPartition).length > 0 ||\n            Object.keys(event.incomingMessageRate).length > 0\n          );\n        }\n        return false;\n      },\n    },\n  }\n);\n\nexport type TopicsMetricsMachineType = typeof TopicsMetricsMachine;\n","import { assign, createMachine } from \"xstate\";\nimport type { GetMetricsKpiResponse } from \"../types\";\n\nconst MAX_RETRIES = 3;\n\nconst apiState = {\n  initial: \"loading\",\n  states: {\n    loading: {\n      invoke: {\n        src: \"api\",\n      },\n      on: {\n        fetchFail: {\n          actions: \"incrementRetries\",\n          target: \"failure\",\n        },\n      },\n    },\n    failure: {\n      after: {\n        1000: [\n          { cond: \"canRetryFetching\", target: \"loading\" },\n          { target: \"#kpis.criticalFail\" },\n        ],\n      },\n    },\n  },\n};\n\nexport type MetricsKpiMachineContext = {\n  // from the api\n  topics: number | undefined;\n  topicPartitions: number | undefined;\n  consumerGroups: number | undefined;\n  topicPartitionsLimit: number | undefined;\n\n  // how many time did we try a fetch (that combines more api)\n  fetchFailures: number;\n};\n\nexport const MetricsKpiMachine = createMachine(\n  {\n    tsTypes: {} as import(\"./MetricsKpiMachine.typegen\").Typegen0,\n    predictableActionArguments: true,\n    schema: {\n      context: {} as MetricsKpiMachineContext,\n      events: {} as\n        | { type: \"fetch\" }\n        | ({ type: \"fetchSuccess\" } & GetMetricsKpiResponse)\n        | { type: \"fetchFail\" }\n        | { type: \"refresh\" },\n    },\n    id: \"kpis\",\n    context: {\n      topics: undefined,\n      topicPartitions: undefined,\n      consumerGroups: undefined,\n      topicPartitionsLimit: undefined,\n      fetchFailures: 0,\n    },\n    initial: \"initialLoading\",\n    states: {\n      initialLoading: {\n        ...apiState,\n        tags: \"initialLoading\",\n        on: {\n          fetchSuccess: [\n            {\n              cond: \"isJustCreated\",\n              actions: \"setMetrics\",\n              target: \"#kpis.withResponse\",\n            },\n            { actions: \"setMetrics\", target: \"justCreated\" },\n          ],\n        },\n      },\n      callApi: {\n        ...apiState,\n        tags: \"loading\",\n        on: {\n          fetchSuccess: {\n            actions: \"setMetrics\",\n            target: \"#kpis.withResponse\",\n          },\n        },\n      },\n      criticalFail: {\n        tags: \"failed\",\n        on: {\n          refresh: {\n            actions: \"resetRetries\",\n            target: \"callApi\",\n          },\n        },\n      },\n      justCreated: {\n        tags: \"justCreated\",\n        on: {\n          refresh: {\n            target: \"initialLoading\",\n          },\n        },\n      },\n      withResponse: {\n        tags: \"withResponse\",\n        initial: \"idle\",\n        states: {\n          idle: {},\n          refreshing: {\n            tags: \"refreshing\",\n            invoke: {\n              src: \"api\",\n            },\n            on: {\n              fetchSuccess: {\n                actions: \"setMetrics\",\n                target: \"#kpis.withResponse\",\n              },\n              fetchFail: {\n                // 👀 we silently ignore this happened\n                target: \"#kpis.withResponse\",\n              },\n            },\n          },\n        },\n        on: {\n          refresh: {\n            target: \"#kpis.withResponse.refreshing\",\n          },\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      setMetrics: assign((_, event) => {\n        const {\n          topics,\n          topicPartitions,\n          consumerGroups,\n          topicPartitionsLimit,\n        } = event;\n        return {\n          topics,\n          topicPartitions,\n          consumerGroups,\n          topicPartitionsLimit,\n        };\n      }),\n\n      incrementRetries: assign({\n        fetchFailures: (context) => context.fetchFailures + 1,\n      }),\n\n      resetRetries: assign({\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        fetchFailures: (_context) => 0,\n      }),\n    },\n    guards: {\n      canRetryFetching: (context) => context.fetchFailures < MAX_RETRIES,\n      isJustCreated: (_, event) => {\n        if (event.type === \"fetchSuccess\") {\n          return (\n            event.topics !== undefined ||\n            event.topicPartitions !== undefined ||\n            event.consumerGroups !== undefined ||\n            event.topicPartitionsLimit !== undefined\n          );\n        }\n        return false;\n      },\n    },\n  }\n);\n\nexport type MetricsKpiMachineType = typeof MetricsKpiMachine;\n","import { useInterpret } from \"@xstate/react\";\nimport type { FunctionComponent } from \"react\";\nimport { createContext } from \"react\";\nimport type { ActorRefFrom } from \"xstate\";\nimport { timeIntervalsMapping } from \"./consts\";\nimport type { KafkaInstanceMetricsMachineType } from \"./machines\";\nimport { KafkaInstanceMetricsMachine } from \"./machines\";\nimport type { DurationOptions, GetKafkaInstanceMetricsResponse } from \"./types\";\n\nexport const KafkaInstanceMetricsContext = createContext<{\n  service: ActorRefFrom<KafkaInstanceMetricsMachineType>;\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n}>(null!);\n\nexport type KafkaInstanceMetricsProviderProps = {\n  getKafkaInstanceMetrics: (options: {\n    duration: DurationOptions;\n    interval: number;\n    selectedBroker: string | undefined;\n  }) => Promise<GetKafkaInstanceMetricsResponse>;\n};\nexport const KafkaInstanceMetricsProvider: FunctionComponent<\n  KafkaInstanceMetricsProviderProps\n> = ({ children, getKafkaInstanceMetrics }) => {\n  const service = useInterpret(\n    () =>\n      KafkaInstanceMetricsMachine.withConfig({\n        services: {\n          api: (context) => {\n            return (callback) => {\n              getKafkaInstanceMetrics({\n                selectedBroker: context.selectedBroker,\n                duration: context.duration,\n                interval: timeIntervalsMapping[context.duration].interval,\n              })\n                .then((results) =>\n                  callback({ type: \"fetchSuccess\", ...results })\n                )\n                .catch((e) => {\n                  console.error(\"Failed fetching data\", e);\n                  callback(\"fetchFail\");\n                });\n            };\n          },\n        },\n      }),\n    {\n      devTools: true,\n    }\n  );\n  return (\n    <KafkaInstanceMetricsContext.Provider\n      value={{\n        service,\n      }}\n    >\n      {children}\n    </KafkaInstanceMetricsContext.Provider>\n  );\n};\n","import { useInterpret } from \"@xstate/react\";\nimport type { FunctionComponent } from \"react\";\nimport { createContext } from \"react\";\nimport type { ActorRefFrom } from \"xstate\";\nimport type { MetricsKpiMachineType } from \"./machines\";\nimport { MetricsKpiMachine } from \"./machines\";\nimport type { GetMetricsKpiResponse } from \"./types\";\n\nexport const MetricsKpiContext = createContext<{\n  service: ActorRefFrom<MetricsKpiMachineType>;\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n}>(null!);\n\nexport type MetricsKpiProviderProps = {\n  getMetricsKpi: () => Promise<GetMetricsKpiResponse>;\n};\nexport const MetricsKpiProvider: FunctionComponent<MetricsKpiProviderProps> = ({\n  children,\n  getMetricsKpi,\n}) => {\n  const service = useInterpret(\n    () =>\n      MetricsKpiMachine.withConfig({\n        services: {\n          api: () => {\n            return (callback) => {\n              getMetricsKpi()\n                .then((results) =>\n                  callback({ type: \"fetchSuccess\", ...results })\n                )\n                .catch((e) => {\n                  console.error(\"Failed fetching data\", e);\n                  callback(\"fetchFail\");\n                });\n            };\n          },\n        },\n      }),\n    {\n      devTools: true,\n    }\n  );\n  return (\n    <MetricsKpiContext.Provider\n      value={{\n        service,\n      }}\n    >\n      {children}\n    </MetricsKpiContext.Provider>\n  );\n};\n","import { useInterpret } from \"@xstate/react\";\nimport type { FunctionComponent } from \"react\";\nimport { createContext } from \"react\";\nimport type { ActorRefFrom } from \"xstate\";\nimport { timeIntervalsMapping } from \"./consts\";\nimport type { TopicsMetricsMachineType } from \"./machines\";\nimport { TopicsMetricsMachine } from \"./machines\";\nimport type { DurationOptions, GetTopicsMetricsResponse } from \"./types\";\n\nexport const TopicsMetricsContext = createContext<{\n  service: ActorRefFrom<TopicsMetricsMachineType>;\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n}>(null!);\n\nexport type TopicsMetricsProviderProps = {\n  getTopicsMetrics: (options: {\n    duration: DurationOptions;\n    interval: number;\n    selectedTopic: string | undefined;\n  }) => Promise<GetTopicsMetricsResponse>;\n};\nexport const TopicsMetricsProvider: FunctionComponent<\n  TopicsMetricsProviderProps\n> = ({ children, getTopicsMetrics }) => {\n  const service = useInterpret(\n    () =>\n      TopicsMetricsMachine.withConfig({\n        services: {\n          api: (context) => {\n            return (callback) => {\n              getTopicsMetrics({\n                selectedTopic: context.selectedTopic,\n                duration: context.duration,\n                interval: timeIntervalsMapping[context.duration].interval,\n              })\n                .then((results) =>\n                  callback({ type: \"fetchSuccess\", ...results })\n                )\n                .catch((e) => {\n                  console.error(\"Failed fetching data\", e);\n                  callback(\"fetchFail\");\n                });\n            };\n          },\n        },\n      }),\n    {\n      devTools: true,\n    }\n  );\n  return (\n    <TopicsMetricsContext.Provider\n      value={{\n        service,\n      }}\n    >\n      {children}\n    </TopicsMetricsContext.Provider>\n  );\n};\n","import { useSelector } from \"@xstate/react\";\nimport { useCallback, useContext } from \"react\";\nimport { KafkaInstanceMetricsContext } from \"./KafkaInstanceMetricsProvider\";\nimport type { KafkaInstanceMetricsMachineContext } from \"./machines\";\nimport type { BrokerFilter, DurationOptions, PartitionSelect } from \"./types\";\n\ntype SeletorReturn = KafkaInstanceMetricsMachineContext & {\n  isInitialLoading: boolean;\n  isRefreshing: boolean;\n  isLoading: boolean;\n  isFailed: boolean;\n  isJustCreated: boolean;\n};\n\nexport function useKafkaInstanceMetrics() {\n  const { service } = useContext(KafkaInstanceMetricsContext);\n\n  const {\n    selectedToggle,\n    selectedBroker,\n    usedDiskSpaceMetrics,\n    clientConnectionsMetrics,\n    connectionAttemptRateMetrics,\n    bytesPerPartitionMetrics,\n    diskSpaceLimit,\n    connectionsLimit,\n    connectionRateLimit,\n    duration,\n    lastUpdated,\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n    selectedPartition,\n    brokers,\n  } = useSelector<typeof service, SeletorReturn>(\n    service,\n    useCallback(\n      (state) => ({\n        ...state.context,\n        isInitialLoading: state.hasTag(\"initialLoading\"),\n        isRefreshing: state.hasTag(\"refreshing\"),\n        isLoading: state.hasTag(\"loading\"),\n        isFailed: state.hasTag(\"failed\"),\n        isJustCreated: state.hasTag(\"justCreated\"),\n      }),\n      []\n    )\n  );\n\n  const onBrokerChange = useCallback(\n    (broker: string | undefined) =>\n      service.send({ type: \"selectBroker\", broker }),\n    [service]\n  );\n\n  const onDurationChange = useCallback(\n    (duration: DurationOptions) =>\n      service.send({ type: \"selectDuration\", duration }),\n    [service]\n  );\n\n  const onRefresh = useCallback(() => service.send(\"refresh\"), [service]);\n\n  const onSelectToggle = useCallback(\n    (value: BrokerFilter) => service.send({ type: \"selectToggle\", value }),\n    [service]\n  );\n\n  const onSelectPartition = useCallback(\n    (value: PartitionSelect) =>\n      service.send({ type: \"selectPartition\", value }),\n    [service]\n  );\n\n  return {\n    usedDiskSpaceMetrics,\n    clientConnectionsMetrics,\n    connectionAttemptRateMetrics,\n    bytesPerPartitionMetrics,\n    diskSpaceLimit,\n    connectionsLimit,\n    connectionRateLimit,\n    lastUpdated,\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n    duration,\n    onDurationChange,\n    onRefresh,\n    onBrokerChange,\n    selectedBroker,\n    selectedToggle,\n    onSelectToggle,\n    onSelectPartition,\n    selectedPartition,\n    brokers,\n  };\n}\n","import { useSelector } from \"@xstate/react\";\nimport { useCallback, useContext, useMemo } from \"react\";\nimport type { TopicsMetricsMachineContext } from \"./machines\";\nimport { TopicsMetricsContext } from \"./TopicsMetricsProvider\";\nimport type { DurationOptions, PartitionSelect } from \"./types\";\n\ntype SelectorReturn = TopicsMetricsMachineContext & {\n  isInitialLoading: boolean;\n  isRefreshing: boolean;\n  isLoading: boolean;\n  isFailed: boolean;\n  isJustCreated: boolean;\n};\n\nexport function useTopicsMetrics() {\n  const { service } = useContext(TopicsMetricsContext);\n\n  const {\n    selectedTopic,\n    duration,\n    kafkaTopics,\n    metricsTopics,\n    bytesIncoming,\n    bytesOutgoing,\n    bytesPerPartition,\n    incomingMessageRate,\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n    lastUpdated,\n    selectedPartition,\n  } = useSelector<typeof service, SelectorReturn>(\n    service,\n    useCallback(\n      (state) => ({\n        ...state.context,\n        isInitialLoading: state.hasTag(\"initialLoading\"),\n        isRefreshing: state.hasTag(\"refreshing\"),\n        isLoading: state.hasTag(\"loading\"),\n        isFailed: state.hasTag(\"failed\"),\n        isJustCreated: state.hasTag(\"justCreated\"),\n      }),\n      []\n    )\n  );\n\n  const onTopicChange = useCallback(\n    (topic: string | undefined) => service.send({ type: \"selectTopic\", topic }),\n    [service]\n  );\n\n  const onDurationChange = useCallback(\n    (duration: DurationOptions) =>\n      service.send({ type: \"selectDuration\", duration }),\n    [service]\n  );\n\n  const onRefresh = useCallback(() => service.send(\"refresh\"), [service]);\n\n  const mergedTopics = useMemo((): string[] => {\n    const topics = Array.from(\n      new Set<string>([...kafkaTopics, ...metricsTopics])\n    );\n    topics.sort((a, b) => a.localeCompare(b));\n    return topics;\n  }, [kafkaTopics, metricsTopics]);\n\n  const onSelectPartition = useCallback(\n    (value: PartitionSelect) =>\n      service.send({ type: \"selectPartition\", value }),\n    [service]\n  );\n\n  return {\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n    lastUpdated,\n    topics: mergedTopics,\n    selectedTopic,\n    duration,\n    bytesIncoming,\n    bytesOutgoing,\n    bytesPerPartition,\n    incomingMessageRate,\n    onTopicChange,\n    onDurationChange,\n    onRefresh,\n    onSelectPartition,\n    selectedPartition,\n  };\n}\n","import {\n  Alert,\n  AlertVariant,\n  Bullseye,\n  Card,\n  CardBody,\n  CardFooter,\n  CardTitle,\n  Skeleton,\n  Text,\n  TextContent,\n  Title,\n} from \"@patternfly/react-core\";\nimport {\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n} from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { ChartPopover } from \"./ChartPopover\";\nimport { EmptyStateNoMetricsData } from \"./EmptyStateNoMetricsData\";\n\ntype PartitionCardProps = {\n  metric: number | undefined;\n  isLoading: boolean;\n  topicPartitionsLimit: number | undefined;\n};\n\nexport const PartitionCard: VoidFunctionComponent<PartitionCardProps> = ({\n  metric,\n  isLoading,\n  topicPartitionsLimit = 0,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <Card\n      isFullHeight\n      data-testid={t(\"metrics:metric_kpi_topicPartitions_name\")}\n    >\n      <CardTitle component=\"h3\">\n        {t(\"metrics:metric_kpi_topicPartitions_name\")}{\" \"}\n        <ChartPopover\n          title={t(\"metrics:metric_kpi_topicPartitions_name\")}\n          description={t(\"metrics:metric_kpi_topicPartitions_description\")}\n        />\n      </CardTitle>\n      <CardBody>\n        {!isLoading &&\n          (metric === undefined ? (\n            <Bullseye>\n              <EmptyStateNoMetricsData />\n            </Bullseye>\n          ) : (\n            <>\n              <Title\n                headingLevel=\"h3\"\n                size=\"4xl\"\n                aria-valuetext={`${metric} ${t(\n                  \"metrics:metric_kpi_topicPartitions_name\"\n                )}`}\n              >\n                {metric}{\" \"}\n                {(() => {\n                  if (metric >= topicPartitionsLimit) {\n                    return (\n                      <ExclamationCircleIcon color=\"var(--pf-global--danger-color--100)\" />\n                    );\n                  } else if (metric >= topicPartitionsLimit * 0.95) {\n                    return (\n                      <ExclamationTriangleIcon color=\"var(--pf-global--warning-color--100)\" />\n                    );\n                  } else {\n                    return \"\";\n                  }\n                })()}\n              </Title>\n              <TextContent>\n                <Text>\n                  {t(\"metrics:partition_limit\", {\n                    topic: topicPartitionsLimit,\n                  })}\n                </Text>\n              </TextContent>\n            </>\n          ))}\n        {isLoading && <Skeleton width=\"50px\" shape=\"square\" />}\n      </CardBody>\n      {(() => {\n        if (metric && metric >= topicPartitionsLimit) {\n          return (\n            <CardFooter>\n              <Alert\n                isExpandable\n                isInline\n                variant={AlertVariant.danger}\n                title={t(\"metrics:partition_limit_reached_title\")}\n              >\n                <p>{t(\"metrics:partition_limit_reached_description_1\")}</p>\n                <p>{t(\"metrics:partition_limit_reached_description_2\")}</p>\n              </Alert>\n            </CardFooter>\n          );\n        } else if (metric && metric >= topicPartitionsLimit * 0.95) {\n          return (\n            <CardFooter>\n              <Alert\n                role={\"alert\"}\n                isExpandable\n                isInline\n                variant={AlertVariant.warning}\n                title={t(\"metrics:partition_limit_approaching_title\")}\n              >\n                <p>\n                  {t(\"metrics:partition_limit_approaching_description_1\", {\n                    limit: topicPartitionsLimit,\n                  })}\n                </p>\n                <p>{t(\"metrics:partition_limit_approaching_description_2\")}</p>\n              </Alert>\n            </CardFooter>\n          );\n        } else {\n          return \" \";\n        }\n      })()}\n    </Card>\n  );\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { Alert, AlertActionCloseButton } from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport type MetricsLagAlertProps = {\n  isClosed: boolean;\n  onClickClose: () => void;\n};\n\nexport const MetricsLagAlert: VoidFunctionComponent<MetricsLagAlertProps> = ({\n  isClosed,\n  onClickClose,\n}) => {\n  const { t } = useTranslation(\"metrics\");\n\n  if (!isClosed) {\n    return (\n      <Alert\n        isInline\n        variant=\"info\"\n        title={t(\"metrics_lag_title\")}\n        actionClose={<AlertActionCloseButton onClose={onClickClose} />}\n      >\n        <p>{t(\"metrics_lag_description\")}</p>\n      </Alert>\n    );\n  } else {\n    return <> </>;\n  }\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  CardKafkaInstanceMetrics,\n  CardTopicsMetrics,\n  EmptyStateInitialLoading,\n  EmptyStateMetricsUnavailable,\n  MetricsLayout,\n} from \"./components\";\nimport { CardKpi } from \"./components/CardKpi\";\nimport type { KafkaInstanceMetricsProviderProps } from \"./KafkaInstanceMetricsProvider\";\nimport { KafkaInstanceMetricsProvider } from \"./KafkaInstanceMetricsProvider\";\nimport type { MetricsKpiProviderProps } from \"./MetricsKpiProvider\";\nimport { MetricsKpiProvider } from \"./MetricsKpiProvider\";\nimport type { TopicsMetricsProviderProps } from \"./TopicsMetricsProvider\";\nimport { TopicsMetricsProvider } from \"./TopicsMetricsProvider\";\nimport { useKafkaInstanceMetrics } from \"./useKafkaInstanceMetrics\";\nimport { useMetricsKpi } from \"./useMetricsKpi\";\nimport { useTopicsMetrics } from \"./useTopicsMetrics\";\nimport { PartitionCard } from \"./components/PartitionCard\";\nimport { MetricsLagAlert } from \"./components/MetricsLagAlert\";\n\nexport type MetricsProps = {\n  onCreateTopic: () => void;\n  onAlertClose: () => void;\n  hasUserAlreadyClosedAlert: boolean;\n} & KafkaInstanceMetricsProviderProps &\n  TopicsMetricsProviderProps &\n  MetricsKpiProviderProps;\n\nexport const Metrics: VoidFunctionComponent<MetricsProps> = ({\n  getKafkaInstanceMetrics,\n  getTopicsMetrics,\n  getMetricsKpi,\n  onCreateTopic,\n  onAlertClose,\n  hasUserAlreadyClosedAlert,\n}) => {\n  return (\n    <TopicsMetricsProvider getTopicsMetrics={getTopicsMetrics}>\n      <KafkaInstanceMetricsProvider\n        getKafkaInstanceMetrics={getKafkaInstanceMetrics}\n      >\n        <MetricsKpiProvider getMetricsKpi={getMetricsKpi}>\n          <ConnectedMetrics\n            onCreateTopic={onCreateTopic}\n            onClickClose={onAlertClose}\n            isClosed={hasUserAlreadyClosedAlert}\n          />\n        </MetricsKpiProvider>\n      </KafkaInstanceMetricsProvider>\n    </TopicsMetricsProvider>\n  );\n};\n\ntype ConnectedMetricsProps = {\n  onCreateTopic: () => void;\n  onClickClose: () => void;\n  isClosed: boolean;\n};\nconst ConnectedMetrics: VoidFunctionComponent<ConnectedMetricsProps> = ({\n  onCreateTopic,\n  onClickClose,\n  isClosed,\n}) => {\n  const { t } = useTranslation();\n  const kafkaInstanceMetrics = useKafkaInstanceMetrics();\n  const topicsMetrics = useTopicsMetrics();\n  const metricsKpi = useMetricsKpi();\n\n  switch (true) {\n    case kafkaInstanceMetrics.isInitialLoading ||\n      topicsMetrics.isInitialLoading ||\n      metricsKpi.isInitialLoading:\n      return <EmptyStateInitialLoading />;\n    case kafkaInstanceMetrics.isFailed &&\n      topicsMetrics.isFailed &&\n      topicsMetrics.isFailed:\n    case kafkaInstanceMetrics.isJustCreated &&\n      topicsMetrics.isJustCreated &&\n      metricsKpi.isJustCreated:\n      return <EmptyStateMetricsUnavailable />;\n    default:\n      return (\n        <MetricsLayout\n          metricsLagAlert={\n            <MetricsLagAlert onClickClose={onClickClose} isClosed={isClosed} />\n          }\n          topicsKpi={\n            <CardKpi\n              metric={metricsKpi.topics}\n              isLoading={metricsKpi.isInitialLoading || metricsKpi.isLoading}\n              name={t(\"metrics:metric_kpi_topics_name\")}\n              popover={t(\"metrics:metric_kpi_topics_description\")}\n            />\n          }\n          topicPartitionsKpi={\n            <PartitionCard\n              metric={metricsKpi.topicPartitions}\n              isLoading={metricsKpi.isInitialLoading || metricsKpi.isLoading}\n              topicPartitionsLimit={metricsKpi.topicPartitionsLimit}\n            />\n          }\n          consumerGroupKpi={\n            <CardKpi\n              metric={metricsKpi.consumerGroups}\n              isLoading={metricsKpi.isInitialLoading || metricsKpi.isLoading}\n              name={t(\"metrics:metric_kpi_consumerGroup_name\")}\n              popover={t(\"metrics:metric_kpi_consumerGroup_description\")}\n            />\n          }\n          diskSpaceMetrics={<ConnectedKafkaInstanceMetrics />}\n          topicMetrics={\n            <ConnectedTopicsMetrics onCreateTopic={onCreateTopic} />\n          }\n        />\n      );\n  }\n};\n\nconst ConnectedKafkaInstanceMetrics: VoidFunctionComponent = () => {\n  const {\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n    duration,\n    lastUpdated,\n    usedDiskSpaceMetrics,\n    clientConnectionsMetrics,\n    connectionAttemptRateMetrics,\n    diskSpaceLimit,\n    connectionsLimit,\n    connectionRateLimit,\n    onDurationChange,\n    onRefresh,\n    brokers,\n    onBrokerChange,\n    selectedBroker,\n    selectedToggle,\n    onSelectToggle,\n    bytesPerPartitionMetrics,\n    selectedPartition,\n    onSelectPartition,\n  } = useKafkaInstanceMetrics();\n\n  return (\n    <CardKafkaInstanceMetrics\n      usedDiskMetrics={usedDiskSpaceMetrics}\n      clientConnectionsMetrics={clientConnectionsMetrics}\n      connectionAttemptRateMetrics={connectionAttemptRateMetrics}\n      duration={duration}\n      backendUnavailable={isFailed}\n      isInitialLoading={isInitialLoading}\n      isLoading={isLoading}\n      isRefreshing={isRefreshing}\n      isJustCreated={isJustCreated}\n      lastUpdated={lastUpdated}\n      onRefresh={onRefresh}\n      onDurationChange={onDurationChange}\n      diskSpaceLimit={diskSpaceLimit || 0}\n      connectionsLimit={connectionsLimit || 0}\n      connectionRateLimit={connectionRateLimit || 0}\n      brokers={brokers}\n      selectedBroker={selectedBroker}\n      onSelectedBroker={onBrokerChange}\n      selectToggle={selectedToggle}\n      onSelectedToggle={onSelectToggle}\n      bytesPerPartitions={bytesPerPartitionMetrics}\n      onSelectedPartition={onSelectPartition}\n      selectedPartition={selectedPartition}\n    />\n  );\n};\n\ntype ConnectedTopicsMetricsProps = {\n  onCreateTopic: () => void;\n};\nconst ConnectedTopicsMetrics: VoidFunctionComponent<\n  ConnectedTopicsMetricsProps\n> = ({ onCreateTopic }) => {\n  const {\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n    lastUpdated,\n    selectedTopic,\n    duration,\n    topics,\n    bytesIncoming,\n    bytesOutgoing,\n    bytesPerPartition,\n    incomingMessageRate,\n    selectedPartition,\n    onDurationChange,\n    onTopicChange,\n    onRefresh,\n    onSelectPartition,\n  } = useTopicsMetrics();\n\n  return (\n    <CardTopicsMetrics\n      backendUnavailable={isFailed}\n      topics={topics}\n      incomingTopicsData={bytesIncoming}\n      outgoingTopicsData={bytesOutgoing}\n      partitions={bytesPerPartition}\n      incomingMessageRate={incomingMessageRate}\n      duration={duration}\n      isInitialLoading={isInitialLoading}\n      isLoading={isLoading}\n      isRefreshing={isRefreshing}\n      isJustCreated={isJustCreated}\n      lastUpdated={lastUpdated}\n      selectedTopic={selectedTopic}\n      onRefresh={onRefresh}\n      onSelectedTopic={onTopicChange}\n      onDurationChange={onDurationChange}\n      onCreateTopic={onCreateTopic}\n      onSelectedPartition={onSelectPartition}\n      selectedPartition={selectedPartition}\n    />\n  );\n};\n","import { useSelector } from \"@xstate/react\";\nimport { useCallback, useContext } from \"react\";\nimport type { MetricsKpiMachineContext } from \"./machines\";\nimport { MetricsKpiContext } from \"./MetricsKpiProvider\";\n\ntype SelectorReturn = MetricsKpiMachineContext & {\n  isInitialLoading: boolean;\n  isRefreshing: boolean;\n  isLoading: boolean;\n  isFailed: boolean;\n  isJustCreated: boolean;\n};\n\nexport function useMetricsKpi() {\n  const { service } = useContext(MetricsKpiContext);\n\n  const {\n    topics,\n    topicPartitions,\n    topicPartitionsLimit,\n    consumerGroups,\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n  } = useSelector<typeof service, SelectorReturn>(\n    service,\n    useCallback(\n      (state) => ({\n        ...state.context,\n        isInitialLoading: state.hasTag(\"initialLoading\"),\n        isRefreshing: state.hasTag(\"refreshing\"),\n        isLoading: state.hasTag(\"loading\"),\n        isFailed: state.hasTag(\"failed\"),\n        isJustCreated: state.hasTag(\"justCreated\"),\n      }),\n      []\n    )\n  );\n\n  const onRefresh = useCallback(() => service.send(\"refresh\"), [service]);\n\n  return {\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n    topics,\n    topicPartitions,\n    consumerGroups,\n    topicPartitionsLimit,\n    onRefresh,\n  };\n}\n","import {\n  Button,\n  Card,\n  CardBody,\n  Flex,\n  FlexItem,\n  Modal,\n  ModalVariant,\n  PageSection,\n  Spinner,\n  Stack,\n  StackItem,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { FunctionComponent } from \"react\";\nimport { useState } from \"react\";\nimport \"./Settings.css\";\nimport type { SettingsStatus } from \"./types\";\n\nexport type SettingsProps = {\n  onSubmitReAuthentication: (\n    reauthenticationEnabled: boolean\n  ) => Promise<boolean>;\n  reauthenticationEnabled: boolean;\n};\n\nexport const Settings: FunctionComponent<SettingsProps> = ({\n  onSubmitReAuthentication,\n  reauthenticationEnabled,\n}) => {\n  const { t } = useTranslation(\"kafka\");\n  //states\n  const [connectionStatus, setConnectionStatus] = useState<SettingsStatus>(\n    reauthenticationEnabled ? \"On\" : \"Off\"\n  );\n  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n\n  const onClose = () => {\n    setIsModalOpen(false);\n  };\n\n  const onChangeSwitch = (checked: boolean) => {\n    if (connectionStatus === \"On\") {\n      setIsModalOpen(true);\n    } else {\n      handleReAuthentication(checked);\n    }\n  };\n\n  const handleReAuthentication = (reAuthValue: boolean) => {\n    setConnectionStatus(reAuthValue ? \"TurningOn\" : \"TurningOff\");\n\n    onSubmitReAuthentication(reAuthValue)\n      .then((reauthentication) => {\n        setConnectionStatus(reauthentication ? \"On\" : \"Off\");\n      })\n      .catch(() => {\n        setConnectionStatus(!reAuthValue ? \"On\" : \"Off\");\n      });\n  };\n\n  const onTurnOff = () => {\n    setIsModalOpen(false);\n    handleReAuthentication(false);\n  };\n\n  return (\n    <PageSection isFilled={true} hasOverflowScroll={true} aria-label={\"TODO\"}>\n      <Stack hasGutter>\n        <StackItem>\n          <Card>\n            <CardBody>{t(\"settings.kafka_instance_settings_label\")}</CardBody>\n          </Card>\n        </StackItem>\n        <StackItem>\n          <Card className={\"mas--settings__card\"}>\n            <CardBody>\n              <Flex flexWrap={{ default: \"nowrap\" }}>\n                <FlexItem grow={{ default: \"grow\" }}>\n                  <Flex>\n                    <FlexItem\n                      component={\"span\"}\n                      spacer={{ default: \"spacerSm\" }}\n                    >\n                      <strong>\n                        {t(\"settings.connection_re_authentication_label\")}\n                        {\":\"}\n                      </strong>\n                    </FlexItem>\n                    <FlexItem>\n                      {(() => {\n                        switch (connectionStatus) {\n                          case \"On\":\n                            return t(\n                              \"settings.Connection_re_authentication_states.on\"\n                            );\n                          case \"TurningOff\":\n                            return (\n                              <>\n                                <Spinner\n                                  size=\"md\"\n                                  aria-valuetext={t(\n                                    \"settings.Connection_re_authentication_states.turning_off\"\n                                  )}\n                                  aria-label={t(\n                                    \"settings.connection_re_authentication_label\"\n                                  )}\n                                />{\" \"}\n                                {t(\n                                  \"settings.Connection_re_authentication_states.turning_off\"\n                                )}\n                              </>\n                            );\n                          case \"Off\":\n                            return t(\n                              \"settings.Connection_re_authentication_states.off\"\n                            );\n                          case \"TurningOn\":\n                            return (\n                              <>\n                                <Spinner\n                                  size=\"md\"\n                                  aria-valuetext={\n                                    \"settings.Connection_re_authentication_states.turning_on\"\n                                  }\n                                  aria-label={t(\n                                    \"settings.connection_re_authentication_label\"\n                                  )}\n                                />{\" \"}\n                                {t(\n                                  \"settings.Connection_re_authentication_states.turning_on\"\n                                )}\n                              </>\n                            );\n                          default:\n                            return null;\n                        }\n                      })()}\n                    </FlexItem>\n                  </Flex>\n                </FlexItem>\n                <FlexItem>\n                  <Switch\n                    id=\"Connection-re-authentication-switch\"\n                    aria-label={t(\n                      \"settings.connection_re_authentication_label\"\n                    )}\n                    isChecked={\n                      connectionStatus === \"On\" ||\n                      connectionStatus === \"TurningOff\"\n                    }\n                    isDisabled={\n                      connectionStatus === \"TurningOff\" ||\n                      connectionStatus === \"TurningOn\"\n                    }\n                    onChange={onChangeSwitch}\n                  />\n                </FlexItem>\n                <Modal\n                  variant={ModalVariant.small}\n                  isOpen={isModalOpen}\n                  title={t(\"settings.warning_title\")}\n                  titleIconVariant={\"warning\"}\n                  actions={[\n                    <Button\n                      key={\"confirm\"}\n                      variant=\"primary\"\n                      onClick={onTurnOff}\n                    >\n                      {t(\"settings.turn_off_button_label\")}\n                    </Button>,\n                    <Button key={\"cancel\"} variant=\"link\" onClick={onClose}>\n                      {t(\"common:cancel\")}\n                    </Button>,\n                  ]}\n                  onClose={onClose}\n                >\n                  {t(\"settings.warning_description\")}\n                </Modal>\n              </Flex>\n            </CardBody>\n          </Card>\n        </StackItem>\n      </Stack>\n    </PageSection>\n  );\n};\n","import type { CleanupPolicy } from \"ui-models/src/types\";\n\nexport type SelectOptions = {\n  key: string;\n  value: string;\n  isPlaceholder?: boolean;\n  isDisabled?: boolean;\n};\n\nexport const retentionTimeSelectOptions: SelectOptions[] = [\n  { key: \"days\", value: \"days\", isPlaceholder: true },\n  { key: \"hours\", value: \"hours\" },\n  { key: \"minutes\", value: \"minutes\" },\n  { key: \"seconds\", value: \"seconds\" },\n  { key: \"milliseconds\", value: \"milliseconds\" },\n];\n\nexport const retentionSizeSelectOptions: SelectOptions[] = [\n  { key: \"bytes\", value: \"bytes\", isPlaceholder: true },\n  { key: \"kibibytes\", value: \"kibibytes\" },\n  { key: \"mebibytes\", value: \"mebibytes\" },\n  { key: \"gibibytes\", value: \"gibibytes\" },\n  { key: \"tebibytes\", value: \"tebibytes\" },\n];\n\nexport type IDropdownOption = {\n  value?: string;\n  label?: string;\n  key?: string;\n  isDisabled?: boolean;\n};\n\nexport type TimeUnit =\n  | \"days\"\n  | \"hours\"\n  | \"minutes\"\n  | \"seconds\"\n  | \"milliseconds\"\n  | \"weeks\"\n  | \"unlimited\";\n\nexport type CustomSelect = {\n  unit: TimeUnit;\n  value: number;\n};\n\nexport type CustomRetentionSizeSelect = {\n  unit: CustomRetentionUnit;\n  value: number;\n};\n\nexport type CustomRetentionUnit =\n  | \"bytes\"\n  | \"kibibytes\"\n  | \"mebibytes\"\n  | \"gibibytes\"\n  | \"tebibytes\"\n  | \"unlimited\";\n\nexport type RadioSelectType = \"day\" | \"week\" | \"custom\" | \"unlimited\";\n\nexport type RetentionSizeRadioSelect = \"unlimited\" | \"custom\";\n\nexport type TopicForm = {\n  name: string;\n  partitions: number;\n  retentionTime: CustomSelect;\n  retentionSize: CustomRetentionSizeSelect;\n  cleanupPolicy: CleanupPolicy;\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport {\n  PageSection,\n  PageSectionVariants,\n  Title,\n  Switch,\n  Breadcrumb,\n  BreadcrumbItem,\n} from \"@patternfly/react-core\";\nimport { Link } from \"react-router-dom\";\n\nexport type CreateTopicHeadProps = {\n  showAllOptions: boolean;\n  kafkaName: string;\n  onShowAllOptions: (value: boolean) => void;\n  kafkaInstanceLink: string;\n  kafkaPageLink: string;\n};\n\nexport const CreateTopicHead: VoidFunctionComponent<CreateTopicHeadProps> = ({\n  showAllOptions,\n  onShowAllOptions,\n  kafkaName,\n  kafkaInstanceLink,\n  kafkaPageLink,\n}) => {\n  const { t } = useTranslation([\"common\", \"topic\"]);\n\n  const mainBreadcrumbs = (\n    <Breadcrumb ouiaId={\"breadcrumb\"}>\n      <BreadcrumbItem\n        render={() => (\n          <Link to={kafkaInstanceLink}>{t(\"common:kafka_instance\")}</Link>\n        )}\n      />\n      <BreadcrumbItem\n        render={() => <Link to={kafkaPageLink}>{kafkaName}</Link>}\n      />\n      <BreadcrumbItem isActive>{t(\"topic:create_topic\")}</BreadcrumbItem>\n    </Breadcrumb>\n  );\n  return (\n    <>\n      <section className=\"pf-c-page__main-breadcrumb\">\n        {mainBreadcrumbs}\n      </section>\n      <PageSection variant={PageSectionVariants.light}>\n        <Title headingLevel=\"h1\" size=\"2xl\">\n          {t(\"topic:create_topic\")}\n        </Title>\n        <br />\n        <Switch\n          ouiaId={\"toggle-switch-off\"}\n          id=\"id-show-all-options\"\n          label={t(\"topic:show_all_options\")}\n          labelOff={t(\"topic:show_all_options\")}\n          isChecked={showAllOptions}\n          onChange={onShowAllOptions}\n          className=\"create-topic-wizard\"\n        />\n      </PageSection>\n    </>\n  );\n};\n","import { Button, Modal } from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { Topic } from \"ui-models/src/models/topic\";\n\nexport type PartitionLimitWarningProps = {\n  topicData: Topic;\n  onSave: (topicData: Topic) => void;\n  isModalOpen: boolean;\n  setIsModalOpen: (value: boolean) => void;\n  isCreate: boolean;\n};\n\nexport const PartitionLimitWarning: React.FC<PartitionLimitWarningProps> = ({\n  topicData,\n  onSave,\n  isModalOpen,\n  setIsModalOpen,\n  isCreate,\n}) => {\n  const { t } = useTranslation([\"create-topic\"]);\n\n  const handleModalToggle = () => {\n    setIsModalOpen(false);\n  };\n  const onConfirm = () => {\n    setIsModalOpen(false);\n    onSave(topicData);\n  };\n  return (\n    <Modal\n      title={t(\"increase_partitions\")}\n      variant={\"small\"}\n      titleIconVariant=\"warning\"\n      aria-describedby=\"modal-title-icon-description\"\n      isOpen={isModalOpen}\n      onClose={handleModalToggle}\n      actions={[\n        <Button key=\"confirm\" variant=\"primary\" onClick={onConfirm}>\n          {t(\"common:yes\")}\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" onClick={handleModalToggle}>\n          {t(\"no_return\")}\n        </Button>,\n      ]}\n    >\n      {isCreate ? t(\"partition_warning_modal\") : t(\"partition_increase\")}\n    </Modal>\n  );\n};\n","import { FormGroup, Popover, TextInput } from \"@patternfly/react-core\";\nimport { HelpIcon } from \"@patternfly/react-icons\";\nimport type { FunctionComponent } from \"react\";\n\nexport interface TextWithLabelPopoverProps {\n  fieldId: string;\n  fieldLabel: string;\n  fieldValue?: string;\n  popoverHeader: string;\n  popoverBody: string;\n  btnAriaLabel: string;\n  showUnlimited?: boolean;\n}\n\nexport const TextWithLabelPopover: FunctionComponent<\n  TextWithLabelPopoverProps\n> = ({\n  fieldId,\n  fieldLabel,\n  btnAriaLabel,\n  fieldValue,\n  popoverBody,\n  popoverHeader,\n  showUnlimited,\n}) => {\n  let displayText = \"-\";\n\n  if (\n    showUnlimited === true &&\n    fieldValue !== undefined &&\n    parseInt(fieldValue) < 0\n  ) {\n    displayText = \"Unlimited\"; // TODO i18n\n  } else if (fieldValue) {\n    displayText = fieldValue;\n  }\n\n  return (\n    <FormGroup\n      fieldId={fieldId}\n      label={fieldLabel}\n      className=\"kafka-ui-form-group--readonly\"\n      labelIcon={\n        <Popover\n          headerContent={<div>{popoverHeader}</div>}\n          bodyContent={<div>{popoverBody}</div>}\n        >\n          <button\n            aria-label={btnAriaLabel}\n            onClick={(event) => event.preventDefault()}\n            className=\"pf-c-form__group-label-help\"\n          >\n            <HelpIcon noVerticalAlign />\n          </button>\n        </Popover>\n      }\n    >\n      <TextInput\n        readOnlyVariant={\"plain\"}\n        type=\"text\"\n        id={fieldId}\n        name={fieldId}\n        value={displayText}\n      />\n    </FormGroup>\n  );\n};\n","import {\n  FormSection,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport convert from \"convert\";\nimport type React from \"react\";\nimport { TextWithLabelPopover } from \"./TextWithLabelPopover\";\n\ntype CleanupProps = {\n  defaultLogSegmentSize: bigint;\n  defaultSegmentTime: bigint;\n  defaultSegmentJitterTime: bigint;\n  defaultFileDeleteDelay: bigint;\n};\n\nconst Cleanup: React.FC<CleanupProps> = ({\n  defaultFileDeleteDelay,\n  defaultLogSegmentSize,\n  defaultSegmentJitterTime,\n  defaultSegmentTime,\n}) => {\n  const { t } = useTranslation([\"create-topic\", \"common\"]);\n\n  return (\n    <FormSection title={t(\"cleanup\")} id=\"cleanup\" titleElement={\"h2\"}>\n      <TextContent>\n        <Text component={TextVariants.p} className=\"section-info\">\n          {t(\"cleanup_section_info\")}\n        </Text>\n      </TextContent>\n\n      <TextWithLabelPopover\n        fieldId=\"log-segment-size\"\n        btnAriaLabel={t(\"log_segment_size\")}\n        fieldLabel={t(\"log_segment_size\")}\n        fieldValue={t(\"bytes_to_gibibyte\", {\n          bytes: defaultLogSegmentSize,\n          gibibyte: convert(Number(defaultLogSegmentSize), \"bytes\").to(\n            \"gibibytes\"\n          ),\n        })}\n        popoverBody={t(\"log_segment_size\")}\n        popoverHeader={t(\"log_segment_size_description\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"segement-time\"\n        btnAriaLabel={t(\"segement_time\")}\n        fieldLabel={t(\"segement_time\")}\n        fieldValue={t(\"milliseconds_to_days\", {\n          milliseconds: defaultSegmentTime,\n          days: convert(Number(defaultSegmentTime), \"milliseconds\").to(\"days\"),\n        })}\n        popoverBody={t(\"segement_time_description\")}\n        popoverHeader={t(\"segement_time\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"segment-jitter-time\"\n        btnAriaLabel={t(\"segment_jitter_time\")}\n        fieldLabel={t(\"segment_jitter_time\")}\n        fieldValue={t(\"milliseconds_time\", { value: defaultSegmentJitterTime })}\n        popoverBody={t(\"segment_jitter_time_description\")}\n        popoverHeader={t(\"segment_jitter_time\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"file-delete-delay\"\n        btnAriaLabel={t(\"file_delete_delay\")}\n        fieldLabel={t(\"file_delete_delay\")}\n        fieldValue={t(\"milliseconds_to_minute\", {\n          milliseconds: defaultFileDeleteDelay,\n          minute: convert(Number(defaultFileDeleteDelay), \"milliseconds\").to(\n            \"minutes\"\n          ),\n        })}\n        popoverBody={t(\"file_delete_delay_description\")}\n        popoverHeader={t(\"file_delete_delay\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"preallocate-log-segment-files\"\n        btnAriaLabel={t(\"preallocate_log_segment_files\")}\n        fieldLabel={t(\"preallocate_log_segment_files\")}\n        fieldValue={t(\"common:disabled\")}\n        popoverBody={t(\"preallocate_log_segment_files_description\")}\n        popoverHeader={t(\"preallocate_log_segment_files\")}\n      />\n    </FormSection>\n  );\n};\n\nexport { Cleanup };\n","import type { SelectProps } from \"@patternfly/react-core\";\nimport { TextInput } from \"@patternfly/react-core\";\nimport {\n  Flex,\n  FlexItem,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport type React from \"react\";\nimport { useState } from \"react\";\nimport type { CustomSelect, TimeUnit, RadioSelectType } from \"./types\";\nimport { retentionTimeSelectOptions } from \"./types\";\n\nexport type CustomRetentionMessageProps = {\n  id?: string;\n  customTimeValue: CustomSelect;\n  setCustomTimeValue: (data: CustomSelect) => void;\n  setRadioTimeSelectValue?: (value: RadioSelectType) => void;\n};\n\nconst CustomRetentionMessage: React.FC<CustomRetentionMessageProps> = ({\n  customTimeValue,\n  setCustomTimeValue,\n  setRadioTimeSelectValue,\n}) => {\n  const [isRetentionTimeSelectOpen, setIsRetentionTimeSelectOpen] =\n    useState<boolean>(false);\n\n  const onRetentionTimeToggle = (isOpen: boolean) => {\n    setIsRetentionTimeSelectOpen(isOpen);\n  };\n\n  const onSelect: SelectProps[\"onSelect\"] = (event, value) => {\n    const inputUnit: CustomSelect = {\n      unit: value as TimeUnit,\n      value: 1,\n    };\n    setCustomTimeValue(inputUnit);\n\n    onRetentionTimeToggle(false);\n  };\n\n  const onChange = (input: string) => {\n    const inputValue: CustomSelect = {\n      ...customTimeValue,\n      value: Number(input),\n    };\n    if (inputValue.value > -1) setCustomTimeValue(inputValue);\n    setRadioTimeSelectValue && setRadioTimeSelectValue(\"custom\");\n  };\n\n  return (\n    <div className=\"kafka-ui--radio__parameters\">\n      <Flex>\n        <FlexItem>\n          <Select\n            variant={SelectVariant.single}\n            aria-label=\"Select Input\"\n            onToggle={onRetentionTimeToggle}\n            onSelect={(event, value) => onSelect(event, value as string)}\n            placeholder=\"days\"\n            selections={customTimeValue.unit}\n            isOpen={isRetentionTimeSelectOpen}\n          >\n            {retentionTimeSelectOptions?.map((s) => (\n              <SelectOption\n                key={s.key}\n                value={s.value}\n                isPlaceholder={s.isPlaceholder}\n              >\n                {s.value}\n              </SelectOption>\n            ))}\n          </Select>\n        </FlexItem>\n        <FlexItem>\n          <TextInput\n            aria-label={\"Retention time\"}\n            type=\"number\"\n            value={customTimeValue.value == 0 ? \"\" : customTimeValue.value}\n            onChange={onChange}\n            min={1}\n          />\n        </FlexItem>\n      </Flex>\n    </div>\n  );\n};\n\nexport { CustomRetentionMessage };\n","import type { SelectProps } from \"@patternfly/react-core\";\nimport { TextInput } from \"@patternfly/react-core\";\nimport {\n  Flex,\n  FlexItem,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport type React from \"react\";\nimport type {\n  CustomRetentionSizeSelect,\n  CustomRetentionUnit,\n  RetentionSizeRadioSelect,\n} from \"./types\";\nimport { retentionSizeSelectOptions } from \"./types\";\nimport { useState } from \"react\";\n\nexport type CustomRetentionSizeProps = {\n  id?: string;\n  customRetentionSizeValue: CustomRetentionSizeSelect;\n  setCustomRetentionSizeValue: (data: CustomRetentionSizeSelect) => void;\n  setRadioSizeSelectValue?: (value: RetentionSizeRadioSelect) => void;\n};\n\nconst CustomRetentionSize: React.FC<CustomRetentionSizeProps> = ({\n  customRetentionSizeValue,\n  setCustomRetentionSizeValue,\n  setRadioSizeSelectValue,\n}) => {\n  const [isRetentionSizeSelectOpen, setIsRetentionSizeSelectOpen] =\n    useState<boolean>(false);\n\n  const onRetentionSizeToggle = (isOpen: boolean) => {\n    setIsRetentionSizeSelectOpen(isOpen);\n  };\n\n  const onSelect: SelectProps[\"onSelect\"] = (event, value) => {\n    const inputUnit: CustomRetentionSizeSelect = {\n      unit: value as CustomRetentionUnit,\n      value: 1,\n    };\n    setCustomRetentionSizeValue(inputUnit);\n    onRetentionSizeToggle(false);\n  };\n\n  const onChange = (input: string) => {\n    const inputValue: CustomRetentionSizeSelect = {\n      ...customRetentionSizeValue,\n      value: Number(input),\n    };\n    if (inputValue.value > -1) setCustomRetentionSizeValue(inputValue);\n    setRadioSizeSelectValue && setRadioSizeSelectValue(\"custom\");\n  };\n  return (\n    <div className=\"kafka-ui--radio__parameters\">\n      <Flex>\n        <FlexItem>\n          <Select\n            variant={SelectVariant.single}\n            aria-label=\"Select Input\"\n            onToggle={onRetentionSizeToggle}\n            onSelect={onSelect}\n            selections={customRetentionSizeValue.unit}\n            isOpen={isRetentionSizeSelectOpen}\n          >\n            {retentionSizeSelectOptions?.map((s) => (\n              <SelectOption\n                key={s.key}\n                value={s.value}\n                isPlaceholder={s.isPlaceholder}\n              />\n            ))}\n          </Select>\n        </FlexItem>\n        <FlexItem>\n          <TextInput\n            aria-label=\"Retention size\"\n            type=\"number\"\n            value={\n              customRetentionSizeValue.value == 0\n                ? \"\"\n                : customRetentionSizeValue.value == -1\n                ? 1\n                : customRetentionSizeValue.value\n            }\n            onChange={onChange}\n            min={1}\n          />\n        </FlexItem>\n      </Flex>\n    </div>\n  );\n};\n\nexport { CustomRetentionSize };\n","import { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { useCallback } from \"react\";\n\nexport const useValidateTopic = (): {\n  validateName: (name: string) => string | undefined;\n} => {\n  const { t } = useTranslation([\"create-topic\"]);\n\n  return {\n    validateName: useCallback(\n      (name) => {\n        const legalNameChars = new RegExp(\"^[a-zA-Z0-9._-]+$\");\n        if (name.length && !legalNameChars.test(name)) {\n          return t(\"topic_name_helper_text\");\n        } else if (name.length > 249) {\n          return t(\"cannot_exceed_characters\");\n        } else if (name === \".\" || name === \"..\") {\n          return t(\"invalid_name_with_dot\");\n        }\n        return undefined;\n      },\n      [t]\n    ),\n  };\n};\n","import type { NumberInputProps } from \"@patternfly/react-core\";\nimport {\n  FormSection,\n  NumberInput,\n  Radio,\n  Stack,\n  Text,\n  TextContent,\n  TextInput,\n  TextVariants,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport {\n  FormGroupWithPopover,\n  useTranslation,\n} from \"@rhoas/app-services-ui-components\";\nimport type { FunctionComponent } from \"react\";\nimport { useState } from \"react\";\nimport { useCallback } from \"react\";\nimport type { Topic } from \"ui-models/src/models/topic\";\nimport { CustomRetentionMessage } from \"./CustomRetentionMessage\";\nimport { CustomRetentionSize } from \"./CustomRetentionSize\";\nimport { TextWithLabelPopover } from \"./TextWithLabelPopover\";\nimport type {\n  CustomRetentionSizeSelect,\n  CustomSelect,\n  RadioSelectType,\n  RetentionSizeRadioSelect,\n} from \"./types\";\nimport { useValidateTopic } from \"./useValidateTopic\";\n\nexport type CoreConfigurationProps = {\n  isCreate?: boolean;\n  topicData: Topic;\n  invalidText: string;\n  setInvalidText: (message: string) => void;\n  setTopicValidated: (error: ValidatedOptions) => void;\n  topicValidated: ValidatedOptions;\n  setWarning: (isWarning: boolean) => void;\n  warning: boolean;\n  availablePartitionLimit: number;\n  customRetentionSizeValue: CustomRetentionSizeSelect;\n  setCustomRetentionSizeValue: (data: CustomRetentionSizeSelect) => void;\n  customTimeValue: CustomSelect;\n  setCustomTimeValue: (data: CustomSelect) => void;\n  radioTimeSelectValue: RadioSelectType;\n  setRadioTimeSelectValue: (value: RadioSelectType) => void;\n  radioSizeSelectValue: RetentionSizeRadioSelect;\n  setRadioSizeSelectValue: (data: RetentionSizeRadioSelect) => void;\n  topicName: string;\n  setTopicName: (value: string) => void;\n  partitions: number;\n  setPartitions: (value: number) => void;\n};\n\nconst CoreConfiguration: FunctionComponent<CoreConfigurationProps> = ({\n  isCreate,\n  topicData,\n  invalidText,\n  setInvalidText,\n  setTopicValidated,\n  topicValidated,\n  availablePartitionLimit,\n  customTimeValue,\n  setCustomTimeValue,\n  radioTimeSelectValue,\n  setRadioTimeSelectValue,\n  setCustomRetentionSizeValue,\n  customRetentionSizeValue,\n  radioSizeSelectValue,\n  setRadioSizeSelectValue,\n  topicName,\n  setPartitions,\n  setTopicName,\n  partitions,\n}) => {\n  const { t } = useTranslation([\"create-topic\"]);\n  const [initialPartitions] = useState<number>(topicData.partitions.length);\n  const { validateName } = useValidateTopic();\n  const validationCheck = useCallback(\n    (value: string) => {\n      const errorMessage = validateName(value);\n      if (errorMessage) {\n        setInvalidText(errorMessage);\n        setTopicValidated(ValidatedOptions.error);\n      } else {\n        setTopicValidated(ValidatedOptions.default);\n      }\n    },\n    [setInvalidText, setTopicValidated, validateName]\n  );\n\n  const handleRetentionMessageTime = (value: RadioSelectType) => {\n    setRadioTimeSelectValue(value);\n  };\n\n  const handleRetentionMessageSize = (value: RetentionSizeRadioSelect) => {\n    setRadioSizeSelectValue(value);\n  };\n  const handleTextInputChange = (value: string) => {\n    validationCheck(value);\n    setTopicName(value);\n  };\n\n  const onPartitionsChange: NumberInputProps[\"onChange\"] = (event) => {\n    const partitionsValue = Number((event.target as HTMLInputElement).value);\n    if (partitionsValue > -1 && isCreate) setPartitions(partitionsValue);\n    if (!isCreate && partitionsValue >= initialPartitions)\n      setPartitions(partitionsValue);\n    if (!isCreate && partitionsValue <= initialPartitions)\n      setPartitions(initialPartitions);\n  };\n\n  const onBlur = () => {\n    if (partitions < 1) setPartitions(1);\n  };\n\n  const handleOnPlus = () => {\n    setPartitions(partitions + 1);\n  };\n\n  const handleOnMinus = () => {\n    setPartitions(partitions - 1);\n  };\n\n  const retentionTimeInput = (\n    <CustomRetentionMessage\n      customTimeValue={customTimeValue}\n      setCustomTimeValue={setCustomTimeValue}\n      setRadioTimeSelectValue={setRadioTimeSelectValue}\n    />\n  );\n\n  const retentionSizeInput = (\n    <CustomRetentionSize\n      customRetentionSizeValue={customRetentionSizeValue}\n      setCustomRetentionSizeValue={setCustomRetentionSizeValue}\n      setRadioSizeSelectValue={setRadioSizeSelectValue}\n    />\n  );\n\n  const partitionsHelperText =\n    isCreate && partitions >= availablePartitionLimit\n      ? t(\"partitions_warning\")\n      : !isCreate && partitions > initialPartitions\n      ? t(\"partition_increase_helper_text\")\n      : t(\"partition_helper_text\");\n  const partitionsValidated =\n    (isCreate && partitions >= availablePartitionLimit) ||\n    (!isCreate && partitions > initialPartitions)\n      ? \"warning\"\n      : \"default\";\n  return (\n    <FormSection\n      title={t(\"core_configuration\")}\n      id=\"core-configuration\"\n      titleElement={\"h2\"}\n    >\n      <TextContent>\n        <Text component={TextVariants.p} className=\"section-info\">\n          {t(\"core_config_info\")}\n        </Text>\n      </TextContent>\n      {isCreate ? (\n        <FormGroupWithPopover\n          labelHead={t(\"topic_name\")}\n          fieldId=\"create-topic-name\"\n          fieldLabel={t(\"topic_name\")}\n          labelBody={t(\"topic_name_description\")}\n          buttonAriaLabel=\"More info for topic name field\"\n          helperTextInvalid={invalidText}\n          validated={topicValidated}\n          isRequired={true}\n          helperText={t(\"topic_name_helper_text\")}\n        >\n          <TextInput\n            isRequired\n            type=\"text\"\n            id=\"create-topic-name\"\n            name=\"name\"\n            value={topicName}\n            onChange={handleTextInputChange}\n            label={t(\"topic_name\")}\n            placeholder={t(\"enter_name\")}\n            validated={topicValidated}\n          />\n        </FormGroupWithPopover>\n      ) : (\n        <TextWithLabelPopover\n          fieldId=\"topic-name\"\n          btnAriaLabel=\"topic detail name\"\n          fieldLabel=\"Name\"\n          fieldValue={topicData.name}\n          popoverBody={t(\"topic_name_description\")}\n          popoverHeader={t(\"topic_name\")}\n        />\n      )}\n\n      <FormGroupWithPopover\n        fieldId=\"create-topic-partitions\"\n        fieldLabel=\"Partitions\"\n        labelHead={t(\"partitions\")}\n        labelBody={t(\"partitions_description\")}\n        buttonAriaLabel=\"More info for partitions field\"\n        helperText={partitionsHelperText}\n        validated={partitionsValidated}\n      >\n        <NumberInput\n          id=\"create-topic-partitions\"\n          inputName=\"num-partitions\"\n          onChange={onPartitionsChange}\n          data-testid={t(\"partitions\")}\n          onPlus={handleOnPlus}\n          onMinus={handleOnMinus}\n          value={partitions == 0 ? \"\" : partitions}\n          plusBtnProps={{ name: \"num-partitions\" }}\n          minusBtnProps={{ name: \"num-partitions\" }}\n          min={isCreate ? 1 : initialPartitions}\n          onBlur={onBlur}\n        />\n      </FormGroupWithPopover>\n\n      {/*<TextWithLabelPopover\n        fieldId=\"replicas\"\n        btnAriaLabel={t(\"replicas\")}\n        fieldLabel={t(\"replicas\")}\n        popoverBody={t(\"replicas_description\")}\n        popoverHeader={t(\"replicas\")}\n      />*/}\n      <TextWithLabelPopover\n        fieldId=\"min-insync-replicas\"\n        btnAriaLabel=\"topic detail min-in-sync replica\"\n        fieldLabel=\"Minimum in-sync replicas\"\n        fieldValue={topicData[\"min.insync.replicas\"].toString()}\n        popoverBody={t(\"min_insync_replicas_description\")}\n        popoverHeader={t(\"min_insync_replicas\")}\n      />\n      <FormGroupWithPopover\n        fieldId=\"retention\"\n        fieldLabel=\"Retention time\"\n        labelHead={t(\"retention_time\")}\n        labelBody={t(\"retention_time_description\")}\n        buttonAriaLabel=\"More info for retention time field\"\n      >\n        <Stack hasGutter>\n          <Radio\n            isChecked={radioTimeSelectValue != \"unlimited\"}\n            name=\"custom-retention-time\"\n            onChange={() => handleRetentionMessageTime(\"custom\")}\n            label={retentionTimeInput}\n            className=\"kafka-ui--radio-label__number-input\"\n            aria-label=\"custom duration\"\n            id=\"custom-retention-time\"\n            value={radioTimeSelectValue}\n          />\n          <Radio\n            isChecked={radioTimeSelectValue === \"unlimited\"}\n            name=\"unlimited-retention-time\"\n            onChange={() => handleRetentionMessageTime(\"unlimited\")}\n            label=\"Unlimited time\"\n            aria-label=\"Unlimited\"\n            id=\"unlimited-retention-time\"\n            value={radioTimeSelectValue}\n          />\n        </Stack>\n      </FormGroupWithPopover>\n      <FormGroupWithPopover\n        fieldId=\"retention-size\"\n        fieldLabel=\"Retention size\"\n        labelHead={t(\"retention_size\")}\n        labelBody={t(\"retention_size_description\")}\n        buttonAriaLabel=\"More info for retention size field\"\n      >\n        <Stack hasGutter>\n          <Radio\n            isChecked={radioSizeSelectValue === \"custom\"}\n            name=\"custom-retention-size\"\n            onChange={() => handleRetentionMessageSize(\"custom\")}\n            label={retentionSizeInput}\n            className=\"kafka-ui--radio-label__number-input\"\n            aria-label=\"custom size\"\n            id=\"custom-retention-size\"\n            value={radioSizeSelectValue}\n          />\n          <Radio\n            isChecked={radioSizeSelectValue === \"unlimited\"}\n            name=\"unlimited-retention-size\"\n            onChange={() => handleRetentionMessageSize(\"unlimited\")}\n            label=\"Unlimited size\"\n            aria-label=\"Unlimited\"\n            id=\"unlimited-retention-size\"\n            value={radioSizeSelectValue}\n          />\n        </Stack>\n      </FormGroupWithPopover>\n    </FormSection>\n  );\n};\n\nexport { CoreConfiguration };\n","import {\n  FormSection,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type React from \"react\";\nimport { TextWithLabelPopover } from \"./TextWithLabelPopover\";\n\ntype FlushProps = {\n  defaultFlushIntervalMessages: bigint;\n  defaultFlushIntervalTime: bigint;\n};\n\nconst Flush: React.FC<FlushProps> = ({\n  defaultFlushIntervalMessages,\n  defaultFlushIntervalTime,\n}) => {\n  const { t } = useTranslation([\"create-topic\"]);\n\n  return (\n    <FormSection title={t(\"flush\")} id=\"flush\" titleElement={\"h2\"}>\n      <TextContent>\n        <Text component={TextVariants.p} className=\"section-info\">\n          {t(\"flush_section_info\")}\n        </Text>\n      </TextContent>\n\n      <TextWithLabelPopover\n        fieldId=\"flush-interval-messages\"\n        btnAriaLabel={t(\"flush_interval_messages\")}\n        fieldLabel={t(\"flush_interval_messages\")}\n        fieldValue={t(\"messages_time\", {\n          value: defaultFlushIntervalMessages,\n        })}\n        popoverBody={t(\"flush_interval_messages_description\")}\n        popoverHeader={t(\"flush_interval_messages\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"flush-interval-time\"\n        btnAriaLabel={t(\"flush_interval_time\")}\n        fieldLabel={t(\"flush_interval_time\")}\n        fieldValue={t(\"milliseconds_time\", { value: defaultFlushIntervalTime })}\n        popoverBody={t(\"flush_interval_time_description\")}\n        popoverHeader={t(\"flush_interval_time\")}\n      />\n    </FormSection>\n  );\n};\n\nexport { Flush };\n","import {\n  FormSection,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport {\n  DropdownWithToggle,\n  FormGroupWithPopover,\n  useTranslation,\n} from \"@rhoas/app-services-ui-components\";\nimport convert from \"convert\";\nimport type React from \"react\";\nimport type { Topic } from \"ui-models/src/models/topic\";\nimport { TextWithLabelPopover } from \"./TextWithLabelPopover\";\nimport type { IDropdownOption } from \"./types\";\nimport type { CleanupPolicy } from \"ui-models/src/types\";\n\nexport type LogProps = {\n  topicData: Topic;\n  defaultDeleteRetentionTime: bigint;\n  defaultMinCleanbleRatio: number;\n  defaultMinimumCompactionLagTime: bigint;\n  cleanupPolicy: CleanupPolicy;\n  setCleanupPolicy: (value: CleanupPolicy) => void;\n};\n\nconst Log: React.FC<LogProps> = ({\n  topicData,\n  defaultDeleteRetentionTime,\n  defaultMinCleanbleRatio,\n  defaultMinimumCompactionLagTime,\n  cleanupPolicy,\n  setCleanupPolicy,\n}) => {\n  const { t } = useTranslation([\"create-topic\", \"common\"]);\n\n  const cleanupPolicyOptions: IDropdownOption[] = [\n    {\n      key: \"compact\",\n      value: \"compact\",\n      label: t(\"compact\"),\n      isDisabled: false,\n    },\n    {\n      key: \"delete\",\n      value: \"delete\",\n      label: t(\"common:delete\"),\n      isDisabled: false,\n    },\n    {\n      key: \"delete, compact\",\n      value: \"compact,delete\",\n      label: `${t(\"compact\")},${t(\"common:delete\")}`,\n      isDisabled: false,\n    },\n  ];\n\n  const onSelectOption = (value: string) => {\n    setCleanupPolicy(value as CleanupPolicy);\n  };\n\n  return (\n    <FormSection title={t(\"log\")} id=\"log\" titleElement={\"h2\"}>\n      <TextContent>\n        <Text component={TextVariants.p}>{t(\"log_section_info\")}</Text>\n        <Text component={TextVariants.small}>{t(\"log_section_info_note\")}</Text>\n      </TextContent>\n\n      <FormGroupWithPopover\n        fieldId=\"cleanup-policy\"\n        fieldLabel={t(\"cleanup_policy\")}\n        labelHead={t(\"cleanup_policy\")}\n        labelBody={t(\"cleanup_policy_description\")}\n        buttonAriaLabel={t(\"cleanup_policy\")}\n      >\n        <DropdownWithToggle\n          id=\"log-section-policy-type-dropdown\"\n          toggleId=\"log-section-policy-type-dropdowntoggle\"\n          ariaLabel={t(\"select_policy\")}\n          onSelectOption={onSelectOption}\n          items={cleanupPolicyOptions}\n          name=\"cleanup-policy\"\n          value={cleanupPolicy}\n          isLabelAndValueNotSame={true}\n          key={topicData[\"cleanup.policy\"]}\n        />\n      </FormGroupWithPopover>\n\n      <TextWithLabelPopover\n        fieldId=\"delete-retention-time\"\n        btnAriaLabel={t(\"delete_retention_time\")}\n        fieldLabel={t(\"delete_retention_time\")}\n        fieldValue={t(\"milliseconds_time_to_day\", {\n          value: defaultDeleteRetentionTime,\n          days: convert(Number(defaultDeleteRetentionTime), \"milliseconds\").to(\n            \"days\"\n          ),\n        })}\n        popoverBody={t(\"delete_retention_time_description\")}\n        popoverHeader={t(\"delete_retention_time\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"min-cleanable-ratio\"\n        btnAriaLabel={t(\"min_cleanable_ratio\")}\n        fieldLabel={t(\"min_cleanable_ratio\")}\n        fieldValue={String(defaultMinCleanbleRatio)}\n        popoverBody={t(\"min_cleanable_ratio_description\")}\n        popoverHeader={t(\"min_cleanable_ratio\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"min-compaction-lag-time-description\"\n        btnAriaLabel={t(\"min_compaction_lag_time\")}\n        fieldLabel={t(\"min_compaction_lag_time\")}\n        fieldValue={t(\"milliseconds_time\", {\n          value: defaultMinimumCompactionLagTime,\n        })}\n        popoverBody={t(\"min_compaction_lag_time_description\")}\n        popoverHeader={t(\"min_compaction_lag_time\")}\n      />\n    </FormSection>\n  );\n};\n\nexport { Log };\n","import {\n  FormSection,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type React from \"react\";\nimport { TextWithLabelPopover } from \"./TextWithLabelPopover\";\n\ntype MessageProps = {\n  defaultMaximumMessageBytes: bigint;\n  defaultMessageTimestampType: string;\n  defaultMaxMessageTimestampDiff: bigint;\n};\n\nconst Message: React.FC<MessageProps> = ({\n  defaultMaximumMessageBytes,\n  defaultMessageTimestampType,\n  defaultMaxMessageTimestampDiff,\n}) => {\n  const { t } = useTranslation([\"create-topic\"]);\n\n  return (\n    <FormSection title={t(\"messages\")} id=\"messages\" titleElement={\"h2\"}>\n      <TextContent>\n        <Text component={TextVariants.p} className=\"section-info\">\n          {t(\"message_section_info\")}\n        </Text>\n      </TextContent>\n\n      <TextWithLabelPopover\n        fieldId=\"max-message-size\"\n        btnAriaLabel={t(\"max_message_size\")}\n        fieldLabel={t(\"max_message_size\")}\n        fieldValue={t(\"bytes_size\", { value: defaultMaximumMessageBytes })}\n        popoverBody={t(\"max_message_size_description\")}\n        popoverHeader={t(\"max_message_size\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"message-timestamp-type\"\n        btnAriaLabel={t(\"message_timestamp_type\")}\n        fieldLabel={t(\"message_timestamp_type\")}\n        fieldValue={String(defaultMessageTimestampType)}\n        popoverBody={t(\"message_timestamp_type_description\")}\n        popoverHeader={t(\"message_timestamp_type\")}\n      />\n      <TextWithLabelPopover\n        fieldId=\"max-message-timestamp-diff\"\n        btnAriaLabel={t(\"max_message_timestamp_diff\")}\n        fieldLabel={t(\"max_message_timestamp_diff\")}\n        fieldValue={t(\"milliseconds_time\", {\n          value: defaultMaxMessageTimestampDiff,\n        })}\n        popoverBody={t(\"max_message_timestamp_diff_description\")}\n        popoverHeader={t(\"max_message_timestamp_diff\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"compression-type\"\n        btnAriaLabel={t(\"compression_type\")}\n        fieldLabel={t(\"compression_type\")}\n        fieldValue={\"Producer\"}\n        popoverBody={t(\"compression_type_description\")}\n        popoverHeader={t(\"compression_type\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"message-format\"\n        btnAriaLabel={t(\"message_format\")}\n        fieldLabel={t(\"message_format\")}\n        fieldValue={\"2.7-IV2\"}\n        popoverBody={t(\"message_format_description\")}\n        popoverHeader={t(\"message_format\")}\n      />\n    </FormSection>\n  );\n};\n\nexport { Message };\n","import {\n  FormSection,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type React from \"react\";\nimport { TextWithLabelPopover } from \"./TextWithLabelPopover\";\n\nconst Replication: React.FC = () => {\n  const { t } = useTranslation([\"create-topic\", \"common\"]);\n\n  return (\n    <FormSection title={t(\"replication\")} id=\"replication\" titleElement={\"h2\"}>\n      <TextContent>\n        <Text component={TextVariants.p}>\n          {t(\"replication_section_info\")}\n          <Text component={TextVariants.small}>\n            {t(\"replication_section_info_note\")}\n          </Text>\n        </Text>\n      </TextContent>\n\n      <TextWithLabelPopover\n        fieldId=\"unclean-leader-election\"\n        btnAriaLabel={t(\"unclean_leader_election\")}\n        fieldLabel={t(\"unclean_leader_election\")}\n        fieldValue={t(\"common:disabled\")}\n        popoverBody={t(\"unclean_leader_election_description\")}\n        popoverHeader={t(\"unclean_leader_election\")}\n      />\n    </FormSection>\n  );\n};\n\nexport { Replication };\n","import {\n  FormSection,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport convert from \"convert\";\nimport type React from \"react\";\nimport { TextWithLabelPopover } from \"./TextWithLabelPopover\";\n\ntype TopicAdavanceIndexProps = {\n  defaultIndexIntervalSize: bigint;\n  defaultSegmentIndexSize: bigint;\n};\n\nconst TopicAdvanceIndex: React.FC<TopicAdavanceIndexProps> = ({\n  defaultIndexIntervalSize,\n  defaultSegmentIndexSize,\n}) => {\n  const { t } = useTranslation([\"create-topic\"]);\n\n  return (\n    <FormSection title={t(\"index\")} id=\"index\" titleElement={\"h2\"}>\n      <TextContent>\n        <Text component={TextVariants.p} className=\"section-info\">\n          {t(\"index_section_info\")}\n        </Text>\n      </TextContent>\n\n      <TextWithLabelPopover\n        fieldId=\"index-interval-size\"\n        btnAriaLabel={t(\"index_interval_size\")}\n        fieldLabel={t(\"index_interval_size\")}\n        fieldValue={t(\"bytes_to_kibibytes\", {\n          bytes: defaultIndexIntervalSize,\n          kibibytes: convert(Number(defaultIndexIntervalSize), \"bytes\").to(\n            \"kibibytes\"\n          ),\n        })}\n        popoverBody={t(\"index_interval_size_description\")}\n        popoverHeader={t(\"index_interval_size\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"segment-index-size\"\n        btnAriaLabel={t(\"segment_index_size\")}\n        fieldLabel={t(\"segment_index_size\")}\n        fieldValue={t(\"bytes_to_mebibytes\", {\n          bytes: defaultSegmentIndexSize,\n          mebibytes: convert(Number(defaultIndexIntervalSize), \"bytes\").to(\n            \"mebibytes\"\n          ),\n        })}\n        popoverBody={t(\"segment_index_size_description\")}\n        popoverHeader={t(\"segment_index_size\")}\n      />\n    </FormSection>\n  );\n};\n\nexport { TopicAdvanceIndex };\n","import { JumpLinks, JumpLinksItem, SidebarPanel } from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type React from \"react\";\n\nexport type TopicAdvanceJumpLinksProps = {\n  canHaveDelete?: boolean;\n};\nconst TopicAdvanceJumpLinks: React.FC<TopicAdvanceJumpLinksProps> = ({\n  canHaveDelete,\n}) => {\n  const { t } = useTranslation([\"create-topic\"]);\n\n  return (\n    <SidebarPanel variant=\"sticky\">\n      <JumpLinks\n        isVertical\n        label={t(\"jump_to_section\")}\n        scrollableSelector=\".topic-properties\"\n        style={{ position: \"sticky\" }}\n        // offset={-164} // for header\n      >\n        <JumpLinksItem key={0} href=\"#core-configuration\">\n          {t(\"core_configuration\")}\n        </JumpLinksItem>\n        <JumpLinksItem key={1} href=\"#messages\">\n          {t(\"messages\")}\n        </JumpLinksItem>\n        <JumpLinksItem key={2} href=\"#log\">\n          {t(\"log\")}\n        </JumpLinksItem>\n        <JumpLinksItem key={3} href=\"#replication\">\n          {t(\"replication\")}\n        </JumpLinksItem>\n        <JumpLinksItem key={4} href=\"#cleanup\">\n          {t(\"cleanup\")}\n        </JumpLinksItem>\n        <JumpLinksItem key={5} href=\"#index\">\n          {t(\"index\")}\n        </JumpLinksItem>\n        <JumpLinksItem key={6} href=\"#flush\">\n          {t(\"flush\")}\n        </JumpLinksItem>\n        {canHaveDelete ? (\n          <JumpLinksItem key={7} href=\"#delete\">\n            {t(\"delete\")}\n          </JumpLinksItem>\n        ) : (\n          <></>\n        )}\n      </JumpLinks>\n    </SidebarPanel>\n  );\n};\n\nexport { TopicAdvanceJumpLinks };\n","import {\n  ActionGroup,\n  Button,\n  Divider,\n  Form,\n  PageGroup,\n  PageSection,\n  Sidebar,\n  SidebarContent,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type React from \"react\";\nimport { useState } from \"react\";\nimport type { Topic } from \"ui-models/src/models/topic\";\nimport type {\n  CustomRetentionSizeSelect,\n  CustomSelect,\n  RadioSelectType,\n  RetentionSizeRadioSelect,\n} from \"./types\";\nimport { Cleanup } from \"./Cleanup\";\nimport { CoreConfiguration } from \"./CoreConfiguration\";\nimport { Flush } from \"./Flush\";\nimport { Log } from \"./Log\";\nimport { Message } from \"./Message\";\nimport { Replication } from \"./Replication\";\nimport { TopicAdvanceIndex } from \"./TopicAdvanceIndex\";\nimport { TopicAdvanceJumpLinks } from \"./TopicAdvanceJumpLinks\";\nimport type { CleanupPolicy } from \"ui-models/src/types\";\n\nexport type TopicAdvancePageProps = {\n  isCreate: boolean;\n  onConfirm: () => void;\n  handleCancel?: () => void;\n  topicData: Topic;\n  topicName: string;\n  onTopicNameChange: (value: string) => void;\n  partitions: number;\n  onPartitionsChange: (value: number) => void;\n  cleanupPolicy: CleanupPolicy;\n  onCleanupPolicyChange: (value: CleanupPolicy) => void;\n  checkTopicName?: (value: string) => boolean;\n  availablePartitionLimit: number;\n  customRetentionSizeValue: CustomRetentionSizeSelect;\n  setCustomRetentionSizeValue: (data: CustomRetentionSizeSelect) => void;\n  customTimeValue: CustomSelect;\n  setCustomTimeValue: (data: CustomSelect) => void;\n  radioTimeSelectValue: RadioSelectType;\n  setRadioTimeSelectValue: (value: RadioSelectType) => void;\n  radioSizeSelectValue: RetentionSizeRadioSelect;\n  setRadioSizeSelectValue: (data: RetentionSizeRadioSelect) => void;\n  isSaving: boolean;\n};\n\nexport const TopicAdvancePage: React.FunctionComponent<\n  TopicAdvancePageProps\n> = ({\n  isCreate,\n  onConfirm,\n  handleCancel,\n  topicName,\n  onCleanupPolicyChange,\n  onPartitionsChange,\n  onTopicNameChange,\n  topicData,\n  partitions,\n  cleanupPolicy,\n  checkTopicName,\n  availablePartitionLimit,\n  customTimeValue,\n  setCustomTimeValue,\n  radioTimeSelectValue,\n  setRadioTimeSelectValue,\n  setCustomRetentionSizeValue,\n  customRetentionSizeValue,\n  radioSizeSelectValue,\n  setRadioSizeSelectValue,\n  isSaving,\n}) => {\n  const { t } = useTranslation([\"create-topic\", \"common\"]);\n  const actionText = isCreate ? t(\"create_topic\") : t(\"common:save\");\n\n  //states\n\n  const [topicValidated, setTopicValidated] = useState<ValidatedOptions>(\n    ValidatedOptions.default\n  );\n  const [invalidText, setInvalidText] = useState(\"\");\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [warning, setWarning] = useState<boolean>(false);\n  const onValidateTopic = () => {\n    if (isCreate) {\n      if (topicName.length < 1) {\n        setInvalidText(t(\"common:required\"));\n        setTopicValidated(ValidatedOptions.error);\n      } else {\n        setIsLoading(true);\n\n        const isTopicNameValid = checkTopicName && checkTopicName(topicName);\n        if (!isTopicNameValid) {\n          setIsLoading(false);\n          setInvalidText(t(\"already_exists\", { name: topicName })),\n            setTopicValidated(ValidatedOptions.error);\n        } else {\n          onConfirm();\n          setIsLoading(false);\n        }\n      }\n    } else {\n      setIsLoading(false);\n      onConfirm();\n    }\n  };\n  return (\n    <PageSection padding={{ default: \"noPadding\" }}>\n      <Sidebar hasGutter>\n        <TopicAdvanceJumpLinks />\n        <SidebarContent>\n          <PageGroup\n            hasOverflowScroll={true}\n            id=\"topic-detail-view\"\n            aria-label={\"TODO\"}\n          >\n            <PageSection padding={{ default: \"noPadding\" }}>\n              <Form>\n                <CoreConfiguration\n                  isCreate={isCreate}\n                  topicData={topicData}\n                  topicName={topicName}\n                  setTopicName={onTopicNameChange}\n                  partitions={partitions}\n                  setPartitions={onPartitionsChange}\n                  availablePartitionLimit={availablePartitionLimit}\n                  invalidText={invalidText}\n                  setInvalidText={setInvalidText}\n                  setTopicValidated={setTopicValidated}\n                  topicValidated={topicValidated}\n                  setWarning={setWarning}\n                  warning={warning}\n                  customRetentionSizeValue={customRetentionSizeValue}\n                  setCustomRetentionSizeValue={setCustomRetentionSizeValue}\n                  customTimeValue={customTimeValue}\n                  setCustomTimeValue={setCustomTimeValue}\n                  radioTimeSelectValue={radioTimeSelectValue}\n                  setRadioTimeSelectValue={setRadioTimeSelectValue}\n                  radioSizeSelectValue={radioSizeSelectValue}\n                  setRadioSizeSelectValue={setRadioSizeSelectValue}\n                />\n                <Message\n                  defaultMaximumMessageBytes={\n                    topicData[\"max.message.bytes\"].value\n                  }\n                  defaultMessageTimestampType={\n                    topicData[\"message.timestamp.type\"]\n                  }\n                  defaultMaxMessageTimestampDiff={\n                    topicData[\"message.timestamp.difference.max.ms\"].value\n                  }\n                />\n                <Log\n                  topicData={topicData}\n                  defaultDeleteRetentionTime={\n                    topicData[\"delete.retention.ms\"].value\n                  }\n                  defaultMinCleanbleRatio={\n                    topicData[\"min.cleanable.dirty.ratio\"]\n                  }\n                  defaultMinimumCompactionLagTime={\n                    topicData[\"min.compaction.lag.ms\"].value\n                  }\n                  cleanupPolicy={cleanupPolicy}\n                  setCleanupPolicy={onCleanupPolicyChange}\n                />\n                <Replication />\n                <Cleanup\n                  defaultLogSegmentSize={topicData[\"segment.bytes\"].value}\n                  defaultSegmentTime={topicData[\"segment.ms\"].value}\n                  defaultSegmentJitterTime={\n                    topicData[\"segment.jitter.ms\"].value\n                  }\n                  defaultFileDeleteDelay={\n                    topicData[\"file.delete.delay.ms\"].value\n                  }\n                />\n                <TopicAdvanceIndex\n                  defaultIndexIntervalSize={\n                    topicData[\"index.interval.bytes\"].value\n                  }\n                  defaultSegmentIndexSize={\n                    topicData[\"segment.index.bytes\"].value\n                  }\n                />\n                <Flush\n                  defaultFlushIntervalMessages={\n                    topicData[\"flush.messages\"].value\n                  }\n                  defaultFlushIntervalTime={topicData[\"flush.ms\"].value}\n                />\n              </Form>\n\n              <ActionGroup className=\"kafka-ui--sticky-footer\">\n                <Divider className=\"kafka-ui--divider--FlexShrink\" />\n                <Button\n                  isLoading={isLoading}\n                  onClick={onValidateTopic}\n                  variant=\"primary\"\n                  data-testid={\n                    isCreate\n                      ? \"topicAdvanceCreate-actionCreate\"\n                      : \"tabProperties-actionSave\"\n                  }\n                  isDisabled={topicValidated !== \"default\" || isSaving}\n                >\n                  {actionText}\n                </Button>\n                <Button\n                  onClick={handleCancel}\n                  variant=\"link\"\n                  data-testid={\n                    isCreate\n                      ? \"topicAdvanceCreate-actionCancel\"\n                      : \"tabProperties-actionCancel\"\n                  }\n                  isDisabled={isSaving}\n                >\n                  {t(\"common:cancel\")}\n                </Button>\n              </ActionGroup>\n            </PageSection>\n          </PageGroup>\n        </SidebarContent>\n      </Sidebar>\n    </PageSection>\n  );\n};\n","import type { WizardStep } from \"@patternfly/react-core\";\nimport {\n  Divider,\n  PageSection,\n  PageSectionTypes,\n  PageSectionVariants,\n  ValidatedOptions,\n  Wizard,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type React from \"react\";\nimport { useState } from \"react\";\nimport type { Topic } from \"ui-models/src/models/topic\";\nimport type { IWizardFooter } from \"./index\";\nimport {\n  StepMessageRetention,\n  StepPartitions,\n  StepReplicas,\n  StepTopicName,\n  WizardCustomFooter,\n} from \"./index\";\nimport { PartitionLimitWarning } from \"./PartitionLimitWarning\";\nimport { TopicAdvancePage } from \"./TopicAdvancePage\";\nimport type {\n  CustomRetentionSizeSelect,\n  CustomSelect,\n  RadioSelectType,\n  RetentionSizeRadioSelect,\n  TopicForm,\n} from \"./types\";\nimport type { AZ } from \"ui-models/src/models/kafka\";\nimport type { CleanupPolicy } from \"ui-models/src/types\";\n\nexport type CreateTopicWizardProps = {\n  isSwitchChecked: boolean;\n  setIsCreateTopic?: (value: boolean) => void;\n  onCloseCreateTopic: () => void;\n  onSave: (topicData: TopicForm) => void;\n  topicData: Topic;\n  checkTopicName: (value: string) => boolean;\n  availablePartitionLimit: number;\n  availabilityZone: AZ;\n  isSaving: boolean;\n};\n\nexport const CreateTopicWizard: React.FC<CreateTopicWizardProps> = ({\n  isSwitchChecked,\n  onCloseCreateTopic,\n  onSave,\n  topicData,\n  checkTopicName,\n  availablePartitionLimit,\n  availabilityZone,\n  isSaving,\n}) => {\n  const { t } = useTranslation([\"create-topic\", \"common\"]);\n\n  const [customTimeValue, setCustomTimeValue] = useState<CustomSelect>({\n    unit: \"days\",\n    value: 7,\n  });\n\n  const [customRetentionSizeValue, setCustomRetentionSizeValue] =\n    useState<CustomRetentionSizeSelect>({ unit: \"bytes\", value: 1 });\n\n  const [topicName, setTopicName] = useState<string>(topicData.name);\n  const [cleanupPolicy, setCleanupPolicy] = useState<CleanupPolicy>(\n    topicData[\"cleanup.policy\"]\n  );\n  const [partitions, setPartitions] = useState<number>(\n    topicData.partitions.length\n  );\n  const [topicNameValidated, setTopicNameValidated] =\n    useState<ValidatedOptions>(ValidatedOptions.default);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [invalidText, setInvalidText] = useState<string>(\"\");\n  //const [topicData] = useState<Topic>(initialFieldsValue);\n  const [warningModalOpen, setWarningModalOpen] = useState<boolean>(false);\n  const [radioTimeSelectValue, setRadioTimeSelectValue] =\n    useState<RadioSelectType>(\"week\");\n\n  const [radioSizeSelectValue, setRadioSizeSelectValue] =\n    useState<RetentionSizeRadioSelect>(\"unlimited\");\n\n  const closeWizard = () => {\n    onCloseCreateTopic && onCloseCreateTopic();\n  };\n\n  const trimmedTopicName = topicName.trim() !== \"\";\n\n  const steps: WizardStep[] = [\n    {\n      name: t(\"topic_name\"),\n      enableNext:\n        trimmedTopicName && topicNameValidated === ValidatedOptions.default,\n      component: (\n        <StepTopicName\n          topicName={topicName}\n          onTopicNameChange={setTopicName}\n          topicNameValidated={topicNameValidated}\n          onValidationCheck={setTopicNameValidated}\n          invalidText={invalidText}\n          setInvalidText={setInvalidText}\n        />\n      ),\n      isDisabled: isSaving,\n    },\n    {\n      name: t(\"partitions\"),\n      canJumpTo: trimmedTopicName,\n      component: (\n        <StepPartitions\n          partitions={partitions}\n          onPartitionsChange={setPartitions}\n          availablePartitionLimit={availablePartitionLimit}\n        />\n      ),\n      isDisabled: isSaving,\n    },\n    {\n      name: t(\"message_retention\"),\n      canJumpTo: trimmedTopicName,\n      component: (\n        <StepMessageRetention\n          customRetentionSizeValue={customRetentionSizeValue}\n          setCustomRetentionSizeValue={setCustomRetentionSizeValue}\n          customTimeValue={customTimeValue}\n          setCustomTimeValue={setCustomTimeValue}\n          radioTimeSelectValue={radioTimeSelectValue}\n          setRadioTimeSelectValue={setRadioTimeSelectValue}\n          radioSizeSelectValue={radioSizeSelectValue}\n          setRadioSizeSelectValue={setRadioSizeSelectValue}\n        />\n      ),\n      isDisabled: isSaving,\n    },\n    {\n      name: t(\"replicas\"),\n      canJumpTo: trimmedTopicName,\n      component: (\n        <StepReplicas\n          minInSyncReplica={topicData[\"min.insync.replicas\"]}\n          availabilityZone={availabilityZone}\n        />\n      ),\n      nextButtonText: t(\"finish\"),\n      isDisabled: isSaving,\n    },\n  ];\n\n  const title = t(\"wizard_title\");\n\n  const onTransform = () => {\n    const topicValues: TopicForm = {\n      name: topicName,\n      partitions: partitions,\n      retentionTime:\n        radioTimeSelectValue == \"unlimited\"\n          ? { value: -1, unit: \"unlimited\" }\n          : customTimeValue,\n      retentionSize:\n        radioSizeSelectValue == \"unlimited\"\n          ? { value: -1, unit: \"unlimited\" }\n          : customRetentionSizeValue,\n      cleanupPolicy: cleanupPolicy,\n    };\n\n    onSave(topicValues);\n  };\n\n  const onConfirmSave = () => {\n    if (partitions >= availablePartitionLimit) setWarningModalOpen(true);\n    else onTransform();\n  };\n\n  const onValidate: IWizardFooter[\"onValidate\"] = (onNext) => {\n    if (topicName.length < 1) {\n      setInvalidText(t(\"common:required\"));\n      setTopicNameValidated(ValidatedOptions.error);\n    } else {\n      setIsLoading(true);\n\n      const isTopicNameValid = checkTopicName(topicName);\n      if (!isTopicNameValid) {\n        setIsLoading(false);\n        setInvalidText(t(\"already_exists\", { name: topicName })),\n          setTopicNameValidated(ValidatedOptions.error);\n      } else onNext();\n    }\n  };\n\n  return (\n    <>\n      {isSwitchChecked ? (\n        <>\n          <Divider className=\"kafka-ui--divider--FlexShrink\" />\n          <PageSection\n            variant={PageSectionVariants.light}\n            className={\"topic-properties\"}\n            hasOverflowScroll={true}\n            aria-label={\"TODO\"}\n          >\n            {\n              <TopicAdvancePage\n                isCreate={true}\n                onConfirm={onConfirmSave}\n                handleCancel={onCloseCreateTopic}\n                topicName={topicName}\n                onTopicNameChange={setTopicName}\n                partitions={partitions}\n                onPartitionsChange={setPartitions}\n                onCleanupPolicyChange={setCleanupPolicy}\n                cleanupPolicy={cleanupPolicy}\n                checkTopicName={checkTopicName}\n                availablePartitionLimit={availablePartitionLimit}\n                customRetentionSizeValue={customRetentionSizeValue}\n                setCustomRetentionSizeValue={setCustomRetentionSizeValue}\n                customTimeValue={customTimeValue}\n                setCustomTimeValue={setCustomTimeValue}\n                radioTimeSelectValue={radioTimeSelectValue}\n                setRadioTimeSelectValue={setRadioTimeSelectValue}\n                radioSizeSelectValue={radioSizeSelectValue}\n                setRadioSizeSelectValue={setRadioSizeSelectValue}\n                topicData={topicData}\n                isSaving={isSaving}\n              />\n            }\n            {warningModalOpen && (\n              <PartitionLimitWarning\n                topicData={topicData}\n                onSave={onTransform}\n                isModalOpen={warningModalOpen}\n                setIsModalOpen={setWarningModalOpen}\n                isCreate={true}\n              />\n            )}\n          </PageSection>\n        </>\n      ) : (\n        <PageSection\n          variant={PageSectionVariants.light}\n          type={PageSectionTypes.wizard}\n          hasOverflowScroll={true}\n          aria-label={\"TODO\"}\n        >\n          <Wizard\n            navAriaLabel={`${title} steps`}\n            mainAriaLabel={`${title} content`}\n            steps={steps}\n            onClose={closeWizard}\n            onSave={onConfirmSave}\n            data-testid=\"topicBasicCreate-Wizard\"\n            footer={\n              <WizardCustomFooter\n                isLoading={isLoading}\n                onValidate={onValidate}\n                topicNameValidated={topicNameValidated}\n                closeWizard={closeWizard}\n                isSaving={isSaving}\n              />\n            }\n          />\n          {warningModalOpen && (\n            <PartitionLimitWarning\n              topicData={topicData}\n              onSave={onTransform}\n              isModalOpen={warningModalOpen}\n              setIsModalOpen={setWarningModalOpen}\n              isCreate={true}\n            />\n          )}\n        </PageSection>\n      )}\n    </>\n  );\n};\n","import {\n  Form,\n  FormGroup,\n  FormSection,\n  Radio,\n  Stack,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type React from \"react\";\nimport { CustomRetentionMessage } from \"./CustomRetentionMessage\";\nimport { CustomRetentionSize } from \"./CustomRetentionSize\";\nimport type {\n  CustomRetentionSizeSelect,\n  CustomSelect,\n  RadioSelectType,\n  RetentionSizeRadioSelect,\n} from \"./types\";\n\nexport type StepMessageRetentionProps = {\n  customRetentionSizeValue: CustomRetentionSizeSelect;\n  setCustomRetentionSizeValue: (data: CustomRetentionSizeSelect) => void;\n  customTimeValue: CustomSelect;\n  setCustomTimeValue: (data: CustomSelect) => void;\n  radioTimeSelectValue: RadioSelectType;\n  setRadioTimeSelectValue: (value: RadioSelectType) => void;\n  radioSizeSelectValue: RetentionSizeRadioSelect;\n  setRadioSizeSelectValue: (data: RetentionSizeRadioSelect) => void;\n};\n\nexport const StepMessageRetention: React.FC<StepMessageRetentionProps> = ({\n  customTimeValue,\n  setCustomTimeValue,\n  radioTimeSelectValue,\n  setRadioTimeSelectValue,\n  setCustomRetentionSizeValue,\n  customRetentionSizeValue,\n  radioSizeSelectValue,\n  setRadioSizeSelectValue,\n}) => {\n  const { t } = useTranslation([\"create-topic\"]);\n\n  const handleRetentionMessageSize = (value: RetentionSizeRadioSelect) => {\n    setRadioSizeSelectValue(value);\n  };\n\n  const retentionTime = (value: RadioSelectType) => {\n    switch (value) {\n      case \"day\":\n        setCustomTimeValue({ value: 1, unit: \"days\" });\n        break;\n      case \"week\":\n        setCustomTimeValue({ value: 1, unit: \"weeks\" });\n        break;\n      case \"custom\":\n        //setCustomTimeValue({ value: 7, unit: \"days\" });\n        break;\n    }\n    setRadioTimeSelectValue(value);\n  };\n\n  return (\n    <>\n      <Form onSubmit={(event) => event.preventDefault()}>\n        <FormSection\n          title={t(\"message_retention\")}\n          id=\"message-retention\"\n          titleElement={\"h2\"}\n        >\n          <TextContent>\n            <Text component={TextVariants.p}>\n              {t(\"message_retention_info\")}\n            </Text>\n            <Text component={TextVariants.small}>\n              {t(\"message_retention_info_note\")}\n            </Text>\n          </TextContent>\n\n          <FormGroup\n            fieldId=\"form-group-retention-time-in-wizard\"\n            label={t(\"retention_time\")}\n            isRequired\n          >\n            <Stack hasGutter>\n              <Radio\n                isChecked={radioTimeSelectValue === \"day\"}\n                name=\"radioDay\"\n                onChange={() => retentionTime(\"day\")}\n                label=\"A day\"\n                aria-label=\"A day\"\n                id=\"radio-controlled-1\"\n                value={radioTimeSelectValue}\n              />\n              <Radio\n                isChecked={radioTimeSelectValue === \"week\"}\n                name=\"radioWeek\"\n                onChange={() => retentionTime(\"week\")}\n                label=\"A week\"\n                aria-label=\"A week\"\n                id=\"radio-controlled-2\"\n                value={radioTimeSelectValue}\n              />\n              <Radio\n                isChecked={radioTimeSelectValue === \"custom\"}\n                name=\"radioCustomTime\"\n                onChange={() => retentionTime(\"custom\")}\n                label=\"Custom duration\"\n                aria-label=\"custom input\"\n                id=\"radio-controlled-4\"\n                value={radioTimeSelectValue}\n              />\n              {radioTimeSelectValue === \"custom\" && (\n                <CustomRetentionMessage\n                  customTimeValue={customTimeValue}\n                  setCustomTimeValue={setCustomTimeValue}\n                />\n              )}\n              <Radio\n                isChecked={radioTimeSelectValue === \"unlimited\"}\n                name=\"radioUnlimitedTime\"\n                onChange={() => retentionTime(\"unlimited\")}\n                label=\"Unlimited time\"\n                aria-label=\"Unlimited\"\n                id=\"radio-controlled-3\"\n                value={radioTimeSelectValue}\n              />\n            </Stack>\n          </FormGroup>\n          <FormGroup\n            fieldId=\"form-group-retention-size-in-wizard\"\n            label=\"Retention size\"\n          >\n            <Stack hasGutter>\n              <Radio\n                isChecked={radioSizeSelectValue === \"unlimited\"}\n                name=\"radioUnlimitedSize\"\n                onChange={() => handleRetentionMessageSize(\"unlimited\")}\n                label=\"Unlimited size\"\n                aria-label=\"Unlimited\"\n                id=\"radio-controlled-6\"\n                value={radioSizeSelectValue}\n              />\n              <Radio\n                isChecked={radioSizeSelectValue === \"custom\"}\n                name=\"radioCustomSize\"\n                onChange={() => handleRetentionMessageSize(\"custom\")}\n                label=\"Custom size\"\n                aria-label=\"custom size\"\n                id=\"radio-controlled-5\"\n                value={radioSizeSelectValue}\n              />\n              {radioSizeSelectValue === \"custom\" && (\n                <CustomRetentionSize\n                  customRetentionSizeValue={customRetentionSizeValue}\n                  setCustomRetentionSizeValue={setCustomRetentionSizeValue}\n                />\n              )}\n            </Stack>\n          </FormGroup>\n        </FormSection>\n      </Form>\n    </>\n  );\n};\n","import type { NumberInputProps } from \"@patternfly/react-core\";\nimport {\n  Form,\n  FormGroup,\n  FormSection,\n  NumberInput,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type React from \"react\";\n\nexport type StepPartitionsProps = {\n  partitions: number;\n  onPartitionsChange: (value: number) => void;\n  availablePartitionLimit: number;\n};\n\nexport const StepPartitions: React.FC<StepPartitionsProps> = ({\n  partitions,\n  onPartitionsChange,\n  availablePartitionLimit,\n}) => {\n  const { t } = useTranslation([\"create-topic\"]);\n\n  const handleOnPlus = () => {\n    onPartitionsChange(partitions + 1);\n  };\n\n  const handleOnMinus = () => {\n    onPartitionsChange(partitions - 1);\n  };\n\n  const handlePartitionTouchspinChange: NumberInputProps[\"onChange\"] = (\n    event\n  ) => {\n    const newPartitionCount = Number((event.target as HTMLInputElement).value);\n    if (newPartitionCount > -1) onPartitionsChange(newPartitionCount);\n  };\n\n  const onBlur = () => {\n    if (partitions < 1) onPartitionsChange(1);\n  };\n\n  return (\n    <Form>\n      <FormSection title={t(\"partitions\")} id=\"partitions\" titleElement={\"h2\"}>\n        <TextContent>\n          <Text component={TextVariants.p}>{t(\"partition_info\")}</Text>\n          <Text component={TextVariants.small}>{t(\"partition_info_note\")}</Text>\n        </TextContent>\n\n        <FormGroup\n          label=\"Partitions\"\n          fieldId=\"step-topic-name-form\"\n          helperText={\n            partitions >= availablePartitionLimit\n              ? t(\"partitions_warning\")\n              : t(\"partition_helper_text\")\n          }\n          validated={\n            partitions >= availablePartitionLimit ? \"warning\" : \"default\"\n          }\n          isRequired\n        >\n          <NumberInput\n            onPlus={handleOnPlus}\n            onMinus={handleOnMinus}\n            value={partitions == 0 ? \"\" : partitions}\n            inputName=\"input\"\n            onChange={handlePartitionTouchspinChange}\n            widthChars={20}\n            min={1}\n            onBlur={onBlur}\n          />\n        </FormGroup>\n      </FormSection>\n    </Form>\n  );\n};\n","import {\n  Alert,\n  Form,\n  FormSection,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type React from \"react\";\nimport type { AZ } from \"ui-models/src/models/kafka\";\nimport { TextWithLabelPopover } from \"./TextWithLabelPopover\";\n\nexport type StepReplicasProps = {\n  //replicationFactor: number;\n  minInSyncReplica: number;\n  availabilityZone: AZ;\n};\n\nexport const StepReplicas: React.FC<StepReplicasProps> = ({\n  minInSyncReplica,\n  availabilityZone,\n}) => {\n  const { t } = useTranslation([\"create-topic\"]);\n\n  return (\n    <Form>\n      <FormSection\n        title={t(\"replicas\")}\n        id=\"replica-section\"\n        titleElement={\"h2\"}\n      >\n        <TextContent>\n          <Text component={TextVariants.p}>{t(\"replicas_info\")}</Text>\n          <Text component={TextVariants.small}>{t(\"replicas_detail\")}</Text>\n        </TextContent>\n        <Alert\n          variant=\"info\"\n          isInline\n          title={\n            availabilityZone == \"multi\"\n              ? t(\"replicas_helper_text_multi_az\")\n              : t(\"replicas_helper_text_single_az\")\n          }\n        />\n\n        {/*<TextWithLabelPopover\n          fieldId=\"replicas\"\n          btnAriaLabel={t(\"replicas\")}\n          fieldLabel={t(\"replicas\")}\n          popoverBody={t(\"replicas_description\")}\n          popoverHeader={t(\"replicas\")}\n        />*/}\n\n        <TextWithLabelPopover\n          fieldId=\"min-insync-replicas\"\n          btnAriaLabel=\"topic detail min-in-sync replica\"\n          fieldLabel=\"Minimum in-sync replicas\"\n          fieldValue={minInSyncReplica.toString()}\n          popoverBody={t(\"min_insync_replicas_description\")}\n          popoverHeader={t(\"min_insync_replicas\")}\n        />\n      </FormSection>\n    </Form>\n  );\n};\n","import {\n  Form,\n  FormGroup,\n  FormSection,\n  Text,\n  TextContent,\n  TextInput,\n  TextVariants,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type React from \"react\";\nimport { useCallback, useEffect } from \"react\";\nimport { useValidateTopic } from \"./useValidateTopic\";\n\nexport type StepTopicNameProps = {\n  topicName: string;\n  onTopicNameChange: (value: string) => void;\n  topicNameValidated: ValidatedOptions;\n  onValidationCheck: (value: ValidatedOptions) => void;\n  invalidText: string;\n  setInvalidText: (value: string) => void;\n};\n\nexport const StepTopicName: React.FC<StepTopicNameProps> = ({\n  topicName,\n  onTopicNameChange,\n  topicNameValidated,\n  onValidationCheck,\n  invalidText,\n  setInvalidText,\n}) => {\n  const { t } = useTranslation([\"create-topic\"]);\n  const { validateName } = useValidateTopic();\n\n  const validationCheck = useCallback(\n    (inputValue: string) => {\n      const errorMessage = validateName(inputValue);\n      if (errorMessage) {\n        setInvalidText(errorMessage);\n        onValidationCheck(ValidatedOptions.error);\n      } else {\n        onValidationCheck(ValidatedOptions.default);\n      }\n    },\n    [setInvalidText, onValidationCheck, validateName]\n  );\n\n  useEffect(() => {\n    validationCheck(topicName);\n  }, [topicName, validationCheck]);\n\n  const handleTopicNameChange = (value: string) => {\n    validationCheck(value);\n    onTopicNameChange(value);\n  };\n\n  return (\n    <Form onSubmit={(event) => event.preventDefault()}>\n      <FormSection title={t(\"topic_name\")} id=\"topic-name\" titleElement={\"h2\"}>\n        <TextContent>\n          <Text component={TextVariants.p}>{t(\"topic_name_info\")}</Text>\n          <Text component={TextVariants.small}>\n            {t(\"topic_name_info_note\")}\n          </Text>\n        </TextContent>\n        <FormGroup\n          label={t(\"topic_name\")}\n          fieldId=\"step-topic-name-form\"\n          helperText={t(\"topic_name_helper_text\")}\n          helperTextInvalid={invalidText}\n          validated={topicNameValidated}\n          isRequired\n        >\n          <TextInput\n            ouiaId={\"text-input\"}\n            isRequired\n            type=\"text\"\n            id=\"step-topic-name-input\"\n            name=\"step-topic-name\"\n            value={topicName}\n            onChange={handleTopicNameChange}\n            placeholder={t(\"enter_name\")}\n            validated={topicNameValidated}\n          />\n        </FormGroup>\n      </FormSection>\n    </Form>\n  );\n};\n","import type React from \"react\";\nimport {\n  WizardContextConsumer,\n  Button,\n  WizardFooter,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport interface IWizardFooter {\n  isLoading: boolean;\n  onValidate: (value: () => void) => void;\n  topicNameValidated: ValidatedOptions;\n  closeWizard: () => void;\n  isSaving: boolean;\n}\n\nexport const WizardCustomFooter: React.FC<IWizardFooter> = ({\n  isLoading,\n  onValidate,\n  closeWizard,\n  topicNameValidated,\n  isSaving,\n}) => {\n  const { t } = useTranslation([\"create-topic\", \"common\"]);\n\n  return (\n    <WizardFooter>\n      <WizardContextConsumer>\n        {({ activeStep, onNext, onBack }) => {\n          if (activeStep.name == t(\"topic_name\")) {\n            return (\n              <>\n                <Button\n                  variant=\"primary\"\n                  type=\"submit\"\n                  isLoading={isLoading}\n                  onClick={() => onValidate(onNext)}\n                  isDisabled={\n                    topicNameValidated == ValidatedOptions.default\n                      ? false\n                      : true\n                  }\n                  ouiaId={\"button-next\"}\n                >\n                  {t(\"common:next\")}\n                </Button>\n                <Button\n                  ouiaId={\"button-back\"}\n                  variant=\"secondary\"\n                  isDisabled={true}\n                >\n                  {t(\"common:back\")}\n                </Button>\n                <Button\n                  ouiaId={\"button-cancel\"}\n                  variant=\"link\"\n                  onClick={closeWizard}\n                >\n                  {t(\"common:cancel\")}\n                </Button>\n              </>\n            );\n          }\n\n          if (activeStep.name == \"Replicas\") {\n            return (\n              <>\n                <Button\n                  variant=\"primary\"\n                  type=\"submit\"\n                  onClick={onNext}\n                  ouiaId={\"button-finish\"}\n                  isDisabled={isSaving}\n                >\n                  {t(\"common:finish\")}\n                </Button>\n                <Button\n                  ouiaId={\"button-back\"}\n                  variant=\"secondary\"\n                  onClick={onBack}\n                  isDisabled={isSaving}\n                >\n                  {t(\"common:back\")}\n                </Button>\n                <Button\n                  ouiaId={\"button-cancel\"}\n                  variant=\"link\"\n                  onClick={closeWizard}\n                  isDisabled={isSaving}\n                >\n                  {t(\"common:cancel\")}\n                </Button>\n              </>\n            );\n          }\n          return (\n            <>\n              <Button\n                ouiaId={\"button-next\"}\n                variant=\"primary\"\n                type=\"submit\"\n                onClick={onNext}\n              >\n                {t(\"common:next\")}\n              </Button>\n              <Button\n                ouiaId={\"button-back\"}\n                variant=\"secondary\"\n                onClick={onBack}\n              >\n                {t(\"common:back\")}\n              </Button>\n              <Button\n                ouiaId={\"button-cancel\"}\n                variant=\"link\"\n                onClick={closeWizard}\n              >\n                {t(\"common:cancel\")}\n              </Button>\n            </>\n          );\n        }}\n      </WizardContextConsumer>\n    </WizardFooter>\n  );\n};\n","import type React from \"react\";\nimport { useState } from \"react\";\nimport type { AZ } from \"ui-models/src/models/kafka\";\nimport type { Topic } from \"ui-models/src/models/topic\";\nimport { CreateTopicHead, CreateTopicWizard } from \"../components\";\nimport type { TopicForm } from \"../components/types\";\n\nexport type CreateTopicPageProps = {\n  kafkaName: string;\n  kafkaPageLink: string;\n  kafkaInstanceLink: string;\n  onSave: (topicData: TopicForm) => void;\n  initialTopicValues: Topic;\n  onCloseCreateTopic: () => void;\n  checkTopicName: (value: string) => boolean;\n  availablePartitionLimit: number;\n  availabilityZone: AZ;\n  isSaving: boolean;\n};\n\nexport const CreateTopic: React.FC<CreateTopicPageProps> = ({\n  kafkaName,\n  kafkaPageLink,\n  kafkaInstanceLink,\n  onSave,\n  initialTopicValues,\n  onCloseCreateTopic,\n  checkTopicName,\n  availablePartitionLimit,\n  availabilityZone,\n  isSaving,\n}) => {\n  const [isSwitchChecked, setIsSwitchChecked] = useState<boolean>(false);\n\n  return (\n    <>\n      <CreateTopicHead\n        showAllOptions={isSwitchChecked}\n        kafkaName={kafkaName}\n        kafkaInstanceLink={kafkaInstanceLink}\n        kafkaPageLink={kafkaPageLink}\n        onShowAllOptions={setIsSwitchChecked}\n      />\n      <CreateTopicWizard\n        isSwitchChecked={isSwitchChecked}\n        onCloseCreateTopic={onCloseCreateTopic}\n        onSave={onSave}\n        topicData={initialTopicValues}\n        checkTopicName={checkTopicName}\n        availablePartitionLimit={availablePartitionLimit}\n        availabilityZone={availabilityZone}\n        isSaving={isSaving}\n      />\n    </>\n  );\n};\n","import { PageSection } from \"@patternfly/react-core\";\nimport type { FunctionComponent } from \"react\";\nimport { useState } from \"react\";\nimport type { Topic } from \"ui-models/src/models/topic\";\nimport { TopicAdvancePage } from \"../components/TopicAdvancePage\";\nimport { PartitionLimitWarning } from \"../components\";\nimport type {\n  CustomSelect,\n  CustomRetentionSizeSelect,\n  RadioSelectType,\n  RetentionSizeRadioSelect,\n  TimeUnit,\n} from \"../../\";\nimport { bytesToMemorySize, millisecondsToTime } from \"../../KafkaTopics/types\";\nimport type { CustomRetentionUnit, TopicForm } from \"../components/types\";\nimport type { CleanupPolicy } from \"ui-models/src/types\";\n\nexport type EditTopicPropertiesProps = {\n  topic: Topic;\n  onCancel: () => void;\n  onSave: (data: TopicForm) => void;\n  availablePartitionLimit: number;\n  isSaving: boolean;\n};\n\nexport const EditTopicProperties: FunctionComponent<\n  EditTopicPropertiesProps\n> = ({ topic, onCancel, onSave, availablePartitionLimit, isSaving }) => {\n  const millisecondsToTimeValue = millisecondsToTime(\n    topic[\"retention.ms\"].value\n  );\n  const bytesToSizeValue = bytesToMemorySize(topic[\"retention.bytes\"].value);\n  const [customTimeValue, setCustomTimeValue] = useState<CustomSelect>({\n    unit:\n      topic[\"retention.ms\"].value != BigInt(-1)\n        ? (millisecondsToTimeValue.unit as TimeUnit)\n        : \"days\",\n    value:\n      topic[\"retention.ms\"].value != BigInt(-1)\n        ? Number(millisecondsToTimeValue.value)\n        : 7,\n  });\n\n  const [customRetentionSizeValue, setCustomRetentionSizeValue] =\n    useState<CustomRetentionSizeSelect>({\n      unit:\n        topic[\"retention.bytes\"].value != BigInt(-1)\n          ? (bytesToSizeValue.unit as CustomRetentionUnit)\n          : \"bytes\",\n      value:\n        topic[\"retention.bytes\"].value != BigInt(-1)\n          ? Number(bytesToSizeValue.value)\n          : 1,\n    });\n\n  const [radioTimeSelectValue, setRadioTimeSelectValue] =\n    useState<RadioSelectType>(\n      topic[\"retention.ms\"].value == BigInt(-1) ? \"unlimited\" : \"custom\"\n    );\n\n  const [radioSizeSelectValue, setRadioSizeSelectValue] =\n    useState<RetentionSizeRadioSelect>(\n      topic[\"retention.bytes\"].value == BigInt(-1) ? \"unlimited\" : \"custom\"\n    );\n  const [topicName, setTopicName] = useState<string>(topic.name);\n  const [cleanupPolicy, setCleanupPolicy] = useState<CleanupPolicy>(\n    topic[\"cleanup.policy\"]\n  );\n  const [partitions, setPartitions] = useState<number>(topic.partitions.length);\n\n  const [warningModalOpen, setWarningModalOpen] = useState<boolean>(false);\n\n  const onConfirmSave = () => {\n    if (partitions >= availablePartitionLimit) setWarningModalOpen(true);\n    else onTransform();\n  };\n\n  const onTransform = () => {\n    const topicValues: TopicForm = {\n      name: topicName,\n      partitions: partitions,\n      retentionTime:\n        radioTimeSelectValue == \"unlimited\"\n          ? { value: -1, unit: \"unlimited\" }\n          : customTimeValue,\n      retentionSize:\n        radioSizeSelectValue == \"unlimited\"\n          ? { value: -1, unit: \"unlimited\" }\n          : customRetentionSizeValue,\n      cleanupPolicy: cleanupPolicy,\n    };\n\n    onSave(topicValues);\n  };\n\n  return (\n    <PageSection\n      variant={\"light\"}\n      className={\"topic-properties\"}\n      hasOverflowScroll={true}\n      aria-label={\"TODO\"}\n    >\n      <TopicAdvancePage\n        isCreate={false}\n        onConfirm={onConfirmSave}\n        handleCancel={onCancel}\n        topicData={topic}\n        topicName={topicName}\n        onCleanupPolicyChange={setCleanupPolicy}\n        availablePartitionLimit={availablePartitionLimit}\n        customRetentionSizeValue={customRetentionSizeValue}\n        setCustomRetentionSizeValue={setCustomRetentionSizeValue}\n        customTimeValue={customTimeValue}\n        setCustomTimeValue={setCustomTimeValue}\n        radioTimeSelectValue={radioTimeSelectValue}\n        setRadioTimeSelectValue={setRadioTimeSelectValue}\n        radioSizeSelectValue={radioSizeSelectValue}\n        setRadioSizeSelectValue={setRadioSizeSelectValue}\n        onTopicNameChange={setTopicName}\n        partitions={partitions}\n        onPartitionsChange={setPartitions}\n        cleanupPolicy={cleanupPolicy}\n        isSaving={isSaving}\n      />\n      {warningModalOpen && (\n        <PartitionLimitWarning\n          topicData={topic}\n          onSave={onTransform}\n          isModalOpen={warningModalOpen}\n          setIsModalOpen={setWarningModalOpen}\n          isCreate={false}\n        />\n      )}\n    </PageSection>\n  );\n};\n","import {\n  Button,\n  Divider,\n  Form,\n  FormSection,\n  PageGroup,\n  PageSection,\n  Sidebar,\n  SidebarContent,\n  Split,\n  SplitItem,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport type React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport type { Topic } from \"ui-models/src/models/topic\";\nimport {\n  formattedRetentionSize,\n  formattedRetentionTime,\n} from \"../../KafkaTopics/types\";\nimport { TextWithLabelPopover } from \"../components\";\nimport { Cleanup } from \"../components/Cleanup\";\nimport { Flush } from \"../components/Flush\";\nimport { Message } from \"../components/Message\";\nimport { Replication } from \"../components/Replication\";\nimport { TopicAdvanceIndex } from \"../components/TopicAdvanceIndex\";\nimport { TopicAdvanceJumpLinks } from \"../components/TopicAdvanceJumpLinks\";\n\nexport type TopicViewDetailProps = {\n  topic: Topic;\n  deleteTopicHref: string;\n  updateTopicHref: string;\n};\n\nexport const TopicProperties: React.FunctionComponent<TopicViewDetailProps> = ({\n  topic,\n  deleteTopicHref,\n  updateTopicHref,\n}) => {\n  const { t } = useTranslation([\"create-topic\"]);\n  return (\n    <PageSection\n      variant={\"light\"}\n      className={\"topic-properties\"}\n      hasOverflowScroll={true}\n      aria-label={\"TODO\"}\n    >\n      <Sidebar hasGutter>\n        <TopicAdvanceJumpLinks canHaveDelete={true} />\n        <SidebarContent>\n          <PageGroup\n            hasOverflowScroll={true}\n            aria-label={\"TODO\"}\n            id=\"topic-detail-view\"\n            className={\"pf-u-mb-4xl\"}\n          >\n            <PageSection padding={{ default: \"noPadding\" }}>\n              <Split>\n                <SplitItem isFilled>\n                  <Form id=\"topic-form\">\n                    <FormSection\n                      title={t(\"core_configuration\")}\n                      id=\"core-configuration\"\n                      titleElement={\"h2\"}\n                    >\n                      <TextContent>\n                        <Text\n                          component={TextVariants.p}\n                          className=\"section-info\"\n                        >\n                          {t(\"core_config_info\")}\n                        </Text>\n                      </TextContent>\n\n                      <TextWithLabelPopover\n                        fieldId=\"topic-name\"\n                        btnAriaLabel={t(\"topic_name\")}\n                        fieldLabel={t(\"topic_name\")}\n                        fieldValue={topic.name}\n                        popoverBody={t(\"topic_name_description\")}\n                        popoverHeader={t(\"topic_name\")}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId=\"partitions\"\n                        btnAriaLabel={t(\"partitions\")}\n                        fieldLabel={t(\"partitions\")}\n                        fieldValue={topic.partitions.length.toString()}\n                        popoverBody={t(\"partitions_description\")}\n                        popoverHeader={t(\"partitions\")}\n                      />\n\n                      {/*<TextWithLabelPopover\n                        fieldId=\"replicas\"\n                        btnAriaLabel={t(\"replicas\")}\n                        fieldLabel={t(\"replicas\")}\n                        fieldValue={}\n                        popoverBody={t(\"replicas_description\")}\n                        popoverHeader={t(\"replicas\")}\n                      />*/}\n\n                      <TextWithLabelPopover\n                        fieldId=\"min-insync-replicas\"\n                        btnAriaLabel={t(\"min_insync_replicas\")}\n                        fieldLabel={t(\"min_insync_replicas\")}\n                        fieldValue={topic[\"min.insync.replicas\"].toString()}\n                        popoverBody={t(\"min_insync_replicas_description\")}\n                        popoverHeader={t(\"min_insync_replicas\")}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId=\"retention-time\"\n                        btnAriaLabel={t(\"retention_time\")}\n                        fieldLabel={t(\"retention_time\")}\n                        fieldValue={formattedRetentionTime(\n                          topic[\"retention.ms\"].value\n                        )}\n                        popoverBody={t(\"retention_time_description\")}\n                        popoverHeader={t(\"retention_time\")}\n                        showUnlimited={true}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId=\"retention-size\"\n                        btnAriaLabel={t(\"retention_size\")}\n                        fieldLabel={t(\"retention_size\")}\n                        fieldValue={formattedRetentionSize(\n                          topic[\"retention.bytes\"].value\n                        )}\n                        popoverHeader={t(\"retention_size\")}\n                        popoverBody={t(\"retention_size_description\")}\n                        showUnlimited={true}\n                      />\n                    </FormSection>\n                    <Message\n                      defaultMaximumMessageBytes={\n                        topic[\"max.message.bytes\"].value\n                      }\n                      defaultMessageTimestampType={\n                        topic[\"message.timestamp.type\"]\n                      }\n                      defaultMaxMessageTimestampDiff={\n                        topic[\"message.timestamp.difference.max.ms\"].value\n                      }\n                    />\n                    <FormSection title={t(\"log\")} id=\"log\" titleElement={\"h2\"}>\n                      <TextContent>\n                        <Text component={TextVariants.p}>\n                          {t(\"log_section_info\")}\n                          <Text\n                            component={TextVariants.small}\n                            className=\"section-info-note\"\n                          >\n                            {t(\"log_section_info_note\")}\n                          </Text>\n                        </Text>\n                      </TextContent>\n\n                      <TextWithLabelPopover\n                        fieldId=\"cleanup-policy\"\n                        btnAriaLabel={t(\"cleanup_policy\")}\n                        fieldLabel={t(\"cleanup_policy\")}\n                        fieldValue={topic[\"cleanup.policy\"]}\n                        popoverBody={t(\"cleanup_policy_description\")}\n                        popoverHeader={t(\"cleanup_policy\")}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId=\"delete-retention-time\"\n                        btnAriaLabel={t(\"delete_retention_time\")}\n                        fieldLabel={t(\"delete_retention_time\")}\n                        fieldValue={topic[\n                          \"delete.retention.ms\"\n                        ].value.toString()}\n                        popoverBody={t(\"delete_retention_time_description\")}\n                        popoverHeader={t(\"delete_retention_time\")}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId=\"min-cleanable-ratio\"\n                        btnAriaLabel={t(\"min_cleanable_ratio\")}\n                        fieldLabel={t(\"min_cleanable_ratio\")}\n                        fieldValue={topic[\n                          \"min.cleanable.dirty.ratio\"\n                        ].toString()}\n                        popoverBody={t(\"min_cleanable_ratio_description\")}\n                        popoverHeader={t(\"min_cleanable_ratio\")}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId=\"min-compaction-lag-time\"\n                        btnAriaLabel={t(\"min_compaction_lag_time\")}\n                        fieldLabel={t(\"min_compaction_lag_time\")}\n                        fieldValue={topic[\n                          \"min.compaction.lag.ms\"\n                        ].value.toString()}\n                        popoverBody={t(\"min_compaction_lag_time_description\")}\n                        popoverHeader={t(\"min_compaction_lag_time\")}\n                      />\n                    </FormSection>\n                    <Replication />\n                    <Cleanup\n                      defaultLogSegmentSize={topic[\"segment.bytes\"].value}\n                      defaultSegmentTime={topic[\"segment.ms\"].value}\n                      defaultSegmentJitterTime={\n                        topic[\"segment.jitter.ms\"].value\n                      }\n                      defaultFileDeleteDelay={\n                        topic[\"file.delete.delay.ms\"].value\n                      }\n                    />\n                    <TopicAdvanceIndex\n                      defaultIndexIntervalSize={\n                        topic[\"index.interval.bytes\"].value\n                      }\n                      defaultSegmentIndexSize={\n                        topic[\"segment.index.bytes\"].value\n                      }\n                    />\n                    <Flush\n                      defaultFlushIntervalMessages={\n                        topic[\"flush.messages\"].value\n                      }\n                      defaultFlushIntervalTime={topic[\"flush.ms\"].value}\n                    />\n                  </Form>\n\n                  <Divider className=\"pf-u-mt-2xl pf-u-mb-2xl\" />\n\n                  <TextContent>\n                    <Text component={TextVariants.h2} id=\"delete\">\n                      {t(\"delete_topic_irreversible\")}\n                    </Text>\n                    <Text component={TextVariants.p} className=\"section-info\">\n                      {t(\"delete_topic_info\")}\n                    </Text>\n                    <Button\n                      variant=\"danger\"\n                      data-testid=\"tabProperties-actionDelete\"\n                      component={(props) => (\n                        <Link {...props} to={deleteTopicHref}>\n                          {t(\"delete_topic\")}\n                        </Link>\n                      )}\n                    />\n                  </TextContent>\n                </SplitItem>\n                <SplitItem>\n                  <Button\n                    variant=\"primary\"\n                    data-testid=\"tabProperties-actionEdit\"\n                    component={(props) => (\n                      <Link {...props} to={updateTopicHref}>\n                        {t(\"edit_props\")}\n                      </Link>\n                    )}\n                  />\n                </SplitItem>\n              </Split>\n            </PageSection>\n          </PageGroup>\n        </SidebarContent>\n      </Sidebar>\n    </PageSection>\n  );\n};\n","import type { SelectProps } from \"@patternfly/react-core\";\nimport { Select, SelectOption, SelectVariant } from \"@patternfly/react-core\";\nimport type { FC } from \"react\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport type { OwnerAccount } from \"./types\";\n\nexport type SelectOwnerProps = {\n  isDisabled: boolean;\n  accounts: OwnerAccount[];\n  owner: string | undefined;\n  onChangeOwner: (owner: string | undefined) => void;\n};\n\nexport const SelectOwner: FC<SelectOwnerProps> = ({\n  isDisabled,\n  accounts,\n  owner,\n  onChangeOwner,\n}) => {\n  const { t } = useTranslation(\"kafka\");\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  const onToggle = (isExpanded: boolean) => {\n    setIsOpen(isExpanded);\n  };\n\n  const onSelect: SelectProps[\"onSelect\"] = (_, owner) => {\n    onChangeOwner(owner as string);\n    setIsOpen(false);\n  };\n\n  function selectOptions(filter = \"\") {\n    const filterRegExp = new RegExp(filter, \"i\");\n    const filteredAccounts =\n      filter !== \"\"\n        ? accounts.filter(\n            (account) =>\n              filterRegExp.test(account.displayName) ||\n              filterRegExp.test(account.id)\n          )\n        : accounts;\n    return filteredAccounts.map((account) => (\n      <SelectOption\n        key={account.id}\n        value={account.id}\n        description={account.displayName}\n      >\n        {account.id}\n      </SelectOption>\n    ));\n  }\n\n  return (\n    <Select\n      id=\"change-permission-owner-select\"\n      variant={SelectVariant.typeahead}\n      onToggle={onToggle}\n      isDisabled={isDisabled}\n      isOpen={isOpen}\n      placeholderText={t(\"select_user_account\")}\n      isCreatable={true}\n      createText={t(\"change_owner_create_text\")}\n      menuAppendTo=\"parent\"\n      maxHeight={400}\n      selections={owner}\n      onSelect={onSelect}\n      onFilter={(_, value) => selectOptions(value)}\n    >\n      {selectOptions()}\n    </Select>\n  );\n};\n","import {\n  Alert,\n  AlertVariant,\n  Button,\n  Form,\n  FormGroup,\n  Modal,\n  Skeleton,\n} from \"@patternfly/react-core\";\nimport type { FunctionComponent } from \"react\";\nimport { useCallback, useRef, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { SelectOwner } from \"./SelectOwner\";\nimport type { ChangeOwnerErrorMessage, OwnerAccount } from \"./types\";\n\nexport type ChangeKafkaOwnerProps = {\n  currentOwner: string;\n  accounts: OwnerAccount[] | undefined;\n  savingState: \"idle\" | \"saving\" | ChangeOwnerErrorMessage;\n  onConfirm: (newOwner: string) => void;\n  onCancel: () => void;\n};\n\nexport const ChangeKafkaOwner: FunctionComponent<ChangeKafkaOwnerProps> = ({\n  currentOwner,\n  accounts,\n  savingState,\n  onConfirm,\n  onCancel,\n}) => {\n  const { t } = useTranslation([\"kafka\", \"common\"]);\n  const [account, setAccount] = useState<string | undefined>();\n  const submittedAccount = useRef<string>();\n\n  const isSaving = savingState === \"saving\";\n\n  const onConfirmOwner = useCallback(() => {\n    if (account) {\n      submittedAccount.current = account;\n      onConfirm(account);\n    }\n  }, [onConfirm, account]);\n\n  const renderAlert = () => {\n    switch (savingState) {\n      case \"invalid-user\":\n        return (\n          <Alert\n            variant={AlertVariant.danger}\n            aria-live=\"polite\"\n            isInline\n            title={t(\"new_owner_does_not_exist_title\")}\n          >\n            {t(\"new_owner_does_not_exist_message\", {\n              newOwner: submittedAccount.current,\n            })}\n          </Alert>\n        );\n      case \"unknown-error\":\n        return (\n          <Alert\n            variant={AlertVariant.danger}\n            aria-live=\"polite\"\n            isInline\n            title={t(\"can_not_change_owner_title\")}\n          >\n            {t(\"owner_transfer_failed_message\", {\n              name: currentOwner,\n            })}\n          </Alert>\n        );\n    }\n  };\n  return (\n    <Modal\n      id=\"change-owner-modal\"\n      title={t(\"change-owner-title\")}\n      isOpen={true}\n      onClose={onCancel}\n      variant={\"medium\"}\n      position=\"top\"\n      actions={[\n        <Button\n          id=\"confirm-button\"\n          key=\"changeowner\"\n          variant=\"primary\"\n          isDisabled={isSaving}\n          onClick={onConfirmOwner}\n        >\n          {t(\"change-owner-button\")}\n        </Button>,\n        <Button\n          id=\"cancel-button\"\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={onCancel}\n          isDisabled={isSaving}\n        >\n          {t(\"common:cancel\")}\n        </Button>,\n      ]}\n    >\n      <Form onSubmit={(e) => e?.preventDefault()}>\n        {renderAlert()}\n        <FormGroup fieldId=\"Current-owner-name\" label={t(\"current_owner\")}>\n          {currentOwner}\n        </FormGroup>\n        <FormGroup fieldId=\"New-owner-name\" label={t(\"new_owner\")}>\n          {accounts ? (\n            <SelectOwner\n              isDisabled={isSaving}\n              accounts={accounts}\n              owner={account}\n              onChangeOwner={setAccount}\n            />\n          ) : (\n            <Skeleton width={\"100%\"} />\n          )}\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n};\n","import {\n  Button,\n  ButtonVariant,\n  Modal,\n  ModalVariant,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { Trans } from \"react-i18next\";\n\nexport type TermsAndConditionsDialogProps = {\n  isOpen: boolean;\n  disableFocusTrap?: boolean;\n  appendTo?: () => HTMLElement;\n  onViewTerms: () => void;\n  onCancel: () => void;\n};\n\nexport const TermsAndConditionsDialog: VoidFunctionComponent<\n  TermsAndConditionsDialogProps\n> = ({ isOpen, disableFocusTrap, appendTo, onViewTerms, onCancel }) => {\n  const { t } = useTranslation(\"terms-and-conditions\");\n\n  return (\n    <Modal\n      aria-label={t(\"title\")}\n      ouiaId={\"terms-and-conditions-dialog\"}\n      variant={ModalVariant.small}\n      isOpen={isOpen}\n      title={t(\"title\")}\n      onClose={onCancel}\n      appendTo={appendTo}\n      disableFocusTrap={disableFocusTrap}\n      actions={[\n        <Button\n          key={\"confirm__button\"}\n          variant={ButtonVariant.primary}\n          onClick={onViewTerms}\n          ouiaId={\"view_terms_and_conditions\"}\n        >\n          {t(\"view_button\")}\n        </Button>,\n        <Button\n          key={\"cancel__button\"}\n          variant={ButtonVariant.link}\n          onClick={onCancel}\n          ouiaId={\"cancel\"}\n        >\n          {t(\"common:cancel\")}\n        </Button>,\n      ]}\n    >\n      <Trans\n        ns={\"terms-and-conditions\"}\n        i18nKey={\"body\"}\n        components={{\n          bold: <strong />,\n          br: <br />,\n        }}\n      />\n    </Modal>\n  );\n};\n","import {\n  Level,\n  LevelItem,\n  PageSection,\n  PageSectionVariants,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\n\nexport const LegacyControlPlaneHeader: VoidFunctionComponent = () => {\n  const { t } = useTranslation(\"kafka\");\n\n  return (\n    <>\n      <PageSection\n        variant={PageSectionVariants.light}\n        padding={{ default: \"noPadding\" }}\n        hasShadowBottom={true}\n        type={\"tabs\"}\n      >\n        <Level>\n          <LevelItem>\n            <TextContent className={\"pf-u-p-md pf-u-p-lg-on-xl\"}>\n              <Text component=\"h1\">{t(\"kafka:title\")}</Text>\n              <p>{t(\"kafka:description\")}</p>\n            </TextContent>\n          </LevelItem>\n        </Level>\n      </PageSection>\n    </>\n  );\n};\n"],"names":["NewInstanceSegment","DeleteSegment","ChangeOwnerSegment","TermsAndConditionsSegment","ControlPlaneSpecialSegments","ControlPlaneRouteRoot","ControlPlaneRoutePath","ControlPlaneNewInstanceRoutePath","ControlPlaneSelectedInstanceRoutePath","instanceId","ControlPlaneDeleteInstanceRoutePath","ControlPlaneChangeOwnerRoutePath","ControlPlaneRouteMatch","ControlPlaneTermsAndConditionsMatch","ControlPlaneNewInstanceMatch","ControlPlaneDeleteInstanceMatch","ControlPlaneChangeOwnerMatch","ControlPlaneClustersPath","DrawerContext","createContext","DrawerProvider","children","match","Error","selectedInstance","params","id","includes","undefined","section","instance","useState","isExact","isExpanded","setIsExpanded","activeTab","setActiveTab","onClose","useRef","tokenEndPointUrl","toggleExpanded","useCallback","newValue","prev","current","useEffect","value","useMemo","Provider","onTabChange","tokenEndpointUrl","useDrawer","context","useContext","RedirectOnGateError","redirectUrl","key","ErrorBoundary","resetKeys","fallbackRender","RedirectAndResetError","reset","to","useUserControlGate","auth","getUser","user","username","identity","isOrgAdmin","is_org_admin","userData","suspense","useKafkaInstancesTable","instancesHref","instanceSelectedHref","instanceCreationHref","instanceDeletionHref","instanceChangeOwnerHref","history","quickStarts","replace","labels","usePaginationSearchParams","page","perPage","setPagination","setPaginationQuery","resetPaginationQuery","namesChips","useURLSearchParamsChips","ownersChips","statusesChips","useSortableSearchParams","fields","isColumnSortable","sort","sortDirection","onClearAllFilters","clearChained","openDrawer","tab","onDetailsClick","onConnectionsClick","onCreate","push","onDelete","onChangeOwner","onQuickstartGuide","toggle","KafkaInstancesRoute","getUrlForInstance","data","name","chips","owner","status","direction","instanceType","columns","instances","itemCount","count","names","owners","statuses","onPageChange","onSearchName","add","onRemoveNameChip","remove","onRemoveNameChips","clear","onSearchOwner","onRemoveOwnerChip","onRemoveOwnerChips","onSearchStatus","onRemoveStatusChip","onRemoveStatusChips","isRowSelected","onDetails","onConnection","onClickConnectionTabLink","onClickSupportLink","onInstanceLinkClick","canHaveInstanceLink","canOpenConnection","row","canChangeOwner","canDelete","isUserOwnerOrAdmin","useSelfTermsReviewGate","selfTermsReview","areTermsAccepted","CreateKafkaInstanceRoute","analytics","callbacks","getUsername","Promise","reject","checkDeveloperAvailabilityQuery","standardQuotaQuery","providersWithRegionsQuery","getProvidersInfo","getProviderRegionsSizes","checkDeveloperAvailability","onAvailable","onUsed","onUnavailable","checkStandardQuota","onQuotaAvailable","onNoQuotaAvailable","onOutOfQuota","hasTrialQuota","remainingPrepaidQuota","remainingMarketplaceQuota","marketplaceSubscriptions","quota","fetchProvidersWithRegions","plan","providers","getStandardSizes","provider","region","providersInfo","providerInfo","find","p","getTrialSizes","standardSizes","length","displayName","trialSizes","standard","trial","useCreateKafkaCallbacks","createKafkaInstance","track","onClickKafkaOverview","onClickQuickStart","onSuccess","onError","mutateAsync","onCancel","isModalOpen","onClickContactUs","onLearnHowToAddStreamingUnits","onLearnMoreAboutSizes","subscriptionOptionsHref","document","location","href","appendTo","getElementById","body","CreateDedicatedKafkaInstanceRoute","dedicatedQuotaQuery","dedicatedClustersQuery","dedicatedClusterSizesQuery","checkDedicatedQuota","remainingDedicatedQuota","fetchClusters","clusters","defaultCluster","getDedicatedSizes","cluster","clusterId","useCreateDedicatedKafkaCallbacks","createDedicatedKafkaInstance","useAlerts","dispatch","useDispatch","addAlert","variant","message","dismissable","description","addNotification","title","useControlPlaneGate","DeleteKafkaInstanceRoute","isDeleting","instanceName","TermsAndConditionsRoute","createHref","cancelHref","baselinedCreateHref","window","origin","pathname","baselinedCancelHref","termsUrl","onViewTerms","isOpen","ChangeOwnerRoute","accounts","updateInstance","goBack","onConfirm","newOwner","mutate","updates","savingState","isLoading","isError","error","type","currentOwner","map","a","ConnectedControlPlaneHeader","activeSection","clustersHref","sectionsHref","DedicatedKafkaInstancesRoute","dedicatedClusters","hasReadyClusters","filter","c","emptyStateNoData","DedicatedControlPlaneRoutes","path","exact","Suspense","fallback","LegacyControlPlaneRoutes","useDedicatedGate","refetchInterval","ams","account","useApi","useQuery","queryKey","queryFn","apiAccountsMgmtV1CurrentAccountGet","args","organization","apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet","useStandardQuota","dedicated","isSuccess","isEntitled","hasStandardQuota","isFetched","ControlPlaneRoutes","gate","Loading","DedicatedClustersRoute","noEntitlement","DedicatedClustersWithEntitlementRoute","DataPlaneRoutePath","root","DataPlaneTopicRoutePath","DataPlaneConsumerGroupRoutePath","DataPlaneTopicConsumerGroupRoutePath","useDataPlaneGate","DataPlaneHeaderConnected","url","dashboard","topics","consumer","permissions","settings","PermissionsRoute","managePermissionsHref","editPermissionsHref","acls","adminUrl","serviceAccounts","userAccounts","userAccount","email","principalType","serviceAccountList","serviceAccount","allAccounts","onDeleteSelected","rowIndex","rowToDelete","groups","acl","patternType","resource","permissionType","permission","principal","resourceName","operation","resourceType","_","onManagePermissionsActionItem","onManagePermission","onManagePermissions","onPerPageChange","TopicsRoute","topicChips","onDeleteTopic","topicName","onEditTopic","getUrlFortopic","onEdit","onSearchTopic","onCreateTopic","onRemoveTopicChip","onRemoveTopicChips","SettingsRoute","onSubmitReAuthentication","reauthenticationEnabled","reauthentication_enabled","request","DashboardRoute","hasUserAlreadyClosedAlert","setHasUserAlreadyClosedAlert","onAlertClose","queryInstance","queryKpisMetrics","queryInstanceMetrics","queryTopicMetrics","queryTopics","getMetricsKpi","kpis","topicPartitionsLimit","maxPartitions","getKafkaInstanceMetrics","interval","duration","selectedBroker","all","metrics","diskSpaceLimit","max_data_retention_size","bytes","connectionsLimit","connections","connectionRateLimit","connectionRate","getTopicsMetrics","selectedTopic","kafkaTopics","t","ConsumerGroupsRoute","instanceConsumerGroupsHref","consumerName","groupId","onDeletConsumerGroup","onViewPartition","onClickResetOffset","consumers","onSearchConsumer","onRemoveConsumerChip","onRemoveConsumerChips","onViewResetOffset","useTopicGate","topic","DataPlaneTopicHeaderConnected","instanceDetailsHref","instanceTopicsHref","tabsHref","messages","properties","schemas","instanceDetailHref","TopicConsumerGroupsRoute","TopicMessagesGroupsRoute","kafkaTopicMessagesFetchQuery","getMessages","partitions","TopicPropertiesRoute","deleteTopicHref","updateTopicHref","TopicSchemasRoute","useChrome","ScalprumComponent","appName","scope","module","useConsumerGroupGate","consumerGroup","consumerGroupId","ConsumerGroupDeleteRoute","onDeleteConsumer","state","ConsumerGroupResetOffsetRoute","onConfirmResetOffset","offset","customOffsetValue","Array","from","Set","onClickClose","ConsumerGroupViewPartitionRoute","viewPartitionConsumerGroupHref","consumerGroupByTopic","activeMembers","activeConsumers","partitionsWithLag","laggingPartitions","onSelectDeleteConsumerGroup","onSelectResetOffsetConsumerGroup","useTopicConsumerGroupGate","TopicConsumerGroupDeleteRoute","instanceTopicConsumerGroupsHref","TopicConsumerGroupResetOffsetRoute","TopicConsumerGroupViewPartitionRoute","viewTopicPartitionConsumerGroupHref","DeleteKafkaTopic","props","useTranslation","DeleteModal","confirmationValue","Trans","ns","i18nKey","components","values","TopicDeleteRoute","entityId","TopicEditPropertiesRoute","updateTopic","onSave","topicData","isSaving","availablePartitionLimit","PermissionsEditRoute","consumerGroups","consumerGroupsList","topicsList","updatePermissions","onSaveAcls","aclPermission","deletedPermissions","aclData","aclToDelete","existingAcls","aclsForSelectedAccount","selectedAccount","kafkaName","PermissionsSelectAccountRoute","filteredAccounts","onNext","TopicCreateRoute","createTopic","availabilityZone","az","checkTopicName","onCloseCreateTopic","initialTopicValues","partition","kafkaPageLink","kafkaInstanceLink","DataPlaneRoutes","topicHref","instanceTopicConsumerGroupHref","permissionsModalHref","InvalidObject","OverviewRoute","Routes","render","memo","updateDocumentTitle","on","register","notifications","unregister","event","console","dir","navId","QuickstartLoader","ErrorComponent","init","errorDescriptionKey","middleware","ReactQueryDevtoolsProduction","lazy","then","d","default","ReactQueryDevtools","ApiContext","queryClient","ApiProvider","showDevTools","client","useApiConfiguration","fetchClustersMeta","basePath","accessToken","clusterIds","join","fetch","method","headers","Authorization","json","items","Object","fromEntries","display_name","cloudProvider","cloud_provider","cloudRegion","consumerGroupTransformer","stateMapping","lag","memberId","logEndOffset","unassignedPartitions","DEAD","EMPTY","STABLE","UNKNOWN","COMPLETING_REBALANCE","PREPARING_REBALANCE","fetchConsumerGroup","getConsumerGroupById","fetchConsumerGroups","getConsumerGroups","response","total","fetchDedicatedClusters","getEnterpriseOsdClusters","rawClusters","meta","cluster_id","requiresPrivateNetwork","access_kafkas_via_private_network","multi_az","dedicatedClusterTransformer","AxiosError","isStandardQuota","q","related_resources","r","billing_model","isMarketplaceQuota","fetchDedicatedQuota","api","organizationId","quotaResponse","statusText","dedicatedQuotas","resource_name","product","dedicatedQuota","hasDedicatedQuota","allowed","consumed","apiSizeToComponentSize","isDisabled","apiSize","s","quota_consumed","ingress","ingress_throughput_per_sec","egress","egress_throughput_per_sec","storage","Math","round","total_max_connections","max_connection_attempts_per_sec","max_partitions","messageSize","max_message_size","maturity_status","trialDurationHours","lifespan_seconds","fetchDedicatedClusterSizes","getEnterpriseClusterById","supportedInstanceTypes","supported_instance_types","instance_types","availableSizes","flatMap","i","sizes","capacity_consumed","capacity_information","remaining_kafka_streaming_units","Infinity","fetchKafkaKpis","getMetricsByInstantQuery","topicPartitions","forEach","metric","fetchKafkaMetrics","getMetricsByRangeQuery","safeMetrics","m","broker_id","partition_id","persistentvolumeclaim","brokers","usedDiskSpaceMetrics","connectionAttemptRateMetrics","clientConnectionsMetrics","bytesPerPartitionMetrics","partitionKey","addAggregatedValuesTo","timestamp","addAggregateBrokerBytes","valuesToQuery","field","comparison","v","trim","uiColumnMapping","createdAt","fetchKafkas","dataMapper","getKafkas","search","deployment","Boolean","filtersToSearch","toString","resolve","res","rawInstances","fetchMessages","consumeRecords","limit","fetchOrganization","fetchProviderRegionSizes","regions","regionInfo","capacity","available_sizes","instance_type","bind","getCloudProviders","getCloudProviderRegions","allProviders","enabled","fetchProviderRegions","firstProvider","defaultProvider","some","max_capacity_reached","fetchStandardQuota","standardQuotas","prepaidQuota","marketplaceQuotas","reduce","agg","unaggregatedSubscriptions","cloud_accounts","subscriptionMarketplaces","cloud_provider_id","marketplace","subscriptions","cloud_account_id","fetchTopic","getTopic","topicTransformer","fetchTopics","getTopics","fetchTopicsMetrics","filteredMetrics","bytesIncoming","bytesOutgoing","bytesPerPartition","incomingMessageRate","addAggregatedTotalBytesTo","metricsTopics","fetchUserAccounts","getUserAccounts","fullObject","first_name","last_name","fetchPermissions","getAcls","fetchServiceAccounts","getServiceAccounts","fetchSelfTermsReview","event_code","site_code","terms_required","terms_available","redirect_url","URL","searchParams","set","useDedicatedClusterSizesFetchQuery","fetchQuery","useClustersMetaFetchQuery","token","useDedicatedClustersFetchQuery","setQueryData","useDedicatedQuotaFetchQuery","skipCache","staleTime","useConsumerGroup","useConsumerGroups","APIErrorCodes","useDedicatedClusters","kafkaRequestToKafkaInstanceEnhanched","developerPlanInstanceLimits","standardPlanInstanceLimits","enhancedInstance","billing","created_at","Date","toISOString","expiryDate","expires_at","BigInt","size","accepted","preparing","provisioning","ready","failed","deprovision","deleting","updatedAt","updated_at","clusterName","version","bootstrapUrl","bootstrap_server_host","admin_api_server_url","marketplaceForBilling","ms","billing_cloud_account_id","subscription","e","warn","thisInstanceLimits","l","size_id","useKafkaInstanceTransformer","getStandardQuotaQuery","useStandardQuotaFetchQuery","useProvidersWithRegionsFetchQuery","useProviderRegionSizesFetchQuery","getClusters","JSON","stringify","standardQuota","standardPlanLimitsQuery","developerPlanLimitsQuery","standardPlanLimits","developerPlanLimits","useKafka","kafkasFleet","getKafkaById","useKafkas","useTopic","useTopics","useUserAccounts","listPrincipals","useAcls","useServiceAccounts","useUser","useSSOProvider","token_url","useSelfTermsReview","apiAuthorizationsV1SelfTermsReviewPost","useDeveloperInstanceAvailabilityFetchQuery","fleetApi","useKafkaFetchQuery","useKafkaKpisFetchQuery","useKafkaMetricsFetchQuery","useMessagesFetchQuery","records","kms","getInstanceTypesByCloudProviderAndRegion","useTopicsFetchQuery","useTopicsMetricsFetchQuery","useCreateDedicatedKafkaMutation","useMutation","kafkaRequest","sizeId","createKafka","isServiceApiError","DUPLICATE_INSTANCE_NAME","INTERNAL_CAPACITY_ERROR","INSUFFICIENT_QUOTA","invalidateQueries","UNAUTHORIZED_USER","TRIAL_USED","FAILED_TO_CHECK_QUOTA","OWNER_DOES_NOT_EXIST","useCreateKafkaMutation","code","useDeleteKafkaMutation","deleteKafkaById","useDeleteTopicMutation","deleteTopic","removeQueries","useUpdateKafkaMutation","updateKafkaById","getErrorCode","reason","useDeleteConsumerGroupMutation","deleteConsumerGroupById","useResetConsumerGroupMutation","resetConsumerGroupOffset","useDeletePermissionsMutation","deleteAcls","useUpdatePermissionsMutation","createAcl","useCreateTopicMutation","useUpdateTopicMutation","KafkaInstancesSortableColumns","KafkaTopicsSortableColumns","TopicOrderKey","KafkaConsumerGroupSortableColumns","ConsumerGroupOrderKey","masQueries","_root","entity","standardAvailable","subentity","dedicatedAvailable","developerAvailability","standardAvailability","dedicatedQueries","clusterNames","clusterSizes","kafkaQueries","list","details","topicMessages","kpi","providerQueries","limits","developer","developerDefaults","preallocate","standardDefaults","topicTransformerFactory","cm","config","configValueToMilliseconds","configValueToBytes","configValueToBoolean","configValueToNumber","defaultIfEmpty","defaultIfError","parseInt","parse","convertToTopicSettings","inputObj","keyValuePairs","tranformedValueInMilliseconds","retentionTime","unit","retentionTimeTransformer","tranformedValueInBytes","retentionSize","retentionSizeTransformer","configEntries","cleanupPolicy","numPartitions","DefaultApi","Configuration","PrincipalApi","SecurityApi","AppServicesApi","TopicsApi","GroupsApi","AclsApi","RecordsApi","EnterpriseDataplaneClustersApi","REACT_QUERY_DEVTOOLS","METRICS_LAG_ALERT","isDevToolsEnabled","localStorage","getItem","metricsIsLagAlertsDismissed","metricsDismissLagAlerts","setItem","CreatingStatuses","ReadyStatuses","DegradedStatuses","SuspendingStatuses","SuspendedStatuses","DeletingStatuses","ResumingStatuses","SimplifiedStatuses","creating","degraded","suspended","resuming","suspending","EmptyStateNoDedicatedEntitlement","EmptyState","EmptyStateVariant","isFullHeight","EmptyStateIcon","icon","PlusCircleIcon","Title","headingLevel","EmptyStateBody","onClick","EmptyStateNoDedicatedInstances","Button","ouiaId","EmptyStateNoInstances","EmptyStateNoResults","SearchIcon","ConsumerGroupPopover","Popover","headerContent","bodyContent","OutlinedQuestionCircleIcon","ConsumerGroupStateLabel","ConsumerGroupByKafka","columnNames","consumer_id","current_offset","log_end_offset","offset_lag","Stack","hasGutter","DescriptionList","columnModifier","lg","className","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","TableComposable","TableVariant","Thead","noWrap","Tr","Th","width","Tbody","Td","dataLabel","ConsumerGroupByTopic","ConsumerGroupDetails","ConsumerGroupEmptyState","CubesIcon","TitleSizes","OffsetSelect","onChange","setIsOpen","offsetValueOption","absolute","latest","earliest","Select","toggleAriaLabel","onToggle","onSelect","selection","SelectVariant","placeholderText","selections","menuAppendTo","entries","label","SelectOption","TopicSelect","index","ConsumerGroupResetOffset","disableFocusTrap","setSelectedTopic","selectedOffset","setSelectedOffset","setcustomOffsetValue","isResetAccepted","setIsResetAccepted","selectedConsumer","setSelectedConsumer","isDisconnected","consumerList","isResetOffsetDisabled","tableColumns","clientId","new_offset","areAllConsumerSelected","isConsumerSelected","onResetOffset","Modal","ModalVariant","showClose","position","actions","StackItem","Form","isHorizontal","FormGroup","fieldId","TextInput","readOnlyVariant","Alert","isInline","select","_event","isSelecting","onSelectAllConsumer","isSelected","String","Checkbox","isChecked","DeleteConsumerGroup","isConsumerConnected","Text","ConsumerGroupDrawer","dropdownItems","DropdownItem","panelContent","DrawerPanelContent","widths","DrawerHead","TextContent","component","TextVariants","DrawerActions","Dropdown","KebabToggle","isPlain","DropdownPosition","DrawerCloseButton","DrawerPanelBody","Drawer","DrawerContent","DrawerContentBody","useKafkaLabels","statusesSimplified","aws","gcp","azure","providerRegions","useTopicLabels","useConsumerGroupLabels","useDedicatedClusterLabels","XStateInspector","useXStateInspector","Columns","ConsumerGroups","isFiltered","PageSection","isFilled","hasOverflowScroll","TableView","tableOuiaId","ariaLabel","renderHeader","column","info","popover","popoverProps","renderCell","renderActions","ActionsColumn","filters","onSearch","onRemoveChip","onRemoveGroup","validate","test","errorMessage","emptyStateNoResults","ControlPlaneHeader","PageSectionVariants","padding","hasShadowBottom","Level","LevelItem","Nav","NavList","NavItem","style","borderTop","isActive","Divider","ExternalLink","testId","onProviderChange","selectedProvider","defaultRegion","StandardPlanMachine","capabilities","form","creationError","tsTypes","predictableActionArguments","schema","events","services","initial","states","verifyAvailability","entry","always","cond","target","overQuota","tags","instanceUnavailable","regionsUnavailable","configuring","unsubmitted","submitting","submitted","create","invalid","valid","fieldInvalid","submit","saving","createSuccess","createError","saved","empty","nameChange","providerChange","regionChange","idle","disabled","waitingForQuota","loading","invoke","src","onDone","sizeChange","billingChange","prepaidOnly","singleSubscription","onlySubscriptions","selectSubscription","prepaidAndSubscriptions","prepaid","selectPrepaid","setInitialContext","availableProviders","setName","setProvider","setRegion","setSize","setSizes","smallestSize","b","resetCreationErrorMessage","_context","setCreationError","triggerSave","triggerSubmit","triggerBillingChange","setBillingToPrepaid","setBillingToSubscription","unsetSubscription","guards","isOverQuota","instanceAvailability","isInstanceUnavailable","isRegionsUnavailable","nameIsEmpty","nameIsValid","providerIsValid","selectedProviderInfo","regionIsValid","noProviderOrRegion","noSizes","emptySizes","sizeIsDisabled","billingRequiredButNotSelected","hasTag","sizeIsOverQuota","availableQuota","didProviderChange","didRegionChange","didSizeChange","onlyPrepaid","matchesSelectedProviderOrRHMarketplaceAndHasQuota","hasPrepaidQuota","noSelectedProvider","TrialPlanMachine","trialUsed","trialUnavailable","isTrialUsed","isTrialUnavailable","noProviderAndRegion","CreateKafkaInstanceMachine","save","complete","setDeveloperAvailable","setDeveloperUnavailable","setDeveloperUsed","setStandardAvailable","setStandardOutOfQuota","setStandardUnavailable","setProviders","setProvidersOrRegionsUnavailable","setCapabilities","notifyCreateErrorToStandardPlan","notifyCreateErrorToTrialPlan","CreateKafkaInstanceContext","CreateKafkaInstanceProvider","service","useInterpret","checkStandardQuotaCb","checkDeveloperAvailabilityCb","fetchProvidersWithRegionsCb","getStandardSizesCb","getTrialSizesCb","withConfig","send","createInstance","standardPlan","withContext","getSizes","trialPlan","makeCreateKafkaInstanceMachine","devTools","BillingHelp","LogoAWS","LogoAzure","LogoGCP","LogoRedhat","AWSLogo","alt","height","AzureLogo","GCPLogo","BillingTiles","hasPrepaid","isPrepaidOverQuota","isMarketplaceOverQuota","marketplaceQuota","onPrepaid","onSubscription","validated","marketplaces","rhm","Flex","role","md","flex","spaceItems","FlexItem","Tile","tiles","isStacked","HelperText","HelperTextItem","Gallery","GalleryItem","FormSelect","FormSelectOption","CloudProvidersTiles","Skeleton","screenreaderText","justifyContent","spacer","providerDisabled","grow","CloudRegionSelect","isSizeUnavailable","makeRegionOptions","toggleId","prevState","FieldAZ","options","validity","enabledZone","trigger","helperTextInvalid","ToggleGroup","Tooltip","content","ToggleGroupItem","text","buttonId","FieldBillingTiles","isValid","billingType","isRequired","FieldCloudProvider","FieldCloudRegion","allRegionsUnavailable","every","disableControl","someRegionsUnavailable","validation","placeholder","hasIcon","helperText","FieldInstanceName","autoFocus","maxLength","FieldSizeHelperText","remainingQuota","isPreview","isUnavailable","AlertVariant","FieldSizeHelperTextOverQuota","ButtonVariant","FieldSizeHelperTextTrial","FieldSize","isLoadingError","helperTextTrial","FormGroupWithPopover","labelHead","fieldLabel","labelBody","buttonAriaLabel","Grid","sm","GridItem","fontSize","valueIndex","findIndex","steps","helperTextOverQuota","Slider","max","showTicks","customSteps","FormAlerts","onClickContactUS","AlertGroup","InstanceInfo","isTrial","trialDurationInHours","streamingUnits","Card","isFlat","CardTitle","CardBody","isCompact","ClockIcon","color","isSmall","InstanceInfoSkeleton","ModalAlertsLoading","customIcon","Spinner","ModalAlertsStandardPlan","ModalAlertsDedicatedPlan","ModalAlertsSystemUnavailable","ModalAlertsTrialPlan","time","LoadingForm","alignItems","onSubmit","DisabledFieldInstanceName","DisabledFieldCloudProvider","DisabledFieldCloudRegion","DisabledFieldAZ","DisabledFieldSize","DedicatedPlanMachine","clusterUnavailable","clusterChange","setCluster","isClusterUnavailable","clusterIsValid","selectedCluster","availableClusters","noCluster","didClusterChange","CreateDedicatedKafkaInstanceMachine","setDedicatedAvailable","setDedicatedOutOfQuota","setDedicatedUnavailable","setClusters","setClustersUnavailable","notifyCreateErrorToDedicatedPlan","CreateDedicatedKafkaInstanceContext","CreateDedicatedKafkaInstanceProvider","checkDedicatedQuotaCb","fetchClustersCb","getDedicatedSizesCb","dedicatedPlan","makeCreateDedicatedKafkaInstanceMachine","useCreateKafkaInstance","useSelector","standardPlanMachine","trialPlanMachine","isSystemUnavailable","isStandardPlan","isTrialPlan","isSaved","done","useCreateDedicatedKafkaInstance","dedicatedPlanMachine","isAvailable","useStandardPlanMachine","setBillingSubscription","setBillingPrepaid","isBlocked","isFormInvalid","isNameTaken","isConfigurable","isLoadingSizes","isBillingSelectionRequired","isBillingSingleSubscription","isBillingSingleMarketplace","isBillingPrepaidAvailable","selectedSize","selectedBilling","isBillingPrepaidOverQuota","isBillingMarketplaceOverQuota","isFormEnabled","isNameInvalid","isNameEmpty","isNameError","isSizeDisabled","isSizeOverQuota","isSizeLoadingError","isSizeAvailable","isSizeError","isProviderError","isRegionError","isBillingError","useTrialPlanMachine","useDedicatedPlanMachine","isClusterError","StandardInstanceForm","formId","preventDefault","instanceInfoBilling","ConnectedFieldInstanceName","ConnectedFieldCloudProvider","ConnectedFieldCloudRegion","ConnectedFieldAZ","ConnectedFieldSize","ConnectedBillingTiles","mq","TrialInstanceForm","CreateKafkaInstance","ConnectedCreateKafkaInstance","FORM_ID","footer","OutlinedClockIcon","spinnerAriaValueText","DedicatedClusterTiles","hasSelectableInput","isSelectableRaised","isDisabledRaised","onSelectableInputChange","TextList","TextListVariants","TextListItem","TextListItemVariants","Truncate","trailingNumChars","OkIcon","ErrorCircleOIcon","FieldDedicatedCluster","DedicatedInstanceForm","ConnectedFieldCluster","CreateDedicatedKafkaInstance","ConnectedCreateDedicatedKafkaInstance","KafkaInstanceActions","customChild","DropdownGroup","tooltipProps","tooltip","pointerEvents","cursor","isSeparator","DataPlaneHeader","actionsProps","Breadcrumb","BreadcrumbItem","DataPlaneTopicHeader","EmptyStateNoDedicatedClusters","DedicatedClusters","toolbarBreakpoint","DeleteKafkaInstance","lng","debug","resources","en","common","kafka","it","delete","DetailsTabAlert","hoursLeft","differenceInHours","now","FormatDate","date","format","KafkaDetailsTab","kafkaVersion","renderTextListItem","contentName","SuspendedConnection","ExclamationTriangleIcon","KafkaConnectionTabP2","isKafkaSuspended","isKafkaPending","externalServer","linkToServiceAccount","linkToAccessTab","adminAPIUrl","kafkaFleetManagerUrl","ClipboardCopy","textAriaLabel","isReadOnly","ExpandableSection","toggleContent","HelpIcon","Label","SampleCodeSnippet","expandableCode","codeBlockCode","codeSnippet","copied","setCopied","copyCode","CodeBlockAction","ClipboardCopyButton","textId","exitDelay","maxWidth","navigator","clipboard","writeText","catch","CodeBlock","CodeBlockCode","isDetached","contentId","ExpandableSectionToggle","javaConfigCodeBlock","kafkaBootstrapUrl","pythonConfigCodeBlock","pythonConfigExpandabledBlock","quarkusConfigExpandableBlock","springBootConfigCodeBlock","KafkaSampleCode","clientSelect","setClientSelect","clientProvider","java","python","quarkus","springboot","client_type","KafkaInstanceDrawer","KafkaInstanceDrawerPanel","handleSelect","Tabs","activeKey","Tab","eventKey","TabTitleText","parseISO","getExternalServer","startsWith","getAdminServerUrl","showCreateServiceAccountModal","endsWith","StatusLabel","forwardRef","ref","showWarning","showError","withPopover","buttonVariant","Split","SplitItem","CheckCircleIcon","PopoverStatusOrder","KafkaToPopoverMapping","StatusProgressStepper","currentStatus","currentStep","getVariant","ProgressStepper","isVertical","ProgressStep","titleId","isCurrent","StatusPopoverContent","StatusPopover","initialOpen","reference","isVisible","setIsVisible","handleClickConnectionTabLink","handleClickSupportLink","shouldOpen","shouldClose","enableFlip","SuspendedPopover","alertSeverityVariant","headerIcon","KafkaInstanceStatus","warningAfterMinutes","errorAfterMinutes","popoverStatus","alert","setAlert","labelRef","checkCreatedAt","elapsed","differenceInMinutes","useInterval","StandardColumns","DedicatedColumns","KafkaInstances","timeCreatedDate","instanceLinkEnable","isAriaDisabled","changeOwnerEnabled","deleteEnabled","openConnectionEnabled","onRowClick","isRowDeleted","isPrimary","DateTimePicker","setTime","InputGroup","DatePicker","newDate","formatISO","TimePicker","hour","minute","__","setHours","setMinutes","FilterGroup","epoch","onOffsetChange","onTimestampChange","onEpochChange","onLatest","currentCategory","setCurrentCategory","ToolbarItem","DropdownToggle","DropdownSeparator","newOffset","Number","isInteger","LimitSelector","InputGroupText","hidden","idx","isSameMessage","m1","m2","beautifyUnknownValue","RetentionTimeUnits","RetentionSizeUnits","NoDataCell","columnLabel","MessageDetails","defaultTab","isResizable","minSize","MessageDetailsBody","messageKey","defaultActiveKey","isCode","random","NoDataEmptyState","onRefresh","NoResultsEmptyState","onReset","OffsetRange","min","PartitionSelector","handleChange","valueAsNum","allPartitions","fill","makeOptions","slice","hiddenOptionsCount","handleFilter","typeAheadAriaLabel","maxHeight","onFilter","isInputValuePersisted","onClear","InputGroupTextVariant","UnknownValuePreview","truncateAt","shouldTruncate","substring","truncate","preview","truncated","stopPropagation","MessageBrowserMachine","selectedMessage","initialLoading","fetchSuccess","fetchFail","verifyMessages","noData","refresh","pristine","dirty","shouldSearch","setPartition","setEpoch","setTimestamp","setOffset","setLatest","setLimit","selectMessage","deselectMessage","refreshing","setMessages","offsetMin","offsetMax","lastUpdated","noMessages","selectedMessageNotAvailable","areFiltersChanged","columnWidths","KafkaMessageBrowser","useMachine","KafkaMessageBrowserConnected","isFirstLoad","matches","isNoData","isRefreshing","requiresSearch","filterOffset","filterEpoch","filterTimestamp","setDefaultTab","columnLabels","OuterScrollContainer","Toolbar","ToolbarContent","ToolbarToggleGroup","toggleIcon","FilterIcon","breakpoint","ToolbarGroup","RefreshButton","alignment","InnerScrollContainer","ResponsiveTable","expectedLength","colIndex","keys","KafkaInstanceCapacityTable","firstStreamingUnit","secondStreamingUnit","table","MarketingPageHero","tagLine","description2","heroImage","heroImageSize","heroImageCanRepeat","heroImagePositionY","cta","MarketingPageSection","isWidthLimited","KafkaPageV3","CardHeader","CardHeaderMain","CardFooter","bold","alignSelf","xl","orientation","EmptyStateNoTopic","PrincipalType","unitsToBytes","BYTE","KIBIBYTE","MEBIBYTE","GIBIBYTE","TEBIBYTE","unitsToMilliSecond","MILLISECOND","SECOND","MINUTE","HOUR","DAY","millisecondsToTime","days","hours","minutes","seconds","formattedRetentionTime","formattedRetentionSize","bytesToMemorySize","tebibytes","gibibytes","mebibytes","kibibytes","KafkaTopics","DurationOptions","createEmptyManageAccessAcl","PermissionsDropdown","onAddPermission","onShortcutConsumeTopic","onShortcutProduceTopic","onShortcutManageAccess","menuRef","handleMenuKeys","contains","handleClickOutside","addEventListener","removeEventListener","onToggleClick","open","ev","setTimeout","firstElement","querySelector","focus","menu","Menu","itemId","MenuContent","MenuList","MenuGroup","MenuItem","splitButtonItems","DropdownToggleAction","splitButtonVariant","Popper","popper","popperMatchesTriggerWidth","labelColor","DisplayResourceName","PatternType","ResourceCell","PermissionOperationCell","ALLOW","DENY","operations","ALL","READ","WRITE","CREATE","DELETE","ALTER","DESCRIBE","DESCRIBE_CONFIGS","ALTER_CONFIGS","LabelGroup","numLabels","isArray","PrincipalCell","isDeleteEnabled","isAllAccounts","onRemoveAcl","isReviewTable","ServiceAccount","tabIndex","split","InfoCircleIcon","RemoveButton","PermissionsTableEmptyState","openManagePermissions","PermissionsTable","checkedRows","setCheckedRows","onCheck","kebabActions","isRowChecked","SelectAccount","isDirty","setIsDirty","setSelectedAccount","useLayoutEffect","noServiceAccounts","isNoResultsOption","noUserAccounts","filterValue","toLowerCase","serviceAccountOptions","localeCompare","userAccountOperations","UserAccount","SelectGroup","ValidatedOptions","onEscapePress","labelIcon","noVerticalAlign","newState","isCreatable","createText","isGrouped","onCreateOption","ResourceName","onChangeValue","resourcePrefixRule","onFetchOptions","setIsNameValid","AsyncTypeaheadSelect","required","onValidationCheck","validationMessage","resourcePreixCondition","regExp","RegExp","validationCheck","isInputFilterPersisted","ResourceOperation","resourceTypeOptions","ResourcePermission","resourcePermissionOptions","allow","deny","ResourcePrefixRule","resourcePrefixRuleOptions","Is","ResourceType","ShortcutsTableHead","KafkaInstanceManualPermissions","resourceOperation","resourcePermission","onChangeResourceOperation","onChangeResourcePermission","onChangeResourceType","AssignPermissionsManual","resourcePrefix","onChangeResourcePrefix","onChangeResource","onFetchResourceNameOptions","multipleShorctutPermissions","ProduceTopicRow","prefixRuleValue","resourceNameValue","onChangeResourceName","isConsumeTopicShortcut","borderBottom","colSpan","ConsumeTopicShortcut","onChangeConsumerResourceName","topicPrefixRuleValue","topicResourceNameValue","consumerPrefixRuleValue","consumerResourceNameValue","onChangeConsumerResourcePrefixRule","onChangeTopicResourceName","onChangeTopicResourcePrefixRule","onFetchConsumerResourceNameOptions","onFetchTopicResourceNameOptions","ManageAccessShortcut","ProduceTopicShortcut","AssignPermissions","topicNameOptions","consumerGroupNameOptions","onAddManualPermissions","onAddProduceTopicShortcut","onConsumeTopicShortcut","onManageAccessShortcut","addedAcls","setAddedAcls","gridBreakPoint","aclTemplate","resourceValues","consumerResourcePrefixRule","topicResourcePrefixRule","consumerResourceName","topicResourceName","ActionList","ActionListItem","paddingTop","PreCancelModal","closeModal","resumeEditing","titleIconVariant","ReviewPermissionsTable","selectedAccountId","ViewAccountDetails","accountId","transformResourceType","AclResourceType","transformResourceOperation","EditPermissions","escapeClosesModal","isExpandedExistingPermissionSection","setIsExpandedExistingPermissionSection","isAclDeleted","setIsAclDeleted","isExpandedAssignPermissionsSection","setIsExpandedAssignPermissionsSection","isNameValid","canSave","setCanSave","setSubmitted","isOpenPreCancelModal","setIsOpenPreCancelModal","setExistingAcls","newAcls","setNewAcls","deletedAcls","setDeletedAcls","checkValidation","aclsToSave","accountDisplayName","isAclValid","transformAclData","selectedAccountName","transformPermissions","isIndented","Badge","isRead","updateExistingAcls","toggleText","EmptyStateInitialLoading","EmptyStateMetricsUnavailable","TachometerAltIcon","MetricsLayout","metricsLagAlert","topicsKpi","topicPartitionsKpi","consumerGroupKpi","diskSpaceMetrics","topicMetrics","CardBodyLoading","Bullseye","isSVG","timeIntervalsMapping","Last5minutes","ticks","showDate","Last15minutes","Last30minutes","Last1hour","Last3hours","Last6hours","Last12hours","Last24hours","Last2days","Last7days","chartHeight","chartPadding","bottom","left","right","top","ChartSkeletonLoader","useChartWidth","containerRef","setWidth","handleResize","clientWidth","formatBytes","units","shouldShowDate","timeDuration","dateToChartValue","fromUnixTime","formatInTimeZone","timestampsToTicks","timestamps","allTimestamps","mostRecentTs","sub","getTime","ChartLinearWithOptionalLimit","chartName","xLabel","yLabel","usageLimit","formatValue","emptyState","itemsPerRow","lineLabel","limitLabel","legendData","symbol","chart_color_black_500","chart_color_blue_300","areaColor","softLimitColor","chartData","area","softLimit","x","y","tickValues","getChartData","hasMetrics","Chart","ariaTitle","containerComponent","ChartVoronoiContainer","datum","constrainToVisibleArea","legendPosition","legendComponent","ChartLegend","themeColor","ChartTheme","legendAllowWrap","ChartAxis","C","tickFormat","dependentAxis","ChartGroup","ChartArea","ChartThreshold","stroke","colors","chart_color_cyan_300","ChartLogSizePerPartition","selectedPartition","top50Partition","aValue","sum","val","dataMap","dataMapAValues","dataMapBValues","aValueSum","marginTop","ChartLine","ChartPopover","ChartTotalBytes","incomingTopicsData","outgoingTopicsData","incomingTopic","outgoingTopic","incomingTopicName","outgoingTopicName","incomingLine","metricsToLine","line","outgoingLine","chart_color_green_300","getBytesChartData","tickCount","EmptyStateNoMetricsData","EmptyStateNoMetricsDataForSelection","EmptyStateNoTopics","WrenchIcon","EmptyStateNoTopicSelected","FilterByPartition","partitionValue","onSetSelectedPartition","ispartitionSelectOpen","setIspartitionSelectOpen","partitionSelectOption","Top10","Top20","DurationOptionsMap","FilterByTime","keyText","disableToolbar","onDurationChange","isTimeSelectOpen","setIsTimeSelectOpen","ariaId","mapping","timeOptions","FilterByTopic","topicList","onSetSelectedTopic","isTopicSelectOpen","setIsTopicSelectOpen","selectKey","setSelectKey","allTopicsLabel","topicOptions","textInput","filteredTopics","indexOf","hasInlineFilter","ToolbarRefresh","ToolbarTopicsMetrics","onSetTimeDuration","CardTopicsMetrics","backendUnavailable","isInitialLoading","isJustCreated","onSelectedTopic","onSelectedPartition","noTopics","selectedTopicNotInList","chartEmptyState","TotalBytesTitle","IncomingMessageRate","PartitionSizeTitle","FilterByBroker","brokerList","onSetSelectedBroker","isBrokerSelectOpen","setIsBrokerSelectOpen","broker","brokerOptions","ToolbarKafkaInstanceMetric","BrokerToggle","ChartPartitionLogSizePerBroker","ChartUsedDiskSpace","brokerToggle","CardKafkaInstanceMetrics","usedDiskMetrics","onSelectedBroker","selectToggle","onSelectedToggle","bytesPerPartitions","ChartTitle","CardKpi","shape","apiState","failure","after","KafkaInstanceMetricsMachine","fetchFailures","selectedToggle","callApi","criticalFail","justCreated","withResponse","selectDuration","selectBroker","selectPartition","setFetchTimestamp","setMetrics","incrementRetries","resetRetries","setDuration","setBroker","setToggle","canRetryFetching","TopicsMetricsMachine","selectTopic","setTopic","MetricsKpiMachine","KafkaInstanceMetricsContext","KafkaInstanceMetricsProvider","callback","results","MetricsKpiContext","MetricsKpiProvider","TopicsMetricsContext","TopicsMetricsProvider","useKafkaInstanceMetrics","isFailed","onBrokerChange","onSelectToggle","onSelectPartition","useTopicsMetrics","onTopicChange","PartitionCard","ExclamationCircleIcon","isExpandable","MetricsLagAlert","isClosed","actionClose","AlertActionCloseButton","Metrics","ConnectedMetrics","kafkaInstanceMetrics","topicsMetrics","metricsKpi","useMetricsKpi","ConnectedKafkaInstanceMetrics","ConnectedTopicsMetrics","Settings","connectionStatus","setConnectionStatus","setIsModalOpen","handleReAuthentication","reAuthValue","reauthentication","flexWrap","Switch","checked","retentionTimeSelectOptions","isPlaceholder","retentionSizeSelectOptions","CreateTopicHead","showAllOptions","onShowAllOptions","mainBreadcrumbs","labelOff","PartitionLimitWarning","isCreate","handleModalToggle","TextWithLabelPopover","btnAriaLabel","fieldValue","popoverBody","popoverHeader","displayText","Cleanup","defaultFileDeleteDelay","defaultLogSegmentSize","defaultSegmentJitterTime","defaultSegmentTime","FormSection","titleElement","gibibyte","milliseconds","CustomRetentionMessage","customTimeValue","setCustomTimeValue","setRadioTimeSelectValue","isRetentionTimeSelectOpen","setIsRetentionTimeSelectOpen","onRetentionTimeToggle","input","inputValue","CustomRetentionSize","customRetentionSizeValue","setCustomRetentionSizeValue","setRadioSizeSelectValue","isRetentionSizeSelectOpen","setIsRetentionSizeSelectOpen","onRetentionSizeToggle","useValidateTopic","validateName","legalNameChars","CoreConfiguration","invalidText","setInvalidText","setTopicValidated","topicValidated","radioTimeSelectValue","radioSizeSelectValue","setPartitions","setTopicName","initialPartitions","handleRetentionMessageTime","handleRetentionMessageSize","retentionTimeInput","retentionSizeInput","partitionsHelperText","partitionsValidated","NumberInput","inputName","partitionsValue","onPlus","onMinus","plusBtnProps","minusBtnProps","onBlur","Radio","Flush","defaultFlushIntervalMessages","defaultFlushIntervalTime","Log","defaultDeleteRetentionTime","defaultMinCleanbleRatio","defaultMinimumCompactionLagTime","setCleanupPolicy","cleanupPolicyOptions","DropdownWithToggle","onSelectOption","isLabelAndValueNotSame","Message","defaultMaximumMessageBytes","defaultMessageTimestampType","defaultMaxMessageTimestampDiff","Replication","TopicAdvanceIndex","defaultIndexIntervalSize","defaultSegmentIndexSize","TopicAdvanceJumpLinks","canHaveDelete","SidebarPanel","JumpLinks","scrollableSelector","JumpLinksItem","TopicAdvancePage","handleCancel","onCleanupPolicyChange","onPartitionsChange","onTopicNameChange","actionText","setIsLoading","warning","setWarning","Sidebar","SidebarContent","PageGroup","ActionGroup","CreateTopicWizard","isSwitchChecked","topicNameValidated","setTopicNameValidated","warningModalOpen","setWarningModalOpen","closeWizard","trimmedTopicName","enableNext","StepTopicName","canJumpTo","StepPartitions","StepMessageRetention","StepReplicas","minInSyncReplica","nextButtonText","onTransform","onConfirmSave","PageSectionTypes","Wizard","navAriaLabel","mainAriaLabel","WizardCustomFooter","onValidate","newPartitionCount","widthChars","WizardFooter","WizardContextConsumer","activeStep","onBack","CreateTopic","setIsSwitchChecked","EditTopicProperties","millisecondsToTimeValue","bytesToSizeValue","TopicProperties","showUnlimited","SelectOwner","selectOptions","filterRegExp","ChangeKafkaOwner","setAccount","submittedAccount","onConfirmOwner","renderAlert","TermsAndConditionsDialog","br","LegacyControlPlaneHeader"],"sourceRoot":""}