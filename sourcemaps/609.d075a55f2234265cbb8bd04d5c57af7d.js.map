{"version":3,"file":"js/609.558ee32ca82864c4dd1d.js","mappings":"0PAAaA,EAAwB,UAC/BC,EAAqB,SACdC,EAA8B,CAACD,GAE/BE,EACX,UAAGH,EAAqB,wCACbI,EAA8B,UAAGJ,EAAqB,YAAIC,GAC1DI,EAAiC,UAAGL,EAAqB,eACzDM,EAA8B,UAAGN,EAAqB,qB,gNCqB7DO,GAAgB,IAAAC,eAAkC,MAE3CC,EAAoC,SAAC,G,IAAEC,EAAQ,WACpDC,GAAQ,IAAAC,eAAuCT,GACrD,IAAKQ,EACH,MAAME,MAAM,kDAEd,IAAMC,EACHH,EAAMI,OAAOC,IACZd,EAA4Be,SAASN,EAAMI,OAAOC,UAC3BE,IAAzBP,EAAMI,OAAOI,aACTD,EACAP,EAAMI,OAAOC,GACLI,GAAa,QAASN,GAAiB,KAC/C,GAA8B,IAAAO,eACbH,IAArBJ,GAAkCH,EAAMW,SADnCC,EAAU,KAAEC,EAAa,KAG1B,GAA4B,IAAAH,UAAiC,WAA5DI,EAAS,KAAEC,EAAY,KACxBC,GAAU,IAAAC,UAEVC,GAAiB,IAAAC,cAAY,SAACC,GAClCP,GAAc,SAACQ,GACb,IAAMT,OAA0BL,IAAba,EAAyBA,GAAYC,EAIxD,OAHmB,IAAfT,GAAwBI,EAAQM,SAClCN,EAAQM,UAEHV,CACT,GACF,GAAG,KAEH,IAAAW,YAAU,WACHd,GACHI,GAAc,EAElB,GAAG,CAACJ,IAEJ,IAAMe,GAAQ,IAAAC,UAAQ,WAGpB,MAAO,CACLtB,iBAAgB,EAChBW,UAAS,EACTC,aAAY,EACZH,gBAN4CL,IAArBJ,GAAkCS,EAOzDM,eAAc,EACdF,QAAO,EAEX,GAAG,CAACF,EAAWF,EAAYT,EAAkBe,IAE7C,OACE,SAACtB,EAAc8B,SAAQ,GAACF,MAAOA,GAAK,WAClC,SAAC,KAAmB,GAClBf,SAAUA,EACVK,UAAWA,EACXa,YAAaZ,EACbH,WAAYA,EACZI,QAAS,WAAM,OAAAE,GAAe,EAAf,GAAqB,UAEnCnB,OAIT,EAEO,SAAS6B,EAAUZ,GACxB,IAAMa,GAAU,IAAAC,YAAWlC,GAE3B,OADAiC,EAAQb,QAAQM,QAAUN,EACnBa,CACT,C,+NC3FaE,EAER,SAAC,G,IAAEhC,EAAQ,WAAEiC,EAAW,cAEnBC,GAAQ,IAAAC,eAAa,IAE7B,OACE,SAAC,EAAAC,cAAa,GACZC,UAAW,CAACH,GACZI,eAAgB,WAAM,gBAACC,EAAqB,CAACN,YAAaA,GAApC,GAAmD,UAExEjC,IAGP,EAEMuC,EAAwE,SAAC,G,IAC7EN,EAAW,cAEHO,GAAU,UAA4B,MAE9C,OADA,IAAAhB,YAAU,WAAM,OAAAgB,CAAA,GAAO,CAACA,KACjB,SAAC,EAAAC,SAAQ,CAACC,GAAIT,GACvB,E,sDCHaU,EAA8D,SAAC,G,IAC1EC,EAAiB,oBAGXC,GAAU,IAAAC,cACRC,GAAwB,IAAAhB,YAAW,EAAAiB,mBAAkB,oBAEvD,EACJnB,GACE,IAAAT,cAAY,WAEVyB,EAAQI,QAAQ,UAAG3D,GACrB,GAAG,CAACuD,KALAzC,EAAgB,mBAAEe,EAAc,iBAAEH,EAAY,eAAEH,EAAU,aAQ5DqC,GAAS,UAET,GACJ,EAAAC,EAAA,KADMC,EAAI,OAAEC,EAAO,UAAEC,EAAa,gBAAEC,EAAkB,qBAElDC,GAAuB,IAAApC,cAC3B,WAAM,OAAAmC,EAAmB,EAAGF,EAAtB,GACN,CAACA,EAASE,IAGNE,GAAa,EAAAC,EAAA,GAAwB,QAASF,GAC9CG,GAAc,EAAAD,EAAA,GAAwB,SAAUF,GAChDI,GAAgB,EAAAF,EAAA,GACpB,WACAF,GAGI,GAA0C,EAAAK,EAAA,GAC9C,KACAX,EAAOY,OACP,YACA,QAJKC,EAAgB,KAAEC,EAAI,KAAEC,EAAa,KAOpCC,GAAS,QAAU,CACzBd,KAAI,EACJC,QAAO,EACPc,KAAMV,EAAWW,MACjBC,MAAOV,EAAYS,MACnBE,OAAQV,EAAcQ,MACtBJ,KAAMA,GAAQ,YACdO,UAAWN,IACX,KAEIO,GAAoB,IAAApD,cAAY,WACpCqC,EAAWgB,aACTd,EAAYc,aACVb,EAAca,aAAalB,EAAmB,EAAGF,MAEnD,EAEJ,GAAG,CAACI,EAAYE,EAAaN,EAASE,EAAoBK,IAEpDc,GAAa,IAAAtD,cACjB,SAACd,EAAYqE,GACPvE,IAAqBE,GAAMO,EAC7BM,GAAe,IAGf0B,EAAQI,QAAQ,UAAG3D,EAAqB,YAAIgB,IAC5Ca,GAAe,GACfH,EAAa2D,GAEjB,GACA,CAAC9B,EAAShC,EAAYT,EAAkBY,EAAcG,IAGlDyD,GAAmD,IAAAxD,cACvD,SAACV,GACCgE,EAAWhE,EAASJ,GAAI,UAC1B,GACA,CAACoE,IAGGG,GAAuD,IAAAzD,cAC3D,SAACV,GACCgE,EAAWhE,EAASJ,GAAI,cAC1B,GACA,CAACoE,IAGGI,GAAW,IAAA1D,cAAY,WAE3ByB,EAAQkC,KAAK,UAAGrF,GAClB,GAAG,CAACmD,IAEEmC,GAAW,IAAA5D,cACf,SAAC,G,IAAEd,EAAE,KAEHuC,EAAQkC,KAAK,UAAGzF,EAAqB,YAAIgB,EAAE,WAC7C,GACA,CAACuC,IAEGoC,GAAgB,IAAA7D,cACpB,SAAC,G,IAAEd,EAAE,KAEHuC,EAAQkC,KAAK,UAAGzF,EAAqB,YAAIgB,EAAE,iBAC7C,GACA,CAACuC,IAGGqC,GAAoB,IAAA9D,cACxB,WAAM,OAAA2B,GAAuBA,EAAoB,kBAA3C,GACN,CAACA,IAGH,OACE,iCACE,SAAC,KAAkB,KACnB,SAAC,KAAc,CACboC,UAAWjB,aAAI,EAAJA,EAAMiB,UACjBC,UAAWlB,aAAI,EAAJA,EAAMmB,MACjBjC,KAAMA,EACNC,QAASA,EACTiC,MAAO7B,EAAWW,MAClBmB,OAAQ5B,EAAYS,MACpBoB,SAAU5B,EAAcQ,MACxBL,iBAAkBA,EAClB0B,aAAcnC,EACdoC,aAAcjC,EAAWkC,IACzBC,iBAAkBnC,EAAWoC,OAC7BC,kBAAmBrC,EAAWsC,MAC9BC,cAAerC,EAAYgC,IAC3BM,kBAAmBtC,EAAYkC,OAC/BK,mBAAoBvC,EAAYoC,MAChCI,eAAgBvC,EAAcwC,OAC9BC,mBAAoBzC,EAAciC,OAClCS,oBAAqB1C,EAAcmC,MACnCvB,kBAAmBA,EACnBS,cAAeA,EACfD,SAAUA,EACVF,SAAUA,EACVyB,cAAe,SAAC,GAAY,OAAP,MAAWjG,KAAOF,CAAX,EAC5BwC,kBAAmBA,EACnB4D,UAAW5B,EACX6B,aAAc5B,EACd6B,yBAA0B,WAE1B,EACAC,mBAAoB,WAEpB,EACAC,oBAAqB,WAErB,EACA1B,kBAAmBA,EACnB2B,oBAAqB,SAAC,G,IAAEvC,EAAM,SAAO,qBAAuBA,EAAvB,EACrCwC,kBAAmB,SAAC,G,IAAExC,EAAM,SAAO,qBAAuBA,EAAvB,EACnCyC,eAAgB,WAAM,UACtBC,UAAW,WAAM,cAIzB,E,6jDC3KaC,EAET,SAAC,G,IAAEC,EAAa,gBAEZrE,GAAU,IAAAC,cACVqE,ECND,WAAP,WACUC,GAAS,EAAAC,EAAA,KAAW,KAEtBC,GAAc,IAAAlG,cAAY,gD,4DACZ,SAAMgG,EAAKG,W,OAC7B,OADMC,EAAgD,QAApC,EAAqB,QAAtB,EAAC,gBAAqB,eAAEC,SAASC,YAAI,eAAEF,UAIjD,CAAP,EAAOA,GAFE,CAAP,EAAOG,QAAQC,OAAO,iB,SAGvB,CAACR,IAEES,GACJ,UAEIC,GAAqB,SAA2B,GAChDC,GAA4B,UAC5BC,GAAmB,UACnBC,GAA0B,UAE1BC,GAA6B,IAAA9G,cAGjC,SAAO,G,IAAE+G,EAAW,cAAEC,EAAM,SAAEC,EAAa,gB,uFAErB,O,sBAAA,GAAMR,EAAgCP,I,cAAtC,SAGhBa,IAEAC,I,6BAGFC,I,gCAGJ,CAACR,EAAiCP,IAG9BgB,GAAqB,IAAAlH,cAGzB,SAAO,G,IAAEmH,EAAgB,mBAAEC,EAAkB,qBAAEC,EAAY,e,qGAOnD,O,sBAAA,GAAMX,K,cALJ,EAKF,SAJFY,EAAa,gBACbC,EAAqB,wBACrBC,EAAyB,4BACzBC,EAAwB,gCAIMrI,IAA9BoI,QAC0BpI,IAA1BmI,EAGuC,KAApCC,GAA6B,IACG,KAAhCD,GAAyB,GAE1BF,EAAa,CACXK,MAAO,CACLD,yBAAwB,KAI5BN,EAAiB,CACfO,MAAO,CACLH,sBAAqB,EACrBC,0BAAyB,EACzBC,yBAAwB,KAK9BL,EAAmB,CAAEE,cAAa,I,6BAGpCF,EAAmB,CAAEE,eAAe,I,gCAGxC,CAACZ,IAGGiB,GAA4B,IAAA3H,cAGhC,SAAO4H,EAAM,G,IAAEb,EAAW,cAAEE,EAAa,gB,6FAEnB,O,sBAAA,GAAMN,EAA0BiB,I,cAA5CC,EAAY,SAClBd,EAAYc,G,6BAEZZ,I,gCAGJ,CAACN,IAGGmB,GAAmB,IAAA9H,cAGvB,SAAO+H,EAAUC,GAAM,qC,0DACC,SAAMpB,EAAiB,a,OAI7C,OAJMqB,EAAgB,UAChBC,EAAeD,EAAcJ,UAAUM,MAC3C,SAACC,GAAM,OAAAA,EAAElJ,KAAO6I,CAAT,KAKF,CAAP,EAAOlB,EAAwBqB,EAAcF,EAAQ,aAF5C,CAAP,EAAOzB,QAAQC,OAAO,2B,SAI1B,CAACK,EAAyBD,IAGtByB,GAAgB,IAAArI,cACpB,SAAO+H,EAAUC,GAAM,qC,8DAIH,O,sBAAA,GAAMF,EAAiBC,EAAUC,I,OACjD,GAA6B,KAD7BM,EAAgB,UACEC,OAChB,MAAM,IAAIxJ,MAAM,2B,mCAKlBuJ,EAAgB,CACd,CAAEpJ,GAAI,IAAKsJ,YAAa,IAAKd,MAAO,GACpC,CAAExI,GAAI,IAAKsJ,YAAa,IAAKd,MAAO,I,aAGlB,SAAMd,EAAiB,c,OAI7C,OAJMqB,EAAgB,UAChBC,EAAeD,EAAcJ,UAAUM,MAC3C,SAACC,GAAM,OAAAA,EAAElJ,KAAO6I,CAAT,KAKU,GAAMlB,EACvBqB,EACAF,EACA,cALO,CAAP,EAAOzB,QAAQC,OAAO,2B,OAOxB,OALMiC,EAAa,SAKZ,CAAP,EAAO,CACLC,SAAUJ,EACVK,MAAOF,EAAW,K,SAGtB,CAAC5B,EAAyBD,EAAkBkB,IAE9C,MAAO,CACLhB,2BAA0B,EAC1BI,mBAAkB,EAClBS,0BAAyB,EACzBG,iBAAgB,EAChBO,cAAa,EAEjB,CDrJoBO,GACZC,GAAsB,UACtBC,GAAY,IAAAnI,YAAW,EAAAiB,mBAEvBmH,EAAuB,WAE3BtH,EAAQkC,KAAK,WACf,EAEMqF,GAAoB,IAAAhJ,cAAY,WACpC8I,EAAUnH,qBACRmH,EAAUnH,oBAAoB,kBAClC,GAAG,CAACmH,IAEEpF,GAAW,IAAA1D,cACf,SAAUV,EAAU2J,EAAWC,GAMxBL,EAAoBM,YAAY,CACnC7J,SAAQ,EACR2J,UAPkB,WAClBA,IAEAxH,EAAQkC,KAAKzF,EACf,EAIEgL,QAAO,GAEX,GACA,CAACL,EAAqBpH,IAGlB2H,GAAW,IAAApJ,cAAY,WAE3ByB,EAAQkC,KAAKmC,EACf,GAAG,CAACrE,EAASqE,IAEb,OACE,SAACuD,EAAA,EAAmB,KACdtD,EAAS,CACbuD,aAAa,EACbF,SAAUA,EACVG,iBAAkBR,EAClBA,qBAAsBA,EACtBC,kBAAmBA,EACnBtF,SAAUA,EACV8F,8BAA+BT,EAC/BU,sBAAuBV,EACvBW,wBAAyBC,SAASC,SAASC,KAAO,eAClDC,SAAU,WACR,OAACH,SAASI,eAAe,2BACzBJ,SAASK,IADT,IAKR,EEhEO,SAASC,IACd,IAAMpL,GAAQ,IAAAC,eAAuCT,GACrD,IAAKQ,EACH,MAAME,MAAM,uDAGd,MAAO,CAAEO,UADkB,QAAST,EAAMI,OAAOC,IAAI,GAAK,KACGL,MAAK,EACpE,CCHO,IAAMqL,EAET,SAAC,G,IAAEpE,EAAa,gBAEZrE,GAAU,IAAAC,cAERpC,EAAa2K,IAAqB,SACpC,GAAyC,UAAvCd,EAAW,cAAagB,EAAU,YAEpCf,GAAW,IAAApJ,cAAY,WAE3ByB,EAAQkC,KAAKmC,EACf,GAAG,CAACrE,EAASqE,IAEPlC,GAAW,IAAA5D,cAAY,WACtBmJ,EAAY,CACfjK,GAAII,EAASJ,GACbgK,QAAS,WAET,EACAD,UAAW,WAETxH,EAAQI,QAAQiE,EAClB,GAEJ,GAAG,CAACqD,EAAa1H,EAASnC,aAAQ,EAARA,EAAUJ,GAAI4G,IAExC,OACE,SAAC,KAAmB,CAClBwD,aAAa,EACba,WAAYA,EACZf,SAAUA,EACVxF,SAAUA,EACVwG,aACE,cAAuB9K,EAAS4D,QAAU5D,EAASyD,UAAO3D,EAE5D0K,SAAU,WACR,OAACH,SAASI,eAAe,2BACzBJ,SAASK,IADT,GAKR,ECzCaK,EAET,SAAC,G,IAAEvE,EAAa,gBAEZrE,GAAU,IAAAC,cAERpC,EAAa2K,IAAqB,SAC5BK,GAAa,QAAgB,CAAC,GAAE,KACxCC,GAAiB,UAEjBnB,GAAW,IAAApJ,cAAY,WAE3ByB,EAAQkC,KAAKmC,EACf,GAAG,CAACrE,EAASqE,IAEP0E,GAAY,IAAAxK,cAChB,SAACyK,GACCF,EAAeG,OACb,CACExL,GAAII,EAASJ,GACbyL,QAAS,CAAE1H,MAAOwH,IAEpB,CACExB,UAAW,WAETxH,EAAQI,QAAQiE,EAClB,GAGN,GACA,CAACrE,EAASnC,EAASJ,GAAI4G,EAAeyE,IAGlCK,EACAL,EAAeM,UAAkB,SACjCN,EAAeO,QACoB,iBAA9BP,EAAeQ,MAAMC,KACxB,eACA,gBAEC,OAGT,OACE,SAAC,KAAgB,CACfC,aAAc3L,EAAS2D,MACvBqH,SAAUA,aAAQ,EAARA,EAAUA,SAASY,KAAI,SAACC,GAAM,OACtCjM,GAAIiM,EAAE/E,SACNoC,YAAa2C,EAAE3C,YAFuB,IAIxCgC,UAAWA,EACXpB,SAAUA,EACVwB,YAAaA,GAGnB,E,gNCjDaQ,EAA4C,WACvD,OACE,UAAC,EAAAC,MAAK,GAACC,KAAMjN,EAAuBkN,OAAK,eACvC,SAAC,EAAAF,MAAK,GAACC,KAAMhN,GAA2B,WACtC,SAACuH,EAAwB,CAACC,cAAe,gBAE3C,UAAClF,EAAmB,GAACC,YAAa,WAAS,YACzC,SAAC,EAAAwK,MAAK,GAACC,KAAM/M,GAA8B,WACzC,SAAC2L,EAAwB,CAACpE,cAAe,gBAE3C,SAAC,EAAAuF,MAAK,GAACC,KAAM9M,GAA2B,WACtC,SAAC6L,EAAgB,CAACvE,cAAe,oBAGrC,SAACvE,EAAmB,CAClBC,kBAAmB,SAAClC,GAAa,wBAAWA,EAASJ,GAAE,WAAtB,OAIzC,E,sBChCasM,EACX,UAAGtN,EAAqB,gBAIbuN,EACX,UAAGvN,EAAqB,kCCJnB,SAASwN,IACd,IAAM7M,GAAQ,IAAAC,eAAoC0M,GAClD,IAAK3M,EACH,MAAME,MAAM,oDAGd,MAAO,CAAEO,UADkB,QAAST,EAAMI,OAAOC,IAAI,GAAK,KACGL,MAAK,EACpE,CCFO,IAAM8M,EAET,SAAC,G,IAAE7F,EAAa,gBAAE8F,EAAa,gBAE3BnK,GAAU,IAAAC,cACV,EAAmCjB,IAAjCb,EAAY,eAAEG,EAAc,iBAE9B,EAGF2L,IAFFpM,EAAQ,WACCuM,EAAG,YAGRC,EAAe,CACnBC,UAAW,UAAGF,EAAG,cACjBG,OAAQ,UAAGH,EAAG,WACdI,SAAU,UAAGJ,EAAG,oBAChBK,YAAa,UAAGL,EAAG,SACnBM,SAAU,UAAGN,EAAG,cAGZjI,GAAW,IAAA5D,cAAY,WAG3ByB,EAAQkC,KAAK,UAAGmC,EAAa,YAAIxG,EAASJ,GAAE,WAC9C,GAAG,CAACuC,EAASnC,EAAUwG,IAEvB,OACE,SAAC,IAAe,CACdA,cAAeA,EACfsE,cAAc9K,aAAQ,EAARA,EAAUyD,OAAQ,GAChC6I,cAAeA,EACfE,aAAcA,EACd1G,UAAW,WACTxF,EAAa,WACbG,GAAe,EACjB,EACAsF,aAAc,WACZzF,EAAa,eACbG,GAAe,EACjB,EACA2F,oBACEpG,GAAW,cAAuBA,aAAQ,EAARA,EAAU4D,QAE9CyC,gBAAgB,EAChB9B,cAAe,WAAM,UACrB+B,WAAW,EACXhC,SAAUA,GAGhB,ECtDawI,EAAgE,SAAC,G,IAC5EtG,EAAa,gBAEb,OACE,iCACE,SAAC6F,EAAwB,CACvB7F,cAAeA,EACf8F,cAAe,iBAEjB,SAAC,EAAAS,YAAW,qBAGlB,ECJaC,EAET,SAAC,G,IAAExG,EAAa,gBACZhE,GAAS,UAEPxC,EAAaoM,IAAkB,SACjC,GACJ,EAAA3J,EAAA,KADMC,EAAI,OAAEC,EAAO,UAAEC,EAAa,gBAAEC,EAAkB,qBAElDC,GAAuB,IAAApC,cAC3B,WAAM,OAAAmC,EAAmB,EAAGF,EAAtB,GACN,CAACA,EAASE,IAGNoK,GAAa,EAAAjK,EAAA,GAAwB,QAASF,GAC9C,GAA0C,EAAAK,EAAA,GAC9C,KACAX,EAAOY,QAFFC,EAAgB,KAAEC,EAAI,KAAEC,EAAa,KAIpCC,GAAS,QAAU,CACzB5D,GAAII,aAAQ,EAARA,EAAUJ,GACdsN,SAAUlN,aAAQ,EAARA,EAAUkN,SACpBxK,KAAI,EACJC,QAAO,EACPW,KAAMA,QAAQxD,EACd+D,UAAWN,EACX4J,OAAQF,EAAWvJ,MAAM,GACzB4E,KAAMtI,EAASsI,OACf,KACF,OACE,iCACE,SAAC+D,EAAwB,CACvB7F,cAAeA,EACf8F,cAAe,YAEjB,SAAC,KAAW,CACVI,OAAQlJ,aAAI,EAAJA,EAAMkJ,OACdhI,UAAWlB,aAAI,EAAJA,EAAMmB,MACjBjC,KAAMA,EACNC,QAASA,EACTyK,UAAWH,EAAWvJ,MACtB2J,eAAgB,SAACC,GAAQ,yBAAYA,EAAI7J,KAAhB,EACzBJ,iBAAkBA,EAClBiB,SAAU,WAEV,EACAiJ,OAAQ,WAER,EACAC,cAAe,SAACzM,GACdkM,EAAW5H,QACX4H,EAAWvH,OAAO3E,EACpB,EACA+C,kBAAmBmJ,EAAW5H,MAC9BoI,cAAe,WAEf,EACA1I,aAAcnC,EACd8K,kBAAmBT,EAAW5H,MAC9BsI,mBAAoBV,EAAW5H,MAC/BuI,iBAAkB,WAElB,MAIR,ECrEaC,EAET,SAAC,G,IAAErH,EAAa,gBACVxG,EAAaoM,IAAkB,SACjCnB,GAAiB,UAEjB6C,GAA2B,IAAApN,cAG/B,SAAOqN,GAAuB,O,OAAA,E,OAAA,E,EAAA,W,0mCAE1B,O,sBAAA,GAAM9C,EAAepB,YAAY,CAC/BjK,GAAII,EAASJ,GACbyL,QAAS,CAAE2C,yBAA0BD,M,OAEvC,OAJA,SAIO,CAAP,EAAOA,G,OAEP,O,SAAO,CAAP,EAAO/N,EAASiO,QAAQD,0B,kCARE,K,gRAW9B,CAAChO,EAAUiL,IAEb,OACE,iCACE,SAACoB,EAAwB,CACvB7F,cAAeA,EACf8F,cAAe,cAEjB,SAAC,KAAY,CACXwB,yBAA0BA,EAC1BC,wBAAyB/N,EAASiO,QAAQD,6BAIlD,E,kkDCxBaE,GAET,SAAC,G,IAAE1H,EAAa,gBACZ,EAGF4F,IAFFpM,EAAQ,WACCL,EAAM,eAEX,GAA4D,IAAAM,WAChE,WADKkO,EAAyB,KAAEC,EAA4B,KAIxDC,GAAe,IAAA3N,cAAY,WAC/B0N,GAA6B,IAC7B,SACF,GAAG,IAEGE,GAAgB,UAChBC,GAAmB,UACnBC,GAAuB,UACvBC,GAAoB,UACpBC,GAAc,UAEdC,GAA+C,IAAAjO,cAAY,sD,yDAClD,SAAM6N,EAAiB5O,EAAOC,K,OAC3C,OADMgP,EAAO,SACN,CAAP,WACKA,GAAI,CACPC,qBAAsB7O,EAAS8O,eAAiB,K,SAEjD,CAAC9O,EAAUL,EAAOC,GAAI2O,IAEnBQ,GACJ,IAAArO,cACE,SAAO,G,IAAEsO,EAAQ,WAAEC,EAAQ,W,0GACG,SAAMhI,QAAQiI,IAAI,CAC5CZ,EAAc3O,EAAOC,IACrB4O,EAAqB,CAAE5O,GAAID,EAAOC,GAAIqP,SAAQ,EAAED,SAAQ,O,OAE1D,OAJM,EAAsB,SAArBhP,EAAQ,KAAEmP,EAAO,KAInBnP,EAGE,CAAP,WACKmP,GAAO,CACVC,iBAC2C,QAAxC,EAAApP,EAASiO,QAAQoB,+BAAuB,eAAEC,QAAS,GAAK,WAC3DC,iBAAkBvP,EAASwP,aAAe,EAC1CC,oBAAqBzP,EAAS0P,gBAAkB,KAPzC,CAAP,EAAOzI,QAAQC,OAAO,4B,SAU1B,CAACvH,EAAOC,GAAI0O,EAAeE,IAGzBmB,GAAqD,IAAAjP,cACzD,SAAO,G,IAAEsO,EAAQ,WAAEC,EAAQ,WAAEW,EAAa,gB,0GACZ,SAAM3I,QAAQiI,IAAI,CAC5CZ,EAAc3O,EAAOC,IACrB6O,EAAkB,CAAE7O,GAAID,EAAOC,GAAIqP,SAAQ,EAAED,SAAQ,EAAEY,cAAa,O,OAEtE,OAJM,EAAsB,SAArB5P,EAAQ,KAAEmP,EAAO,KAInBnP,GAAaA,EAASkN,SAIzB,GAAMwB,EAAY,CAChB9O,GAAII,EAASJ,GACbsN,SAAUlN,EAASkN,SACnBxK,KAAM,EACNC,QAAS,IACT2F,KAAMtI,EAASsI,QARV,CAAP,EAAOrB,QAAQC,OAAO,4B,OAWxB,OATM2I,EACJ,SAOAnD,OAAOd,KAAI,SAACkE,GAAM,OAAAA,EAAErM,IAAF,IACb,CAAP,WACK0L,GAAO,CACVU,YAAW,K,SAGf,CAAClQ,EAAOC,GAAI0O,EAAeG,EAAmBC,IAGhD,OACE,iCACE,SAACrC,EAAwB,CACvB7F,cAAeA,EACf8F,cAAe,eAEjB,SAAC,KAAO,CACNmB,cAAe,WAEf,EACAY,aAAcA,EACdF,0BAA2BA,EAC3BY,wBAAyBA,EACzBY,iBAAkBA,EAClBhB,cAAeA,MAIvB,EClGaoB,GAET,SAAC,G,IAAEvJ,EAAa,gBACVxG,EAAaoM,IAAkB,SACjC,GACJ,EAAA3J,EAAA,KADMC,EAAI,OAAEC,EAAO,UAAEC,EAAa,gBAAEC,EAAkB,qBAElDC,GAAuB,IAAApC,cAC3B,WAAM,OAAAmC,EAAmB,EAAGF,EAAtB,GACN,CAACA,EAASE,IAGNmN,GAAe,EAAAhN,EAAA,GACnB,WACAF,GAEI,GAA0C,EAAAK,EAAA,GAC9C,KACA,CACEM,KAAM,aAER,OACA,QANKJ,EAAgB,KAAEC,EAAI,KAAEC,EAAa,KAQpCC,GAAS,QAAkB,CACjC5D,GAAII,aAAQ,EAARA,EAAUJ,GACdsN,SAAUlN,aAAQ,EAARA,EAAUkN,SACpBxK,KAAI,EACJC,QAAO,EACPW,KAAMA,QAAQxD,EACd+D,UAAWN,EACX0M,QAASD,EAAatM,MAAM,KAC5B,KACF,OACE,iCACE,SAAC2I,EAAwB,CACvB7F,cAAeA,EACf8F,cAAe,cAEjB,SAAC,KAAc,CACb4D,UAAW1M,aAAI,EAAJA,EAAM2M,OACjBzL,UAAWlB,aAAI,EAAJA,EAAMmB,MACjBjC,KAAMA,EACNC,QAASA,EACTqN,aAAcA,EAAatM,MAC3BmC,cAAe,WAAM,UACrBxC,iBAAkBA,EAClBiB,SAAU,WAEV,EACA8L,iBAAkB,SAACrP,GACjBiP,EAAa3K,QACb2K,EAAatK,OAAO3E,EACtB,EACA+C,kBAAmBkM,EAAa3K,MAChCN,aAAcnC,EACdyN,qBAAsBL,EAAa3K,MACnCiL,sBAAuBN,EAAa3K,MACpCkL,gBAAiB,WAEjB,EACAC,kBAAmB,WAEnB,MAIR,EC5EO,SAASC,KACN,IAAAzQ,EAAaoM,IAAkB,SACjC7M,GAAQ,IAAAC,eACZ2M,GAEF,IAAK5M,EACH,MAAME,MAAM,oDAYd,MAAO,CACLO,SAAQ,EACR0Q,OAZsB,QACtB,CACE9Q,GAAII,EAASJ,GACbsN,SAAUlN,EAASkN,SACnBE,UAAW7N,EAAMI,OAAOyN,UACxB9E,KAAMtI,EAASsI,OAEjB,GACD,KAKC/I,MAAK,EAET,CCnBO,IAAMoR,GAET,SAAC,G,IACHC,EAAmB,sBACnBC,EAAkB,qBAClBrK,EAAa,gBACb8F,EAAa,gBAGPnK,GAAU,IAAAC,cACV,EAAmCjB,IAAjCb,EAAY,eAAEG,EAAc,iBAC9B,EAIFgQ,KAHFzQ,EAAQ,WACR0Q,EAAK,QACInE,EAAG,YAGRuE,EAAW,CACfnE,SAAU,UAAGJ,EAAG,oBAChBwE,SAAU,UAAGxE,EAAG,aAChByE,WAAY,UAAGzE,EAAG,eAClB0E,QAAS,UAAG1E,EAAG,aAGXjI,GAAW,IAAA5D,cAAY,WAG3ByB,EAAQkC,KAAK,UAAGmC,EAAa,YAAIxG,EAASJ,GAAE,WAC9C,GAAG,CAACuC,EAASnC,EAAUwG,IAEvB,OACE,SAAC,KAAoB,CACnBA,cAAeA,EACfsE,aAAc9K,EAASyD,KACvByN,mBAAoBN,EAAoB5Q,EAASJ,IACjDiR,mBAAoBA,EAAmB7Q,EAASJ,IAChD0M,cAAeA,EACfc,UAAWsD,EAAMjN,KACjBqN,SAAUA,EACVhL,UAAW,WACTxF,EAAa,WACbG,GAAe,EACjB,EACAsF,aAAc,WACZzF,EAAa,eACbG,GAAe,EACjB,EACA2F,oBACEpG,GAAW,cAAuBA,aAAQ,EAARA,EAAU4D,QAE9CyC,gBAAgB,EAChB9B,cAAe,WAAM,UACrB+B,WAAW,EACXhC,SAAUA,GAGhB,EClDa6M,GAET,SAAC,G,IAAEP,EAAmB,sBAAEC,EAAkB,qBAAErK,EAAa,gBACrD,EAAsBiK,KAApBzQ,EAAQ,WAAE0Q,EAAK,QAEjB,GACJ,EAAAjO,EAAA,KADMC,EAAI,OAAEC,EAAO,UAAEC,EAAa,gBAAEC,EAAkB,qBAGlDC,GAAuB,IAAApC,cAC3B,WAAM,OAAAmC,EAAmB,EAAGF,EAAtB,GACN,CAACA,EAASE,IAGNmN,GAAe,EAAAhN,EAAA,GACnB,WACAF,GAEI,GAA0C,EAAAK,EAAA,GAC9C,KACA,CACEM,KAAM,aAER,OACA,QANKJ,EAAgB,KAAEC,EAAI,KAAEC,EAAa,KASpCC,GAAS,QAAkB,CACjC5D,GAAII,aAAQ,EAARA,EAAUJ,GACdsN,SAAUlN,aAAQ,EAARA,EAAUkN,SACpBxK,KAAI,EACJC,QAAO,EACPW,KAAMA,QAAQxD,EACd+D,UAAWN,EACX0M,QAASD,EAAatM,MAAM,GAC5BgN,MAAOA,EAAMjN,OACb,KAEF,OACE,iCACE,SAACkN,GAA6B,CAC5BnK,cAAeA,EACfoK,oBAAqBA,EACrBC,mBAAoBA,EACpBvE,cAAe,cAEjB,SAAC,KAAc,CACb4D,UAAW1M,aAAI,EAAJA,EAAM2M,OACjBzL,UAAWlB,aAAI,EAAJA,EAAMmB,MACjBjC,KAAMA,EACNC,QAASA,EACTqN,aAAcA,EAAatM,MAC3BmC,cAAe,WAAM,UACrBxC,iBAAkBA,EAClBiB,SAAU,WAEV,EACA8L,iBAAkB,SAACrP,GACjBiP,EAAa3K,QACb2K,EAAatK,OAAO3E,EACtB,EACA+C,kBAAmBkM,EAAa3K,MAChCN,aAAcnC,EACdyN,qBAAsBL,EAAa3K,MACnCiL,sBAAuBN,EAAa3K,MACpCkL,gBAAiB,WAEjB,EACAC,kBAAmB,WAEnB,MAIR,E,mNChFaY,GAET,SAAC,G,IAAER,EAAmB,sBAAEC,EAAkB,qBAAErK,EAAa,gBACrD,EAAsBiK,KAApBzQ,EAAQ,WAAE0Q,EAAK,QACjBW,GAA+B,UAE/BC,GAAc,IAAA5Q,cAClB,SAAOf,GAAM,O,OAAA,E,OAAA,E,EAAA,W,0mCACX,IAAKK,EAASkN,SACZ,MAAMzN,MAAM,6BAEG,SAAM4R,EAA6B,SAC/C1R,GAAM,CACTC,GAAII,EAASJ,GACbsN,SAAUlN,EAASkN,SACnBE,UAAWsD,EAAMjN,S,OAEnB,MAAO,CAAP,EAAO,CACLsN,SAPe,SAQfQ,WAAYb,EAAMa,WAAWtI,S,iBAZpB,K,gRAeb,CACEjJ,EAASkN,SACTlN,EAASJ,GACTyR,EACAX,EAAMjN,KACNiN,EAAMa,WAAWtI,SAIrB,OACE,iCACE,SAAC0H,GAA6B,CAC5BnK,cAAeA,EACfoK,oBAAqBA,EACrBC,mBAAoBA,EACpBvE,cAAe,cAEjB,SAAC,KAAmB,CAACgF,YAAaA,MAGxC,EC7CaE,GAET,SAAC,G,IACHZ,EAAmB,sBACnBC,EAAkB,qBAClBrK,EAAa,gBACbiL,EAAe,kBACfC,EAAe,kBAET,EAAsBjB,KAApBzQ,EAAQ,WAAE0Q,EAAK,QAEvB,OACE,iCACE,SAACC,GAA6B,CAC5BnK,cAAeA,EACfoK,oBAAqBA,EACrBC,mBAAoBA,EACpBvE,cAAe,gBAEjB,SAAC,KAAe,CACdoE,MAAOA,EACPe,gBAAiBA,EAAgBzR,EAASJ,GAAI8Q,EAAMjN,MACpDiO,gBAAiBA,EAAgB1R,EAASJ,GAAI8Q,EAAMjN,UAI5D,E,sPCjBakO,GAET,SAAC,G,IAAEf,EAAmB,sBAAEC,EAAkB,qBAAErK,EAAa,gBACrDoL,GAAS,EAAAjL,EAAA,KACP+J,EAAUD,KAAc,MAK1BoB,EAAa,SAAE,GACnB,OADqB,KAAG,KACtBC,MAAMlG,KACN,SAACmG,GAAM,sCAAyBA,EAAzB,GACR,EACGC,EAAW,oBACXtL,EAAa,CACjBuL,IAAK,CAAEC,SAAUN,EAAOlL,KAAKwL,WAK/B,OACE,iCACE,SAACvB,GAA6B,CAC5BnK,cAAeA,EACfoK,oBAAqBA,EACrBC,mBAAoBA,EACpBvE,cAAe,aAEjB,SAAC,GAAA6F,YAAA,SAAoB,IAACpR,MAAO2F,GAAI,WAC/B,SAAC,GAAA0L,cAAA,SAAsB,IAACrR,MAZP,CACrBkR,IAAK,CAAEI,YAAa,+BAWqB,WACnC,SAACC,GAAAA,aAAY,IACXC,IAAK,KACLC,UAAW,CACTC,GAAI,CACFC,OAAQ,WACN,4CAGF,mBAAoB,WAClB,4CAGFC,kBAAmB,WAAM,6CAG7BC,OAAO,GAAI,WAEX,SAAC,GAAAC,kBAAiB,CAChBC,QAAQ,MACRC,OAAO,2BACPC,MAAM,MACNC,gBAAgB,mCAChBC,UA/CM,SAAE,GAClB,OADoB,KAAG,KACrBpB,MAAMlG,KACN,SAACmG,GAAM,uCAA0BA,EAA1B,GACR,EA6CSC,SAAUA,EACV5E,UAAWsD,EAAMjN,KACjB0P,aAAc,SAACC,GACb,OACE,SAAC,GAAAP,kBAAiB,CAChBC,QAAQ,KACRE,MAAM,KACNC,gBAAgB,mCAChBC,UAAWrB,EACXkB,OAAO,2BACPK,SAAUA,EACVhG,UAAWsD,EAAMjN,KACjBwM,QAAS,KACToD,QAAS,SACTC,WAAYF,aAAQ,EAARA,EAAUxT,GACtBoS,SAAUA,GAGhB,eAOd,E,+NC9EauB,GAAiE,SAAC,GAC7E,IAAAnG,EAAS,YACNoG,E,yUAAK,GAFqE,eAIrE1D,GAAM,IAAA2D,gBAAe,SAAQ,EAErC,OACE,SAACC,GAAA,GAAW,MACNF,EAAK,CACTG,QAAS,cACTC,MAAO9D,EAAE,sBACT+D,kBAAmBzG,GAAS,WAE5B,SAAC,EAAA0G,MAAK,CACJC,GAAI,QACJC,QAAS,uBACTC,WAAY,EAAC,uBACbC,OAAQ,CACN9G,UAAS,OAKnB,EC9Ba+G,GAET,SAAC,G,IAAEC,EAAS,YAAEvD,EAAkB,qBAE5B1O,GAAU,IAAAC,cAEV,EAAsBqO,KAApBzQ,EAAQ,WAAE0Q,EAAK,QACjB,GAAyC,UAAvC7G,EAAW,cAAagB,EAAU,YAEpCf,GAAW,IAAApJ,cAAY,WAE3ByB,EAAQkC,KAAK+P,EAAUpU,EAASJ,GAAI8Q,EAAMjN,MAC5C,GAAG,CAACtB,EAASnC,EAASJ,GAAI8Q,EAAMjN,KAAM2Q,IAEhC9P,GAAW,IAAA5D,cAAY,WAC3B,IAAKV,EAASkN,SACZ,MAAMzN,MAAM,6BAEToK,EAAY,CACfwK,WAAYrU,EAASJ,GACrBsN,SAAUlN,EAASkN,SACnBzJ,KAAMiN,EAAMjN,KACZmG,QAAS,WAET,EACAD,UAAW,WAETxH,EAAQI,QAAQsO,EAAmB7Q,EAASJ,IAC9C,GAEJ,GAAG,CACDI,EAASkN,SACTlN,EAASJ,GACTiK,EACA6G,EAAMjN,KACNtB,EACA0O,IAGF,OACE,SAAC0C,GAAgB,CACfnG,UAAWsD,EAAMjN,KACjBuG,aAAa,EACba,WAAYA,EACZL,SAAU,WACR,OAACH,SAASI,eAAe,2BACzBJ,SAASK,IADT,EAGFpG,SAAUA,EACVwF,SAAUA,GAGhB,ECtDawK,GAET,SAAC,G,IAAE1D,EAAmB,sBAAEC,EAAkB,qBAAErK,EAAa,gBACnDkK,EAAUD,KAAc,MAEhC,OACE,iCACE,SAACE,GAA6B,CAC5BnK,cAAeA,EACfoK,oBAAqBA,EACrBC,mBAAoBA,EACpBvE,cAAe,gBAEjB,SAAC,KAAmB,CAClBoE,MAAOA,EACP5G,SAAU,WAEV,MAIR,E,mNCNM8G,GAAsB,SAAChR,GAC3B,gBAAGhB,EAAqB,YAAIgB,EAAE,WAA9B,EAEIiR,GAAqB,SAACjR,GAC1B,gBAAGhB,EAAqB,YAAIgB,EAAE,kBAA9B,EAEIwU,GAAY,SAACxU,EAAY8Q,GAC7B,gBAAGE,GAAoBhR,GAAG,mBAAW8Q,EAAK,cAA1C,EAEIgB,GAAkB,SAAC9R,EAAY8Q,GACnC,gBAAG0D,GAAUxU,EAAI8Q,GAAM,QAAvB,EAEIe,GAAkB,SAAC7R,EAAY8Q,GACnC,gBAAG0D,GAAUxU,EAAI8Q,GAAM,UAAvB,EAEW6D,GAAyC,WACpD,OACE,SAAC,EAAAxI,MAAK,IAACC,KAAME,GAAkB,WAC7B,SAAC5K,EAAmB,IAACC,YAAa,WAAS,WACzC,UAAC,EAAAiT,OAAM,YACL,SAAC,EAAAzI,MAAK,IAACC,KAAM,UAAGE,EAAkB,cAAcD,OAAK,cACnD,SAACiC,GAAc,CAAC1H,cAAe,gBAGjC,SAAC,EAAAuF,MAAK,IAACC,KAAM,UAAGE,EAAkB,WAAWD,OAAK,cAChD,SAACe,EAAW,CAACxG,cAAe,gBAG9B,SAAC,EAAAuF,MAAK,IAACC,KAAM,UAAGE,EAAkB,oBAAoBD,OAAK,cACzD,SAAC8D,GAAmB,CAACvJ,cAAe,gBAGtC,SAAC,EAAAuF,MAAK,IAACC,KAAM,UAAGE,EAAkB,SAASD,OAAK,cAC9C,SAACa,EAAS,CAACtG,cAAe,gBAG5B,SAAC,EAAAuF,MAAK,IAACC,KAAM,UAAGE,EAAkB,aAAaD,OAAK,cAClD,SAAC4B,EAAa,CAACrH,cAAe,gBAGhC,SAAC,EAAAuF,MAAK,CACJC,KAAM,UAAGE,EAAkB,WAC3BuI,OAAQ,SAAC,G,IAAElV,EAAK,QAAO,OACrB,SAAC+B,EAAmB,IAClBC,YAAasP,GAAmBtR,EAAMI,OAAOC,KAAG,WAEhD,UAAC,EAAA4U,OAAM,YACL,SAAC,EAAAzI,MAAK,IACJC,KAAM,UAAGE,EAAkB,sCAC3BD,OAAK,cAEL,SAACkF,GAAwB,CACvB3K,cAAe,UACfoK,oBAAqBA,GACrBC,mBAAoBA,SAGxB,SAAC,EAAA9E,MAAK,IACJC,KAAM,UAAGE,EAAkB,+BAC3BD,OAAK,cAEL,SAACmF,GAAwB,CACvB5K,cAAe,UACfoK,oBAAqBA,GACrBC,mBAAoBA,SAIxB,SAAC,EAAA9E,MAAK,IACJC,KAAM,UAAGE,EAAkB,sCAC3BD,OAAK,cAEL,SAACqI,GAAwB,CACvB9N,cAAe,UACfoK,oBAAqBA,GACrBC,mBAAoBA,SAGxB,UAAC,EAAA9E,MAAK,IACJC,KAAM,UAAGE,EAAkB,kCAA+B,YAE1D,SAAC,EAAAH,MAAK,IACJC,KAAM,UAAGE,EAAkB,yCAAsC,WAEjE,SAACiI,GAAgB,CACf3N,cAAe,UACfoK,oBAAqBA,GACrBC,mBAAoBA,GACpBuD,UAAWA,GACX1C,gBAAiBA,GACjBD,gBAAiBA,SAGrB,SAACD,GAAoB,CACnBhL,cAAe,UACfoK,oBAAqBA,GACrBC,mBAAoBA,GACpBuD,UAAWA,GACX1C,gBAAiBA,GACjBD,gBAAiBA,UAGrB,SAAC,EAAA1F,MAAK,IACJC,KAAM,UAAGE,EAAkB,8BAC3BD,OAAK,cAEL,SAAC0F,GAAiB,CAChBnL,cAAe,UACfoK,oBAAqBA,GACrBC,mBAAoBA,SAIxB,SAAC,EAAA9O,SAAQ,CACP2S,KAAM,UAAGxI,EAAkB,uBAC3BlK,GAAI,UAAGkK,EAAkB,sCACzBD,OAAK,SA1EU,KAiFzB,SAAC,EAAAlK,SAAQ,CACP2S,KAAM,UAAGxI,GACTlK,GAAI,UAAGkK,EAAkB,cACzBD,OAAK,KAGP,SAAC,EAAAF,MAAK,WACJ,SAAC,EAAA4I,cAAa,cAM1B,EC1JaC,GAAuC,WAClD,OAAO,SAAC,KAAW,GACrB,E,mNCCaC,GAAgC,WAC3C,OACE,UAAC,EAAAL,OAAM,YACL,SAAC,EAAAzI,MAAK,IAACC,KAAM,YAAaC,OAAK,cAC7B,SAAC2I,GAAa,QAEhB,SAAC,EAAA7S,SAAQ,CAAC2S,KAAM,IAAK1S,GAAI,UAAWiK,OAAK,KACzC,SAAC,EAAAF,MAAK,IAACC,KAAM,WAAS,WACpB,UAAC3M,EAAc,YAEb,SAACyM,EAAkB,KACnB,SAACyI,GAAe,WAGpB,SAAC,EAAAxI,MAAK,CAACC,KAAM,GAAIC,OAAK,MAG5B,EC0BA,UApCY,IAAA6I,OAAK,WAEf,IAAM3S,GAAU,IAAAC,cACV,GAA8B,EAAAuE,EAAA,KAA5BoO,EAAmB,sBAAEC,EAAE,KAGzBpB,GAAQ9D,GADA,IAAA2D,kBAAgB,GACd,qBAsBhB,OApBA,IAAA3S,YAAU,YACS,UACRmU,SAAS,CAAEC,cAAe,OAEnCH,EAAoBnB,GAEpB,IAAMuB,EAAaH,EAAG,kBAAkB,SAACI,GACvCC,QAAQC,IAAIF,GACRA,EAAMG,OAERpT,EAAQkC,KAAK,IAAM+Q,EAAMG,OAAU,IAAM,GAAKH,EAAMG,MAExD,IACA,OAAO,WACDJ,GACFA,GAEJ,CACF,GAAG,CAAChT,EAAS6S,EAAIpB,EAAOmB,KAGtB,iCACE,SAAC,KAAmB,KACpB,SAACF,GAAM,MAGb,G,6SCpCMW,EAAW,2BACXC,EAAU,WACd,OAAOD,CACT,EAEaE,EAA0C,WAC/C,OAAsB,IAAAzV,WAAS,GAA9B0V,EAAM,KAAEC,EAAS,KAEhBC,GADO,SACe,YAc9B,OACE,SAAC,EAAAC,cAAA,SAAsB,GAAC/U,MAAO,CAAE0U,QAAO,IAAE,UACtCE,EAUE,MATF,SAAC,EAAA9C,kBAAiB,CAChBC,QAAQ,SACRE,MAAM,SACND,OAAO,qBACPE,gBAAgB,mCAChBC,UAbU,SAAE,GAClB,OADoB,KAAG,KACrBpB,MAAMlG,KACN,SAACmG,GAAM,gBAAGyD,GAAQ,OAAGzD,EAAd,GACR,EAWKgE,YAAY,EACZC,OAtBO,SAACC,GACVJ,IACFD,GAAU,GACVC,EAAYK,IAfW,sBAeQD,GAEnC,MAsBF,C,kRCvCO,SAASE,I,IAAK,sDAMnB,OALW,QAAY,CAAC,EAAG,EAAF,CACvB,KACA,QAAwB,CAAEC,oBAAqB,CAAC,SAAU,YACvDC,GAAU,GAGjB,C,mSCoCMC,EACJ,CACEC,KAAM,OACNC,MAAO,QACPC,OAAQ,SACRC,QAAS,UACTC,qBAAsB,sBACtBC,oBAAqB,sBCxDlB,SAAeC,EACpBC,EACAlX,G,wpCAMiB,OAJb8M,EAAS,EACXqK,EAAkB,EAClBC,EAAiB,EAEF,GAAMF,EAAyBlX,EAAI,CAClD,yCACA,2CACA,qD,OAqBF,OAxBiB,SAM+C4D,KAAKyT,OACnE,IAEUC,SAAQ,SAAC,G,IAAEC,EAAM,SAAEpW,EAAK,QAGlC,OAF2BoW,EAAM,UAG/B,IAAK,yCACHJ,EAAkBhW,EAClB,MACF,IAAK,2CACH2L,EAAS3L,EACT,MACF,IAAK,kDACHiW,EAAiBjW,EAGvB,IACO,CAAP,EAAO,CACLiW,eAAc,EACdD,gBAAe,EACfrK,OAAM,I,oSC3BH,SAAe0K,EAAkB,G,YACtCC,EAAsB,yBACtBzX,EAAE,KACFqP,EAAQ,WACRD,EAAQ,W,yBACyB,W,wnCAChB,SAAMqI,EAAuBzX,EAAIqP,EAAUD,EAAU,CACpE,kCACA,kFACA,6E,OAiDF,OApDMsI,EAAW,SAQXC,GAAiCD,EAAS9T,KAAKyT,OAAS,IAAI9J,QAChE,SAACqK,GAEC,QACEA,EAAEtD,QACFsD,EAAEL,QACFK,EAAEL,OAAOzG,OACT8G,EAAEL,OAAO1T,MACT+T,EAAEL,OAAOM,uBACTD,EAAEL,OAAOM,sBAAsB5X,SAAS,aAN1C,IAUE6X,EAA0C,CAAC,EAC3CC,EAAkD,CAAC,EACnDC,EAA8C,CAAC,EAMrDL,EAAYL,SAAQ,SAACM,GAGnB,SAASK,EAAsBV,GAC7BK,EAAEtD,OAAOgD,SACP,SAAC,G,IAAEnW,EAAK,QAAE+W,EAAS,YACjB,OAACX,EAAOW,GAAa/W,GAASoW,EAAOW,IAAc,EAAnD,GAEN,CAEA,OAT2BN,EAAEL,OAAM,UAUjC,IAAK,kCACHU,EAAsBH,GACtB,MACF,IAAK,kFACHG,EAAsBF,GACtB,MACF,IAAK,0EACHE,EAAsBD,GAG5B,IAEO,CAAP,EAAO,CACLF,qBAAoB,EACpBE,yBAAwB,EACxBD,6BAA4B,EAC5BvI,eA7BiB,EA8BjBK,oBAhC0B,EAiC1BF,iBAhCmB,I,YA3BKtI,W,gRChBrB,SAAS8Q,EACdC,EACA9D,EACA+D,GAEA,OAAO/D,EACJtI,KAAI,SAACsM,GACJ,MAAe,MAAfD,EACI,UAAGD,EAAK,kBAAUE,EAAEC,OAAM,KAC1B,UAAGH,EAAK,cAAME,EAAEC,OAFpB,IAIDC,KAAK,OACV,C,ICLMC,EAEF,CACF5U,KAAM,OACNE,MAAO,QACP8E,SAAU,iBACVC,OAAQ,SACR4P,UAAW,cAcN,SAAeC,EAAY5Y,G,yBAAmC,W,woCAiBvD,OAZV8D,EASE9D,EAAM,KARRiE,EAQEjE,EAAM,OAPRgE,EAOEhE,EAAM,MANR2D,EAME3D,EAAM,KALRkE,EAKElE,EAAM,UAJR+C,EAIE/C,EAAM,KAHRgD,EAGEhD,EAAM,QAFR6Y,EAEE7Y,EAAM,WADR8Y,EACE9Y,EAAM,UACJ+Y,EAiBD,SACLjV,EACAE,EACAC,GAeA,MAboB,CAClBmU,EAAc,OAAQtU,EAAM,KAC5BsU,EAAc,QAASpU,EAAO,KAC9BoU,EACE,SACAnU,EAAO+U,SAAQ,SAACC,GAAM,YAAmBA,EAAnB,IACtB,MAGDzL,OAAO0L,SAEPjN,KAAI,SAACkN,GAAM,iBAAIA,EAAE,IAAN,IACXV,KAAK,QAEV,CApCiBW,CAAgBtV,EAAME,EAAOC,GAEhC,GAAM6U,EAChB/V,EAAKsW,SAAS,IACdrW,EAAQqW,SAAS,IACjB1V,EAAO,UAAG+U,EAAgB/U,GAAK,YAAIO,QAAc/D,EACjD4Y,I,OAIgB,OARZO,EAAM,SAMNC,EAAeD,EAAIzV,KAAKyT,MACxBtS,EAAQsU,EAAIzV,KAAK2V,MACL,GAAMlS,QAAQiI,IAAIgK,EAAatN,IAAI4M,K,OACrD,MAAO,CAAP,EAAO,CACL/T,UAFgB,SAGhBE,MAAK,I,YA5BqDsC,W,8QC+C9D,SAASmS,EACPC,EACAC,GAEA,IAAMV,EAAIU,EACV,MAAO,CACL1Z,GAAIgZ,EAAEhZ,GACNsJ,YAAa0P,EAAEW,aACfnR,MAAOwQ,EAAEY,eACTC,SAAUb,EAAEc,2BAA2BpK,OAAS,GAAK,QACrDqK,QAASf,EAAEgB,0BAA0BtK,OAAS,GAAK,QACnDuK,QAASC,KAAKC,OAAOnB,EAAEvJ,wBAAwBC,OAAS,GAAK,YAC7DE,YAAaoJ,EAAEoB,sBACftK,eAAgBkJ,EAAEqB,gCAClBnL,cAAe8J,EAAEsB,eACjBC,aAAcvB,EAAEwB,iBAAiB9K,OAAS,GAAK,QAC/C1L,OAA8B,WAAtBgV,EAAEyB,gBAA+B,SAAW,UACpDC,mBAAoB1B,EAAE2B,iBAAmB3B,EAAE2B,iBAAmB,GAAK,GAAK,EACxElB,WAAYA,EAAWT,EAAEhZ,IAE7B,C,s2CChDO,SAAe4a,EACpBC,EACAhS,EACAiS,G,sGAEY,SAAMD,EAAwBhS,I,OAE1C,OAFMwQ,EAAM,UAEE,QAAT,EAAAA,aAAG,EAAHA,EAAKzV,YAAI,eAAEyT,OAUT,CAAP,EAN2BgC,EAAIzV,KAAKyT,MAAM9J,QACxC,SAACzE,GACC,OAAAA,EAAOiS,SACPjS,EAAOkS,SAASC,MAAK,SAACC,GAAM,OAAAA,EAAEC,gBAAkBL,CAApB,GAD5B,IAIsB9O,KAAI,SAACoP,G,MACvBC,EAAiC,QAAV,EAAAD,EAAEJ,gBAAQ,eAAEC,MACvC,SAACC,GAAC,MAAK,OAAAA,EAAEC,gBAAkBL,GAA8C,KAAb,QAAjB,EAAAI,EAAEI,uBAAe,eAAEjS,OAAY,IAG5E,MAAO,CACLrJ,GAAIob,EAAEpb,GAENsJ,YAAa8R,EAAEzB,aAEfF,WAAY4B,EACZL,SAAUI,EAAEJ,SAEhB,KAtBS,CAAP,EAAO3T,QAAQC,OAAO,qB,OCrDnB,IAEMiU,EAAe,SAErB,SAASC,EAAgBtC,G,MAC9B,OAA0B,QAAnB,EAAAA,EAAEuC,yBAAiB,eAAExS,MAAK,SAACmS,GAAM,MAAoB,aAApBA,EAAEM,aAAF,GAC1C,CAEO,SAASC,EAAmBzC,G,MACjC,OAA0B,QAAnB,EAAAA,EAAEuC,yBAAiB,eAAExS,MAAK,SAACmS,GAAM,MAAoB,gBAApBA,EAAEM,aAAF,GAC1C,C,oNCHaE,EAAiC,CAC5C,iBAAkB,SAClB,sBAAuB,CAAE9P,KAAM,KAAM3K,MAAO0a,OAAO,aACnD,wBAAyB,CAAE/P,KAAM,KAAM3K,MAAO0a,OAAO,wBACrD,oBAAqB,CAAE/P,KAAM,QAAS3K,MAAO0a,OAAO,YACpD,iCAAiC,EACjC,sCAAuC,CACrC/P,KAAM,KACN3K,MAAO0a,OAAO,wBAEhB,yBAA0B,aAC1B,wBAAyB,CAAE/P,KAAM,KAAM3K,MAAO0a,OAAO,MACrD,kBAAmB,CAAE/P,KAAM,QAAS3K,MAAO0a,OAAO,OAClD,eAAgB,CAAE/P,KAAM,KAAM3K,MAAO0a,OAAO,cAC5C,gBAAiB,CAAE/P,KAAM,QAAS3K,MAAO0a,OAAO,eAChD,aAAc,CAAE/P,KAAM,KAAM3K,MAAO0a,OAAO,cAC1C,mBAAoB,WACpB,uBAAwB,CAAE/P,KAAM,KAAM3K,MAAO0a,OAAO,UACpD,iBAAkB,CAAE/P,KAAM,KAAM3K,MAAO0a,OAAO,wBAC9C,WAAY,CAAE/P,KAAM,KAAM3K,MAAO0a,OAAO,wBACxC,uBAAwB,CAAE/P,KAAM,QAAS3K,MAAO0a,OAAO,SACvD,yBAA0B,UAC1B,4BAA6B,GAC7B,sBAAuB,EACvB,sBAAuB,CAAE/P,KAAM,QAAS3K,MAAO0a,OAAO,aACtD,oBAAqB,CAAE/P,KAAM,KAAM3K,MAAO0a,OAAO,MACjD,kCAAkC,EAClCC,aAAa,GAGFC,EAAgC,CAC3C,iBAAkB,SAClB,sBAAuB,CAAEjQ,KAAM,KAAM3K,MAAO0a,OAAO,aACnD,wBAAyB,CAAE/P,KAAM,KAAM3K,MAAO0a,OAAO,wBACrD,oBAAqB,CAAE/P,KAAM,QAAS3K,MAAO0a,OAAO,YACpD,iCAAiC,EACjC,sCAAuC,CACrC/P,KAAM,KACN3K,MAAO0a,OAAO,wBAEhB,yBAA0B,aAC1B,wBAAyB,CAAE/P,KAAM,KAAM3K,MAAO0a,OAAO,MACrD,kBAAmB,CAAE/P,KAAM,QAAS3K,MAAO0a,OAAO,OAClD,eAAgB,CAAE/P,KAAM,KAAM3K,MAAO0a,OAAO,cAC5C,gBAAiB,CAAE/P,KAAM,QAAS3K,MAAO0a,OAAO,eAChD,aAAc,CAAE/P,KAAM,KAAM3K,MAAO0a,OAAO,cAC1C,mBAAoB,WACpB,uBAAwB,CAAE/P,KAAM,KAAM3K,MAAO0a,OAAO,UACpD,iBAAkB,CAAE/P,KAAM,KAAM3K,MAAO0a,OAAO,wBAC9C,WAAY,CAAE/P,KAAM,KAAM3K,MAAO0a,OAAO,wBACxC,uBAAwB,CAAE/P,KAAM,QAAS3K,MAAO0a,OAAO,SACvD,yBAA0B,UAC1B,4BAA6B,GAC7B,sBAAuB,EACvB,sBAAuB,CAAE/P,KAAM,QAAS3K,MAAO0a,OAAO,aACtD,oBAAqB,CAAE/P,KAAM,KAAM3K,MAAO0a,OAAO,MACjD,kCAAkC,EAClCC,aAAa,GAGR,SAASE,EAAwBtT,GACtC,IAAMuT,EAAa,cAATvT,EAAuBkT,EAAoBG,EAErD,OAAO,SAA0B7L,G,MAC/B,IAAKA,EAAErM,KACL,MAAM,IAAIhE,MAAM,wCAAiCqc,KAAKC,UAAUjM,KAElE,IAAMkM,EAAKC,OAAOC,aACR,QAAR,EAAApM,EAAEqM,cAAM,eAAEvQ,KAAI,SAACkP,GAAM,OAACA,EAAEtZ,IAAyBsZ,EAAE/Z,MAA9B,MAAyC,IAE1Dob,EAAsB,CAC1B,iBAAkBH,EAAG,kBACrB,sBAAuBI,EACrBJ,EAAG,uBACHH,EAAE,wBAEJ,wBAAyBO,EACvBJ,EAAG,yBACHH,EAAE,0BAEJ,oBAAqBQ,EACnBL,EAAG,qBACHH,EAAE,sBAEJ,gCAAiCS,EAC/BN,EAAG,iCACHH,EAAE,kCAEJ,sCAAuCO,EACrCJ,EAAG,uCACHH,EAAE,wCAEJ,yBAA0BG,EACxB,0BAEF,wBAAyBI,EACvBJ,EAAG,yBACHH,EAAE,0BAEJ,kBAAmBQ,EACjBL,EAAG,mBACHH,EAAE,oBAEJ,eAAgBO,EACdJ,EAAG,gBACHH,EAAE,iBAEJ,gBAAiBQ,EACfL,EAAG,iBACHH,EAAE,kBAEJ,aAAcO,EACZJ,EAAG,cACHH,EAAE,eAEJ,mBAAoBG,EAClB,oBAEF,uBAAwBI,EACtBJ,EAAG,wBACHH,EAAE,yBAEJ,iBAAkBO,EAChBJ,EAAG,kBACHH,EAAE,mBAEJ,WAAYO,EAA0BJ,EAAG,YAAaH,EAAE,aACxD,0CACEG,EAAG,2CACL,uBAAwBK,EACtBL,EAAG,wBACHH,EAAE,yBAEJ,wCACEG,EAAG,yCACL,yBAA0BA,EAAG,0BAC7B,4BAA6BO,EAC3BP,EAAG,6BACHH,EAAE,8BAEJ,sBAAuBU,EACrBP,EAAG,uBACHH,EAAE,wBAEJ,sBAAuBQ,EACrBL,EAAG,uBACHH,EAAE,wBAEJ,oBAAqBO,EACnBJ,EAAG,qBACHH,EAAE,sBAEJ,iCAAkCS,EAChCN,EAAG,kCACHH,EAAE,mCAEJH,YAAaY,EAAqBN,EAAgB,YAAGH,EAAe,cAEtE,OAAO,EAAP,CACEpY,KAAMqM,EAAErM,KACR8N,WAAYzB,EAAEyB,YAAc,IACzB4K,EAEP,CACF,CAEA,SAASC,EACPrb,EACAyb,GAEA,OAAOzb,GAASA,EAAMoX,OAAOlP,OAAS,EAClC,CAAEyC,KAAM,KAAM3K,MAAO0a,OAAO1a,EAAMoX,SAClCqE,CACN,CAEA,SAASH,EAAmBtb,EAAeyb,GACzC,OAAOzb,GAASA,EAAMoX,OAAOlP,OAAS,EAClC,CAAEyC,KAAM,QAAS3K,MAAO0a,OAAO1a,EAAMoX,SACrCqE,CACN,CAEA,SAASD,EAAoBxb,EAAe0b,GAC1C,OAAOC,SAAS3b,EAAO,KAAO0b,CAChC,CAEA,SAASH,EAAqBvb,EAAe0b,GAC3C,IACE,IAAMvE,EAAa4D,KAAKa,MAAM5b,GAC9B,GAAiB,kBAANmX,EACT,OAAOA,C,CAET,S,CAGF,OAAOuE,CACT,CC5LO,SAAeG,EAAY,G,YAChCC,EAAS,YACTna,EAAI,OACJC,EAAO,UACPwK,EAAM,SACN7J,EAAI,OACJO,EAAS,YACTyE,EAAI,O,yBACwB,W,knCACX,SAAMuU,OACrB/c,OACAA,EACA6C,EACAwK,EACAzK,EACAmB,EACAP,I,OAMF,OAbMgU,EAAW,SASX5K,GAAU4K,EAAS9T,KAAKyT,OAAS,IAAIrL,IACzCgQ,EAAwBtT,IAGnB,CAAP,EAAO,CAAE3D,MADK2S,EAAS9T,KAAK2V,MACZzM,OAAM,I,YAdDzF,W,kQCRhB,SAAe6V,EAAmB,G,YACvCzF,EAAsB,yBACtBzX,EAAE,KACFqP,EAAQ,WACRD,EAAQ,WACRY,EAAa,gB,yBACqB,W,8nCAGjB,SAAMyH,EAAuBzX,EAAIqP,EAAUD,EAAU,CACpE,oEACA,qEACA,qCACA,0E,OA4DF,OAhEMsI,EAAW,SASXC,GAAiCD,EAAS9T,KAAKyT,OAAS,IAAI9J,QAChE,SAACqK,GAEC,QAAEA,EAAEtD,QAAUsD,EAAEL,QAAUK,EAAEL,OAAOzG,OAAS8G,EAAEL,OAAO1T,KAArD,IAIEsZ,EAAkBxF,EAAYpK,QAAO,SAACqK,GAAC,MAE3C,YAAkB1X,IAAlB8P,IAAsC,QAAR,EAAA4H,EAAEL,cAAM,eAAEzG,SAAUd,CAAoB,IAIlElD,EAASsQ,MAAMtI,KAAK,IAAIuI,IAAI1F,EAAY3L,KAAI,SAAC4L,GAAM,OAAAA,EAAEL,OAAOzG,KAAT,MAEnDwM,EAAmC,CAAC,EACpCC,EAAmC,CAAC,EACpCC,EAA0C,CAAC,EAC3CC,EAAyC,CAAC,EAEhDN,EAAgB7F,SAAQ,SAACM,GACjB,IAUE8F,EAVF,EAA4B9F,EAAEL,OAAlB1T,EAAI,WAAEiN,EAAK,QAE7B,SAAS6M,EAA0BpG,GACjCK,EAAEtD,OAAOgD,SACP,SAAC,G,IAAEnW,EAAK,QAAE+W,EAAS,YACjB,OAACX,EAAOW,GAAa/W,GAASoW,EAAOW,IAAc,EAAnD,GAEN,CAWA,OAAQrU,GACN,IAAK,oEACH8Z,EAA0BL,GAC1B,MACF,IAAK,qEACHK,EAA0BJ,GAC1B,MACF,IAAK,qCAfCG,EAAYF,EAAkB1M,IAAU,CAAC,EAC/C8G,EAAEtD,OAAOgD,SACP,SAAC,G,IAAEnW,EAAK,QAAE+W,EAAS,YACjB,OAACwF,EAAUxF,GAAa/W,GAASuc,EAAUxF,IAAc,EAAzD,IAEJsF,EAAkB1M,GAAS4M,EAYzB,MACF,IAAK,uEACHC,EAA0BF,GAGhC,IAEO,CAAP,EAAO,CACLG,cAAe9Q,EACfyQ,cAAa,EACbD,cAAa,EACbE,kBAAiB,EACjBC,oBAAmB,I,YAxEMpW,W,kQCZtB,SAAewW,EAAkB,G,YACtCC,EAAe,kB,yBACmB,W,knCAIjB,SAAMA,GAAiB,I,OAaxC,OAbMpG,EAAW,SAaV,CAAP,EAAO,CAAE3S,OAZHqG,EAAWsM,EAAS9T,KAAKA,KAAKoI,KAAiB,SAAC9C,GACpD,IAAM6U,EAAa7U,EACnB,MAAO,CACLhC,SAAU6W,EAAW7W,SACrBoC,YAAa,UAAGyU,EAAWC,YAAc,GAAE,YACzCD,EAAWE,WAAa,IACvB1F,OACH2F,MAAOH,EAAWG,MAClBC,WAAYJ,EAAWK,eAAgB,EAE3C,KACuB/U,OACP+B,SAAQ,I,YAjBG/D,W,miBCNvBgX,GAA+B,IAAAC,OAAK,WACxC,sCAAiEC,MAC/D,SAACtC,GAAM,OACLuC,QAASvC,EAAEwC,mBADN,GADT,IAcIC,GAAa,IAAAlf,eAA+B,MAE5C,EAAc,IAAI,IAEXmf,EAAkD,SAAC,GAC9D,IAAAjf,EAAQ,WACL8B,E,yUAAO,GAFoD,cAIxDod,GAAe,UACrB,OACE,SAACC,EAAA,GAAmB,GAACC,OAAQ,GAAW,WACtC,UAACJ,EAAWrd,SAAQ,GAACF,MAAOK,GAAO,WAChC9B,GACD,SAAC,IAAkB,CAACqf,eAAa,IAChCH,IACC,SAAC,EAAAI,SAAQ,GAACC,SAAU,MAAI,WACtB,SAACZ,EAA4B,aAMzC,EAEO,SAASa,IACd,OAAO,IAAAzd,YAAWid,EACpB,C,giBCpCaS,EAAa,CACxBC,MAAO,WAAM,OAAGhM,MAAO,MAAV,EACbiM,aAAc,WACZ,OAAC,OAAKF,EAAWC,SAAO,CAAEE,OAAQ,iBAAlC,EACFC,aAAc,SAACxf,GACb,OAAC,OAAKof,EAAWC,SAAO,CAAEE,OAAQ,iBAAkBvf,EAApD,EACFyI,MAAO,CACL4W,MAAO,WAAM,OAAC,OAAKD,EAAWC,SAAO,CAAEE,OAAQ,SAAlC,EACbE,UAAW,SAACzf,GACV,O,SACOof,EAAW3W,MAAM4W,SAAO,CAAEK,UAAW,cAAgB1f,GAD5D,EAGF2f,sBAAuB,WACrB,O,OACOP,EAAW3W,MAAM4W,SAAO,CAAEK,UAAW,0BAD5C,EAGFE,qBAAsB,WACpB,O,OACOR,EAAW3W,MAAM4W,SAAO,CAAEK,UAAW,yBAD5C,IAMOG,EAAe,CAC1BR,MAAO,WAAM,OAAGhM,MAAO,QAAV,EACbyM,KAAM,SAAC9f,GACL,O,OAEO6f,EAAaR,SAAO,CACvBE,OAAQ,SAEVvf,EALF,EAOFK,SAAU,CACRgf,MAAO,SAAC,G,IAAEpf,EAAE,KAAEsN,EAAQ,WACpB,OAAC,OAAKsS,EAAaR,SAAO,CAAEE,OAAQ,WAAYtf,GAAE,EAAEsN,SAAQ,GAA5D,EACFwS,QAAS,SAAC/f,GACR,O,OACO6f,EAAaxf,SAASgf,MAAMrf,IAAO,CAAE0f,UAAW,YADvD,EAGF3S,OAAQ,SAAC,GACP,IAAA9M,EAAE,KACFsN,EAAQ,WACLvN,EAAM,IAHF,mBAQP,O,OAEO6f,EAAaxf,SAASgf,MAAM,CAAEpf,GAAE,EAAEsN,SAAQ,KAAG,CAChDmS,UAAW,WAEb1f,E,EAEJ+Q,MAAO,SAAC,G,IACN9Q,EAAE,KACFsN,EAAQ,WACRE,EAAS,YAKT,O,OAEOoS,EAAaxf,SAASgf,MAAM,CAAEpf,GAAE,EAAEsN,SAAQ,KAAG,CAChDmS,UAAW,UAEb,CAAEjS,UAAS,GALb,EAOFuS,cAAe,SAAC,GACd,IAAA/f,EAAE,KACFsN,EAAQ,WACRE,EAAS,YACNzN,EAAM,IAJK,+BASd,O,OAEO6f,EAAaxf,SAASgf,MAAM,CAAEpf,GAAE,EAAEsN,SAAQ,KAAG,CAChDmS,UAAW,kB,GAEXjS,UAAS,GAAKzN,G,EAEpBqX,eAAgB,SACdrX,GAKA,O,OAEO6f,EAAaxf,SAASgf,MAAMrf,IAAO,CACtC0f,UAAW,oBAEb1f,EALF,EAOFwP,QAAS,CACP6P,MAAO,SAAC,G,IAAEpf,EAAE,KACV,OAAC,OACI4f,EAAaxf,SAASgf,MAAM,CAAEpf,GAAE,KAAG,CACtCyf,UAAW,UACXzf,GAAE,GAHJ,EAKFggB,IAAK,SAACjgB,GACJ,OAAC,OAAK6f,EAAaxf,SAASgf,MAAMrf,IAAO,CAAE+L,KAAM,QAAjD,EACF1L,SAAU,SAAC,GACT,IAAAJ,EAAE,KACCD,EAAM,IAFA,QAIT,O,OAEO6f,EAAaxf,SAASgf,MAAM,CAAEpf,GAAE,KAAG,CACtC8L,KAAM,aAER/L,E,EAEJ+Q,MAAO,SAAC,GACN,IAAA9Q,EAAE,KACCD,EAAM,IAFH,QAIN,O,OAEO6f,EAAaxf,SAASgf,MAAM,CAAEpf,GAAE,KAAG,CACtC8L,KAAM,UAER/L,E,KAMGkgB,EAAkB,CAC7Bb,MAAO,WAAM,OAAGhM,MAAO,YAAV,EACbyM,KAAM,SAAC9f,GACL,OAAC,SAAKkgB,EAAgBb,SAAO,CAAEE,OAAQ,SAAWvf,GAAlD,EACFmgB,OAAQ,CACNd,MAAO,SAAC,G,IAAEvW,EAAQ,WAChB,OAAC,OACIoX,EAAgBb,SAAO,CAC1BE,OAAQ,SACRzW,SAAQ,GAHV,EAKFW,SAAU,SAAC,G,IAAEX,EAAQ,WAAEC,EAAM,SAA8C,O,OAEpEmX,EAAgBC,OAAOd,MAAM,CAAEvW,SAAQ,KAAG,CAC7CH,KAAM,WACNI,OAAM,IAJiE,EAO3EqX,UAAW,SAAC,G,IACVtX,EAAQ,WACRC,EAAM,SAIF,O,OAECmX,EAAgBC,OAAOd,MAAM,CAAEvW,SAAQ,KAAG,CAC7CH,KAAM,YACNI,OAAM,IAJJ,I,wCClKG,EAAS,WACd,MAA4BoW,IAA1BtJ,EAAQ,WAAEwK,EAAW,cAEvBC,GAAc,IAAAvf,cAClB,WACE,WAAI,EAAAwf,WACF,IAAI,EAAAC,cAAc,CAChBH,YAAW,EACXxK,SAAQ,IAHZ,GAMF,CAACwK,EAAaxK,IAGV2J,GAAe,IAAAze,cAAY,kB,OAAA,E,OAAA,E,EAAA,W,gnCACjB,SAAMsf,K,OACpB,OADMI,EAAQ,SACP,CAAP,EAAO,IAAI,EAAAC,aAAa,CACtBL,YAAaI,EACb5K,SAAU,kB,iBAJmB,K,gRAM9B,CAACwK,IA8CJ,MAAO,CACLC,YAAW,EACXK,SA9Cc,IAAA5f,cACd,WACE,WAAI,EAAA6f,eACF,IAAI,EAAAJ,cAAc,CAChBH,YAAW,EACXxK,SAAQ,IAHZ,GAMF,CAACwK,EAAaxK,IAuCd9I,QApCa,IAAAhM,cACb,SAACwM,GACC,WAAI,EAAAsT,UACF,IAAI,EAAAL,cAAc,CAChBH,YAAW,EACXxK,SAAUtI,IAHd,GAMF,CAAC8S,IA6BDhJ,gBA1BqB,IAAAtW,cACrB,SAACwM,GACC,WAAI,EAAAuT,UACF,IAAI,EAAAN,cAAc,CAChBH,YAAW,EACXxK,SAAUtI,IAHd,GAMF,CAAC8S,IAmBDU,SAhBc,IAAAhgB,cACd,SAACwM,GACC,WAAI,EAAAyT,WACF,IAAI,EAAAR,cAAc,CAChBH,YAAW,EACXxK,SAAUtI,IAHd,GAMF,CAAC8S,IASDb,aAAY,EAEhB,E,gNC1EO,SAASyB,EACdjhB,GAKQ,IAAAkhB,EAAoB/B,IAAqB,gBACzC9H,EAAmB,IAAQ,eAEnC,OAAO,EAAA8J,EAAA,GAAS,CACdC,SAAUvB,EAAaxf,SAASgX,eAAerX,GAC/CqhB,QAAS,WACP,IAAKrhB,EAAOC,GACV,OAAOqH,QAAQC,OAAO,cAExB,IAAKvH,EAAOuN,SACV,OAAOjG,QAAQC,OAAO,oBAExB,IAAM+Z,EAAMjK,EAAerX,EAAOuN,UAElC,OfTC,SAAmC,G,YACxCgU,EAAiB,oBACjBxe,EAAI,OACJC,EAAO,UACP+N,EAAK,QACLT,EAAO,UACP3M,EAAI,OACJO,EAAS,Y,yBAC2B,W,knCAInB,SAAMqd,OACrBphB,OACAA,EACA6C,EACAD,EACAgO,EACAT,EACApM,EACAP,I,OAWF,OAnBMgU,EAAW,SAUXnH,GAAUmH,EAAS9T,KAAKyT,OAAS,IAAIrL,KAAmB,SAACkE,G,UAAM,OACnEG,QAASH,EAAEG,SAAW,GACtBkR,MAAO7K,EAAaxG,EAAEqR,OACtBjR,UAAWJ,EAAEI,UACbkR,gBAA0B,QAAT,EAAAtR,EAAEX,eAAO,eAAEiS,gBAC5BC,kBAA4B,QAAT,EAAAvR,EAAEX,eAAO,eAAEkS,kBAC9BC,qBAA+B,QAAT,EAAAxR,EAAEX,eAAO,eAAEmS,qB,IAG5B,CAAP,EAAO,CAAE3c,MADK2S,EAAS9T,KAAK2V,MACZhJ,OAAM,I,YAvBOlJ,W,kQeClBsa,CAAoB,GACzBL,kBAAmB,W,IAAC,sDAAY,OAAAD,EAAIC,kBAAiB,MAArBD,EAAyBO,EAAzB,GAC7B7hB,GAEP,EACAgb,QAAS9B,QAAQlZ,EAAOuN,WAAa2L,QAAQlZ,EAAOC,IACpDihB,gBAAe,GAEnB,CCnBO,SAASY,GACdzhB,EACAmI,EACAuZ,EACAC,G,QAwF2B/d,EAtFrBge,EAA0C,CAC9CC,aAAS/hB,EACT4P,eAAgB,EAChBF,YAAa,EACb8I,UAAYtY,EAAS8hB,aACnB,IAAIC,MAAOC,cACbrI,OAAQ,EACRsI,WAAYjiB,EAASkiB,WACrBtiB,GAAII,EAASJ,GACb6Z,QAAS,EACT3K,cAAe,EACfqL,YAAa,CAAEzO,KAAM,QAAS3K,MAAO0a,OAAO,IAC5ChY,KAAMzD,EAASyD,MAAQ,GACvBE,MAAO3D,EAAS2D,OAAS,GACzB2E,KAAMtI,EAASsb,cACf7S,SAAUzI,EAASmiB,eACnBzZ,OAAQ1I,EAAS0I,QAAU,GAC3B0Z,KAAM,IACNxe,QAoEyBA,EApEG5D,EAAS4D,QAAU,GAqEN,CACzCye,SAAU,WACVC,UAAW,YACXC,aAAc,eACdC,MAAO,QACPC,OAAQ,WACRC,YAAa,cACbC,SAAU,YAEG/e,IAAW,YA7ExBiW,QAAS,CAAEnO,KAAM,QAAS3K,MAAO0a,OAAO,IACxCmH,UAAY5iB,EAAS6iB,aACnB,IAAId,MAAOC,cACb/T,QAASjO,EACTqT,QAASrT,EAASqT,SAAW,GAC7ByP,aAAc9iB,EAAS+iB,sBACvB7V,SAAUlN,EAASgjB,sBAIrB,IACE,IAAMC,EAEL,QAF6B,EAAA9a,EAAyBU,MAAK,SAACqa,GAC3D,OAAAA,EAAGC,cAActa,MAAK,SAAC+P,GAAM,OAAAA,IAAM5Y,EAASojB,wBAAf,GAA7B,WACD,eAAEC,YAEGxB,EACuB,aAA3B7hB,EAASsb,cACL,UACA2H,GAAyBjjB,EAASojB,yBAClC,CACEC,YAAaJ,EACbK,aAActjB,EAASojB,+BAEzBtjB,EACN8hB,EAAiBC,QAAUA,C,CAC3B,MAAO9P,GACPsD,QAAQkO,KACN,8BACA,yCACAvjB,E,CAKJ,IACE,IAIMwjB,GAHuB,cAA3BxjB,EAAS+a,cACL2G,EACAC,GAC4B9Y,MAAK,SAAC4a,GAAM,OAAAA,EAAE7jB,KAAOI,EAAS0jB,OAAlB,IAC1CF,IACF5B,EAAiBQ,KAAOoB,EAAmBta,YAC3C0Y,EAAiBnI,QAAU+J,EAAmB/J,QAC9CmI,EAAiBjI,OAAS6J,EAAmB7J,OAC7CiI,EAAiB/H,QAAU,CACzBnO,KAAM,QACN3K,MAAO0a,QAAuC,QAAhC,EAAAzb,EAASqP,+BAAuB,eAAEC,QAAS,IAE3DsS,EAAiBpS,YAAcgU,EAAmBhU,YAClDoS,EAAiBlS,eAAiB8T,EAAmB9T,eACrDkS,EAAiB9S,cAAgB0U,EAAmB1U,cACpD8S,EAAiBzH,YAAc,CAC7BzO,KAAM,QACN3K,MAAO0a,OAAO+H,EAAmBrJ,c,CAGrC,MAAOpI,GACPsD,QAAQkO,KACN,8BACA,wCACAvjB,E,CAIJ,OAAO4hB,CACT,CCnGqB,EAAA+B,cAAA,QAEM,EAAAA,cAAA,SAEA,EAAAA,cAAA,SAEL,EAAAA,cAAA,UAER,EAAAA,cAAA,QAEW,EAAAA,cAAA,UAED,EAAAA,cAAA,SCXjB,SAASC,KACd,IAAMC,EAAwBC,KACxBxc,EAAmByc,KACnBxc,EAA0Byc,KAEhC,OAAO,SAAwChkB,G,kqCAC7C,IAAKA,EAAS0I,OACZ,MAAM,IAAIjJ,MACR,8CAAuCqc,KAAKC,UAAU/b,KAGpC,SAAM6jB,K,OAEN,OAFhBI,EAAgB,SAEA,GAAM3c,EACC,aAA3BtH,EAASsb,cAA+B,YAAc,a,OAKxD,OANM3S,EAAgB,UAGhBC,EAAeD,EAAcJ,UAAUM,MAC3C,SAACC,GAAM,OAAAA,EAAElJ,KAAOI,EAASmiB,cAAlB,MAKH+B,EAA0B3c,EAC9BqB,EACA5I,EAAS0I,OACT,YAEIyb,EAA2B5c,EAC/BqB,EACA5I,EAAS0I,OACT,aAEgD,GAAMzB,QAAQiI,IAAI,CAClEgV,EACAC,MAdO,CAAP,EAAOld,QAAQC,OAAO,2B,OAgBxB,OAJM,EAA4C,SAA3Ckd,EAAkB,KAAEC,EAAmB,KAIvC,CAAP,EAAO5C,GACLzhB,EACAikB,EAAc9b,yBACdkc,EACAD,I,oSAGN,CC7CO,SAASE,GAAS1kB,EAAwB2kB,GAAjD,gBAAiD,IAAAA,IAAAA,GAAA,GACvC,IAAA1D,EAAoB/B,IAAqB,gBAC3CtG,EAAaoL,KAEb3C,GAAMhB,EADY,IAAQ,eAGhC,OAAO,EAAAa,EAAA,GAAS,CACdnG,QAAS9B,QAAQjZ,GACjBmhB,SAAUvB,EAAaxf,SAAS0f,QAAQ,CAAE9f,GAAE,IAC5CohB,QAAS,kB,EAAA,E,OAAA,E,EAAA,W,gnCACP,OAAKphB,EAGY,GAAMqhB,EAAIuD,aAAa5kB,IAF/B,CAAP,EAAOqH,QAAQC,OAAO,8B,OAGxB,OADMlH,EAAW,SACV,CAAP,EAAOwY,EAAWxY,EAASwD,O,iBALpB,K,+QAOTqd,gBAAe,EACf0D,SAAQ,GAEZ,C,uNCjBO,SAASE,GACd9kB,GADF,WAGUkhB,EAAoB/B,IAAqB,gBAC3C4F,GAAc,UACdlM,EAAaoL,KAEb3C,GAAMhB,EADY,IAAQ,eAGhC,OAAO,EAAAa,EAAA,GAAS,CACdC,SAAUvB,EAAaC,KAAK9f,GAC5BqhB,QAAS,kB,EAAA,E,OAAA,E,EAAA,W,gnCACK,SAAMzI,EAAY,IAC5BE,UAAW,W,IAAC,sDAAY,OAAAwI,EAAIxI,UAAS,MAAbwI,EAAiBO,EAAjB,EACxBhJ,WAAU,GACP7Y,K,OAKL,OARMsZ,EAAM,UAKRxU,UAAUyS,SAAQ,SAACyN,GACrB,OAAAD,EAAYE,aAAapF,EAAaxf,SAAS0f,QAAQ,CAAE9f,GAAI+kB,EAAE/kB,KAAO+kB,EAAtE,IAEK,CAAP,EAAO1L,G,iBATA,K,+QAWT4H,gBAAe,GAEnB,C,uNCzBO,SAASgE,GACdllB,EAIA4kB,QAAA,IAAAA,IAAAA,GAAA,GAEQ,IAAA1D,EAAoB/B,IAAqB,gBACzCpS,EAAW,IAAQ,OAE3B,OAAO,EAAAoU,EAAA,GAAS,CACdC,SAAUvB,EAAaxf,SAAS0Q,MAAM/Q,GACtCqhB,QAAS,WACP,IAAKrhB,EAAOC,GACV,OAAOqH,QAAQC,OAAO,cAExB,IAAKvH,EAAOuN,SACV,OAAOjG,QAAQC,OAAO,oBAExB,IAAM+Z,EAAMvU,EAAO/M,EAAOuN,UAE1B,OCjBC,SAA0B,G,YAC/B4X,EAAQ,WACR1X,EAAS,YACT9E,EAAI,O,yBACuB,W,gnCACV,SAAMwc,EAAS1X,I,OAChC,OADMkK,EAAW,SACV,CAAP,EAAOsE,EAAwBtT,EAAxBsT,CAA8BtE,EAAS9T,O,YAF1ByD,W,kQDaT8d,CAAW,IAChBD,SAAU,W,IAAC,sDAAY,OAAA7D,EAAI6D,SAAQ,MAAZ7D,EAAgBO,EAAhB,GACpB7hB,GAEP,EACAgb,QACE9B,QAAQlZ,EAAOuN,WACf2L,QAAQlZ,EAAOC,KACfiZ,QAAQlZ,EAAOyN,WACjByT,gBAAe,EACf0D,SAAQ,GAEZ,C,uNEjCO,SAASS,GACdrlB,GAKQ,IAAAkhB,EAAoB/B,IAAqB,gBACzCpS,EAAW,IAAQ,OAE3B,OAAO,EAAAoU,EAAA,GAAS,CACdC,SAAUvB,EAAaxf,SAAS0M,OAAO/M,GACvCqhB,QAAS,WACP,IAAKrhB,EAAOC,GACV,OAAOqH,QAAQC,OAAO,cAExB,IAAKvH,EAAOuN,SACV,OAAOjG,QAAQC,OAAO,oBAExB,IAAM+Z,EAAMvU,EAAO/M,EAAOuN,UAE1B,OAAO0P,EAAY,IACjBC,UAAW,W,IAAC,sDAAY,OAAAoE,EAAIpE,UAAS,MAAboE,EAAiBO,EAAjB,GACrB7hB,GAEP,EACAgb,QAAS9B,QAAQlZ,EAAOuN,WAAa2L,QAAQlZ,EAAOC,IACpDihB,gBAAe,GAEnB,C,uNC5BO,SAASoE,GACdtlB,GADF,WAGUkhB,EAAoB/B,IAAqB,gBACzCK,EAAiB,IAAQ,aAEjC,OAAO,EAAA2B,EAAA,GAAS,CACdC,SAAUhC,EAAWI,aAAaxf,GAClCqhB,QAAS,kB,EAAA,E,OAAA,E,EAAA,W,gnCACK,SAAM7B,K,OAElB,OAFM8B,EAAM,SAEL,CAAP,EAAOxD,EAAkB,IACvBC,gBAAiB,W,IAAC,sDAAY,OAAAuD,EAAIiE,eAAc,MAAlBjE,EAAsBO,EAAtB,GAC3B7hB,K,iBALE,K,+QAQTkhB,gBAAe,GAEnB,C,ICnBasE,GAA6C,WACxD,IAAMT,GAAc,UACZzE,EAAgB,IAAQ,YAC1BzH,EAAaoL,KAEnB,OAAO,SAAChd,GACN,IAAMqa,EAAMhB,IACZ,OAAOyE,EAAYU,WAAW,CAC5BrE,SAAUhC,EAAW3W,MAAMkX,wBAC3B0B,QAAS,kB,OAAA,E,OAAA,E,EAAA,W,gnCACU,SAAMpa,K,OACvB,OADME,EAAW,UAKK,GAAM4d,EAAYU,WAAW,CACjDrE,SAAUvB,EAAaC,KAAK,CAC1B5b,UAAW,OACXP,KAAM,YACNG,KAAM,GACNG,OAAQ,GACRD,MAAO,CAACmD,GACRnE,QAAS,IACTD,KAAM,IAERse,QAAS,WACP,OAAAzI,EAAY,CACVE,UAAW,W,IAAC,sDAAY,OAAAwI,EAAIxI,UAAS,MAAbwI,EAAiBO,EAAjB,EACxBhJ,WAAU,EACV3U,UAAW,OACXP,KAAM,YACNG,KAAM,GACNG,OAAQ,GACRD,MAAO,CAACmD,GACRnE,QAAS,IACTD,KAAM,GATR,EAWF2iB,UAAWC,OAzBJ,CAAP,EAAOre,QAAQC,OAAO,IAAIzH,MAAM,sB,OA4BlC,MAAO,CAAP,GAAyD,IAzBnC,SAuBpB,UAEeob,MAAK,SAAC0K,GAAM,MAAY,cAAZA,aAAC,EAADA,EAAGjd,KAAH,K,iBA/BtB,K,gRAkCb,CACF,E,o2CC7CO,SAASkd,KAAhB,WACQd,GAAc,UACdlM,EAAaoL,KACX3D,EAAgB,IAAQ,YAChC,OAAO,SAAOrgB,GAAU,sC,yCAEtB,OADMqhB,EAAMhB,IACL,CAAP,EAAOyE,EAAYU,WAAW,CAC5BrE,SAAUvB,EAAaxf,SAAS0f,QAAQ,CAAE9f,GAAE,IAC5CohB,QAAS,iD,yDACU,SAAMC,EAAIuD,aAAa5kB,I,OACxC,OADMI,EAAW,SACV,CAAP,EAAOwY,EAAWxY,EAASwD,O,iBAInC,CCdO,SAASiiB,KAAhB,WACUxF,EAAgB,IAAQ,YAC1ByE,GAAc,UAEpB,OAAO,SAAC9kB,GACN,IAAMqhB,EAAMhB,IAEZ,OAAOyE,EAAYU,WAAW,CAC5BrE,SAAUvB,EAAaxf,SAASmP,QAAQyQ,IAAI,CAAEhgB,GAAE,IAChDohB,QAAS,kB,EAAA,E,OAAA,E,EAAA,W,mlCACP,MAAO,CAAP,EAAOnK,GACL,W,IAAC,sDAAY,OAAAoK,EAAInK,yBAAwB,MAA5BmK,EAAgCO,EAAhC,GACb5hB,G,iBAHK,K,gRAOb,CACF,C,uNChBO,SAAS8lB,KAAhB,WACUzF,EAAgB,IAAQ,YAC1ByE,GAAc,UAEpB,OAAO,SAAC/kB,GACN,IAAMshB,EAAMhB,IAEZ,OAAOyE,EAAYU,WAAW,CAC5BrE,SAAUvB,EAAaxf,SAASmP,QAAQnP,SAASL,GACjDqhB,QAAS,kB,EAAA,E,OAAA,E,EAAA,W,mlCACP,MAAO,CAAP,EAAO5J,EAAkB,IACvBC,uBAAwB,W,IAAC,sDACvB,OAAA4J,EAAI5J,uBAAsB,MAA1B4J,EAA8BO,EAA9B,GACC7hB,I,iBAJE,K,gRAQb,CACF,C,uNClBO,SAASgmB,KAAhB,WACU1F,EAAgB,IAAQ,YAC1ByE,GAAc,UAEpB,OAAO,SAAC/kB,GACN,IAAMshB,EAAMhB,IAEZ,OAAOyE,EAAYU,WAAW,CAC5BrE,SAAUvB,EAAaxf,SAASmP,QAAQuB,MAAM/Q,GAC9CqhB,QAAS,kB,EAAA,E,OAAA,E,EAAA,W,mlCACP,MAAO,CAAP,EAAOlE,EAAmB,IACxBzF,uBAAwB,W,IAAC,sDACvB,OAAA4J,EAAI5J,uBAAsB,MAA1B4J,EAA8BO,EAA9B,GACC7hB,I,iBAJE,K,gRAQb,CACF,C,uNClBO,SAASimB,KAAhB,WACUlZ,EAAW,IAAQ,OACrBgY,GAAc,UAEpB,OAAO,SACL/kB,GAKA,IAAMshB,EAAMvU,EAAO/M,EAAOuN,UAE1B,OAAOwX,EAAYU,WAAW,CAC5BrE,SAAUvB,EAAaxf,SAAS0M,OAAO/M,GACvCqhB,QAAS,kB,EAAA,E,OAAA,E,EAAA,W,mlCACP,MAAO,CAAP,EAAOpE,EAAY,IACjBC,UAAW,W,IAAC,sDAAY,OAAAoE,EAAIpE,UAAS,MAAboE,EAAiBO,EAAjB,GACrB7hB,I,iBAHE,K,gRAOb,CACF,C,uNCtBO,SAASkmB,KACN,IAAAnF,EAAY,IAAQ,QACtBgE,GAAc,UAEpB,OAAO,SACL/kB,GAKA,IAAMshB,EAAMP,EAAQ/gB,EAAOuN,UAE3B,OAAOwX,EAAYU,WAAW,CAC5BrE,SAAUvB,EAAaxf,SAAS2f,cAAchgB,GAC9CqhB,QAAS,WACP,OAAKrhB,EAAOC,GAGPD,EAAOuN,SCXb,SAA6B,G,YAClCE,EAAS,YACT0Y,EAAc,iBACdxI,EAAS,YACTyI,EAAM,SACNjO,EAAS,YACTkO,EAAK,Q,yBACyB,W,0mCACb,SAAMF,EACrB1Y,OACAtN,EACAkmB,OACAlmB,EACAimB,EACAzI,EACAxF,I,OAEF,MAAO,CAAP,EATiB,SASDtU,KAAKyT,MAAMrL,KAAI,SAAC4L,GAAc,OAC5C8F,UAAW9F,EAAE8F,UACbyI,OAAQvO,EAAEuO,OACVjO,UAAWN,EAAEM,UACbtW,IAAKgW,EAAEhW,IACPT,MAAOyW,EAAEzW,MACTklB,QAASzO,EAAEyO,SAAW,CAAC,EANqB,K,YAVvBhf,W,kQDQVif,CAAc,IACnBJ,eAAgB,W,IAAC,sDAAY,OAAA7E,EAAI6E,eAAc,MAAlB7E,EAAsBO,EAAtB,GAC1B7hB,IALIsH,QAAQC,OAAO,oBAHfD,QAAQC,OAAO,aAU1B,GAEJ,CACF,CE5BO,SAAS8c,KACd,IAAMU,GAAc,UACZzE,EAAgB,IAAQ,YAEhC,OAAO,SACLxX,EACAC,EACAJ,GAEA,IAAM6d,EAAMlG,IACZ,OAAOyE,EAAYU,WAAW,CAC5BrE,SAAUlB,EAAgBC,OACf,aAATxX,EAAsB,WAAa,aACnC,CAAEG,SAAUA,EAAS7I,GAAI8I,OAAM,IACjCsY,QAAS,WACP,O5BbD,SACLC,EACArY,EACAF,EACAgS,G,4qCAQc,OANR0L,EAAUxd,EAAawd,QACvBC,EAAaD,EAAQvd,MAAK,SAACmS,GAAM,OAAAA,EAAEpb,KAAO8I,CAAT,IACjC4d,GACJD,aAAU,EAAVA,EAAYzL,SAASjC,SAAQ,SAACmC,GAC5B,OAAAA,EAAEI,gBAAgBtP,KAAI,SAACgN,GAAM,gBAAGkC,EAAEC,cAAa,YAAInC,EAAtB,GAA7B,MACG,GACO,GAAMqI,EAAIrY,EAAahJ,GAAI8I,I,OACzC,GADM6d,EAAQ,WACE,QAAX,EAAAA,aAAK,EAALA,EAAO/iB,YAAI,eAAEgjB,gBAChB,MAAM,IAAI/mB,MAAM,kCAMlB,MAAO,CAAP,IAFgE,QAA9D,EAAW,QAAX,EAAA8mB,aAAK,EAALA,EAAO/iB,YAAI,eAAEgjB,eAAe3d,MAAK,SAAC8b,GAAM,OAAAA,EAAE/kB,KAAO8a,CAAT,WAAsB,eAAE6L,QAAS,IAEtD3a,IACnBwN,EAAuBqN,UACrB3mB,GACA,SAACF,GAAO,OAAC0mB,EAAezmB,SAAS,UAAG6a,EAAY,YAAI9a,GAA5C,M,wR4BVN8mB,EACE,W,IAAC,sDAAY,OAAAP,EAAIQ,yCAAwC,MAA5CR,EAAgD3E,EAAhD,GACb/Y,EACAC,EACAJ,EAJF,EAMF+c,UAAWC,KAEf,CACF,CCzBO,SAASvB,KACd,IAAMW,GAAc,UACZzE,EAAgB,IAAQ,YAEhC,OAAO,SAAC3X,GACN,IAAM6d,EAAMlG,IACZ,OAAOyE,EAAYU,WAAW,CAC5BrE,SAAUlB,EAAgBJ,KAAK,CAAEnX,KAAI,IACrC0Y,QAAS,WACP,O5BJD,SACL4F,EACAnM,EACAnS,G,mHAEY,SAAMse,K,OAIhB,OAJI3N,EAAM,SACN4N,GAAwB,QAAT,EAAA5N,aAAG,EAAHA,EAAKzV,YAAI,eAAEyT,QAAS,GAGvC,GAAMhQ,QAAQiI,IACZ2X,EACG1Z,QAAO,SAACrE,GAAM,OAAAA,EAAE6R,OAAF,IACd/O,KAAI,SAAOnD,GAAQ,qC,0DACF,SAAM+R,EACpBC,EAEAhS,EAAS7I,GACT0I,I,OAQF,OAZM8d,EAAU,SAMVxd,EAAqD,CACzDhJ,GAAI6I,EAAS7I,GAEbsJ,YAAaT,EAAS8Q,aACtB6M,QAAO,GAEF,CAAP,EAAOA,EAAQnd,OAAS,EAAIL,EAAe,M,mBAInD,GAAyB,KArBnBL,EACJ,SAmBA4E,QAAO,SAACrE,GAAM,OAAA+P,QAAQ/P,EAAR,KACFG,OACZ,MAAM,IAAIxJ,MAAM,0CAGlB,OADMqnB,EAAgBve,EAAU,GACzB,CAAP,EAAO,CAAEA,UAAS,EAAEwe,gBAAiBD,aAAa,EAAbA,EAAelnB,K,O4B7B9CyI,EACE,W,IAAC,sDAAY,OAAA8d,EAAIS,kBAAiB,MAArBT,EAAyB3E,EAAzB,IACb,W,IAAC,sDAAY,OAAA2E,EAAI1L,wBAAuB,MAA3B0L,EAA+B3E,EAA/B,GACblZ,EAHF,EAKF+c,UAAWC,KAEf,CACF,CClBO,SAASxB,GAA2BkD,GAA3C,gBAA2C,IAAAA,IAAAA,GAAA,GACzC,IAAMtC,GAAc,UAEduC,GAAM3G,EADQ,IAAQ,WAG5B,OAAO,kB,EAAA,E,OAAA,E,EAAA,W,gnCACgB,SAAMoE,EAAYU,WAAW,CAChDrE,SAAUhC,EAAWE,eACrB+B,QAAS,WACP,OCZD,SACLC,G,oqCAEgB,SAAMA,K,OAEtB,OAFMX,EAAU,SAET,CAAP,EADyC,QAA3B,EAAa,QAAb,EAAAA,aAAO,EAAPA,EAAS9c,YAAI,eAAEyb,oBAAY,eAAErf,I,wRDQrCsnB,EAAkB,W,IAAC,sDACjB,OAAAD,EAAIE,mCAAkC,MAAtCF,EAA0CzF,EAA1C,GADF,EAGF6D,UAAWC,O,OAEb,OARMrG,EAAe,UAWd,CAAP,EAAOyF,EAAYU,WAAW,CAC5BrE,SAAUhC,EAAW3W,MAAMgX,UAAU,CAAEH,aAAY,IACnD+B,QAAS,WACP,OELNC,EFMQ,W,IAAC,sDACC,OAAAgG,EAAIG,gDAA+C,MAAnDH,EAAuDzF,EAAvD,EENV6F,EFOQpI,E,OEPc,E,OAAA,E,EAAA,W,soCAEA,SAAMgC,EAC1BoG,OACAvnB,GACA,OACAA,GACA,I,OAEF,GAA6B,OAPvBwnB,EAAgB,UAOJ1jB,OAChB,MAAM,IAAInE,MAAM6nB,EAAcC,YAiDhC,OA/CMC,EAAyC,QAAxB,EAAAF,EAAc9jB,KAAKyT,aAAK,eAAE9J,QAAO,SAAC2L,G,MACvD,OAAmB,QAAnB,EAAAA,EAAEuC,yBAAiB,eAAExS,MACnB,SAACmS,GAAM,OAAAA,EAAEyM,gBAAkBtM,G9BjCP,W8BiCuBH,EAAE0M,OAAtC,G,IAILC,EAAeH,aAAc,EAAdA,EAAgB3e,KAAKuS,GAEpCwM,GAAoBJ,aAAc,EAAdA,EAAgB3M,KAAKU,IAC3CiM,aAAc,EAAdA,EAAgBra,OAAOoO,QACvBzb,EAEEkI,OACclI,IAAjB6nB,QACuB7nB,IAAtB8nB,IACwB,QAAxB,EAAAN,EAAc9jB,KAAKyT,aAAK,eAAE4D,MAAK,SAAC/B,G,MAC9B,OAAmB,QAAnB,EAAAA,EAAEuC,yBAAiB,eAAExS,MACnB,SAACmS,GAAM,OAAAA,EAAEyM,gBAAkBtM,G9B/CV,gB8B+C0BH,EAAE0M,OAAtC,G,OAGb,EAEIzf,EAAwB0f,EAC1BA,EAAaE,QAAUF,EAAaG,cACpChoB,EACEoI,EAA4B0f,EAC9BA,EAAkBG,QAAO,SAACC,EAAKlP,GAAM,OAAAA,EAAE+O,QAAU/O,EAAEgP,SAAWE,CAAzB,GAA8B,QACnEloB,EACEmoB,EAA4BL,aAAiB,EAAjBA,EAC9Bza,QAAO,SAAC2L,GAAM,YAAqBhZ,IAArBgZ,EAAEoP,cAAF,IACfvP,SAAQ,SAACG,GAAM,OAAAA,EAAEoP,gBAAkB,EAApB,IACZC,EAA2BnL,MAAMtI,KACrC,IAAIuI,IACFgL,aAAyB,EAAzBA,EAA2Brc,KAAI,SAACgN,GAAM,OAAAA,EAAEwP,iBAAF,MAGpCjgB,EACJ8f,EACIE,EAAyBvc,KAAI,SAACyX,GAAgB,OAC5CA,YAAW,EACXF,cAAe8E,EACZ9a,QAAO,SAACyL,GAAM,OAAAA,EAAEwP,oBAAsB/E,CAAxB,IAEdzX,KAAI,SAACgN,GAAM,OAAAA,EAAEyP,gBAAF,IAL8B,IAO9C,GAEC,CAAP,EAAO,CACLrgB,cAAa,EACbC,sBAAqB,EACrBC,0BAAyB,EACzBC,yBAAwB,I,iBA/DJ,K,8QADtB8Y,EACAoG,CFIM,EAKFhC,UAAW2B,OAAYlnB,EAAYwlB,OAV5B,CAAP,EAAOre,QAAQC,OAAO,4B,iBAVnB,K,8QAuBT,C,gBG1BO,SAASohB,KACN,IAAArI,EAAgB,IAAQ,YAC1ByE,GAAc,UAEpB,OAAO,EAAA6D,GAAA,IACL,SAAmC/U,G,8qCAKzBxT,EAAiCwT,EAAK,SAA5B7J,EAAuB6J,EAAK,UAAjB5J,EAAY4J,EAAK,QACxCyN,EAAMhB,KACNuI,EAAoC,CACxC/kB,KAAMzD,EAASyD,KACf0e,eAAgBniB,EAASyI,SACzBC,OAAQ1I,EAAS0I,SAENJ,KAAOtI,EAASsI,KAAO,IAAMtI,EAASyoB,OACnDD,EAAalN,cACU,YAArBtb,EAAS6hB,QACL,gBACqB/hB,IAArBE,EAAS6hB,QACT,cACA,KACN2G,EAAapF,yBACXpjB,EAAS6hB,SAAgC,YAArB7hB,EAAS6hB,QACzB7hB,EAAS6hB,QAAQyB,aACjB,K,iBAEJ,O,sBAAA,GAAMrC,EAAIyH,aAAY,EAAMF,I,cAA5B,SACA7e,I,aAEA,G,YAAI,IAAAgf,mBAAkB,GAGpB,OAFQC,IAAwB,QAAf,eAAK,EAAL,EAAOtR,gBAAQ,eAAE9T,OAAQ,CAAC,GAAC,KAEpCxD,EAASsI,MACf,IAAK,YACKsgB,IACD,GAAWC,wBACdjf,EAAQ,cAKRA,EAAQ,yBAGZ,MAEF,IAAK,WACH,OAAQgf,GACN,KAAK,GAAWC,wBACdjf,EAAQ,cACR,MAEF,KAAK,GAAWkf,wBACdlf,EAAQ,sBACR,MAEF,KAAK,GAAWmf,mBACdnf,EAAQ,sBACR,MAEF,QACEyL,QAAQ5J,MACN,iCACA,4BACA,GAEF7B,EAAQ,iBAKhByL,QAAQ5J,MACN,iCACA,+BACA,GAEF7B,EAAQ,W,uTAId,CACED,UAAW,WACJ+a,EAAYsE,kBAAkB,CAACxJ,EAAaR,UAC5C0F,EAAYsE,kBAAkB,CAACjK,EAAW3W,MAAM4W,SACvD,GAGN,CAEA,IAAM,GAAa,CAEjBiK,kBAAmB,EAAAtF,cAAA,QAEnBkF,wBAAyB,EAAAlF,cAAA,SAEzBmF,wBAAyB,EAAAnF,cAAA,SAEzBoF,mBAAoB,EAAApF,cAAA,UAEpBuF,WAAY,EAAAvF,cAAA,QAEZwF,sBAAuB,EAAAxF,cAAA,UAEvByF,qBAAsB,EAAAzF,cAAA,UC5GjB,SAAS0F,KACN,IAAApJ,EAAgB,IAAQ,YAC1ByE,GAAc,UAEpB,OAAO,EAAA6D,GAAA,IACL,SAAmC/U,G,8qCAKzB5T,EAA2B4T,EAAK,GAA5B7J,EAAuB6J,EAAK,UAAjB5J,EAAY4J,EAAK,QAClCyN,EAAMhB,I,iBAEV,O,sBAAA,GAAMgB,EAAIqI,gBAAgB1pB,GAAI,I,cAA9B,SACA+J,I,gCAEI,IAAAgf,mBAAkB,KACdY,EAAU,aAAK,EAAL,EAAOA,QACfX,IAAwB,QAAf,eAAK,EAAL,EAAOtR,gBAAQ,eAAE9T,OAAQ,CAAC,GAAC,KAE5CoG,EAAQgf,GAAQ,IAAKW,I,iTAI3B,CACE5f,UAAW,WACJ+a,EAAYsE,kBAAkB,CAACxJ,EAAaR,UAC5C0F,EAAYsE,kBAAkB,CAACjK,EAAW3W,MAAM4W,SACvD,GAGN,CC/BO,SAASwK,KACN,IAAA9c,EAAW,IAAQ,OACrBgY,GAAc,UAEpB,OAAO,EAAA6D,GAAA,IACL,SAAmC,G,cACjCrb,EAAQ,WACRzJ,EAAI,OACJkG,EAAS,YACTC,EAAO,U,0pCAQDqX,EAAMvU,EAAOQ,G,iBAEjB,O,sBAAA,GAAM+T,EAAIwI,YAAYhmB,I,cAAtB,SACAkG,I,gCAEI,IAAAgf,mBAAkB,KACdY,EAAU,aAAK,EAAL,EAAOA,QACfX,IAAwB,QAAf,eAAK,EAAL,EAAOtR,gBAAQ,eAAE9T,OAAQ,CAAC,GAAC,KAE5CoG,EAAQgf,GAAQ,IAAKW,I,iTAI3B,CACE5f,UAAW,SAAC+f,EAAG,G,IAAExc,EAAQ,WAAEmH,EAAU,aAC9BqQ,EAAYsE,kBAAkB,CACjCxJ,EAAaxf,SAASgf,MAAM,CAC1Bpf,GAAIyU,EACJnH,SAAQ,KAGd,GAGN,C,gBCjCO,SAASyc,KACN,IAAA1J,EAAgB,IAAQ,YAC1ByE,GAAc,UAEpB,OAAO,EAAA6D,GAAA,IAML,SAAmC,G,gBAAE3oB,EAAE,KAAEyL,EAAO,U,spCACxC4V,EAAMhB,I,iBAEH,O,sBAAA,GAAMgB,EAAI2I,gBAAgBhqB,EAAIyL,I,OAArC,MAAO,CAAP,EAAO,U,OAEP,O,YAAI,IAAAsd,mBAAkB,GAIb,oBAHM,IAAAkB,cAAa,GAIf,CAAP,EAAO5iB,QAAQC,OAAO,CACpBwE,KAAM,eACN6d,QAAuB,QAAd,IAAMjS,gBAAQ,eAAE9T,KAAKsmB,UAIzB,CAAP,EAAO7iB,QAAQC,OAAO,CACpBwE,KAAM,QACN6d,QAAuB,QAAd,IAAMjS,gBAAQ,eAAE9T,KAAKsmB,UAI3B,aAAiB,GAAAC,WACnB,CAAP,EAAO9iB,QAAQC,OAAO,CAAEwE,KAAM,UAAW6d,QAAS,EAAMA,WAEjD,CAAP,EAAOtiB,QAAQC,OAAO,CAAEwE,KAAM,UAAW6d,QAAS,a,2SAIxD,CACE5f,UAAW,WACJ+a,EAAYsE,kBAAkB,CAACxJ,EAAaR,SACnD,GAGN,C,uMC9CagL,GAAgC,CAC3C,OACA,QACA,YACA,WACA,UAMWC,GAA6B,MACrChO,OAAO/H,OAAO,EAAAgW,gBAAc,GAMpBC,GAAoC,MAC5ClO,OAAO/H,OAAO,EAAAkW,wBAAsB,E,sDC/BzC,IACMC,EAAoB,sCAEnB,SAASC,IACd,MAAsD,SAA/CC,aAAaC,QAJO,eAK7B,CAEO,SAASC,IACd,MAAmD,SAA5CF,aAAaC,QAAQH,EAC9B,CAEO,SAASK,IACd,OAAOH,aAAaI,QAAQN,EAAmB,OACjD,C,kGC6EO,IAeMO,EAAsC,CACjD,WACA,eACA,aAEWC,EAAmC,CAAC,SACpCC,EAAsC,CAAC,YACvCC,EAAwC,CAAC,cACzCC,EAAuC,CAAC,aACxCC,EAAsC,CAAC,WAAY,eACnDC,EAAsC,CAAC,YAEvCC,EAAqB,CAChCC,SAAUR,EACVpI,MAAOqI,EACPQ,SAAUP,EACVQ,UAAWN,EACXrI,SAAUsI,EACVM,SAAUL,EACVM,WAAYT,E,iQCpHD,EAET,SAAC,G,IAAE5J,EAAK,QACFrR,GAAM,IAAA2D,gBAAe,CAAC,UAAS,EAEvC,OAAQ0N,GACN,IAAK,SACH,OAAOrR,EAAE,8BACX,IAAK,QACH,OAAOA,EAAE,6BACX,IAAK,OACH,OAAOA,EAAE,4BACX,IAAK,sBACH,OAAOA,EAAE,4CACX,IAAK,qBACH,OAAOA,EAAE,2CACX,IAAK,UACH,OAAOA,EAAE,+BACX,QACE,OAAO,KAEb,E,2NCjBa2b,EAA6C,WAChD,IAAA3b,GAAM,IAAA2D,gBAAe,CAAC,UAAS,EACvC,OACE,UAAC,EAAAiY,WAAU,GAAC/X,QAAS,EAAAgY,kBAAA,OAAuB,YAC1C,SAAC,EAAAC,eAAc,CAACC,KAAM,EAAAC,aACtB,SAAC,EAAAC,MAAK,GAACC,aAAc,KAAM5J,KAAM,EAAA6J,WAAA,IAAa,UAC3Cnc,EAAE,0CAEL,SAAC,EAAAoc,eAAc,UAAEpc,EAAE,0CAGzB,E,sOCNMqc,EAGA,CAAC,UAAW,kBAAmB,oBAAqB,SAsB7CC,EAAiB,SAA0B,G,MACtDlc,EAAS,YACT5L,EAAQ,WACRiM,EAAe,kBACflN,EAAgB,mBAChBqB,EAAS,YACT8L,EAAiB,oBACjB1M,EAAiB,oBACjBpB,EAAI,OACJC,EAAO,UACPoC,EAAY,eACZiL,EAAY,eACZI,EAAgB,mBAChBC,EAAoB,uBACpBC,EAAqB,wBAEbR,GAAM,IAAA2D,gBAAe,SAAQ,EAE/BjR,EAAwD,CAC5DyN,QAASH,EAAE,mCACXsR,gBAAiBtR,EAAE,gCACnBuR,kBAAmBvR,EAAE,qCACrBqR,MAAOrR,EAAE,+BAGLuc,EAAarc,EAAa/G,OAAS,EACzC,OACE,SAAC,EAAA8D,YAAW,GAACuf,UAAU,EAAMC,mBAAmB,EAAI,aAAc,QAAM,WACtE,SAACC,EAAA,EAAS,CACR7Y,QAAS,EAAA8Y,aAAA,QACTC,YAAa,aACbC,UAAW7c,EAAE,qCACbtM,KAAM0M,EACN0c,QAAST,EACTU,aAAc,SAAC,G,IAAEC,EAAM,SAAEC,EAAE,KAAEvrB,EAAG,MAAO,OACrC,SAACurB,EAAE,GAEDC,KACa,sBAAXF,EACI,CACEG,SACE,yBACGnd,EAAE,mDAGP6c,UAAW,sBACXO,aAAc,CACZC,cAAerd,EACb,iDAINhQ,GAAS,UAGd0C,EAAOsqB,KAnBHtrB,EAF8B,EAwBvC4rB,WAAY,SAAC,G,IAAEN,EAAM,SAAExf,EAAG,MAAE+f,EAAE,KAAE7rB,EAAG,MACjC,OACE,SAAC6rB,EAAE,GAAWC,UAAW9qB,EAAOsqB,IAAO,UACpC,WACC,OAAQA,GACN,IAAK,UACH,OAAOxf,EAAI2C,QACb,IAAK,kBACH,OAAO3C,EAAI8T,gBACb,IAAK,oBACH,OAAO9T,EAAI+T,kBACb,IAAK,QACH,OAAO,SAAC,EAAuB,CAACF,MAAO7T,EAAI6T,QAEhD,CAXA,KADM3f,EAeb,EACA+rB,cAAe,SAAC,G,IAAEjgB,EAAG,MAAEkgB,EAAa,gBAAO,OACzC,SAACA,EAAa,CACZvW,MAAO,CACL,CACErD,MAAO9D,EAAE,yCACT2d,QAAS,WAAM,OAAAld,EAAgBjD,EAAhB,GAEjB,CACEsG,MAAO9D,EAAE,8BACT2d,QAAS,WAAM,OAAAjd,EAAkBlD,EAAlB,GAEjB,CACEsG,MAAO9D,EAAE,iBACT2d,QAAS,WAAM,OAAAnpB,EAASgJ,EAAT,KAboB,EAkB3CjK,iBAAkBA,EAClBqqB,SAAO,KACL,EAAClrB,EAAOyN,SAAU,CAChBvE,KAAM,SACNhI,MAAOsM,EACP2d,SAAUvd,EACVwd,aAAcvd,EACdwd,cAAevd,EACfwd,SAAU,SAAC/sB,GAAkB,OAAC,yBAAyBgtB,KAAKhtB,EAA/B,EAC7BitB,aAAcle,EAAE,gC,GAGpBpL,UAAWA,EACXhC,KAAMA,EACNqC,aAAcA,EACdpC,QAASA,EACT0pB,WAAYA,EACZvoB,kBAAmBA,EACnBmqB,kBAAkB,SAACxC,EAAuB,IAC1CyC,qBAAqB,SAACC,EAAA,EAAmB,QAIjD,E,gNCpJaC,EAA4C,WAC/C,IAAAte,GAAM,IAAA2D,kBAAgB,EAE9B,OACE,SAAC,EAAA1G,YAAW,GACV4G,QAAS,EAAA0a,oBAAA,MACTC,iBAAiB,EACjBC,mBAAoB,CAAEnQ,QAAS,QAAO,WAEtC,SAAC,EAAAoQ,MAAK,WACJ,SAAC,EAAAC,UAAS,WACR,SAAC,EAAAC,YAAW,WACV,SAAC,EAAAC,KAAI,GAACC,UAAU,MAAI,UAAE9e,EAAE,gCAMpC,E,qBC1BO,SAAS+e,EACdtmB,EACAE,G,MAEMqmB,EAAmBvmB,EAAUM,MAAK,SAACC,GAAM,OAAAA,EAAElJ,KAAO6I,CAAT,IACzCC,GACJomB,aAAgB,EAAhBA,EAAkBC,iBACkD,QAApE,EAAAD,aAAgB,EAAhBA,EAAkB1I,QAAQjZ,QAAO,SAAC6N,GAAM,OAAmB,KAAjBA,EAAE3B,UAAJ,IAA0B,UAAE,eAAEzZ,IACxE,MAAO,CAAE6I,SAAQ,EAAEC,OAAM,EAC3B,C,wNC0BE,OACE,CACEtH,QAAS,CACP4tB,aAAc,CAAC,EACfzI,WAAOzmB,EACPmvB,KAAM,CAAC,EACPC,mBAAepvB,GAEjBqvB,QAAS,CAAC,EACVC,4BAA4B,EAC5BC,OAAQ,CACNjuB,QAAS,CAAC,EACVkuB,OAAQ,CAAC,EAmBTC,SAAU,CAAC,GAMbC,QAAS,qBACT5vB,GAAI,sBACJ6vB,OAAQ,CACNC,mBAAoB,CAClB5d,MAAO,oBACP6d,OAAQ,CACN,CACEC,KAAM,cACNC,OAAQ,aAEV,CACED,KAAM,wBACNC,OAAQ,uBAEV,CACED,KAAM,uBACNC,OAAQ,sBAEV,CACEA,OAAQ,iBAIdC,UAAW,CACTC,KAAM,WAERC,oBAAqB,CACnBD,KAAM,WAERE,mBAAoB,CAClBF,KAAM,WAERG,YAAa,CACXxkB,KAAM,WACN+jB,OAAQ,CACN7rB,OAAQ,CACN4rB,QAAS,cACTC,OAAQ,CACNU,YAAa,CACXJ,KAAM,eAERK,UAAW,CACTte,MAAO,gBACPie,KAAM,cAGV/a,GAAI,CACFqb,OAAQ,CACNC,YACE,8IACFT,OAAQ,gBAIdZ,KAAM,CACJO,QAAS,UACTC,OAAQ,CACNc,QAAS,CACPR,KAAM,eAERS,MAAO,CACL1e,MAAO,4BACPie,KAAM,YACN/a,GAAI,CACFyb,aAAc,CACZZ,OAAQ,WAEVa,OAAQ,CACNb,OAAQ,YAIdc,OAAQ,CACN7e,MAAO,CAAC,4BAA6B,eACrCie,KAAM,aACN/a,GAAI,CACF4b,cAAe,CACbf,OAAQ,SAEVgB,YAAa,CACXC,QAAS,mBACTjB,OAAQ,aAIdkB,MAAO,CACLrlB,KAAM,UAGVsJ,GAAI,CACFyb,aAAc,CACZH,YACE,sQACFT,OAAQ,cAIdzsB,OAAQ,CACN2sB,KAAM,eACNrkB,KAAM,WACN+jB,OAAQ,CACNhsB,KAAM,CACJ+rB,QAAS,WACTC,OAAQ,CACNuB,MAAO,CACLjB,KAAM,aAERQ,QAAS,CACPze,MAAO,eACPie,KAAM,eAERS,MAAO,CACLT,KAAM,YACNrkB,KAAM,SAERoiB,SAAU,CACR6B,OAAQ,CACN,CACEC,KAAM,cACNC,OAAQ,SAEV,CACED,KAAM,cACNC,OAAQ,SAEV,CACEA,OAAQ,cAKhB7a,GAAI,CACFqb,OAAQ,CACNR,OAAQ,aAEVoB,WAAY,CACVH,QAAS,UACTjB,OAAQ,eAIdpnB,SAAU,CACR+mB,QAAS,WACTC,OAAQ,CACN3B,SAAU,CACR6B,OAAQ,CACN,CACEC,KAAM,kBACNC,OAAQ,SAEV,CACEA,OAAQ,aAIdU,QAAS,CACPze,MAAO,eACPie,KAAM,mBAERS,MAAO,CACLT,KAAM,gBACNrkB,KAAM,UAGVsJ,GAAI,CACFqb,OAAQ,CACNR,OAAQ,aAEVqB,eAAgB,CACdJ,QAAS,cACTlB,KAAM,oBACNC,OAAQ,eAIdnnB,OAAQ,CACN8mB,QAAS,WACTC,OAAQ,CACN3B,SAAU,CACR6B,OAAQ,CACN,CACEC,KAAM,gBACNC,OAAQ,SAEV,CACEA,OAAQ,aAIdU,QAAS,CACPze,MAAO,eACPie,KAAM,iBAERS,MAAO,CACLT,KAAM,cACNrkB,KAAM,UAGVsJ,GAAI,CACFqb,OAAQ,CACNR,OAAQ,aAEVqB,eAAgB,CACdrB,OAAQ,aAEVsB,aAAc,CACZL,QAAS,YACTlB,KAAM,kBACNC,OAAQ,eAIdzN,KAAM,CACJoN,QAAS,WACTC,OAAQ,CACN3B,SAAU,CACR6B,OAAQ,CACN,CACEC,KAAM,qBACNC,OAAQ,QAEV,CACED,KAAM,UACNC,OAAQ,WAEV,CACED,KAAM,aACNC,OAAQ,SAEV,CACED,KAAM,iBACNC,OAAQ,YAEV,CACED,KAAM,gCACNC,OAAQ,mBAEV,CACED,KAAM,kBACNC,OAAQ,aAEV,CACEA,OAAQ,WAIduB,KAAM,CACJtf,MAAO,eACPie,KAAM,YAERsB,SAAU,CACRvf,MAAO,eACPie,KAAM,gBAERuB,gBAAiB,CACfxf,MAAO,eACPie,KAAM,uBAERD,UAAW,CACThe,MAAO,eACPie,KAAM,iBAERS,MAAO,CACLT,KAAM,YACNrkB,KAAM,SAERD,MAAO,CACLqG,MAAO,eACPie,KAAM,aAERwB,QAAS,CACPjB,YACE,iEACFkB,OAAQ,CACNC,IAAK,WACLC,OAAQ,CACN,CACEZ,QAAS,WACTjB,OAAQ,aAGZjmB,QAAS,CACP,CACEimB,OAAQ,WAIdE,KAAM,gBAGV/a,GAAI,CACFqb,OAAQ,CACNR,OAAQ,aAEVqB,eAAgB,CACdrB,OAAQ,aAEVsB,aAAc,CACZtB,OAAQ,aAEV8B,WAAY,CACVb,QAAS,UACTlB,KAAM,gBACNC,OAAQ,aAEV+B,cAAe,CACb/B,OAAQ,eAIdhO,QAAS,CACP2N,QAAS,WACTC,OAAQ,CACN3B,SAAU,CACR6B,OAAQ,CACN,CACEC,KAAM,cACNC,OAAQ,eAEV,CACED,KAAM,qBACNC,OAAQ,sBAEV,CACED,KAAM,oBACNC,OAAQ,qBAEV,CACES,YACE,sDACFT,OAAQ,6BAIdgC,YAAa,CACXvB,YACE,gKACFP,KAAM,CAAC,YAAa,gBACpBje,MAAO,sBACPpG,KAAM,SAERomB,mBAAoB,CAClBxB,YACE,gKACFP,KAAM,CAAC,YAAa,eAAgB,sBACpCje,MAAO,2BACPpG,KAAM,SAERqmB,kBAAmB,CACjBzB,YACE,6EACFd,QAAS,UACT9jB,KAAM,QACN+jB,OAAQ,CACNc,QAAS,CAAC,EACVC,MAAO,CACL1e,MAAO,uBACPie,KAAM,eACNrkB,KAAM,UAGVsJ,GAAI,CACFgd,mBAAoB,CAClB,CACElB,QAAS,2BACTlB,KAAM,oDACNC,OAAQ,UAEV,CACED,KAAM,qBACNC,OAAQ,aAKhBoC,wBAAyB,CACvB3B,YACE,0HACFd,QAAS,QACT9jB,KAAM,QACN+jB,OAAQ,CACNuB,MAAO,CAAC,EACR1N,aAAc,CACZxR,MAAO,uBACPie,KAAM,eACNrkB,KAAM,SAERwmB,QAAS,CACPpgB,MAAO,uBACPie,KAAM,eACNrkB,KAAM,UAGVsJ,GAAI,CACFgd,mBAAoB,CAClB,CACElB,QAAS,2BACTlB,KAAM,oDACNC,OAAQ,iBAEV,CACED,KAAM,qBACNC,OAAQ,kBAGZsC,cAAe,CACbrB,QAAS,sBACTlB,KAAM,kBACNC,OAAQ,eAKhB7a,GAAI,CACFkc,eAAgB,CACdJ,QAAS,oBACTR,YACE,kFACFT,OAAQ,gBAKhB6B,OAAQ,CACN7B,OAAQ,iDAId6B,OAAQ,CACN7B,OAAQ,UAGZkB,MAAO,CACLrlB,KAAM,WAIZ,CACEolB,QAAS,CACPsB,mBAAmB,SAAO,SAAChxB,GACzB,MAAO,CACL6tB,KAAM,KACA7tB,EAAQ4tB,aAAajI,gBACrB8H,EACEztB,EAAQ4tB,aAAaqD,mBACrBjxB,EAAQ4tB,aAAajI,iBAEvB,CAAC,GAGX,IACA0J,cAAc,QAAK,gBACnB6B,SAAS,SAAO,SAAClxB,EAAS,G,IAAEqC,EAAI,OAC9B,MAA8B,eAA1BrC,EAAQ8tB,cACH,CACLD,KAAM,OAAK7tB,EAAQ6tB,MAAI,CAAExrB,KAAI,IAC7ByrB,mBAAepvB,GAGZ,CAAEmvB,KAAM,OAAK7tB,EAAQ6tB,MAAI,CAAExrB,KAAI,IACxC,IACA8uB,aAAa,SAAO,SAACnxB,EAAS,G,IAAEqH,EAAQ,WACtC,MAAO,CACLwmB,KAAM,OACD7tB,EAAQ6tB,MACRJ,EACDztB,EAAQ4tB,aAAaqD,mBACrB5pB,IAGJ8d,WAAOzmB,EAEX,IACA0yB,WAAW,SAAO,SAACpxB,EAAS,G,IAAEsH,EAAM,SAClC,MAA8B,uBAA1BtH,EAAQ8tB,cACH,CACLD,KAAM,OAAK7tB,EAAQ6tB,MAAI,CAAEvmB,OAAM,IAC/B6d,WAAOzmB,EACPovB,mBAAepvB,GAGZ,CACLmvB,KAAM,OACD7tB,EAAQ6tB,MAAI,CACfvmB,OAAM,IAER6d,WAAOzmB,EAEX,IACA2yB,SAAS,SAAO,SAACrxB,EAAS,G,IAAEghB,EAAI,OAAO,OACrC6M,KAAM,OACD7tB,EAAQ6tB,MAAI,CACf7M,KAAI,IAH+B,IAMvCsQ,UAAU,SAAO,SAACtxB,EAASgU,GACzB,IAAMmR,EAAQnR,EAAM5R,KACdmvB,EAAepM,EAAMjjB,MAAK,SAACuI,EAAG+mB,GAAM,OAAA/mB,EAAEzD,MAAQwqB,EAAExqB,KAAZ,IAAmB,GAC7D,MAAO,CACLme,MAAK,EACL0I,KAAM,OACD7tB,EAAQ6tB,MAAI,CACf7M,KAAMuQ,IAGZ,IAEAE,2BAA2B,SAAO,SAACC,GAAa,OAC9C5D,mBAAepvB,EAD+B,IAGhDizB,kBAAkB,SAAO,SAACD,EAAU,GAClC,MAAO,CACL5D,cAFuC,QAI3C,IACA8D,aAAa,SAAW,SAAC5xB,GACvB,IAAM6tB,EAAO7tB,EAAQ6tB,KAUrB,MAAO,CACLvjB,KAAM,OACNlI,KAVgC,CAChC8E,KAAM,WACN7E,KAAMwrB,EAAKxrB,KACXgF,SAAUwmB,EAAKxmB,SACfC,OAAQumB,EAAKvmB,OACb+f,OAAQwG,EAAK7M,KAAKxiB,GAClBiiB,QAASoN,EAAKpN,SAMlB,IACAoR,eAAe,QAAK,UACpBC,sBAAsB,QAAK,iBAC3BC,qBAAqB,SAAO,SAAC/xB,GAC3B,IAAM6tB,EAAO,KAAK7tB,EAAQ6tB,MAE1B,OADAA,EAAKpN,QAAU,UACR,CAAEoN,KAAI,EACf,IACAmE,0BAA0B,SAAO,SAAChyB,EAASgU,GACzC,IAAM6Z,EAAO,KAAK7tB,EAAQ6tB,MAC1B,GAAmB,uBAAf7Z,EAAM1J,KACRujB,EAAKpN,QAAUzM,EAAMkO,iBAChB,CAEL,IAAMJ,EAAK9hB,EAAQ4tB,aAAa7mB,yBAAyB,GACzD8mB,EAAKpN,QAAU,CACbwB,YAAaH,EAAGG,YAChBC,aAAcJ,EAAGC,cAAc,G,CAGnC,MAAO,CAAE8L,KAAI,EACf,IACAoE,mBAAmB,SAAO,SAACjyB,GACzB,IAAM6tB,EAAO,KAAK7tB,EAAQ6tB,MAE1B,OADAA,EAAKpN,aAAU/hB,EACR,CAAEmvB,KAAI,EACf,KAEFqE,OAAQ,CACNC,YAAa,SAAC,G,IAAEvE,EAAY,eAC1B,YAAiBlvB,IAAjBkvB,GACsC,iBAAtCA,EAAawE,oBADb,EAEFC,sBAAuB,SAAC,G,IAAEzE,EAAY,eACpC,YAAiBlvB,IAAjBkvB,GACsC,yBAAtCA,EAAawE,oBADb,EAEFE,qBAAsB,SAAC,G,IAAE1E,EAAY,eACnC,YAAiBlvB,IAAjBkvB,GACsC,wBAAtCA,EAAawE,oBADb,EAEFG,YAAa,SAAC,G,IAAE1E,EAAI,OAClB,YAAcnvB,IAAdmvB,EAAKxrB,MAA2C,IAArBwrB,EAAKxrB,KAAKwF,MAArC,EACF2qB,YAAa,SAAC,G,IAAE3E,EAAI,OAClB,qCAA+BlB,KAAKkB,EAAKxrB,MAAQ,GAAjD,EACFowB,gBAAiB,SAAC,G,IAAE5E,EAAI,OAAED,EAAY,eAC9B8E,EAAuB9E,aAAY,EAAZA,EAAcqD,mBAAmBxpB,MAC5D,SAACC,GAAM,OAAAA,EAAElJ,KAAOqvB,EAAKxmB,QAAd,IAET,QAEGumB,aAAY,EAAZA,EAAcqD,qBAAsB,IAAIppB,OAAS,QAEzBnJ,IAAzBg0B,CAEJ,EACAC,cAAe,SAAC,G,IAAE9E,EAAI,OAAED,EAAY,eAC5B8E,EAAuB9E,aAAY,EAAZA,EAAcqD,mBAAmBxpB,MAC5D,SAACC,GAAM,OAAAA,EAAElJ,KAAOqvB,EAAKxmB,QAAd,IAET,YAEkB3I,IAAhBmvB,EAAKvmB,aAGH5I,KADFg0B,aAAoB,EAApBA,EAAsB1N,QAAQvd,MAAK,SAACmS,GAAM,OAAAA,EAAEpb,KAAOqvB,EAAKvmB,MAAd,IAG9C,EACAsrB,mBAAoB,SAAC,G,IAAE/E,EAAI,OACzB,YAAkBnvB,IAAlBmvB,EAAKxmB,eAA0C3I,IAAhBmvB,EAAKvmB,MAApC,EACFurB,QAAS,SAAC,GAAc,YAAUn0B,IAAjB,OAAO,EACxBo0B,WAAY,SAAC,G,IAAE3N,EAAK,QAAO,YAAUzmB,IAAVymB,GAAwC,IAAjBA,EAAMtd,MAA7B,EAC3BkrB,eAAgB,SAAC,G,MAAElF,EAAI,OACrB,YAAqBnvB,IADc,iBAEF,KAAjB,QAAT,EAAAmvB,EAAK7M,YAAI,eAAE/I,WACpB,EACA+a,8BAA+B,SAAC,EAAU1K,EAAG2K,G,IAAXpF,EAAI,OACpC,OAAIoF,EAAKlT,MAAMmT,OAAO,mBAGEx0B,IAAjBmvB,EAAKpN,OACd,EACA0S,gBAAiB,SAAC,G,IAAEtF,EAAI,OAAED,EAAY,eACpC,QAAqBlvB,IAAjBkvB,IAA+BC,EAAK7M,KAAM,OAAO,EACrD,IAAMoS,EACa,YAAjBvF,EAAKpN,cAA0C/hB,IAAjBmvB,EAAKpN,QAC/BmN,EAAa/mB,sBACb+mB,EAAa9mB,0BACnB,OAAKssB,GACEvF,EAAK7M,KAAKha,MAAQosB,CAC3B,EACAC,kBAAmB,SAACrzB,EAASgU,GAC3B,OAAAhU,EAAQ6tB,KAAKxmB,WAAa2M,EAAM3M,QAAhC,EACFisB,gBAAiB,SAACtzB,EAASgU,GACzB,OAAAhU,EAAQ6tB,KAAKvmB,SAAW0M,EAAM1M,MAA9B,EACFisB,cAAe,SAACvzB,EAASgU,GAAK,MAC5B,OAAiB,QAAjB,EAAAhU,EAAQ6tB,KAAK7M,YAAI,eAAExiB,MAAOwV,EAAMgN,KAAKxiB,EAAE,EACzCg1B,YAAa,SAACxzB,GACZ,OAAyD,IAAzDA,EAAQ4tB,aAAa7mB,yBAAyBc,MAA9C,EACF6oB,mBAAoB,SAAC1wB,GACnB,YAA+CtB,IAA/CsB,EAAQ4tB,aAAa/mB,uBAGR,IAFb7G,EAAQ4tB,aAAa7mB,yBAAyBwQ,SAC5C,SAACnB,GAAM,OAAAA,EAAE2L,aAAF,IACPla,MAHF,EAIF8oB,kBAAmB,SAAC3wB,GAClB,YAA+CtB,IAA/CsB,EAAQ4tB,aAAa/mB,uBACrB7G,EAAQ4tB,aAAa7mB,yBAAyBc,OAAS,CADvD,EAEF4rB,kDAAmD,SACjD,EACA,G,IADE5F,EAAI,OAAED,EAAY,eAClB1L,EAAY,eAEd,YAA2CxjB,IAA3CkvB,EAAa9mB,2BACb8mB,EAAa9mB,0BAA4B,IACX,QAA7Bob,EAAaD,aACZ4L,EAAKxmB,WAAa6a,EAAaD,YAHjC,EAIFyR,gBAAiB,SAAC1zB,GAChB,YAA+CtB,IAA/CsB,EAAQ4tB,aAAa/mB,uBACrB7G,EAAQ4tB,aAAa/mB,sBAAwB,CAD7C,EAEF8sB,mBAAoB,SAAC,GAAa,YAAkBj1B,IAAzB,OAAY2I,QAAL,K,gNCnrBxC,OACE,CACErH,QAAS,CACP4tB,aAAc,CAAC,EACfzI,WAAOzmB,EACPmvB,KAAM,CAAC,EACPC,mBAAepvB,GAEjBqvB,QAAS,CAAC,EACVC,4BAA4B,EAC5BC,OAAQ,CACNjuB,QAAS,CAAC,EACVkuB,OAAQ,CAAC,EAYTC,SAAU,CAAC,GAMbC,QAAS,qBACT5vB,GAAI,mBACJ6vB,OAAQ,CACNC,mBAAoB,CAClB5d,MAAO,oBACP6d,OAAQ,CACN,CACEC,KAAM,cACNC,OAAQ,aAEV,CACED,KAAM,qBACNC,OAAQ,oBAEV,CACEA,OAAQ,iBAIdmF,UAAW,CACTjF,KAAM,WAERkF,iBAAkB,CAChBlF,KAAM,WAERE,mBAAoB,CAClBF,KAAM,WAERG,YAAa,CACXxkB,KAAM,WACN+jB,OAAQ,CACN7rB,OAAQ,CACN4rB,QAAS,cACTC,OAAQ,CACNU,YAAa,CACXJ,KAAM,eAERK,UAAW,CACTte,MAAO,gBACPie,KAAM,cAGV/a,GAAI,CACFqb,OAAQ,CACNC,YACE,8IACFT,OAAQ,gBAIdZ,KAAM,CACJO,QAAS,UACTC,OAAQ,CACNc,QAAS,CACPR,KAAM,eAERS,MAAO,CACL1e,MAAO,4BACPkD,GAAI,CACFyb,aAAc,CACZZ,OAAQ,WAEVa,OAAQ,CACNb,OAAQ,YAIdc,OAAQ,CACN7e,MAAO,CAAC,4BAA6B,eACrCie,KAAM,aACN/a,GAAI,CACF4b,cAAe,CACbf,OAAQ,SAEVgB,YAAa,CACXC,QAAS,mBACTjB,OAAQ,aAIdkB,MAAO,CACLrlB,KAAM,UAGVsJ,GAAI,CACFyb,aAAc,CACZH,YACE,sQACFT,OAAQ,cAIdzsB,OAAQ,CACN2sB,KAAM,eACNrkB,KAAM,WACN+jB,OAAQ,CACNhsB,KAAM,CACJ+rB,QAAS,WACTC,OAAQ,CACNuB,MAAO,CACLjB,KAAM,aAERQ,QAAS,CACPze,MAAO,eACPie,KAAM,eAERS,MAAO,CACLT,KAAM,YACNrkB,KAAM,SAERoiB,SAAU,CACR6B,OAAQ,CACN,CACEC,KAAM,cACNC,OAAQ,SAEV,CACED,KAAM,cACNC,OAAQ,SAEV,CACEA,OAAQ,cAKhB7a,GAAI,CACFqb,OAAQ,CACNR,OAAQ,aAEVoB,WAAY,CACVH,QAAS,UACTjB,OAAQ,eAIdpnB,SAAU,CACR+mB,QAAS,WACTC,OAAQ,CACN3B,SAAU,CACR6B,OAAQ,CACN,CACEC,KAAM,kBACNC,OAAQ,SAEV,CACEA,OAAQ,aAIdU,QAAS,CACPze,MAAO,eACPie,KAAM,mBAERS,MAAO,CACLT,KAAM,gBACNrkB,KAAM,UAGVsJ,GAAI,CACFqb,OAAQ,CACNR,OAAQ,aAEVqB,eAAgB,CACdJ,QAAS,cACTlB,KAAM,oBACNC,OAAQ,eAIdnnB,OAAQ,CACN8mB,QAAS,WACTC,OAAQ,CACN3B,SAAU,CACR6B,OAAQ,CACN,CACEC,KAAM,gBACNC,OAAQ,SAEV,CACEA,OAAQ,aAIdU,QAAS,CACPze,MAAO,eACPie,KAAM,iBAERS,MAAO,CACLT,KAAM,cACNrkB,KAAM,UAGVsJ,GAAI,CACFqb,OAAQ,CACNR,OAAQ,aAEVqB,eAAgB,CACdrB,OAAQ,aAEVsB,aAAc,CACZL,QAAS,YACTlB,KAAM,kBACNC,OAAQ,eAIdzN,KAAM,CACJoN,QAAS,WACTC,OAAQ,CACN3B,SAAU,CACR6B,OAAQ,CACN,CACEC,KAAM,sBACNC,OAAQ,QAEV,CACED,KAAM,UACNC,OAAQ,WAEV,CACED,KAAM,aACNC,OAAQ,SAEV,CACEA,OAAQ,WAIduB,KAAM,CACJtf,MAAO,eACPie,KAAM,YAERS,MAAO,CACLT,KAAM,YACNrkB,KAAM,SAERD,MAAO,CACLqG,MAAO,eACPie,KAAM,aAERwB,QAAS,CACPjB,YACE,iEACFkB,OAAQ,CACNC,IAAK,WACLC,OAAQ,CACN,CACEZ,QAAS,WACTjB,OAAQ,aAGZjmB,QAAS,CACP,CACEimB,OAAQ,WAIdE,KAAM,gBAGV/a,GAAI,CACFqb,OAAQ,CACNR,OAAQ,aAEVqB,eAAgB,CACdrB,OAAQ,aAEVsB,aAAc,CACZtB,OAAQ,gBAKhB6B,OAAQ,CACN7B,OAAQ,8CAId6B,OAAQ,CACN7B,OAAQ,UAGZkB,MAAO,CACLrlB,KAAM,WAIZ,CACEolB,QAAS,CACPsB,mBAAmB,SAAO,SAAChxB,GACzB,MAAO,CACL6tB,KAAM,KACA7tB,EAAQ4tB,aAAajI,gBACrB8H,EACEztB,EAAQ4tB,aAAaqD,mBACrBjxB,EAAQ4tB,aAAajI,iBAEvB,CAAC,GAGX,IACA0J,cAAc,QAAK,gBACnB6B,SAAS,SAAO,SAAClxB,EAAS,G,IAAEqC,EAAI,OAC9B,MAA8B,eAA1BrC,EAAQ8tB,cACH,CACLD,KAAM,OAAK7tB,EAAQ6tB,MAAI,CAAExrB,KAAI,IAC7ByrB,mBAAepvB,GAGZ,CAAEmvB,KAAM,OAAK7tB,EAAQ6tB,MAAI,CAAExrB,KAAI,IACxC,IACA8uB,aAAa,SAAO,SAACnxB,EAAS,G,IAAEqH,EAAQ,WACtC,MAAO,CACLwmB,KAAM,OACD7tB,EAAQ6tB,MACRJ,EACDztB,EAAQ4tB,aAAaqD,mBACrB5pB,IAGJ8d,WAAOzmB,EAEX,IACA0yB,WAAW,SAAO,SAACpxB,EAAS,G,IAAEsH,EAAM,SAClC,MAA8B,uBAA1BtH,EAAQ8tB,cACH,CACLD,KAAM,OAAK7tB,EAAQ6tB,MAAI,CAAEvmB,OAAM,IAC/B6d,WAAOzmB,EACPovB,mBAAepvB,GAGZ,CACLmvB,KAAM,OACD7tB,EAAQ6tB,MAAI,CACfvmB,OAAM,IAER6d,WAAOzmB,EAEX,IACA4yB,UAAU,SAAO,SAACI,EAAU1d,GAE1B,MAAO,CACLmR,MAFYnR,EAAM5R,KAItB,IAEAqvB,2BAA2B,SAAO,SAACC,GAAa,OAC9C5D,mBAAepvB,EAD+B,IAGhDizB,kBAAkB,SAAO,SAACD,EAAU,GAAc,OAChD5D,cADyC,QAAO,IAGlD8D,aAAa,SAAW,SAAC5xB,GACvB,IAAM6tB,EAAO7tB,EAAQ6tB,KAUrB,MAAO,CACLvjB,KAAM,OACNlI,KAXgC,CAChC8E,KAAM,YACN7E,KAAMwrB,EAAKxrB,KACXgF,SAAUwmB,EAAKxmB,SACfC,OAAQumB,EAAKvmB,OAEb+f,OAAQrnB,EAAQmlB,MAAOld,MAAMzJ,GAC7BiiB,aAAS/hB,GAMb,IACAmzB,eAAe,QAAK,WAEtBK,OAAQ,CACN4B,YAAa,SAAC,G,IAAElG,EAAY,eAC1B,YAAiBlvB,IAAjBkvB,GACsC,SAAtCA,EAAawE,oBADb,EAEF2B,mBAAoB,SAAC,G,IAAEnG,EAAY,eACjC,YAAiBlvB,IAAjBkvB,GACsC,gBAAtCA,EAAawE,oBADb,EAEFG,YAAa,SAAC,G,IAAE1E,EAAI,OAClB,YAAcnvB,IAAdmvB,EAAKxrB,MAA2C,IAArBwrB,EAAKxrB,KAAKwF,MAArC,EACF2qB,YAAa,SAAC,G,IAAE3E,EAAI,OAClB,qCAA+BlB,KAAKkB,EAAKxrB,MAAQ,GAAjD,EACFowB,gBAAiB,SAAC,G,IAAE5E,EAAI,OAAED,EAAY,eAC9B8E,EAAuB9E,aAAY,EAAZA,EAAcqD,mBAAmBxpB,MAC5D,SAACC,GAAM,OAAAA,EAAElJ,KAAOqvB,EAAKxmB,QAAd,IAET,QAEGumB,aAAY,EAAZA,EAAcqD,qBAAsB,IAAIppB,OAAS,QAEzBnJ,IAAzBg0B,CAEJ,EACAC,cAAe,SAAC,G,IAAE9E,EAAI,OAAED,EAAY,eAC5B8E,EAAuB9E,aAAY,EAAZA,EAAcqD,mBAAmBxpB,MAC5D,SAACC,GAAM,OAAAA,EAAElJ,KAAOqvB,EAAKxmB,QAAd,IAET,YAEkB3I,IAAhBmvB,EAAKvmB,aAGH5I,KADFg0B,aAAoB,EAApBA,EAAsB1N,QAAQvd,MAAK,SAACmS,GAAM,OAAAA,EAAEpb,KAAOqvB,EAAKvmB,MAAd,IAG9C,EACA0sB,oBAAqB,SAAC,G,IAAEnG,EAAI,OAC1B,YAAkBnvB,IAAlBmvB,EAAKxmB,eAA0C3I,IAAhBmvB,EAAKvmB,MAApC,EACFurB,QAAS,SAAC,GAAc,YAAUn0B,IAAjB,OAAO,EACxBo0B,WAAY,SAAC,G,IAAE3N,EAAK,QAClB,YAAUzmB,IAAVymB,GAAiD,IAA1BA,EAAMnd,SAASH,MAAtC,EACFwrB,kBAAmB,SAACrzB,EAASgU,GAC3B,OAAAhU,EAAQ6tB,KAAKxmB,WAAa2M,EAAM3M,QAAhC,EACFisB,gBAAiB,SAACtzB,EAASgU,GACzB,OAAAhU,EAAQ6tB,KAAKvmB,SAAW0M,EAAM1M,MAA9B,MClbR,OACE,CACEtH,QAAS,CACPmH,eAAWzI,EACXinB,qBAAiBjnB,EACjBsI,WAAOtI,EACPkvB,kBAAclvB,GAEhBsvB,4BAA4B,EAC5BD,QAAS,CAAC,EACVE,OAAQ,CACNjuB,QAAS,CAAC,EACVkuB,OAAQ,CAAC,EAsCTC,SAAU,CAAC,GAkBb3vB,GAAI,sBACJ4vB,QAAS,UACTC,OAAQ,CACN8B,QAAS,CACPjB,YAAa,qDACbP,KAAM,UACNP,QAAS,QACTC,OAAQ,CACNrnB,MAAO,CACLonB,QAAS,0BACTC,OAAQ,CACN,0BAA2B,CACzB+B,OAAQ,CACNC,IAAK,qBACL7nB,QAAS,CACP,CACEknB,QAAS,yBACTjB,OAAQ,cAId7a,GAAI,CACF,2BAA4B,CAC1B8b,QAAS,uBACTjB,OAAQ,YAEV,wBAAyB,CACvBiB,QAAS,wBACTjB,OAAQ,YAEV,8BAA+B,CAC7BA,OAAQ,qCAIdzmB,SAAU,CACRsC,KAAM,QACNikB,OAAQ,CACNE,OAAQ,oDAGZ9P,UAAW,CACTrU,KAAM,QACNikB,OAAQ,CACNE,OAAQ,oDAGZ,kCAAmC,CACjC2B,OAAQ,CACNC,IAAK,6BACL7nB,QAAS,CACP,CACEknB,QAAS,0BACTjB,OAAQ,eAId7a,GAAI,CACF,iBAAkB,CAChB8b,QAAS,mBACTjB,OAAQ,aAEV,sBAAuB,CACrBiB,QAAS,wBACTjB,OAAQ,aAEV,wBAAyB,CACvBiB,QAAS,0BACTjB,OAAQ,iBAMlB,qBAAsB,CACpB2B,OAAQ,CACNC,IAAK,4BACL7nB,QAAS,CACP,CACEknB,QAAS,mCACTjB,OAAQ,WAId7a,GAAI,CACF,kCAAmC,CACjC8b,QAAS,eACTjB,OAAQ,SAEV,mCAAoC,CAClCiB,QAAS,mCACTjB,OAAQ,WAIdrN,MAAO,CACL9W,KAAM,QACNoG,MAAO,oBAGX4f,OAAQ,CACN,CACE9B,KAAM,gBACNC,OAAQ,iBAEV,CACED,KAAM,iBACNC,OAAQ,kBAEV,CACEA,OAAQ,wBAId,qBAAsB,CACpBE,KAAM,oBACNrkB,KAAM,SAER,gBAAiB,CACf8lB,OAAQ,CACNC,IAAK,eACL7xB,GAAI,uBAENmwB,KAAM,eACNP,QAAS,OACTC,OAAQ,CACN2B,KAAM,CACJpc,GAAI,CACFqgB,KAAM,CACJxF,OAAQ,YAIdc,OAAQ,CACNa,OAAQ,CACNC,IAAK,kBAEP1B,KAAM,SACN/a,GAAI,CACF4b,cAAe,CACbf,OAAQ,iCAEVgB,YAAa,CACXC,QAAS,kCACTjB,OAAQ,YAMlB,iBAAkB,CAChB2B,OAAQ,CACNC,IAAK,YACL7xB,GAAI,oBAENmwB,KAAM,YACNP,QAAS,OACTC,OAAQ,CACN2B,KAAM,CACJpc,GAAI,CACFqgB,KAAM,CACJxF,OAAQ,YAIdc,OAAQ,CACNa,OAAQ,CACNC,IAAK,kBAEP1B,KAAM,SACN/a,GAAI,CACF4b,cAAe,CACbf,OAAQ,iCAEVgB,YAAa,CACXC,QAAS,+BACTjB,OAAQ,YAMlByF,SAAU,CACR5pB,KAAM,WAIZ,CACEolB,QAAS,CAEPyE,uBAAuB,SAAO,SAAC7L,GAAM,OACnCthB,MAAO,CACLE,KAAM,YACNkrB,qBAAsB,aAHW,IAMrCgC,yBAAyB,SAAO,SAAC9L,GAAM,OACrCthB,MAAO,CACLE,KAAM,YACNkrB,qBAAsB,eAHa,IAMvCiC,kBAAkB,SAAO,SAAC/L,GAAM,OAC9BthB,MAAO,CACLE,KAAM,YACNkrB,qBAAsB,QAHM,IAMhCkC,sBAAsB,SAAO,SAAChM,EAAGtU,GAAU,OACzChN,MAAO,CACLE,KAAM,WACNkrB,qBAAsB,YACtBvrB,sBAAuBmN,EAAMhN,MAAMH,sBACnCE,yBAA0BiN,EAAMhN,MAAMD,yBACtCD,0BAA2BkN,EAAMhN,MAAMF,2BANA,IAS3CytB,uBAAuB,SAAO,SAACjM,EAAGtU,GAAU,OAC1ChN,MAAO,CACLE,KAAM,WACNkrB,qBAAsB,eACtBrrB,yBAA0BiN,EAAMhN,MAAMD,yBACtCD,0BAA2B,EAC3BD,sBAAuB,GANiB,IAS5C2tB,wBAAwB,SAAO,SAAClM,GAAM,OACpCthB,MAAO,CACLE,KAAM,WACNkrB,qBAAsB,uBACtBrrB,yBAA0B,GAC1BD,0BAA2B,EAC3BD,sBAAuB,GANW,IAStC4tB,cAAc,SAAO,SAACnM,EAAGtU,GACvB,MAAO,CACL7M,UAAW6M,EAAM7M,UACjBwe,gBAAiB3R,EAAM2R,gBAE3B,IACA+O,kCAAkC,SAAO,SAAC10B,GAExC,IAAMgH,EAAQhH,EAAQgH,MAMtB,MALmB,aAAfA,EAAME,KACRF,EAAMorB,qBAAuB,sBAE7BprB,EAAMorB,qBAAuB,cAExB,CACLjrB,UAAW,GACXH,MAAK,EAET,IACA2tB,iBAAiB,SAAO,SAAC30B,GACf,IAAAmH,EAAsCnH,EAAO,UAAlC2lB,EAA2B3lB,EAAO,gBAAjBgH,EAAUhH,EAAO,MACrD,IAAKmH,IAAcH,EACjB,MAAM,IAAI3I,MAAM,+CAElB,MAAmB,aAAf2I,EAAME,KAUD,CAAE0mB,aAT4C,CACnD1mB,KAAM,WACN+pB,mBAAoB9pB,EACpBwe,gBAAe,EACfyM,qBAAsBprB,EAAMorB,qBAC5BrrB,yBAA0BC,EAAMD,yBAChCD,0BAA2BE,EAAMF,0BACjCD,sBAAuBG,EAAMH,wBAUxB,CAAE+mB,aANyC,CAChD1mB,KAAM,YACN+pB,mBAAoB9pB,EACpBwe,gBAAe,EACfyM,qBAAsBprB,EAAMorB,sBAIlC,IACAwC,iCAAiC,QAAU,uBAC3CC,8BAA8B,SAC5B,SAACvM,EAAGtU,GACF,MAAO,CAAE1J,KAAM,cAAeD,MAAO2J,EAAM3J,MAC7C,GACA,CAAEzJ,GAAI,sBAIVsxB,OAAQ,CACN,gBAAiB,SAAClyB,GAAO,MAAK,MAAwB,cAAX,QAAb,EAAAA,EAAQgH,aAAK,eAAEE,KAAmB,EAChE,iBAAkB,SAAClH,GAAO,MAAK,MAAwB,eAAX,QAAb,EAAAA,EAAQgH,aAAK,eAAEE,KAAoB,MCtYhC,IAAAlJ,eAGvC,M,eCVU82B,EAAU,IAAIC,IAAI,cAC5B5rB,KACU6rB,EAAY,IAAID,IAC3B,cAEA5rB,KACW8rB,EAAU,IAAIF,IAAI,cAC5B5rB,KACU+rB,EAAa,IAAIH,IAC5B,cAEA5rB,KCRWgsB,EAA6B,WACxC,OACE,+BACE,gBAAK9E,IAAKyE,EAASM,IAAK,GAAIC,MAAO,CAAEC,OAAQ,WAGnD,ECNaC,EAA+B,WAC1C,OACE,+BACE,gBAAKlF,IAAK2E,EAAWI,IAAK,GAAIC,MAAO,CAAEC,OAAQ,WAGrD,ECNaE,EAA6B,WACxC,OACE,+BACE,gBAAKnF,IAAK4E,EAASG,IAAK,GAAIC,MAAO,CAAEC,OAAQ,WAGnD,GC0LO,SAACH,EAAO,KACR,SAACK,EAAO,KACN,SAACD,EAAS,KACZ,UCnMsC,WAC3C,OACE,+BACE,gBAAKlF,IAAK6E,EAAYE,IAAK,GAAIC,MAAO,CAAEC,OAAQ,WAGtD,GD6LkB,KE9GX,SAACH,EAAO,KACR,SAACK,EAAO,KACN,SAACD,EAAS,ICgNZ,I,gNC3RME,EAET,SAAC,G,IACH/wB,EAAS,YACTC,EAAY,eACZK,EAAiB,oBACjBC,EAAc,iBACd9B,EAAa,gBACb+B,EAAS,YACThC,EAAQ,WAEAwL,GAAM,IAAA2D,gBAAe,SAAQ,EACrC,OACE,SAAC,EAAA+Z,cAAa,CACZsJ,QAASC,EACT9f,MAAO,CACL,CACE+f,aACE,SAAC,EAAAC,cAAa,CACZC,MAAOpnB,EAAE,8CAIf,CACE8D,MAAO9D,EAAE,yBACT2d,QAAS3nB,G,GAGT8N,MAAO9D,EAAE,6BACJ1J,EAaD,CACEqnB,QAAS1nB,GAbX,CACEsT,YAAY,EACZ8d,aAAc,CACZC,SAAU,OACVC,QAASvnB,EAAE,2CAEbwnB,SAAS,EACTb,MAAO,CACLc,cAAe,OACfC,OAAQ,aAOlB,CACEC,aAAa,G,GAGb7jB,MAAO9D,EAAE,+BACJzJ,EAaD,CACEonB,QAASlpB,GAbX,CACE8U,YAAY,EACZ8d,aAAc,CACZC,SAAU,OACVC,QAASvnB,EAAE,wCAEbwnB,SAAS,EACTb,MAAO,CACLc,cAAe,OACfC,OAAQ,a,GAQhB5jB,MAAO9D,EAAE,yBACJxJ,EAaD,CACEmnB,QAASnpB,GAbX,CACE+U,YAAY,EACZ8d,aAAc,CACZC,SAAU,OACVC,QAASvnB,EAAE,wCAEbwnB,SAAS,EACTb,MAAO,CACLc,cAAe,OACfC,OAAQ,eAU1B,EAEMT,EAAa,CACjBW,YAAa,CACXjB,MAAO,CAAEkB,OAAQ,Q,gNC5ERC,EAA+D,SAAC,GAC3E,IAAApxB,EAAa,gBACbsE,EAAY,eACZwB,EAAa,gBACbE,EAAY,eACTqrB,E,yUAAY,GAL4D,iEAOnE/nB,GAAM,IAAA2D,gBAAe,SAAQ,EAErC,OACE,iCACE,sBAASqkB,UAAU,8BAA4B,WAC7C,UAAC,EAAAC,WAAU,GAACC,OAAQ,cAAY,YAC9B,SAAC,EAAAC,eAAc,CACbxjB,OAAQ,WAAM,OACZ,SAAC,EAAAyjB,KAAI,GAACl2B,GAAIwE,GAAa,UAAGsJ,EAAE,2BADhB,KAIhB,SAAC,EAAAmoB,eAAc,GAACE,UAAU,GAAI,UAAGrtB,aAGrC,SAAC,EAAAiC,YAAW,GAAC4G,QAAS,EAAA0a,oBAAA,OAAyB,WAC7C,UAAC,EAAAG,MAAK,YACJ,SAAC,EAAAC,UAAS,WACR,SAAC,EAAAC,YAAW,WACV,SAAC,EAAAC,KAAI,GAACC,UAAU,MAAI,UAAE9jB,UAG1B,SAAC,EAAA2jB,UAAS,WACR,SAACoI,EAAoB,KAAKgB,aAIhC,SAAC,EAAA9qB,YAAW,GACV4G,QAAS,EAAA0a,oBAAA,MACT+J,QAAS,CAAEha,QAAS,aACpB0Z,UAAU,uBACVxJ,iBAAiB,GAAI,WAErB,SAAC,EAAA+J,IAAG,GACF1kB,QAAQ,WAAU,cACN,0BACZmkB,UAAU,oBAAkB,WAE5B,UAAC,EAAAQ,QAAO,YACN,SAAC,EAAAC,QAAO,GACN9B,MAAO,CAAE+B,UAAW,GAAG,cACX,yBACZ54B,GAAG,wBAAuB,aACdkQ,EAAE,iCACdkoB,OAAQ,gBACRG,SAA4B,cAAlB7rB,GAA6B,WAEvC,SAAC,EAAA4rB,KAAI,GAACl2B,GAAIwK,EAAwB,WAAC,UAChCsD,EAAE,wCAGP,SAAC,EAAAyoB,QAAO,GACN9B,MAAO,CAAE+B,UAAW,GAAG,cACX,sBACZ54B,GAAG,qBAAoB,aACXkQ,EAAE,8BACdkoB,OAAQ,aACRG,SAA4B,WAAlB7rB,GAA0B,WAEpC,SAAC,EAAA4rB,KAAI,GAACl2B,GAAIwK,EAAqB,QAAC,UAC7BsD,EAAE,qCAGP,SAAC,EAAAyoB,QAAO,GACN9B,MAAO,CAAE+B,UAAW,GAAG,cACX,yBACZ54B,GAAG,8BAA6B,aACpBkQ,EAAE,uCACdkoB,OAAQ,gBACRG,SAA4B,aAAlB7rB,GAA4B,WAEtC,SAAC,EAAA4rB,KAAI,GAACl2B,GAAIwK,EAAuB,UAAC,UAC/BsD,EAAE,8CAGP,SAAC,EAAAyoB,QAAO,GACN9B,MAAO,CAAE+B,UAAW,GAAG,cACX,2BACZ54B,GAAG,0BAAyB,aAChBkQ,EAAE,mCACdkoB,OAAQ,kBACRG,SAA4B,gBAAlB7rB,GAA+B,WAEzC,SAAC,EAAA4rB,KAAI,GAACl2B,GAAIwK,EAA0B,aAAC,UAClCsD,EAAE,0CAGP,SAAC,EAAAyoB,QAAO,GACN9B,MAAO,CAAE+B,UAAW,GAAG,cACX,wBACZ54B,GAAG,uBAAsB,aACbkQ,EAAE,gCACdkoB,OAAQ,eACRG,SAA4B,aAAlB7rB,GAA4B,WAEtC,SAAC,EAAA4rB,KAAI,GAACl2B,GAAIwK,EAAuB,UAAC,UAC/BsD,EAAE,iDAQnB,E,gNChHa2oB,EAET,SAAC,GACH,IAAAjyB,EAAa,gBACbsE,EAAY,eACZoG,EAAkB,qBAClBL,EAAkB,qBAClBzD,EAAS,YACTd,EAAa,gBACbwE,EAAQ,WACL+mB,E,yUAAY,GARZ,mHAUK/nB,GAAM,IAAA2D,gBAAe,SAAQ,EAErC,OACE,iCACE,sBAASqkB,UAAU,8BAA4B,WAC7C,UAAC,EAAAC,WAAU,GAACC,OAAQ,cAAY,YAC9B,SAAC,EAAAC,eAAc,CACbxjB,OAAQ,WAAM,OACZ,SAAC,EAAAyjB,KAAI,GAACl2B,GAAIwE,GAAa,UAAGsJ,EAAE,2BADhB,KAIhB,SAAC,EAAAmoB,eAAc,CACbxjB,OAAQ,WAAM,gBAAC,EAAAyjB,KAAI,GAACl2B,GAAIkP,GAAkB,UAAGpG,IAA/B,KAEhB,SAAC,EAAAmtB,eAAc,CACbxjB,OAAQ,WAAM,OACZ,SAAC,EAAAyjB,KAAI,GAACl2B,GAAI6O,GAAkB,UACzBf,EAAE,gCAFO,KAMhB,SAAC,EAAAmoB,eAAc,GAACE,UAAU,GAAI,UAAG/qB,aAGrC,SAAC,EAAAL,YAAW,GAAC4G,QAAS,EAAA0a,oBAAA,OAAyB,WAC7C,UAAC,EAAAG,MAAK,YACJ,SAAC,EAAAC,UAAS,WACR,SAAC,EAAAC,YAAW,WACV,SAAC,EAAAC,KAAI,GAACC,UAAU,MAAI,UAAExhB,UAG1B,SAAC,EAAAqhB,UAAS,WACR,SAACoI,EAAoB,KAAKgB,aAIhC,SAAC,EAAA9qB,YAAW,GACV4G,QAAS,EAAA0a,oBAAA,MACT+J,QAAS,CAAEha,QAAS,aACpB0Z,UAAU,uBACVxJ,iBAAiB,GAAI,WAErB,SAAC,EAAA+J,IAAG,GAAC1kB,QAAQ,WAAWmkB,UAAU,oBAAkB,WAClD,UAAC,EAAAQ,QAAO,YACN,SAAC,EAAAC,QAAO,GACN9B,MAAO,CAAE+B,UAAW,GAAG,aACX1oB,EAAE,4CACdkoB,OAAQ,gBACRG,SAA4B,aAAlB7rB,GAA4B,WAEtC,SAAC,EAAA4rB,KAAI,GAACl2B,GAAI8O,EAAmB,UAAC,UAC3BhB,EAAE,mDAGP,SAAC,EAAAyoB,QAAO,GACN9B,MAAO,CAAE+B,UAAW,GAAG,aACX1oB,EAAE,qCACdkoB,OAAQ,aACRG,SAA4B,aAAlB7rB,GAA4B,WAEtC,SAAC,EAAA4rB,KAAI,GAACl2B,GAAI8O,EAAmB,UAAC,UAC3BhB,EAAE,4CAGP,SAAC,EAAAyoB,QAAO,GACN9B,MAAO,CAAE+B,UAAW,GAAG,aACX1oB,EAAE,uCACdkoB,OAAQ,kBACRG,SAA4B,eAAlB7rB,GAA8B,WAExC,SAAC,EAAA4rB,KAAI,GAACl2B,GAAI8O,EAAqB,YAAC,UAC7BhB,EAAE,8CAGP,SAAC,EAAAyoB,QAAO,GACN9B,MAAO,CAAE+B,UAAW,GAAG,aACX1oB,EAAE,oCACdkoB,OAAQ,eACRG,SAA4B,YAAlB7rB,GAA2B,WAErC,SAAC,EAAA4rB,KAAI,GAACl2B,GAAI8O,EAAkB,SAAC,UAC1BhB,EAAE,qDAQnB,E,2NCrHa4oB,EAET,SAAC,GAAE,IAAA5tB,EAAY,eAAK0I,E,yUAAK,GAAxB,kBACK1D,GAAM,IAAA2D,gBAAe,SAAQ,EAErC,OACE,SAACC,EAAA,GAAW,KACNF,EAAK,CACTG,QAAS,cACTC,MAAO9D,EAAE,yBACT+D,kBAAmB/I,GAAY,WAE/B,SAAC,EAAAgJ,MAAK,CACJC,GAAI,QACJC,QAAS,0BACTC,WAAY,EAAC,uBACbC,OAAQ,CACNpJ,aAAY,OAKtB,E,2NCjCa,EAET,SAAC,G,IAAEyH,EAAG,MAAEK,EAAK,QAAEtT,EAAQ,WACzB,OACE,SAAC,eAAwB,GACvBiT,IAAKA,EACLC,UAAW,CACTC,GAAI,CACFC,OAAQ,WACN,4CACF,wBAAyB,WACvB,2CACFimB,MAAO,WAAM,2CACb,mBAAoB,WAAM,4CAC1BxpB,QAAS,WAAM,4CACfuB,MAAO,WAAM,4CACb,2BAA4B,WAC1B,4CACF,eAAgB,WAAM,4CACtB,kBAAmB,WAAM,4CACzB,iBAAkB,WAAM,4CACxB,oBAAqB,WACnB,6CAEJkoB,GAAI,CACFlmB,OAAQ,WAAM,OAAAzL,QAAQ4xB,QAAQ,CAAEC,OAAQ,WAA1B,IAGlBlmB,MAAOA,GAAK,UAEXtT,IAGP,E,qBC7BO,SAASy5B,IACN,IAAAjpB,GAAM,IAAA2D,gBAAe,SAAQ,EAE/B3O,EAA2C,CAC/C0d,MAAO1S,EAAE,kBACTub,SAAUvb,EAAE,qBACZuS,SAAUvS,EAAE,qBACZyS,aAAczS,EAAE,yBAChBwS,UAAWxS,EAAE,sBACb4S,YAAa5S,EAAE,wBACf6S,SAAU7S,EAAE,qBACZwb,UAAWxb,EAAE,sBACb0b,WAAY1b,EAAE,uBACdyb,SAAUzb,EAAE,sBAERkpB,EAA+D,CACnE5N,SAAUtb,EAAE,+BACZ0S,MAAO1S,EAAE,4BACTub,SAAUvb,EAAE,+BACZ6S,SAAU7S,EAAE,+BACZwb,UAAWxb,EAAE,gCACb0b,WAAY1b,EAAE,iCACdyb,SAAUzb,EAAE,gCAERvH,EAAqD,CACzD0wB,IAAKnpB,EAAE,6BACPopB,IAAKppB,EAAE,6BACPqpB,MAAOrpB,EAAE,gCAmCX,MAAO,CACL1M,OAzBE,CACFxD,GAAIkQ,EAAE,aACNrM,KAAMqM,EAAE,eACRwI,UAAWxI,EAAE,oBACb8S,UAAW9S,EAAE,oBACbmS,WAAYnS,EAAE,qBACdnM,MAAOmM,EAAE,gBACTrH,SAAUqH,EAAE,mBACZpH,OAAQoH,EAAE,iBACVlM,OAAQkM,EAAE,iBACVxH,KAAMwH,EAAE,eACRsS,KAAMtS,EAAE,eACR2J,QAAS3J,EAAE,kBACX6J,OAAQ7J,EAAE,iBACV+J,QAAS/J,EAAE,kBACXhB,cAAegB,EAAE,wBACjBN,YAAaM,EAAE,sBACfJ,eAAgBI,EAAE,yBAClBqK,YAAarK,EAAE,sBACf+R,QAAS/R,EAAE,kBACX5C,SAAU4C,EAAE,mBACZgT,aAAchT,EAAE,uBAChBuD,QAASvD,EAAE,mBAIXhL,SAAQ,EACRk0B,mBAAkB,EAClBzwB,UAAS,EACT6wB,gBApCE,CACFH,IAAK,CAAC,EACNC,IAAK,CAAC,EACNC,MAAO,CAAC,GAmCZ,CC1EO,SAASE,IACN,IAAAvpB,GAAM,IAAA2D,gBAAe,SAAQ,EA0CrC,MAAO,CACLrQ,OAvCE,CACFK,KAAMqM,EAAE,eACRyB,WAAYzB,EAAE,qBACd,iBAAkBA,EAAE,yBACpB,sBAAuBA,EAAE,8BACzB,wBAAyBA,EAAE,gCAC3B,oBAAqBA,EAAE,4BACvB,gCAAiCA,EAAE,wCACnC,sCAAuCA,EACrC,8CAEF,yBAA0BA,EAAE,iCAC5B,wBAAyBA,EAAE,gCAC3B,kBAAmBA,EAAE,0BACrB,eAAgBA,EAAE,uBAClB,gBAAiBA,EAAE,wBACnB,aAAcA,EAAE,qBAChB,mBAAoBA,EAAE,2BACtB,uBAAwBA,EAAE,+BAC1B,iBAAkBA,EAAE,yBACpB,WAAYA,EAAE,mBACd,0CAA2CA,EACzC,kDAEF,uBAAwBA,EAAE,+BAC1B,wCAAyCA,EACvC,gDAEF,yBAA0BA,EAAE,iCAC5B,4BAA6BA,EAAE,oCAC/B,sBAAuBA,EAAE,8BACzB,sBAAuBA,EAAE,8BACzB,oBAAqBA,EAAE,4BACvB,iCAAkCA,EAChC,yCAEF4L,YAAa5L,EAAE,uBAKnB,C,0BCvCawpB,EAA2D,SAAC,G,IACvErX,EAAU,aAEJsX,EAAYtX,GAAa,EAAAuX,EAAA,GAAkBvX,EAAYF,KAAK0X,OAAS,EAC3E,OACE,SAAC,EAAAC,MAAK,CACJ/lB,QACE4lB,EAAY,GACR,OACAA,EAAY,IAAMA,EAAY,EAC9B,UACA,SAEN3lB,OACE,SAAC,EAAAE,MAAK,CACJE,QAAQ,oBACRC,WAAY,CACV0lB,MAAM,SAACC,EAAA,EAAU,CAACC,KAAM5X,EAAY6X,OAAO,kBAE7C,YAEM,SACVC,UAAQ,EACRjC,UAAU,cAGhB,E,gNCGakC,EAA+D,SAAC,G,IAC3Ep6B,EAAE,KACF0Y,EAAS,YACTsK,EAAS,YACTjf,EAAK,QACL8E,EAAQ,WACRC,EAAM,SACNuZ,EAAU,aACVvH,EAAY,eACZ0H,EAAI,OACJ3I,EAAO,UACPE,EAAM,SACNE,EAAO,UACP/K,EAAa,gBACbU,EAAW,cACXE,EAAc,iBACdyK,EAAW,cACX0H,EAAO,UACPoY,EAAY,eAEJnqB,GAAM,IAAA2D,gBAAe,SAAQ,EAE/BymB,EAAqB,SAACtmB,EAAe7S,GAAkC,OAC3E,iCACE,SAAC,EAAAo5B,aAAY,GAACvL,UAAW,EAAAwL,qBAAA,IAAuB,UAAGxmB,KAClD7S,GACC,SAAC,EAAAo5B,aAAY,GAACvL,UAAW,EAAAwL,qBAAA,IAAuB,UAAGr5B,MAEnD,SAAC,EAAAs5B,SAAQ,CACPC,MAAM,MACNC,iBAAkBzqB,EAAE,2CAA4C,CAC9D0qB,YAAa5mB,QATsD,EAe7E,OACE,mBAAKkkB,UAAU,qCAAmC,WAC9B,aAAjBpd,GAA+BuH,IAC9B,SAACqX,EAAe,CAACrX,WAAYA,KAE/B,SAAC,EAAAyM,YAAW,WACV,UAAC,EAAA+L,SAAQ,GAAC7L,UAAW,EAAA8L,iBAAA,IAAmB,WACpB,aAAjBhgB,GACCwf,EACEpqB,EAAE,eACFsS,EACItS,EAAE,6CAA8C,CAC9C/O,MAAOqhB,SAETtiB,GAEPo6B,EACCpqB,EAAE,WACF2J,EACI3J,EAAE,sCAAuC,CACvC/O,MAAO0Y,SAET3Z,GAELo6B,EACCpqB,EAAE,UACF6J,EACI7J,EAAE,qCAAsC,CACtC/O,MAAO4Y,SAET7Z,GAELo6B,EACCpqB,EAAE,YACF+J,aAAO,EAAPA,EAAS9Y,OACL+O,EAAE,sCAAuC,CACvC/O,MAAO8Y,EAAQ9Y,aAEjBjB,GAELo6B,EACCpqB,EAAE,cACFhB,EACIgB,EAAE,yCAA0C,CAC1C/O,MAAO+N,SAEThP,GAELo6B,EACCpqB,EAAE,sBACFN,EACIM,EAAE,iDAAkD,CAClD/O,MAAOyO,SAET1P,GAELo6B,EACCpqB,EAAE,mBACFJ,EACII,EAAE,8CAA+C,CAC/C/O,MAAO2O,SAET5P,GAELo6B,EACCpqB,EAAE,iBACFqK,aAAW,EAAXA,EAAapZ,OACT+O,EAAE,2CAA4C,CAC5C/O,MAAOoZ,EAAYpZ,aAErBjB,GAGLo6B,EAAmBpqB,EAAE,aAAclQ,GACnCs6B,EAAmBpqB,EAAE,wBAAyBmqB,GAC9CC,EAAmBpqB,EAAE,gBAAiBnM,GACtCu2B,EACCpqB,EAAE,wBACF,SAAC8pB,EAAA,EAAU,CAACC,KAAMvhB,EAAWwhB,OAAQ,UAEtCI,EACCpqB,EAAE,wBACF,SAAC8pB,EAAA,EAAU,CAACC,KAAMjX,EAAWkX,OAAQ,UAEtCI,EAAmBpqB,EAAE,yBAA0BrH,GAC/CyxB,EAAmBpqB,EAAE,iBAAkBpH,GACvCwxB,EACCpqB,EAAE,6CACF,WACE,QAAgBhQ,IAAZ+hB,EAAJ,CAEO,GAAgB,YAAZA,EACT,OAAO/R,EAAE,gDAET,OAAQ+R,EAAQwB,aACd,IAAK,MACH,OACE,gCACGvT,EAAE,kDACH,kBACC+R,EAAQyB,gBAGf,IAAK,QACH,OACE,gCACGxT,EAAE,oDACH,kBACC+R,EAAQyB,gBAGf,IAAK,MACH,OACE,gCACGxT,EAAE,kDACH,kBACC+R,EAAQyB,gBAGf,IAAK,MACH,OACE,gCACGxT,EAAE,iDACH,kBACC+R,EAAQyB,gB,CAKpB,CAzCD,aA+CZ,E,+NCvMaqX,GAA6C,WAChD,IAAA7qB,GAAM,IAAA2D,gBAAe,SAAQ,EACrC,OACE,UAAC,EAAAiY,WAAU,IAAC/X,QAAS,EAAAgY,kBAAA,OAAuB,YAC1C,SAAC,EAAAC,eAAc,CAACC,KAAM,EAAA+O,wBAAyBC,MAAO,aACtD,SAAC,EAAA9O,MAAK,IAACC,aAAc,KAAM5J,KAAM,EAAA6J,WAAA,IAAa,UAC3Cnc,EAAE,iCAEL,SAAC,EAAAoc,eAAc,UAAEpc,EAAE,iCAGzB,E,mNCYagrB,GAET,SAAC,G,IACHC,EAAgB,mBAChBC,EAAc,iBACdC,EAAc,iBACdC,EAAgB,mBAChBC,EAAoB,uBACpBC,EAAe,kBACfC,EAAW,cACXC,EAAoB,uBACpBC,EAA6B,gCAErBzrB,GAAM,IAAA2D,kBAAgB,EAExB,GAA8B,IAAAxT,WAAkB,GAA/CE,EAAU,KAAEC,EAAa,KAMhC,OAAO26B,GACL,SAACJ,GAAmB,KAEpB,oBAAK7C,UAAU,qCAAmC,YAChD,UAAC,EAAApJ,YAAW,IAACoJ,UAAU,cAAY,YACjC,SAAC,EAAAnJ,KAAI,IAACC,UAAW,EAAA4M,aAAA,OAAkB,UAChC1rB,EAAE,6DAEL,SAAC,EAAA6e,KAAI,IAACC,UAAW,EAAA4M,aAAA,GAAiB1D,UAAU,cAAY,UACrDhoB,EAAE,uCAEL,SAAC,EAAA6e,KAAI,IAACC,UAAW,EAAA4M,aAAA,OAAkB,UAChC1rB,EAAE,kDAEJkrB,GACC,SAAC,EAAAX,SAAQ,CAACoB,SAAS,SAEnB,SAAC,EAAAC,cAAa,kBACA,iCACZC,cAAe7rB,EAAE,mCACjB8rB,YAAU,aAETX,UAIP,UAAC,EAAAvM,YAAW,IAACoJ,UAAU,cAAY,YACjC,SAAC,EAAAnJ,KAAI,IAACC,UAAW,EAAA4M,aAAA,GAAiB1D,UAAU,cAAY,UACrDhoB,EAAE,6CAEL,SAAC,EAAA6e,KAAI,IAACC,UAAW,EAAA4M,aAAA,OAAkB,WAE/B,SAAC,EAAA1nB,MAAK,CACJE,QACE,gEAEFC,WAAY,CACVlT,OACE,SAAC,EAAAm3B,KAAI,CACHl2B,GAAIm5B,EAAoB,cACZ,sCAQ1B,SAAC,EAAAU,OAAM,IACLloB,QAAS,EAAAmoB,cAAA,UACT/B,UAAQ,EACRtM,QAAS8N,EAA6B,cAC1B,4CAA0C,UAErDzrB,EAAE,6CAEL,SAAC,EAAA4e,YAAW,IAACoJ,UAAU,cAAY,WACjC,SAAC,EAAAnJ,KAAI,IAACC,UAAW,EAAA4M,aAAA,OAAkB,WAE/B,SAAC,EAAA1nB,MAAK,CACJE,QAAS,kCACTC,WAAY,CACVlT,OAAO,SAAC,EAAAm3B,KAAI,CAACl2B,GAAIo5B,cAM3B,SAAC,EAAA1M,YAAW,IAACoJ,UAAU,cAAY,WACjC,UAAC,EAAAiE,kBAAiB,IAChBC,eACE,mBAAKlE,UAAU,gBAAc,WAC3B,SAAC,EAAAnJ,KAAI,IAACC,UAAW,EAAA4M,aAAA,GAAiB1D,UAAW,gBAAc,UACxDhoB,EAAE,wCAIT3P,WAAYA,EACZ87B,SAlFwB,WAC9B77B,GAAeD,EACjB,EAiFQ23B,UAAU,cAAY,YAEtB,SAAC,EAAApJ,YAAW,IAACoJ,UAAU,cAAY,WACjC,SAAC,EAAAnJ,KAAI,IAACC,UAAW,EAAA4M,aAAA,OAAkB,UAChC1rB,EAAE,8CAGP,UAAC,EAAA4e,YAAW,YACV,8BACG5e,EAAE,4CACH,SAAC,EAAAosB,QAAO,IACN/O,eACE,yBACGrd,EAAE,qDAGPqsB,aACE,UAAC,EAAAzN,YAAW,YACV,uBAAI5e,EAAE,qDACN,wBACE,SAAC,EAAAgE,MAAK,CACJC,GAAI,iBACJC,QAAS,sBACTC,WAAY,EACV,SAAC,EAAA4nB,OAAM,CACL9B,UAAQ,EACRpmB,QAAS,EAAAmoB,cAAA,KACTlN,UAAU,IACVrkB,KAAK,6LAEP,SAAC,KAAY,CACX6xB,OAAQ,sBACR7xB,KAAK,oIACLutB,UAAW,wBAKP,WAGhB,SAAC,EAAA+D,OAAM,IACLloB,QAAS,EAAAmoB,cAAA,MAAmB,aAChBhsB,EACV,wDACD,WAED,SAAC,EAAAusB,SAAQ,aAIdhB,GACC,SAAC,EAAAK,cAAa,IACZC,cAAe7rB,EAAE,2CACjB8rB,YAAU,aAETP,MAGH,SAAC,EAAAhB,SAAQ,CAACoB,SAAS,SAErB,SAAC,EAAA/M,YAAW,IAACoJ,UAAU,cAAY,WACjC,SAAC,EAAAnJ,KAAI,IAACC,UAAW,EAAA4M,aAAA,OAAkB,UAChC1rB,EAAE,2DAIT,UAAC,EAAA4e,YAAW,IAACoJ,UAAU,cAAY,YACjC,8BACGhoB,EAAE,wCACH,SAAC,EAAAosB,QAAO,IACN/O,eACE,yBACGrd,EAAE,oDAGPqsB,aACE,UAAC,EAAAzN,YAAW,YACV,uBAAI5e,EAAE,mDACN,wBACE,SAAC,EAAAgE,MAAK,CACJC,GAAI,iBACJC,QAAS,sBACTC,WAAY,EACV,SAAC,EAAA4nB,OAAM,CACL9B,UAAQ,EACRpmB,QAAS,EAAAmoB,cAAA,KACTlN,UAAU,IACVrkB,KAAK,4KAEP,SAAC,KAAY,CACX6xB,OAAQ,sBACR7xB,KAAK,oIACLutB,UAAW,wBAKP,WAGhB,SAAC,EAAA+D,OAAM,IACLloB,QAAS,EAAAmoB,cAAA,MAAmB,aAChBhsB,EACV,sDACD,WAED,SAAC,EAAAusB,SAAQ,aAIdrB,GACC,SAAC,EAAAX,SAAQ,CAACoB,SAAS,SAEnB,SAAC,EAAAC,cAAa,IACZC,cAAe7rB,EAAE,uCACjB8rB,YAAU,aAETN,MAGL,SAAC,EAAA5M,YAAW,IAACoJ,UAAU,cAAY,WACjC,SAAC,EAAAnJ,KAAI,IAACC,UAAW,EAAA4M,aAAA,OAAkB,UAChC1rB,EAAE,iEAMb,UAAC,EAAA4e,YAAW,IAACoJ,UAAU,cAAY,YACjC,SAAC,EAAAnJ,KAAI,IAACC,UAAW,EAAA4M,aAAA,GAAiB1D,UAAU,cAAY,UACrDhoB,EAAE,4CAEL,UAAC,EAAA6e,KAAI,IAACC,UAAW,EAAA4M,aAAA,GAAiB1D,UAAU,cAAY,WACrDhoB,EAAE,mCAAoC,KACvC,SAAC,EAAAwsB,MAAK,IAACzB,MAAM,SAAO,UAAE/qB,EAAE,kCACxB,SAAC,EAAAosB,QAAO,iBACMpsB,EAAE,mCACdqsB,aACE,yBAAMrsB,EAAE,sDAAyD,WAGnE,SAAC,EAAA+rB,OAAM,IACLloB,QAAS,EAAAmoB,cAAA,MAAmB,aAChBhsB,EAAE,oDAAkD,WAEhE,SAAC,EAAAusB,SAAQ,eAIf,SAAC,EAAA1N,KAAI,IAACC,UAAW,EAAA4M,aAAA,OAAkB,UAChC1rB,EAAE,mDAEL,4BAASA,EAAE,uCACVkrB,GACC,SAAC,EAAAX,SAAQ,CAACoB,SAAS,SAEnB,SAAC,EAAAC,cAAa,IACZC,cAAe7rB,EAAE,qCACjB8rB,YAAU,aAETV,UAIP,UAAC,EAAAxM,YAAW,IAACoJ,UAAU,cAAY,YACjC,SAAC,EAAAnJ,KAAI,IAACC,UAAW,EAAA4M,aAAA,GAAiB1D,UAAU,cAAY,UACrDhoB,EAAE,iCAEL,SAAC,EAAA6e,KAAI,IAACC,UAAW,EAAA4M,aAAA,OAAkB,UAChC1rB,EAAE,mDAKb,E,mNCnSaysB,GAET,SAAC,G,IAAEC,EAAc,iBAAEC,EAAa,gBAAEC,EAAW,cACzC,GAA8B,IAAAz8B,WAAS,GAAtCE,EAAU,KAAEC,EAAa,KAE1B,GAAsB,IAAAH,WAAkB,GAAvC08B,EAAM,KAAEC,EAAS,MAExB,IAAA97B,YAAU,WACRV,GAAc,EAChB,GAAG,CAACs8B,IAEJ,IAeMG,EAAWL,EACbC,EAAgB,KAAOD,EACvBC,EAEE3L,GACJ,SAAC,EAAAgM,gBAAe,WACd,SAAC,EAAAC,oBAAmB,IAClBn9B,GAAG,oBACHo9B,OAAO,eAAc,aACV,oBACXC,UAAW,IACXC,SAAS,QACTvpB,QAAQ,QACR8Z,QAAS,SAAC1b,GAAM,OA5BkBorB,EA4BGN,OA3BzCO,UAAUC,UACPC,UAAUH,EAAKnkB,YACfmF,MAAK,WACJye,GAAU,EACZ,IACCW,OAAM,WACLX,GAAU,EACZ,IARsB,IAAcO,CA4BlB,GAA8B,UAE7CR,EAAS,oCAAsC,yBAKtD,OACE,UAAC,EAAAa,UAAS,IAAC1M,QAASA,GAAO,YACzB,UAAC,EAAA2M,cAAa,IAAC79B,GAAG,gBAAc,WAC7B68B,GAED,SAAC,EAAAV,kBAAiB,IAChB57B,WAAYA,EACZu9B,YAAU,EACVC,UAAU,qBAAmB,UAE5BnB,SAGJA,GACC,SAAC,EAAAoB,wBAAuB,IACtBz9B,WAAYA,EACZ87B,SAxCS,SAAC97B,GAChBC,EAAcD,EAChB,EAuCQw9B,UAAU,oBACV95B,UAAU,MAAI,UAEb1D,EAAa,YAAc,eAE5B,QAGV,EC1Fa09B,GAAsB,SACjCC,EACAC,GAEA,MAAO,0OAQqBD,EAAiB,0JAGRC,EAAgB,KACvD,EAmFaC,GAAwB,SAACD,GACpC,MAAO,oMAMEA,EAAgB,uHAO3B,EAEaE,GAA+B,SAACH,GAC3C,MAAO,0KAKmBA,EAAiB,gJAO7C,EA8CaI,GAA+B,SAC1CJ,EACAC,GAEA,MAAO,sYAW0BD,EAAiB,2UAOhBC,EAAgB,wHAEpD,EA8DaI,GAA4B,SACvCL,EACAC,GAEA,MAAO,oQAUoBD,EAAiB,uJAGRC,EAAgB,KACtD,E,mNCtOaK,GAA+D,SAAC,G,IAC3EN,EAAiB,oBACjBC,EAAgB,mBAERjuB,GAAM,IAAA2D,gBAAe,SAAQ,EAE/B,GAAkC,IAAAxT,UAAqB,QAAtDo+B,EAAY,KAAEC,EAAe,KAEpC,OACE,mBAAKxG,UAAU,qCAAmC,WAChD,UAAC,EAAApJ,YAAW,IAACoJ,UAAU,cAAY,YACjC,SAAC,EAAAnJ,KAAI,IAACC,UAAW,EAAA4M,aAAA,OAAkB,UAChC1rB,EAAE,8CAEL,SAAC,EAAA6e,KAAI,IAACC,UAAW,EAAA4M,aAAA,OAAkB,UAChC1rB,EAAE,8CAEL,UAAC,EAAAyuB,YAAW,YACV,SAAC,EAAAC,gBAAe,CACdrB,KAAMrtB,EAAE,4BACR/O,MAAM,OACN09B,SAAS,OACTC,WAA6B,SAAjBL,EACZM,SAAU,WAAM,OAAAL,EAAgB,OAAhB,KAElB,SAAC,EAAAE,gBAAe,CACdrB,KAAMrtB,EAAE,8BACR/O,MAAM,SACN09B,SAAS,SACTC,WAA6B,WAAjBL,EACZM,SAAU,WAAM,OAAAL,EAAgB,SAAhB,KAElB,SAAC,EAAAE,gBAAe,CACdrB,KAAMrtB,EAAE,+BACR/O,MAAM,UACN09B,SAAS,UACTC,WAA6B,YAAjBL,EACZM,SAAU,WAAM,OAAAL,EAAgB,UAAhB,KAElB,SAAC,EAAAE,gBAAe,CACdrB,KAAMrtB,EAAE,mCACR/O,MAAM,aACN09B,SAAS,aACTC,WAA6B,eAAjBL,EACZM,SAAU,WAAM,OAAAL,EAAgB,aAAhB,QAGpB,SAAC,EAAA3P,KAAI,IAACC,UAAW,EAAA4M,aAAA,GAAiB1D,UAAU,cAAY,UACrDhoB,EAAE,6CAEL,SAAC,EAAA6e,KAAI,IAACC,UAAW,EAAA4M,aAAA,OAAkB,UAChC1rB,EAAE,yDAEL,SAAC,EAAA6e,KAAI,IAACC,UAAW,EAAA4M,aAAA,OAAkB,UAChC1rB,EAAE,+BAEJ,WACC,OAAQuuB,GACN,IAAK,OACH,OACE,SAAC9B,GAAiB,CAChBE,cAAeoB,GACbC,EACAC,GAEFvB,eD/FwB,m6BCgGxBE,YAAa2B,IAGnB,IAAK,SACH,OACE,SAAC9B,GAAiB,CAChBE,cAAeuB,GAAsBD,GACrCvB,eAAgByB,GACdH,GAEFpB,YAAa2B,IAGnB,IAAK,UACH,OACE,SAAC9B,GAAiB,CAChBE,cD+BoB,gkBC9BpBD,eAAgB0B,GACdJ,EACAC,GAEFrB,YAAa2B,IAGnB,IAAK,aACH,OACE,SAAC9B,GAAiB,CAChBE,cAAe0B,GACbL,EACAC,GAEFvB,eDuI6B,yuBCtI7BE,YAAa2B,IAGnB,QACE,OAAO,KAEZ,CAhDA,IAiDD,SAAC,EAAA1P,KAAI,IAACC,UAAW,EAAA4M,aAAA,GAAiB1D,UAAU,cAAY,UACrDhoB,EAAE,uCAEa,YAAjBuuB,GACC,iCACE,SAAC,EAAA1P,KAAI,IAACC,UAAW,EAAA4M,aAAA,OAAkB,UAChC1rB,EAAE,4DAEL,SAACysB,GAAiB,CAChBE,cDsC0B,wOCrC1BD,eD8CgC,8gBC7ChCE,YAAa2B,QAIjB,iCACE,SAAC,EAAA1P,KAAI,IAACC,UAAW,EAAA4M,aAAA,OAAkB,WACjC,SAAC,EAAA1nB,MAAK,CACJC,GAAI,QACJC,QAAS,+CACTE,OAAQ,CACN0qB,YAAaP,SAInB,SAAC,EAAA1P,KAAI,IAACC,UAAW,EAAA4M,aAAA,OAAkB,UAChC1rB,EAAE,+BAEJ,WACC,OAAQuuB,GACN,IAAK,OACH,OACE,SAAC9B,GAAiB,CAChBE,cDvJe,0VCwJfD,eD7IqB,+fC8IrBE,YAAa2B,IAGnB,IAAK,SACH,OAAO,SAAC9B,GAAiB,CAACE,cD9Dd,+JC+Dd,IAAK,aACH,OACE,SAACF,GAAiB,CAChBE,cDmGqB,snBClGrBD,eDgH2B,42BC/G3BE,YAAa2B,IAGnB,QACE,OAAO,KAEZ,CAvBA,OA2BL,SAAC,EAAA1P,KAAI,IAACC,UAAW,EAAA4M,aAAA,GAAiB1D,UAAU,cAAY,UACrDhoB,EAAE,uCAEa,eAAjBuuB,GACC,iCACE,SAAC,EAAA1P,KAAI,IAACC,UAAW,EAAA4M,aAAA,OAAkB,UAChC1rB,EAAE,gEAEL,SAAC,EAAA6e,KAAI,IAACC,UAAW,EAAA4M,aAAA,GAAiB1D,UAAU,cAAY,UACrDhoB,EAAE,sDAEL,SAAC,EAAA6e,KAAI,IAACC,UAAW,EAAA4M,aAAA,OAAkB,UAChC1rB,EAAE,kEAEL,SAACysB,GAAiB,CAChBE,cDmJmC,soBClJnCD,eDiKyC,u0BChKzCE,YAAa2B,KAEf,SAAC,EAAA1P,KAAI,IAACC,UAAW,EAAA4M,aAAA,GAAiB1D,UAAU,cAAY,UACrDhoB,EAAE,wCAEL,SAAC,EAAA6e,KAAI,IAACC,UAAW,EAAA4M,aAAA,OAAkB,UAChC1rB,EAAE,oDAEL,SAACysB,GAAiB,CAChBE,cD2G6B,mmBC1G7BD,eDwHmC,6UCvHnCE,YAAa2B,KAEf,SAAC,EAAA1P,KAAI,IAACC,UAAW,EAAA4M,aAAA,GAAiB1D,UAAU,cAAY,UACrDhoB,EAAE,wCAEL,SAAC,EAAA6e,KAAI,IAACC,UAAW,EAAA4M,aAAA,OAAkB,UAChC1rB,EAAE,oDAEL,SAACysB,GAAiB,CAChBE,cDsKoC,mKCrKpCD,eD2K0C,8LC1K1CE,YAAa2B,QAIjB,iCACE,SAAC,EAAA1P,KAAI,IAACC,UAAW,EAAA4M,aAAA,OAAkB,WACjC,SAAC,EAAA1nB,MAAK,CACJC,GAAI,QACJC,QAAS,+CACTE,OAAQ,CACN0qB,YAAaP,QAIlB,WACC,OAAQA,GACN,IAAK,OACH,OACE,SAAC9B,GAAiB,CAChBE,cD9Me,4XC+MfD,eDpMqB,inCCqMrBE,YAAa2B,IAGnB,IAAK,SACH,OACE,SAAC9B,GAAiB,CAChBE,cDzIiB,4QC0IjBD,eD9HuB,6KC+HvBE,YAAa2B,IAGnB,IAAK,UACH,OACE,SAAC9B,GAAiB,CAChBE,cDtDkB,4hBCuDlBD,eDxCwB,8fCyCxBE,YAAa2B,IAGnB,QACE,OAAO,KAEZ,CA7BA,YAmCb,E,mNC/PaQ,GAET,SAAC,G,IAAE7+B,EAAQ,WAAEK,EAAS,YAAEF,EAAU,aAAEe,EAAW,cAAEX,EAAO,UAAEjB,EAAQ,WAC9D+3B,GAAU,IAAAr2B,UAAQ,WACtB,OACE,SAAC,EAAA89B,mBAAkB,UAChB9+B,GACC,SAAC++B,GAAwB,CACvB/+B,SAAUA,EACVK,UAAWA,EACXa,YAAaA,EACbX,QAASA,IAET,MAGV,GAAG,CAACF,EAAWL,EAAUO,EAASW,IAClC,OACE,SAAC,EAAA89B,OAAM,IAAC7+B,WAAYA,EAAY45B,UAAU,GAAI,WAC5C,SAAC,EAAAkF,cAAa,IAACC,aAAc7H,GAAO,WAClC,SAAC,EAAA8H,kBAAiB,IAChBrH,UAAW,gDAA8C,UAExDx4B,UAKX,EAIay/B,GAIT,SAAC,G,IAAE/+B,EAAQ,WAAEK,EAAS,YAAEa,EAAW,cAAEX,EAAO,UACtCuP,GAAM,IAAA2D,gBAAe,CAAC,UAAS,EACjCjR,EAASu2B,IAETqG,GAAsC,IAAA1+B,cAC1C,SAACgpB,EAAGzlB,GAEF/C,EADU+C,EAEZ,GACA,CAAC/C,IAGG85B,EAAiB,cAA0Bh7B,EAAS4D,QAE1D,OACE,iCACE,UAAC,EAAAy7B,WAAU,YACT,UAAC,EAAA3Q,YAAW,YACV,SAAC,EAAAC,KAAI,IAACC,UAAW,EAAA4M,aAAA,MAAoB1D,UAAW,aAAW,UACxDhoB,EAAE,mBAEL,SAAC,EAAAic,MAAK,IACJC,aAAc,KACd5J,KAAM,EAAA6J,WAAA,GACN6L,UAAW,aAAW,UAErB93B,EAASyD,YAGd,SAAC,EAAA67B,cAAa,WACZ,SAAC,EAAAC,kBAAiB,CAAC9R,QAASltB,UAGhC,SAAC,EAAAi/B,gBAAe,WACd,UAAC,EAAAC,KAAI,IAACC,UAAWr/B,EAAWs/B,SAAUP,GAAY,YAChD,SAAC,EAAAQ,IAAG,IACFC,SAAU,UACVjsB,OAAO,SAAC,EAAAksB,aAAY,UAAEhwB,EAAE,0BAAsC,WAE9D,mBAAKgoB,UAAW,yBAAuB,WACrC,SAACkC,EAAe,CACdp6B,GAAII,EAASJ,GACb+D,MAAO3D,EAAS2D,MAChB2U,WAAW,EAAAynB,EAAA,GAAS//B,EAASsY,WAC7BsK,WAAW,EAAAmd,EAAA,GAAS//B,EAAS4iB,WAC7BX,WACEjiB,EAASiiB,YACL,EAAA8d,EAAA,GAAS//B,EAASiiB,iBAClBniB,EAENsiB,KAAMpiB,EAASoiB,KACf3I,QAASzZ,EAASyZ,QAClBE,OAAQ3Z,EAAS2Z,OACjBE,QAAS7Z,EAAS6Z,QAClB/K,cAAe9O,EAAS8O,cACxBU,YAAaxP,EAASwP,YACtBE,eAAgB1P,EAAS0P,eACzByK,YAAana,EAASma,YACtB1R,SACEjG,EAAO+F,UAAUvI,EAASyI,WAAazI,EAASyI,SAElDC,OACElG,EAAO42B,gBAAgBp5B,EAASyI,UAAUzI,EAAS0I,SACnD1I,EAAS0I,OAEXgS,aAAc1a,EAASsI,KACvBuZ,QAAS7hB,EAAS6hB,QAClBoY,aAAcj6B,EAASqT,iBAI7B,SAAC,EAAAusB,IAAG,IACFC,SAAU,cACVjsB,OAAO,SAAC,EAAAksB,aAAY,UAAEhwB,EAAE,6BAA0C,cACtD,4BAA0B,WAEtC,mBAAKgoB,UAAW,yBAAuB,WACrC,SAACgD,GAAoB,CACnBE,eAAgBA,EAChBC,eAAgB+E,GAAkBhgC,EAAS8iB,cAC3CoY,iBAAkB,OAClBC,qBAAsB,mBACtBC,gBAAiB,YACjBC,YAAa4E,GAAkBjgC,EAASkN,UACxCquB,8BAA+B,WAE/B,EACAD,qBACE,gEAKR,SAAC,EAAAsE,IAAG,IACFC,SAAU,aACVjsB,OAAO,SAAC,EAAAksB,aAAY,UAAEhwB,EAAE,8BAA0C,WAElE,mBAAKgoB,UAAW,yBAAuB,WACrC,SAACsG,GAAe,CACdN,kBAAmBkC,GAAkBhgC,EAAS8iB,cAC9Cib,iBAAkB,uBAQlC,EAEMiC,GAAoB,SAACld,GACzB,GAAKA,EAGL,OAAOA,aAAY,EAAZA,EAAcod,SAAS,SAAUpd,EAAe,UAAGA,EAAY,OACxE,EAEMmd,GAAoB,SAAC/yB,GACzB,OAAOA,EAAW,UAAGA,EAAQ,iBAAapN,CAC5C,E,0OC5JaqgC,IAAc,IAAAC,aACzB,SACE,EACAC,G,IADEt/B,EAAK,QAAE,IAAAu/B,YAAAA,OAAW,IAAG,GAAK,EAAE,IAAAC,UAAAA,OAAS,IAAG,GAAK,EAAE,IAAAC,YAAAA,OAAW,IAAG,GAAK,EAG5D1wB,GAAM,IAAA2D,gBAAe,SAAQ,EAE/BgtB,EAAgBD,EAAc,OAAS,QAE7C,QAAQ,GACN,KAAK,cAAuBz/B,GAC1B,OACE,0BACE,UAAC,EAAA2/B,MAAK,IAACC,WAAS,EAAC7I,UAAU,gBAAc,YACvC,SAAC,EAAA8I,UAAS,WACR,SAAC,EAAAC,gBAAe,CAAC/I,UAAU,mBAE7B,SAAC,EAAA8I,UAAS,UAAE9wB,EAAE,0BAKtB,KAAK,cAA0B/O,GAC7B,QAAQ,GACN,KAAKu/B,EACH,OACE,4BACE,UAAC,EAAAI,MAAK,IAACC,WAAS,EAAC7I,UAAU,gBAAc,YACvC,SAAC,EAAA8I,UAAS,WACR,SAAC,EAAAE,QAAO,CAAC1e,KAAK,UAEhB,SAAC,EAAAwe,UAAS,WACR,SAAC,EAAA/E,OAAM,IAACwE,IAAKA,EAAK1sB,QAAS8sB,EAAe1G,UAAQ,aAC/CjqB,EAAE,+BAIT,SAAC,EAAA4pB,MAAK,CACJ/lB,QAAQ,UACRomB,UAAQ,EACRgH,SAAO,EACPntB,MAAM,4CAId,KAAK2sB,EACH,OACE,4BACE,UAAC,EAAAG,MAAK,IAACC,WAAS,EAAC7I,UAAU,gBAAc,YACvC,SAAC,EAAA8I,UAAS,WACR,SAAC,EAAAE,QAAO,CAAC1e,KAAK,UAEhB,SAAC,EAAAwe,UAAS,WACR,SAAC,EAAA/E,OAAM,IAACwE,IAAKA,EAAK1sB,QAAS8sB,EAAe1G,UAAQ,aAC/CjqB,EAAE,+BAIT,SAAC,EAAA4pB,MAAK,CACJ/lB,QAAQ,SACRomB,UAAQ,EACRgH,SAAO,EACPntB,MAAO9D,EAAE,sCAIjB,QACE,OACE,0BACE,UAAC,EAAA4wB,MAAK,IAACC,WAAS,EAAC7I,UAAU,gBAAc,YACvC,SAAC,EAAA8I,UAAS,WACR,SAAC,EAAAE,QAAO,CAAC1e,KAAK,UAEhB,UAAC,EAAAwe,UAAS,YACR,SAAC,EAAA/E,OAAM,IAACwE,IAAKA,EAAK1sB,QAAS8sB,EAAe1G,UAAQ,aAC/CjqB,EAAE,yBAEL,SAAC,EAAAkxB,KAAI,WACH,SAAC,EAAAC,SAAQ,WACP,SAAC,EAAAC,WAAU,WACT,SAAC,EAAAC,eAAc,IAACxtB,QAAQ,iBAAe,UACpC7D,EAAE,iDAWzB,KAAK,cAA0B/O,GAC7B,OACE,0BACE,UAAC,EAAA2/B,MAAK,IAACC,WAAS,EAAC7I,UAAU,gBAAc,YACvC,SAAC,EAAA8I,UAAS,WACR,SAAC,EAAAhG,wBAAuB,CAAC9C,UAAU,sBAErC,SAAC,EAAA8I,UAAS,UAAE9wB,EAAE,6BAKtB,KAAK,cAA4B/O,GAC/B,OACE,0BACE,kBAAG+2B,UAAU,kBAAgB,eAAGhoB,EAAE,6BAGxC,KAAK,cAA2B/O,GAC9B,OACE,0BACE,UAAC,EAAA2/B,MAAK,IAACC,WAAS,EAAC7I,UAAU,gBAAc,YACvC,SAAC,EAAA8I,UAAS,WACR,SAAC,EAAAhG,wBAAuB,CAAC9C,UAAU,sBAErC,SAAC,EAAA8I,UAAS,WACR,SAAC,EAAA/E,OAAM,IAACwE,IAAKA,EAAK1sB,QAAS8sB,EAAe1G,UAAQ,aAC/CjqB,EAAE,iCAMf,KAAK,cAA0B/O,GAC7B,OACE,0BACE,UAAC,EAAA2/B,MAAK,IAACC,WAAS,EAAC7I,UAAU,gBAAc,YACvC,SAAC,EAAA8I,UAAS,WACR,SAAC,EAAAE,QAAO,CAAC1e,KAAK,UAEhB,SAAC,EAAAwe,UAAS,UAAE9wB,EAAE,6BAItB,KAAK,cAA0B/O,GAC7B,OACE,0BACE,kBAAG+2B,UAAU,kBAAgB,eAAGhoB,EAAE,2BAGxC,QACE,OAAO,KAEb,ICtKWsxB,GAAsC,CACjD,UACA,YACA,gBAGWC,GAET,CACF7e,MAAO,KACP6I,SAAU,KACVhJ,SAAU,UACVE,aAAc,eACdD,UAAW,YACXI,YAAa,KACbC,SAAU,KACV2I,UAAW,YACXE,WAAY,KACZD,SAAU,M,mNC3BC+V,GAET,SAAC,G,IAAEC,EAAa,gBACVzxB,GAAM,IAAA2D,gBAAe,yBAAwB,EAE/C+tB,EAAcJ,GAAmBK,WAAU,SAAC7oB,GAAM,OAAAA,IAAM2oB,CAAN,IAElDG,EAAa,SAACC,GAClB,OAACH,IAAgBG,EAAS,OACzBH,EAAcG,GAAS,YACxB,SAFA,EAIF,OACE,UAAC,EAAAC,gBAAe,IAACC,YAAY,GAAI,YAC/B,SAAC,EAAAC,aAAY,IACXliC,GAAI,UACJmiC,QAAS,UACTC,UAA6B,YAAlBT,EACXjR,YAAaxgB,EAAE,4CAA2C,aAC9CA,EAAE,4CACd6D,QAAS+tB,EAAW,IAAE,UAErB5xB,EAAE,0CAGL,SAAC,EAAAgyB,aAAY,IACXliC,GAAI,eACJmiC,QAAS,eACTC,UAA6B,iBAAlBT,EACXjR,YAAaxgB,EAAE,iDAAgD,aACnDA,EAAE,iDACd6D,QAAS+tB,EAAW,IAAE,UAErB5xB,EAAE,+CAEL,SAAC,EAAAgyB,aAAY,IACXliC,GAAI,YACJmiC,QAAS,YACTC,UAA6B,cAAlBT,EACXjR,YAAaxgB,EAAE,8CAA6C,aAChDA,EAAE,8CACd6D,QAAS+tB,EAAW,IAAE,UAErB5xB,EAAE,8CAIX,E,mNCjCamyB,GAET,SAAC,G,IACHV,EAAa,gBACb,IAAAjB,YAAAA,OAAW,IAAG,GAAK,EACnB,IAAAC,UAAAA,OAAS,IAAG,GAAK,EACjBv6B,EAAwB,2BACxBC,EAAkB,qBAEV6J,GAAM,IAAA2D,gBAAe,yBAAwB,EAE/C+tB,EAAcJ,GAAmBK,WAAU,SAAC7oB,GAAM,OAAAA,IAAM2oB,CAAN,IAExD,OACE,0BACE,UAAC,EAAAW,MAAK,IAACvB,WAAS,eACd,UAAC,EAAAwB,UAAS,WACP7B,IACC,SAAC,EAAA5G,MAAK,IACJ/lB,QAAQ,UACRomB,UAAQ,EACRgH,SAAO,EACPntB,MAAO9D,EAAE,gDAA8C,WAEvD,SAAC,EAAA4e,YAAW,WACV,SAAC,EAAAC,KAAI,IAACC,UAAW,EAAA4M,aAAA,OAAkB,WACjC,SAAC,EAAA1nB,MAAK,CACJC,GAAI,CAAC,yBACLC,QAAQ,mDACRC,WAAY,EACV,SAAC,EAAA4nB,OAAM,CAELloB,QAAS,EAAAmoB,cAAA,KACTrO,QAASznB,EACT+zB,UAAQ,GAHJ,iCAWjBwG,IACC,SAAC,EAAA7G,MAAK,IACJ/lB,QAAQ,SACRomB,UAAQ,EACRgH,SAAO,EACPntB,MAAO9D,EAAE,gDAA8C,WAEvD,SAAC,EAAA4e,YAAW,WACV,SAAC,EAAAC,KAAI,IAACC,UAAW,EAAA4M,aAAA,OAAkB,WACjC,SAAC,EAAA1nB,MAAK,CACJC,GAAI,CAAC,yBACLC,QAAQ,iDACRC,WAAY,EACV,SAAC,EAAA4nB,OAAM,CAELloB,QAAS,EAAAmoB,cAAA,KACTrO,QAASznB,EACT+zB,UAAQ,GAHJ,uBAKN,SAAC,EAAA8B,OAAM,CAELloB,QAAS,EAAAmoB,cAAA,KACTrO,QAASxnB,EACT8zB,UAAQ,GAHJ,gCAWhBwG,IAAcD,IACd,SAAC,EAAA5R,YAAW,WACV,SAAC,EAAAC,KAAI,IAACC,UAAW,EAAA4M,aAAA,OAAkB,WACjC,SAAC,EAAA1nB,MAAK,CACJC,GAAI,CAAC,yBACLC,QAAQ,sCACRC,WAAY,EACV,SAAC,EAAA4nB,OAAM,CAELloB,QAAS,EAAAmoB,cAAA,KACTrO,QAASznB,EACT+zB,UAAQ,GAHJ,kCAWlB,SAAC,EAAAoI,UAAS,UACPryB,EAAE,uCAAwC,CACzC0xB,YAAW,EACXroB,MAAOioB,GAAmBn4B,YAG9B,SAAC,EAAAk5B,UAAS,WACR,SAACb,GAAqB,CAACC,cAAeA,WAKhD,E,mNC3Faa,GAA2D,SAAC,G,IACvE,IAAAC,YAAAA,OAAW,IAAG,GAAK,EACnBz+B,EAAM,SACN,IAAA08B,YAAAA,OAAW,IAAG,GAAK,EACnB,IAAAC,UAAAA,OAAS,IAAG,GAAK,EACjBv6B,EAAwB,2BACxBC,EAAkB,qBAClBq8B,EAAS,YACThjC,EAAQ,WAEAwQ,GAAM,IAAA2D,gBAAe,yBAAwB,EAE/C,GAA4B,IAAAxT,UAASoiC,GAApCE,EAAS,KAAEC,EAAY,KACxBjiC,EAAU,WAAM,OAAAiiC,GAAa,EAAb,EAEhBC,GAA+B,IAAA/hC,cAAY,WAC/CH,IACAyF,GACF,GAAG,CAACA,IAEE08B,GAAyB,IAAAhiC,cAAY,WACzCH,IACA0F,GACF,GAAG,CAACA,IAEJ,OACE,SAAC,EAAAi2B,QAAO,IACN/O,cAAerd,EAAE,8BACjBqsB,aACE,SAAC8F,GAAoB,CACnBV,cAAe39B,EACf08B,YAAaA,EACbC,UAAWA,EACXv6B,yBAA0By8B,EAC1Bx8B,mBAAoBy8B,IAGxBH,UAAWA,EACXI,WAAY,WAAM,OAAAH,GAAa,EAAb,EAClBI,YAAa,WAAM,OAAAJ,GAAa,EAAb,EACnBpL,SAAU,QACVyL,YAAY,EACZP,UAAWA,GAAS,UAEnBhjC,IAGP,E,mNCzEawjC,GAAiE,SAAC,G,IAC7ExjC,EAAQ,WACRgjC,EAAS,YAEDxyB,GAAM,IAAA2D,gBAAe,SAAQ,EACrC,OACE,SAAC,EAAAyoB,QAAO,IACN6G,qBAAsB,UACtBC,YAAY,SAAC,EAAApI,wBAAuB,IACpCzN,cAAerd,EAAE,yBACjBqsB,aACE,SAAC,EAAAzN,YAAW,WACV,uBAAI5e,EAAE,8BAGVsnB,SAAU,QACVkL,UAAWA,GAAS,UAEnBhjC,IAGP,ECXa2jC,GAET,SAAC,G,IACHr/B,EAAM,SACN0U,EAAS,YACT,IAAA4qB,oBAAAA,OAAmB,IAAG,KAAE,EACxB,IAAAC,kBAAAA,OAAiB,IAAG,KAAE,EACtBn9B,EAAwB,2BACxBC,EAAkB,qBAEZm9B,EAAgB/B,GAAsBz9B,GACtC,GAAoB,IAAA3D,WAAsC,GAAzDojC,EAAK,KAAEC,EAAQ,KAChBC,GAAW,IAAA/iC,QAA0B,MAErCgjC,GAAiB,IAAA9iC,cAAY,WACjC,IAAM+iC,GAAU,EAAAC,GAAA,GAAoB,IAAI3hB,KAAQzJ,GAE9CgrB,EADEG,EAAUN,EACH,QACAM,EAAUP,GACV,UAIb,GAAG,CAAC5qB,EAAW6qB,EAAmBD,KAElC,EAAAS,GAAA,GAAYH,EAAgB,KAC5B,IAAMlD,EAAwB,YAAV+C,EACd9C,EAAsB,UAAV8C,EAClB,OACE,gCACqB,cAAlBD,GACC,SAACN,GAAgB,CAACR,UAAWiB,IAE7BH,IACE,SAAChB,GAAa,CACZx+B,OAAQw/B,EACR9C,YAAaA,EACbC,UAAWA,EACXv6B,yBAA0BA,EAC1BC,mBAAoBA,EACpBq8B,UAAWiB,KAIjB,SAACpD,GAAW,CACVp/B,MAAO6C,EACP08B,YAAaA,EACbC,UAAWA,EACXC,iBAA+B1gC,IAAlBsjC,EACb/C,IAAKkD,MAIb,E,mNCzDaK,GAET,SAAC,G,IAAEx/B,EAAQ,WAAEI,EAAiB,oBACxBsL,GAAM,IAAA2D,gBAAe,SAAQ,EACrC,OACE,UAAC,EAAAiY,WAAU,IAAC/X,QAAS,EAAAgY,kBAAA,IAAoB,YACvC,SAAC,EAAAC,eAAc,CAACC,KAAM,EAAAgY,kBACtB,SAAC,EAAA9X,MAAK,IAACC,aAAa,KAAK5J,KAAK,MAAI,UAC/BtS,EAAE,sCAEL,SAAC,EAAAoc,eAAc,WACb,SAAC,EAAApY,MAAK,CACJC,GAAI,QACJC,QAAS,gCACTC,WAAY,EAAC,cAAGwZ,QAASjpB,UAG7B,SAAC,EAAAq3B,OAAM,IAAC7D,OAAO,gBAAgBrkB,QAAQ,UAAU8Z,QAASrpB,GAAQ,UAC/D0L,EAAE,kDAIX,E,mNCxBa,GAET,SAAC,G,IAAEhM,EAAiB,oBACdgM,GAAM,IAAA2D,gBAAe,SAAQ,EACrC,OACE,UAAC,EAAAiY,WAAU,IAAC/X,QAAS,EAAAgY,kBAAA,IAAoB,YACvC,SAAC,EAAAC,eAAc,CAACC,KAAM,EAAAiY,cACtB,SAAC,EAAA/X,MAAK,IAACC,aAAa,KAAK5J,KAAK,MAAI,UAC/BtS,EAAE,0CAEL,SAAC,EAAAoc,eAAc,WACb,SAAC,EAAApY,MAAK,CACJC,GAAI,QACJC,QAAS,oCACTC,WAAY,EAAC,cAAGwZ,QAAS3pB,YAKnC,E,mNCbM,GAAU,CACd,OACA,QACA,YACA,WACA,SACA,UA2CWigC,GAAiB,SAAkB,G,MAC9Ct/B,EAAS,YACTC,EAAS,YACThC,EAAI,OACJC,EAAO,UACPiC,EAAK,QACLC,EAAM,SACNC,EAAQ,WACR5C,EAAiB,oBACjB2D,EAAa,gBACbxC,EAAgB,mBAChB0B,EAAY,eACZe,EAAS,YACTC,EAAY,eACZM,EAAc,iBACd9B,EAAa,gBACb+B,EAAS,YACThC,EAAQ,WACRF,EAAQ,WACRI,EAAiB,oBACjBwB,EAAwB,2BACxBC,EAAkB,qBAClBC,EAAmB,sBACnBlB,EAAY,eACZE,EAAgB,mBAChBE,EAAiB,oBACjBE,EAAa,gBACbC,EAAiB,oBACjBC,EAAkB,qBAClBC,EAAc,iBACdE,EAAkB,qBAClBC,EAAmB,sBACnB9B,EAAiB,oBAEjBqC,EAAmB,sBACnBC,EAAiB,oBAET0J,GAAM,IAAA2D,gBAAe,SAAQ,EAC/BjR,EAASu2B,IAGT1M,EACJznB,EAAMqE,OAAS,GAAKpE,EAAOoE,OAAS,GAAKnE,EAASmE,OAAS,EAE7D,OACE,SAAC,EAAA8D,YAAW,IAACuf,UAAU,GAAI,WACzB,SAACE,EAAA,EAAS,CACRhpB,KAAMiB,EACNmoB,QAAS,GACTC,aAAc,SAAC,G,IAAEC,EAAM,SAAEC,EAAE,KAAEvrB,EAAG,MAAO,OACrC,SAACurB,EAAE,UAAYvqB,EAAOY,OAAO0pB,IAApBtrB,EAD4B,EAGvC4rB,WAAY,SAAC,G,IAAEN,EAAM,SAAExf,EAAG,MAAE+f,EAAE,KAAE7rB,EAAG,MAC3BwiC,GAAkB,EAAAjE,EAAA,GAASzyB,EAAIgL,WAC/B2rB,EAAqB99B,EAAoBmH,GAC/C,OACE,SAAC+f,EAAE,IAAWC,UAAW9qB,EAAOY,OAAO0pB,IAAO,UAC3C,WACC,OAAQA,GACN,IAAK,OACH,OACE,SAAC,EAAA+O,OAAM,CACLloB,QAAQ,OACRib,UAAW,SAACpb,GAAU,OACpB,SAAC,EAAA0kB,KAAI,IAACl2B,GAAIE,EAAkBoL,IAAUkG,EAAK,UACxClG,EAAI7J,OAFa,EAKtBs2B,UAAU,EACVmK,gBAAiBD,EACjB5qB,YAAa4qB,EACbxW,QAAS,WAAM,OAAAvnB,EAAoBoH,EAApB,IAGrB,IAAK,WACH,OAAO9K,EAAO+F,UAAU+E,EAAI7E,UAC9B,IAAK,YACH,OACE,UAAC,EAAAy5B,MAAK,YACJ,SAAC,EAAAC,UAAS,WACR,SAACvI,EAAA,EAAU,CACTC,KAAMmK,EACNlK,OAAQ,2BAGXxsB,EAAI2U,aACH,SAAC,EAAAkgB,UAAS,WACR,SAAC,EAAAruB,MAAK,CACJE,QAAQ,oBACRD,GAAI,CAAC,SACLE,WAAY,CACV0lB,MACE,SAACC,EAAA,EAAU,CACTC,MAAM,EAAAkG,EAAA,GAASzyB,EAAI2U,YACnB6X,OAAO,uBASzB,IAAK,SACH,OACE,SAACmJ,GAAmB,CAClBr/B,OAAQ0J,EAAY,OACpBgL,UAAW0rB,EACXh+B,yBAA0B,WACxB,OAAAA,EAAyBsH,EAAzB,EAEFrH,mBAAoBA,IAG1B,QACE,OAAOqH,EAAIwf,GAEhB,CA5DA,KADMtrB,EAgEb,EACA+rB,cAAe,SAAC,G,IAAEjgB,EAAG,MACb62B,EAAqB99B,EAAeiH,GACpC82B,EAAgB99B,EAAUgH,GAC1B+2B,EAAwBj+B,EAAkBkH,GAChD,OACE,SAACupB,EAAoB,CACnB/wB,UAAW,WAAM,OAAAA,EAAUwH,EAAV,EACjBvH,aAAc,WAAM,OAAAA,EAAauH,EAAb,EACpBlH,kBAAmBi+B,EACnBh+B,eAAgB89B,EAChB5/B,cAAe,WAAM,OAAAA,EAAc+I,EAAd,EACrBhH,UAAW89B,EACX9/B,SAAU,WAAM,OAAAA,EAASgJ,EAAT,GAGtB,EACAg3B,WAAY,SAAC,G,IAAEh3B,EAAG,MAAO,OAAAxH,EAAUwH,EAAV,EACzBjK,iBAAkBA,EAClBwC,cAAeA,EACf0+B,aAAc,SAAC,G,IAAEj3B,EAAG,MAAO,qBAA0BA,EAAY,OAAtC,EAC3Bk3B,kBAtGa,KAuGb9W,SAAO,KACL,EAAClrB,EAAOY,OAAOK,MAAO,CACpBiI,KAAM,SACNhI,MAAOkB,EACP+oB,SAAU3oB,EACV4oB,aAAc1oB,EACd2oB,cAAezoB,EACf0oB,SAAU,SAAC/sB,GAAU,qCAA+BgtB,KAAKhtB,EAApC,EACrBitB,aAAcle,EAAE,sCAElB,EAACtN,EAAOY,OAAOO,OAAQ,CACrB+H,KAAM,SACNhI,MAAOmB,EACP8oB,SAAUroB,EACVsoB,aAAcroB,EACdsoB,cAAeroB,EACfsoB,SAAU,SAAC/sB,GAAkB,OAAC,yBAAyBgtB,KAAKhtB,EAA/B,EAC7BitB,aAAcle,EAAE,sCAElB,EAACtN,EAAOY,OAAOQ,QAAS,CACtB8H,KAAM,WACNhI,MAAOoB,EACP2/B,QAASjiC,EAAOw2B,mBAChBiD,SAAUx2B,EACVmoB,aAAcjoB,EACdkoB,cAAejoB,G,GAGnBkrB,QAAS,CACP,CACEoG,MAAOpnB,EAAE,mBACT2d,QAASrpB,EACTsgC,WAAW,IAGfhgC,UAAWA,EACXhC,KAAMA,EACNC,QAASA,EACToC,aAAcA,EACdjB,kBAAmBA,EACnB6oB,UAAW7c,EAAE,eACbuc,WAAYA,EACZ4B,kBACE,SAAC2V,GAAqB,CACpBx/B,SAAUA,EACVI,kBAAmBA,IAGvB0pB,qBACE,SAAC,GAAmB,CAACpqB,kBAAmBA,QAKlD,E,8FC7Pa6gC,GAA6D,SAAC,G,IACzEtrB,EAAU,aACVtY,EAAK,QACL49B,EAAQ,WAEF,GAAoC,IAAA1+B,WAAS,GAA5C2kC,EAAY,KAAEC,EAAiB,KAChChL,EAAO94B,GAAQ,EAAAg/B,EAAA,GAASh/B,QAASjB,EAmCvC,OACE,UAAC,EAAAglC,WAAU,YACT,SAAC,EAAAC,WAAU,CACT1rB,WAAYA,EACZtY,MAAO84B,GAAO,KAAAmL,kBAAiBnL,EAAM,MAAO,mBAAgB/5B,EAC5D6+B,SAtCgD,SAACjV,EAAGub,GACpDA,GACFtG,GAAS,EAAAuG,GAAA,GAAUD,GAEvB,KAoCI,SAAC,EAAAE,WAAU,CACT9rB,YAAawgB,GAAQxgB,EACrBsgB,KAAMiL,EAAe/K,OAAO/5B,EAC5B6+B,SArC4C,SAChDhF,EACAyL,EACAC,EACAC,EACAC,GAEA,GACEA,GACA1L,GACQ/5B,MAARslC,GACAA,EAAO,IACNzL,EAAK95B,SAAS,OAAS85B,EAAK95B,SAAS,OACtC,CACA,IAAIolC,EAAUpL,OACD/5B,IAATslC,IACFH,GAAU,EAAAO,GAAA,GAASP,EAASG,SAEftlC,IAAXulC,IACFJ,GAAU,EAAAQ,GAAA,GAAWR,EAASI,IAGhC1G,GAAS,EAAAuG,GAAA,GAAUD,IACnBJ,GAAkB,E,CAEtB,MAgBF,E,mNCzCaa,GAAuD,SAAC,G,IACnErsB,EAAU,aACV0M,EAAM,SACN4f,EAAK,QACL7tB,EAAS,YACT8tB,EAAc,iBACdC,EAAiB,oBACjBC,EAAa,gBACbC,EAAQ,WAEAj2B,GAAM,IAAA2D,gBAAe,mBAAkB,EACzC,GAAwC,IAAAxT,UAAmB,UAA1D+lC,EAAe,KAAEC,EAAkB,KACpC,GAAsB,IAAAhmC,WAAS,GAA9BimC,EAAM,KAAEC,EAAS,KAClB3jC,EAAwC,CAC5CujB,OAAQjW,EAAE,iBACVgI,UAAWhI,EAAE,oBACb61B,MAAO71B,EAAE,gBACTs2B,OAAQt2B,EAAE,kBAEZ,OACE,SAAC,EAAAu2B,YAAW,WACV,UAAC,EAAAvB,WAAU,YACT,SAAC,EAAAwB,SAAQ,eACM,wBACb5gC,QACE,SAAC,EAAA6gC,eAAc,IACbtK,SAAUkK,EACV9sB,WAAYA,EAAU,cACT,gBAAc,UAE1B7W,EAAOwjC,MAGZ5O,SAAU,EAAAoP,iBAAA,KACVN,OAAQA,EACRvG,SAAU,WAAM,OAAAwG,GAAU,EAAV,EAChBM,cAAe,EACb,SAAC,EAAAC,aAAY,IAEX3lC,MAAM,SACN4lC,UAA+B,WAApBX,EACXvY,QAAS,WAAM,OAAAwY,EAAmB,SAAnB,GAA4B,UAE1CzjC,EAAe,SALZ,WAON,SAAC,EAAAkkC,aAAY,IAEX3lC,MAAM,YACN4lC,UAA+B,cAApBX,EACXvY,QAAS,WAAM,OAAAwY,EAAmB,YAAnB,GAA+B,UAE7CzjC,EAAkB,YALf,cAON,SAAC,EAAAkkC,aAAY,IAEX3lC,MAAM,QACN4lC,UAA+B,UAApBX,EACXvY,QAAS,WAAM,OAAAwY,EAAmB,QAAnB,GAA2B,UAEzCzjC,EAAc,QALX,UAON,SAAC,EAAAokC,kBAAiB,GAAM,YACxB,SAAC,EAAAF,aAAY,IAEX3lC,MAAM,SACN4lC,UAA+B,WAApBX,EACXvY,QAAS,WACPwY,EAAmB,UACnBF,GACF,GAAC,UAEAvjC,EAAe,SARZ,aAYW,WAApBwjC,IACC,SAAC,EAAAa,UAAS,CACRxtB,WAAYA,EACZ3N,KAAM,SAAQ,aACFoE,EAAE,4BACdg3B,YAAah3B,EAAE,6BACf6uB,SAAU,SAAC59B,GACT,GAAc,KAAVA,EAAc,CAChB,IAAMgmC,EAAYrqB,SAAS3b,EAAO,IAC9BimC,OAAOC,UAAUF,IACnBnB,EAAemB,E,MAGjBnB,OAAe9lC,EAEnB,EACAiB,WAAkBjB,IAAXimB,EAAuB,GAAKA,IAGlB,cAApBigB,IACC,SAACrB,GAAc,CACbtrB,WAAYA,EACZtY,MAAO+W,EACP6mB,SAAUkH,IAGO,UAApBG,IACC,SAAC,EAAAa,UAAS,CACRxtB,WAAYA,EACZ3N,KAAM,SAAQ,aACFoE,EAAE,2BACdg3B,YAAah3B,EAAE,4BACfgoB,UAAU,uDACV1V,KAAMtS,EAAE,4BAA4B7G,OACpC01B,SAAU,SAAC59B,GACK,KAAVA,GAAgBimC,OAAOjmC,IAAU,EACnC+kC,EAAckB,OAAOjmC,IAClB+kC,OAAchmC,EACrB,EACAiB,MAAgBjB,MAAT6lC,EAAqB,GAAKA,QAM7C,E,mNCpIauB,GAA2D,SAAC,G,IACvEnmC,EAAK,QACLsY,EAAU,aACVslB,EAAQ,WAEA7uB,GAAM,IAAA2D,gBAAe,mBAAkB,EACzC,GAAsB,IAAAxT,WAAS,GAA9BimC,EAAM,KAAEC,EAAS,KAIxB,OACE,UAAC,EAAArB,WAAU,YACT,SAAC,EAAAqC,eAAc,IAACrP,UAAU,gBAAc,UACrChoB,EAAE,mBAEL,4BACE,oBAAMlQ,GARI,iBAQSwnC,QAAM,kCAIzB,SAAC,EAAAC,OAAM,iBACOv3B,EAAE,uBACdmsB,SAfW,SAACiK,GAAoB,OAAAC,EAAUD,EAAV,EAgBhCoB,gBAAsBxnC,IAAViB,EAAsB,CAAC+O,EAAE,QAAS,CAAE/O,MAAK,UAAOjB,EAC5DomC,OAAQA,EACR7sB,WAAYA,EACZsmB,SAAU,WAAM,OAAAwG,GAAU,EAAV,EAAgB,cACnB,kBAAgB,UAE5B,CAAC,GAAI,GAAI,IAAIv6B,KAAI,SAAC7K,EAAOwmC,GAAQ,OAChC,SAAC,EAAAC,aAAY,CAEXzmC,MAAO+O,EAAE,QAAS,CAAE/O,MAAK,IACzB0sB,QAAS,WAAM,OAAAkR,EAAS59B,EAAT,GAFVwmC,EAFyB,YAW5C,ECrDO,SAASE,GAAcC,EAAaC,GACzC,OAAO7rB,KAAKC,UAAU2rB,KAAQ5rB,KAAKC,UAAU4rB,EAC/C,CAEO,SAASC,GAAqB7mC,GACnC,IACE,OAAO+a,KAAKC,UAAUD,KAAKa,MAAM5b,GAAQ,KAAM,E,CAC/C,MAAOgR,G,CAGT,OAAOhR,CACT,C,UCbY,GAWA,GAAA8mC,GAXAC,G,mNCMCC,GAAqD,SAAC,G,IACjEC,EAAW,cAEHl4B,GAAM,IAAA2D,gBAAe,UAAS,EACtC,OACE,oBAAMqkB,UAAU,kBAAgB,UAC7BhoB,EAAE,qBAAsB,CAAEgd,OAAQkb,MAGzC,E,mNCiBaC,GAA6D,SAAC,G,IACzE1nC,EAAO,UACP2nC,EAAU,aACV3e,EAAO,UAECzZ,GAAM,IAAA2D,gBAAe,mBAAkB,EAE/C,OACE,UAAC,EAAAqrB,mBAAkB,IAACqJ,aAAa,EAAMC,QAAS,SAAO,YACrD,UAAC,EAAA/I,WAAU,YACT,SAAC,EAAA3Q,YAAW,WACV,SAAC,EAAAC,KAAI,IAACC,UAAW,EAAA4M,aAAA,IAAe,UAAG1rB,EAAE,iBAEvC,SAAC,EAAAwvB,cAAa,WACZ,SAAC,EAAAC,kBAAiB,CAAC9R,QAASltB,UAGhC,SAAC,EAAA4+B,kBAAiB,UACf5V,IACC,SAAC8e,GAAkB,IACjBH,WAAYA,EACZI,WAAY/e,EAAQ/nB,KAChB+nB,SAMhB,EAOa8e,GAET,SAAC,GAAE,IAAAH,EAAU,aAAK3e,E,yUAAO,GAAxB,gBACKzZ,GAAM,IAAA2D,gBAAe,mBAAkB,EAE/C,OACE,UAAC,EAAAutB,KAAI,IAACn9B,UAAW,CAAEua,QAAS,UAAU,cAAe,mBAAiB,YACpE,SAAC,EAAA6iB,SAAQ,WACP,UAAC,EAAAsH,gBAAe,IAACC,cAAY,EAACC,WAAS,eACrC,UAAC,EAAAC,qBAAoB,YACnB,SAAC,EAAAC,oBAAmB,UAAE74B,EAAE,sBACxB,SAAC,EAAA84B,2BAA0B,UACxBrf,EAAQjM,gBAGb,UAAC,EAAAorB,qBAAoB,YACnB,SAAC,EAAAC,oBAAmB,UAAE74B,EAAE,mBACxB,SAAC,EAAA84B,2BAA0B,UACxBrf,EAAQxD,aAGb,UAAC,EAAA2iB,qBAAoB,YACnB,SAAC,EAAAC,oBAAmB,UAAE74B,EAAE,sBACxB,SAAC,EAAA84B,2BAA0B,UACxBrf,EAAQzR,WACP,SAAC8hB,EAAA,EAAU,CACTC,MAAM,EAAAkG,EAAA,GAASxW,EAAQzR,WACvBgiB,OAAQ,0BAGV,SAACiO,GAAU,CAACC,YAAal4B,EAAE,2BAIjC,UAAC,EAAA44B,qBAAoB,YACnB,SAAC,EAAAC,oBAAmB,UAAE74B,EAAE,kBACxB,SAAC,EAAA84B,2BAA0B,UACxBrf,EAAQzR,WACP,SAAC8hB,EAAA,EAAU,CACTC,MAAM,EAAAkG,EAAA,GAASxW,EAAQzR,WACvBgiB,OAAQ,WAGV,SAACiO,GAAU,CAACC,YAAal4B,EAAE,uBAIjC,UAAC,EAAA44B,qBAAoB,YACnB,SAAC,EAAAC,oBAAmB,UAAE74B,EAAE,gBACxB,SAAC,EAAA84B,2BAA0B,UACxBrf,EAAQ+e,WACP/e,EAAkB,YAElB,SAACwe,GAAU,CAACC,YAAal4B,EAAE,2BAMrC,SAAC,EAAAmxB,SAAQ,WAEP,UAAC,EAAAxB,KAAI,IAACoJ,iBAAkBX,GAAU,YAChC,SAAC,EAAAtI,IAAG,IACFC,SAAU,QACVjsB,OAAO,SAAC,EAAAksB,aAAY,UAAEhwB,EAAE,kBAA8B,WAEtD,SAAC,EAAA4rB,cAAa,IAACoN,QAAQ,EAAM3oC,YAAY,EAAMy7B,YAAY,GAAI,UAC5DgM,GAAqBre,EAAQxoB,OAAS,WAG3C,SAAC,EAAA6+B,IAAG,IACFC,SAAU,UACVjsB,OAAO,SAAC,EAAAksB,aAAY,UAAEhwB,EAAE,oBAAgC,WAExD,SAAC,EAAA4rB,cAAa,IAACoN,QAAQ,EAAM3oC,YAAY,EAAMy7B,YAAY,GAAI,UAC5DgM,GAAqB9rB,KAAKC,UAAUwN,EAAQtD,UAAY,aAdtBnM,KAAKivB,eAqBtD,E,mNCzIaC,GAER,SAAC,G,IAAEC,EAAS,YACPn5B,GAAM,IAAA2D,gBAAe,mBAAkB,EAC/C,OACE,UAAC,EAAAiY,WAAU,IAAC/X,QAAS,EAAAgY,kBAAA,OAAuB,YAC1C,SAAC,EAAAC,eAAc,CAACC,KAAM,EAAAC,aACtB,SAAC,EAAAC,MAAK,IAACC,aAAa,KAAK5J,KAAK,MAAI,UAC/BtS,EAAE,qBAEL,SAAC,EAAAoc,eAAc,UAAEpc,EAAE,mBACnB,SAAC,EAAA+rB,OAAM,IAACpO,QAASwb,GAAS,UAAGn5B,EAAE,yBAGrC,E,mNCdao5B,GAER,SAAC,G,IAAEC,EAAO,UACLr5B,GAAM,IAAA2D,gBAAe,mBAAkB,EAC/C,OACE,UAAC,EAAAiY,WAAU,IAAC/X,QAAS,EAAAgY,kBAAA,OAAuB,YAC1C,SAAC,EAAAC,eAAc,CAACC,KAAM,EAAAiY,cACtB,SAAC,EAAA/X,MAAK,IAACC,aAAa,KAAK5J,KAAK,MAAI,UAC/BtS,EAAE,wBAEL,SAAC,EAAAoc,eAAc,UAAEpc,EAAE,sBACnB,SAAC,EAAA+rB,OAAM,IAACloB,QAAS,OAAQ8Z,QAAS0b,GAAO,UACtCr5B,EAAE,0BAIX,E,mNCxBas5B,GAGR,SAAC,G,IAAEC,EAAG,MAAEC,EAAG,MACNx5B,GAAM,IAAA2D,gBAAe,mBAAkB,EAC/C,OACE,SAAC,EAAAib,YAAW,IAACoJ,UAAU,kBAAgB,WACrC,UAAC,EAAAnJ,KAAI,WACF7e,EAAE,UAAS,KAAE,oBAAMgoB,UAAU,eAAa,UAAEuR,KAAW,KAAG,KAC3D,oBAAMvR,UAAU,eAAa,UAAEwR,UAIvC,E,sZCIaC,GAET,SAAC,G,IAAExoC,EAAK,QAAEwQ,EAAU,aAAE8H,EAAU,aAAEslB,EAAQ,WACpC7uB,GAAM,IAAA2D,gBAAe,mBAAkB,EACzC,GAAsB,IAAAxT,WAAS,GAA9BimC,EAAM,KAAEC,EAAS,KAElBpE,EAAU,qBAEVyH,GAAe,IAAA9oC,cACnB,SAACK,GACC,GAAc,KAAVA,EAAc,CAChB,IAAM0oC,EAAa/sB,SAAS3b,EAAO,IAC/BimC,OAAOC,UAAUwC,IACnB9K,EAAS8K,E,CAGbtD,GAAU,EACZ,GACA,CAACxH,IAGG+K,GAAgB,IAAA1oC,UAAQ,WAC5B,OAAO,IAAIgc,MAAMzL,GAAYo4B,KAAK,GAAG/9B,KAAI,SAAC8d,EAAGiY,GAAU,OAAAA,EAAM3oB,UAAN,GACzD,GAAG,CAACzH,IAEEq4B,GAAc,IAAAlpC,cAClB,SAACwT,GACC,IAAMuwB,EAAUvwB,EACb21B,MAAM,EApCK,IAqCXj+B,KAAI,SAACsM,GAAM,gBAAC,EAAAsvB,aAAY,CAASzmC,MAAOmX,GAAVA,EAAnB,IACR4xB,EAAqB51B,EAAOjL,OAASw7B,EAAQx7B,OACnD,OAAO6gC,EACH,GAAD,MACMrF,GAAO,KACV,SAAC,EAAA+C,aAAY,CAEXnuB,YAAY,EACZiX,YAAaxgB,EAAE,oBAAqB,CAClCnL,MAAOmlC,KAHJ,e,GAOTrF,CACN,GACA,CAAC30B,IAGG20B,GAAU,IAAAzjC,UAAQ,WACtB,OAAO4oC,EAAYF,EACrB,GAAG,CAACA,EAAeE,IAEbG,GAAwC,IAAArpC,cAC5C,SAACgpB,EAAGvc,GACF,MAAe,KAAXA,EACKy8B,EACLF,EAAcv8B,QAAO,SAACmQ,GAAc,OAAAA,EAAUzd,SAASsN,EAAnB,KAGjCs3B,CACT,GACA,CAACiF,EAAeE,EAAanF,IAG/B,OACE,UAAC,EAAAK,WAAU,YACT,SAAC,EAAAqC,eAAc,IAACrP,UAAU,gBAAc,UACrChoB,EAAE,uBAEL,4BACE,oBAAMlQ,GAAImiC,EAASqF,QAAM,aACtBt3B,EAAE,mCAEL,SAAC,EAAAu3B,OAAM,IACL1zB,QAAS,EAAAq2B,cAAA,UACTC,mBAAoBn6B,EAAE,8BACtBmsB,SAtEW,SAACiK,GAAoB,OAAAC,EAAUD,EAAV,EAuEhCvG,SAAU,SAACjW,EAAG3oB,GAAU,OAAAyoC,EAAazoC,EAAb,EACxBumC,gBAAsBxnC,IAAViB,EAAsB,CAAC,UAAGA,SAAWjB,EACjDomC,OAAQA,EAAM,kBACGnE,EACjBmI,UAAW,IACX5P,MAAO,IACP6P,SAAUJ,EACVK,uBAAuB,EACvB/wB,WAAYA,EACZgxB,gBAAiBv6B,EAAE,yBACnBw6B,QAAS,WAAM,OAAA3L,OAAS7+B,EAAT,EAAmB,cACrB,sBAAoB,UAEhC2kC,SAGL,SAAC,EAAA0C,eAAc,IACbvnC,GAAI,UAAGmiC,EAAO,UACdpuB,QAAS,EAAA42B,sBAAA,MACTzS,UAAU,gBAAc,UAEvBhoB,EAAE,4BAA6B,CAAEyB,WAAU,SAIpD,E,mNC9Gai5B,GAET,SAAC,G,IAAEzpC,EAAK,QAAE,IAAA0pC,WAAAA,OAAU,IAAG,EATJ,IASkB,EAAEhd,EAAO,UACxC3d,GAAM,IAAA2D,gBAAe,mBAAkB,EACzC,ERDD,SAAkB1S,EAAekI,GACtC,IAAMyhC,EAAiB3pC,EAAMkI,OAASA,EACtC,MAAO,CACLyhC,EAAiB,UAAG3pC,EAAM4pC,UAAU,EAAG1hC,GAAO,OAAQlI,EACtD2pC,EAEJ,CQL+BE,CAAS7pC,EAAO0pC,GAAtCI,EAAO,KAAEC,EAAS,KACzB,OACE,UAAC,EAAA9J,KAAI,IACHn9B,UAAW,CAAEua,QAAS,UACtB2sB,WAAY,CAAE3sB,QAAS,iBAAgB,YAEvC,SAAC,EAAA6iB,SAAQ,UAAE4J,IACVC,IACC,SAAC,EAAA7J,SAAQ,WACP,iBACExT,QACEA,EACI,SAAC1b,GACCA,EAAEi5B,kBACFvd,GACF,OACA3tB,GAAS,UAGdgQ,EAAE,qBAMf,ECpBam7B,IAAwB,OACnC,CACErrC,GAAI,kBACJwvB,4BAA4B,EAC5BD,QAAS,CAAC,EACVE,OAAQ,CACNjuB,QAAS,CAAC,EAYVkuB,OAAQ,CAAC,GAmBXE,QAAS,iBACTpuB,QAAS,CAEPkW,cAAUxX,EAEVkmB,MAAO,GAEP1I,eAAWxd,EACXimB,YAAQjmB,EACRgY,eAAWhY,EACXorC,qBAAiBprC,EACjB6lC,WAAO7lC,GAET2vB,OAAQ,CACN0b,eAAgB,CACd3Z,OAAQ,CACNC,IAAK,OAEPzc,GAAI,CACFo2B,aAAc,CACZta,QAAS,cACTjB,OAAQ,kBAEVwb,UAAW,UAGfC,eAAgB,CACd3b,OAAQ,CAAC,CAAEC,KAAM,aAAcC,OAAQ,UAAY,CAAEA,OAAQ,WAE/D0b,OAAQ,CACNv2B,GAAI,CACFw2B,QAAS,mBAGb//B,MAAO,CACLuJ,GAAI,CACFw2B,QAAS,mBAGbhpB,MAAO,CACLgN,QAAS,WACTC,OAAQ,CACNgc,SAAU,CAAC,EACXC,MAAO,CACL3b,KAAM,SAER4b,aAAc,CACZhc,OAAQ,CACN,CACEC,KAAM,oBACNC,OAAQ,SAEV,CAAEA,OAAQ,eAIhBF,OAAQ,CACN,CACEC,KAAM,8BACNkB,QAAS,oBAGb9b,GAAI,CACFw2B,QAAS,aACTI,aAAc,CACZ/b,OAAQ,gBACRiB,QAAS,gBAEX+a,SAAU,CACR/a,QAAS,WACTjB,OAAQ,iBAEVic,aAAc,CACZjc,OAAQ,gBACRiB,QAAS,gBAEXib,UAAW,CACTlc,OAAQ,gBACRiB,QAAS,aAEXkb,UAAW,CACTnc,OAAQ,gBACRiB,QAAS,aAEXmb,SAAU,CACRpc,OAAQ,gBACRiB,QAAS,YAEXob,cAAe,CACbpb,QAAS,iBAEXqb,gBAAiB,CACfrb,QAAS,qBAIfsb,WAAY,CACV5a,OAAQ,CACNC,IAAK,OAEPzc,GAAI,CACFo2B,aAAc,CACZta,QAAS,cACTjB,OAAQ,SAEVwb,UAAW,CACTxb,OAAQ,aAMlB,CACEiB,QAAS,CACPub,aAAa,SACX,SAACjrC,EAAS,G,IAAE2P,EAAQ,WAAEQ,EAAU,aAAE+6B,EAAS,YAAEC,EAAS,YAAO,OAC3Dj1B,SAAU,CACRk1B,YAAa,IAAIzqB,KACjBhR,SAAQ,EACRQ,WAAU,EACV+6B,UAAS,EACTC,UAAS,EACTp/B,OAAQ,CACNmQ,UAAWlc,EAAQkc,UACnBxF,UAAW1W,EAAQ0W,UACnBiO,OAAQ3kB,EAAQ2kB,OAChBC,MAAO5kB,EAAQ4kB,MACf2f,MAAOvkC,EAAQukC,QAZwC,IAiB/DiG,cAAc,SAAO,SAACliB,EAAG,GAAc,OAAGpM,UAAV,QAAO,IACvCuuB,UAAU,SAAO,SAACniB,EAAG,GAAc,OACjCic,MAD0B,QAAO,IAGnCmG,cAAc,SAAO,SAACpiB,EAAG,GAAc,OACrC5R,UAD8B,QAAO,IAGvCi0B,WAAW,SAAO,SAACriB,EAAG,GAAc,OAClC3D,OAD2B,QAAO,IAGpCkmB,UAAU,SAAO,SAACviB,EAAG,GAAc,OACjC1D,MAD0B,QAAO,IAInCgmB,WAAW,SAAO,SAACtiB,GAAM,OACvB5R,eAAWhY,EACXimB,YAAQjmB,EAFe,IAIzBosC,eAAe,SAAO,SAACxiB,EAAG,GAAgB,OAAGwhB,gBAAV,UAAO,IAE1CiB,iBAAiB,SAAO,SAACziB,GAAM,OAAGwhB,qBAAiBprC,EAApB,KAEjCwzB,OAAQ,CACNmZ,WAAY,SAAC,G,IAAEn1B,EAAQ,WACrB,YAAaxX,IAAbwX,GAAuD,IAA7BA,EAASvG,SAAS9H,MAA5C,EACFyjC,4BAA6B,SAAC,G,IAAEp1B,EAAQ,WAAE4zB,EAAe,kBACvD,YAAoBprC,IAApBorC,QAEEprC,KADFwX,aAAQ,EAARA,EAAUvG,SAASlI,MAAK,SAAC2O,GAAM,OAAAiwB,GAAcjwB,EAAG0zB,EAAjB,IAD/B,EAGFyB,kBAAmB,SAACvrC,G,cAClB,OAAgB,QAAhB,EAAAA,EAAQkW,gBAAQ,eAAEnK,OAAO6Y,SAAU5kB,EAAQ4kB,QAC3B,QAAhB,EAAA5kB,EAAQkW,gBAAQ,eAAEnK,OAAO4Y,UAAW3kB,EAAQ2kB,SAC5B,QAAhB,EAAA3kB,EAAQkW,gBAAQ,eAAEnK,OAAOmQ,aAAclc,EAAQkc,YAC/B,QAAhB,EAAAlc,EAAQkW,gBAAQ,eAAEnK,OAAO2K,aAAc1W,EAAQ0W,YAC/B,QAAhB,EAAA1W,EAAQkW,gBAAQ,eAAEnK,OAAOw4B,SAAUvkC,EAAQukC,K,wNCjL7C/Y,GAAU,CACd,YACA,SACA,YACA,MACA,UACA,SAGIggB,GAAyC,CAAC,GAAI,GAAI,GAAI,QAAI9sC,EAAW,IAU9D+sC,GAET,SAAC,G,MAAEv7B,EAAW,cACV,GAAgB,EAAAw7B,GAAA,IAAW,WAAM,OAAA7B,EAAA,GAAuB,CAC5D8B,UAAU,EACVxd,SAAU,CACRtO,IAAK,SAAC7f,GACJ,OAAO,SAAC4rC,GACN17B,EAAY,CACVgM,UAAWlc,EAAQkc,UACnByI,OAAQ3kB,EAAQ2kB,OAChBjO,UAAW1W,EAAQ0W,UACnBkO,MAAO5kB,EAAQ4kB,QAEd7H,MAAK,SAAC,G,IAAEpN,EAAQ,WAAEQ,EAAU,aAC3B,OAAAy7B,EAAK,CACHthC,KAAM,eACNqF,SAAQ,EACRQ,WAAU,EACV+6B,UAAWlrC,EAAQ2kB,QAAU,EAC7BwmB,UAAWx7B,EAASgX,QAClB,SAACuhB,EAAK9xB,GAAM,OAAAsC,KAAKwvB,IAAIA,EAAK9xB,EAAEuO,QAAU,EAA1B,GACZ,IAPJ,IAWDwX,OAAM,WAAM,OAAAyP,EAAK,CAAEthC,KAAM,aAAb,GACjB,CACF,KAzBGyV,EAAK,KAAE6rB,EAAI,KA6BlB,OACE,SAACC,GAA4B,CAC3BC,YAAa/rB,EAAMgsB,QAAQ,kBAC3BC,SAAUjsB,EAAMgsB,QAAQ,WAAahsB,EAAMgsB,QAAQ,SACnDE,aAAclsB,EAAMgsB,QAAQ,cAC5BG,eAAgBnsB,EAAMmT,OAAO,SAC7B4W,gBAAiB/pB,EAAM/f,QAAQ8pC,gBAC/B5zB,SAAU6J,EAAM/f,QAAQkW,SACxBk1B,YAAmC,QAAtB,EAAArrB,EAAM/f,QAAQkW,gBAAQ,eAAEk1B,YACrClvB,UAAW6D,EAAM/f,QAAQkc,UACzB0I,MAAO7E,EAAM/f,QAAQ4kB,MACrBunB,aAAcpsB,EAAM/f,QAAQ2kB,OAC5BynB,YAAarsB,EAAM/f,QAAQukC,MAC3B8H,gBAAiBtsB,EAAM/f,QAAQ0W,UAC/B8zB,aAAc,SAAC7qC,GACb,OAAAisC,EAAK,CAAEthC,KAAM,eAAgB3K,MAAK,GAAlC,EAEFgrC,UAAW,SAAChrC,GACV,OAAAisC,EAAK,CAAEthC,KAAM,YAAa3K,MAAK,GAA/B,EAEF+qC,aAAc,SAAC/qC,GACb,OAAAisC,EAAK,CAAEthC,KAAM,eAAgB3K,MAAK,GAAlC,EAEF8qC,SAAU,SAAC9qC,GACT,OAAAisC,EAAK,CAAEthC,KAAM,WAAY3K,MAAK,GAA9B,EAEFirC,UAAW,WAAM,OAAAgB,EAAK,CAAEthC,KAAM,aAAb,EACjBugC,SAAU,SAAClrC,GAAkB,OAAAisC,EAAK,CAAEthC,KAAM,WAAY3K,MAAK,GAA9B,EAC7ByqC,QAAS,WAAM,OAAAwB,EAAK,CAAEthC,KAAM,WAAb,EACfwgC,cAAe,SAAC3iB,GACd,OAAAyjB,EAAK,CAAEthC,KAAM,gBAAiB6d,QAAO,GAArC,EAEF4iB,gBAAiB,WAAM,OAAAa,EAAK,CAAEthC,KAAM,mBAAb,GAG7B,EAyBauhC,GAET,SAAC,G,MACHC,EAAW,cACXE,EAAQ,WACRC,EAAY,eACZC,EAAc,iBACdpC,EAAe,kBACf5zB,EAAQ,WACRgG,EAAS,YACT0I,EAAK,QACLunB,EAAY,eACZC,EAAW,cACXC,EAAe,kBACf7B,EAAY,eACZG,EAAS,YACTD,EAAY,eACZD,EAAQ,WACRG,EAAS,YACTC,EAAQ,WACRT,EAAO,UACPU,EAAa,gBACbC,EAAe,kBAEPr8B,GAAM,IAAA2D,gBAAe,mBAAkB,EACzC,GACJ,IAAAxT,UAA4C,SADvCioC,EAAU,KAAEwF,EAAa,KAG1BC,GAA4D,IAAA3sC,UAChE,WACE,OACEsc,UAAWxN,EAAE,mBACbiW,OAAQjW,EAAE,gBACVgI,UAAWhI,EAAE,mBACbtO,IAAKsO,EAAE,aACP/O,MAAO+O,EAAE,eACTmW,QAASnW,EAAE,iBANb,GAQF,CAACA,IAGH,QAAQ,GACN,KAAKo9B,EACH,OAAO,SAACU,GAAA,EAAO,IACjB,KAAKR,EACH,OAAO,SAACpE,GAAgB,CAACC,UAAWuC,IACtC,QACE,OACE,SAAC,EAAAz+B,YAAW,IACVuf,UAAU,EACVC,mBAAmB,EAAI,aACX,QAAM,WAElB,SAAC,EAAAyS,OAAM,IAACjF,UAAU,EAAM55B,gBAAgCL,IAApBorC,GAA6B,WAC/D,SAAC,EAAAjM,cAAa,IACZC,cACE,SAAC+I,GAAc,CACb1e,QAAS2hB,EACThD,WAAYA,EACZ3nC,QAAS4rC,KACT,WAGJ,UAAC,EAAA0B,qBAAoB,YACnB,SAAC,EAAAC,QAAO,IACNhW,UAAW,kCAAiC,cAC/B,2BAAyB,WAEtC,UAAC,EAAAiW,eAAc,YACb,UAAC,EAAAC,mBAAkB,IACjBC,YAAY,SAAC,EAAAC,WAAU,IACvBC,WAAW,OAAK,YAEhB,SAAC,EAAAC,aAAY,IAACz6B,QAAQ,gBAAc,WAClC,SAAC,EAAA0yB,YAAW,WACV,SAACkD,GAAiB,CAChBxoC,MAAOuc,EACP/L,YAAY+F,aAAQ,EAARA,EAAU/F,aAAc,EACpCotB,SAAUiN,EACVvyB,WAAYg0B,UAIlB,SAAC,EAAAe,aAAY,IAACz6B,QAAQ,gBAAc,WAClC,SAAC+xB,GAAW,CACVrsB,WAAYg0B,EACZtnB,OAAQwnB,EACR5H,MAAO6H,EACP11B,UAAW21B,EACX7H,eAAgBmG,EAChBlG,kBAAmBiG,EACnBhG,cAAe+F,EACf9F,SAAUiG,QAGd,SAAC,EAAAoC,aAAY,WACX,SAAClH,GAAa,CACZnmC,MAAOilB,EACP2Y,SAAUsN,EACV5yB,WAAYg0B,WAIlB,UAAC,EAAAe,aAAY,YACX,SAAC,EAAA/H,YAAW,WACV,SAAC,EAAAxK,OAAM,IACLloB,QAAS,QACT0F,YAAai0B,GAAkBD,EAAY,aAC/Bv9B,EAAE,8BACd2d,QAAS+d,GAAO,WAEhB,SAAC,EAAA1H,WAAU,UAGf,SAAC,EAAAuC,YAAW,WACV,SAACgI,GAAA,EAAa,CACZ5gB,QAAS+d,EACT6B,aAAcA,EACdh0B,WAAYi0B,UAIlB,SAAC,EAAAc,aAAY,IAACE,UAAW,CAAElwB,QAAS,eAAc,eAChBte,KAA/BwX,aAAQ,EAARA,EAAUnK,OAAOmQ,aAChBhG,aAAQ,EAARA,EAAUvG,SAAS9H,QAAS,IAC1B,SAACmgC,GAAW,CACVC,KAAK/xB,aAAQ,EAARA,EAAUg1B,YAAa,EAC5BhD,KAAKhyB,aAAQ,EAARA,EAAUi1B,YAAa,cAMxC,SAAC,EAAAgC,qBAAoB,WACnB,SAACC,GAAA,GAAe,IACd7hB,UAAW7c,EAAE,oBACb8c,QAASA,GACTppB,KAAM8T,aAAQ,EAARA,EAAUvG,SAChB09B,eAAkC,QAAlB,EAAAn3B,aAAQ,EAARA,EAAUvG,gBAAQ,eAAE9H,OACpC4jB,aAAc,SAAC,G,IAAEC,EAAM,SAAEC,EAAE,KAAEvrB,EAAG,MAAO,OACrC,SAACurB,EAAE,UAAY4gB,EAAa7gB,IAAnBtrB,EAD4B,EAGvC4rB,WAAY,SAAC,G,IAAEN,EAAM,SAAExf,EAAG,MAAEohC,EAAQ,WAAErhB,EAAE,KAAE7rB,EAAG,MAAO,OAClD,SAAC6rB,EAAE,IAEDC,UAAWqgB,EAAa7gB,GACxBwN,MAAOsS,GAAa8B,IAAS,UAE5B,WACC,IAAM1d,GACJ,SAAC+W,GAAU,CAACC,YAAa2F,EAAa7gB,KAExC,OAAQA,GACN,IAAK,YACH,OAAOxf,EAAIgQ,UACb,IAAK,SACH,OAAOhQ,EAAIyY,OACb,IAAK,YACH,OAAOzY,EAAIwK,WACT,SAAC8hB,EAAA,EAAU,CACTC,MAAM,EAAAkG,EAAA,GAASzyB,EAAIwK,WACnBgiB,OAAQ,yBAER,EAGN,IAAK,MACH,OAAOxsB,EAAI9L,KACT,SAACgpC,GAAmB,CAClBzpC,MAAOuM,EAAI9L,IACXipC,WAAY,KAEZ,EAGN,IAAK,UACH,OAAOxuB,OAAO0yB,KAAKrhC,EAAI2Y,SAAShd,OAAS,GACvC,SAACuhC,GAAmB,CAClBzpC,MAAO6mC,GACL9rB,KAAKC,UAAUzO,EAAI2Y,UAErBwH,QAAS,WACPigB,EAAc,WACdxB,EAAc5+B,EAChB,IAEA,EAGN,IAAK,QACH,OAAOA,EAAIvM,OACT,SAACypC,GAAmB,CAClBzpC,MAAO6mC,GAAqBt6B,EAAIvM,OAAS,IACzC0sB,QAAS,WACPigB,EAAc,SACdxB,EAAc5+B,EAChB,IAEA,EAIT,CAtDA,KAJI9L,EAF2C,EA+DpDqE,cAAe,SAAC,G,IAAEyH,EAAG,MACnB,YAAoBxN,IAApBorC,GACAzD,GAAcn6B,EAAK49B,EADnB,EAGF5G,WAAY,SAAC,G,IAAEh3B,EAAG,MAChBogC,EAAc,SACdxB,EAAc5+B,EAChB,GAAC,WAED,SAAC47B,GAAmB,CAClBC,QAAS,WACP6C,IACAJ,OAAa9rC,GACb0rC,GACF,qBAUtB,E,+NClXaoD,GAAgD,WACnD,IAAA9+B,GAAM,IAAA2D,gBAAe,oBAAmB,EAwC1Co7B,EAAc,CAClBprC,KAAM,GACNqrC,mBAAoBh/B,EAAE,sBACtBi/B,oBAAqBj/B,EAAE,wBAGzB,OACE,UAAC,EAAAk/B,gBAAe,YACd,SAAC,EAAAC,MAAK,WACJ,UAAC,EAAAC,GAAE,YACD,SAAC,EAAAniB,GAAE,UAAE8hB,EAAYprC,QACjB,SAAC,EAAAspB,GAAE,UAAE8hB,EAAYC,sBACjB,SAAC,EAAA/hB,GAAE,UAAE8hB,EAAYE,4BAGrB,SAAC,EAAAI,MAAK,UArD6B,CACrC,CACE1rC,KAAM,sBACNqrC,mBAAoB,WACpBC,oBAAqB,aAEvB,CACEtrC,KAAM,qBACNqrC,mBAAoB,YACpBC,oBAAqB,aAEvB,CACEtrC,KAAM,gBACNqrC,mBAAoB,aACpBC,oBAAqB,cAEvB,CACEtrC,KAAM,mBACNqrC,mBAAoB,aACpBC,oBAAqB,cAEvB,CACEtrC,KAAM,qBACNqrC,mBAAoB,aACpBC,oBAAqB,cAEvB,CACEtrC,KAAM,uCACNqrC,mBAAoB,YACpBC,oBAAqB,aAEvB,CACEtrC,KAAM,oBACNqrC,mBAAoB,UACpBC,oBAAqB,YAoBJnjC,KAAI,SAACwjC,GAClB,OACE,UAAC,EAAAF,GAAE,YACD,SAAC,EAAA7hB,GAAE,IAACC,UAAWuhB,EAAYprC,MAAI,UAAG2rC,EAAM3rC,SACxC,SAAC,EAAA4pB,GAAE,IAACC,UAAWuhB,EAAYC,oBAAkB,UAC1CM,EAAMN,uBAET,SAAC,EAAAzhB,GAAE,IAACC,UAAWuhB,EAAYE,qBAAmB,UAC3CK,EAAML,yBANFK,EAAM3rC,KAUnB,QAIR,E,0OCzDa4rC,GAET,SAAC,G,IACHz7B,EAAK,QACL07B,EAAO,UACPhf,EAAW,cACXif,EAAY,eACZC,EAAS,YACTC,EAAa,gBACb,IAAAC,mBAAAA,OAAkB,IAAG,GAAI,EACzB,IAAAC,mBAAAA,OAAkB,IAAG,IAAC,EACtBC,EAAG,MACH,IAAAj8B,QAAAA,OAAO,IAAG,UAAO,EAEX8iB,EAAQ,CACZ,sDAAuD,cAAO+Y,EAAS,KACvE,qDAAsD,UAAGC,EAAa,MACtE,uDAAwDC,EACpD,SACA,YACJ,0DAA2D,UAAGC,EAAkB,OAElF,OACE,SAAC,EAAA5iC,YAAW,IACV+qB,UAAW,KAAW,2BAA4B,CAChD,iCAA8C,SAAZnkB,EAClC,4BAAyC,UAAZA,IAE/BA,QACc,SAAZA,EACI,EAAA0a,oBAAA,KACA,EAAAA,oBAAA,MAENoI,MAAOA,GAAK,WAEZ,UAAC,EAAAyL,MAAK,IAACvB,WAAS,eACd,SAAC,EAAA5U,MAAK,IAACC,aAAa,KAAK5J,KAAK,OAAK,UAChCxO,MAEH,SAAC,EAAA+a,KAAI,IACHmJ,UAAW,4CACG,SAAZnkB,EAAqB,GAAK,mBAC1B,UAED27B,MAEH,SAAC,EAAA3gB,KAAI,IAACC,UAAW,EAAA4M,aAAA,GAAc,UAAGlL,KACjCif,IACC,SAAC,EAAA5gB,KAAI,IAACC,UAAW,EAAA4M,aAAA,EAAgB1D,UAAU,cAAY,UACpDyX,KAGJK,IAAO,SAAC,EAAAzN,UAAS,UAAEyN,UAI5B,EAwBaC,GAIT,SAAC,G,IACH,IAAA/X,UAAAA,OAAS,IAAG,8CAA2C,EACvD,IAAAnkB,QAAAA,OAAO,IAAG,YAAS,EACnBrU,EAAQ,WACJ,OACJ,SAAC,EAAAyN,YAAW,IACV+iC,gBAAc,EACdhY,UAAW,KAAWA,EAAW,CAC/B,iCAA8C,SAAZnkB,EAClC,4BAAyC,UAAZA,IAE/BA,QACc,SAAZA,EACI,EAAA0a,oBAAA,KACY,UAAZ1a,EACA,EAAA0a,oBAAA,MACA,EAAAA,oBAAA,SAA2B,UAGhC/uB,IAfC,E,mNCxFOywC,GAAiC,WACpC,IAAAjgC,GAAM,IAAA2D,gBAAe,CAAC,qBAAoB,EAClD,OACE,iCACE,SAAC47B,GAAiB,CAChBz7B,MAAO9D,EAAE,aACTw/B,QAASx/B,EAAE,eACXwgB,YAAaxgB,EAAE,mBACf0/B,UAAW,MACXC,cAAe,IACfC,oBAAoB,EACpBC,oBAAqB,MAEvB,SAACE,GAAoB,WACnB,UAAC,EAAAG,KAAI,IAACrP,WAAS,EAACsP,GAAI,GAAC,YACnB,UAAC,EAAAC,KAAI,IACHlY,OAAO,6BAA4B,aACvBloB,EAAE,oCAAkC,YAEhD,SAAC,EAAAqgC,WAAU,WACT,SAAC,EAAAC,eAAc,WACb,SAAC,EAAAC,UAAS,WACR,SAAC,EAAAtkB,MAAK,IAACC,aAAa,MAAI,WACtB,SAAC,EAAAlY,MAAK,IACJC,GAAI,mBACJC,QAAS,qBAAmB,WAE5B,iBAAM8jB,UAAU,kDAM1B,SAAC,EAAAwY,SAAQ,UAAExgC,EAAE,2BACb,SAAC,EAAAygC,WAAU,WACT,UAAC,EAAAvP,KAAI,IAAC+J,WAAY,CAAE3sB,QAAS,kBAAiB,YAC5C,SAAC,EAAA6iB,SAAQ,WACP,SAAC,KAAY,IACX12B,KACE,2FAEF6xB,OAAQ,wBACRtE,UAAW,eAAa,WAExB,SAAC,EAAAhkB,MAAK,CACJC,GAAI,mBACJC,QAAS,uCACTC,WAAY,CACVu8B,MAAM,sBACNpuB,MAAM,iBAAM0V,UAAU,+BAM9B,SAAC,EAAAmJ,SAAQ,WACP,SAAC,KAAY,IACX12B,KACE,+DAEF6xB,OAAQ,yBACRtE,UAAW,cAAY,WAEvB,SAAC,EAAAhkB,MAAK,CACJC,GAAI,mBACJC,QAAS,oCACTC,WAAY,CACVu8B,MAAM,sBACNpuB,MAAM,iBAAM0V,UAAU,yCAQpC,UAAC,EAAAoY,KAAI,IACHlY,OAAO,8BAA6B,aACxBloB,EAAE,wCAAsC,YAEpD,SAAC,EAAAqgC,WAAU,WACT,SAAC,EAAAE,UAAS,WACR,SAAC,EAAAtkB,MAAK,IAACC,aAAa,MAAI,WACtB,SAAC,EAAAlY,MAAK,IACJC,GAAI,mBACJC,QAAS,yBAAuB,WAEhC,iBAAM8jB,UAAU,gDAKxB,SAAC,EAAAwY,SAAQ,UAAExgC,EAAE,+BACb,SAAC,EAAAygC,WAAU,WACT,SAAC,KAAY,IACXhmC,KACE,iHAEF6xB,OAAQ,6BACRtE,UAAW,cAAY,WAEvB,SAAC,EAAAhkB,MAAK,CACJC,GAAI,mBACJC,QAAS,qCACTC,WAAY,CACVu8B,MAAM,sBACNpuB,MAAM,iBAAM0V,UAAU,yCAQpC,SAAC+X,GAAoB,IACnB/X,UAAW,2CAAyC,WAEpD,UAAC,EAAAoY,KAAI,YACH,SAAC,EAAAG,UAAS,WACR,SAAC,EAAAtkB,MAAK,IAACC,aAAa,MAAI,UAAElc,EAAE,2BAE9B,SAAC,EAAAwgC,SAAQ,WACP,UAAC,EAAAtP,KAAI,IAAC+J,WAAY,CAAE3sB,QAAS,iBAAgB,YAC3C,SAAC,EAAA4iB,KAAI,IACHyP,UAAW,CAAEryB,QAAS,mBACtBsyB,eAAgB,CAAEtyB,QAAS,wBAC3BuyB,KAAM,CAAEvyB,QAAS,WAAU,WAE3B,SAAC,EAAA6iB,SAAQ,WACP,UAAC,EAAAsH,gBAAe,IAACC,cAAY,eAC3B,UAAC,EAAAE,qBAAoB,YACnB,SAAC,EAAAC,oBAAmB,UACjB74B,EAAE,mBAEL,SAAC,EAAA84B,2BAA0B,UACxB94B,EAAE,6BAGP,UAAC,EAAA44B,qBAAoB,YACnB,SAAC,EAAAC,oBAAmB,UACjB74B,EAAE,mBAEL,SAAC,EAAA84B,2BAA0B,UACxB94B,EAAE,4BAGP,UAAC,EAAA44B,qBAAoB,YACnB,SAAC,EAAAC,oBAAmB,UAAE74B,EAAE,cACxB,SAAC,EAAA84B,2BAA0B,UACxB94B,EAAE,gCAMb,SAAC,EAAA8gC,QAAO,CAAC/O,YAAU,KACnB,SAAC,EAAAZ,SAAQ,IAAC0P,KAAM,CAAEvyB,QAAS,WAAU,WACnC,SAAC,EAAAsQ,YAAW,WACV,SAAC,EAAAC,KAAI,IAACC,UAAW,EAAA4M,aAAA,GAAc,WAC7B,SAAC,EAAA1nB,MAAK,CACJC,GAAI,mBACJC,QAAS,oBACTC,WAAY,CAAEu8B,MAAM,8CASpC,SAACX,GAAoB,IACnB/X,UAAW,2CAAyC,WAEpD,UAAC,EAAAoY,KAAI,YACH,SAAC,EAAAG,UAAS,WACR,SAAC,EAAAtkB,MAAK,IAACC,aAAa,MAAI,UAAElc,EAAE,oCAE9B,SAAC,EAAAwgC,SAAQ,WACP,UAAC,EAAApO,MAAK,IAACvB,WAAS,eACd,SAAC,EAAAhS,KAAI,IAACC,UAAW,EAAA4M,aAAA,GAAc,UAC5B1rB,EAAE,wCAEL,SAAC8+B,GAA0B,WAG/B,SAAC,EAAA2B,WAAU,WACT,SAAC,EAAA7hB,YAAW,IAACoJ,UAAW,qBAAmB,WACzC,SAAC,EAAAhkB,MAAK,CACJC,GAAI,mBACJC,QAAS,8BACTC,WAAY,EACV,SAAC,KAAY,CACX1J,KAAM,oCACN6xB,OAAQ,cACRtE,UAAW,gBAEb,SAAC,KAAY,CACXvtB,KACE,wIAEF6xB,OAAQ,0BACRtE,UAAW,8BAQzB,SAAC+X,GAAoB,IACnB/X,UAAW,2CAAyC,WAEpD,UAAC,EAAAoY,KAAI,YACH,SAAC,EAAAG,UAAS,WACR,SAAC,EAAAtkB,MAAK,IAACC,aAAa,MAAI,UAAElc,EAAE,6BAE9B,SAAC,EAAAwgC,SAAQ,WACP,UAAC,EAAAtP,KAAI,IACH+J,WAAY,CAAE3sB,QAAS,gBACvBva,UAAW,CAAEua,QAAS,SAAUyyB,GAAI,QAAO,YAE3C,SAAC,EAAA7P,KAAI,IACH0P,eAAgB,CAAEtyB,QAAS,wBAC3BuyB,KAAM,CAAEvyB,QAAS,WAAU,WAE3B,SAAC,EAAA6iB,SAAQ,WACP,UAAC,EAAAP,MAAK,IAACC,WAAS,eACd,SAAC,EAAAC,UAAS,WACR,gBAAKnP,IAAKyE,EAASM,IAAK,GAAIC,MAAO,CAAEC,OAAQ,aAE/C,SAAC,EAAAkK,UAAS,WACR,SAAC,EAAA7U,MAAK,IAACC,aAAa,KAAK8L,UAAW,cAAY,UAC7ChoB,EAAE,qCAMb,SAAC,EAAA8gC,QAAO,CACNE,YAAa,CAAE1yB,QAAS,aAAcyyB,GAAI,eAE5C,SAAC,EAAA7P,KAAI,IACH0P,eAAgB,CAAEtyB,QAAS,wBAC3BuyB,KAAM,CAAEvyB,QAAS,WAAU,WAE3B,SAAC,EAAA6iB,SAAQ,WACP,UAAC,EAAAP,MAAK,IAACC,WAAS,eACd,SAAC,EAAAC,UAAS,WACR,gBAAKnP,IAAK4E,EAASG,IAAK,GAAIC,MAAO,CAAEC,OAAQ,aAE/C,UAAC,EAAAkK,UAAS,YACR,SAAC,EAAA7U,MAAK,IAACC,aAAa,KAAK8L,UAAW,cAAY,UAC7ChoB,EAAE,gCAEL,SAAC,EAAA6e,KAAI,IACHC,UAAW,EAAA4M,aAAA,EACX1D,UAAW,kBAAgB,UAE1BhoB,EAAE,kDAMb,SAAC,EAAA8gC,QAAO,CACNE,YAAa,CAAE1yB,QAAS,aAAcyyB,GAAI,eAE5C,SAAC,EAAA7P,KAAI,IACH0P,eAAgB,CAAEtyB,QAAS,wBAC3BuyB,KAAM,CAAEvyB,QAAS,WAAU,WAE3B,SAAC,EAAA6iB,SAAQ,WACP,UAAC,EAAAP,MAAK,IAACC,WAAS,eACd,SAAC,EAAAC,UAAS,WACR,gBACEnP,IAAK2E,EACLI,IAAK,GACLC,MAAO,CAAEC,OAAQ,aAGrB,UAAC,EAAAkK,UAAS,YACR,SAAC,EAAA7U,MAAK,IAACC,aAAa,KAAK8L,UAAW,cAAY,UAC7ChoB,EAAE,2BAEL,SAAC,EAAA6e,KAAI,IACHC,UAAW,EAAA4M,aAAA,EACX1D,UAAW,kBAAgB,UAE1BhoB,EAAE,0DAY3B,E,mNC9TaihC,GAET,SAAC,G,IAAEtjC,EAAa,gBACVqC,GAAM,IAAA2D,gBAAe,SAAQ,EAErC,OACE,UAAC,EAAAiY,WAAU,wBACS,mBAClB/X,QAAS,EAAAgY,kBAAA,OAAuB,YAEhC,SAAC,EAAAC,eAAc,CAACC,KAAM,EAAAgY,kBACtB,SAAC,EAAA9X,MAAK,IAACC,aAAa,KAAK5J,KAAK,MAAI,UAC/BtS,EAAE,0BAEL,SAAC,EAAAoc,eAAc,UAAEpc,EAAE,wBACnB,SAAC,EAAA+rB,OAAM,kBACO,oBACZ7D,OAAO,gBACPrkB,QAAQ,UACR8Z,QAAShgB,GAAa,UAErBqC,EAAE,sBAIX,GbzCYg4B,GAAA,QAAkB,KAC5B,2BACA,oBACA,oBACA,gBACA,cACA,gBACA,mBACA,0BAGUD,GAAA,QAAkB,KAC5B,aACA,wBACA,wBACA,wBACA,wBACA,mBACA,yBAGK,Ic2CK,GAAAmJ,Gd3CCC,KAAY,OACtB,GAAmBC,MAAOz1B,OAAO,KAClC,GAAC,GAAmB01B,UAAW11B,OAAO,QACtC,GAAC,GAAmB21B,UAAW31B,OAAO,WACtC,GAAC,GAAmB41B,UAAW51B,OAAO,cACtC,GAAC,GAAmB61B,UAAW71B,OAAO,iB,IAG3B81B,KAAkB,OAC5B,GAAmBC,aAAc/1B,OAAO,KACzC,GAAC,GAAmBg2B,QAASh2B,OAAO,QACpC,GAAC,GAAmBi2B,QAASj2B,OAAO,SACpC,GAAC,GAAmBk2B,MAAOl2B,OAAO,WAClC,GAAC,GAAmBm2B,KAAMn2B,OAAO,Y,IAuBtBo2B,GAAyB,SAAClY,GAC/B,MAhB0B,SAAC54B,GACjC,GAAIA,EAAO,CACT,GAAIA,EAAQwwC,GAAmBO,MAAQr2B,OAAO,GAC5C,MAAO,CAAE1a,MAAOA,EAAQwwC,GAAmBO,KAAMC,KAAM,QACzD,GAAIhxC,EAAQwwC,GAAmBS,OAASv2B,OAAO,GAC7C,MAAO,CAAE1a,MAAOA,EAAQwwC,GAAmBS,MAAOD,KAAM,SAC1D,GAAIhxC,EAAQwwC,GAAmBU,SAAWx2B,OAAO,GAC/C,MAAO,CAAE1a,MAAOA,EAAQwwC,GAAmBU,QAASF,KAAM,WAC5D,GAAIhxC,EAAQwwC,GAAmBW,SAAWz2B,OAAO,GAC/C,MAAO,CAAE1a,MAAOA,EAAQwwC,GAAmBW,QAASH,KAAM,U,CAG9D,MAAO,CAAEhxC,MAAK,EAAEgxC,KAAM,eACxB,CAG0BI,CAAmBxY,GAAnCoY,EAAI,OAAEhxC,EAAK,QACnB,OAA0B,IAAnBimC,OAAOjmC,GAAgB,YAAc,UAAG44B,EAAI,gBAAQ54B,EAAK,YAAIgxC,EAAI,IAC1E,EAEaK,GAAyB,SAAChwB,GAC/B,MAAkBiwB,GAAkBjwB,GAAlC2vB,EAAI,OAAEhxC,EAAK,QACnB,OAA0B,IAAnBimC,OAAOjmC,GACV,YACA,UAAGqhB,EAAI,mBAAWrhB,EAAK,YAAIgxC,EAAI,IACrC,EAEaM,GAAoB,SAACtxC,GAChC,GAAIA,EAAO,CACT,GAAIA,EAAQkwC,GAAaqB,WAAa72B,OAAO,GAC3C,MAAO,CAAE1a,MAAOA,EAAQkwC,GAAaqB,UAAWP,KAAM,aACxD,GAAIhxC,EAAQkwC,GAAasB,WAAa92B,OAAO,GAC3C,MAAO,CAAE1a,MAAOA,EAAQkwC,GAAasB,UAAWR,KAAM,aACxD,GAAIhxC,EAAQkwC,GAAauB,WAAa/2B,OAAO,GAC3C,MAAO,CAAE1a,MAAOA,EAAQkwC,GAAauB,UAAWT,KAAM,aACxD,GAAIhxC,EAAQkwC,GAAawB,WAAah3B,OAAO,GAC3C,MAAO,CAAE1a,MAAOA,EAAQkwC,GAAawB,UAAWV,KAAM,Y,CAG1D,MAAO,CAAEhxC,MAAK,EAAEgxC,KAAM,QACxB,E,mNejEM,GAGA,CAAC,OAAQ,aAAc,eAAgB,mBAwBhCW,GAAc,SAAkB,G,MAC3ChmC,EAAM,SACNpI,EAAQ,WACRiJ,EAAM,SACNlK,EAAgB,mBAChBqB,EAAS,YACT8I,EAAa,gBACbJ,EAAS,YACTtJ,EAAiB,oBACjB2J,EAAa,gBACb/K,EAAI,OACJC,EAAO,UACPoC,EAAY,eACZ2I,EAAiB,oBACjBC,EAAkB,qBAClBN,EAAc,iBACdO,EAAgB,mBAERkC,GAAM,IAAA2D,gBAAe,SAAQ,EAE/BjR,EAAS62B,IAEThN,EAAajf,EAAUnE,OAAS,EACtC,OACE,SAAC,EAAA8D,YAAW,IAACuf,UAAU,EAAMC,mBAAmB,EAAI,aAAc,QAAM,WACtE,SAACC,EAAA,EAAS,CACR7Y,QAAS,EAAA8Y,aAAA,QACTC,YAAa,aACbC,UAAW7c,EAAE,oBACbtM,KAAMkJ,EACNkgB,QAAS,GACTC,aAAc,SAAC,G,IAAEC,EAAM,SAAEC,EAAE,KAAEvrB,EAAG,MAAO,OACrC,SAACurB,EAAE,UAAYvqB,EAAOY,OAAO0pB,IAApBtrB,EAD4B,EAGvC4rB,WAAY,SAAC,G,IAAEN,EAAM,SAAExf,EAAG,MAAE+f,EAAE,KAAE7rB,EAAG,MACjC,OACE,SAAC6rB,EAAE,IAAWC,UAAW9qB,EAAOY,OAAO0pB,IAAO,UAC3C,WACC,OAAQA,GACN,IAAK,OACH,OACE,SAAC,EAAA+O,OAAM,CACLloB,QAAQ,OACRib,UAAW,SAACpb,GAAU,OACpB,SAAC,EAAA0kB,KAAI,IACHl2B,GAAIqL,EAAeC,IACfkG,EAAK,eACG,wBAAuB,yBACZ,cAAY,UAElClG,EAAI7J,OAPa,EAUtBgqB,QAAS,WAAM,OAAA7f,EAAiBN,EAAjB,EACfysB,UAAQ,IAGd,IAAK,aACH,OAAOzsB,EAAIiE,WAAWtI,OACxB,IAAK,eACH,OAAO4oC,GAAuBvkC,EAAI,gBAAgBvM,OACpD,IAAK,kBACH,OAAOqxC,GAAuB9kC,EAAI,mBAAmBvM,OAE1D,CA3BA,KADMS,EA+Bb,EACA+rB,cAAe,SAAC,G,IAAEjgB,EAAG,MAAEkgB,EAAa,gBAAO,OACzC,SAACA,EAAa,CACZvW,MAAO,CACL,CACErD,MAAO9D,EAAE,sBACT2d,QAAS,WAAM,OAAAlgB,EAAOD,EAAP,GAEjB,CACEsG,MAAO9D,EAAE,wBACT2d,QAAS,WAAM,OAAAnpB,EAASgJ,EAAT,KAToB,EAc3CjK,iBAAkBA,EAClBqqB,SAAO,KACL,EAAClrB,EAAOY,OAAOK,MAAO,CACpBiI,KAAM,SACNhI,MAAO0J,EACPugB,SAAUngB,EACVogB,aAAclgB,EACdmgB,cAAelgB,EACfmgB,SAAU,SAAC/sB,GAAkB,OAAC,yBAAyBgtB,KAAKhtB,EAA/B,EAC7BitB,aAAcle,EAAE,gC,GAGpBghB,QAAS,CACP,CACEoG,MAAOpnB,EAAE,gBACT2d,QAAShgB,EACTi3B,WAAW,IAGfhgC,UAAWA,EACXhC,KAAMA,EACNqC,aAAcA,EACdpC,QAASA,EACT0pB,WAAYA,EACZvoB,kBAAmBA,EACnBmqB,kBAAkB,SAAC8iB,GAAiB,CAACtjC,cAAeA,IACpDygB,qBAAqB,SAACC,EAAA,EAAmB,QAIjD,GD5FY6iB,GAAA,QAAa,KACvB,2BACA,oCAsCK,IEnGK2B,G,sNCICC,GAAkD,WAC7D,OACE,SAAC,EAAA7lC,YAAW,IAACuf,UAAU,GAAI,WACzB,SAAC,EAAAZ,WAAU,IAAC/X,QAAS,EAAAgY,kBAAA,IAAoB,WACvC,SAAC,EAAAO,eAAc,qBAAgB,UAAQ,WACrC,SAAC,KAAkB,YAK7B,E,mNCPa2mB,GAAkD,WACrD,IAAA/iC,GAAM,IAAA2D,kBAAgB,EAC9B,OACE,SAAC,EAAA1G,YAAW,IAACuf,UAAU,GAAI,WACzB,UAAC,EAAAZ,WAAU,IAAC/X,QAAS,EAAAgY,kBAAA,IAAoB,YACvC,SAAC,EAAAC,eAAc,CAACC,KAAM,EAAAinB,qBACtB,SAAC,EAAA/mB,MAAK,IAACC,aAAa,KAAK5J,KAAK,MAAI,UAC/BtS,EAAE,yCAEL,SAAC,EAAAoc,eAAc,UAAEpc,EAAE,4CAI3B,E,mNCdaijC,GAAuD,SAAC,G,IACnEC,EAAe,kBACfC,EAAS,YACTC,EAAkB,qBAClBC,EAAgB,mBAChBC,EAAgB,mBAChBC,EAAY,eAEZ,OACE,SAAC,EAAAtmC,YAAW,IACVwf,mBAAmB,EAAI,aACX,OACZ6L,QAAS,CAAEha,QAAS,aACpB0Z,UACE,4EAA0E,WAG5E,UAAC,EAAAkY,KAAI,IAACrP,WAAS,eACb,SAAC,EAAA2S,SAAQ,UAAEN,KACX,SAAC,EAAAM,SAAQ,IAACC,GAAI,GAAC,UAAGN,MAClB,SAAC,EAAAK,SAAQ,IAACC,GAAI,GAAC,UAAGL,MAClB,SAAC,EAAAI,SAAQ,IAACC,GAAI,GAAC,UAAGJ,MAClB,SAAC,EAAAG,SAAQ,IAACrD,GAAI,GAAC,UAAGmD,MAClB,SAAC,EAAAE,SAAQ,IAACrD,GAAI,GAAC,UAAGoD,WAI1B,ECnCaG,GAAqC,WAAM,OACtD,SAAC,EAAAlD,SAAQ,WACP,SAAC,EAAAmD,SAAQ,WACP,SAAC,EAAA3S,QAAO,CAAC4S,OAAK,mBAAgB,cAHoB,E,2GJExD,SAAYf,GACV,mCACA,sCACA,sCACA,8BACA,iCACA,iCACA,mCACA,oCACA,gCACA,gCACD,CAXD,CAAYA,KAAAA,GAAe,KKHpB,IAAMgB,KAAuB,OACjChB,GAAgBiB,cAAe,CAC9B5kC,SAAU,GACV6kC,MAAO,EACPC,UAAU,GAEZ,GAACnB,GAAgBoB,eAAgB,CAC/B/kC,SAAU,IACV6kC,MAAO,EACPC,UAAU,GAEZ,GAACnB,GAAgBqB,eAAgB,CAC/BhlC,SAAU,IACV6kC,MAAO,EACPC,UAAU,GAEZ,GAACnB,GAAgBsB,WAAY,CAAEjlC,SAAU,IAAS6kC,MAAO,EAAGC,UAAU,GACtE,GAACnB,GAAgBuB,YAAa,CAC5BllC,SAAU,KACV6kC,MAAO,EACPC,UAAU,GAEZ,GAACnB,GAAgBwB,YAAa,CAC5BnlC,SAAU,KACV6kC,MAAO,EACPC,UAAU,GAEZ,GAACnB,GAAgByB,aAAc,CAC7BplC,SAAU,KACV6kC,MAAO,EACPC,UAAU,GAEZ,GAACnB,GAAgB0B,aAAc,CAC7BrlC,SAAU,MACV6kC,MAAO,EACPC,UAAU,GAEZ,GAACnB,GAAgB2B,WAAY,CAC3BtlC,SAAU,MACV6kC,MAAO,EACPC,UAAU,GAEZ,GAACnB,GAAgB4B,WAAY,CAC3BvlC,SAAU,MACV6kC,MAAO,EACPC,UAAU,G,IAIDU,GAAc,IACdC,GAAe,CAC1BC,OAAQ,IACRC,KAAM,IACNC,MAAO,GACPC,IAAK,I,mNCnDMC,GAA6C,WAChD,IAAAhlC,GAAM,IAAA2D,kBAAgB,EAC9B,OACE,UAAC,EAAAutB,KAAI,IAACn9B,UAAW,CAAEua,QAAS,UAAU,iBAAiB,UAAQ,YAC7D,SAAC,EAAA6iB,SAAQ,WACP,SAAC,EAAA5G,SAAQ,CACP3D,OAAQ,UAAG8d,GAAcC,GAAaC,OAAM,MAC5Cna,iBAAkBzqB,EAAE,iDAGxB,SAAC,EAAAmxB,SAAQ,WACP,SAAC,EAAA5G,SAAQ,CAAC3D,OAAQ,UAAG+d,GAAaC,OAAS,EAAI,KAAI,MAAMpa,MAAM,WAEjE,SAAC,EAAA2G,SAAQ,WACP,SAAC,EAAA5G,SAAQ,CAAC3D,OAAQ,UAAG+d,GAAaC,OAAS,EAAI,KAAI,MAAMpa,MAAM,aAIvE,ECpBO,SAASya,KACd,IAAMC,GAAe,IAAAx0C,QAAuB,MACtC,GAAoB,IAAAP,UAAiB,GAApCq6B,EAAK,KAAE2a,EAAQ,KAEhBC,EAAe,WACnB,OAAAF,EAAan0C,SAAWo0C,EAASD,EAAan0C,QAAQs0C,YAAtD,EAUF,OARA,IAAAC,kBAAgB,WACdF,GACF,GAAG,KAEH,IAAAp0C,YAAU,WAER,OADAu0C,OAAOC,iBAAiB,SAAUJ,GAC3B,WAAM,OAAAG,OAAOE,oBAAoB,SAAUL,EAArC,CACf,GAAG,IACI,CAACF,EAAc1a,EACxB,C,wCCbO,SAASkb,GAAYlmC,GAC1B,OAAO,QAASA,EAAO,CAAEmmC,MAAO,QAASz8B,UAC3C,CAEO,IAAM08B,GAAiB,SAACC,GAC7B,OAAOhC,GAAqBgC,GAAc7B,QAC5C,EAEa8B,GAAmB,SAC9B99B,EACA,G,IAAEg8B,QAAF,MAAsC,CAAEA,UAAU,GAAO,GAA/C,SAEJja,GAAO,EAAAgc,GAAA,GAAa/9B,EAAY,KACtC,OAAO,KAAAktB,kBAAiBnL,EAAM,MAAOia,EAAW,kBAAoB,QACtE,EAEO,SAASgC,GACdC,EACA9mC,GAEA,IAAM+mC,E,+LAAgB,IAAID,GAAU,GACpCC,EAAc1yC,OACd,IAAM2yC,EACJv5B,SAASs5B,EAAcA,EAAc/sC,OAAS,KAAO8Y,KAAK0X,MAC5D,OAAO,IAAIzc,MACTlD,KAAKwvB,IAAIqK,GAAqB1kC,GAAU4kC,MAAOmC,EAAc/sC,SAE5D0gC,KAAKsM,GACLrqC,KAAI,SAACiQ,EAAW8lB,GACf,SAAAuU,GAAA,GAAI,IAAIn0B,KAAKlG,GAAI,CACfq2B,QAASyB,GAAqB1kC,GAAUD,SAAW2yB,IAClDwU,SAFH,GAIN,C,uNCiBaC,GAET,SAAC,G,IACHjnC,EAAO,UACPF,EAAQ,WACRonC,EAAS,YACTC,EAAM,SACNC,EAAM,SACNC,EAAU,aACV,IAAAC,YAAAA,OAAW,IAAG,WAAC56B,GAAM,gBAAGA,EAAH,EAAM,EAC3BtQ,EAAS,YACTmrC,EAAU,aAEF5mC,GAAM,IAAA2D,kBAAgB,EACxB,EAAwBshC,KAAvBC,EAAY,KAAE1a,EAAK,KAEpBqc,EAAcrc,GAASA,EAAQ,IAAM,EAAI,EAEzC,EAqFR,SACEnrB,EACAF,EACA2nC,EACAC,EACAL,GAMA,IAAMM,EAAa,CACjBN,EACI,CACE/yC,KAAMozC,EACNE,OAAQ,CAAEpN,KAAM,GAAAqN,sBAAA,MAA6BtrC,KAAM,mBAErD5L,EACJ,CAAE2D,KAAMmzC,EAAWG,OAAQ,CAAEpN,KAAM,GAAAsN,qBAAA,SACnC9pC,QAAO,SAAC0O,GAAM,QAAEA,CAAF,IAEVq7B,EAAY,GAAAD,qBAAA,MACZE,EAAiB,GAAAH,sBAAA,MACjBI,EAA8B,GAC9BC,EAA+B,GAC/BC,EAAoC,GAE1Cr7B,OAAOs7B,QAAQpoC,GAASvD,KAAI,SAAC,G,IAACkM,EAAS,KAAExI,EAAK,KAC5C+nC,EAAKhzC,KAAK,CAAEZ,KAAMmzC,EAAWY,EAAG96B,SAAS5E,EAAW,IAAK2/B,EAAGnoC,GAC9D,IACA8nC,EAAU/yC,KAAK,CAAE6yC,UAAS,EAAEC,eAAc,EAAEE,KAAI,EAAEC,UAAS,IAE3D,IAAMI,EAAa5B,GAAkB75B,OAAO0yB,KAAKx/B,GAAUF,GAY3D,OAVIunC,GACFkB,EAAWxgC,SAAQ,SAACY,GAClB,OAAAw/B,EAAUjzC,KAAK,CACbZ,KAAMozC,EACNW,EAAG1/B,EACH2/B,EAAGjB,GAHL,IAQG,CACLM,WAAU,EACVM,UAAS,EACTM,WAAU,EAEd,CAtIgDC,CAC5CxoC,EACAF,EACAonC,EACAvmC,EAAE,iBACF0mC,GALMY,EAAS,YAAEN,EAAU,aAAEY,EAAU,aAQnCE,EAAa37B,OAAO0yB,KAAKx/B,GAASlG,OAAS,EAC3C6qC,EAAW4B,GAAezmC,GAEhC,QAAQ,GACN,KAAK1D,EACH,OAAO,SAACupC,GAAmB,IAC7B,KAAM8C,EACJ,OAAOlB,EACT,QAIE,OACE,mBAAKrW,IAAK2U,GAAY,WACpB,UAAC6C,GAAA,EAAK,IACJC,UAAWzB,EACX0B,oBACE,SAACC,GAAA,EAAqB,CAACx1C,OARsB,SAAC,G,IAAEy1C,EAAK,QAE3D,gBAAGA,EAAMx0C,KAAI,aAAKgzC,EAAYwB,EAAMR,GAApC,EAM6CS,wBAAsB,IAE/DC,eAAe,cACfC,iBACE,SAACC,GAAA,GAAW,CACVvH,YAAa,aACbttC,KAAMszC,EACNH,YAAaA,IAGjBjgB,OAAQ8d,GACRpc,QAASqc,GACT6D,WAAYC,GAAA,kBACZje,MAAOA,EACPke,iBAAiB,GAAI,YAErB,SAACC,GAAAC,EAAS,CACRxhB,MAAO,MAAQof,GAAUxmC,EAAE,4BAA8B,IACzD4nC,WAAYA,EACZiB,WAAY,SAAC98B,GACX,OAAA+5B,GAAiB/5B,EAAG,CAClBi4B,SAAQ,GADV,KAKJ,SAAC2E,GAAAC,EAAS,CACRxhB,MAAO,cAAgBqf,GAAUF,GACjCuC,eAAa,EACbD,WAAYlC,KAEd,SAACoC,GAAA,EAAU,UACRzB,EAAUxrC,KAAI,SAAC7K,EAAO4gC,GAAU,OAC/B,SAACmX,GAAA,EAAS,CAERt1C,KAAMzC,EAAMs2C,KACZ5gB,MAAO,CACLjzB,KAAM,C,IAHH,qBAAcm+B,GAFU,OAanC,SAACoX,GAAA,EAAc,CAEbv1C,KAAM4zC,EAAU,GAAGE,UACnB7gB,MAAO,CACLjzB,KAAM,CACJw1C,OAAQ5B,EAAU,GAAGD,kBAJpB,0BAanB,E,mNClIM8B,GAAS,CAAC,GAAAC,qBAAA,MAA4B,GAAAjC,qBAAA,OAwB/BkC,GAET,SAAC,G,IAAE5nC,EAAU,aAAEb,EAAK,QAAEzB,EAAQ,WAAE1D,EAAS,YAAEmrC,EAAU,aAC/C5mC,GAAM,IAAA2D,kBAAgB,EACxB,EAAwBshC,KAAvBC,EAAY,KAAE1a,EAAK,KAEpBqc,EAAcrc,GAASA,EAAQ,IAAM,EAAI,EAEzC,EAsED,SACL/oB,EACAb,EACAzB,GAMA,IAAM6nC,EAAgC,GAChCM,EAA8B,GACpCn7B,OAAOs7B,QAAQhmC,GAAY3F,KAAI,SAAC,EAAsB+1B,G,IAArBrkB,EAAS,KAAE87B,EAAO,KAC3C31C,EAAOiN,EAAQ,UAAGA,EAAK,aAAK4M,GAAcA,EAC1Cud,EAAQoe,GAAOtX,GACrBmV,EAAWzyC,KAAK,CACdZ,KAAI,IAEN,IAAM4zC,EAAkC,GAExCp7B,OAAOs7B,QAAQ6B,GAASxtC,KAAI,SAAC,G,IAACkM,EAAS,KAAE/W,EAAK,KAC5Cs2C,EAAKhzC,KAAK,CAAEZ,KAAI,EAAE+zC,EAAG96B,SAAS5E,EAAW,IAAK2/B,EAAG12C,GACnD,IACAq2C,EAAU/yC,KAAK,CAAEw2B,MAAK,EAAEwc,KAAI,GAC9B,IAEA,IAGMK,EAAa5B,GAHG94B,MAAMtI,KAC1B,IAAIuI,IAAIhB,OAAO/H,OAAO3C,GAAYoH,SAAQ,SAACnB,GAAM,OAAAyE,OAAO0yB,KAAKn3B,EAAZ,MAECvI,GAEpD,MAAO,CACL6nC,WAAU,EACVM,UAAS,EACTM,WAAU,EAEd,CAzGgD,CAC5CnmC,EACAb,EACAzB,GAHMmoC,EAAS,YAAEN,EAAU,aAAEY,EAAU,aAMnCE,EAAa37B,OAAO0yB,KAAKp9B,GAAYtI,OAAS,EAE9C6qC,EAAW4B,GAAezmC,GAEhC,OACE,mBAAKoxB,IAAK2U,GAAY,UACnB,WACC,QAAQ,GACN,KAAKzpC,EACH,OAAO,SAACupC,GAAmB,IAC7B,KAAM8C,EACJ,OAAOlB,EACT,QAKE,OACE,UAACmB,GAAA,EAAK,IACJC,UAAWhoC,EAAE,kCACbioC,oBACE,SAACC,GAAA,EAAqB,CACpBx1C,OAT6C,SAAC,G,IAAEy1C,EAAK,QAE3D,gBAAGA,EAAMx0C,KAAI,aAAK+xC,GAAYyC,EAAMR,GAApC,EAQMS,wBAAsB,IAG1BC,eAAe,cACfC,iBACE,SAACC,GAAA,GAAW,CAAC70C,KAAMszC,EAAYH,YAAaA,IAE9CjgB,OAAQ8d,GACRpc,QAASqc,GACT6D,WAAYC,GAAA,gBACZje,MAAOA,EACPke,iBAAiB,GAAI,YAErB,SAACC,GAAAC,EAAS,CACRxhB,MAAO,KAAOpnB,EAAE,2BAChB4nC,WAAYA,EACZiB,WAAY,SAAC98B,GACX,OAAA+5B,GAAiB/5B,EAAG,CAClBi4B,SAAQ,GADV,KAKJ,SAAC2E,GAAAC,EAAS,CACRxhB,MAAO,aAAepnB,EAAE,4BACxB8oC,eAAa,EACbD,WAAYnD,MAEd,SAACqD,GAAA,EAAU,UACRzB,EAAUxrC,KAAI,SAAC7K,EAAO4gC,GAAU,OAC/B,SAACmX,GAAA,EAAS,CAA6Bt1C,KAAMzC,EAAMs2C,MAAnC,qBAAc1V,GADC,UAQ5C,CArDA,KAwDP,E,mNCrHa0X,GAAyD,SAAC,G,IACrEzlC,EAAK,QACL0c,EAAW,cAEHxgB,GAAM,IAAA2D,kBAAgB,EAC9B,OACE,SAAC,EAAAyoB,QAAO,iBACMtoB,EACZuZ,eAAe,yBAAMvZ,IACrBuoB,aAAa,yBAAM7L,KAAkB,WAErC,SAAC,EAAAgpB,2BAA0B,cACbxpC,EAAE,+CAAgD,CAC5D8D,MAAK,QAKf,E,kaC0Ba2lC,GAA2D,SAAC,G,IACvEC,EAAkB,qBAClBC,EAAkB,qBAClB7pC,EAAa,gBACbX,EAAQ,WACR1D,EAAS,YACTmrC,EAAU,aAEF5mC,GAAM,IAAA2D,kBAAgB,EACxB,EAAwBshC,KAAvBC,EAAY,KAAE1a,EAAK,KAEpBqc,EAAcrc,GAASA,EAAQ,IAAM,EAAI,EAEzC,EAmFD,SACLof,EACAC,EACA1qC,EACA2qC,EACAC,GAMA,IAAM/C,EAAgC,GAChCM,EAA8B,GAE9B0C,EAAeC,GAAcL,EAAeE,GAClD,GAAIE,EAAa7wC,OAAS,EAAG,CAC3B,IAAM4xB,EAAQ,GAAAoc,qBAAA,MACdG,EAAU/yC,KAAK,CAAEw2B,MAAK,EAAEmf,KAAMF,IAC9BhD,EAAWzyC,KAAK,CACdZ,KAAMm2C,EACN7C,OAAQ,CACNpN,KAAM9O,I,CAKZ,IAAMof,EAAeF,GAAcJ,EAAeE,GAgBlD,OAfII,EAAahxC,OAAS,IAClB4xB,EAAQ,GAAAqf,sBAAA,MACd9C,EAAU/yC,KAAK,CAAEw2B,MAAK,EAAEmf,KAAMC,IAC9BnD,EAAWzyC,KAAK,CACdZ,KAAMo2C,EACN9C,OAAQ,CACNpN,KAAM9O,MASL,CACLic,WAAU,EACVM,UAAS,EACTM,WALiB5B,GAHG94B,MAAMtI,KAC1B,IAAIuI,IAAI,SAAIhB,OAAO0yB,KAAK+K,IAAgB,GAAGz9B,OAAO0yB,KAAKgL,IAAc,KAEnB1qC,GAOtD,CAlIgDkrC,CAC5CX,EACAC,EACAxqC,EACAW,EACIE,EAAE,yBAA0B,CAC1BY,MAAOd,IAETE,EAAE,qCACNF,EACIE,EAAE,yBAA0B,CAC1BY,MAAOd,IAETE,EAAE,sCAbAsnC,EAAS,YAAEN,EAAU,aAAEY,EAAU,aAgBnCE,EACJ37B,OAAO0yB,KAAK6K,GAAoBvwC,OAAS,GACzCgT,OAAO0yB,KAAK8K,GAAoBxwC,OAAS,EAErC6qC,EAAW4B,GAAezmC,GAEhC,QAAQ,GACN,KAAK1D,EACH,OAAO,SAACupC,GAAmB,IAC7B,KAAM8C,EACJ,OAAOlB,EACT,QAIE,OACE,mBAAKrW,IAAK2U,GAAY,WACpB,UAAC6C,GAAA,EAAK,IACJC,UAAWhoC,EAAE,uBACbioC,oBACE,SAACC,GAAA,EAAqB,CAACx1C,OAN7B,SAAC,G,IAAEy1C,EAAK,QAAO,gBAAGA,EAAMx0C,KAAI,aAAK+xC,GAAYyC,EAAMR,GAApC,EAM8BS,wBAAsB,IAE/DM,iBAAiB,EACjBL,eAAe,cACfC,iBACE,SAACC,GAAA,GAAW,CAAC70C,KAAMszC,EAAYH,YAAaA,IAE9CjgB,OAAQ8d,GACRpc,QAASqc,GACT6D,WAAYC,GAAA,kBACZje,MAAOA,GAAK,YAEZ,SAACme,GAAAC,EAAS,CACRxhB,MAAO,KAAOpnB,EAAE,2BAChB4nC,WAAYA,EACZ0C,UAAWzG,GAAqB1kC,GAAU4kC,MAC1C8E,WAAY,SAAC98B,GACX,OAAA+5B,GAAiB/5B,EAAG,CAClBi4B,SAAQ,GADV,KAKJ,SAAC2E,GAAAC,EAAS,CACRxhB,MAAO,aAAepnB,EAAE,4BACxB8oC,eAAa,EACbD,WAAYnD,MAEd,SAACqD,GAAA,EAAU,UACRzB,EAAUxrC,KAAI,SAAC7K,EAAO4gC,GAAU,OAC/B,SAAC0Y,GAAA,EAAS,CAER72C,KAAMzC,EAAMi5C,KACZvjB,MAAO,CACLjzB,KAAM,CACJw1C,OAAQj4C,EAAM85B,SAJb,qBAAc8G,GAFU,aAiB/C,EAmDO,SAASoY,GACd5qC,EACA1L,GAEA,IAAMu2C,EAA8B,GAKpC,OAHA/9B,OAAOs7B,QAAQpoC,GAASvD,KAAI,SAAC,G,IAACkM,EAAS,KAAExI,EAAK,KAC5C0qC,EAAK31C,KAAK,CAAEZ,KAAI,EAAE+zC,EAAG96B,SAAS5E,EAAW,IAAK2/B,EAAGnoC,GACnD,IACO0qC,CACT,C,0NCvMaM,GAA6C,WAChD,IAAAxqC,GAAM,IAAA2D,gBAAe,CAAC,YAAW,EACzC,OACE,UAAC,EAAAiY,WAAU,IAAC/X,QAAS,EAAAgY,kBAAA,IAAoB,YACvC,SAAC,EAAAC,eAAc,CACbC,KAAM,EAAA+O,wBACNC,MAAM,0CAER,SAAC,EAAA9O,MAAK,IAACC,aAAa,KAAK5J,KAAK,MAAI,UAC/BtS,EAAE,8BAIX,E,mNCZayqC,GAAyD,WAC5D,IAAAzqC,GAAM,IAAA2D,kBAAgB,EAC9B,OACE,UAAC,EAAAiY,WAAU,IAAC/X,QAAS,EAAAgY,kBAAA,IAAoB,YACvC,SAAC,EAAAC,eAAc,CAACC,KAAM,EAAAiY,cACtB,SAAC,EAAA/X,MAAK,IAACC,aAAa,KAAK5J,KAAK,MAAI,UAC/BtS,EAAE,iDAEL,SAAC,EAAAoc,eAAc,UACZpc,EAAE,iDAIX,E,mNCTa0qC,GAAiE,SAAC,G,IAC7E/sC,EAAa,gBAELqC,GAAM,IAAA2D,kBAAgB,EAC9B,OACE,UAAC,EAAAiY,WAAU,IAAC/X,QAAS,EAAAgY,kBAAA,IAAoB,YACvC,SAAC,EAAAC,eAAc,CAACC,KAAM,EAAA4uB,cACtB,SAAC,EAAA1uB,MAAK,IAACC,aAAa,KAAK5J,KAAK,MAAI,UAC/BtS,EAAE,2CAEL,SAAC,EAAAoc,eAAc,UAAEpc,EAAE,wCAClBrC,IACC,SAAC,EAAAouB,OAAM,IACL7D,OAAO,gBACPrkB,QAAQ,UACR8Z,QAAShgB,GAAa,UAErBqC,EAAE,oDAKb,E,mNC1Ba4qC,GAAmD,WACtD,IAAA5qC,GAAM,IAAA2D,kBAAgB,EAC9B,OACE,UAAC,EAAAiY,WAAU,IAAC/X,QAAS,EAAAgY,kBAAA,IAAoB,YACvC,SAAC,EAAAC,eAAc,CAACC,KAAM,EAAAqiB,cACtB,SAAC,EAAAniB,MAAK,IAACC,aAAa,KAAK5J,KAAK,MAAI,UAC/BtS,EAAE,2CAEL,SAAC,EAAAoc,eAAc,WACb,SAAC,EAAApY,MAAK,CACJC,GAAI,UACJC,QAAS,6BACTC,WAAY,CAAEu8B,MAAM,8BAK9B,E,mNChBamK,KAAqB,OAC/BhI,GAAgBiB,cAAe,iBAChC,GAACjB,GAAgBoB,eAAgB,kBACjC,GAACpB,GAAgBqB,eAAgB,kBACjC,GAACrB,GAAgBsB,WAAY,cAC7B,GAACtB,GAAgBuB,YAAa,eAC9B,GAACvB,GAAgBwB,YAAa,eAC9B,GAACxB,GAAgByB,aAAc,gBAC/B,GAACzB,GAAgB0B,aAAc,gBAC/B,GAAC1B,GAAgB2B,WAAY,cAC7B,GAAC3B,GAAgB4B,WAAY,c,IAWlBqG,GAAyD,SAAC,G,IACrE3rC,EAAQ,WACR4rC,EAAO,UACPluB,EAAS,YACTmuB,EAAc,iBACdC,EAAgB,mBAEV,GAA0C,IAAA96C,WAAkB,GAA3D+6C,EAAgB,KAAEC,EAAmB,KAwBtCC,EAAS,yBAAkBn5B,KAAK0X,OACtC,OACE,UAAC,EAAA4M,YAAW,YACV,qBAAOe,QAAM,EAACxnC,GAAIs7C,GAAM,UACrBvuB,MAEH,SAAC,EAAA0a,OAAM,IACL1zB,QAAS,EAAAq2B,cAAA,OAAoB,kBACZkR,EACjBjf,SA/Be,SAAC+e,GACpBC,EAAoBD,EACtB,EA8BMrb,SA5BwC,SAACjW,EAAGyxB,GAChD,IAAMC,EAAUn/B,OAAOs7B,QAAQoD,IAAoB9xC,MAEjD,SAAC,GAAe,OAAb,KAAO,OAAgBsyC,CAAV,IAEdC,GACFL,EAAiBr+B,SAAS0+B,EAAQ,GAAI,KAExCH,GAAoB,EACtB,EAoBM3T,WAAYqT,GAAmB1rC,GAC/Bi3B,OAAQ8U,EACR3hC,WAAYyhC,GAAc,UApBZ,SAACD,GAAoB,QACvC,SAAC,EAAAQ,YAAW,IAACnkB,MAAM,wBAAsB,UACtCjb,OAAO/H,OAAOymC,IAAoB/uC,KAAI,SAACsrB,EAAOqQ,GAAQ,OACrD,SAAC,EAAAC,aAAY,CAA2BzmC,MAAOm2B,GAA5B,UAAG2jB,EAAO,YAAItT,GADoB,MADV,UAAGsT,EAAO,WADlB,CAsBlCS,CAAYT,QAIrB,E,mNCrEMU,GAAS,CACbn9B,QAAS,QACTm1B,GAAI,QACJiI,GAAI,QACJvL,GAAI,QACJY,GAAI,QACJ,MAAO,SAWI4K,GAA2D,SAAC,G,IACvE7rC,EAAa,gBACb,IAAA8rC,UAAAA,OAAS,IAAG,KAAE,EACdZ,EAAc,iBACdnuB,EAAS,YACTgvB,EAAkB,qBAEV7rC,GAAM,IAAA2D,kBAAgB,EACxB,GAA4C,IAAAxT,WAAkB,GAA7D27C,EAAiB,KAAEC,EAAoB,KACxC,GAA4B,IAAA57C,UAAS6Z,KAAKivB,UAAzC+S,EAAS,KAAEC,EAAY,MAE9B,IAAAj7C,YAAU,WAAM,OAAAi7C,EAAajiC,KAAKivB,SAAlB,GAA6B,CAAC2S,IAE9C,IAAMM,EAAiBlsC,EAAE,sBAmBnBmsC,EAAe,SAACP,GAAwB,QAC5C,SAAC,EAAAlU,aAAY,CAAwBzmC,MAAOi7C,GAAzB,mBACnB,SAAC,EAAAX,YAAW,IAACnkB,MAAM,mBAAiB,UACjCwkB,EAAU9vC,KAAI,SAAC8E,EAAOixB,GAAU,OAC/B,SAAC,EAAA6F,aAAY,CAEXzmC,MAAO2P,EACPkD,MAAOlD,GAFF,uBAAgBixB,EAAQ,GAFA,MADM,sBAFG,EAaxCtoB,EAAayhC,GAAuC,IAArBY,EAAUzyC,OACzCiyC,EAAS,0BAAmBn5B,KAAK0X,OAEvC,OACE,UAAC,EAAA4M,YAAW,IAACkV,OAAQA,IAAM,YACzB,qBAAOnU,QAAM,EAACxnC,GAAIs7C,GAAM,UACrBvuB,MAEH,SAAC,EAAA0a,OAAM,IAEL1zB,QAAS,EAAAq2B,cAAA,OACT/N,SAzCgB,SAAC2f,GACrBC,EAAqBD,EACvB,EAwCMjc,SAtCyC,SAACjW,EAAGyxB,GAE7CQ,EADJR,IAAca,EACSb,OACAr7C,GACvB+7C,GAAqB,EACvB,EAkCMvU,WAAY13B,GAAiBosC,EAC7B9V,OAAQ0V,EACRvR,iBACE,iCACE,SAAC,EAAA6D,WAAU,IAAG,IAAE8N,KACf,kBAEYd,EACjB/Q,SAxCgB,SAACzgB,EAAYwyB,GACjC,IAAMC,EACJT,EAAUvuC,QAAO,SAACuD,GAAU,OAA6B,GAA7BA,EAAM0rC,QAAQF,EAAd,KAAmC,GACjE,OAAOD,EAAaE,EACtB,EAqCME,WAAS,EACTC,iBAAe,EACfjjC,WAAYA,EACZ+d,SAAS,OACTU,UAAW,iCAA+B,UAEzCmkB,EAAaP,KAnBTI,MAuBb,E,mNChGaS,GAA6D,SAAC,G,IACzElP,EAAY,eACZ,IAAAb,YAAAA,OAAW,IAAG,MAAIzqB,KAAM,EACxB4K,EAAS,YACTsc,EAAS,YAEDn5B,GAAM,IAAA2D,gBAAe,CAAC,YAAW,EAEzC,OACE,iCACE,SAAC,EAAA4yB,YAAW,WACV,SAACgI,GAAA,EAAa,CACZ1hB,UAAWA,EACXc,QAASwb,EACToE,aAAcA,OAGlB,SAAC,EAAAhH,YAAW,IACViI,UAAW,CAAElwB,QAAS,cACtBqY,MAAO,CAAEoE,MAAO,iCAAgC,WAEhD,mBAAK/C,UAAU,qBAAmB,UAC/BuV,EACCv9B,EAAE,uBAEF,gCACGA,EAAE,yBACH,mBACA,SAAC8pB,EAAA,EAAU,CAACC,KAAM2S,EAAa1S,OAAO,kBACrChqB,EAAE,4CAOjB,E,mNCxBa0sC,GAET,SAAC,G,IACH5oC,EAAK,QACLhE,EAAa,gBACb8rC,EAAS,YACTzsC,EAAQ,WACRoK,EAAU,aACVg0B,EAAY,eACZb,EAAW,cACXiQ,EAAiB,oBACjBxT,EAAS,YACT0S,EAAkB,qBAEV7rC,GAAM,IAAA2D,kBAAgB,EAC9B,OACE,iCACE,SAAC,EAAA08B,WAAU,WACT,SAAC,EAAAE,UAAS,IAACzhB,UAAU,MAAI,UAAEhb,QAE7B,SAAC,EAAAg9B,QAAO,KACR,SAAC,EAAA9C,QAAO,WACN,UAAC,EAAAC,eAAc,YACb,SAAC0N,GAAa,CACZ9uB,UAAW7c,EAAE,kCACbF,cAAeA,EACf+rC,mBAAoBA,EACpBD,UAAWA,EACXZ,eAAgBzhC,KAElB,SAACuhC,GAAY,CACXjuB,UAAW7c,EAAE,iCACbb,SAAUA,EACV8rC,iBAAkB0B,EAClB3B,eAAgBzhC,EAChBwhC,QAAS,+BAEX,SAAC0B,GAAc,CACblP,aAAcA,EACdb,YAAaA,EACbvD,UAAWA,EACXtc,UAAW7c,EAAE,kCAInB,SAAC,EAAA8gC,QAAO,MAGd,E,mNCnCa8L,GAA+D,SAAC,G,IAC3EhwC,EAAM,SACN8sC,EAAkB,qBAClBC,EAAkB,qBAClBp8B,EAAmB,sBACnBzN,EAAa,gBACbX,EAAQ,WACRsC,EAAU,aACVorC,EAAkB,qBAClBC,EAAgB,mBAChBrxC,EAAS,YACT8hC,EAAY,eACZwP,EAAa,gBACbrQ,EAAW,cACX/+B,EAAa,gBACbw7B,EAAS,YACT6T,EAAe,kBACf/B,EAAgB,mBAERjrC,GAAM,IAAA2D,kBAAgB,EACxBspC,EAA6B,IAAlBrwC,EAAOzD,OAClB+zC,OACcl9C,IAAlB8P,QAC4C9P,IAA5C4M,EAAO7D,MAAK,SAACiH,GAAM,OAAAA,IAAMF,CAAN,IACfqtC,EAAkBD,GACtB,SAACzC,GAAmC,KAEpC,SAACD,GAAuB,IAE1B,OACE,UAAC,EAAApK,KAAI,kBAAc,kBAAgB,YACjC,SAACsM,GAAoB,CACnB5oC,MAAO9D,EAAE,yBACTb,SAAUA,EACVwtC,kBAAmB1B,EACnB1hC,WACEsjC,GAAsBE,GAAiBE,GAAYxxC,EAErD8hC,aAAcA,EACdz9B,cAAeA,EACf+rC,mBAAoBmB,EACpB7T,UAAWA,EACXyS,UAAWhvC,EACX8/B,YAAaA,IAEd,WACC,QAAQ,GACN,KAAKoQ,EACH,OAAO,SAACpJ,GAAe,IAEzB,KAAKmJ,EACH,OACE,SAAC,EAAArM,SAAQ,WACP,SAACgK,GAAuB,MAI9B,KAAKuC,IAAkBE,EACrB,OACE,SAAC,EAAAzM,SAAQ,WACP,SAACkK,GAAkB,MAIzB,KAAKqC,GAAiBE,EACpB,OACE,SAAC,EAAAzM,SAAQ,WACP,SAACkK,GAAkB,CAAC/sC,cAAeA,MAIzC,UAAuB3N,IAAlB8P,EACH,OACE,iCACE,SAACstC,GAAe,KAChB,SAAC,EAAA5M,SAAQ,WACP,SAACiJ,GAAe,CACdC,mBAAoBA,EACpBC,mBAAoBA,EACpB7pC,cAAeA,EACfX,SAAUA,EACV1D,UAAWA,EACXmrC,WAAYuG,OAGhB,SAAC,EAAArM,QAAO,KACR,SAACuM,GAAmB,KACpB,SAAC,EAAA7M,SAAQ,WACP,SAAC8F,GAA4B,CAC3BC,UAAWvmC,EAAE,uCACbymC,OAAQzmC,EAAE,8CACVX,QAASkO,EACTpO,SAAUA,EACV1D,UAAWA,EACXmrC,WAAYuG,OAGhB,SAAC,EAAArM,QAAO,KACR,SAACwM,GAAkB,KACnB,SAAC,EAAA9M,SAAQ,WACP,SAAC6I,GAAwB,CACvB5nC,WAAYA,EACZb,MAAOd,EACPX,SAAUA,EACV1D,UAAWA,EACXmrC,WAAYuG,SAMtB,QACE,OACE,iCACE,SAACC,GAAe,KAChB,SAAC,EAAA5M,SAAQ,WACP,SAACiJ,GAAe,CACdC,mBAAoBA,EACpBC,mBAAoBA,EACpB7pC,cAAeA,EACfX,SAAUA,EACV1D,UAAWA,EACXmrC,WAAYuG,OAGhB,SAAC,EAAArM,QAAO,KACR,SAACuM,GAAmB,KACpB,SAAC,EAAA7M,SAAQ,WACP,SAAC8F,GAA4B,CAC3BC,UAAWvmC,EAAE,uCACbymC,OAAQzmC,EAAE,8CACVX,QAASkO,EACTpO,SAAUA,EACV1D,UAAWA,EACXmrC,WAAYuG,OAGhB,SAAC,EAAArM,QAAO,KACR,SAACwM,GAAkB,KACnB,SAAC,EAAA9M,SAAQ,WACP,SAACoK,GAAyB,SAKrC,CApGA,MAuGP,EAEMwC,GAAqC,WACjC,IAAAptC,GAAM,IAAA2D,kBAAgB,EAC9B,OACE,UAAC,EAAA48B,UAAS,IAACzhB,UAAU,MAAI,WACtB9e,EAAE,uBAAwB,KAC3B,SAACupC,GAAY,CACXzlC,MAAO9D,EAAE,sCACTwgB,YAAaxgB,EAAE,wCAIvB,EAEMstC,GAAwC,WACpC,IAAAttC,GAAM,IAAA2D,kBAAgB,EAC9B,OACE,UAAC,EAAA48B,UAAS,IAACzhB,UAAU,MAAI,WACtB9e,EAAE,gCAAiC,KACpC,SAACupC,GAAY,CACXzlC,MAAO9D,EAAE,+CACTwgB,YAAaxgB,EAAE,+CAIvB,EAEMqtC,GAAyC,WACrC,IAAArtC,GAAM,IAAA2D,kBAAgB,EAC9B,OACE,UAAC,EAAA48B,UAAS,IAACzhB,UAAU,MAAI,WACtB9e,EAAE,uCAAwC,KAC3C,SAACupC,GAAY,CACXzlC,MAAO9D,EAAE,sDACTwgB,YAAaxgB,EAAE,sDAIvB,E,mNC5MautC,GAET,SAAC,G,IACHzpC,EAAK,QACLyF,EAAU,aACVg0B,EAAY,eACZb,EAAW,cACXv9B,EAAQ,WACRwtC,EAAiB,oBACjBxT,EAAS,YAEDn5B,GAAM,IAAA2D,kBAAgB,EAC9B,OACE,iCACE,SAAC,EAAA08B,WAAU,WACT,SAAC,EAAAE,UAAS,IAACzhB,UAAU,MAAI,UAAEhb,QAE7B,SAAC,EAAAg9B,QAAO,KACR,SAAC,EAAA9C,QAAO,WACN,UAAC,EAAAC,eAAc,YACb,SAAC6M,GAAY,CACXjuB,UAAW7c,EAAE,yCACbb,SAAUA,EACV8rC,iBAAkB0B,EAClB5B,QAAS,4BACTC,eAAgBzhC,KAElB,SAACkjC,GAAc,CACblP,aAAcA,EACdb,YAAaA,EACbvD,UAAWA,EACXtc,UAAW7c,EAAE,0CAInB,SAAC,EAAA8gC,QAAO,MAGd,E,mNCpBa0M,GAET,SAAC,G,IACHC,EAAe,kBACf3lC,EAAwB,2BACxBD,EAA4B,+BAC5B1I,EAAQ,WACRu9B,EAAW,cACXmQ,EAAkB,qBAClBC,EAAgB,mBAChBrxC,EAAS,YACT8hC,EAAY,eACZwP,EAAa,gBACbztC,EAAc,iBACdG,EAAgB,mBAChBE,EAAmB,sBACnBw5B,EAAS,YACT8R,EAAgB,mBAERjrC,GAAM,IAAA2D,gBAAe,WAAU,EAEvC,OACE,UAAC,EAAAy8B,KAAI,kBAAc,0BAAwB,YACzC,SAACmN,GAA0B,CACzBzpC,MAAO9D,EAAE,0BACTb,SAAUA,EACVu9B,YAAaA,EACbiQ,kBAAmB1B,EACnB1hC,WAAYsjC,GAAsBE,GAAiBtxC,EACnD8hC,aAAcA,EACdpE,UAAWA,IAEZ,WACC,QAAQ,GACN,KAAK2T,EACH,OAAO,SAACpJ,GAAe,IAEzB,KAAKmJ,EACH,OACE,SAAC,EAAArM,SAAQ,WACP,SAACgK,GAAuB,MAI9B,KAAKuC,EACH,OACE,SAAC,EAAAvM,SAAQ,WACP,SAACuC,GAA4B,MAInC,QACE,OACE,iCACE,SAAC2K,GAAU,CACT5pC,MAAO9D,EAAE,mBACT2tC,WAAY3tC,EAAE,gCAEhB,SAAC,EAAAwgC,SAAQ,WACP,SAAC8F,GAA4B,CAC3BC,UAAWvmC,EAAE,mBACbymC,OAAQzmC,EAAE,oBACVX,QAASouC,EACTtuC,SAAUA,EACVwnC,YAAajB,GACbgB,WAAYpnC,EACZ7D,UAAWA,EACXmrC,YAAY,SAAC4D,GAAuB,SAGxC,SAAC,EAAA1J,QAAO,KACR,SAAC4M,GAAU,CACT5pC,MAAO9D,EAAE,sBACT2tC,WAAY3tC,EAAE,qCAEhB,SAAC,EAAAwgC,SAAQ,WACP,SAAC8F,GAA4B,CAC3BC,UAAWvmC,EAAE,sBACbymC,OAAQzmC,EAAE,6BACVX,QAASyI,EACT3I,SAAUA,EACVunC,WAAYjnC,EACZhE,UAAWA,EACXmrC,YAAY,SAAC4D,GAAuB,SAGxC,SAAC,EAAA1J,QAAO,KACR,SAAC4M,GAAU,CACT5pC,MAAO9D,EAAE,2BACT2tC,WAAY3tC,EAAE,wCAEhB,SAAC,EAAAwgC,SAAQ,WACP,SAAC8F,GAA4B,CAC3BC,UAAWvmC,EAAE,2BACbymC,OAAQzmC,EAAE,iCACVX,QAASwI,EACT1I,SAAUA,EACVunC,WAAY/mC,EACZlE,UAAWA,EACXmrC,YAAY,SAAC4D,GAAuB,WAMjD,CAzEA,MA4EP,EAEakD,GAAiD,SAAC,G,IAC7D5pC,EAAK,QACL6pC,EAAU,aAEV,OACE,UAAC,EAAApN,UAAS,IAACzhB,UAAU,MAAI,WACtBhb,EAAK,KAAE,SAACylC,GAAY,CAACzlC,MAAOA,EAAO0c,YAAamtB,OAGvD,E,mNC1IaC,GAA+C,SAAC,G,IAC3DvmC,EAAM,SACN1T,EAAI,OACJwpB,EAAO,UACP1hB,EAAS,YAET,OACE,UAAC,EAAA2kC,KAAI,IAACyN,cAAY,gBAAcl6C,GAAI,YAClC,UAAC,EAAA4sC,UAAS,IAACzhB,UAAU,MAAI,WACtBnrB,EAAI,KAAE,SAAC41C,GAAY,CAACzlC,MAAOnQ,EAAM6sB,YAAarD,SAEjD,UAAC,EAAAqjB,SAAQ,YACL/kC,SACYzL,IAAXqX,GACC,SAAC,EAAAs8B,SAAQ,WACP,SAAC6G,GAAuB,OAG1B,SAAC,EAAAvuB,MAAK,IACJC,aAAa,KACb5J,KAAK,MAAK,iBACM,UAAGjL,EAAM,YAAI1T,IAAM,UAElC0T,MAGN5L,IAAa,SAAC,EAAA8uB,SAAQ,CAACC,MAAM,OAAOsjB,MAAM,iBAInD,E,mNCxCaC,GAA+D,SAAC,G,IAC3EC,EAAQ,WACRC,EAAY,eAEJjuC,GAAM,IAAA2D,gBAAe,WAAU,EAEvC,OAAKqqC,GAYI,qCAVL,SAAC,EAAApkB,MAAK,IACJK,UAAQ,EACRpmB,QAAQ,OACRC,MAAO9D,EAAE,qBACTkuC,aAAa,SAAC,EAAAC,uBAAsB,CAAC19C,QAASw9C,KAAgB,WAE9D,uBAAIjuC,EAAE,+BAMd,E,mNCDaouC,GAA2D,SAAC,G,IACvE/mC,EAAM,SACN5L,EAAS,YACT,IAAAsD,qBAAAA,OAAoB,IAAG,IAAC,EAEhBiB,GAAM,IAAA2D,kBAAgB,EAE9B,OACE,UAAC,EAAAy8B,KAAI,IACHyN,cAAY,gBACC7tC,EAAE,4CAA0C,YAEzD,UAAC,EAAAugC,UAAS,IAACzhB,UAAU,MAAI,WACtB9e,EAAE,2CAA4C,KAC/C,SAACupC,GAAY,CACXzlC,MAAO9D,EAAE,2CACTwgB,YAAaxgB,EAAE,yDAGnB,UAAC,EAAAwgC,SAAQ,YACL/kC,SACYzL,IAAXqX,GACC,SAAC,EAAAs8B,SAAQ,WACP,SAAC6G,GAAuB,OAG1B,iCACE,UAAC,EAAAvuB,MAAK,IACJC,aAAa,KACb5J,KAAK,MAAK,iBACM,UAAGjL,EAAM,YAAIrH,EAC3B,6CACC,WAEFqH,EAAQ,IAEHA,GAAUtI,GAEV,SAAC,EAAAsvC,sBAAqB,CAACtjB,MAAM,wCAEtB1jB,GAAiC,IAAvBtI,GAEjB,SAAC,EAAA+rB,wBAAuB,CAACC,MAAM,yCAG1B,QAIb,SAAC,EAAAnM,YAAW,WACV,SAAC,EAAAC,KAAI,UACF7e,EAAE,0BAA2B,CAC5BY,MAAO7B,YAMlBtD,IAAa,SAAC,EAAA8uB,SAAQ,CAACC,MAAM,OAAOsjB,MAAM,cAGvCzmC,GAAUA,GAAUtI,GAEpB,SAAC,EAAA0hC,WAAU,WACT,UAAC,EAAA7W,MAAK,IACJ0kB,cAAY,EACZrkB,UAAQ,EACRpmB,QAAS,EAAA0qC,aAAA,OACTzqC,MAAO9D,EAAE,0CAAwC,YAEjD,uBAAIA,EAAE,oDACN,uBAAIA,EAAE,yDAIHqH,GAAUA,GAAiC,IAAvBtI,GAE3B,SAAC,EAAA0hC,WAAU,WACT,UAAC,EAAA7W,MAAK,IACJ4kB,KAAM,QACNF,cAAY,EACZrkB,UAAQ,EACRpmB,QAAS,EAAA0qC,aAAA,QACTzqC,MAAO9D,EAAE,8CAA4C,YAErD,uBACGA,EAAE,oDAAqD,CACtDkW,MAAOnX,OAGX,uBAAIiB,EAAE,6DAKL,OAKjB,E,+NCvHMyuC,GAAW,CACf/uB,QAAS,UACTC,OAAQ,CACN8B,QAAS,CACPC,OAAQ,CACNC,IAAK,OAEPzc,GAAI,CACFq2B,UAAW,CACTva,QAAS,mBACTjB,OAAQ,aAId2uB,QAAS,CACPC,MAAO,CACL,IAAM,CACJ,CAAE7uB,KAAM,mBAAoBC,OAAQ,WACpC,CAAEA,OAAQ,2CAwBP6uB,IAA8B,OACzC,CACEtvB,4BAA4B,EAC5BD,QAAS,CAAC,EACVE,OAAQ,CACNjuB,QAAS,CAAC,EACVkuB,OAAQ,CAAC,GASX1vB,GAAI,uBACJwB,QAAS,CACPorC,iBAAa1sC,EACbmP,SAAU0jC,GAAgBsB,UAC1Bv8B,qBAAsB,CAAC,EACvBE,yBAA0B,CAAC,EAC3BD,6BAA8B,CAAC,EAC/BvI,oBAAgBtP,EAChByP,sBAAkBzP,EAClB2P,yBAAqB3P,EACrB6+C,cAAe,GAEjBnvB,QAAS,iBACTC,OAAQ,CACN0b,eAAgB,SACXoT,IAAQ,CACXxuB,KAAM,iBACNje,MAAO,oBACPkD,GAAI,CACFo2B,aAAc,CACZ,CACExb,KAAM,gBACNkB,QAAS,aACTjB,OAAQ,sCAEV,CAAEiB,QAAS,aAAcjB,OAAQ,mBAIvC+uB,QAAS,SACJL,IAAQ,CACXxuB,KAAM,UACNje,MAAO,oBACPkD,GAAI,CACFo2B,aAAc,CACZta,QAAS,aACTjB,OAAQ,yCAIdgvB,aAAc,CACZ9uB,KAAM,SACN/a,GAAI,CACFw2B,QAAS,CACP1a,QAAS,eACTjB,OAAQ,aAIdivB,YAAa,CACX/uB,KAAM,cACN/a,GAAI,CACFw2B,QAAS,CACP3b,OAAQ,oBAIdkvB,aAAc,CACZhvB,KAAM,eACN/a,GAAI,CACFw2B,QAAS,CACP3b,OAAQ,cAEVmvB,eAAgB,CACdluB,QAAS,cACTjB,OAAQ,aAIduc,WAAY,CACVrc,KAAM,aACNje,MAAO,oBACP0f,OAAQ,CACNC,IAAK,OAEPzc,GAAI,CACFo2B,aAAc,CACZta,QAAS,aACTjB,OAAQ,gBAEVwb,UAAW,CAGTxb,OAAQ,oBAMlB,CACEiB,QAAS,CACPmuB,mBAAmB,QAAO,CAExBzS,YAAa,SAAC1Z,GAAa,WAAI/Q,IAAJ,IAE7Bm9B,YAAY,SAAO,SAACx1B,EAAGtU,GAEnB,IAAAsC,EAMEtC,EAAK,qBALPwC,EAKExC,EAAK,yBAJPuC,EAIEvC,EAAK,6BAHPhG,EAGEgG,EAAK,eAFP7F,EAEE6F,EAAK,iBADP3F,EACE2F,EAAK,oBACT,MAAO,CACLsC,qBAAoB,EACpBE,yBAAwB,EACxBD,6BAA4B,EAC5BvI,eAAgBA,EAAiB,cAAQ,GACzCG,iBAAgB,EAChBE,oBAAmB,EAEvB,IACA0vC,kBAAkB,QAAO,CACvBR,cAAe,SAACv9C,GAAY,OAAAA,EAAQu9C,cAAgB,CAAxB,IAE9BS,cAAc,QAAO,CAEnBT,cAAe,SAAC7rB,GAAa,YAE/BusB,aAAa,SAAO,SAACvsB,EAAU1d,GAAU,OACvCnG,SAAUmG,EAAMnG,SAChByI,qBAAsB,CAAC,EACvBE,yBAA0B,CAAC,EAC3BD,6BAA8B,CAAC,EAJQ,KAO3C2b,OAAQ,CACNgsB,iBAAkB,SAACl+C,GAAY,OAAAA,EAAQu9C,cA3LzB,CA2LiB,EAC/B9B,cAAe,SAACnzB,EAAGtU,GACjB,MAAmB,iBAAfA,EAAM1J,OAENuQ,OAAO0yB,KAAKv5B,EAAMwC,0BAA0B3O,OAAS,GACrDgT,OAAO0yB,KAAKv5B,EAAMuC,8BAA8B1O,OAAS,GACzDgT,OAAO0yB,KAAKv5B,EAAMsC,sBAAsBzO,OAAS,EAIvD,K,mNClMA,GAAW,CACfumB,QAAS,UACTC,OAAQ,CACN8B,QAAS,CACPC,OAAQ,CACNC,IAAK,OAEPzc,GAAI,CACFq2B,UAAW,CACTva,QAAS,mBACTjB,OAAQ,aAId2uB,QAAS,CACPC,MAAO,CACL,IAAM,CACJ,CAAE7uB,KAAM,mBAAoBC,OAAQ,WACpC,CAAEA,OAAQ,oCA0BP0vB,IAAuB,OAClC,CACEpwB,QAAS,CAAC,EACVC,4BAA4B,EAC5BC,OAAQ,CACNjuB,QAAS,CAAC,EACVkuB,OAAQ,CAAC,GAWX1vB,GAAI,gBACJwB,QAAS,CACPorC,iBAAa1sC,EAGb8P,mBAAe9P,EACfmP,SAAU0jC,GAAgBsB,UAG1BpkC,YAAa,GACb2N,cAAe,GACfL,cAAe,CAAC,EAChBD,cAAe,CAAC,EAChBE,kBAAmB,CAAC,EACpBC,oBAAqB,CAAC,EAGtBshC,cAAe,GAEjBnvB,QAAS,iBACTC,OAAQ,CACN0b,eAAgB,SACX,IAAQ,CACXpb,KAAM,iBACNje,MAAO,oBACPkD,GAAI,CACFo2B,aAAc,CACZ,CACExb,KAAM,gBACNkB,QAAS,aACTjB,OAAQ,+BAEV,CAAEiB,QAAS,aAAcjB,OAAQ,mBAIvC+uB,QAAS,SACJ,IAAQ,CACX7uB,KAAM,UACNje,MAAO,oBACPkD,GAAI,CACFo2B,aAAc,CACZta,QAAS,aACTjB,OAAQ,kCAIdgvB,aAAc,CACZ9uB,KAAM,SACN/a,GAAI,CACFw2B,QAAS,CACP1a,QAAS,eACTjB,OAAQ,aAIdivB,YAAa,CACX/uB,KAAM,cACN/a,GAAI,CACFw2B,QAAS,CACP3b,OAAQ,oBAIdkvB,aAAc,CACZhvB,KAAM,eACNP,QAAS,OACTC,OAAQ,CACN2B,KAAM,CAAC,EACPgb,WAAY,CACVrc,KAAM,aACNje,MAAO,oBACP0f,OAAQ,CACNC,IAAK,OAEPzc,GAAI,CACFo2B,aAAc,CACZta,QAAS,aACTjB,OAAQ,+BAEVwb,UAAW,CAETxb,OAAQ,kCAKhB7a,GAAI,CACFw2B,QAAS,CACP3b,OAAQ,0CAEV2vB,YAAa,CACX1uB,QAAS,WACTjB,OAAQ,WAEVmvB,eAAgB,CACdluB,QAAS,cACTjB,OAAQ,eAMlB,CACEiB,QAAS,CACPmuB,mBAAmB,QAAO,CAExBzS,YAAa,SAAC1Z,GAAa,WAAI/Q,IAAJ,IAE7Bm9B,YAAY,SAAO,SAACpsB,EAAU1d,GAS5B,MAAO,CACLvF,YAFEuF,EAAK,YAGPoI,cAHEpI,EAAK,cAIPgI,kBAJEhI,EAAK,kBAKP8H,cALE9H,EAAK,cAMP+H,cANE/H,EAAK,cAOPiI,oBAPEjI,EAAK,oBASX,IACA+pC,kBAAkB,QAAO,CACvBR,cAAe,SAACv9C,GAAY,OAAAA,EAAQu9C,cAAgB,CAAxB,IAE9BS,cAAc,QAAO,CAEnBT,cAAe,SAAC7rB,GAAa,YAE/B2sB,UAAU,QAAO,CACf7vC,cAAe,SAACkjB,EAAU1d,GAAU,OAAAA,EAAM1E,KAAN,IAEtC2uC,aAAa,QAAO,CAClBpwC,SAAU,SAACya,EAAGtU,GAAU,OAAAA,EAAMnG,QAAN,KAG5BqkB,OAAQ,CACNgsB,iBAAkB,SAACl+C,GAAY,OAAAA,EAAQu9C,cA7MzB,CA6MiB,EAC/B9B,cAAe,SAACnzB,EAAGtU,GACjB,MAAmB,iBAAfA,EAAM1J,OAENuQ,OAAO0yB,KAAKv5B,EAAM8H,eAAejU,OAAS,GAC1CgT,OAAO0yB,KAAKv5B,EAAM+H,eAAelU,OAAS,GAC1CgT,OAAO0yB,KAAKv5B,EAAMgI,mBAAmBnU,OAAS,GAC9CgT,OAAO0yB,KAAKv5B,EAAMiI,qBAAqBpU,OAAS,EAItD,K,mNC3NA,GAAW,CACfumB,QAAS,UACTC,OAAQ,CACN8B,QAAS,CACPC,OAAQ,CACNC,IAAK,OAEPzc,GAAI,CACFq2B,UAAW,CACTva,QAAS,mBACTjB,OAAQ,aAId2uB,QAAS,CACPC,MAAO,CACL,IAAM,CACJ,CAAE7uB,KAAM,mBAAoBC,OAAQ,WACpC,CAAEA,OAAQ,2BAkBP6vB,IAAoB,OAC/B,CACEvwB,QAAS,CAAC,EACVC,4BAA4B,EAC5BC,OAAQ,CACNjuB,QAAS,CAAC,EACVkuB,OAAQ,CAAC,GAMX1vB,GAAI,OACJwB,QAAS,CACPsL,YAAQ5M,EACRiX,qBAAiBjX,EACjBkX,oBAAgBlX,EAChB+O,0BAAsB/O,EACtB6+C,cAAe,GAEjBnvB,QAAS,iBACTC,OAAQ,CACN0b,eAAgB,SACX,IAAQ,CACXpb,KAAM,iBACN/a,GAAI,CACFo2B,aAAc,CACZ,CACExb,KAAM,gBACNkB,QAAS,aACTjB,OAAQ,sBAEV,CAAEiB,QAAS,aAAcjB,OAAQ,mBAIvC+uB,QAAS,SACJ,IAAQ,CACX7uB,KAAM,UACN/a,GAAI,CACFo2B,aAAc,CACZta,QAAS,aACTjB,OAAQ,yBAIdgvB,aAAc,CACZ9uB,KAAM,SACN/a,GAAI,CACFw2B,QAAS,CACP1a,QAAS,eACTjB,OAAQ,aAIdivB,YAAa,CACX/uB,KAAM,cACN/a,GAAI,CACFw2B,QAAS,CACP3b,OAAQ,oBAIdkvB,aAAc,CACZhvB,KAAM,eACNP,QAAS,OACTC,OAAQ,CACN2B,KAAM,CAAC,EACPgb,WAAY,CACVrc,KAAM,aACNyB,OAAQ,CACNC,IAAK,OAEPzc,GAAI,CACFo2B,aAAc,CACZta,QAAS,aACTjB,OAAQ,sBAEVwb,UAAW,CAETxb,OAAQ,yBAKhB7a,GAAI,CACFw2B,QAAS,CACP3b,OAAQ,qCAMlB,CACEiB,QAAS,CACPouB,YAAY,SAAO,SAACx1B,EAAGtU,GAOrB,MAAO,CACL1I,OAFE0I,EAAK,OAGP2B,gBAHE3B,EAAK,gBAIP4B,eAJE5B,EAAK,eAKPvG,qBALEuG,EAAK,qBAOX,IAEA+pC,kBAAkB,QAAO,CACvBR,cAAe,SAACv9C,GAAY,OAAAA,EAAQu9C,cAAgB,CAAxB,IAG9BS,cAAc,QAAO,CAEnBT,cAAe,SAAC7rB,GAAa,aAGjCQ,OAAQ,CACNgsB,iBAAkB,SAACl+C,GAAY,OAAAA,EAAQu9C,cA9JzB,CA8JiB,EAC/B9B,cAAe,SAACnzB,EAAGtU,GACjB,MAAmB,iBAAfA,EAAM1J,YAEW5L,IAAjBsV,EAAM1I,aACoB5M,IAA1BsV,EAAM2B,sBACmBjX,IAAzBsV,EAAM4B,qBACyBlX,IAA/BsV,EAAMvG,qBAIZ,K,mNCnKO8wC,IAA8B,IAAAvgD,eAGxC,MAQUwgD,GAET,SAAC,G,IAAEtgD,EAAQ,WAAEyP,EAAuB,0BAChC8wC,GAAU,SACd,WACE,OAAAnB,GAAA,WAAuC,CACrCnvB,SAAU,CACRtO,IAAK,SAAC7f,GACJ,OAAO,SAAC0+C,GACN/wC,EAAwB,CACtBE,SAAU7N,EAAQ6N,SAClBD,SAAU2kC,GAAqBvyC,EAAQ6N,UAAUD,WAEhDmP,MAAK,SAAC4hC,GACL,OAAAD,EAAS,IAAEp0C,KAAM,gBAAmBq0C,GAApC,IAEDxiB,OAAM,SAACxrB,GACNsD,QAAQ5J,MAAM,uBAAwBsG,GACtC+tC,EAAS,YACX,GACJ,CACF,IAhBJ,GAmBF,CACE/S,UAAU,IAGd,OACE,SAAC4S,GAA4B1+C,SAAQ,IACnCF,MAAO,CACL8+C,QAAO,IACR,UAEAvgD,IAGP,E,mNCjDa0gD,IAAoB,IAAA5gD,eAG9B,MAKU6gD,GAAiE,SAAC,G,IAC7E3gD,EAAQ,WACRqP,EAAa,gBAEPkxC,GAAU,SACd,WACE,OAAAH,GAAA,WAA6B,CAC3BnwB,SAAU,CACRtO,IAAK,WACH,OAAO,SAAC6+B,GACNnxC,IACGwP,MAAK,SAAC4hC,GACL,OAAAD,EAAS,IAAEp0C,KAAM,gBAAmBq0C,GAApC,IAEDxiB,OAAM,SAACxrB,GACNsD,QAAQ5J,MAAM,uBAAwBsG,GACtC+tC,EAAS,YACX,GACJ,CACF,IAbJ,GAgBF,CACE/S,UAAU,IAGd,OACE,SAACiT,GAAkB/+C,SAAQ,IACzBF,MAAO,CACL8+C,QAAO,IACR,UAEAvgD,IAGP,E,mNC1Ca4gD,IAAuB,IAAA9gD,eAGjC,MASU+gD,GAET,SAAC,G,IAAE7gD,EAAQ,WAAEqQ,EAAgB,mBACzBkwC,GAAU,SACd,WACE,OAAAN,GAAA,WAAgC,CAC9BhwB,SAAU,CACRtO,IAAK,SAAC7f,GACJ,OAAO,SAAC0+C,GACNnwC,EAAiB,CACfC,cAAexO,EAAQwO,cACvBX,SAAU7N,EAAQ6N,SAClBD,SAAU2kC,GAAqBvyC,EAAQ6N,UAAUD,WAEhDmP,MAAK,SAAC4hC,GACL,OAAAD,EAAS,IAAEp0C,KAAM,gBAAmBq0C,GAApC,IAEDxiB,OAAM,SAACxrB,GACNsD,QAAQ5J,MAAM,uBAAwBsG,GACtC+tC,EAAS,YACX,GACJ,CACF,IAjBJ,GAoBF,CACE/S,UAAU,IAGd,OACE,SAACmT,GAAqBj/C,SAAQ,IAC5BF,MAAO,CACL8+C,QAAO,IACR,UAEAvgD,IAGP,E,+NC7CO,SAAS8gD,KACN,IAAAP,GAAY,IAAAx+C,YAAWs+C,IAA4B,QAErD,GAcF,QACFE,GACA,IAAAn/C,cACE,SAACygB,GAAU,OAAC,SACPA,EAAM/f,SAAO,CAChBw7C,iBAAkBz7B,EAAMmT,OAAO,kBAC/B+Y,aAAclsB,EAAMmT,OAAO,cAC3B/oB,UAAW4V,EAAMmT,OAAO,WACxB+rB,SAAUl/B,EAAMmT,OAAO,UACvBuoB,cAAe17B,EAAMmT,OAAO,gBANnB,GAQX,KAxBF5c,EAAoB,uBACpBE,EAAwB,2BACxBD,EAA4B,+BAC5BvI,EAAc,iBACdG,EAAgB,mBAChBE,EAAmB,sBACnBR,EAAQ,WACRu9B,EAAW,cACXoQ,EAAgB,mBAChBrxC,EAAS,YACT8hC,EAAY,eACZgT,EAAQ,WACRxD,EAAa,gBAgBT9B,GAAmB,IAAAr6C,cACvB,SAACuO,GACC,OAAA4wC,EAAQ7S,KAAK,CAAEthC,KAAM,iBAAkBuD,SAAQ,GAA/C,GACF,CAAC4wC,IAKH,MAAO,CACLnoC,qBAAoB,EACpBE,yBAAwB,EACxBD,6BAA4B,EAC5BvI,eAAc,EACdG,iBAAgB,EAChBE,oBAAmB,EACnB+8B,YAAW,EACXoQ,iBAAgB,EAChBrxC,UAAS,EACT8hC,aAAY,EACZgT,SAAQ,EACRxD,cAAa,EACb5tC,SAAQ,EACR8rC,iBAAgB,EAChB9R,WAjBgB,IAAAvoC,cAAY,WAAM,OAAAm/C,EAAQ7S,KAAK,UAAb,GAAyB,CAAC6S,IAmBhE,C,6mBCzDO,SAASS,KACN,IAAAT,GAAY,IAAAx+C,YAAW6+C,IAAqB,QAE9C,GAeF,QACFL,GACA,IAAAn/C,cACE,SAACygB,GAAU,OAAC,SACPA,EAAM/f,SAAO,CAChBw7C,iBAAkBz7B,EAAMmT,OAAO,kBAC/B+Y,aAAclsB,EAAMmT,OAAO,cAC3B/oB,UAAW4V,EAAMmT,OAAO,WACxB+rB,SAAUl/B,EAAMmT,OAAO,UACvBuoB,cAAe17B,EAAMmT,OAAO,gBANnB,GAQX,KAzBF1kB,EAAa,gBACbX,EAAQ,WACRY,EAAW,cACX2N,EAAa,gBACbN,EAAa,gBACbC,EAAa,gBACbC,EAAiB,oBACjBC,EAAmB,sBACnBu/B,EAAgB,mBAChBrxC,EAAS,YACT8hC,EAAY,eACZgT,EAAQ,WACRxD,EAAa,gBACbrQ,EAAW,cAgBP+T,GAAgB,IAAA7/C,cACpB,SAACgQ,GAA8B,OAAAmvC,EAAQ7S,KAAK,CAAEthC,KAAM,cAAegF,MAAK,GAAzC,GAC/B,CAACmvC,IAGG9E,GAAmB,IAAAr6C,cACvB,SAACuO,GACC,OAAA4wC,EAAQ7S,KAAK,CAAEthC,KAAM,iBAAkBuD,SAAQ,GAA/C,GACF,CAAC4wC,IAGG5W,GAAY,IAAAvoC,cAAY,WAAM,OAAAm/C,EAAQ7S,KAAK,UAAb,GAAyB,CAAC6S,IAU9D,MAAO,CACLjD,iBAAgB,EAChBrxC,UAAS,EACT8hC,aAAY,EACZgT,SAAQ,EACRxD,cAAa,EACbrQ,YAAW,EACX9/B,QAfmB,IAAA1L,UAAQ,WAC3B,IAAM0L,EAASsQ,MAAMtI,KACnB,IAAIuI,IAAG,SAAapN,GAAa,GAAG2N,GAAa,KAGnD,OADA9Q,EAAOpJ,MAAK,SAACuI,EAAG+mB,GAAM,OAAA/mB,EAAE20C,cAAc5tB,EAAhB,IACflmB,CACT,GAAG,CAACmD,EAAa2N,IAUf5N,cAAa,EACbX,SAAQ,EACRiO,cAAa,EACbC,cAAa,EACbC,kBAAiB,EACjBC,oBAAmB,EACnBkjC,cAAa,EACbxF,iBAAgB,EAChB9R,UAAS,EAEb,C,uNCxDawX,GAA+C,SAAC,G,IAC3D1xC,EAAuB,0BACvBY,EAAgB,mBAChBhB,EAAa,gBACblB,EAAa,gBACbY,EAAY,eACZF,EAAyB,4BAEzB,OACE,SAACgyC,GAAqB,IAACxwC,iBAAkBA,GAAgB,WACvD,SAACiwC,GAA4B,IAC3B7wC,wBAAyBA,GAAuB,WAEhD,SAACkxC,GAAkB,IAACtxC,cAAeA,GAAa,WAC9C,SAAC+xC,GAAgB,CACfjzC,cAAeA,EACfswC,aAAc1vC,EACdyvC,SAAU3vC,YAMtB,EAOMuyC,GAAiE,SAAC,G,IACtEjzC,EAAa,gBACbswC,EAAY,eACZD,EAAQ,WAEAhuC,GAAM,IAAA2D,kBAAgB,EACxBktC,EAAuBP,KACvBQ,EAAgBN,KAChBO,ECvDD,WACG,IAAAhB,GAAY,IAAAx+C,YAAW2+C,IAAkB,QAE3C,GAUF,QACFH,GACA,IAAAn/C,cACE,SAACygB,GAAU,OAAC,SACPA,EAAM/f,SAAO,CAChBw7C,iBAAkBz7B,EAAMmT,OAAO,kBAC/B+Y,aAAclsB,EAAMmT,OAAO,cAC3B/oB,UAAW4V,EAAMmT,OAAO,WACxB+rB,SAAUl/B,EAAMmT,OAAO,UACvBuoB,cAAe17B,EAAMmT,OAAO,gBANnB,GAQX,KApBF5nB,EAAM,SACNqK,EAAe,kBACflI,EAAoB,uBACpBmI,EAAc,iBAuBhB,MAAO,CACL4lC,iBAvBgB,mBAwBhBrxC,UAvBS,YAwBT8hC,aAvBY,eAwBZgT,SAvBQ,WAwBRxD,cAvBa,gBAwBbnwC,OAAM,EACNqK,gBAAe,EACfC,eAAc,EACdnI,qBAAoB,EACpBo6B,WAZgB,IAAAvoC,cAAY,WAAM,OAAAm/C,EAAQ7S,KAAK,UAAb,GAAyB,CAAC6S,IAchE,CDaqBiB,GAEnB,QAAQ,GACN,KAAKH,EAAqB/D,kBACxBgE,EAAchE,kBACdiE,EAAWjE,iBACX,OAAO,SAAChK,GAAwB,IAClC,KAAK+N,EAAqBN,UACxBO,EAAcP,UACdO,EAAcP,SAChB,KAAKM,EAAqB9D,eACxB+D,EAAc/D,eACdgE,EAAWhE,cACX,OAAO,SAAChK,GAA4B,IACtC,QACE,OACE,SAACE,GAAa,CACZC,iBACE,SAAC6K,GAAe,CAACE,aAAcA,EAAcD,SAAUA,IAEzD7K,WACE,SAACyK,GAAO,CACNvmC,OAAQ0pC,EAAWn0C,OACnBnB,UAAWs1C,EAAWjE,kBAAoBiE,EAAWt1C,UACrD9H,KAAMqM,EAAE,kCACRmd,QAASnd,EAAE,2CAGfojC,oBACE,SAACgL,GAAa,CACZ/mC,OAAQ0pC,EAAW9pC,gBACnBxL,UAAWs1C,EAAWjE,kBAAoBiE,EAAWt1C,UACrDsD,qBAAsBgyC,EAAWhyC,uBAGrCskC,kBACE,SAACuK,GAAO,CACNvmC,OAAQ0pC,EAAW7pC,eACnBzL,UAAWs1C,EAAWjE,kBAAoBiE,EAAWt1C,UACrD9H,KAAMqM,EAAE,yCACRmd,QAASnd,EAAE,kDAGfsjC,kBAAkB,SAAC2N,GAA6B,IAChD1N,cACE,SAAC2N,GAAsB,CAACvzC,cAAeA,MAKnD,EAEMszC,GAAuD,WACrD,MAgBFX,KAfFxD,EAAgB,mBAChBrxC,EAAS,YACT8hC,EAAY,eACZgT,EAAQ,WACRxD,EAAa,gBACb5tC,EAAQ,WACRu9B,EAAW,cACX90B,EAAoB,uBACpBE,EAAwB,2BACxBD,EAA4B,+BAC5BvI,EAAc,iBACdG,EAAgB,mBAChBE,EAAmB,sBACnBsrC,EAAgB,mBAChB9R,EAAS,YAGX,OACE,SAACqU,GAAwB,CACvBC,gBAAiB7lC,EACjBE,yBAA0BA,EAC1BD,6BAA8BA,EAC9B1I,SAAUA,EACV0tC,mBAAoB0D,EACpBzD,iBAAkBA,EAClBrxC,UAAWA,EACX8hC,aAAcA,EACdwP,cAAeA,EACfrQ,YAAaA,EACbvD,UAAWA,EACX8R,iBAAkBA,EAClB3rC,eAAgBA,GAAkB,EAClCG,iBAAkBA,GAAoB,EACtCE,oBAAqBA,GAAuB,GAGlD,EAKMuxC,GAEF,SAAC,G,IAAEvzC,EAAa,gBACZ,EAiBF6yC,KAhBF1D,EAAgB,mBAChBrxC,EAAS,YACT8hC,EAAY,eACZgT,EAAQ,WACRxD,EAAa,gBACbrQ,EAAW,cACX58B,EAAa,gBACbX,EAAQ,WACRvC,EAAM,SACNwQ,EAAa,gBACbC,EAAa,gBACbC,EAAiB,oBACjBC,EAAmB,sBACnB09B,EAAgB,mBAChBwF,EAAa,gBACbtX,EAAS,YAGX,OACE,SAACyT,GAAiB,CAChBC,mBAAoB0D,EACpB3zC,OAAQA,EACR8sC,mBAAoBt8B,EACpBu8B,mBAAoBt8B,EACpB5L,WAAY6L,EACZC,oBAAqBA,EACrBpO,SAAUA,EACV2tC,iBAAkBA,EAClBrxC,UAAWA,EACX8hC,aAAcA,EACdwP,cAAeA,EACfrQ,YAAaA,EACb58B,cAAeA,EACfq5B,UAAWA,EACX6T,gBAAiByD,EACjBxF,iBAAkBA,EAClBttC,cAAeA,GAGrB,E,mNEnLawzC,GAA6C,SAAC,G,IACzDnzC,EAAwB,2BACxBC,EAAuB,0BAEf+B,GAAM,IAAA2D,gBAAe,SAAQ,EAE/B,GAA0C,IAAAxT,UAC9C8N,EAA0B,KAAO,OAD5BmzC,EAAgB,KAAEC,EAAmB,KAGtC,GAAgC,IAAAlhD,WAAkB,GAAjD+J,EAAW,KAAEo3C,EAAc,KAE5B7gD,EAAU,WACd6gD,GAAe,EACjB,EAUMC,EAAyB,SAACC,GAC9BH,EAAoBG,EAAc,YAAc,cAEhDxzC,EAAyBwzC,GACtBnjC,MAAK,SAACojC,GACLJ,EAAoBI,EAAmB,KAAO,MAShD,IACChkB,OAAM,WACL4jB,EAAqBG,EAAqB,MAAP,KAQrC,GACJ,EAOA,OACE,SAAC,EAAAv0C,YAAW,IAACuf,UAAU,EAAMC,mBAAmB,EAAI,aAAc,QAAM,WACtE,UAAC,EAAA2V,MAAK,IAACvB,WAAS,eACd,SAAC,EAAAwB,UAAS,WACR,SAAC,EAAA+N,KAAI,WACH,SAAC,EAAAI,SAAQ,UAAExgC,EAAE,iDAGjB,SAAC,EAAAqyB,UAAS,WACR,SAAC,EAAA+N,KAAI,IAACpY,UAAW,uBAAqB,WACpC,SAAC,EAAAwY,SAAQ,WACP,UAAC,EAAAtP,KAAI,IAACwgB,SAAU,CAAEpjC,QAAS,WAAU,YACnC,SAAC,EAAA6iB,SAAQ,IAACwgB,KAAM,CAAErjC,QAAS,SAAQ,WACjC,UAAC,EAAA4iB,KAAI,YACH,SAAC,EAAAC,SAAQ,IACPrS,UAAW,OACX8yB,OAAQ,CAAEtjC,QAAS,aAAY,WAE/B,8BACGtO,EAAE,+CACF,WAGL,SAAC,EAAAmxB,SAAQ,UACN,WACC,OAAQigB,GACN,IAAK,KACH,OAAOpxC,EACL,mDAEJ,IAAK,aACH,OACE,iCACE,SAAC,EAAAgxB,QAAO,CACN1e,KAAK,KAAI,iBACOtS,EACd,4DACD,aACWA,EACV,iDAED,IACFA,EACC,+DAIR,IAAK,MACH,OAAOA,EACL,oDAEJ,IAAK,YACH,OACE,iCACE,SAAC,EAAAgxB,QAAO,CACN1e,KAAK,KAAI,iBAEP,0DAAyD,aAE/CtS,EACV,iDAED,IACFA,EACC,8DAIR,QACE,OAAO,KAEZ,CA/CA,YAmDP,SAAC,EAAAmxB,SAAQ,WACP,SAAC,EAAAzsB,OAAM,CACL5U,GAAG,sCAAqC,aAC5BkQ,EACV,+CAEF6xC,UACuB,OAArBT,GACqB,eAArBA,EAEF7nC,WACuB,eAArB6nC,GACqB,cAArBA,EAEFviB,SAjIK,SAACijB,GACG,OAArBV,EACFE,GAAe,GAEfC,EAAuBO,EAE3B,OA8Hc,SAAC,EAAAC,MAAK,IACJluC,QAAS,EAAAmuC,aAAA,MACT5b,OAAQl8B,EACR4J,MAAO9D,EAAE,0BACTiyC,iBAAkB,UAClBjxB,QAAS,EACP,SAAC,EAAA+K,OAAM,IAELloB,QAAQ,UACR8Z,QA1GF,WAChB2zB,GAAe,GACfC,GAAuB,EACzB,GAuGsC,UAEjBvxC,EAAE,oCAJE,YAMP,SAAC,EAAA+rB,OAAM,IAAgBloB,QAAQ,OAAO8Z,QAASltB,GAAO,UACnDuP,EAAE,mBADQ,WAIfvP,QAASA,GAAO,UAEfuP,EAAE,oDASrB,ECnMakyC,GAA8C,CACzD,CAAExgD,IAAK,OAAQT,MAAO,OAAQkhD,eAAe,GAC7C,CAAEzgD,IAAK,QAAST,MAAO,SACvB,CAAES,IAAK,UAAWT,MAAO,WACzB,CAAES,IAAK,UAAWT,MAAO,WACzB,CAAES,IAAK,eAAgBT,MAAO,iBAGnBmhD,GAA8C,CACzD,CAAE1gD,IAAK,QAAST,MAAO,QAASkhD,eAAe,GAC/C,CAAEzgD,IAAK,YAAaT,MAAO,aAC3B,CAAES,IAAK,YAAaT,MAAO,aAC3B,CAAES,IAAK,YAAaT,MAAO,aAC3B,CAAES,IAAK,YAAaT,MAAO,c,+NCNhB,GAET,SAAC,G,IACHohD,EAAO,UACPC,EAAU,aACVC,EAAY,eACZC,EAAU,aACVC,EAAW,cACXC,EAAa,gBAGTC,EAAc,IAYlB,OAToB,IALP,sBAMI3iD,IAAfwiD,GACA5lC,SAAS4lC,GAAc,EAEvBG,EAAc,YACLH,IACTG,EAAcH,IAId,SAAC,EAAAI,UAAS,IACRP,QAASA,EACTjrB,MAAOkrB,EACPtqB,UAAU,gCACV6qB,WACE,SAAC,EAAAzmB,QAAO,IACN/O,eAAe,yBAAMq1B,IACrBrmB,aAAa,yBAAMomB,KAAkB,WAErC,mCACcF,EACZ50B,QAAS,SAACrY,GAAU,OAAAA,EAAMwtC,gBAAN,EACpB9qB,UAAU,+BAA6B,WAEvC,SAAC,EAAAuE,SAAQ,CAACwmB,iBAAe,WAEnB,WAGZ,SAAC,EAAAhc,UAAS,CACRic,gBAAiB,QACjBp3C,KAAK,OACL9L,GAAIuiD,EACJ1+C,KAAM0+C,EACNphD,MAAO0hD,MAIf,E,mNChDMM,GAAkC,SAAC,G,IACvCC,EAAsB,yBACtBC,EAAqB,wBACrBC,EAAwB,2BACxBC,EAAkB,qBAEVrzC,GAAM,IAAA2D,gBAAe,CAAC,eAAgB,WAAU,EAExD,OACE,UAAC,EAAA2vC,YAAW,IAACxvC,MAAO9D,EAAE,WAAYlQ,GAAG,UAAUyjD,aAAc,MAAI,YAC/D,SAAC,EAAA30B,YAAW,WACV,SAAC,EAAAC,KAAI,IAACC,UAAW,EAAA4M,aAAA,EAAgB1D,UAAU,gBAAc,UACtDhoB,EAAE,8BAIP,SAAC,GAAoB,CACnBqyC,QAAQ,mBACRE,aAAcvyC,EAAE,oBAChBsyC,WAAYtyC,EAAE,oBACdwyC,WAAYxyC,EAAE,oBAAqB,CACjCR,MAAO2zC,EACPK,UAAU,SAAQtc,OAAOic,GAAwB,SAASjhD,GACxD,eAGJugD,YAAazyC,EAAE,oBACf0yC,cAAe1yC,EAAE,mCAGnB,SAAC,GAAoB,CACnBqyC,QAAQ,gBACRE,aAAcvyC,EAAE,iBAChBsyC,WAAYtyC,EAAE,iBACdwyC,WAAYxyC,EAAE,uBAAwB,CACpCyzC,aAAcJ,EACdrR,MAAM,SAAQ9K,OAAOmc,GAAqB,gBAAgBnhD,GAAG,UAE/DugD,YAAazyC,EAAE,6BACf0yC,cAAe1yC,EAAE,oBAGnB,SAAC,GAAoB,CACnBqyC,QAAQ,sBACRE,aAAcvyC,EAAE,uBAChBsyC,WAAYtyC,EAAE,uBACdwyC,WAAYxyC,EAAE,oBAAqB,CAAE/O,MAAOmiD,IAC5CX,YAAazyC,EAAE,mCACf0yC,cAAe1yC,EAAE,0BAGnB,SAAC,GAAoB,CACnBqyC,QAAQ,oBACRE,aAAcvyC,EAAE,qBAChBsyC,WAAYtyC,EAAE,qBACdwyC,WAAYxyC,EAAE,yBAA0B,CACtCyzC,aAAcP,EACd3d,QAAQ,SAAQ2B,OAAOgc,GAAyB,gBAAgBhhD,GAC9D,aAGJugD,YAAazyC,EAAE,iCACf0yC,cAAe1yC,EAAE,wBAGnB,SAAC,GAAoB,CACnBqyC,QAAQ,gCACRE,aAAcvyC,EAAE,iCAChBsyC,WAAYtyC,EAAE,iCACdwyC,WAAYxyC,EAAE,mBACdyyC,YAAazyC,EAAE,6CACf0yC,cAAe1yC,EAAE,sCAIzB,E,+NCvEM0zC,GAAgE,SAAC,G,IACrEvnB,EAAQ,WACRiK,EAAM,SACNud,EAAa,gBACbC,EAAS,YAmCT,OAlCY,gBAmCV,mBAAK5rB,UAAU,+BAA6B,WAC1C,UAAC,EAAAkJ,KAAI,YACH,SAAC,EAAAC,SAAQ,WACP,SAAC,EAAA0iB,YAAW,CACVC,QAAS,WAAM,EACfC,OAAQ,WAAM,EACd9iD,MACEimC,OACE0c,EAAU,gBAAgB3iD,OAG9B49B,SAAU,SAACvpB,GAAU,EACrBi0B,IAAK,OAGT,SAAC,EAAApI,SAAQ,WACP,SAAC,EAAAoG,OAAM,IACL1zB,QAAS,EAAAq2B,cAAA,OAAoB,aAClB,eACX/N,SAAUA,EACV0D,SArDgC,SAACvqB,EAAOrU,GAQhDk7B,GAAS,EAAO7mB,EAClB,EA6CUkyB,WAAY,eACZpB,OAAQA,GAAM,UAEbud,aAAa,EAAbA,EAAe73C,KAAI,SAACgN,GAAM,OACzB,SAAC,EAAA4uB,aAAY,CAEXzmC,MAAO6X,EAAE7X,MACTkhD,cAAerpC,EAAEqpC,eAFZrpC,EAAEpX,IAFgB,cAYvC,E,mNC5EMsiD,GAA0D,SAAC,G,IAC/D7nB,EAAQ,WACRiK,EAAM,SACNud,EAAa,gBACbC,EAAS,YAmCT,OAlCY,gBAmCV,mBAAK5rB,UAAU,+BAA6B,WAC1C,UAAC,EAAAkJ,KAAI,YACH,SAAC,EAAAC,SAAQ,WACP,SAAC,EAAA0iB,YAAW,CACVC,QAAS,WAAM,EACfC,OAAQ,WAAM,EACd9iD,MACEimC,OACE0c,EAAU,mBAAmB3iD,OAGjC49B,SAAU,SAACvpB,GAAU,EACrBi0B,IAAK,OAGT,SAAC,EAAApI,SAAQ,WACP,SAAC,EAAAoG,OAAM,IACL1zB,QAAS,EAAAq2B,cAAA,OAAoB,aAClB,eACX/N,SAAUA,EACV0D,SArDgC,SAACvqB,EAAOrU,GAQhDk7B,GAAS,EAAO7mB,EAClB,EA6CUkyB,WAAY,QACZpB,OAAQA,GAAM,UAEbud,aAAa,EAAbA,EAAe73C,KAAI,SAACgN,GAAM,OACzB,SAAC,EAAA4uB,aAAY,CAEXzmC,MAAO6X,EAAE7X,MACTkhD,cAAerpC,EAAEqpC,eAFZrpC,EAAEpX,IAFgB,cAYvC,E,mNCnDMuiD,GAA+D,SAAC,G,IACpEC,EAAQ,WACRN,EAAS,YACTO,EAAY,eACZC,EAAW,cACXC,EAAc,iBACdC,EAAiB,oBACjBC,EAAc,iBACdC,EAAuB,0BAEfx0C,GAAM,IAAA2D,gBAAe,CAAC,iBAAgB,EACtC8wC,ECvDsB,WAGtB,IAAAz0C,GAAM,IAAA2D,gBAAe,CAAC,iBAAgB,EAE9C,MAAO,CACL8wC,cAAc,IAAA7jD,cACZ,SAAC+C,GACC,IAAM+gD,EAAiB,IAAIC,OAAO,qBAClC,OAAIhhD,EAAKwF,SAAWu7C,EAAez2B,KAAKtqB,GAC/BqM,EAAE,0BACArM,EAAKwF,OAAS,IAChB6G,EAAE,4BACS,MAATrM,GAAyB,OAATA,EAClBqM,EAAE,8BADJ,CAIT,GACA,CAACA,IAGP,CDkC2B,GAAkB,aACrC,GACJ,IAAA7P,UAA6B,SADxBykD,EAAiB,KAAEC,EAAoB,KAExC,GACJ,IAAA1kD,UAA6B,gBADxB2kD,EAAiB,KAAEC,EAAoB,KAExC,GACJ,IAAA5kD,YADK6kD,EAAyB,KAAEC,EAA4B,KAExD,GACJ,IAAA9kD,YADK+kD,EAAyB,KAAEC,EAA4B,KAGxDC,GAAkB,IAAAxkD,cACtB,SAACK,GACC,IAAMitB,EAAeu2B,EAAaxjD,GAC9BitB,GACFm2B,EAAen2B,GACfo2B,EAAkB,EAAAe,iBAAA,QAElBf,EAAkB,EAAAe,iBAAA,QAEtB,GACA,CAAChB,EAAgBC,EAAmBG,IAGhCa,EAA6B,SAACrkD,GAClC,OAAQA,GACN,KAAK,UACH4jD,EAAqB,WACrB,MACF,KAAK,aACHA,EAAqB,cAE3B,EAUMU,EAA6B,SAACtkD,GAClC,OAAQA,GACN,KAAK,UACH8jD,EAAqB,WACrB,MACF,KAAK,aACHA,EAAqB,cAE3B,EA2BMS,GACJ,SAAC9B,GAAsB,CACrB+B,SAAS,uCACT9hD,KAAK,eACLigD,UAAWA,EACXO,aAAcA,EACdhoB,SAjD0B,SAACiK,GAC7B6e,EAA6B7e,EAC/B,EAgDIA,OAAQ4e,EACRrB,cAAezB,KAIbwD,GACJ,SAAC1B,GAAmB,CAClByB,SAAS,4CACT9hD,KAAK,kBACLigD,UAAWA,EACXO,aAAcA,EACdhoB,SAzD0B,SAACiK,GAC7B+e,EAA6B/e,EAC/B,EAwDIA,OAAQ8e,EACRvB,cAAevB,KAInB,OACE,UAAC,EAAAkB,YAAW,IACVxvC,MAAO9D,EAAE,sBACTlQ,GAAG,qBACHyjD,aAAc,MAAI,YAElB,SAAC,EAAA30B,YAAW,WACV,SAAC,EAAAC,KAAI,IAACC,UAAW,EAAA4M,aAAA,EAAgB1D,UAAU,gBAAc,UACtDhoB,EAAE,yBAGNk0C,GACC,SAAC,KAAoB,IACnByB,UAAW31C,EAAE,cACbqyC,QAAQ,oBACRC,WAAYtyC,EAAE,cACd41C,UAAW51C,EAAE,0BACb61C,gBAAgB,iCAChBC,kBAAmB1B,EACnB2B,UAAWxB,EACXyB,YAAY,EACZrI,WAAY3tC,EAAE,2BAAyB,WAEvC,SAAC,EAAA+2B,UAAS,CACRif,YAAU,EACVp6C,KAAK,OACL9L,GAAG,oBACH6D,KAAK,OACL1C,MAAO2iD,EAAUjgD,KACjBk7B,SA9EoB,SAAC59B,GAC7BmkD,EAAgBnkD,GAChBkjD,EAAa,SAAKP,GAAS,CAAEjgD,KAAM1C,IACrC,EA4EUm2B,MAAOpnB,EAAE,cACTg3B,YAAah3B,EAAE,cACf+1C,UAAWxB,QAIf,SAAC,GAAoB,CACnBlC,QAAQ,aACRE,aAAa,oBACbD,WAAW,OACXE,WAAYoB,EAAUjgD,KACtB8+C,YAAazyC,EAAE,0BACf0yC,cAAe1yC,EAAE,iBAIrB,SAAC,KAAoB,IACnBqyC,QAAQ,0BACRC,WAAW,aACXqD,UAAW31C,EAAE,cACb41C,UAAW51C,EAAE,0BACb61C,gBAAgB,iCAChBlI,WACEiG,EAAUnyC,WAAWtI,QAAUq7C,EAC3Bx0C,EAAE,sBACFA,EAAE,yBAER+1C,UACEnC,EAAUnyC,WAAWtI,QAAUq7C,EAC3B,UACA,WAAS,WAGf,SAAC,EAAAX,YAAW,CACV/jD,GAAG,0BACHmmD,UAAU,iBACVpnB,SA9GiD,SAACvpB,GAK1D,EAyGoC,cACftF,EAAE,cACf+zC,OA1Ga,WAKrB,EAsGQD,QApGc,WAKtB,EAgGQ7iD,MAAO2iD,EAAUnyC,WAAWtI,OAC5B+8C,aAAc,CAAEviD,KAAM,kBACtBwiD,cAAe,CAAExiD,KAAM,kBACvB4lC,IAAK,QAIT,SAAC,GAAoB,CACnB8Y,QAAQ,WACRE,aAAcvyC,EAAE,YAChBsyC,WAAYtyC,EAAE,YACdwyC,WAAY,IACZC,YAAazyC,EAAE,wBACf0yC,cAAe1yC,EAAE,eAEnB,SAAC,GAAoB,CACnBqyC,QAAQ,sBACRE,aAAa,mCACbD,WAAW,2BACXE,WAAYoB,EAAU,uBAAuB1qC,WAC7CupC,YAAazyC,EAAE,mCACf0yC,cAAe1yC,EAAE,0BAEnB,SAAC,KAAoB,IACnBqyC,QAAQ,YACRC,WAAW,iBACXqD,UAAW31C,EAAE,kBACb41C,UAAW51C,EAAE,8BACb61C,gBAAgB,sCAAoC,WAEpD,UAAC,EAAAzjB,MAAK,IAACvB,WAAS,eACd,SAAC,EAAAulB,MAAK,CACJvE,UACEiD,IAAsB,QACtBA,IAAsB,SACtBA,IAAsB,UAExBnhD,KAAK,wBACLk7B,SAAU,WACR,OAAA0mB,EAA2B,UAA3B,EAEFnuB,MAAOouB,EACPxtB,UAAU,sCAAqC,aACpC,kBACXl4B,GAAG,wBACHmB,MAAO,aAET,SAAC,EAAAmlD,MAAK,CACJvE,UAAWiD,IAAsB,aACjCnhD,KAAK,2BACLk7B,SAAU,WACR,OAAA0mB,EAA2B,aAA3B,EAEFnuB,MAAM,iBAAgB,aACX,YACXt3B,GAAG,2BACHmB,MAAO,uBAIb,SAAC,KAAoB,IACnBohD,QAAQ,iBACRC,WAAW,iBACXqD,UAAW31C,EAAE,kBACb41C,UAAW51C,EAAE,8BACb61C,gBAAgB,sCAAoC,WAEpD,UAAC,EAAAzjB,MAAK,IAACvB,WAAS,eACd,SAAC,EAAAulB,MAAK,CACJvE,UAAW+C,IAAsB,UACjCjhD,KAAK,wBACLk7B,SAAU,WACR,OAAAymB,EAA2B,UAA3B,EAEFluB,MAAOsuB,EACP1tB,UAAU,sCAAqC,aACpC,cACXl4B,GAAG,wBACHmB,MAAO,aAET,SAAC,EAAAmlD,MAAK,CACJvE,UAAW+C,IAAsB,aACjCjhD,KAAK,2BACLk7B,SAAU,WACR,OAAAymB,EAA2B,aAA3B,EAEFluB,MAAM,iBAAgB,aACX,YACXt3B,GAAG,2BACHmB,MAAO,yBAMnB,E,mNEpTMolD,GAA8B,SAAC,G,IACnCC,EAA4B,+BAC5BC,EAAwB,2BAEhBv2C,GAAM,IAAA2D,gBAAe,CAAC,iBAAgB,EAE9C,OACE,UAAC,EAAA2vC,YAAW,IAACxvC,MAAO9D,EAAE,SAAUlQ,GAAG,QAAQyjD,aAAc,MAAI,YAC3D,SAAC,EAAA30B,YAAW,WACV,SAAC,EAAAC,KAAI,IAACC,UAAW,EAAA4M,aAAA,EAAgB1D,UAAU,gBAAc,UACtDhoB,EAAE,4BAIP,SAAC,GAAoB,CACnBqyC,QAAQ,0BACRE,aAAcvyC,EAAE,2BAChBsyC,WAAYtyC,EAAE,2BACdwyC,WAAYxyC,EAAE,gBAAiB,CAC7B/O,MAAOqlD,IAET7D,YAAazyC,EAAE,uCACf0yC,cAAe1yC,EAAE,8BAGnB,SAAC,GAAoB,CACnBqyC,QAAQ,sBACRE,aAAcvyC,EAAE,uBAChBsyC,WAAYtyC,EAAE,uBACdwyC,WAAYxyC,EAAE,oBAAqB,CAAE/O,MAAOslD,IAC5C9D,YAAazyC,EAAE,mCACf0yC,cAAe1yC,EAAE,4BAIzB,E,+NCzBMw2C,GAA0B,SAAC,G,IAC/B5C,EAAS,YAET6C,GADY,eACc,8BAC1BC,EAAuB,0BACvBC,EAA+B,kCAEvB32C,GAAM,IAAA2D,gBAAe,CAAC,eAAgB,WAAU,EAElDizC,EAA0C,CAC9C,CACEllD,IAAK,UACLT,MAAO,UACPm2B,MAAOpnB,EAAE,WACTuJ,YAAY,GAEd,CACE7X,IAAK,SACLT,MAAO,SACPm2B,MAAOpnB,EAAE,iBACTuJ,YAAY,GAEd,CACE7X,IAAK,iBACLT,MAAO,iBACPm2B,MAAO,UAAGpnB,EAAE,WAAU,YAAIA,EAAE,kBAC5BuJ,YAAY,IAQhB,OACE,UAAC,EAAA+pC,YAAW,IAACxvC,MAAO9D,EAAE,OAAQlQ,GAAG,MAAMyjD,aAAc,MAAI,YACvD,UAAC,EAAA30B,YAAW,YACV,SAAC,EAAAC,KAAI,IAACC,UAAW,EAAA4M,aAAA,GAAc,UAAG1rB,EAAE,wBACpC,SAAC,EAAA6e,KAAI,IAACC,UAAW,EAAA4M,aAAA,OAAkB,UAAG1rB,EAAE,gCAG1C,SAAC,KAAoB,IACnBqyC,QAAQ,iBACRC,WAAYtyC,EAAE,kBACd21C,UAAW31C,EAAE,kBACb41C,UAAW51C,EAAE,8BACb61C,gBAAiB71C,EAAE,mBAAiB,WAEpC,SAAC62C,GAAA,EAAkB,CACjB/mD,GAAG,mCACH2lD,SAAS,yCACT54B,UAAW7c,EAAE,iBACb82C,eAtBe,SAAC7lD,GAExB,EAqBQkW,MAAOyvC,EACPjjD,KAAK,iBACL1C,MAAO2iD,EAAU,kBACjBmD,wBAAwB,QAI5B,SAAC,GAAoB,CACnB1E,QAAQ,wBACRE,aAAcvyC,EAAE,yBAChBsyC,WAAYtyC,EAAE,yBACdwyC,WAAYxyC,EAAE,2BAA4B,CACxC/O,MAAOwlD,EACPzU,MAAM,SAAQ9K,OAAOuf,GAA6B,gBAAgBvkD,GAChE,UAGJugD,YAAazyC,EAAE,qCACf0yC,cAAe1yC,EAAE,4BAGnB,SAAC,GAAoB,CACnBqyC,QAAQ,sBACRE,aAAcvyC,EAAE,uBAChBsyC,WAAYtyC,EAAE,uBACdwyC,WAAYwE,OAAON,GACnBjE,YAAazyC,EAAE,mCACf0yC,cAAe1yC,EAAE,0BAGnB,SAAC,GAAoB,CACnBqyC,QAAQ,sCACRE,aAAcvyC,EAAE,2BAChBsyC,WAAYtyC,EAAE,2BACdwyC,WAAYxyC,EAAE,oBAAqB,CACjC/O,MAAO0lD,IAETlE,YAAazyC,EAAE,uCACf0yC,cAAe1yC,EAAE,gCAIzB,E,mNCxGMi3C,GAAkC,SAAC,G,IACvCC,EAA0B,6BAC1BC,EAA2B,8BAC3BC,EAA8B,iCAEtBp3C,GAAM,IAAA2D,gBAAe,CAAC,iBAAgB,EAE9C,OACE,UAAC,EAAA2vC,YAAW,IAACxvC,MAAO9D,EAAE,YAAalQ,GAAG,WAAWyjD,aAAc,MAAI,YACjE,SAAC,EAAA30B,YAAW,WACV,SAAC,EAAAC,KAAI,IAACC,UAAW,EAAA4M,aAAA,EAAgB1D,UAAU,gBAAc,UACtDhoB,EAAE,8BAIP,SAAC,GAAoB,CACnBqyC,QAAQ,mBACRE,aAAcvyC,EAAE,oBAChBsyC,WAAYtyC,EAAE,oBACdwyC,WAAYxyC,EAAE,aAAc,CAAE/O,MAAOimD,IACrCzE,YAAazyC,EAAE,gCACf0yC,cAAe1yC,EAAE,uBAGnB,SAAC,GAAoB,CACnBqyC,QAAQ,yBACRE,aAAcvyC,EAAE,0BAChBsyC,WAAYtyC,EAAE,0BACdwyC,WAAYwE,OAAOG,GACnB1E,YAAazyC,EAAE,sCACf0yC,cAAe1yC,EAAE,6BAEnB,SAAC,GAAoB,CACnBqyC,QAAQ,6BACRE,aAAcvyC,EAAE,8BAChBsyC,WAAYtyC,EAAE,8BACdwyC,WAAYxyC,EAAE,oBAAqB,CACjC/O,MAAOmmD,IAET3E,YAAazyC,EAAE,0CACf0yC,cAAe1yC,EAAE,iCAGnB,SAAC,GAAoB,CACnBqyC,QAAQ,mBACRE,aAAcvyC,EAAE,oBAChBsyC,WAAYtyC,EAAE,oBACdwyC,WAAY,WACZC,YAAazyC,EAAE,gCACf0yC,cAAe1yC,EAAE,uBAGnB,SAAC,GAAoB,CACnBqyC,QAAQ,iBACRE,aAAcvyC,EAAE,kBAChBsyC,WAAYtyC,EAAE,kBACdwyC,WAAY,UACZC,YAAazyC,EAAE,8BACf0yC,cAAe1yC,EAAE,uBAIzB,E,mNCpEMq3C,GAAwB,WACpB,IAAAr3C,GAAM,IAAA2D,gBAAe,CAAC,eAAgB,WAAU,EAExD,OACE,UAAC,EAAA2vC,YAAW,IAACxvC,MAAO9D,EAAE,eAAgBlQ,GAAG,cAAcyjD,aAAc,MAAI,YACvE,SAAC,EAAA30B,YAAW,WACV,UAAC,EAAAC,KAAI,IAACC,UAAW,EAAA4M,aAAA,GAAc,WAC5B1rB,EAAE,6BACH,SAAC,EAAA6e,KAAI,IAACC,UAAW,EAAA4M,aAAA,OAAkB,UAChC1rB,EAAE,2CAKT,SAAC,GAAoB,CACnBqyC,QAAQ,0BACRE,aAAcvyC,EAAE,2BAChBsyC,WAAYtyC,EAAE,2BACdwyC,WAAYxyC,EAAE,mBACdyyC,YAAazyC,EAAE,uCACf0yC,cAAe1yC,EAAE,gCAIzB,E,mNClBMs3C,GAAuD,SAAC,G,IAC5DC,EAAwB,2BACxBC,EAAuB,0BAEfx3C,GAAM,IAAA2D,gBAAe,CAAC,iBAAgB,EAE9C,OACE,UAAC,EAAA2vC,YAAW,IAACxvC,MAAO9D,EAAE,SAAUlQ,GAAG,QAAQyjD,aAAc,MAAI,YAC3D,SAAC,EAAA30B,YAAW,WACV,SAAC,EAAAC,KAAI,IAACC,UAAW,EAAA4M,aAAA,EAAgB1D,UAAU,gBAAc,UACtDhoB,EAAE,4BAIP,SAAC,GAAoB,CACnBqyC,QAAQ,sBACRE,aAAcvyC,EAAE,uBAChBsyC,WAAYtyC,EAAE,uBACdwyC,WAAYxyC,EAAE,qBAAsB,CAClCR,MAAO+3C,EACP5U,WAAW,SAAQzL,OAAOqgB,GAA2B,SAASrlD,GAC5D,eAGJugD,YAAazyC,EAAE,mCACf0yC,cAAe1yC,EAAE,0BAGnB,SAAC,GAAoB,CACnBqyC,QAAQ,qBACRE,aAAcvyC,EAAE,sBAChBsyC,WAAYtyC,EAAE,sBACdwyC,WAAYxyC,EAAE,qBAAsB,CAClCR,MAAOg4C,EACP9U,WAAW,SAAQxL,OAAOqgB,GAA2B,SAASrlD,GAC5D,eAGJugD,YAAazyC,EAAE,kCACf0yC,cAAe1yC,EAAE,2BAIzB,E,mNCpDMy3C,GAA8D,SAAC,G,IACnEC,EAAa,gBAEL13C,GAAM,IAAA2D,gBAAe,CAAC,iBAAgB,EAE9C,OACE,SAAC,EAAAg0C,aAAY,IAAC9zC,QAAQ,UAAQ,WAC5B,UAAC,EAAA+zC,UAAS,IACR7lB,YAAU,EACV3K,MAAOpnB,EAAE,mBACT63C,mBAAmB,oBACnBlxB,MAAO,CAAEW,SAAU,WAAU,YAG7B,SAAC,EAAAwwB,cAAa,IAASr9C,KAAK,uBAAqB,UAC9CuF,EAAE,wBADe,IAGpB,SAAC,EAAA83C,cAAa,IAASr9C,KAAK,aAAW,UACpCuF,EAAE,cADe,IAGpB,SAAC,EAAA83C,cAAa,IAASr9C,KAAK,QAAM,UAC/BuF,EAAE,SADe,IAGpB,SAAC,EAAA83C,cAAa,IAASr9C,KAAK,gBAAc,UACvCuF,EAAE,iBADe,IAGpB,SAAC,EAAA83C,cAAa,IAASr9C,KAAK,YAAU,UACnCuF,EAAE,aADe,IAGpB,SAAC,EAAA83C,cAAa,IAASr9C,KAAK,UAAQ,UACjCuF,EAAE,WADe,IAGpB,SAAC,EAAA83C,cAAa,IAASr9C,KAAK,UAAQ,UACjCuF,EAAE,WADe,GAGnB03C,GACC,SAAC,EAAAI,cAAa,IAASr9C,KAAK,WAAS,UAClCuF,EAAE,YADe,IAIpB,8BAKV,E,mNClBa,GAET,SAAC,G,IACHk0C,EAAQ,WACR94C,EAAS,YACT28C,EAAY,eACZnE,EAAS,YACTO,EAAY,eACZ6D,EAAc,iBACdxD,EAAuB,0BAEfx0C,GAAM,IAAA2D,gBAAe,CAAC,eAAgB,WAAU,EAClDs0C,EAAwBj4C,EAAXk0C,EAAa,eAAoB,eAI9C,GAAsC,IAAA/jD,UAC1C,EAAAklD,iBAAA,SADKd,EAAc,KAAED,EAAiB,KAGlC,GAAgC,IAAAnkD,UAAS,IAAxCikD,EAAW,KAAEC,EAAc,KAC5B,GAA4B,IAAAlkD,WAAkB,GAA7CsL,EAAS,KAAEy8C,EAAY,KACxB,GAAwB,IAAA/nD,WAAkB,GAAzCgoD,EAAO,KAAEC,EAAU,KAmB1B,OACE,SAAC,EAAAn7C,YAAW,IAACqrB,QAAS,CAAEha,QAAS,cAAa,WAC5C,UAAC,EAAA+pC,QAAO,IAACxnB,WAAS,eAChB,SAAC4mB,GAAqB,KACtB,SAAC,EAAAa,eAAc,WACb,SAAC,EAAAC,UAAS,IACR97B,mBAAmB,EACnB3sB,GAAG,oBAAmB,aACV,QAAM,WAElB,UAAC,EAAAmN,YAAW,IAACqrB,QAAS,CAAEha,QAAS,cAAa,YAC5C,UAAC,EAAAkqC,KAAI,YACH,SAACvE,GAAiB,CAChBC,SAAUA,EACVN,UAAWA,EACXO,aAAcA,EACd6D,eAAgBA,EAChBxD,wBAAyBA,EACzBJ,YAAaA,EACbC,eAAgBA,EAChBC,kBAAmBA,EACnBC,eAAgBA,EAChB6D,WAAYA,EACZD,QAASA,KAEX,SAAClB,GAAO,CACNC,2BACEtD,EAAU,qBAAqB3iD,MAEjCkmD,4BACEvD,EAAU,0BAEZwD,+BACExD,EAAU,uCAAuC3iD,SAGrD,SAACulD,GAAG,CACF5C,UAAWA,EACXO,aAAcA,EACdsC,2BAA4B7C,EAAU,gBAAgB3iD,MACtDylD,wBACE9C,EAAU,6BAEZ+C,gCACE/C,EAAU,yBAAyB3iD,SAGvC,SAAComD,GAAW,KACZ,SAACpE,GAAO,CACNE,sBAAuBS,EAAU,iBAAiB3iD,MAClDoiD,mBAAoBO,EAAU,cAAc3iD,MAC5CmiD,yBACEQ,EAAU,qBAAqB3iD,MAEjCiiD,uBACEU,EAAU,wBAAwB3iD,SAGtC,SAACqmD,GAAiB,CAChBC,yBACE3D,EAAU,wBAAwB3iD,MAEpCumD,wBACE5D,EAAU,uBAAuB3iD,SAGrC,SAAColD,GAAK,CACJC,6BACE1C,EAAU,kBAAkB3iD,MAE9BslD,yBAA0B3C,EAAU,YAAY3iD,YAIpD,UAAC,EAAAwnD,YAAW,IAACzwB,UAAU,2BAAyB,YAC9C,SAAC,EAAA8Y,QAAO,CAAC9Y,UAAU,mCACnB,SAAC,EAAA+D,OAAM,IACLtwB,UAAWA,EACXkiB,QAhGQ,YAClBi2B,aAAS,EAATA,EAAWjgD,KAAKwF,QAAS,GAC3Bk7C,EAAer0C,EAAE,oBACjBs0C,EAAkB,EAAAe,iBAAA,SAElB6C,GAAa,GAEbF,EAAepE,aAAS,EAATA,EAAWjgD,MACvB0a,MAAK,SAACpd,GACL,OAAS,GAATA,GACKojD,EAAer0C,EAAE,iBAAkB,CAAErM,KAAMigD,aAAS,EAATA,EAAWjgD,QACvD2gD,EAAkB,EAAAe,iBAAA,QAClBj6C,GAHJ,IAKDs9C,SAAQ,WAAM,OAAAR,GAAa,EAAb,IAErB,EAiFgBr0C,QAAQ,UAAS,cAEfqwC,EACI,kCACA,2BAEN3qC,WAA+B,YAAnBgrC,GAA4B,UAEvC0D,MAEH,SAAC,EAAAlsB,OAAM,IACLpO,QAASo6B,EACTl0C,QAAQ,OAAM,cAEZqwC,EACI,kCACA,8BAA4B,UAGjCl0C,EAAE,uCASrB,E,mNC1Ka24C,GAET,SAAC,G,IAAE/3C,EAAK,QAEV,OADc,IAAA+C,gBAAe,CAAC,iBAAgB,GAE5C,SAAC,EAAA1G,YAAW,IACV4G,QAAS,QACTmkB,UAAW,mBACXvL,mBAAmB,EAAI,aACX,QAAM,WAElB,SAAC,GAAgB,CACfy3B,UAAU,EACV94C,UAAW,WAAO,EAClB28C,aAAc,WAAO,EACrBnE,UAAWhzC,EACXuzC,aAAc,WAAO,EACrB6D,eAAgB,WAAM,OAAA7gD,QAAQ4xB,SAAQ,EAAhB,EACtByrB,wBAAyB,MAIjC,E,mNCIaoE,GAAiE,SAAC,G,IAC7Eh4C,EAAK,QACLe,EAAe,kBACfC,EAAe,kBAEP5B,GAAM,IAAA2D,gBAAe,CAAC,iBAAgB,EAC9C,OACE,SAAC,EAAA1G,YAAW,IACV4G,QAAS,QACTmkB,UAAW,mBACXvL,mBAAmB,EAAI,aACX,QAAM,WAElB,UAAC,EAAA47B,QAAO,IAACxnB,WAAS,eAChB,SAAC4mB,GAAqB,CAACC,eAAe,KACtC,SAAC,EAAAY,eAAc,WACb,SAAC,EAAAC,UAAS,IACR97B,mBAAmB,EAAI,aACX,OACZ3sB,GAAG,oBACHk4B,UAAW,eAAa,WAExB,SAAC,EAAA/qB,YAAW,IAACqrB,QAAS,CAAEha,QAAS,cAAa,WAC5C,UAAC,EAAAsiB,MAAK,YACJ,UAAC,EAAAE,UAAS,IAACtU,UAAQ,eACjB,UAAC,EAAAg8B,KAAI,IAAC1oD,GAAG,cAAY,YACnB,UAAC,EAAAwjD,YAAW,IACVxvC,MAAO9D,EAAE,sBACTlQ,GAAG,qBACHyjD,aAAc,MAAI,YAElB,SAAC,EAAA30B,YAAW,WACV,SAAC,EAAAC,KAAI,IACHC,UAAW,EAAA4M,aAAA,EACX1D,UAAU,gBAAc,UAEvBhoB,EAAE,0BAIP,SAAC,GAAoB,CACnBqyC,QAAQ,aACRE,aAAcvyC,EAAE,QAChBsyC,WAAYtyC,EAAE,cACdwyC,WAAY5xC,EAAMjN,KAClB8+C,YAAazyC,EAAE,0BACf0yC,cAAe1yC,EAAE,iBAGnB,SAAC,GAAoB,CACnBqyC,QAAQ,aACRE,aAAcvyC,EAAE,cAChBsyC,WAAYtyC,EAAE,cACdwyC,WAAY5xC,EAAMa,WAAWtI,OAAO+P,WACpCupC,YAAazyC,EAAE,0BACf0yC,cAAe1yC,EAAE,iBAGnB,SAAC,GAAoB,CACnBqyC,QAAQ,WACRE,aAAcvyC,EAAE,YAChBsyC,WAAYtyC,EAAE,YACdwyC,WACE,OAEFC,YAAazyC,EAAE,wBACf0yC,cAAe1yC,EAAE,eAGnB,SAAC,GAAoB,CACnBqyC,QAAQ,sBACRE,aAAcvyC,EAAE,uBAChBsyC,WAAYtyC,EAAE,uBACdwyC,WAAY5xC,EAAM,uBAAuBsI,WACzCupC,YAAazyC,EAAE,mCACf0yC,cAAe1yC,EAAE,0BAGnB,SAAC,GAAoB,CACnBqyC,QAAQ,iBACRE,aAAcvyC,EAAE,kBAChBsyC,WAAYtyC,EAAE,kBACdwyC,WAAYzQ,GACVnhC,EAAM,gBAAgB3P,OAExBwhD,YAAazyC,EAAE,8BACf0yC,cAAe1yC,EAAE,kBACjB64C,eAAe,KAGjB,SAAC,GAAoB,CACnBxG,QAAQ,iBACRE,aAAcvyC,EAAE,kBAChBsyC,WAAYtyC,EAAE,kBACdwyC,WAAYlQ,GACV1hC,EAAM,mBAAmB3P,OAE3ByhD,cAAe1yC,EAAE,kBACjByyC,YAAazyC,EAAE,8BACf64C,eAAe,SAGnB,SAAC5B,GAAO,CACNC,2BACEt2C,EAAM,qBAAqB3P,MAE7BkmD,4BACEv2C,EAAM,0BAERw2C,+BACEx2C,EAAM,uCAAuC3P,SAGjD,UAAC,EAAAqiD,YAAW,IAACxvC,MAAO9D,EAAE,OAAQlQ,GAAG,MAAMyjD,aAAc,MAAI,YACvD,SAAC,EAAA30B,YAAW,WACV,UAAC,EAAAC,KAAI,IAACC,UAAW,EAAA4M,aAAA,GAAc,WAC5B1rB,EAAE,qBACH,SAAC,EAAA6e,KAAI,IACHC,UAAW,EAAA4M,aAAA,MACX1D,UAAU,qBAAmB,UAE5BhoB,EAAE,mCAKT,SAAC,GAAoB,CACnBqyC,QAAQ,iBACRE,aAAcvyC,EAAE,kBAChBsyC,WAAYtyC,EAAE,kBACdwyC,WAAY5xC,EAAM,kBAClB6xC,YAAazyC,EAAE,8BACf0yC,cAAe1yC,EAAE,qBAGnB,SAAC,GAAoB,CACnBqyC,QAAQ,wBACRE,aAAcvyC,EAAE,yBAChBsyC,WAAYtyC,EAAE,yBACdwyC,WAAY5xC,EACV,uBACA3P,MAAMiY,WACRupC,YAAazyC,EAAE,qCACf0yC,cAAe1yC,EAAE,4BAGnB,SAAC,GAAoB,CACnBqyC,QAAQ,sBACRE,aAAcvyC,EAAE,uBAChBsyC,WAAYtyC,EAAE,uBACdwyC,WAAY5xC,EACV,6BACAsI,WACFupC,YAAazyC,EAAE,mCACf0yC,cAAe1yC,EAAE,0BAGnB,SAAC,GAAoB,CACnBqyC,QAAQ,0BACRE,aAAcvyC,EAAE,2BAChBsyC,WAAYtyC,EAAE,2BACdwyC,WAAY5xC,EACV,yBACA3P,MAAMiY,WACRupC,YAAazyC,EAAE,uCACf0yC,cAAe1yC,EAAE,kCAGrB,SAACq3C,GAAW,KACZ,SAACpE,GAAO,CACNE,sBAAuBvyC,EAAM,iBAAiB3P,MAC9CoiD,mBAAoBzyC,EAAM,cAAc3P,MACxCmiD,yBACExyC,EAAM,qBAAqB3P,MAE7BiiD,uBACEtyC,EAAM,wBAAwB3P,SAGlC,SAACqmD,GAAiB,CAChBC,yBACE32C,EAAM,wBAAwB3P,MAEhCumD,wBACE52C,EAAM,uBAAuB3P,SAGjC,SAAColD,GAAK,CACJC,6BACE11C,EAAM,kBAAkB3P,MAE1BslD,yBAA0B31C,EAAM,YAAY3P,aAIhD,SAAC,EAAA6vC,QAAO,CAAC9Y,UAAU,6BAEnB,UAAC,EAAApJ,YAAW,YACV,SAAC,EAAAC,KAAI,IAACC,UAAW,EAAA4M,aAAA,GAAiB57B,GAAG,UAAQ,UAC1CkQ,EAAE,iCAEL,SAAC,EAAA6e,KAAI,IAACC,UAAW,EAAA4M,aAAA,EAAgB1D,UAAU,gBAAc,UACtDhoB,EAAE,yBAEL,SAAC,EAAA+rB,OAAM,CACLloB,QAAQ,SAAQ,cACJ,6BACZib,UAAW,SAACpb,GAAU,OACpB,SAAC,EAAA0kB,KAAI,MAAK1kB,EAAK,CAAExR,GAAIyP,GAAe,UACjC3B,EAAE,kBAFe,YAQ5B,SAAC,EAAA8wB,UAAS,WACR,SAAC,EAAA/E,OAAM,CACLloB,QAAQ,UAAS,cACL,2BACZib,UAAW,SAACpb,GAAU,OACpB,SAAC,EAAA0kB,KAAI,MAAK1kB,EAAK,CAAExR,GAAI0P,GAAe,UACjC5B,EAAE,gBAFe,uBAc1C,E,mNChQa84C,GAAoC,SAAC,G,IAChDvvC,EAAU,aACVrO,EAAQ,WACRrH,EAAK,QACLY,EAAa,gBAELuL,GAAM,IAAA2D,gBAAe,SAAQ,EAC/B,GAAsB,IAAAxT,WAAkB,GAAvCimC,EAAM,KAAEC,EAAS,KAWxB,SAASsd,EAAct2C,QAAA,IAAAA,IAAAA,EAAA,IACrB,IAAM07C,EAAe,IAAIpE,OAAOt3C,EAAQ,KASxC,OAPa,KAAXA,EACInC,EAASmC,QACP,SAACmT,GACC,OAAAuoC,EAAa96B,KAAKzN,EAAQpX,cAC1B2/C,EAAa96B,KAAKzN,EAAQ1gB,GAD1B,IAGJoL,GACkBY,KAAI,SAAC0U,GAAY,OACvC,SAAC,EAAAknB,aAAY,IAEXzmC,MAAOuf,EAAQ1gB,GACf0wB,YAAahQ,EAAQpX,aAAW,UAE/BoX,EAAQ1gB,KAJJ0gB,EAAQ1gB,GAFwB,GAS3C,CAEA,OACE,SAAC,EAAAynC,OAAM,IACLznC,GAAG,iCACH+T,QAAS,EAAAq2B,cAAA,UACT/N,SAlCa,SAAC97B,GAChBgmC,EAAUhmC,EACZ,EAiCIkZ,WAAYA,EACZ6sB,OAAQA,EACRmE,gBAAiBv6B,EAAE,uBACnBg5C,aAAa,EACbC,WAAYj5C,EAAE,4BACdk5C,aAAa,SACb9e,UAAW,IACX5C,WAAY3jC,EACZg8B,SAvCsC,SAACjW,EAAG/lB,GAC5CY,EAAcZ,GACdwiC,GAAU,EACZ,EAqCIgE,SAAU,SAACzgB,EAAG3oB,GAAU,OAAA0iD,EAAc1iD,EAAd,GAAoB,UAE3C0iD,MAGP,E,mNCjDawF,GAA6D,SAAC,G,IACzEt9C,EAAY,eACZX,EAAQ,WACRM,EAAW,cACXJ,EAAS,YACTpB,EAAQ,WAEAgG,GAAM,IAAA2D,gBAAe,CAAC,QAAS,WAAU,EAC3C,GAAwB,IAAAxT,YAAvBqgB,EAAO,KAAE4oC,EAAU,KACpBC,GAAmB,IAAA3oD,UAEnB4oD,EAA2B,WAAhB99C,EAEX+9C,GAAiB,IAAA3oD,cAAY,WAC7B4f,IACF6oC,EAAiBtoD,QAAUyf,EAC3BpV,EAAUoV,GAEd,GAAG,CAACpV,EAAWoV,IAgCf,OACE,SAAC,EAAAuhC,MAAK,IACJjiD,GAAG,qBACHgU,MAAO9D,EAAE,sBACTo2B,QAAQ,EACR3lC,QAASuJ,EACT6J,QAAS,SACTyjB,SAAS,MACTtG,QAAS,EACP,SAAC,EAAA+K,OAAM,IACLj8B,GAAG,iBAEH+T,QAAQ,UACR0F,WAAY+vC,EACZ37B,QAAS47B,GAAc,UAEtBv5C,EAAE,yBALC,gBAON,SAAC,EAAA+rB,OAAM,IACLj8B,GAAG,gBAEH+T,QAAQ,OACR8Z,QAAS3jB,EACTuP,WAAY+vC,GAAQ,UAEnBt5C,EAAE,mBALC,YAOP,WAED,UAAC,EAAAw4C,KAAI,IAACgB,SAAU,SAACv3C,GAAM,OAAAA,aAAC,EAADA,EAAG6wC,gBAAH,GAAmB,WA3D1B,WAClB,OAAQt3C,GACN,IAAK,eACH,OACE,SAAC,EAAAouB,MAAK,IACJ/lB,QAAS,EAAA0qC,aAAA,OAAmB,YAClB,SACVtkB,UAAQ,EACRnmB,MAAO9D,EAAE,mCAAiC,UAEzCA,EAAE,mCAAoC,CACrC3E,SAAUg+C,EAAiBtoD,aAInC,IAAK,gBACH,OACE,SAAC,EAAA64B,MAAK,IACJ/lB,QAAS,EAAA0qC,aAAA,OAAmB,YAClB,SACVtkB,UAAQ,EACRnmB,MAAO9D,EAAE,+BAA6B,UAErCA,EAAE,gCAAiC,CAClCrM,KAAMkI,OAKlB,CA+BO49C,IACD,SAAC,EAAA7G,UAAS,IAACP,QAAQ,qBAAqBjrB,MAAOpnB,EAAE,kBAAgB,UAC9DnE,MAEH,SAAC,EAAA+2C,UAAS,IAACP,QAAQ,iBAAiBjrB,MAAOpnB,EAAE,cAAY,UACtD9E,GACC,SAAC49C,GAAW,CACVvvC,WAAY+vC,EACZp+C,SAAUA,EACVrH,MAAO2c,EACP/b,cAAe2kD,KAGjB,SAAC,EAAA7uB,SAAQ,CAACC,MAAO,kBAM7B,C","sources":["webpack:///./src/routes/control-plane/routesConsts.ts","webpack:///./src/routes/control-plane/DrawerProvider.tsx","webpack:///./src/routes/RedirectOnGateError.tsx","webpack:///./src/routes/control-plane/routes/KafkaInstancesRoute.tsx","webpack:///./src/routes/control-plane/routes/CreateKafkaInstanceRoute.tsx","webpack:///./src/routes/control-plane/routes/useCreateKafkaCallbacks.ts","webpack:///./src/routes/control-plane/useControlPlaneGate.tsx","webpack:///./src/routes/control-plane/routes/DeleteKafkaInstanceRoute.tsx","webpack:///./src/routes/control-plane/routes/ChangeOwnerRoute.tsx","webpack:///./src/routes/control-plane/ControlPlaneRoutes.tsx","webpack:///./src/routes/data-plane/routesConsts.ts","webpack:///./src/routes/data-plane/useDataPlaneGate.tsx","webpack:///./src/routes/data-plane/routes/DataPlaneHeaderConnected.tsx","webpack:///./src/routes/data-plane/routes/AclsRoute.tsx","webpack:///./src/routes/data-plane/routes/TopicsRoute.tsx","webpack:///./src/routes/data-plane/routes/SettingsRoute.tsx","webpack:///./src/routes/data-plane/routes/DashboardRoute.tsx","webpack:///./src/routes/data-plane/routes/ConsumerGroupsRoute.tsx","webpack:///./src/routes/data-plane/useTopicGate.tsx","webpack:///./src/routes/data-plane/routes/DataPlaneTopicHeaderConnected.tsx","webpack:///./src/routes/data-plane/routes/TopicConsumerGroupsRoute.tsx","webpack:///./src/routes/data-plane/routes/TopicMessagesRoute.tsx","webpack:///./src/routes/data-plane/routes/TopicPropertiesRoute.tsx","webpack:///./src/routes/data-plane/routes/TopicSchemasRoute.tsx","webpack:///../../packages/ui/src/components/DeleteKafkaTopic/DeleteKafkaTopic.tsx","webpack:///./src/routes/data-plane/routes/TopicDeleteRoute.tsx","webpack:///./src/routes/data-plane/routes/TopicEditPropertiesRoute.tsx","webpack:///./src/routes/data-plane/DataPlaneRoutes.tsx","webpack:///./src/routes/overview/OverviewRoute.tsx","webpack:///./src/routes/Routes.tsx","webpack:///./src/App.tsx","webpack:///./src/QuickstartLoader.tsx","webpack:///./src/store/index.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchConsumerGroups.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchKafkaKpis.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchKafkaMetrics.ts","webpack:///../../packages/consoledot-api/src/fetchers/valuesToQuery.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchKafkas.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchProviderRegionSizes.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchProvidersWithRegions.ts","webpack:///../../packages/consoledot-api/src/utilsAndConstants.ts","webpack:///../../packages/consoledot-api/src/transformers/topicTransformer.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchTopics.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchTopicsMetrics.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchUserAccounts.ts","webpack:///../../packages/consoledot-api/src/ApiProvider.tsx","webpack:///../../packages/consoledot-api/src/queryKeys.ts","webpack:///../../packages/consoledot-api/src/useApi.ts","webpack:///../../packages/consoledot-api/src/queries/useConsumerGroups.ts","webpack:///../../packages/consoledot-api/src/transformers/kafkaRequestToKafkaInstanceEnhanched.ts","webpack:///../../packages/consoledot-api/src/queries/useCreateInstance.ts","webpack:///../../packages/consoledot-api/src/queries/useKafkaInstanceTransformer.ts","webpack:///../../packages/consoledot-api/src/queries/useKafka.ts","webpack:///../../packages/consoledot-api/src/queries/useKafkas.ts","webpack:///../../packages/consoledot-api/src/queries/useTopic.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchTopic.ts","webpack:///../../packages/consoledot-api/src/queries/useTopics.ts","webpack:///../../packages/consoledot-api/src/queries/useUserAccounts.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useDeveloperInstanceAvailabilityFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useKafkaFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useKafkaKpisFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useKafkaMetricsFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useTopicsMetricsFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useTopicsFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useMessagesFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchMessages.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useProviderRegionSizesFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useProvidersWithRegionsFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchQueries/useStandardQuotaFetchQuery.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchOrganization.ts","webpack:///../../packages/consoledot-api/src/fetchers/fetchStandardQuota.ts","webpack:///../../packages/consoledot-api/src/mutations/useCreateKafkaMutation.ts","webpack:///../../packages/consoledot-api/src/mutations/useDeleteKafkaMutation.ts","webpack:///../../packages/consoledot-api/src/mutations/useDeleteTopicMutation.ts","webpack:///../../packages/consoledot-api/src/mutations/useUpdateKafkaMutation.ts","webpack:///../../packages/consoledot-api/src/types.ts","webpack:///../../packages/local-storage-helpers/index.ts","webpack:///../../packages/ui-models/src/models/kafka.ts","webpack:///../../packages/ui/src/components/ConsumerGroups/components/ConsumerGroupState.tsx","webpack:///../../packages/ui/src/components/ConsumerGroups/components/ConsumerGroupEmptyState.tsx","webpack:///../../packages/ui/src/components/ConsumerGroups/ConsumerGroups.tsx","webpack:///../../packages/ui/src/components/ControlPlaneHeader.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/machines/shared.ts","webpack:///../../packages/ui/src/components/CreateKafkaInstance/machines/StandardPlanMachine.ts","webpack:///../../packages/ui/src/components/CreateKafkaInstance/machines/TrialPlanMachine.ts","webpack:///../../packages/ui/src/components/CreateKafkaInstance/machines/CreateKafkaInstanceMachine.ts","webpack:///../../packages/ui/src/components/CreateKafkaInstance/machines/CreateKafkaInstanceProvider.tsx","webpack:///../../packages/ui/src/components/Logos/images.ts","webpack:///../../packages/ui/src/components/Logos/AWSLogo.tsx","webpack:///../../packages/ui/src/components/Logos/AzureLogo.tsx","webpack:///../../packages/ui/src/components/Logos/GCPLogo.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/components/BillingTiles.tsx","webpack:///../../packages/ui/src/components/Logos/RedhatLogo.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/components/CloudProviderTiles.tsx","webpack:///../../packages/ui/src/components/CreateKafkaInstance/StandardInstanceForm.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceActions.tsx","webpack:///../../packages/ui/src/components/DataPlaneHeader.tsx","webpack:///../../packages/ui/src/components/DataPlaneTopicHeader.tsx","webpack:///../../packages/ui/src/components/DeleteKafKaInstance/DeleteKafkaInstance.tsx","webpack:///../../packages/ui/src/components/I18nProvider.tsx","webpack:///../../packages/ui/src/hooks/useKafkaLabels.ts","webpack:///../../packages/ui/src/hooks/useTopicLabels.ts","webpack:///../../packages/ui/src/components/KafkaInstanceDrawer/components/DetailsTabAlert.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceDrawer/components/KafkaDetailsTab.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceDrawer/components/SuspendedConnection.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceDrawer/components/KafkaConnectionTabP2.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceDrawer/components/SampleCodeSnippet.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceDrawer/components/CodeSnippets.ts","webpack:///../../packages/ui/src/components/KafkaInstanceDrawer/components/KafkaSampleCode.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceDrawer/KafkaInstanceDrawer.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/components/StatusLabel.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/types.ts","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/components/StatusProgressStepper.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/components/StatusPopoverContent.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/components/StatusPopover.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/components/SuspendedPopover.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceStatus/KafkaInstanceStatus.tsx","webpack:///../../packages/ui/src/components/KafkaInstances/components/EmptyStateNoInstances.tsx","webpack:///../../packages/ui/src/components/KafkaInstances/components/EmptyStateNoResults.tsx","webpack:///../../packages/ui/src/components/KafkaInstances/KafkaInstances.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/DateTimePicker.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/FilterGroup.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/LimitSelector.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/utils.ts","webpack:///../../packages/ui/src/components/KafkaTopics/types.ts","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/NoDataCell.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/MessageDetails.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/NoDataEmptyState.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/NoResultsEmptyState.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/OffsetRange.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/PartitionSelector.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/components/UnknownValuePreview.tsx","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/MessageBrowserMachine.ts","webpack:///../../packages/ui/src/components/KafkaMessageBrowser/KafkaMessageBrowser.tsx","webpack:///../../packages/ui/src/components/KafkaInstanceCapacityTable.tsx","webpack:///../../packages/ui/src/components/MarketingPage.tsx","webpack:///../../packages/ui/src/components/KafkaPageV3.tsx","webpack:///../../packages/ui/src/components/KafkaTopics/components/EmptyStateNoTopic.tsx","webpack:///../../packages/ui/src/components/ManageKafkaPermissions/types.ts","webpack:///../../packages/ui/src/components/KafkaTopics/KafkaTopics.tsx","webpack:///../../packages/ui/src/components/Metrics/types.ts","webpack:///../../packages/ui/src/components/Metrics/components/EmptyStateInitialLoading.tsx","webpack:///../../packages/ui/src/components/Metrics/components/EmptyStateMetricsUnavailable.tsx","webpack:///../../packages/ui/src/components/Metrics/components/MetricsLayout.tsx","webpack:///../../packages/ui/src/components/Metrics/components/CardBodyLoading.tsx","webpack:///../../packages/ui/src/components/Metrics/consts.ts","webpack:///../../packages/ui/src/components/Metrics/components/ChartSkeletonLoader.tsx","webpack:///../../packages/ui/src/components/Metrics/components/useChartWidth.tsx","webpack:///../../packages/ui/src/components/Metrics/components/utils.ts","webpack:///../../packages/ui/src/components/Metrics/components/ChartLinearWithOptionalLimit.tsx","webpack:///../../packages/ui/src/components/Metrics/components/ChartLogSizePerPartition.tsx","webpack:///../../packages/ui/src/components/Metrics/components/ChartPopover.tsx","webpack:///../../packages/ui/src/components/Metrics/components/ChartTotalBytes.tsx","webpack:///../../packages/ui/src/components/Metrics/components/EmptyStateNoMetricsData.tsx","webpack:///../../packages/ui/src/components/Metrics/components/EmptyStateNoMetricsDataForSelection.tsx","webpack:///../../packages/ui/src/components/Metrics/components/EmptyStateNoTopics.tsx","webpack:///../../packages/ui/src/components/Metrics/components/EmptyStateNoTopicSelected.tsx","webpack:///../../packages/ui/src/components/Metrics/components/FilterByTime.tsx","webpack:///../../packages/ui/src/components/Metrics/components/FilterByTopic.tsx","webpack:///../../packages/ui/src/components/Metrics/components/ToolbarRefresh.tsx","webpack:///../../packages/ui/src/components/Metrics/components/ToolbarTopicsMetrics.tsx","webpack:///../../packages/ui/src/components/Metrics/components/CardTopicsMetrics.tsx","webpack:///../../packages/ui/src/components/Metrics/components/ToolbarKafkaInstanceMetric.tsx","webpack:///../../packages/ui/src/components/Metrics/components/CardKafkaInstanceMetrics.tsx","webpack:///../../packages/ui/src/components/Metrics/components/CardKpi.tsx","webpack:///../../packages/ui/src/components/Metrics/components/MetricsLagAlert.tsx","webpack:///../../packages/ui/src/components/Metrics/components/PartitionCard.tsx","webpack:///../../packages/ui/src/components/Metrics/machines/KafkaInstanceMetricsMachine.ts","webpack:///../../packages/ui/src/components/Metrics/machines/TopicsMetricsMachine.ts","webpack:///../../packages/ui/src/components/Metrics/machines/MetricsKpiMachine.ts","webpack:///../../packages/ui/src/components/Metrics/KafkaInstanceMetricsProvider.tsx","webpack:///../../packages/ui/src/components/Metrics/MetricsKpiProvider.tsx","webpack:///../../packages/ui/src/components/Metrics/TopicsMetricsProvider.tsx","webpack:///../../packages/ui/src/components/Metrics/useKafkaInstanceMetrics.tsx","webpack:///../../packages/ui/src/components/Metrics/useTopicsMetrics.tsx","webpack:///../../packages/ui/src/components/Metrics/Metrics.tsx","webpack:///../../packages/ui/src/components/Metrics/useMetricsKpi.tsx","webpack:///../../packages/ui/src/components/Settings/Settings.tsx","webpack:///../../packages/ui/src/components/Topic/components/types.ts","webpack:///../../packages/ui/src/components/Topic/components/TextWithLabelPopover.tsx","webpack:///../../packages/ui/src/components/Topic/components/Cleanup.tsx","webpack:///../../packages/ui/src/components/Topic/components/CustomRetentionMessage.tsx","webpack:///../../packages/ui/src/components/Topic/components/CustomRetentionSize.tsx","webpack:///../../packages/ui/src/components/Topic/components/CoreConfiguration.tsx","webpack:///../../packages/ui/src/components/Topic/components/useValidateTopic.ts","webpack:///../../packages/ui/src/components/Topic/components/Flush.tsx","webpack:///../../packages/ui/src/components/Topic/components/Log.tsx","webpack:///../../packages/ui/src/components/Topic/components/Message.tsx","webpack:///../../packages/ui/src/components/Topic/components/Replication.tsx","webpack:///../../packages/ui/src/components/Topic/components/TopicAdvanceIndex.tsx","webpack:///../../packages/ui/src/components/Topic/components/TopicAdvanceJumpLinks.tsx","webpack:///../../packages/ui/src/components/Topic/components/TopicAdvancePage.tsx","webpack:///../../packages/ui/src/components/Topic/EditTopicProperties/EditTopicProperties.tsx","webpack:///../../packages/ui/src/components/Topic/TopicProperties/TopicProperties.tsx","webpack:///../../packages/ui/src/components/ChangeKafkaOwner/SelectOwner.tsx","webpack:///../../packages/ui/src/components/ChangeKafkaOwner/ChangeKafkaOwner.tsx"],"sourcesContent":["export const ControlPlaneRouteRoot = \"/kafkas\" as const;\nconst NewInstanceSegment = \"create\";\nexport const ControlPlaneSpecialSegments = [NewInstanceSegment];\n\nexport const ControlPlaneRoutePath =\n  `${ControlPlaneRouteRoot}/:id?/:section(delete|change-owner)?` as const;\nexport const ControlPlaneNewInstancePath = `${ControlPlaneRouteRoot}/${NewInstanceSegment}`;\nexport const ControlPlaneDeleteInstancePath = `${ControlPlaneRouteRoot}/:id/delete`;\nexport const ControlPlaneChangeOwnerPath = `${ControlPlaneRouteRoot}/:id/change-owner`;\nexport type ControlPlaneRouteParams = {\n  id?: string;\n  section?: \"delete\" | \"change-owner\";\n};\n\nexport type ControlPlaneNavigationProps = {\n  instancesHref: string;\n};\n","import { useKafka } from \"consoledot-api\";\nimport type { FunctionComponent, MutableRefObject } from \"react\";\nimport {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport type { KafkaInstanceDrawerTab } from \"ui\";\nimport { KafkaInstanceDrawer } from \"ui\";\nimport type { ControlPlaneRouteParams } from \"./routesConsts\";\nimport {\n  ControlPlaneRoutePath,\n  ControlPlaneSpecialSegments,\n} from \"./routesConsts\";\n\ntype DrawerContextProps = {\n  selectedInstance: string | undefined;\n  activeTab: KafkaInstanceDrawerTab;\n  setActiveTab: (tab: KafkaInstanceDrawerTab) => void;\n  isExpanded: boolean;\n  toggleExpanded: (newState?: boolean) => void;\n  onClose: MutableRefObject<(() => void) | undefined>;\n};\n// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\nconst DrawerContext = createContext<DrawerContextProps>(null!);\n\nexport const DrawerProvider: FunctionComponent = ({ children }) => {\n  const match = useRouteMatch<ControlPlaneRouteParams>(ControlPlaneRoutePath);\n  if (!match) {\n    throw Error(\"DrawerProvider used outside the expected route\");\n  }\n  const selectedInstance =\n    (match.params.id &&\n      ControlPlaneSpecialSegments.includes(match.params.id)) ||\n    match.params.section !== undefined\n      ? undefined\n      : match.params.id;\n  const { data: instance } = useKafka(selectedInstance);\n  const [isExpanded, setIsExpanded] = useState(\n    selectedInstance !== undefined && match.isExact\n  );\n  const [activeTab, setActiveTab] = useState<KafkaInstanceDrawerTab>(\"details\");\n  const onClose = useRef<() => void | undefined>();\n\n  const toggleExpanded = useCallback((newValue: boolean | undefined) => {\n    setIsExpanded((prev) => {\n      const isExpanded = newValue !== undefined ? newValue : !prev;\n      if (isExpanded === false && onClose.current) {\n        onClose.current();\n      }\n      return isExpanded;\n    });\n  }, []);\n\n  useEffect(() => {\n    if (!instance) {\n      setIsExpanded(false);\n    }\n  }, [instance]);\n\n  const value = useMemo(() => {\n    const shouldBeExpanded = selectedInstance !== undefined && isExpanded;\n\n    return {\n      selectedInstance,\n      activeTab,\n      setActiveTab,\n      isExpanded: shouldBeExpanded,\n      toggleExpanded,\n      onClose,\n    };\n  }, [activeTab, isExpanded, selectedInstance, toggleExpanded]);\n\n  return (\n    <DrawerContext.Provider value={value}>\n      <KafkaInstanceDrawer\n        instance={instance}\n        activeTab={activeTab}\n        onTabChange={setActiveTab}\n        isExpanded={isExpanded}\n        onClose={() => toggleExpanded(false)}\n      >\n        {children}\n      </KafkaInstanceDrawer>\n    </DrawerContext.Provider>\n  );\n};\n\nexport function useDrawer(onClose?: () => void) {\n  const context = useContext(DrawerContext);\n  context.onClose.current = onClose;\n  return context;\n}\n","import { useQueryErrorResetBoundary } from \"consoledot-api\";\nimport type { FunctionComponent, VoidFunctionComponent } from \"react\";\nimport { useEffect } from \"react\";\nimport { ErrorBoundary } from \"react-error-boundary\";\nimport { Redirect, useLocation } from \"react-router-dom\";\n\nexport const RedirectOnGateError: FunctionComponent<{\n  redirectUrl: string;\n}> = ({ children, redirectUrl }) => {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const { key } = useLocation();\n\n  return (\n    <ErrorBoundary\n      resetKeys={[key]}\n      fallbackRender={() => <RedirectAndResetError redirectUrl={redirectUrl} />}\n    >\n      {children}\n    </ErrorBoundary>\n  );\n};\n\nconst RedirectAndResetError: VoidFunctionComponent<{ redirectUrl: string }> = ({\n  redirectUrl,\n}) => {\n  const { reset } = useQueryErrorResetBoundary();\n  useEffect(() => reset, [reset]);\n  return <Redirect to={redirectUrl} />;\n};\n","import { QuickStartContext } from \"@patternfly/quickstarts\";\nimport {\n  usePaginationSearchParams,\n  useSortableSearchParams,\n  useURLSearchParamsChips,\n} from \"@rhoas/app-services-ui-components\";\nimport { KafkaInstancesSortableColumns, useKafkas } from \"consoledot-api\";\nimport type { FunctionComponent } from \"react\";\nimport { useCallback, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport type { KafkaInstanceDrawerTab, KafkaInstancesProps } from \"ui\";\nimport { ControlPlaneHeader, KafkaInstances, useKafkaLabels } from \"ui\";\nimport type { Kafka, SimplifiedStatus } from \"ui-models/src/models/kafka\";\nimport { ReadyStatuses } from \"ui-models/src/models/kafka\";\nimport { useDrawer } from \"../DrawerProvider\";\nimport {\n  ControlPlaneNewInstancePath,\n  ControlPlaneRouteRoot,\n} from \"../routesConsts\";\n\nexport type KafkaInstancesRoute = Pick<\n  KafkaInstancesProps<Kafka>,\n  \"getUrlForInstance\"\n>;\n\nexport const KafkaInstancesRoute: FunctionComponent<KafkaInstancesRoute> = ({\n  getUrlForInstance,\n}) => {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const history = useHistory();\n  const { setActiveQuickStart } = useContext(QuickStartContext);\n\n  const { selectedInstance, toggleExpanded, setActiveTab, isExpanded } =\n    useDrawer(\n      useCallback(() => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n        history.replace(`${ControlPlaneRouteRoot}`);\n      }, [history])\n    );\n\n  const labels = useKafkaLabels();\n\n  const { page, perPage, setPagination, setPaginationQuery } =\n    usePaginationSearchParams();\n  const resetPaginationQuery = useCallback(\n    () => setPaginationQuery(1, perPage),\n    [perPage, setPaginationQuery]\n  );\n\n  const namesChips = useURLSearchParamsChips(\"names\", resetPaginationQuery);\n  const ownersChips = useURLSearchParamsChips(\"owners\", resetPaginationQuery);\n  const statusesChips = useURLSearchParamsChips<SimplifiedStatus>(\n    \"statuses\",\n    resetPaginationQuery\n  );\n\n  const [isColumnSortable, sort, sortDirection] = useSortableSearchParams(\n    KafkaInstancesSortableColumns,\n    labels.fields,\n    \"createdAt\",\n    \"desc\"\n  );\n\n  const { data } = useKafkas({\n    page,\n    perPage,\n    name: namesChips.chips,\n    owner: ownersChips.chips,\n    status: statusesChips.chips,\n    sort: sort || \"createdAt\",\n    direction: sortDirection,\n  });\n\n  const onClearAllFilters = useCallback(() => {\n    namesChips.clearChained(\n      ownersChips.clearChained(\n        statusesChips.clearChained(setPaginationQuery(1, perPage))\n      ),\n      true\n    );\n  }, [namesChips, ownersChips, perPage, setPaginationQuery, statusesChips]);\n\n  const openDrawer = useCallback(\n    (id: string, tab: KafkaInstanceDrawerTab) => {\n      if (selectedInstance === id && isExpanded) {\n        toggleExpanded(false);\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n        history.replace(`${ControlPlaneRouteRoot}/${id}`);\n        toggleExpanded(true);\n        setActiveTab(tab);\n      }\n    },\n    [history, isExpanded, selectedInstance, setActiveTab, toggleExpanded]\n  );\n\n  const onDetailsClick: KafkaInstancesProps[\"onDetails\"] = useCallback(\n    (instance) => {\n      openDrawer(instance.id, \"details\");\n    },\n    [openDrawer]\n  );\n\n  const onConnectionsClick: KafkaInstancesProps[\"onDetails\"] = useCallback(\n    (instance) => {\n      openDrawer(instance.id, \"connections\");\n    },\n    [openDrawer]\n  );\n\n  const onCreate = useCallback(() => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    history.push(`${ControlPlaneNewInstancePath}`);\n  }, [history]);\n\n  const onDelete = useCallback<KafkaInstancesProps[\"onDelete\"]>(\n    ({ id }) => {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n      history.push(`${ControlPlaneRouteRoot}/${id}/delete`);\n    },\n    [history]\n  );\n  const onChangeOwner = useCallback<KafkaInstancesProps[\"onChangeOwner\"]>(\n    ({ id }) => {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n      history.push(`${ControlPlaneRouteRoot}/${id}/change-owner`);\n    },\n    [history]\n  );\n\n  const onQuickstartGuide = useCallback(\n    () => setActiveQuickStart && setActiveQuickStart(\"getting-started\"),\n    [setActiveQuickStart]\n  );\n\n  return (\n    <>\n      <ControlPlaneHeader />\n      <KafkaInstances\n        instances={data?.instances}\n        itemCount={data?.count}\n        page={page}\n        perPage={perPage}\n        names={namesChips.chips}\n        owners={ownersChips.chips}\n        statuses={statusesChips.chips}\n        isColumnSortable={isColumnSortable}\n        onPageChange={setPagination}\n        onSearchName={namesChips.add}\n        onRemoveNameChip={namesChips.remove}\n        onRemoveNameChips={namesChips.clear}\n        onSearchOwner={ownersChips.add}\n        onRemoveOwnerChip={ownersChips.remove}\n        onRemoveOwnerChips={ownersChips.clear}\n        onSearchStatus={statusesChips.toggle}\n        onRemoveStatusChip={statusesChips.remove}\n        onRemoveStatusChips={statusesChips.clear}\n        onClearAllFilters={onClearAllFilters}\n        onChangeOwner={onChangeOwner}\n        onDelete={onDelete}\n        onCreate={onCreate}\n        isRowSelected={({ row }) => row.id === selectedInstance}\n        getUrlForInstance={getUrlForInstance}\n        onDetails={onDetailsClick}\n        onConnection={onConnectionsClick}\n        onClickConnectionTabLink={() => {\n          /* TODO */\n        }}\n        onClickSupportLink={() => {\n          /* TODO */\n        }}\n        onInstanceLinkClick={() => {\n          /* TODO */\n        }}\n        onQuickstartGuide={onQuickstartGuide}\n        canHaveInstanceLink={({ status }) => ReadyStatuses.includes(status)}\n        canOpenConnection={({ status }) => ReadyStatuses.includes(status)}\n        canChangeOwner={() => true}\n        canDelete={() => true}\n      />\n    </>\n  );\n};\n","import { QuickStartContext } from \"@patternfly/quickstarts\";\nimport type { CreateKafkaInstanceServices } from \"@rhoas/app-services-ui-components\";\nimport { CreateKafkaInstance } from \"@rhoas/app-services-ui-components\";\nimport { useCreateKafkaMutation } from \"consoledot-api\";\nimport type { FunctionComponent } from \"react\";\nimport { useCallback, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport type { ControlPlaneNavigationProps } from \"../routesConsts\";\nimport { ControlPlaneRouteRoot } from \"../routesConsts\";\nimport { useCreateKafkaCallbacks } from \"./useCreateKafkaCallbacks\";\n\nexport const CreateKafkaInstanceRoute: FunctionComponent<\n  ControlPlaneNavigationProps\n> = ({ instancesHref }) => {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const history = useHistory();\n  const callbacks = useCreateKafkaCallbacks();\n  const createKafkaInstance = useCreateKafkaMutation();\n  const qsContext = useContext(QuickStartContext);\n\n  const onClickKafkaOverview = () => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    history.push(`overview`);\n  };\n\n  const onClickQuickStart = useCallback(() => {\n    qsContext.setActiveQuickStart &&\n      qsContext.setActiveQuickStart(\"getting-started\");\n  }, [qsContext]);\n\n  const onCreate = useCallback<CreateKafkaInstanceServices[\"onCreate\"]>(\n    function (instance, onSuccess, onError) {\n      const onOnSuccess = () => {\n        onSuccess();\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n        history.push(ControlPlaneRouteRoot);\n      };\n      void createKafkaInstance.mutateAsync({\n        instance,\n        onSuccess: onOnSuccess,\n        onError,\n      });\n    },\n    [createKafkaInstance, history]\n  );\n\n  const onCancel = useCallback(() => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    history.push(instancesHref);\n  }, [history, instancesHref]);\n\n  return (\n    <CreateKafkaInstance\n      {...callbacks}\n      isModalOpen={true}\n      onCancel={onCancel}\n      onClickContactUs={onClickKafkaOverview}\n      onClickKafkaOverview={onClickKafkaOverview}\n      onClickQuickStart={onClickQuickStart}\n      onCreate={onCreate}\n      onLearnHowToAddStreamingUnits={onClickKafkaOverview}\n      onLearnMoreAboutSizes={onClickKafkaOverview}\n      subscriptionOptionsHref={document.location.href + \"/../overview\"}\n      appendTo={() =>\n        (document.getElementById(\"chrome-app-render-root\") as HTMLElement) ||\n        document.body\n      }\n    />\n  );\n};\n","import { useChrome } from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport {\n  useDeveloperInstanceAvailabilityFetchQuery,\n  useProviderRegionSizesFetchQuery,\n  useProvidersWithRegionsFetchQuery,\n  useStandardQuotaFetchQuery,\n} from \"consoledot-api\";\nimport { useCallback } from \"react\";\nimport type { CreateKafkaInstanceProps, StandardSizes } from \"ui\";\n\nexport function useCreateKafkaCallbacks() {\n  const { auth } = useChrome();\n\n  const getUsername = useCallback(async () => {\n    const username = (await auth.getUser())?.identity.user?.username;\n    if (!username) {\n      return Promise.reject(\"Invalid user\");\n    }\n    return username;\n  }, [auth]);\n\n  const checkDeveloperAvailabilityQuery =\n    useDeveloperInstanceAvailabilityFetchQuery();\n\n  const standardQuotaQuery = useStandardQuotaFetchQuery(true);\n  const providersWithRegionsQuery = useProvidersWithRegionsFetchQuery();\n  const getProvidersInfo = useProvidersWithRegionsFetchQuery();\n  const getProviderRegionsSizes = useProviderRegionSizesFetchQuery();\n\n  const checkDeveloperAvailability = useCallback<\n    CreateKafkaInstanceProps[\"checkDeveloperAvailability\"]\n  >(\n    async ({ onAvailable, onUsed, onUnavailable }) => {\n      try {\n        const available = await checkDeveloperAvailabilityQuery(getUsername);\n\n        if (available) {\n          onAvailable();\n        } else {\n          onUsed();\n        }\n      } catch {\n        onUnavailable();\n      }\n    },\n    [checkDeveloperAvailabilityQuery, getUsername]\n  );\n\n  const checkStandardQuota = useCallback<\n    CreateKafkaInstanceProps[\"checkStandardQuota\"]\n  >(\n    async ({ onQuotaAvailable, onNoQuotaAvailable, onOutOfQuota }) => {\n      try {\n        const {\n          hasTrialQuota,\n          remainingPrepaidQuota,\n          remainingMarketplaceQuota,\n          marketplaceSubscriptions,\n        } = await standardQuotaQuery();\n\n        if (\n          remainingMarketplaceQuota !== undefined ||\n          remainingPrepaidQuota !== undefined\n        ) {\n          if (\n            (remainingMarketplaceQuota || 0) === 0 &&\n            (remainingPrepaidQuota || 0) === 0\n          ) {\n            onOutOfQuota({\n              quota: {\n                marketplaceSubscriptions,\n              },\n            });\n          } else {\n            onQuotaAvailable({\n              quota: {\n                remainingPrepaidQuota,\n                remainingMarketplaceQuota,\n                marketplaceSubscriptions,\n              },\n            });\n          }\n        } else {\n          onNoQuotaAvailable({ hasTrialQuota });\n        }\n      } catch (e) {\n        onNoQuotaAvailable({ hasTrialQuota: false });\n      }\n    },\n    [standardQuotaQuery]\n  );\n\n  const fetchProvidersWithRegions = useCallback<\n    CreateKafkaInstanceProps[\"fetchProvidersWithRegions\"]\n  >(\n    async (plan, { onAvailable, onUnavailable }) => {\n      try {\n        const providers = await providersWithRegionsQuery(plan);\n        onAvailable(providers);\n      } catch {\n        onUnavailable();\n      }\n    },\n    [providersWithRegionsQuery]\n  );\n\n  const getStandardSizes = useCallback<\n    CreateKafkaInstanceProps[\"getStandardSizes\"]\n  >(\n    async (provider, region) => {\n      const providersInfo = await getProvidersInfo(\"standard\");\n      const providerInfo = providersInfo.providers.find(\n        (p) => p.id === provider\n      );\n      if (!providerInfo) {\n        return Promise.reject(\"Invalid cloud provider\");\n      }\n      return getProviderRegionsSizes(providerInfo, region, \"standard\");\n    },\n    [getProviderRegionsSizes, getProvidersInfo]\n  );\n\n  const getTrialSizes = useCallback<CreateKafkaInstanceProps[\"getTrialSizes\"]>(\n    async (provider, region) => {\n      let standardSizes: StandardSizes;\n\n      try {\n        standardSizes = await getStandardSizes(provider, region);\n        if (standardSizes.length === 0) {\n          throw new Error(\"No standard sizes found\");\n        }\n      } catch {\n        // It can happen that the selected provider doesn't support standard instances.\n        // In this case we provide a faux sample list of sizes just to make the slider happy.\n        standardSizes = [\n          { id: \"1\", displayName: \"1\", quota: 1 },\n          { id: \"2\", displayName: \"2\", quota: 2 },\n        ] as StandardSizes;\n      }\n      const providersInfo = await getProvidersInfo(\"developer\");\n      const providerInfo = providersInfo.providers.find(\n        (p) => p.id === provider\n      );\n      if (!providerInfo) {\n        return Promise.reject(\"Invalid cloud provider\");\n      }\n      const trialSizes = await getProviderRegionsSizes(\n        providerInfo,\n        region,\n        \"developer\"\n      );\n      return {\n        standard: standardSizes,\n        trial: trialSizes[0],\n      };\n    },\n    [getProviderRegionsSizes, getProvidersInfo, getStandardSizes]\n  );\n  return {\n    checkDeveloperAvailability,\n    checkStandardQuota,\n    fetchProvidersWithRegions,\n    getStandardSizes,\n    getTrialSizes,\n  };\n}\n","import { useKafka } from \"consoledot-api\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport type { ControlPlaneRouteParams } from \"./routesConsts\";\nimport { ControlPlaneRoutePath } from \"./routesConsts\";\n\nexport function useControlPlaneGate() {\n  const match = useRouteMatch<ControlPlaneRouteParams>(ControlPlaneRoutePath);\n  if (!match) {\n    throw Error(\"useControlPlaneGate used outside the expected route\");\n  }\n  const { data: instance } = useKafka(match.params.id, true);\n  return { instance: instance as NonNullable<typeof instance>, match };\n}\n","import { useDeleteKafkaMutation } from \"consoledot-api\";\nimport type { FunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { DeleteKafkaInstance } from \"ui\";\nimport { ReadyStatuses } from \"ui-models/src/models/kafka\";\nimport type { ControlPlaneNavigationProps } from \"../routesConsts\";\nimport { useControlPlaneGate } from \"../useControlPlaneGate\";\n\nexport const DeleteKafkaInstanceRoute: FunctionComponent<\n  ControlPlaneNavigationProps\n> = ({ instancesHref }) => {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const history = useHistory();\n\n  const { instance } = useControlPlaneGate();\n  const { mutateAsync, isLoading: isDeleting } = useDeleteKafkaMutation();\n\n  const onCancel = useCallback(() => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    history.push(instancesHref);\n  }, [history, instancesHref]);\n\n  const onDelete = useCallback(() => {\n    void mutateAsync({\n      id: instance.id,\n      onError: () => {\n        // TODO: alert\n      },\n      onSuccess: () => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n        history.replace(instancesHref);\n      },\n    });\n  }, [mutateAsync, history, instance?.id, instancesHref]);\n\n  return (\n    <DeleteKafkaInstance\n      isModalOpen={true}\n      isDeleting={isDeleting}\n      onCancel={onCancel}\n      onDelete={onDelete}\n      instanceName={\n        ReadyStatuses.includes(instance.status) ? instance.name : undefined\n      }\n      appendTo={() =>\n        (document.getElementById(\"chrome-app-render-root\") as HTMLElement) ||\n        document.body\n      }\n    />\n  );\n};\n","import { useUpdateKafkaMutation, useUserAccounts } from \"consoledot-api\";\nimport type { FunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport type { ChangeKafkaOwnerProps } from \"ui\";\nimport { ChangeKafkaOwner } from \"ui\";\n\nimport type { ControlPlaneNavigationProps } from \"../routesConsts\";\nimport { useControlPlaneGate } from \"../useControlPlaneGate\";\n\nexport const ChangeOwnerRoute: FunctionComponent<\n  ControlPlaneNavigationProps\n> = ({ instancesHref }) => {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const history = useHistory();\n\n  const { instance } = useControlPlaneGate();\n  const { data: accounts } = useUserAccounts({});\n  const updateInstance = useUpdateKafkaMutation();\n\n  const onCancel = useCallback(() => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    history.push(instancesHref);\n  }, [history, instancesHref]);\n\n  const onConfirm = useCallback(\n    (newOwner: string) => {\n      updateInstance.mutate(\n        {\n          id: instance.id,\n          updates: { owner: newOwner },\n        },\n        {\n          onSuccess: () => {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n            history.replace(instancesHref);\n          },\n        }\n      );\n    },\n    [history, instance.id, instancesHref, updateInstance]\n  );\n\n  const savingState = ((): ChangeKafkaOwnerProps[\"savingState\"] => {\n    if (updateInstance.isLoading) return \"saving\";\n    if (updateInstance.isError) {\n      return updateInstance.error.type === \"invalid-user\"\n        ? \"invalid-user\"\n        : \"unknown-error\";\n    }\n    return \"idle\";\n  })();\n\n  return (\n    <ChangeKafkaOwner\n      currentOwner={instance.owner}\n      accounts={accounts?.accounts.map((a) => ({\n        id: a.username,\n        displayName: a.displayName,\n      }))}\n      onConfirm={onConfirm}\n      onCancel={onCancel}\n      savingState={savingState}\n    />\n  );\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { RedirectOnGateError } from \"../RedirectOnGateError\";\nimport {\n  CreateKafkaInstanceRoute,\n  DeleteKafkaInstanceRoute,\n  KafkaInstancesRoute,\n} from \"./routes\";\nimport { ChangeOwnerRoute } from \"./routes/ChangeOwnerRoute\";\nimport {\n  ControlPlaneChangeOwnerPath,\n  ControlPlaneDeleteInstancePath,\n  ControlPlaneNewInstancePath,\n  ControlPlaneRoutePath,\n} from \"./routesConsts\";\n\nexport const ControlPlaneRoutes: VoidFunctionComponent = () => {\n  return (\n    <Route path={ControlPlaneRoutePath} exact>\n      <Route path={ControlPlaneNewInstancePath}>\n        <CreateKafkaInstanceRoute instancesHref={\"/kafkas\"} />\n      </Route>\n      <RedirectOnGateError redirectUrl={\"/kafkas\"}>\n        <Route path={ControlPlaneDeleteInstancePath}>\n          <DeleteKafkaInstanceRoute instancesHref={\"/kafkas\"} />\n        </Route>\n        <Route path={ControlPlaneChangeOwnerPath}>\n          <ChangeOwnerRoute instancesHref={\"/kafkas\"} />\n        </Route>\n      </RedirectOnGateError>\n      <KafkaInstancesRoute\n        getUrlForInstance={(instance) => `/kafkas/${instance.id}/details`}\n      />\n    </Route>\n  );\n};\n","import type { ControlPlaneNavigationProps } from \"../control-plane/routesConsts\";\nimport { ControlPlaneRouteRoot } from \"../control-plane/routesConsts\";\n\nexport const DataPlaneRoutePath =\n  `${ControlPlaneRouteRoot}/:id/details` as const;\nexport type DataPlaneRouteParams = { id: string };\nexport type DataPlaneTopicRouteParams = { id: string; topicName: string };\n\nexport const DataPlaneTopicRoutePath =\n  `${ControlPlaneRouteRoot}/:id/details/topics/:topicName` as const;\n\nexport type DataPlaneNavigationProps = {\n  instanceDetailsHref: (instanceId: string) => string;\n  instanceTopicsHref: (instanceId: string) => string;\n} & ControlPlaneNavigationProps;\n\nexport type DataPlaneTopicNavigationProps = {\n  instanceDetailsHref: (instanceId: string) => string;\n  instanceTopicsHref: (instanceId: string) => string;\n  topicHref: (instanceId: string, topicName: string) => string;\n  deleteTopicHref: (instanceId: string, topicName: string) => string;\n  updateTopicHref: (instanceId: string, topicName: string) => string;\n} & ControlPlaneNavigationProps;\n","import { useKafka } from \"consoledot-api\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport type { DataPlaneRouteParams } from \"./routesConsts\";\nimport { DataPlaneRoutePath } from \"./routesConsts\";\n\nexport function useDataPlaneGate() {\n  const match = useRouteMatch<DataPlaneRouteParams>(DataPlaneRoutePath);\n  if (!match) {\n    throw Error(\"useDataPlaneGate used outside the expected route\");\n  }\n  const { data: instance } = useKafka(match.params.id, true);\n  return { instance: instance as NonNullable<typeof instance>, match };\n}\n","import type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport type { DataPlaneHeaderProps } from \"ui\";\nimport { DataPlaneHeader } from \"ui\";\nimport { ReadyStatuses } from \"ui-models/src/models/kafka\";\nimport { useDrawer } from \"../../control-plane\";\nimport type { ControlPlaneNavigationProps } from \"../../control-plane/routesConsts\";\nimport { useDataPlaneGate } from \"../useDataPlaneGate\";\n\nexport const DataPlaneHeaderConnected: VoidFunctionComponent<\n  ControlPlaneNavigationProps & Pick<DataPlaneHeaderProps, \"activeSection\">\n> = ({ instancesHref, activeSection }) => {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const history = useHistory();\n  const { setActiveTab, toggleExpanded } = useDrawer();\n\n  const {\n    instance,\n    match: { url },\n  } = useDataPlaneGate();\n\n  const sectionsHref = {\n    dashboard: `${url}/dashboard`,\n    topics: `${url}/topics`,\n    consumer: `${url}/consumer-groups`,\n    permissions: `${url}/acls`,\n    settings: `${url}/settings`,\n  };\n\n  const onDelete = useCallback(() => {\n    // TODO: unhardcode this url\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    history.push(`${instancesHref}/${instance.id}/delete`);\n  }, [history, instance, instancesHref]);\n\n  return (\n    <DataPlaneHeader\n      instancesHref={instancesHref}\n      instanceName={instance?.name || \"\"}\n      activeSection={activeSection}\n      sectionsHref={sectionsHref}\n      onDetails={() => {\n        setActiveTab(\"details\");\n        toggleExpanded(true);\n      }}\n      onConnection={() => {\n        setActiveTab(\"connections\");\n        toggleExpanded(true);\n      }}\n      canOpenConnection={\n        instance ? ReadyStatuses.includes(instance?.status) : false\n      }\n      canChangeOwner={true /* TODO */}\n      onChangeOwner={() => false /* TODO */}\n      canDelete={true /* TODO */}\n      onDelete={onDelete}\n    />\n  );\n};\n","import { PageSection } from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport type { ControlPlaneNavigationProps } from \"../../control-plane/routesConsts\";\nimport { DataPlaneHeaderConnected } from \"./DataPlaneHeaderConnected\";\n\nexport const AclsRoute: VoidFunctionComponent<ControlPlaneNavigationProps> = ({\n  instancesHref,\n}) => {\n  return (\n    <>\n      <DataPlaneHeaderConnected\n        instancesHref={instancesHref}\n        activeSection={\"permissions\"}\n      />\n      <PageSection>TODO</PageSection>\n    </>\n  );\n};\n","import {\n  usePaginationSearchParams,\n  useSortableSearchParams,\n  useURLSearchParamsChips,\n} from \"@rhoas/app-services-ui-components\";\nimport { KafkaTopicsSortableColumns, useTopics } from \"consoledot-api\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { KafkaTopics, useTopicLabels } from \"ui\";\nimport type { ControlPlaneNavigationProps } from \"../../control-plane/routesConsts\";\nimport { useDataPlaneGate } from \"../useDataPlaneGate\";\nimport { DataPlaneHeaderConnected } from \"./DataPlaneHeaderConnected\";\n\nexport const TopicsRoute: VoidFunctionComponent<\n  ControlPlaneNavigationProps\n> = ({ instancesHref }) => {\n  const labels = useTopicLabels();\n\n  const { instance } = useDataPlaneGate();\n  const { page, perPage, setPagination, setPaginationQuery } =\n    usePaginationSearchParams();\n  const resetPaginationQuery = useCallback(\n    () => setPaginationQuery(1, perPage),\n    [perPage, setPaginationQuery]\n  );\n\n  const topicChips = useURLSearchParamsChips(\"topic\", resetPaginationQuery);\n  const [isColumnSortable, sort, sortDirection] = useSortableSearchParams(\n    KafkaTopicsSortableColumns,\n    labels.fields\n  );\n  const { data } = useTopics({\n    id: instance?.id,\n    adminUrl: instance?.adminUrl,\n    page,\n    perPage,\n    sort: sort || undefined,\n    direction: sortDirection,\n    filter: topicChips.chips[0],\n    plan: instance.plan,\n  });\n  return (\n    <>\n      <DataPlaneHeaderConnected\n        instancesHref={instancesHref}\n        activeSection={\"topics\"}\n      />\n      <KafkaTopics\n        topics={data?.topics}\n        itemCount={data?.count}\n        page={page}\n        perPage={perPage}\n        topicName={topicChips.chips}\n        getUrlFortopic={(row) => `./topics/${row.name}`}\n        isColumnSortable={isColumnSortable}\n        onDelete={() => {\n          /* TODO */\n        }}\n        onEdit={() => {\n          /* TODO */\n        }}\n        onSearchTopic={(value) => {\n          topicChips.clear();\n          topicChips.toggle(value);\n        }}\n        onClearAllFilters={topicChips.clear}\n        onCreateTopic={() => {\n          /* TODO */\n        }}\n        onPageChange={setPagination}\n        onRemoveTopicChip={topicChips.clear}\n        onRemoveTopicChips={topicChips.clear}\n        onTopicLinkClick={() => {\n          /* TODO */\n        }}\n      />\n    </>\n  );\n};\n","import { useUpdateKafkaMutation } from \"consoledot-api\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport type { SettingsProps } from \"ui\";\nimport { Settings as SettingsComp } from \"ui\";\nimport type { ControlPlaneNavigationProps } from \"../../control-plane/routesConsts\";\nimport { useDataPlaneGate } from \"../useDataPlaneGate\";\nimport { DataPlaneHeaderConnected } from \"./DataPlaneHeaderConnected\";\n\nexport const SettingsRoute: VoidFunctionComponent<\n  ControlPlaneNavigationProps\n> = ({ instancesHref }) => {\n  const { instance } = useDataPlaneGate();\n  const updateInstance = useUpdateKafkaMutation();\n\n  const onSubmitReAuthentication = useCallback<\n    SettingsProps[\"onSubmitReAuthentication\"]\n  >(\n    async (reauthenticationEnabled) => {\n      try {\n        await updateInstance.mutateAsync({\n          id: instance.id,\n          updates: { reauthentication_enabled: reauthenticationEnabled },\n        });\n        return reauthenticationEnabled;\n      } catch {\n        return instance.request.reauthentication_enabled;\n      }\n    },\n    [instance, updateInstance]\n  );\n  return (\n    <>\n      <DataPlaneHeaderConnected\n        instancesHref={instancesHref}\n        activeSection={\"settings\"}\n      />\n      <SettingsComp\n        onSubmitReAuthentication={onSubmitReAuthentication}\n        reauthenticationEnabled={instance.request.reauthentication_enabled}\n      />\n    </>\n  );\n};\n","import {\n  useKafkaFetchQuery,\n  useKafkaKpisFetchQuery,\n  useKafkaMetricsFetchQuery,\n  useTopicsFetchQuery,\n  useTopicsMetricsFetchQuery,\n} from \"consoledot-api\";\nimport {\n  metricsDismissLagAlerts,\n  metricsIsLagAlertsDismissed,\n} from \"local-storage-helpers\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback, useState } from \"react\";\nimport type { MetricsProps } from \"ui\";\nimport { Metrics } from \"ui\";\nimport type { ControlPlaneNavigationProps } from \"../../control-plane/routesConsts\";\nimport { useDataPlaneGate } from \"../useDataPlaneGate\";\nimport { DataPlaneHeaderConnected } from \"./DataPlaneHeaderConnected\";\n\nexport const DashboardRoute: VoidFunctionComponent<\n  ControlPlaneNavigationProps\n> = ({ instancesHref }) => {\n  const {\n    instance,\n    match: { params },\n  } = useDataPlaneGate();\n  const [hasUserAlreadyClosedAlert, setHasUserAlreadyClosedAlert] = useState(\n    metricsIsLagAlertsDismissed()\n  );\n\n  const onAlertClose = useCallback(() => {\n    setHasUserAlreadyClosedAlert(true);\n    metricsDismissLagAlerts();\n  }, []);\n\n  const queryInstance = useKafkaFetchQuery();\n  const queryKpisMetrics = useKafkaKpisFetchQuery();\n  const queryInstanceMetrics = useKafkaMetricsFetchQuery();\n  const queryTopicMetrics = useTopicsMetricsFetchQuery();\n  const queryTopics = useTopicsFetchQuery();\n\n  const getMetricsKpi: MetricsProps[\"getMetricsKpi\"] = useCallback(async () => {\n    const kpis = await queryKpisMetrics(params.id);\n    return {\n      ...kpis,\n      topicPartitionsLimit: instance.maxPartitions || 0,\n    };\n  }, [instance, params.id, queryKpisMetrics]);\n\n  const getKafkaInstanceMetrics: MetricsProps[\"getKafkaInstanceMetrics\"] =\n    useCallback(\n      async ({ interval, duration }) => {\n        const [instance, metrics] = await Promise.all([\n          queryInstance(params.id),\n          queryInstanceMetrics({ id: params.id, duration, interval }),\n        ]);\n        if (!instance) {\n          return Promise.reject(\"Can't retrieve instance\");\n        }\n        return {\n          ...metrics,\n          diskSpaceLimit:\n            (instance.request.max_data_retention_size?.bytes || 0) / 1073741824,\n          connectionsLimit: instance.connections || 0,\n          connectionRateLimit: instance.connectionRate || 0,\n        };\n      },\n      [params.id, queryInstance, queryInstanceMetrics]\n    );\n\n  const getTopicsMetrics: MetricsProps[\"getTopicsMetrics\"] = useCallback(\n    async ({ interval, duration, selectedTopic }) => {\n      const [instance, metrics] = await Promise.all([\n        queryInstance(params.id),\n        queryTopicMetrics({ id: params.id, duration, interval, selectedTopic }),\n      ]);\n      if (!instance || !instance.adminUrl) {\n        return Promise.reject(\"Can't retrieve instance\");\n      }\n      const kafkaTopics = (\n        await queryTopics({\n          id: instance.id,\n          adminUrl: instance.adminUrl,\n          page: 1,\n          perPage: 1000,\n          plan: instance.plan,\n        })\n      ).topics.map((t) => t.name);\n      return {\n        ...metrics,\n        kafkaTopics,\n      };\n    },\n    [params.id, queryInstance, queryTopicMetrics, queryTopics]\n  );\n\n  return (\n    <>\n      <DataPlaneHeaderConnected\n        instancesHref={instancesHref}\n        activeSection={\"dashboard\"}\n      />\n      <Metrics\n        onCreateTopic={() => {\n          /* TODO */\n        }}\n        onAlertClose={onAlertClose}\n        hasUserAlreadyClosedAlert={hasUserAlreadyClosedAlert}\n        getKafkaInstanceMetrics={getKafkaInstanceMetrics}\n        getTopicsMetrics={getTopicsMetrics}\n        getMetricsKpi={getMetricsKpi}\n      />\n    </>\n  );\n};\n","import {\n  usePaginationSearchParams,\n  useSortableSearchParams,\n  useURLSearchParamsChips,\n} from \"@rhoas/app-services-ui-components\";\nimport {\n  KafkaConsumerGroupSortableColumns,\n  useConsumerGroups,\n} from \"consoledot-api\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { ConsumerGroups } from \"ui\";\nimport type { ControlPlaneNavigationProps } from \"../../control-plane/routesConsts\";\nimport { useDataPlaneGate } from \"../useDataPlaneGate\";\nimport { DataPlaneHeaderConnected } from \"./DataPlaneHeaderConnected\";\n\nexport const ConsumerGroupsRoute: VoidFunctionComponent<\n  ControlPlaneNavigationProps\n> = ({ instancesHref }) => {\n  const { instance } = useDataPlaneGate();\n  const { page, perPage, setPagination, setPaginationQuery } =\n    usePaginationSearchParams();\n  const resetPaginationQuery = useCallback(\n    () => setPaginationQuery(1, perPage),\n    [perPage, setPaginationQuery]\n  );\n\n  const consumerName = useURLSearchParamsChips(\n    \"consumer\",\n    resetPaginationQuery\n  );\n  const [isColumnSortable, sort, sortDirection] = useSortableSearchParams(\n    KafkaConsumerGroupSortableColumns,\n    {\n      name: \"TODO name\",\n    },\n    \"name\",\n    \"desc\"\n  );\n  const { data } = useConsumerGroups({\n    id: instance?.id,\n    adminUrl: instance?.adminUrl,\n    page,\n    perPage,\n    sort: sort || undefined,\n    direction: sortDirection,\n    groupId: consumerName.chips[0],\n  });\n  return (\n    <>\n      <DataPlaneHeaderConnected\n        instancesHref={instancesHref}\n        activeSection={\"consumer\"}\n      />\n      <ConsumerGroups\n        consumers={data?.groups}\n        itemCount={data?.count}\n        page={page}\n        perPage={perPage}\n        consumerName={consumerName.chips}\n        isRowSelected={() => false}\n        isColumnSortable={isColumnSortable}\n        onDelete={() => {\n          /* TODO */\n        }}\n        onSearchConsumer={(value) => {\n          consumerName.clear();\n          consumerName.toggle(value);\n        }}\n        onClearAllFilters={consumerName.clear}\n        onPageChange={setPagination}\n        onRemoveConsumerChip={consumerName.clear}\n        onRemoveConsumerChips={consumerName.clear}\n        onViewPartition={() => {\n          /* TODO */\n        }}\n        onViewResetOffset={() => {\n          /* TODO */\n        }}\n      />\n    </>\n  );\n};\n","import { useTopic } from \"consoledot-api\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport type { DataPlaneTopicRouteParams } from \"./routesConsts\";\nimport { DataPlaneTopicRoutePath } from \"./routesConsts\";\nimport { useDataPlaneGate } from \"./useDataPlaneGate\";\n\nexport function useTopicGate() {\n  const { instance } = useDataPlaneGate();\n  const match = useRouteMatch<DataPlaneTopicRouteParams>(\n    DataPlaneTopicRoutePath\n  );\n  if (!match) {\n    throw Error(\"useDataPlaneGate used outside the expected route\");\n  }\n  const { data: topic } = useTopic(\n    {\n      id: instance.id,\n      adminUrl: instance.adminUrl,\n      topicName: match.params.topicName,\n      plan: instance.plan,\n    },\n    true\n  );\n\n  return {\n    instance,\n    topic: topic as NonNullable<typeof topic>,\n    match,\n  };\n}\n","import type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport type { DataPlaneTopicHeaderProps } from \"ui\";\nimport { DataPlaneTopicHeader } from \"ui\";\nimport { ReadyStatuses } from \"ui-models/src/models/kafka\";\nimport { useDrawer } from \"../../control-plane\";\nimport type { DataPlaneNavigationProps } from \"../routesConsts\";\nimport { useTopicGate } from \"../useTopicGate\";\n\nexport const DataPlaneTopicHeaderConnected: VoidFunctionComponent<\n  DataPlaneNavigationProps & Pick<DataPlaneTopicHeaderProps, \"activeSection\">\n> = ({\n  instanceDetailsHref,\n  instanceTopicsHref,\n  instancesHref,\n  activeSection,\n}) => {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const history = useHistory();\n  const { setActiveTab, toggleExpanded } = useDrawer();\n  const {\n    instance,\n    topic,\n    match: { url },\n  } = useTopicGate();\n\n  const tabsHref = {\n    consumer: `${url}/consumer-groups`,\n    messages: `${url}/messages`,\n    properties: `${url}/properties`,\n    schemas: `${url}/schemas`,\n  };\n\n  const onDelete = useCallback(() => {\n    // TODO: unhardcode this url\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    history.push(`${instancesHref}/${instance.id}/delete`);\n  }, [history, instance, instancesHref]);\n\n  return (\n    <DataPlaneTopicHeader\n      instancesHref={instancesHref}\n      instanceName={instance.name}\n      instanceDetailHref={instanceDetailsHref(instance.id)}\n      instanceTopicsHref={instanceTopicsHref(instance.id)}\n      activeSection={activeSection}\n      topicName={topic.name}\n      tabsHref={tabsHref}\n      onDetails={() => {\n        setActiveTab(\"details\");\n        toggleExpanded(true);\n      }}\n      onConnection={() => {\n        setActiveTab(\"connections\");\n        toggleExpanded(true);\n      }}\n      canOpenConnection={\n        instance ? ReadyStatuses.includes(instance?.status) : false\n      }\n      canChangeOwner={true /* TODO */}\n      onChangeOwner={() => false /* TODO */}\n      canDelete={true /* TODO */}\n      onDelete={onDelete}\n    />\n  );\n};\n","import {\n  usePaginationSearchParams,\n  useSortableSearchParams,\n  useURLSearchParamsChips,\n} from \"@rhoas/app-services-ui-components\";\nimport {\n  KafkaConsumerGroupSortableColumns,\n  useConsumerGroups,\n} from \"consoledot-api\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { ConsumerGroups } from \"ui\";\nimport type { DataPlaneNavigationProps } from \"../routesConsts\";\nimport { useTopicGate } from \"../useTopicGate\";\nimport { DataPlaneTopicHeaderConnected } from \"./DataPlaneTopicHeaderConnected\";\n\nexport const TopicConsumerGroupsRoute: VoidFunctionComponent<\n  DataPlaneNavigationProps\n> = ({ instanceDetailsHref, instanceTopicsHref, instancesHref }) => {\n  const { instance, topic } = useTopicGate();\n\n  const { page, perPage, setPagination, setPaginationQuery } =\n    usePaginationSearchParams();\n\n  const resetPaginationQuery = useCallback(\n    () => setPaginationQuery(1, perPage),\n    [perPage, setPaginationQuery]\n  );\n\n  const consumerName = useURLSearchParamsChips(\n    \"consumer\",\n    resetPaginationQuery\n  );\n  const [isColumnSortable, sort, sortDirection] = useSortableSearchParams(\n    KafkaConsumerGroupSortableColumns,\n    {\n      name: \"TODO name\",\n    },\n    \"name\",\n    \"desc\"\n  );\n\n  const { data } = useConsumerGroups({\n    id: instance?.id,\n    adminUrl: instance?.adminUrl,\n    page,\n    perPage,\n    sort: sort || undefined,\n    direction: sortDirection,\n    groupId: consumerName.chips[0],\n    topic: topic.name,\n  });\n\n  return (\n    <>\n      <DataPlaneTopicHeaderConnected\n        instancesHref={instancesHref}\n        instanceDetailsHref={instanceDetailsHref}\n        instanceTopicsHref={instanceTopicsHref}\n        activeSection={\"consumer\"}\n      />\n      <ConsumerGroups\n        consumers={data?.groups}\n        itemCount={data?.count}\n        page={page}\n        perPage={perPage}\n        consumerName={consumerName.chips}\n        isRowSelected={() => false}\n        isColumnSortable={isColumnSortable}\n        onDelete={() => {\n          /* TODO */\n        }}\n        onSearchConsumer={(value) => {\n          consumerName.clear();\n          consumerName.toggle(value);\n        }}\n        onClearAllFilters={consumerName.clear}\n        onPageChange={setPagination}\n        onRemoveConsumerChip={consumerName.clear}\n        onRemoveConsumerChips={consumerName.clear}\n        onViewPartition={() => {\n          /* TODO */\n        }}\n        onViewResetOffset={() => {\n          /* TODO */\n        }}\n      />\n    </>\n  );\n};\n","import { useMessagesFetchQuery } from \"consoledot-api\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport type { KafkaMessageBrowserProps } from \"ui\";\nimport { KafkaMessageBrowser } from \"ui\";\nimport type { DataPlaneNavigationProps } from \"../routesConsts\";\nimport { useTopicGate } from \"../useTopicGate\";\nimport { DataPlaneTopicHeaderConnected } from \"./DataPlaneTopicHeaderConnected\";\n\nexport const TopicMessagesGroupsRoute: VoidFunctionComponent<\n  DataPlaneNavigationProps\n> = ({ instanceDetailsHref, instanceTopicsHref, instancesHref }) => {\n  const { instance, topic } = useTopicGate();\n  const kafkaTopicMessagesFetchQuery = useMessagesFetchQuery();\n\n  const getMessages = useCallback<KafkaMessageBrowserProps[\"getMessages\"]>(\n    async (params) => {\n      if (!instance.adminUrl) {\n        throw Error(\"Invalid instance adminUrl\");\n      }\n      const messages = await kafkaTopicMessagesFetchQuery({\n        ...params,\n        id: instance.id,\n        adminUrl: instance.adminUrl,\n        topicName: topic.name,\n      });\n      return {\n        messages,\n        partitions: topic.partitions.length,\n      };\n    },\n    [\n      instance.adminUrl,\n      instance.id,\n      kafkaTopicMessagesFetchQuery,\n      topic.name,\n      topic.partitions.length,\n    ]\n  );\n\n  return (\n    <>\n      <DataPlaneTopicHeaderConnected\n        instancesHref={instancesHref}\n        instanceDetailsHref={instanceDetailsHref}\n        instanceTopicsHref={instanceTopicsHref}\n        activeSection={\"messages\"}\n      />\n      <KafkaMessageBrowser getMessages={getMessages} />\n    </>\n  );\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { TopicProperties } from \"ui\";\nimport type { DataPlaneTopicNavigationProps } from \"../routesConsts\";\nimport { useTopicGate } from \"../useTopicGate\";\nimport { DataPlaneTopicHeaderConnected } from \"./DataPlaneTopicHeaderConnected\";\n\nexport const TopicPropertiesRoute: VoidFunctionComponent<\n  DataPlaneTopicNavigationProps\n> = ({\n  instanceDetailsHref,\n  instanceTopicsHref,\n  instancesHref,\n  deleteTopicHref,\n  updateTopicHref,\n}) => {\n  const { instance, topic } = useTopicGate();\n\n  return (\n    <>\n      <DataPlaneTopicHeaderConnected\n        instancesHref={instancesHref}\n        instanceDetailsHref={instanceDetailsHref}\n        instanceTopicsHref={instanceTopicsHref}\n        activeSection={\"properties\"}\n      />\n      <TopicProperties\n        topic={topic}\n        deleteTopicHref={deleteTopicHref(instance.id, topic.name)}\n        updateTopicHref={updateTopicHref(instance.id, topic.name)}\n      />\n    </>\n  );\n};\n","/* eslint-disable */\n// @ts-nocheck\nimport { useChrome } from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport { I18nProvider } from \"@rhoas/app-services-ui-components\";\nimport type { Auth, Config } from \"@rhoas/app-services-ui-shared\";\nimport { AuthContext, ConfigContext } from \"@rhoas/app-services-ui-shared\";\n/* tslint:disable */\nimport type { Registry } from \"@rhoas/registry-management-sdk\";\nimport type { ScalprumComponentProps } from \"@scalprum/react-core\";\nimport { ScalprumComponent } from \"@scalprum/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport type { DataPlaneNavigationProps } from \"../routesConsts\";\nimport { useTopicGate } from \"../useTopicGate\";\nimport { DataPlaneTopicHeaderConnected } from \"./DataPlaneTopicHeaderConnected\";\n\nexport const TopicSchemasRoute: VoidFunctionComponent<\n  DataPlaneNavigationProps\n> = ({ instanceDetailsHref, instanceTopicsHref, instancesHref }) => {\n  const chrome = useChrome();\n  const { topic } = useTopicGate();\n  const processor = (([_, m]: [string, { entry: string[] }]) =>\n    m.entry.map(\n      (e) => `/beta/apps/srs-ui-build${e}`\n    )) as unknown as ScalprumComponentProps[\"processor\"];\n  const processor2 = (([_, m]: [string, { entry: string[] }]) =>\n    m.entry.map(\n      (e) => `/beta/apps/sr-ui-build${e}`\n    )) as unknown as ScalprumComponentProps[\"processor\"];\n  const basename = \"/service-registry\";\n  const auth: Auth = {\n    srs: { getToken: chrome.auth.getToken },\n  };\n  const config: Config = {\n    srs: { apiBasePath: process.env.API_URL },\n  };\n  return (\n    <>\n      <DataPlaneTopicHeaderConnected\n        instancesHref={instancesHref}\n        instanceDetailsHref={instanceDetailsHref}\n        instanceTopicsHref={instanceTopicsHref}\n        activeSection={\"schemas\"}\n      />\n      <AuthContext.Provider value={auth}>\n        <ConfigContext.Provider value={config}>\n          <I18nProvider\n            lng={\"en\"}\n            resources={{\n              en: {\n                common: () =>\n                  import(\n                    \"@rhoas/app-services-ui-components/locales/en/common.json\"\n                  ),\n                \"service-registry\": () =>\n                  import(\n                    \"@rhoas/app-services-ui-components/locales/en/service-registry.json\"\n                  ),\n                srsTemporaryFixMe: () => import(\"./srs-locales.json\"),\n              },\n            }}\n            debug={true}\n          >\n            <ScalprumComponent\n              appName=\"srs\"\n              module=\"./ServiceRegistryMapping\"\n              scope=\"srs\"\n              ErrorComponent={<div>opsie</div>}\n              processor={processor}\n              basename={basename}\n              topicName={topic.name}\n              renderSchema={(registry: Registry) => {\n                return (\n                  <ScalprumComponent\n                    appName=\"ar\"\n                    scope=\"ar\"\n                    ErrorComponent={<div>opsie</div>}\n                    processor={processor2}\n                    module=\"./FederatedSchemaMapping\"\n                    registry={registry}\n                    topicName={topic.name}\n                    groupId={null}\n                    version={\"latest\"}\n                    registryId={registry?.id}\n                    basename={basename}\n                  />\n                );\n              }}\n            />\n          </I18nProvider>\n        </ConfigContext.Provider>\n      </AuthContext.Provider>\n    </>\n  );\n};\n","import type { DeleteModalProps } from \"@rhoas/app-services-ui-components\";\nimport {\n  DeleteModal,\n  Trans,\n  useTranslation,\n} from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\n\nexport type DeleteKafkaTopicProps = {\n  topicName: string;\n} & Omit<\n  DeleteModalProps,\n  \"title\" | \"variant\" | \"confirmationValue\" | \"children\"\n>;\n\nexport const DeleteKafkaTopic: VoidFunctionComponent<DeleteKafkaTopicProps> = ({\n  topicName,\n  ...props\n}) => {\n  const { t } = useTranslation(\"kafka\");\n\n  return (\n    <DeleteModal\n      {...props}\n      variant={\"destructive\"}\n      title={t(\"delete_topic_title\")}\n      confirmationValue={topicName}\n    >\n      <Trans\n        ns={\"kafka\"}\n        i18nKey={\"delete_topic_message\"}\n        components={[<strong />]}\n        values={{\n          topicName,\n        }}\n      />\n    </DeleteModal>\n  );\n};\n","import { useDeleteTopicMutation } from \"consoledot-api\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { DeleteKafkaTopic } from \"ui/src/components/DeleteKafkaTopic\";\nimport type { DataPlaneTopicNavigationProps } from \"../routesConsts\";\nimport { useTopicGate } from \"../useTopicGate\";\n\nexport const TopicDeleteRoute: VoidFunctionComponent<\n  DataPlaneTopicNavigationProps\n> = ({ topicHref, instanceTopicsHref }) => {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const history = useHistory();\n\n  const { instance, topic } = useTopicGate();\n  const { mutateAsync, isLoading: isDeleting } = useDeleteTopicMutation();\n\n  const onCancel = useCallback(() => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    history.push(topicHref(instance.id, topic.name));\n  }, [history, instance.id, topic.name, topicHref]);\n\n  const onDelete = useCallback(() => {\n    if (!instance.adminUrl) {\n      throw Error(\"Invalid instance adminUrl\");\n    }\n    void mutateAsync({\n      instanceId: instance.id,\n      adminUrl: instance.adminUrl,\n      name: topic.name,\n      onError: () => {\n        // TODO: alert\n      },\n      onSuccess: () => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n        history.replace(instanceTopicsHref(instance.id));\n      },\n    });\n  }, [\n    instance.adminUrl,\n    instance.id,\n    mutateAsync,\n    topic.name,\n    history,\n    instanceTopicsHref,\n  ]);\n\n  return (\n    <DeleteKafkaTopic\n      topicName={topic.name}\n      isModalOpen={true}\n      isDeleting={isDeleting}\n      appendTo={() =>\n        (document.getElementById(\"chrome-app-render-root\") as HTMLElement) ||\n        document.body\n      }\n      onDelete={onDelete}\n      onCancel={onCancel}\n    />\n  );\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { EditTopicProperties } from \"ui\";\nimport type { DataPlaneNavigationProps } from \"../routesConsts\";\nimport { useTopicGate } from \"../useTopicGate\";\nimport { DataPlaneTopicHeaderConnected } from \"./DataPlaneTopicHeaderConnected\";\n\nexport const TopicEditPropertiesRoute: VoidFunctionComponent<\n  DataPlaneNavigationProps\n> = ({ instanceDetailsHref, instanceTopicsHref, instancesHref }) => {\n  const { topic } = useTopicGate();\n\n  return (\n    <>\n      <DataPlaneTopicHeaderConnected\n        instancesHref={instancesHref}\n        instanceDetailsHref={instanceDetailsHref}\n        instanceTopicsHref={instanceTopicsHref}\n        activeSection={\"properties\"}\n      />\n      <EditTopicProperties\n        topic={topic}\n        onCancel={() => {\n          /* TODO */\n        }}\n      />\n    </>\n  );\n};\n","import { InvalidObject } from \"@redhat-cloud-services/frontend-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport { ControlPlaneRouteRoot } from \"../control-plane/routesConsts\";\nimport { RedirectOnGateError } from \"../RedirectOnGateError\";\nimport {\n  AclsRoute,\n  ConsumerGroupsRoute,\n  DashboardRoute,\n  SettingsRoute,\n  TopicConsumerGroupsRoute,\n  TopicMessagesGroupsRoute,\n  TopicPropertiesRoute,\n  TopicSchemasRoute,\n  TopicsRoute,\n} from \"./routes\";\nimport { TopicDeleteRoute } from \"./routes/TopicDeleteRoute\";\nimport { TopicEditPropertiesRoute } from \"./routes/TopicEditPropertiesRoute\";\n\nimport { DataPlaneRoutePath } from \"./routesConsts\";\n\nconst instanceDetailsHref = (id: string) =>\n  `${ControlPlaneRouteRoot}/${id}/details`;\n\nconst instanceTopicsHref = (id: string) =>\n  `${ControlPlaneRouteRoot}/${id}/details/topics`;\n\nconst topicHref = (id: string, topic: string) =>\n  `${instanceDetailsHref(id)}/topics/${topic}/properties`;\n\nconst updateTopicHref = (id: string, topic: string) =>\n  `${topicHref(id, topic)}/edit`;\n\nconst deleteTopicHref = (id: string, topic: string) =>\n  `${topicHref(id, topic)}/delete`;\n\nexport const DataPlaneRoutes: VoidFunctionComponent = () => {\n  return (\n    <Route path={DataPlaneRoutePath}>\n      <RedirectOnGateError redirectUrl={\"/kafkas\"}>\n        <Switch>\n          <Route path={`${DataPlaneRoutePath}/dashboard`} exact>\n            <DashboardRoute instancesHref={\"/kafkas\"} />\n          </Route>\n\n          <Route path={`${DataPlaneRoutePath}/topics`} exact>\n            <TopicsRoute instancesHref={\"/kafkas\"} />\n          </Route>\n\n          <Route path={`${DataPlaneRoutePath}/consumer-groups`} exact>\n            <ConsumerGroupsRoute instancesHref={\"/kafkas\"} />\n          </Route>\n\n          <Route path={`${DataPlaneRoutePath}/acls`} exact>\n            <AclsRoute instancesHref={\"/kafkas\"} />\n          </Route>\n\n          <Route path={`${DataPlaneRoutePath}/settings`} exact>\n            <SettingsRoute instancesHref={\"/kafkas\"} />\n          </Route>\n\n          <Route\n            path={`${DataPlaneRoutePath}/topics`}\n            render={({ match }) => (\n              <RedirectOnGateError\n                redirectUrl={instanceTopicsHref(match.params.id)}\n              >\n                <Switch>\n                  <Route\n                    path={`${DataPlaneRoutePath}/topics/:topicName/consumer-groups`}\n                    exact\n                  >\n                    <TopicConsumerGroupsRoute\n                      instancesHref={\"/kafkas\"}\n                      instanceDetailsHref={instanceDetailsHref}\n                      instanceTopicsHref={instanceTopicsHref}\n                    />\n                  </Route>\n                  <Route\n                    path={`${DataPlaneRoutePath}/topics/:topicName/messages`}\n                    exact\n                  >\n                    <TopicMessagesGroupsRoute\n                      instancesHref={\"/kafkas\"}\n                      instanceDetailsHref={instanceDetailsHref}\n                      instanceTopicsHref={instanceTopicsHref}\n                    />\n                  </Route>\n\n                  <Route\n                    path={`${DataPlaneRoutePath}/topics/:topicName/properties/edit`}\n                    exact\n                  >\n                    <TopicEditPropertiesRoute\n                      instancesHref={\"/kafkas\"}\n                      instanceDetailsHref={instanceDetailsHref}\n                      instanceTopicsHref={instanceTopicsHref}\n                    />\n                  </Route>\n                  <Route\n                    path={`${DataPlaneRoutePath}/topics/:topicName/properties`}\n                  >\n                    <Route\n                      path={`${DataPlaneRoutePath}/topics/:topicName/properties/delete`}\n                    >\n                      <TopicDeleteRoute\n                        instancesHref={\"/kafkas\"}\n                        instanceDetailsHref={instanceDetailsHref}\n                        instanceTopicsHref={instanceTopicsHref}\n                        topicHref={topicHref}\n                        updateTopicHref={updateTopicHref}\n                        deleteTopicHref={deleteTopicHref}\n                      />\n                    </Route>\n                    <TopicPropertiesRoute\n                      instancesHref={\"/kafkas\"}\n                      instanceDetailsHref={instanceDetailsHref}\n                      instanceTopicsHref={instanceTopicsHref}\n                      topicHref={topicHref}\n                      updateTopicHref={updateTopicHref}\n                      deleteTopicHref={deleteTopicHref}\n                    />\n                  </Route>\n                  <Route\n                    path={`${DataPlaneRoutePath}/topics/:topicName/schemas`}\n                    exact\n                  >\n                    <TopicSchemasRoute\n                      instancesHref={\"/kafkas\"}\n                      instanceDetailsHref={instanceDetailsHref}\n                      instanceTopicsHref={instanceTopicsHref}\n                    />\n                  </Route>\n\n                  <Redirect\n                    from={`${DataPlaneRoutePath}/topics/:topicName/`}\n                    to={`${DataPlaneRoutePath}/topics/:topicName/consumer-groups`}\n                    exact\n                  />\n                </Switch>\n              </RedirectOnGateError>\n            )}\n          />\n\n          <Redirect\n            from={`${DataPlaneRoutePath}`}\n            to={`${DataPlaneRoutePath}/dashboard`}\n            exact\n          />\n\n          <Route>\n            <InvalidObject />\n          </Route>\n        </Switch>\n      </RedirectOnGateError>\n    </Route>\n  );\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { KafkaPageV3 } from \"ui\";\n\nexport const OverviewRoute: VoidFunctionComponent = () => {\n  return <KafkaPageV3 />;\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport { ControlPlaneRoutes, DrawerProvider } from \"./control-plane\";\nimport { DataPlaneRoutes } from \"./data-plane\";\nimport { OverviewRoute } from \"./overview\";\n\nexport const Routes: VoidFunctionComponent = () => {\n  return (\n    <Switch>\n      <Route path={\"/overview\"} exact>\n        <OverviewRoute />\n      </Route>\n      <Redirect from={\"/\"} to={\"/kafkas\"} exact />\n      <Route path={\"/kafkas\"}>\n        <DrawerProvider>\n          {/* don't move these routes around! the order is important */}\n          <ControlPlaneRoutes />\n          <DataPlaneRoutes />\n        </DrawerProvider>\n      </Route>\n      <Route path={\"\"} exact></Route>\n    </Switch>\n  );\n};\n","import NotificationsPortal from \"@redhat-cloud-services/frontend-components-notifications/NotificationPortal\";\nimport { notificationsReducer } from \"@redhat-cloud-services/frontend-components-notifications/redux\";\nimport { getRegistry } from \"@redhat-cloud-services/frontend-components-utilities/Registry\";\nimport { useChrome } from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { memo, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport type { Reducer } from \"redux\";\n\nimport \"./App.scss\";\n\nimport { Routes } from \"./routes/Routes\";\n\nconst App = memo(() => {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const history = useHistory();\n  const { updateDocumentTitle, on } = useChrome();\n\n  const { t } = useTranslation();\n  const title = t(\"kafka:rhosakTitle\");\n\n  useEffect(() => {\n    const registry = getRegistry();\n    registry.register({ notifications: notificationsReducer as Reducer });\n\n    updateDocumentTitle(title);\n\n    const unregister = on(\"APP_NAVIGATION\", (event) => {\n      console.dir(event);\n      if (event.navId) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n        history.push(\"/\" + event.navId === \"/\" ? \"\" : event.navId);\n      }\n    });\n    return () => {\n      if (unregister) {\n        unregister();\n      }\n    };\n  }, [history, on, title, updateDocumentTitle]);\n\n  return (\n    <>\n      <NotificationsPortal />\n      <Routes />\n    </>\n  );\n});\n\nexport default App;\n","/* eslint-disable */\n// @ts-nocheck\nimport { useChrome } from \"@redhat-cloud-services/frontend-components/useChrome\";\nimport { AssetsContext } from \"@rhoas/app-services-ui-shared\";\nimport type { ScalprumComponentProps } from \"@scalprum/react-core\";\nimport { ScalprumComponent } from \"@scalprum/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useState } from \"react\";\n\nexport const appIdentifier = \"applicationServices\";\n\nconst basePath = \"/apps/rhoas-guides-build\";\nconst getPath = () => {\n  return basePath;\n};\n\nexport const QuickstartLoader: VoidFunctionComponent = () => {\n  const [loaded, setLoaded] = useState(false);\n  const chrome = useChrome();\n  const { quickStarts } = chrome;\n\n  const onLoad = (qs: unknown) => {\n    if (quickStarts) {\n      setLoaded(true); // unload federated module\n      quickStarts.set(appIdentifier, qs);\n    }\n  };\n\n  const processor = (([_, m]: [string, { entry: string[] }]) =>\n    m.entry.map(\n      (e) => `${basePath}${e}`\n    )) as unknown as ScalprumComponentProps[\"processor\"];\n\n  return (\n    <AssetsContext.Provider value={{ getPath }}>\n      {!loaded ? (\n        <ScalprumComponent\n          appName=\"guides\"\n          scope=\"guides\"\n          module=\"./QuickStartLoader\"\n          ErrorComponent={<div>opsie</div>}\n          processor={processor}\n          showDrafts={false}\n          onLoad={onLoad}\n        />\n      ) : null}\n    </AssetsContext.Provider>\n  );\n};\n","import notificationsMiddleware from \"@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware\";\nimport type ReducerRegistry from \"@redhat-cloud-services/frontend-components-utilities/ReducerRegistry\";\nimport { getRegistry } from \"@redhat-cloud-services/frontend-components-utilities/Registry\";\nimport type { Middleware } from \"redux\";\nimport promiseMiddleware from \"redux-promise-middleware\";\n\n// eslint-disable-next-line  @typescript-eslint/no-explicit-any\nexport let registry: ReducerRegistry<any>;\n\nexport function init(...middleware: Middleware[]) {\n  registry = getRegistry({}, [\n    promiseMiddleware,\n    notificationsMiddleware({ errorDescriptionKey: [\"detail\", \"stack\"] }),\n    ...middleware,\n  ]);\n  return registry;\n}\n","import type {\n  ConsumerGroupState,\n  GroupsApi,\n  SortDirection,\n} from \"@rhoas/kafka-instance-sdk\";\nimport type { ConsumerGroup } from \"ui-models/src/models/consumer-group\";\nimport type { KafkaConsumerGroupSortableColumn } from \"../types\";\n\nexport type FetchConsumerGroupsParams = {\n  getConsumerGroups: GroupsApi[\"getConsumerGroups\"];\n  page?: number;\n  perPage?: number;\n  sort?: KafkaConsumerGroupSortableColumn;\n  direction?: SortDirection;\n  topic?: string;\n  groupId?: string;\n};\n\nexport async function fetchConsumerGroups({\n  getConsumerGroups,\n  page,\n  perPage,\n  topic,\n  groupId,\n  sort,\n  direction,\n}: FetchConsumerGroupsParams): Promise<{\n  groups: ConsumerGroup[];\n  count: number;\n}> {\n  const response = await getConsumerGroups(\n    undefined,\n    undefined,\n    perPage,\n    page,\n    topic,\n    groupId,\n    direction,\n    sort\n  );\n  const groups = (response.data.items || []).map<ConsumerGroup>((t) => ({\n    groupId: t.groupId || \"\",\n    state: stateMapping[t.state as ConsumerGroupState],\n    consumers: t.consumers,\n    activeConsumers: t.metrics?.activeConsumers,\n    laggingPartitions: t.metrics?.laggingPartitions,\n    unassignedPartitions: t.metrics?.unassignedPartitions,\n  }));\n  const count = response.data.total;\n  return { count, groups };\n}\n\nconst stateMapping: { [state in ConsumerGroupState]: ConsumerGroup[\"state\"] } =\n  {\n    DEAD: \"Dead\",\n    EMPTY: \"Empty\",\n    STABLE: \"Stable\",\n    UNKNOWN: \"Unknown\",\n    COMPLETING_REBALANCE: \"CompletingRebalance\",\n    PREPARING_REBALANCE: \"PreparingRebalance\",\n  };\n","import type { DefaultApi, InstantQuery } from \"@rhoas/kafka-management-sdk\";\nimport type { NoUndefinedField } from \"../types\";\n\nexport async function fetchKafkaKpis(\n  getMetricsByInstantQuery: DefaultApi[\"getMetricsByInstantQuery\"],\n  id: string\n) {\n  let topics = 0,\n    topicPartitions = 0,\n    consumerGroups = 0;\n\n  const response = await getMetricsByInstantQuery(id, [\n    \"kafka_topic:kafka_topic_partitions:sum\", // (Number of topic partitions)\n    \"kafka_topic:kafka_topic_partitions:count\", // (Number of topics)\n    \"consumergroup:kafka_consumergroup_members:count\", // (number of consumer groups - note that this metric will appear after a consumer group is created. There should be handled by the UI in a way that the metric isn't visible if no consumer groups are created)\n  ]);\n\n  const safeMetrics: NoUndefinedField<InstantQuery[]> = (response.data.items ||\n    []) as NoUndefinedField<InstantQuery[]>;\n\n  safeMetrics.forEach(({ metric, value }) => {\n    const { __name__: name } = metric;\n\n    switch (name) {\n      case \"kafka_topic:kafka_topic_partitions:sum\":\n        topicPartitions = value;\n        break;\n      case \"kafka_topic:kafka_topic_partitions:count\":\n        topics = value;\n        break;\n      case \"consumergroup:kafka_consumergroup_members:count\":\n        consumerGroups = value;\n        break;\n    }\n  });\n  return {\n    consumerGroups,\n    topicPartitions,\n    topics,\n  };\n}\n","import type { DefaultApi } from \"@rhoas/kafka-management-sdk\";\nimport type { GetKafkaInstanceMetricsResponse, TimeSeriesMetrics } from \"ui\";\nimport type { SafeRangeQuery } from \"../types\";\n\nexport type FetchKafkaMetricsProps = {\n  getMetricsByRangeQuery: DefaultApi[\"getMetricsByRangeQuery\"];\n  id: string;\n  duration: number;\n  interval: number;\n};\n\nexport async function fetchKafkaMetrics({\n  getMetricsByRangeQuery,\n  id,\n  duration,\n  interval,\n}: FetchKafkaMetricsProps): Promise<GetKafkaInstanceMetricsResponse> {\n  const response = await getMetricsByRangeQuery(id, duration, interval, [\n    \"kubelet_volume_stats_used_bytes\",\n    \"kafka_namespace:kafka_server_socket_server_metrics_connection_creation_rate:sum\",\n    \"kafka_namespace:kafka_server_socket_server_metrics_connection_count:sum\",\n  ]);\n\n  // Remove all results with no data. Not sure this can really  happen but since\n  // the types allow for undefined we need to do a bit of defensive programming.\n  const safeMetrics: SafeRangeQuery[] = (response.data.items || []).filter(\n    (m) =>\n      // defensive programming\n      !(\n        m.values &&\n        m.metric &&\n        m.metric.topic &&\n        m.metric.name &&\n        m.metric.persistentvolumeclaim &&\n        m.metric.persistentvolumeclaim.includes(\"zookeeper\")\n      )\n  ) as SafeRangeQuery[];\n\n  const usedDiskSpaceMetrics: TimeSeriesMetrics = {};\n  const connectionAttemptRateMetrics: TimeSeriesMetrics = {};\n  const clientConnectionsMetrics: TimeSeriesMetrics = {};\n\n  const connectionRateLimit = 0,\n    connectionsLimit = 0,\n    diskSpaceLimit = 0;\n\n  safeMetrics.forEach((m) => {\n    const { __name__: name } = m.metric;\n\n    function addAggregatedValuesTo(metric: TimeSeriesMetrics) {\n      m.values.forEach(\n        ({ value, timestamp }) =>\n          (metric[timestamp] = value + (metric[timestamp] || 0))\n      );\n    }\n\n    switch (name) {\n      case \"kubelet_volume_stats_used_bytes\":\n        addAggregatedValuesTo(usedDiskSpaceMetrics);\n        break;\n      case \"kafka_namespace:kafka_server_socket_server_metrics_connection_creation_rate:sum\":\n        addAggregatedValuesTo(connectionAttemptRateMetrics);\n        break;\n      case \"kafka_namespace:kafka_server_socket_server_metrics_connection_count:sum\":\n        addAggregatedValuesTo(clientConnectionsMetrics);\n        break;\n    }\n  });\n\n  return {\n    usedDiskSpaceMetrics,\n    clientConnectionsMetrics,\n    connectionAttemptRateMetrics,\n    diskSpaceLimit,\n    connectionRateLimit,\n    connectionsLimit,\n  };\n}\n","export function valuesToQuery(\n  field: string,\n  values: string[],\n  comparison: \"%\" | \"=\"\n): string | undefined {\n  return values\n    .map((v) =>\n      comparison === \"%\"\n        ? `${field} like %${v.trim()}%`\n        : `${field} = ${v.trim()}`\n    )\n    .join(\" or \");\n}\n","import type { DefaultApi, KafkaRequest } from \"@rhoas/kafka-management-sdk\";\nimport type { SimplifiedStatus } from \"ui-models/src/models/kafka\";\nimport { SimplifiedStatuses } from \"ui-models/src/models/kafka\";\nimport type { KafkaInstanceEnhanced } from \"../transformers/kafkaRequestToKafkaInstanceEnhanched\";\nimport type { KafkaInstancesSortableColumn } from \"../types\";\nimport { valuesToQuery } from \"./valuesToQuery\";\n\nconst uiColumnMapping: {\n  [key in KafkaInstancesSortableColumn]: keyof KafkaRequest;\n} = {\n  name: \"name\",\n  owner: \"owner\",\n  provider: \"cloud_provider\",\n  region: \"region\",\n  createdAt: \"created_at\",\n};\nexport type FetchKafkasParams = {\n  getKafkas: DefaultApi[\"getKafkas\"];\n  dataMapper: (data: KafkaRequest) => Promise<KafkaInstanceEnhanced>;\n  page: number;\n  perPage: number;\n  name: string[];\n  owner: string[];\n  status: SimplifiedStatus[];\n  sort: KafkaInstancesSortableColumn;\n  direction: \"asc\" | \"desc\";\n};\n\nexport async function fetchKafkas(params: FetchKafkasParams): Promise<{\n  instances: KafkaInstanceEnhanced[];\n  count: number;\n}> {\n  const {\n    name,\n    status,\n    owner,\n    sort,\n    direction,\n    page,\n    perPage,\n    dataMapper,\n    getKafkas,\n  } = params;\n  const search = filtersToSearch(name, owner, status);\n\n  const res = await getKafkas(\n    page.toString(10),\n    perPage.toString(10),\n    sort ? `${uiColumnMapping[sort]} ${direction}` : undefined,\n    search\n  );\n  const rawInstances = res.data.items;\n  const count = res.data.total;\n  const instances = await Promise.all(rawInstances.map(dataMapper));\n  return {\n    instances,\n    count,\n  };\n}\n\nexport function filtersToSearch(\n  name: string[],\n  owner: string[],\n  status: SimplifiedStatus[]\n): string {\n  const querystring = [\n    valuesToQuery(\"name\", name, \"%\"),\n    valuesToQuery(\"owner\", owner, \"%\"),\n    valuesToQuery(\n      \"status\",\n      status.flatMap((s) => SimplifiedStatuses[s]),\n      \"=\"\n    ),\n  ]\n    .filter(Boolean)\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    .map((q) => `(${q!})`)\n    .join(\" and \");\n  return querystring;\n}\n","import type {\n  DefaultApi,\n  SupportedKafkaSize,\n} from \"@rhoas/kafka-management-sdk\";\nimport type { Plan, Size } from \"ui-models/src/models/kafka\";\nimport type { CloudProviderInfoWithRegionsCapacity } from \"./fetchProvidersWithRegions\";\n\nexport type SizeWithLimits = Size & { trialDurationHours: number };\n\nexport async function fetchProviderRegionSizes(\n  api: DefaultApi[\"getInstanceTypesByCloudProviderAndRegion\"],\n  providerInfo: CloudProviderInfoWithRegionsCapacity,\n  region: string,\n  instanceType: Plan\n) {\n  const regions = providerInfo.regions;\n  const regionInfo = regions.find((r) => r.id === region);\n  const availableSizes =\n    regionInfo?.capacity.flatMap((c) =>\n      c.available_sizes.map((s) => `${c.instance_type}.${s}`)\n    ) || [];\n  const sizes = await api(providerInfo.id, region);\n  if (!sizes?.data?.instance_types) {\n    throw new Error(`No instance_types from backend`);\n  }\n\n  const standardSizes =\n    sizes?.data?.instance_types.find((i) => i.id === instanceType)?.sizes || [];\n\n  return standardSizes.map(\n    apiSizeToComponentSize.bind(\n      undefined,\n      (id) => !availableSizes.includes(`${instanceType}.${id}`)\n    )\n  );\n}\n\n//\n// export async function fetchProviderRegionSizesForPlanStandard (\n//   api: DefaultApi['getInstanceTypesByCloudProviderAndRegion'], providerInfo: CloudProviderInfoWithRegionsCapacity, region: string\n// )  {\n//   return fetchProviderRegionSizes(api, providerInfo, region, \"standard\");\n// };\n//\n// export const fetchProviderRegionSizesForPlanDeveloper = (\n//   api: DefaultApi['getInstanceTypesByCloudProviderAndRegion'], providerInfo: CloudProviderInfoWithRegionsCapacity, region: string\n//\n// ) => {\n//   const { data: standardSizes, isError } = await fetchProviderRegionSizes(\n//     provider,\n//     region,\n//     \"standard\"\n//   );\n//   const { data: developerSizes } = fetchProviderRegionSizes(\n//     provider,\n//     region,\n//     \"developer\"\n//   );\n//   return useQuery({\n//     queryKey: [],\n//     queryFn: () => {\n//       return {\n//         standard:\n//           standardSizes ||\n//           ([\n//             { id: \"1\", displayName: \"1\" },\n//             { id: \"2\", displayName: \"2\" },\n//           ] as StandardSizes),\n//         trial: developerSizes![0],\n//       };\n//     },\n//     enabled: (!!standardSizes || isError) && !!developerSizes,\n//   });\n// };\n\nfunction apiSizeToComponentSize(\n  isDisabled: (id: string) => boolean,\n  apiSize: SupportedKafkaSize\n): SizeWithLimits {\n  const s = apiSize as Required<SupportedKafkaSize>;\n  return {\n    id: s.id,\n    displayName: s.display_name,\n    quota: s.quota_consumed,\n    ingress: (s.ingress_throughput_per_sec.bytes || 0) / 1048576,\n    egress: (s.egress_throughput_per_sec.bytes || 0) / 1048576,\n    storage: Math.round((s.max_data_retention_size.bytes || 0) / 1073741824),\n    connections: s.total_max_connections,\n    connectionRate: s.max_connection_attempts_per_sec,\n    maxPartitions: s.max_partitions,\n    messageSize: (s.max_message_size.bytes || 0) / 1048576,\n    status: s.maturity_status === \"stable\" ? \"stable\" : \"preview\",\n    trialDurationHours: s.lifespan_seconds ? s.lifespan_seconds / 60 / 60 : 0,\n    isDisabled: isDisabled(s.id),\n  };\n}\n","import type { DefaultApi } from \"@rhoas/kafka-management-sdk\";\nimport type { CloudProviderInfo } from \"ui\";\nimport type { CloudProvider, Plan } from \"ui-models/src/models/kafka\";\n\nexport type CloudProviderInfoWithRegionsCapacity = Omit<\n  CloudProviderInfo,\n  \"regions\"\n> & {\n  regions: Awaited<ReturnType<typeof fetchProviderRegions>>;\n};\n\nexport async function fetchProvidersWithRegions(\n  getCloudProviders: DefaultApi[\"getCloudProviders\"],\n  getCloudProviderRegions: DefaultApi[\"getCloudProviderRegions\"],\n  plan: Plan\n) {\n  const res = await getCloudProviders();\n  const allProviders = res?.data?.items || [];\n\n  const providers = (\n    await Promise.all(\n      allProviders\n        .filter((p) => p.enabled)\n        .map(async (provider) => {\n          const regions = await fetchProviderRegions(\n            getCloudProviderRegions,\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            provider.id!,\n            plan\n          );\n          const providerInfo: CloudProviderInfoWithRegionsCapacity = {\n            id: provider.id as CloudProvider,\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            displayName: provider.display_name!,\n            regions,\n          };\n          return regions.length > 0 ? providerInfo : null;\n        })\n    )\n  ).filter((p) => Boolean(p)) as CloudProviderInfoWithRegionsCapacity[];\n  if (providers.length === 0) {\n    throw new Error(\"No cloud providers with capacity found\");\n  }\n  const firstProvider = providers[0];\n  return { providers, defaultProvider: firstProvider?.id };\n}\n\nexport async function fetchProviderRegions(\n  getCloudProviderRegions: DefaultApi[\"getCloudProviderRegions\"],\n  provider: string,\n  instanceType: Plan\n) {\n  const res = await getCloudProviderRegions(provider);\n\n  if (!res?.data?.items) {\n    return Promise.reject(\"Invalid provider\");\n  }\n\n  const regionsForInstance = res.data.items.filter(\n    (region) =>\n      region.enabled &&\n      region.capacity.some((c) => c.instance_type === instanceType)\n  );\n\n  return regionsForInstance.map((r) => {\n    const max_capacity_reached = r.capacity?.some(\n      (c) => c.instance_type === instanceType && c.available_sizes?.length === 0\n    );\n\n    return {\n      id: r.id as CloudProvider,\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      displayName: r.display_name!,\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      isDisabled: max_capacity_reached,\n      capacity: r.capacity,\n    };\n  });\n}\n","import type { QuotaCost } from \"@rhoas/account-management-sdk\";\n\nexport const standardId = \"RHOSAK\" as const;\nexport const developerId = \"RHOSAKTrial\" as const;\nexport const resourceName = \"rhosak\" as const;\n\nexport function isStandardQuota(q: QuotaCost) {\n  return q.related_resources?.find((r) => r.billing_model === \"standard\");\n}\n\nexport function isMarketplaceQuota(q: QuotaCost) {\n  return q.related_resources?.find((r) => r.billing_model === \"marketplace\");\n}\n","import type { Topic as ApiTopic } from \"@rhoas/kafka-instance-sdk/dist/generated/model/topic\";\nimport type { Plan } from \"ui-models/src/models/kafka\";\nimport type { Topic } from \"ui-models/src/models/topic\";\nimport type {\n  TopicConfig,\n  TopicConfigField,\n} from \"ui-models/src/models/topic-config\";\nimport type { Bytes, Milliseconds } from \"ui-models/src/types\";\n\nexport const developerDefaults: TopicConfig = {\n  \"cleanup.policy\": \"delete\",\n  \"delete.retention.ms\": { type: \"ms\", value: BigInt(\"86400000\") },\n  \"max.compaction.lag.ms\": { type: \"ms\", value: BigInt(\"9223372036854775807\") },\n  \"max.message.bytes\": { type: \"bytes\", value: BigInt(\"1048588\") },\n  \"message.downconversion.enable\": true,\n  \"message.timestamp.difference.max.ms\": {\n    type: \"ms\",\n    value: BigInt(\"9223372036854775807\"),\n  },\n  \"message.timestamp.type\": \"CreateTime\",\n  \"min.compaction.lag.ms\": { type: \"ms\", value: BigInt(\"0\") },\n  \"retention.bytes\": { type: \"bytes\", value: BigInt(\"-1\") },\n  \"retention.ms\": { type: \"ms\", value: BigInt(\"604800000\") },\n  \"segment.bytes\": { type: \"bytes\", value: BigInt(\"1073741824\") },\n  \"segment.ms\": { type: \"ms\", value: BigInt(\"604800000\") },\n  \"compression.type\": \"producer\",\n  \"file.delete.delay.ms\": { type: \"ms\", value: BigInt(\"60000\") },\n  \"flush.messages\": { type: \"ms\", value: BigInt(\"9223372036854775807\") },\n  \"flush.ms\": { type: \"ms\", value: BigInt(\"9223372036854775807\") },\n  \"index.interval.bytes\": { type: \"bytes\", value: BigInt(\"4096\") },\n  \"message.format.version\": \"3.0-IV1\",\n  \"min.cleanable.dirty.ratio\": 0.5,\n  \"min.insync.replicas\": 1,\n  \"segment.index.bytes\": { type: \"bytes\", value: BigInt(\"10485760\") },\n  \"segment.jitter.ms\": { type: \"ms\", value: BigInt(\"0\") },\n  \"unclean.leader.election.enable\": false,\n  preallocate: false,\n} as const;\n\nexport const standardDefaults: TopicConfig = {\n  \"cleanup.policy\": \"delete\",\n  \"delete.retention.ms\": { type: \"ms\", value: BigInt(\"86400000\") },\n  \"max.compaction.lag.ms\": { type: \"ms\", value: BigInt(\"9223372036854775807\") },\n  \"max.message.bytes\": { type: \"bytes\", value: BigInt(\"1048588\") },\n  \"message.downconversion.enable\": true,\n  \"message.timestamp.difference.max.ms\": {\n    type: \"ms\",\n    value: BigInt(\"9223372036854775807\"),\n  },\n  \"message.timestamp.type\": \"CreateTime\",\n  \"min.compaction.lag.ms\": { type: \"ms\", value: BigInt(\"0\") },\n  \"retention.bytes\": { type: \"bytes\", value: BigInt(\"-1\") },\n  \"retention.ms\": { type: \"ms\", value: BigInt(\"604800000\") },\n  \"segment.bytes\": { type: \"bytes\", value: BigInt(\"1073741824\") },\n  \"segment.ms\": { type: \"ms\", value: BigInt(\"604800000\") },\n  \"compression.type\": \"producer\",\n  \"file.delete.delay.ms\": { type: \"ms\", value: BigInt(\"60000\") },\n  \"flush.messages\": { type: \"ms\", value: BigInt(\"9223372036854775807\") },\n  \"flush.ms\": { type: \"ms\", value: BigInt(\"9223372036854775807\") },\n  \"index.interval.bytes\": { type: \"bytes\", value: BigInt(\"4096\") },\n  \"message.format.version\": \"3.0-IV1\",\n  \"min.cleanable.dirty.ratio\": 0.5,\n  \"min.insync.replicas\": 2,\n  \"segment.index.bytes\": { type: \"bytes\", value: BigInt(\"10485760\") },\n  \"segment.jitter.ms\": { type: \"ms\", value: BigInt(\"0\") },\n  \"unclean.leader.election.enable\": false,\n  preallocate: false,\n} as const;\n\nexport function topicTransformerFactory(plan: Plan) {\n  const d = plan === \"developer\" ? developerDefaults : standardDefaults;\n\n  return function topicTransformer(t: ApiTopic): Topic {\n    if (!t.name) {\n      throw new Error(`Invalid topic, name is empty: ${JSON.stringify(t)}`);\n    }\n    const cm = Object.fromEntries<string>(\n      t.config?.map((c) => [c.key as TopicConfigField, c.value]) || []\n    );\n    const config: TopicConfig = {\n      \"cleanup.policy\": cm[\"cleanup.policy\"] as TopicConfig[\"cleanup.policy\"],\n      \"delete.retention.ms\": configValueToMilliseconds(\n        cm[\"delete.retention.ms\"],\n        d[\"delete.retention.ms\"]\n      ),\n      \"max.compaction.lag.ms\": configValueToMilliseconds(\n        cm[\"max.compaction.lag.ms\"],\n        d[\"max.compaction.lag.ms\"]\n      ),\n      \"max.message.bytes\": configValueToBytes(\n        cm[\"max.message.bytes\"],\n        d[\"max.message.bytes\"]\n      ),\n      \"message.downconversion.enable\": configValueToBoolean(\n        cm[\"message.downconversion.enable\"],\n        d[\"message.downconversion.enable\"]\n      ),\n      \"message.timestamp.difference.max.ms\": configValueToMilliseconds(\n        cm[\"message.timestamp.difference.max.ms\"],\n        d[\"message.timestamp.difference.max.ms\"]\n      ),\n      \"message.timestamp.type\": cm[\n        \"message.timestamp.type\"\n      ] as TopicConfig[\"message.timestamp.type\"],\n      \"min.compaction.lag.ms\": configValueToMilliseconds(\n        cm[\"min.compaction.lag.ms\"],\n        d[\"min.compaction.lag.ms\"]\n      ),\n      \"retention.bytes\": configValueToBytes(\n        cm[\"retention.bytes\"],\n        d[\"retention.bytes\"]\n      ),\n      \"retention.ms\": configValueToMilliseconds(\n        cm[\"retention.ms\"],\n        d[\"retention.ms\"]\n      ),\n      \"segment.bytes\": configValueToBytes(\n        cm[\"segment.bytes\"],\n        d[\"segment.bytes\"]\n      ),\n      \"segment.ms\": configValueToMilliseconds(\n        cm[\"segment.ms\"],\n        d[\"segment.ms\"]\n      ),\n      \"compression.type\": cm[\n        \"compression.type\"\n      ] as TopicConfig[\"compression.type\"],\n      \"file.delete.delay.ms\": configValueToMilliseconds(\n        cm[\"file.delete.delay.ms\"],\n        d[\"file.delete.delay.ms\"]\n      ),\n      \"flush.messages\": configValueToMilliseconds(\n        cm[\"flush.messages\"],\n        d[\"flush.messages\"]\n      ),\n      \"flush.ms\": configValueToMilliseconds(cm[\"flush.ms\"], d[\"flush.ms\"]),\n      \"follower.replication.throttled.replicas\":\n        cm[\"follower.replication.throttled.replicas\"],\n      \"index.interval.bytes\": configValueToBytes(\n        cm[\"index.interval.bytes\"],\n        d[\"index.interval.bytes\"]\n      ),\n      \"leader.replication.throttled.replicas\":\n        cm[\"leader.replication.throttled.replicas\"],\n      \"message.format.version\": cm[\"message.format.version\"],\n      \"min.cleanable.dirty.ratio\": configValueToNumber(\n        cm[\"min.cleanable.dirty.ratio\"],\n        d[\"min.cleanable.dirty.ratio\"]\n      ),\n      \"min.insync.replicas\": configValueToNumber(\n        cm[\"min.insync.replicas\"],\n        d[\"min.insync.replicas\"]\n      ),\n      \"segment.index.bytes\": configValueToBytes(\n        cm[\"segment.index.bytes\"],\n        d[\"segment.index.bytes\"]\n      ),\n      \"segment.jitter.ms\": configValueToMilliseconds(\n        cm[\"segment.jitter.ms\"],\n        d[\"segment.jitter.ms\"]\n      ),\n      \"unclean.leader.election.enable\": configValueToBoolean(\n        cm[\"unclean.leader.election.enable\"],\n        d[\"unclean.leader.election.enable\"]\n      ),\n      preallocate: configValueToBoolean(cm[\"preallocate\"], d[\"preallocate\"]),\n    };\n    return {\n      name: t.name,\n      partitions: t.partitions || [],\n      ...config,\n    };\n  };\n}\n\nfunction configValueToMilliseconds(\n  value: string,\n  defaultIfEmpty: Milliseconds\n): Milliseconds {\n  return value && value.trim().length > 0\n    ? { type: \"ms\", value: BigInt(value.trim()) }\n    : defaultIfEmpty;\n}\n\nfunction configValueToBytes(value: string, defaultIfEmpty: Bytes): Bytes {\n  return value && value.trim().length > 0\n    ? { type: \"bytes\", value: BigInt(value.trim()) }\n    : defaultIfEmpty;\n}\n\nfunction configValueToNumber(value: string, defaultIfError: number): number {\n  return parseInt(value, 10) || defaultIfError;\n}\n\nfunction configValueToBoolean(value: string, defaultIfError: boolean): boolean {\n  try {\n    const v: unknown = JSON.parse(value);\n    if (typeof v === \"boolean\") {\n      return v;\n    }\n  } catch {\n    // not a boolean, fallback to the default\n  }\n  return defaultIfError;\n}\n","import type { SortDirection, TopicsApi } from \"@rhoas/kafka-instance-sdk\";\nimport type { Plan } from \"ui-models/src/models/kafka\";\nimport type { Topic } from \"ui-models/src/models/topic\";\nimport { topicTransformerFactory } from \"../transformers/topicTransformer\";\nimport type { KafkaTopicsSortableColumn } from \"../types\";\n\nexport type FetchTopicsParams = {\n  getTopics: TopicsApi[\"getTopics\"];\n  page?: number;\n  perPage?: number;\n  sort?: KafkaTopicsSortableColumn;\n  direction?: SortDirection;\n  filter?: string;\n  plan: Plan;\n};\n\nexport async function fetchTopics({\n  getTopics,\n  page,\n  perPage,\n  filter,\n  sort,\n  direction,\n  plan,\n}: FetchTopicsParams): Promise<{ topics: Topic[]; count: number }> {\n  const response = await getTopics(\n    undefined,\n    undefined,\n    perPage,\n    filter,\n    page,\n    direction,\n    sort\n  );\n  const topics = (response.data.items || []).map<Topic>(\n    topicTransformerFactory(plan)\n  );\n  const count = response.data.total;\n  return { count, topics };\n}\n","import type { DefaultApi } from \"@rhoas/kafka-management-sdk\";\nimport type {\n  GetTopicsMetricsResponse,\n  PartitionBytesMetric,\n  TimeSeriesMetrics,\n} from \"ui\";\nimport type { SafeRangeQuery } from \"../types\";\n\nexport type FetchTopicsMetricsProps = {\n  getMetricsByRangeQuery: DefaultApi[\"getMetricsByRangeQuery\"];\n  id: string;\n  duration: number;\n  interval: number;\n  selectedTopic: string | undefined;\n};\n\nexport async function fetchTopicsMetrics({\n  getMetricsByRangeQuery,\n  id,\n  duration,\n  interval,\n  selectedTopic,\n}: FetchTopicsMetricsProps): Promise<\n  Omit<GetTopicsMetricsResponse, \"kafkaTopics\">\n> {\n  const response = await getMetricsByRangeQuery(id, duration, interval, [\n    \"kafka_topic:kafka_server_brokertopicmetrics_bytes_in_total:rate5m\",\n    \"kafka_topic:kafka_server_brokertopicmetrics_bytes_out_total:rate5m\",\n    \"kafka_topic:kafka_log_log_size:sum\",\n    \"kafka_topic:kafka_server_brokertopicmetrics_messages_in_total:rate5m\",\n  ]);\n\n  // Remove all results with no data. Not sure this can really  happen but since\n  // the types allow for undefined we need to do a bit of defensive programming.\n  const safeMetrics: SafeRangeQuery[] = (response.data.items || []).filter(\n    (m) =>\n      // defensive programming\n      !(m.values && m.metric && m.metric.topic && m.metric.name)\n  ) as SafeRangeQuery[];\n\n  // Also filter for metrics about the selectedTopic, if specified\n  const filteredMetrics = safeMetrics.filter((m) =>\n    // filter for metrics for the selectedTopic, if needed\n    selectedTopic !== undefined ? m.metric?.topic === selectedTopic : true\n  );\n\n  // get the unique topics we have metrics for in the selected time range\n  const topics = Array.from(new Set(safeMetrics.map((m) => m.metric.topic)));\n\n  const bytesIncoming: TimeSeriesMetrics = {};\n  const bytesOutgoing: TimeSeriesMetrics = {};\n  const bytesPerPartition: PartitionBytesMetric = {};\n  const incomingMessageRate: TimeSeriesMetrics = {};\n\n  filteredMetrics.forEach((m) => {\n    const { __name__: name, topic } = m.metric;\n\n    function addAggregatedTotalBytesTo(metric: TimeSeriesMetrics) {\n      m.values.forEach(\n        ({ value, timestamp }) =>\n          (metric[timestamp] = value + (metric[timestamp] || 0))\n      );\n    }\n\n    function addAggregatePartitionBytes() {\n      const partition = bytesPerPartition[topic] || {};\n      m.values.forEach(\n        ({ value, timestamp }) =>\n          (partition[timestamp] = value + (partition[timestamp] || 0))\n      );\n      bytesPerPartition[topic] = partition;\n    }\n\n    switch (name) {\n      case \"kafka_topic:kafka_server_brokertopicmetrics_bytes_in_total:rate5m\":\n        addAggregatedTotalBytesTo(bytesIncoming);\n        break;\n      case \"kafka_topic:kafka_server_brokertopicmetrics_bytes_out_total:rate5m\":\n        addAggregatedTotalBytesTo(bytesOutgoing);\n        break;\n      case \"kafka_topic:kafka_log_log_size:sum\":\n        addAggregatePartitionBytes();\n        break;\n      case \"kafka_topic:kafka_server_brokertopicmetrics_messages_in_total:rate5m\":\n        addAggregatedTotalBytesTo(incomingMessageRate);\n        break;\n    }\n  });\n\n  return {\n    metricsTopics: topics,\n    bytesOutgoing,\n    bytesIncoming,\n    bytesPerPartition,\n    incomingMessageRate,\n  };\n}\n","import type {\n  Principal,\n  PrincipalApi,\n} from \"@redhat-cloud-services/rbac-client\";\nimport type { UserAccount } from \"ui-models/src/models/user-account\";\n\nexport type FetchUserAccountsParams = {\n  getUserAccounts: PrincipalApi[\"listPrincipals\"];\n};\n\nexport async function fetchUserAccounts({\n  getUserAccounts,\n}: FetchUserAccountsParams): Promise<{\n  accounts: UserAccount[];\n  count: number;\n}> {\n  const response = await getUserAccounts(-1);\n  const accounts = response.data.data.map<UserAccount>((p) => {\n    const fullObject = p as Principal;\n    return {\n      username: fullObject.username,\n      displayName: `${fullObject.first_name || \"\"} ${\n        fullObject.last_name || \"\"\n      }`.trim(),\n      email: fullObject.email,\n      isOrgAdmin: fullObject.is_org_admin || false,\n    };\n  });\n  const count = accounts.length;\n  return { count, accounts };\n}\n","import { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { ReactQueryDevtools } from \"@tanstack/react-query-devtools\";\nimport { isReactQueryDevToolsEanbled } from \"local-storage-helpers\";\nimport type { FunctionComponent } from \"react\";\nimport { createContext, lazy, Suspense, useContext } from \"react\";\n\nconst ReactQueryDevtoolsProduction = lazy(() =>\n  import(\"@tanstack/react-query-devtools/build/lib/index.prod.js\").then(\n    (d) => ({\n      default: d.ReactQueryDevtools,\n    })\n  )\n);\n\ntype ApiContextProps = {\n  accessToken: () => Promise<string>;\n  basePath: string;\n  refetchInterval: number;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\nconst ApiContext = createContext<ApiContextProps>(null!);\n\nconst queryClient = new QueryClient();\n\nexport const ApiProvider: FunctionComponent<ApiContextProps> = ({\n  children,\n  ...context\n}) => {\n  const showDevTools = isReactQueryDevToolsEanbled();\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ApiContext.Provider value={context}>\n        {children}\n        <ReactQueryDevtools initialIsOpen />\n        {showDevTools && (\n          <Suspense fallback={null}>\n            <ReactQueryDevtoolsProduction />\n          </Suspense>\n        )}\n      </ApiContext.Provider>\n    </QueryClientProvider>\n  );\n};\n\nexport function useApiConfiguration() {\n  return useContext(ApiContext);\n}\n\nexport { useQueryErrorResetBoundary } from \"@tanstack/react-query\";\n","import type {\n  FetchConsumerGroupsParams,\n  FetchKafkaMetricsProps,\n  FetchKafkasParams,\n  FetchMessagesParams,\n  FetchTopicParams,\n  FetchTopicsMetricsProps,\n  FetchTopicsParams,\n  FetchUserAccountsParams,\n} from \"./fetchers\";\n\nexport const masQueries = {\n  _root: () => ({ scope: \"mas\" } as const),\n  organization: () =>\n    [{ ...masQueries._root(), entity: \"organization\" }] as const,\n  userAccounts: (params: Omit<FetchUserAccountsParams, \"getUserAccounts\">) =>\n    [{ ...masQueries._root(), entity: \"userAccounts\" }, params] as const,\n  quota: {\n    _root: () => ({ ...masQueries._root(), entity: \"quota\" } as const),\n    available: (params: { organization?: string }) =>\n      [\n        { ...masQueries.quota._root(), subentity: \"available\", ...params },\n      ] as const,\n    developerAvailability: () =>\n      [\n        { ...masQueries.quota._root(), subentity: \"developerAvailability\" },\n      ] as const,\n    standardAvailability: () =>\n      [\n        { ...masQueries.quota._root(), subentity: \"standardAvailability\" },\n      ] as const,\n  },\n} as const;\n\nexport const kafkaQueries = {\n  _root: () => ({ scope: \"kafka\" } as const),\n  list: (params: Omit<FetchKafkasParams, \"dataMapper\" | \"getKafkas\">) =>\n    [\n      {\n        ...kafkaQueries._root(),\n        entity: \"list\",\n      },\n      params,\n    ] as const,\n  instance: {\n    _root: ({ id, adminUrl }: { id?: string; adminUrl?: string }) =>\n      ({ ...kafkaQueries._root(), entity: \"instance\", id, adminUrl } as const),\n    details: (params: { id?: string }) =>\n      [\n        { ...kafkaQueries.instance._root(params), subentity: \"details\" },\n      ] as const,\n    topics: ({\n      id,\n      adminUrl,\n      ...params\n    }: { id?: string; adminUrl?: string } & Omit<\n      FetchTopicsParams,\n      \"getTopics\"\n    >) =>\n      [\n        {\n          ...kafkaQueries.instance._root({ id, adminUrl }),\n          subentity: \"topics\",\n        },\n        params,\n      ] as const,\n    topic: ({\n      id,\n      adminUrl,\n      topicName,\n    }: { id?: string; adminUrl?: string } & Omit<\n      FetchTopicParams,\n      \"getTopic\"\n    >) =>\n      [\n        {\n          ...kafkaQueries.instance._root({ id, adminUrl }),\n          subentity: \"topic\",\n        },\n        { topicName },\n      ] as const,\n    topicMessages: ({\n      id,\n      adminUrl,\n      topicName,\n      ...params\n    }: { id?: string; adminUrl?: string } & Omit<\n      FetchMessagesParams,\n      \"consumeRecords\"\n    >) =>\n      [\n        {\n          ...kafkaQueries.instance._root({ id, adminUrl }),\n          subentity: \"topicMessages\",\n        },\n        { topicName, ...params },\n      ] as const,\n    consumerGroups: (\n      params: { id?: string; adminUrl?: string } & Omit<\n        FetchConsumerGroupsParams,\n        \"getConsumerGroups\"\n      >\n    ) =>\n      [\n        {\n          ...kafkaQueries.instance._root(params),\n          subentity: \"consumer-groups\",\n        },\n        params,\n      ] as const,\n    metrics: {\n      _root: ({ id }: { id: string }) =>\n        ({\n          ...kafkaQueries.instance._root({ id }),\n          subentity: \"metrics\",\n          id,\n        } as const),\n      kpi: (params: { id: string }) =>\n        [{ ...kafkaQueries.instance._root(params), type: \"kpi\" }] as const,\n      instance: ({\n        id,\n        ...params\n      }: Omit<FetchKafkaMetricsProps, \"getMetricsByRangeQuery\">) =>\n        [\n          {\n            ...kafkaQueries.instance._root({ id }),\n            type: \"instance\",\n          },\n          params,\n        ] as const,\n      topic: ({\n        id,\n        ...params\n      }: Omit<FetchTopicsMetricsProps, \"getMetricsByRangeQuery\">) =>\n        [\n          {\n            ...kafkaQueries.instance._root({ id }),\n            type: \"topic\",\n          },\n          params,\n        ] as const,\n    },\n  },\n} as const;\n\nexport const providerQueries = {\n  _root: () => ({ scope: \"providers\" }),\n  list: (params: { plan?: string }) =>\n    [{ ...providerQueries._root(), entity: \"list\", ...params }] as const,\n  limits: {\n    _root: ({ provider }: { provider?: string }) =>\n      ({\n        ...providerQueries._root(),\n        entity: \"limits\",\n        provider,\n      } as const),\n    standard: ({ provider, region }: { provider?: string; region: string }) => [\n      {\n        ...providerQueries.limits._root({ provider }),\n        plan: \"standard\",\n        region,\n      },\n    ],\n    developer: ({\n      provider,\n      region,\n    }: {\n      provider?: string;\n      region: string;\n    }) => [\n      {\n        ...providerQueries.limits._root({ provider }),\n        plan: \"developer\",\n        region,\n      },\n    ],\n  },\n} as const;\n","import { PrincipalApi } from \"@redhat-cloud-services/rbac-client\";\nimport { AppServicesApi } from \"@rhoas/account-management-sdk\";\nimport { GroupsApi, RecordsApi, TopicsApi } from \"@rhoas/kafka-instance-sdk\";\nimport { Configuration, DefaultApi } from \"@rhoas/kafka-management-sdk\";\nimport { useCallback } from \"react\";\nimport { useApiConfiguration } from \"./ApiProvider\";\n\nexport const useApi = () => {\n  const { basePath, accessToken } = useApiConfiguration();\n\n  const kafkasFleet = useCallback(\n    () =>\n      new DefaultApi(\n        new Configuration({\n          accessToken,\n          basePath,\n        })\n      ),\n    [accessToken, basePath]\n  );\n\n  const userAccounts = useCallback(async () => {\n    const token = await accessToken();\n    return new PrincipalApi({\n      accessToken: token,\n      basePath: `/api/rbac/v1`,\n    });\n  }, [accessToken]);\n\n  const account = useCallback(\n    () =>\n      new AppServicesApi(\n        new Configuration({\n          accessToken,\n          basePath,\n        })\n      ),\n    [accessToken, basePath]\n  );\n\n  const topics = useCallback(\n    (adminUrl: string) =>\n      new TopicsApi(\n        new Configuration({\n          accessToken,\n          basePath: adminUrl,\n        })\n      ),\n    [accessToken]\n  );\n\n  const consumerGroups = useCallback(\n    (adminUrl: string) =>\n      new GroupsApi(\n        new Configuration({\n          accessToken,\n          basePath: adminUrl,\n        })\n      ),\n    [accessToken]\n  );\n\n  const records = useCallback(\n    (adminUrl: string) =>\n      new RecordsApi(\n        new Configuration({\n          accessToken,\n          basePath: adminUrl,\n        })\n      ),\n    [accessToken]\n  );\n\n  return {\n    kafkasFleet,\n    account,\n    topics,\n    consumerGroups,\n    records,\n    userAccounts,\n  };\n};\n","import { useQuery } from \"@tanstack/react-query\";\nimport { useApiConfiguration } from \"../ApiProvider\";\nimport type { FetchConsumerGroupsParams } from \"../fetchers\";\nimport { fetchConsumerGroups } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useConsumerGroups(\n  params: { id?: string; adminUrl?: string } & Omit<\n    FetchConsumerGroupsParams,\n    \"getConsumerGroups\"\n  >\n) {\n  const { refetchInterval } = useApiConfiguration();\n  const { consumerGroups } = useApi();\n\n  return useQuery({\n    queryKey: kafkaQueries.instance.consumerGroups(params),\n    queryFn: () => {\n      if (!params.id) {\n        return Promise.reject(\"Invalid id\");\n      }\n      if (!params.adminUrl) {\n        return Promise.reject(\"Invalid adminUrl\");\n      }\n      const api = consumerGroups(params.adminUrl);\n\n      return fetchConsumerGroups({\n        getConsumerGroups: (...args) => api.getConsumerGroups(...args),\n        ...params,\n      });\n    },\n    enabled: Boolean(params.adminUrl) && Boolean(params.id),\n    refetchInterval,\n  });\n}\n","import type { KafkaRequest } from \"@rhoas/kafka-management-sdk\";\nimport type {\n  CloudProvider,\n  Kafka,\n  MarketPlaceSubscriptions,\n  Plan,\n  Status,\n} from \"ui-models/src/models/kafka\";\nimport type { DateIsoString } from \"ui-models/src/types\";\n\nimport type { SizeWithLimits } from \"../fetchers\";\n\nexport type KafkaInstanceEnhanced = Required<Kafka> & {\n  request: KafkaRequest;\n};\n\nexport function kafkaRequestToKafkaInstanceEnhanched(\n  instance: KafkaRequest,\n  marketplaceSubscriptions: MarketPlaceSubscriptions[],\n  developerPlanInstanceLimits: SizeWithLimits[],\n  standardPlanInstanceLimits: SizeWithLimits[]\n): KafkaInstanceEnhanced {\n  const enhancedInstance: KafkaInstanceEnhanced = {\n    billing: undefined,\n    connectionRate: 0,\n    connections: 0,\n    createdAt: (instance.created_at ||\n      new Date().toISOString()) as DateIsoString,\n    egress: 0,\n    expiryDate: instance.expires_at as DateIsoString | undefined,\n    id: instance.id,\n    ingress: 0,\n    maxPartitions: 0,\n    messageSize: { type: \"bytes\", value: BigInt(0) },\n    name: instance.name || \"\",\n    owner: instance.owner || \"\",\n    plan: instance.billing_model as Plan,\n    provider: instance.cloud_provider as CloudProvider,\n    region: instance.region || \"\",\n    size: \"1\",\n    status: apiStatusToUIStatus(instance.status || \"\"),\n    storage: { type: \"bytes\", value: BigInt(0) },\n    updatedAt: (instance.updated_at ||\n      new Date().toISOString()) as DateIsoString,\n    request: instance,\n    version: instance.version || \"\",\n    bootstrapUrl: instance.bootstrap_server_host,\n    adminUrl: instance.admin_api_server_url,\n  };\n\n  // update the billing info\n  try {\n    const marketplaceForBilling = marketplaceSubscriptions.find((ms) =>\n      ms.subscriptions.find((s) => s === instance.billing_cloud_account_id)\n    )?.marketplace;\n\n    const billing: KafkaInstanceEnhanced[\"billing\"] =\n      instance.billing_model === \"standard\"\n        ? \"prepaid\"\n        : marketplaceForBilling && instance.billing_cloud_account_id\n        ? {\n            marketplace: marketplaceForBilling,\n            subscription: instance.billing_cloud_account_id,\n          }\n        : undefined;\n    enhancedInstance.billing = billing;\n  } catch (e) {\n    console.warn(\n      \"kafkaRequestToKafkaInstance\",\n      `couldn't retrieve the billing info for`,\n      instance\n    );\n  }\n\n  // update the limits\n  try {\n    const limits =\n      instance.instance_type === \"developer\"\n        ? developerPlanInstanceLimits\n        : standardPlanInstanceLimits;\n    const thisInstanceLimits = limits.find((l) => l.id === instance.size_id);\n    if (thisInstanceLimits) {\n      enhancedInstance.size = thisInstanceLimits.displayName;\n      enhancedInstance.ingress = thisInstanceLimits.ingress;\n      enhancedInstance.egress = thisInstanceLimits.egress;\n      enhancedInstance.storage = {\n        type: \"bytes\",\n        value: BigInt(instance.max_data_retention_size?.bytes || 0),\n      };\n      enhancedInstance.connections = thisInstanceLimits.connections;\n      enhancedInstance.connectionRate = thisInstanceLimits.connectionRate;\n      enhancedInstance.maxPartitions = thisInstanceLimits.maxPartitions;\n      enhancedInstance.messageSize = {\n        type: \"bytes\",\n        value: BigInt(thisInstanceLimits.messageSize),\n      };\n    }\n  } catch (e) {\n    console.warn(\n      \"kafkaRequestToKafkaInstance\",\n      `couldn't retrieve the limits info for`,\n      instance\n    );\n  }\n\n  return enhancedInstance;\n}\n\nfunction apiStatusToUIStatus(status: string): Status {\n  const mapping: { [key: string]: Status } = {\n    accepted: \"accepted\",\n    preparing: \"preparing\",\n    provisioning: \"provisioning\",\n    ready: \"ready\",\n    failed: \"degraded\",\n    deprovision: \"deprovision\",\n    deleting: \"deleting\",\n  };\n  return mapping[status] || \"degraded\";\n}\n","import type { KafkaRequestPayload } from \"@rhoas/kafka-management-sdk\";\nimport { APIErrorCodes, isServiceApiError } from \"@rhoas/kafka-management-sdk\";\nimport type { CreateKafkaInstanceServices } from \"ui\";\nimport { useApi } from \"../useApi\";\n\nconst ErrorCodes = {\n  /** Forbidden to perform this action*/\n  UNAUTHORIZED_USER: APIErrorCodes.ERROR_4,\n  /** Kafka cluster name is already used*/\n  DUPLICATE_INSTANCE_NAME: APIErrorCodes.ERROR_36,\n  /** The maximum number of allowed kafka instances has been reached*/\n  INTERNAL_CAPACITY_ERROR: APIErrorCodes.ERROR_24,\n  /** Insufficient quota*/\n  INSUFFICIENT_QUOTA: APIErrorCodes.ERROR_120,\n  /** Forbidden to create more instances than the maximum allowed*/\n  TRIAL_USED: APIErrorCodes.ERROR_5,\n  /** Failed to check quota*/\n  FAILED_TO_CHECK_QUOTA: APIErrorCodes.ERROR_121,\n  /** Bad request*/\n  OWNER_DOES_NOT_EXIST: APIErrorCodes.ERROR_21,\n};\n\n/**\n * Create Kafka instance hook that creates kafka instance\n */\nexport const useCreateInstance =\n  (): CreateKafkaInstanceServices[\"onCreate\"] => {\n    const { kafkasFleet } = useApi();\n\n    return (data, onSuccess, onError) => {\n      const runner = async () => {\n        const apisService = kafkasFleet();\n\n        try {\n          const kafkaRequest = {} as KafkaRequestPayload;\n          kafkaRequest.name = data.name;\n          kafkaRequest.cloud_provider = data.provider;\n          kafkaRequest.region = data.region;\n          kafkaRequest.plan = data.plan + \".\" + data.sizeId;\n          kafkaRequest.billing_model =\n            data.billing === \"prepaid\"\n              ? \"standard\"\n              : data.billing !== undefined\n              ? \"marketplace\"\n              : null;\n          kafkaRequest.billing_cloud_account_id =\n            data.billing && data.billing !== \"prepaid\"\n              ? data.billing.subscription\n              : null;\n          await apisService.createKafka(true, kafkaRequest);\n          onSuccess();\n        } catch (error) {\n          if (isServiceApiError(error)) {\n            const { code } = error?.response?.data || {};\n\n            switch (data.plan) {\n              case \"developer\":\n                switch (code) {\n                  case ErrorCodes.DUPLICATE_INSTANCE_NAME:\n                    onError(\"name-taken\");\n                    break;\n\n                  // regardless of the error, let's not give too many details to trial users\n                  default:\n                    onError(\"developer-unavailable\");\n                    break;\n                }\n                break;\n\n              case \"standard\":\n                switch (code) {\n                  case ErrorCodes.DUPLICATE_INSTANCE_NAME:\n                    onError(\"name-taken\");\n                    break;\n\n                  case ErrorCodes.INTERNAL_CAPACITY_ERROR:\n                    onError(\"region-unavailable\");\n                    break;\n\n                  case ErrorCodes.INSUFFICIENT_QUOTA:\n                    onError(\"insufficient-quota\");\n                    break;\n\n                  default:\n                    console.error(\n                      \"useAvailableProvidersAndDefault\",\n                      \"createKafka unknown error\",\n                      error\n                    );\n                    onError(\"unknown\");\n                }\n                break;\n            }\n          } else {\n            console.error(\n              \"useAvailableProvidersAndDefault\",\n              \"createKafka unexpected error\",\n              error\n            );\n          }\n        }\n      };\n      void runner();\n    };\n  };\n","import type { KafkaRequest } from \"@rhoas/kafka-management-sdk\";\nimport {\n  useProviderRegionSizesFetchQuery,\n  useProvidersWithRegionsFetchQuery,\n  useStandardQuotaFetchQuery,\n} from \"../fetchQueries\";\nimport { kafkaRequestToKafkaInstanceEnhanched } from \"../transformers/kafkaRequestToKafkaInstanceEnhanched\";\n\nexport function useKafkaInstanceTransformer() {\n  const getStandardQuotaQuery = useStandardQuotaFetchQuery();\n  const getProvidersInfo = useProvidersWithRegionsFetchQuery();\n  const getProviderRegionsSizes = useProviderRegionSizesFetchQuery();\n\n  return async function kafkaInstanceTransformer(instance: KafkaRequest) {\n    if (!instance.region) {\n      throw new Error(\n        `Invalid KafkaRequest, empty region: ${JSON.stringify(instance)}`\n      );\n    }\n    const standardQuota = await getStandardQuotaQuery();\n\n    const providersInfo = await getProvidersInfo(\n      instance.billing_model !== \"standard\" ? \"developer\" : \"standard\"\n    );\n    const providerInfo = providersInfo.providers.find(\n      (p) => p.id === instance.cloud_provider\n    );\n    if (!providerInfo) {\n      return Promise.reject(\"Invalid cloud provider\");\n    }\n    const standardPlanLimitsQuery = getProviderRegionsSizes(\n      providerInfo,\n      instance.region,\n      \"standard\"\n    );\n    const developerPlanLimitsQuery = getProviderRegionsSizes(\n      providerInfo,\n      instance.region,\n      \"developer\"\n    );\n    const [standardPlanLimits, developerPlanLimits] = await Promise.all([\n      standardPlanLimitsQuery,\n      developerPlanLimitsQuery,\n    ]);\n    return kafkaRequestToKafkaInstanceEnhanched(\n      instance,\n      standardQuota.marketplaceSubscriptions,\n      developerPlanLimits,\n      standardPlanLimits\n    );\n  };\n}\n","import { useQuery } from \"@tanstack/react-query\";\nimport { useApiConfiguration } from \"../ApiProvider\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\nimport { useKafkaInstanceTransformer } from \"./useKafkaInstanceTransformer\";\n\nexport function useKafka(id: string | undefined, suspense = false) {\n  const { refetchInterval } = useApiConfiguration();\n  const dataMapper = useKafkaInstanceTransformer();\n  const { kafkasFleet } = useApi();\n  const api = kafkasFleet();\n\n  return useQuery({\n    enabled: Boolean(id),\n    queryKey: kafkaQueries.instance.details({ id }),\n    queryFn: async () => {\n      if (!id) {\n        return Promise.reject(\"Invalid Kafka instance id\");\n      }\n      const instance = await api.getKafkaById(id);\n      return dataMapper(instance.data);\n    },\n    refetchInterval,\n    suspense,\n  });\n}\n","import { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useApiConfiguration } from \"../ApiProvider\";\nimport type { FetchKafkasParams } from \"../fetchers\";\nimport { fetchKafkas } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\nimport { useKafkaInstanceTransformer } from \"./useKafkaInstanceTransformer\";\n\nexport function useKafkas(\n  params: Omit<FetchKafkasParams, \"dataMapper\" | \"getKafkas\">\n) {\n  const { refetchInterval } = useApiConfiguration();\n  const queryClient = useQueryClient();\n  const dataMapper = useKafkaInstanceTransformer();\n  const { kafkasFleet } = useApi();\n  const api = kafkasFleet();\n\n  return useQuery({\n    queryKey: kafkaQueries.list(params),\n    queryFn: async () => {\n      const res = await fetchKafkas({\n        getKafkas: (...args) => api.getKafkas(...args),\n        dataMapper,\n        ...params,\n      });\n      res.instances.forEach((i) =>\n        queryClient.setQueryData(kafkaQueries.instance.details({ id: i.id }), i)\n      );\n      return res;\n    },\n    refetchInterval,\n  });\n}\n","import { useQuery } from \"@tanstack/react-query\";\nimport { useApiConfiguration } from \"../ApiProvider\";\nimport type { FetchTopicParams } from \"../fetchers\";\nimport { fetchTopic } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useTopic(\n  params: { id?: string; adminUrl?: string } & Omit<\n    FetchTopicParams,\n    \"getTopic\"\n  >,\n  suspense = false\n) {\n  const { refetchInterval } = useApiConfiguration();\n  const { topics } = useApi();\n\n  return useQuery({\n    queryKey: kafkaQueries.instance.topic(params),\n    queryFn: () => {\n      if (!params.id) {\n        return Promise.reject(\"Invalid id\");\n      }\n      if (!params.adminUrl) {\n        return Promise.reject(\"Invalid adminUrl\");\n      }\n      const api = topics(params.adminUrl);\n\n      return fetchTopic({\n        getTopic: (...args) => api.getTopic(...args),\n        ...params,\n      });\n    },\n    enabled:\n      Boolean(params.adminUrl) &&\n      Boolean(params.id) &&\n      Boolean(params.topicName),\n    refetchInterval,\n    suspense,\n  });\n}\n","import type { TopicsApi } from \"@rhoas/kafka-instance-sdk\";\nimport type { Plan } from \"ui-models/src/models/kafka\";\nimport type { Topic } from \"ui-models/src/models/topic\";\nimport { topicTransformerFactory } from \"../transformers/topicTransformer\";\n\nexport type FetchTopicParams = {\n  getTopic: TopicsApi[\"getTopic\"];\n  topicName: string;\n  plan: Plan;\n};\n\nexport async function fetchTopic({\n  getTopic,\n  topicName,\n  plan,\n}: FetchTopicParams): Promise<Topic> {\n  const response = await getTopic(topicName);\n  return topicTransformerFactory(plan)(response.data);\n}\n","import { useQuery } from \"@tanstack/react-query\";\nimport { useApiConfiguration } from \"../ApiProvider\";\nimport type { FetchTopicsParams } from \"../fetchers\";\nimport { fetchTopics } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useTopics(\n  params: { id?: string; adminUrl?: string } & Omit<\n    FetchTopicsParams,\n    \"getTopics\"\n  >\n) {\n  const { refetchInterval } = useApiConfiguration();\n  const { topics } = useApi();\n\n  return useQuery({\n    queryKey: kafkaQueries.instance.topics(params),\n    queryFn: () => {\n      if (!params.id) {\n        return Promise.reject(\"Invalid id\");\n      }\n      if (!params.adminUrl) {\n        return Promise.reject(\"Invalid adminUrl\");\n      }\n      const api = topics(params.adminUrl);\n\n      return fetchTopics({\n        getTopics: (...args) => api.getTopics(...args),\n        ...params,\n      });\n    },\n    enabled: Boolean(params.adminUrl) && Boolean(params.id),\n    refetchInterval,\n  });\n}\n","import { useQuery } from \"@tanstack/react-query\";\nimport { useApiConfiguration } from \"../ApiProvider\";\nimport type { FetchUserAccountsParams } from \"../fetchers\";\nimport { fetchUserAccounts } from \"../fetchers\";\nimport { masQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useUserAccounts(\n  params: Omit<FetchUserAccountsParams, \"getUserAccounts\">\n) {\n  const { refetchInterval } = useApiConfiguration();\n  const { userAccounts } = useApi();\n\n  return useQuery({\n    queryKey: masQueries.userAccounts(params),\n    queryFn: async () => {\n      const api = await userAccounts();\n\n      return fetchUserAccounts({\n        getUserAccounts: (...args) => api.listPrincipals(...args),\n        ...params,\n      });\n    },\n    refetchInterval,\n  });\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport { fetchKafkas } from \"../fetchers\";\nimport { useKafkaInstanceTransformer } from \"../queries\";\nimport { kafkaQueries, masQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport const useDeveloperInstanceAvailabilityFetchQuery = () => {\n  const queryClient = useQueryClient();\n  const { kafkasFleet } = useApi();\n  const dataMapper = useKafkaInstanceTransformer();\n\n  return (getUsername: () => Promise<string>) => {\n    const api = kafkasFleet();\n    return queryClient.fetchQuery({\n      queryKey: masQueries.quota.developerAvailability(),\n      queryFn: async () => {\n        const username = await getUsername();\n        if (!username) {\n          return Promise.reject(new Error(\"Invalid username\"));\n        }\n\n        const { instances } = await queryClient.fetchQuery({\n          queryKey: kafkaQueries.list({\n            direction: \"desc\",\n            sort: \"createdAt\",\n            name: [],\n            status: [],\n            owner: [username],\n            perPage: 1000,\n            page: 1,\n          }),\n          queryFn: () =>\n            fetchKafkas({\n              getKafkas: (...args) => api.getKafkas(...args),\n              dataMapper,\n              direction: \"desc\",\n              sort: \"createdAt\",\n              name: [],\n              status: [],\n              owner: [username],\n              perPage: 1000,\n              page: 1,\n            }),\n          staleTime: Infinity,\n        });\n\n        return instances.some((k) => k?.plan !== \"standard\") !== true;\n      },\n    });\n  };\n};\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport { useKafkaInstanceTransformer } from \"../queries\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useKafkaFetchQuery() {\n  const queryClient = useQueryClient();\n  const dataMapper = useKafkaInstanceTransformer();\n  const { kafkasFleet } = useApi();\n  return async (id: string) => {\n    const api = kafkasFleet();\n    return queryClient.fetchQuery({\n      queryKey: kafkaQueries.instance.details({ id }),\n      queryFn: async () => {\n        const instance = await api.getKafkaById(id);\n        return dataMapper(instance.data);\n      },\n    });\n  };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport { fetchKafkaKpis } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useKafkaKpisFetchQuery() {\n  const { kafkasFleet } = useApi();\n  const queryClient = useQueryClient();\n\n  return (id: string) => {\n    const api = kafkasFleet();\n\n    return queryClient.fetchQuery({\n      queryKey: kafkaQueries.instance.metrics.kpi({ id }),\n      queryFn: async () => {\n        return fetchKafkaKpis(\n          (...args) => api.getMetricsByInstantQuery(...args),\n          id\n        );\n      },\n    });\n  };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport type { FetchKafkaMetricsProps } from \"../fetchers\";\nimport { fetchKafkaMetrics } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useKafkaMetricsFetchQuery() {\n  const { kafkasFleet } = useApi();\n  const queryClient = useQueryClient();\n\n  return (params: Omit<FetchKafkaMetricsProps, \"getMetricsByRangeQuery\">) => {\n    const api = kafkasFleet();\n\n    return queryClient.fetchQuery({\n      queryKey: kafkaQueries.instance.metrics.instance(params),\n      queryFn: async () => {\n        return fetchKafkaMetrics({\n          getMetricsByRangeQuery: (...args) =>\n            api.getMetricsByRangeQuery(...args),\n          ...params,\n        });\n      },\n    });\n  };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport type { FetchTopicsMetricsProps } from \"../fetchers\";\nimport { fetchTopicsMetrics } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useTopicsMetricsFetchQuery() {\n  const { kafkasFleet } = useApi();\n  const queryClient = useQueryClient();\n\n  return (params: Omit<FetchTopicsMetricsProps, \"getMetricsByRangeQuery\">) => {\n    const api = kafkasFleet();\n\n    return queryClient.fetchQuery({\n      queryKey: kafkaQueries.instance.metrics.topic(params),\n      queryFn: async () => {\n        return fetchTopicsMetrics({\n          getMetricsByRangeQuery: (...args) =>\n            api.getMetricsByRangeQuery(...args),\n          ...params,\n        });\n      },\n    });\n  };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport type { FetchTopicsParams } from \"../fetchers\";\nimport { fetchTopics } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useTopicsFetchQuery() {\n  const { topics } = useApi();\n  const queryClient = useQueryClient();\n\n  return (\n    params: Omit<FetchTopicsParams, \"getTopics\"> & {\n      id: string;\n      adminUrl: string;\n    }\n  ) => {\n    const api = topics(params.adminUrl);\n\n    return queryClient.fetchQuery({\n      queryKey: kafkaQueries.instance.topics(params),\n      queryFn: async () => {\n        return fetchTopics({\n          getTopics: (...args) => api.getTopics(...args),\n          ...params,\n        });\n      },\n    });\n  };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport type { FetchMessagesParams } from \"../fetchers\";\nimport { fetchMessages } from \"../fetchers\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useMessagesFetchQuery() {\n  const { records } = useApi();\n  const queryClient = useQueryClient();\n\n  return (\n    params: { id: string; adminUrl: string } & Omit<\n      FetchMessagesParams,\n      \"consumeRecords\"\n    >\n  ) => {\n    const api = records(params.adminUrl);\n\n    return queryClient.fetchQuery({\n      queryKey: kafkaQueries.instance.topicMessages(params),\n      queryFn: () => {\n        if (!params.id) {\n          return Promise.reject(\"Invalid id\");\n        }\n        if (!params.adminUrl) {\n          return Promise.reject(\"Invalid adminUrl\");\n        }\n\n        return fetchMessages({\n          consumeRecords: (...args) => api.consumeRecords(...args),\n          ...params,\n        });\n      },\n    });\n  };\n}\n","import type { Record, RecordsApi } from \"@rhoas/kafka-instance-sdk\";\nimport type { Message } from \"ui-models/src/models/message\";\nimport type { DateIsoString } from \"../../../ui-models/src/types\";\n\nexport type FetchMessagesParams = {\n  consumeRecords: RecordsApi[\"consumeRecords\"];\n  topicName: string;\n  partition?: number;\n  offset?: number;\n  timestamp?: DateIsoString;\n  limit: number;\n};\n\nexport async function fetchMessages({\n  topicName,\n  consumeRecords,\n  partition,\n  offset,\n  timestamp,\n  limit,\n}: FetchMessagesParams): Promise<Message[]> {\n  const response = await consumeRecords(\n    topicName,\n    undefined,\n    limit,\n    undefined,\n    offset,\n    partition,\n    timestamp\n  );\n  return response.data.items.map((m: Record) => ({\n    partition: m.partition,\n    offset: m.offset,\n    timestamp: m.timestamp as DateIsoString,\n    key: m.key,\n    value: m.value,\n    headers: m.headers || {},\n  }));\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport type { Plan } from \"ui-models/src/models/kafka\";\nimport type { CloudProviderInfoWithRegionsCapacity } from \"../fetchers\";\nimport { fetchProviderRegionSizes } from \"../fetchers\";\nimport { providerQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useProviderRegionSizesFetchQuery() {\n  const queryClient = useQueryClient();\n  const { kafkasFleet } = useApi();\n\n  return (\n    provider: CloudProviderInfoWithRegionsCapacity,\n    region: string,\n    plan: Plan\n  ) => {\n    const kms = kafkasFleet();\n    return queryClient.fetchQuery({\n      queryKey: providerQueries.limits[\n        plan === \"standard\" ? \"standard\" : \"developer\"\n      ]({ provider: provider.id, region }),\n      queryFn: () =>\n        fetchProviderRegionSizes(\n          (...args) => kms.getInstanceTypesByCloudProviderAndRegion(...args),\n          provider,\n          region,\n          plan\n        ),\n      staleTime: Infinity,\n    });\n  };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport type { Plan } from \"ui-models/src/models/kafka\";\nimport { fetchProvidersWithRegions } from \"../fetchers\";\nimport { providerQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useProvidersWithRegionsFetchQuery() {\n  const queryClient = useQueryClient();\n  const { kafkasFleet } = useApi();\n\n  return (plan: Plan) => {\n    const kms = kafkasFleet();\n    return queryClient.fetchQuery({\n      queryKey: providerQueries.list({ plan }),\n      queryFn: () =>\n        fetchProvidersWithRegions(\n          (...args) => kms.getCloudProviders(...args),\n          (...args) => kms.getCloudProviderRegions(...args),\n          plan\n        ),\n      staleTime: Infinity,\n    });\n  };\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport { fetchOrganization, fetchStandardQuota } from \"../fetchers\";\nimport { masQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useStandardQuotaFetchQuery(skipCache = false) {\n  const queryClient = useQueryClient();\n  const { account } = useApi();\n  const ams = account();\n\n  return async () => {\n    const organization = await queryClient.fetchQuery({\n      queryKey: masQueries.organization(),\n      queryFn: () =>\n        fetchOrganization((...args) =>\n          ams.apiAccountsMgmtV1CurrentAccountGet(...args)\n        ),\n      staleTime: Infinity,\n    });\n    if (!organization) {\n      return Promise.reject(\"Missing organization id\");\n    }\n    return queryClient.fetchQuery({\n      queryKey: masQueries.quota.available({ organization }),\n      queryFn: () =>\n        fetchStandardQuota(\n          (...args) =>\n            ams.apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(...args),\n          organization\n        ),\n      staleTime: skipCache ? undefined : Infinity,\n    });\n  };\n}\n","import type { AppServicesApi } from \"@rhoas/account-management-sdk\";\n\nexport async function fetchOrganization(\n  api: AppServicesApi[\"apiAccountsMgmtV1CurrentAccountGet\"]\n) {\n  const account = await api();\n  const orgId = account?.data?.organization?.id;\n  return orgId;\n}\n","import type { AppServicesApi } from \"@rhoas/account-management-sdk\";\nimport type {\n  MarketPlace,\n  MarketPlaceSubscriptions,\n} from \"ui-models/src/models/kafka\";\nimport {\n  developerId,\n  isMarketplaceQuota,\n  isStandardQuota,\n  resourceName,\n  standardId,\n} from \"../utilsAndConstants\";\n\nexport type StandardQuota = {\n  hasTrialQuota: boolean;\n  remainingPrepaidQuota: number | undefined;\n  remainingMarketplaceQuota: number | undefined;\n  marketplaceSubscriptions: MarketPlaceSubscriptions[];\n};\nexport const fetchStandardQuota = async (\n  api: AppServicesApi[\"apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet\"],\n  organizationId: string\n) => {\n  const quotaResponse = await api(\n    organizationId,\n    undefined,\n    true,\n    undefined,\n    true\n  );\n  if (quotaResponse.status !== 200) {\n    throw new Error(quotaResponse.statusText);\n  }\n  const standardQuotas = quotaResponse.data.items?.filter((q) =>\n    q.related_resources?.find(\n      (r) => r.resource_name === resourceName && r.product === standardId\n    )\n  );\n\n  const prepaidQuota = standardQuotas?.find(isStandardQuota);\n\n  const marketplaceQuotas = standardQuotas?.some(isMarketplaceQuota)\n    ? standardQuotas?.filter(isMarketplaceQuota)\n    : undefined;\n\n  const hasTrialQuota =\n    (prepaidQuota === undefined &&\n      marketplaceQuotas === undefined &&\n      quotaResponse.data.items?.some((q) =>\n        q.related_resources?.find(\n          (r) => r.resource_name === resourceName && r.product === developerId\n        )\n      )) ||\n    false;\n\n  const remainingPrepaidQuota = prepaidQuota\n    ? prepaidQuota.allowed - prepaidQuota.consumed\n    : undefined;\n  const remainingMarketplaceQuota = marketplaceQuotas\n    ? marketplaceQuotas.reduce((agg, q) => q.allowed - q.consumed + agg, 0)\n    : undefined;\n  const unaggregatedSubscriptions = marketplaceQuotas\n    ?.filter((q) => q.cloud_accounts !== undefined)\n    .flatMap((q) => q.cloud_accounts || []);\n  const subscriptionMarketplaces = Array.from(\n    new Set(\n      unaggregatedSubscriptions?.map((s) => s.cloud_provider_id as MarketPlace)\n    )\n  );\n  const marketplaceSubscriptions: MarketPlaceSubscriptions[] =\n    unaggregatedSubscriptions\n      ? subscriptionMarketplaces.map((marketplace) => ({\n          marketplace,\n          subscriptions: unaggregatedSubscriptions\n            .filter((s) => s.cloud_provider_id === marketplace)\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            .map((s) => s.cloud_account_id!),\n        }))\n      : [];\n\n  return {\n    hasTrialQuota,\n    remainingPrepaidQuota,\n    remainingMarketplaceQuota,\n    marketplaceSubscriptions,\n  };\n};\n","import type { KafkaRequestPayload } from \"@rhoas/kafka-management-sdk\";\nimport { APIErrorCodes, isServiceApiError } from \"@rhoas/kafka-management-sdk\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport type { CreateKafkaFormData, CreateKafkaInstanceError } from \"ui\";\nimport { kafkaQueries, masQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useCreateKafkaMutation() {\n  const { kafkasFleet } = useApi();\n  const queryClient = useQueryClient();\n\n  return useMutation(\n    async function kafkaCreateInstance(props: {\n      instance: CreateKafkaFormData;\n      onSuccess: () => void;\n      onError: (error: CreateKafkaInstanceError) => void;\n    }) {\n      const { instance, onSuccess, onError } = props;\n      const api = kafkasFleet();\n      const kafkaRequest: KafkaRequestPayload = {\n        name: instance.name,\n        cloud_provider: instance.provider,\n        region: instance.region,\n      };\n      kafkaRequest.plan = instance.plan + \".\" + instance.sizeId;\n      kafkaRequest.billing_model =\n        instance.billing === \"prepaid\"\n          ? \"standard\"\n          : instance.billing !== undefined\n          ? \"marketplace\"\n          : null;\n      kafkaRequest.billing_cloud_account_id =\n        instance.billing && instance.billing !== \"prepaid\"\n          ? instance.billing.subscription\n          : null;\n      try {\n        await api.createKafka(true, kafkaRequest);\n        onSuccess();\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const { code } = error?.response?.data || {};\n\n          switch (instance.plan) {\n            case \"developer\":\n              switch (code) {\n                case ErrorCodes.DUPLICATE_INSTANCE_NAME:\n                  onError(\"name-taken\");\n                  break;\n\n                // regardless of the error, let's not give too many details to trial users\n                default:\n                  onError(\"developer-unavailable\");\n                  break;\n              }\n              break;\n\n            case \"standard\":\n              switch (code) {\n                case ErrorCodes.DUPLICATE_INSTANCE_NAME:\n                  onError(\"name-taken\");\n                  break;\n\n                case ErrorCodes.INTERNAL_CAPACITY_ERROR:\n                  onError(\"region-unavailable\");\n                  break;\n\n                case ErrorCodes.INSUFFICIENT_QUOTA:\n                  onError(\"insufficient-quota\");\n                  break;\n\n                default:\n                  console.error(\n                    \"useKafkaCreateInstanceMutation\",\n                    \"createKafka unknown error\",\n                    error\n                  );\n                  onError(\"unknown\");\n              }\n              break;\n          }\n        } else {\n          console.error(\n            \"useKafkaCreateInstanceMutation\",\n            \"createKafka unexpected error\",\n            error\n          );\n          onError(\"unknown\");\n        }\n      }\n    },\n    {\n      onSuccess: () => {\n        void queryClient.invalidateQueries([kafkaQueries._root()]);\n        void queryClient.invalidateQueries([masQueries.quota._root()]);\n      },\n    }\n  );\n}\n\nconst ErrorCodes = {\n  /** Forbidden to perform this action*/\n  UNAUTHORIZED_USER: APIErrorCodes.ERROR_4,\n  /** Kafka cluster name is already used*/\n  DUPLICATE_INSTANCE_NAME: APIErrorCodes.ERROR_36,\n  /** The maximum number of allowed kafka instances has been reached*/\n  INTERNAL_CAPACITY_ERROR: APIErrorCodes.ERROR_24,\n  /** Insufficient quota*/\n  INSUFFICIENT_QUOTA: APIErrorCodes.ERROR_120,\n  /** Forbidden to create more instances than the maximum allowed*/\n  TRIAL_USED: APIErrorCodes.ERROR_5,\n  /** Failed to check quota*/\n  FAILED_TO_CHECK_QUOTA: APIErrorCodes.ERROR_121,\n  /** Bad request*/\n  OWNER_DOES_NOT_EXIST: APIErrorCodes.ERROR_21,\n} as const;\n","import { isServiceApiError } from \"@rhoas/kafka-management-sdk\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { kafkaQueries, masQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useDeleteKafkaMutation() {\n  const { kafkasFleet } = useApi();\n  const queryClient = useQueryClient();\n\n  return useMutation(\n    async function kafkaCreateInstance(props: {\n      id: string;\n      onSuccess: () => void;\n      onError: (code: string, message: string) => void;\n    }) {\n      const { id, onSuccess, onError } = props;\n      const api = kafkasFleet();\n      try {\n        await api.deleteKafkaById(id, true);\n        onSuccess();\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const message = error?.message;\n          const { code } = error?.response?.data || {};\n\n          onError(code || \"?\", message);\n        }\n      }\n    },\n    {\n      onSuccess: () => {\n        void queryClient.invalidateQueries([kafkaQueries._root()]);\n        void queryClient.invalidateQueries([masQueries.quota._root()]);\n      },\n    }\n  );\n}\n","import { isServiceApiError } from \"@rhoas/kafka-management-sdk\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\nexport function useDeleteTopicMutation() {\n  const { topics } = useApi();\n  const queryClient = useQueryClient();\n\n  return useMutation(\n    async function kafkaCreateInstance({\n      adminUrl,\n      name,\n      onSuccess,\n      onError,\n    }: {\n      instanceId: string;\n      adminUrl: string;\n      name: string;\n      onSuccess: () => void;\n      onError: (code: string, message: string) => void;\n    }) {\n      const api = topics(adminUrl);\n      try {\n        await api.deleteTopic(name);\n        onSuccess();\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const message = error?.message;\n          const { code } = error?.response?.data || {};\n\n          onError(code || \"?\", message);\n        }\n      }\n    },\n    {\n      onSuccess: (_, { adminUrl, instanceId }) => {\n        void queryClient.invalidateQueries([\n          kafkaQueries.instance._root({\n            id: instanceId,\n            adminUrl,\n          }),\n        ]);\n      },\n    }\n  );\n}\n","import type {\n  KafkaRequest,\n  KafkaUpdateRequest,\n} from \"@rhoas/kafka-management-sdk\";\nimport { getErrorCode, isServiceApiError } from \"@rhoas/kafka-management-sdk\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport type { AxiosResponse } from \"axios\";\nimport { AxiosError } from \"axios\";\nimport { kafkaQueries } from \"../queryKeys\";\nimport { useApi } from \"../useApi\";\n\ntype Errors = \"invalid-user\" | \"other\" | \"unknown\";\n\nexport function useUpdateKafkaMutation() {\n  const { kafkasFleet } = useApi();\n  const queryClient = useQueryClient();\n\n  return useMutation<\n    AxiosResponse<KafkaRequest>,\n    { type: Errors; message?: string },\n    { id: string; updates: KafkaUpdateRequest },\n    unknown\n  >(\n    async function kafkaCreateInstance({ id, updates }) {\n      const api = kafkasFleet();\n      try {\n        return await api.updateKafkaById(id, updates);\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const code = getErrorCode(error);\n\n          switch (code) {\n            case \"KAFKAS-MGMT-21\": {\n              return Promise.reject({\n                type: \"invalid-user\",\n                message: error.response?.data.reason,\n              });\n            }\n            default: {\n              return Promise.reject({\n                type: \"other\",\n                message: error.response?.data.reason,\n              });\n            }\n          }\n        } else if (error instanceof AxiosError) {\n          return Promise.reject({ type: \"unknown\", message: error.message });\n        } else {\n          return Promise.reject({ type: \"unknown\", message: \"unknown\" });\n        }\n      }\n    },\n    {\n      onSuccess: () => {\n        void queryClient.invalidateQueries([kafkaQueries._root()]);\n      },\n    }\n  );\n}\n","import {\n  ConsumerGroupOrderKey,\n  TopicOrderKey,\n} from \"@rhoas/kafka-instance-sdk\";\nimport type { RangeQuery } from \"@rhoas/kafka-management-sdk\";\n\nexport type NoUndefinedField<T> = {\n  [P in keyof T]-?: NoUndefinedField<NonNullable<T[P]>>;\n};\n\nexport type SafeRangeQuery = NoUndefinedField<RangeQuery>;\n\nexport const KafkaInstancesSortableColumns = [\n  \"name\",\n  \"owner\",\n  \"createdAt\",\n  \"provider\",\n  \"region\",\n] as const;\n\nexport type KafkaInstancesSortableColumn =\n  typeof KafkaInstancesSortableColumns[number];\n\nexport const KafkaTopicsSortableColumns = [\n  ...Object.values(TopicOrderKey),\n] as const;\n\nexport type KafkaTopicsSortableColumn =\n  typeof KafkaTopicsSortableColumns[number];\n\nexport const KafkaConsumerGroupSortableColumns = [\n  ...Object.values(ConsumerGroupOrderKey),\n] as const;\n\nexport type KafkaConsumerGroupSortableColumn =\n  typeof KafkaConsumerGroupSortableColumns[number];\n","const REACT_QUERY_DEVTOOLS = \"mas.devtools\";\nconst METRICS_LAG_ALERT = \"mas.rhosak.metrics.lag-alert-closed\";\n\nexport function isReactQueryDevToolsEanbled() {\n  return localStorage.getItem(REACT_QUERY_DEVTOOLS) === \"true\";\n}\n\nexport function metricsIsLagAlertsDismissed() {\n  return localStorage.getItem(METRICS_LAG_ALERT) === \"true\";\n}\n\nexport function metricsDismissLagAlerts() {\n  return localStorage.setItem(METRICS_LAG_ALERT, \"true\");\n}\n","import type { Bytes, DateIsoString } from \"../types\";\n\n/**\n * All the details abut a Kafka instance.\n *\n * Unless differently specified, the values marked as accepting `undefined`\n * will come from extra API calls.\n */\nexport type Kafka = {\n  id: string;\n  name: string;\n  createdAt: DateIsoString;\n  updatedAt: DateIsoString;\n  expiryDate: DateIsoString | undefined;\n  owner: string;\n  provider: CloudProvider;\n  region: CloudRegion;\n  status: Status;\n  plan: Plan;\n  size: string | undefined;\n  ingress: number | undefined;\n  egress: number | undefined;\n  storage: Bytes | undefined;\n  maxPartitions: number | undefined;\n  connections: number | undefined;\n  connectionRate: number | undefined;\n  messageSize: Bytes | undefined;\n  billing: \"prepaid\" | MarketplaceSubscription | undefined;\n\n  version: string;\n\n  bootstrapUrl: string | undefined;\n  adminUrl: string | undefined;\n};\nexport type KafkaField = keyof Kafka;\n\n/**\n * Supported Cloud Providers. Extend this to add a new provider, then follow\n * Typescript errors to find where extra information need to be added (images,\n * translations).\n */\nexport type CloudProvider = \"aws\" | \"gcp\" | \"azure\";\n\n/**\n * A Cloud Region. Since this varies between Cloud Providers and has no extra\n * visual attached, we take its name from the API and do no further\n * transformation.\n */\nexport type CloudRegion = string;\n/**\n * Cloud provider multi availability zone\n */\nexport type AZ = \"single\" | \"multi\";\n/**\n * A number that describes how much does an instance cost to create\n */\nexport type Quota = number;\n/**\n * The capabilities of an instance, and its quota cost. Some sizes might not be\n * enabled, eg. because temporarily out of capacity\n */\nexport type Size = {\n  id: string;\n  displayName: string;\n  status: \"stable\" | \"preview\";\n  quota: Quota;\n  ingress: number;\n  egress: number;\n  storage: number;\n  connections: number;\n  connectionRate: number;\n  maxPartitions: number;\n  messageSize: number;\n  isDisabled: boolean;\n};\n/**\n * Paid for instances are `standard`, evaluation instances are `developer`.\n * `standard` instances have a `Quota` associated, and bigger sizes.\n * `developer` instances are free to be created (up to 1 per user), have a\n * single, smaller size option than `standard` ones, and they expire after a\n * few hours.\n *\n * Note: a new kind of evaluation instance is being studied. They will have a\n * long expiration period and bigger sizes.\n */\nexport type Plan = \"standard\" | \"developer\";\n/**\n * All the statuses an instance can be. If new statuses are added, ensure to\n * add them to the relevant status group (`ReadyStatuses` etc.).\n */\nexport const Statuses = [\n  \"ready\",\n  \"degraded\",\n  \"accepted\",\n  \"provisioning\",\n  \"preparing\",\n  \"deprovision\",\n  \"deleting\",\n  \"suspended\",\n  \"suspending\",\n  \"resuming\",\n] as const;\n\nexport type Status = typeof Statuses[number];\n\nexport const CreatingStatuses: readonly Status[] = [\n  \"accepted\",\n  \"provisioning\",\n  \"preparing\",\n];\nexport const ReadyStatuses: readonly Status[] = [\"ready\"];\nexport const DegradedStatuses: readonly Status[] = [\"degraded\"];\nexport const SuspendingStatuses: readonly Status[] = [\"suspending\"];\nexport const SuspendedStatuses: readonly Status[] = [\"suspended\"];\nexport const DeletingStatuses: readonly Status[] = [\"deleting\", \"deprovision\"];\nexport const ResumingStatuses: readonly Status[] = [\"resuming\"];\n\nexport const SimplifiedStatuses = {\n  creating: CreatingStatuses,\n  ready: ReadyStatuses,\n  degraded: DegradedStatuses,\n  suspended: SuspendedStatuses,\n  deleting: DeletingStatuses,\n  resuming: ResumingStatuses,\n  suspending: SuspendingStatuses,\n} as const;\nexport type SimplifiedStatus = keyof typeof SimplifiedStatuses;\n\n/**\n * A list of marketplaces where an instance can be billed to\n */\nexport type MarketPlace = CloudProvider | \"rhm\";\n/**\n * List of marketplaces where a user has some subscription\n */\nexport type MarketPlaceSubscriptions = {\n  marketplace: MarketPlace;\n  subscriptions: string[];\n};\n/**\n * A specific marketplace's subscription, assigned as billing option to an\n * instance.\n *\n * Note: the API will provide only the `subscription`; the `MarketPlace` will\n * have to be fetched querying for the `subscription`.\n */\nexport type MarketplaceSubscription = {\n  marketplace: MarketPlace;\n  subscription: string;\n};\n","import type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport type { State } from \"ui-models/src/models/consumer-group\";\n\nexport type ConsumerGroupStateLabelProps = {\n  state: State;\n};\n\nexport const ConsumerGroupStateLabel: FunctionComponent<\n  ConsumerGroupStateLabelProps\n> = ({ state }) => {\n  const { t } = useTranslation([\"kafka\"]);\n\n  switch (state) {\n    case \"Stable\":\n      return t(\"consumerGroup.state.stable\");\n    case \"Empty\":\n      return t(\"consumerGroup.state.empty\");\n    case \"Dead\":\n      return t(\"consumerGroup.state.dead\");\n    case \"CompletingRebalance\":\n      return t(\"consumerGroup.state.completing_rebalance\");\n    case \"PreparingRebalance\":\n      return t(\"consumerGroup.state.preparing_rebalance\");\n    case \"Unknown\":\n      return t(\"consumerGroup.state.unknown\");\n    default:\n      return null;\n  }\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from \"@patternfly/react-core\";\nimport { CubesIcon } from \"@patternfly/react-icons\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nexport const ConsumerGroupEmptyState: FunctionComponent = () => {\n  const { t } = useTranslation([\"kafka\"]);\n  return (\n    <EmptyState variant={EmptyStateVariant.large}>\n      <EmptyStateIcon icon={CubesIcon} />\n      <Title headingLevel={\"h1\"} size={TitleSizes.lg}>\n        {t(\"consumerGroup.empty_consumer_title\")}\n      </Title>\n      <EmptyStateBody>{t(\"consumerGroup.empty_consumer_body\")}</EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import { PageSection } from \"@patternfly/react-core\";\nimport { TableVariant } from \"@patternfly/react-table\";\nimport type { TableViewProps } from \"@rhoas/app-services-ui-components\";\nimport {\n  EmptyStateNoResults,\n  TableView,\n} from \"@rhoas/app-services-ui-components\";\nimport { useTranslation } from \"react-i18next\";\nimport type {\n  ConsumerGroup,\n  ConsumerGroupField,\n} from \"ui-models/src/models/consumer-group\";\n\nimport { ConsumerGroupEmptyState, ConsumerGroupStateLabel } from \"./components\";\n\ntype SubUnion<T, U extends T> = U;\n\nconst Columns: SubUnion<\n  ConsumerGroupField,\n  \"groupId\" | \"activeConsumers\" | \"laggingPartitions\" | \"state\"\n>[] = [\"groupId\", \"activeConsumers\", \"laggingPartitions\", \"state\"];\n\nexport type ConsumerGroupsProps<T extends ConsumerGroup> = {\n  consumers: Array<T> | undefined;\n  onDelete: (row: T) => void;\n  onViewPartition: (row: T) => void;\n  onViewResetOffset: (row: T) => void;\n  consumerName: string[];\n  onSearchConsumer: (value: string) => void;\n  onRemoveConsumerChip: (value: string) => void;\n  onRemoveConsumerChips: () => void;\n} & Pick<\n  TableViewProps<T, typeof Columns[number]>,\n  | \"itemCount\"\n  | \"page\"\n  | \"perPage\"\n  | \"onPageChange\"\n  | \"isRowSelected\"\n  | \"isColumnSortable\"\n  | \"onClearAllFilters\"\n>;\n\nexport const ConsumerGroups = <T extends ConsumerGroup>({\n  consumers,\n  onDelete,\n  onViewPartition,\n  isColumnSortable,\n  itemCount,\n  onViewResetOffset,\n  onClearAllFilters,\n  page,\n  perPage,\n  onPageChange,\n  consumerName,\n  onSearchConsumer,\n  onRemoveConsumerChip,\n  onRemoveConsumerChips,\n}: ConsumerGroupsProps<T>) => {\n  const { t } = useTranslation(\"kafka\");\n\n  const labels: { [field in typeof Columns[number]]: string } = {\n    groupId: t(\"consumerGroup.consumer_group_id\"),\n    activeConsumers: t(\"consumerGroup.active_members\"),\n    laggingPartitions: t(\"consumerGroup.partitions_with_lag\"),\n    state: t(\"consumerGroup.state_header\"),\n  };\n\n  const isFiltered = consumerName.length > 0;\n  return (\n    <PageSection isFilled={true} hasOverflowScroll={true} aria-label={\"TODO\"}>\n      <TableView\n        variant={TableVariant.compact}\n        tableOuiaId={\"card-table\"}\n        ariaLabel={t(\"consumerGroup.consumer_group_list\")}\n        data={consumers}\n        columns={Columns}\n        renderHeader={({ column, Th, key }) => (\n          <Th\n            key={key}\n            info={\n              column === \"laggingPartitions\"\n                ? {\n                    popover: (\n                      <div>\n                        {t(\"consumerGroup.partitions_with_lag_description\")}\n                      </div>\n                    ),\n                    ariaLabel: \"partitions with lag\",\n                    popoverProps: {\n                      headerContent: t(\n                        \"consumerGroup.partitions_with_lag_name\"\n                      ),\n                    },\n                  }\n                : undefined\n            }\n          >\n            {labels[column]}\n          </Th>\n        )}\n        renderCell={({ column, row, Td, key }) => {\n          return (\n            <Td key={key} dataLabel={labels[column]}>\n              {(() => {\n                switch (column) {\n                  case \"groupId\":\n                    return row.groupId;\n                  case \"activeConsumers\":\n                    return row.activeConsumers;\n                  case \"laggingPartitions\":\n                    return row.laggingPartitions;\n                  case \"state\":\n                    return <ConsumerGroupStateLabel state={row.state} />;\n                }\n              })()}\n            </Td>\n          );\n        }}\n        renderActions={({ row, ActionsColumn }) => (\n          <ActionsColumn\n            items={[\n              {\n                title: t(\"consumerGroup.view_partitions_offsets\"),\n                onClick: () => onViewPartition(row),\n              },\n              {\n                title: t(\"consumerGroup.reset_offset\"),\n                onClick: () => onViewResetOffset(row),\n              },\n              {\n                title: t(\"common:delete\"),\n                onClick: () => onDelete(row),\n              },\n            ]}\n          />\n        )}\n        isColumnSortable={isColumnSortable}\n        filters={{\n          [labels.groupId]: {\n            type: \"search\",\n            chips: consumerName,\n            onSearch: onSearchConsumer,\n            onRemoveChip: onRemoveConsumerChip,\n            onRemoveGroup: onRemoveConsumerChips,\n            validate: (value: string) => !/[\"$^<>|+%/;:,\\s*=~#()]/.test(value),\n            errorMessage: t(\"input_field_invalid_message\"),\n          },\n        }}\n        itemCount={itemCount}\n        page={page}\n        onPageChange={onPageChange}\n        perPage={perPage}\n        isFiltered={isFiltered}\n        onClearAllFilters={onClearAllFilters}\n        emptyStateNoData={<ConsumerGroupEmptyState />}\n        emptyStateNoResults={<EmptyStateNoResults />}\n      />\n    </PageSection>\n  );\n};\n","import {\n  Level,\n  LevelItem,\n  PageSection,\n  PageSectionVariants,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\n\nexport const ControlPlaneHeader: VoidFunctionComponent = () => {\n  const { t } = useTranslation();\n\n  return (\n    <PageSection\n      variant={PageSectionVariants.light}\n      hasShadowBottom={true}\n      stickyOnBreakpoint={{ default: \"top\" }}\n    >\n      <Level>\n        <LevelItem>\n          <TextContent>\n            <Text component=\"h1\">{t(\"kafka:table.title\")}</Text>\n          </TextContent>\n        </LevelItem>\n      </Level>\n    </PageSection>\n  );\n};\n","import type { CloudProvider, CloudRegion } from \"ui-models/src/models/kafka\";\nimport type { CloudProviderInfo } from \"../types\";\n\nexport function onProviderChange(\n  providers: CloudProviderInfo[],\n  provider: CloudProvider\n): { provider: CloudProvider; region: CloudRegion | undefined } {\n  const selectedProvider = providers.find((p) => p.id === provider);\n  const region =\n    selectedProvider?.defaultRegion ||\n    selectedProvider?.regions.filter((r) => !!r.isDisabled === false)[0]?.id;\n  return { provider, region };\n}\n","import {\n  CloudProvider,\n  CloudRegion,\n  MarketplaceSubscription,\n  Size,\n} from \"ui-models/src/models/kafka\";\nimport { assign, createMachine, send, sendParent } from \"xstate\";\nimport {\n  CreateKafkaFormData,\n  CreateKafkaInstanceError,\n  StandardPlanInitializationData,\n  StandardSizes,\n} from \"../types\";\nimport { onProviderChange } from \"./shared\";\n\nexport type StandardPlanMachineContext = {\n  // initial data coming from the APIs\n  capabilities: StandardPlanInitializationData;\n\n  // what the user is selecting\n  form: {\n    name?: string;\n    provider?: CloudProvider;\n    region?: CloudRegion;\n    size?: Size;\n    billing?: MarketplaceSubscription | \"prepaid\";\n  };\n\n  // based on the form.provider selection\n\n  // based on the form.provider and form.region selection\n  sizes: StandardSizes | undefined;\n\n  creationError: CreateKafkaInstanceError | undefined;\n};\n\nexport const StandardPlanMachine =\n  /** @xstate-layout N4IgpgJg5mDOIC5SwC4EMB2E0CcIAUAbTAWTQGMALASwzADoA3MHagMwE8BBRta4gEb9qKDgGJEoAA4B7WCOoyMkkAA9EAZgAcARnoBOfQAYdOrQHYArABYNAJnMAaEB0Q6j++reuXL5k3bWWpY65gC+Yc6omNh4RKQUNHT05Eps1FAArqwYUPTRKJmwYuQ4YGgoYCqy8iiKykhqmjp29OYW5hpGQYG+zq4Ilvoa9KZGlh4a5joAbPqBEVHoWLgExBhkVLQMqRjpWTl5bDI4ALZMaITUEGLpYIQQAJIYvFcQ1XIKSirqCKGG9Ds+ksU1m5n0M2s1n0-UQdgmllGdjsOj8QJm7ihixA0RWcXWmySOzSGWytCOJ3Or2uYlgmQEpxEH1q9R+bmMnnMnRR9n8di0RjssIQ-MFo2sgQ81lCGjm2NxsTWCS2yV2+zJuXoxzO+TQjHJJTKFTAAGVMuRyHB4I0al8GqBfoEZlp6FpISYdBp7PprFZhaK9JDAuDproQfLlor4htEtsUiSDuStZTdfrcobypUAKI4HAnZl2tkinn0WVTFFQrS+mb+jEzehzMz84btazjCMxVbRwlxtWkw7Js63aj3J4vS7XAt1b6NR0+etaWXzPmQmsuOGmRGWfmWRchbctGYdvFKmMq4l7ftJu4PWD0DBoU4ManYSoSG2faf2poIIL15GmDo+iLkBdhGOYa4DLMUKjKCljOkYbrDFox5RgSsaqgmGpHCOt73o+YAZsaU6srObj2F45gSn4UIaDY7QaMKMouohVgzNuHhgRoOioV26HnvGl6JpqN4QHeD5PmIElgAAwpQmAwCRM4OuRrS+tRVG2PRi5MexrSojM9iIW2VgSrx+LKkSgnqgOol3lIeb6hALAXG8xrvtIn6kSpgxAm00IosiEEzDMTjriKHj1hMEIoqE1iGeYdjmaePaYUJ2FarhYn0A5MhOSwRGVEp36-J6alUfCml0b6Onhci8UGJxnoSuBGj6Ml3YYReNnXll9mOdcBW5flOByQpVQfiyyk-mVlEabR2mMXVUr0EYgo+qGQHtJYHX8VZfbCTho53mUUD1K51zucVRYHl4hg6EEPisdYTHwkYgLDNKRjsSF0I7ZEOKRnxlm9lhtl9fQp31IVE2eVNJWqXNlULTVS1QXR5iAqidgzCYApui0u0g2lPUiRDUNKGIw2DaN8m5LDIC2l+RazepyNaajTFdJ4OM8hBnRejxAMKsDZ77WDvXHZDYBnZTFMYGN9PXWRfwUWzNEcwxTEGaWvgWA9Gg+P41hE2LoPpeDUvyAAXs+E6voRys+b6gbcW7czQu4tUDA44KrZCsogfyXqm6l3VXmTVvULb9CEDIaAQAaEBKAwtCMDIADWDAixZZskxHR14TbDBxwn5IIGnMjkBU9QANpGAAuk7P6gvQNi6HY2gPVCwr2HRbS6PoVG7lYQyh111kF5lUcx6XifpiweY4DlxAoNq5w5ylE8HRldn5NHJfx-PUAVy8Vc10o9dN5NhYq9uLqBMiwEWBKneWL3vKrSEiHDOBILDOPASO9LZFwPjDZujpQq6wAuxYwoEpj+n-qMT0254KG3ig9QB4sLaS1AbbKmA1nK03GhAtwi4sYeisPMQw9hay4wML6RKhhvrgiFksTsucw6T0OtPPBhF5aK0UjfZmKtcYuh9GBQwGIUS1kNgYT6Ewfqd26Fg82pNC7ZWLrSA+giGZM28j+KiLopjbkhPrcCuhaweGgT4Ux-hZj-XYSeTqQCJaRz4WIIQhAri5F0aQ388E26NnYuCZcEEXp1VxpjAmVYqKsOBEeYWQNOHbzcRou8XifF5BfFdYRBjfjbhGFoAUZjZjLj8L3YpmM1pWHCZVGYONVH5x4XvTJSYlCEA4GaAQsBSjUCkF+YosB7hgHICgbpvTWADIMfo6apU1rWDaO6EKa0goNMqfoPQ-gbC4x9MBQUGgmnhxaRDNpmoHJgCkHwCAXAsATL6dMpQQyRljPuVMkRcNb4+UPIiYpQI9y7ngsBYU3hFlrU9GYjwIRwhJI4VvVxOD3HZTOXkC5Vzri3IgG8-pgzaQvJQPgMo6L3h5LmW4IwUxXS7i9L4KwswtAgr7m3FEQxEq6EhEc7hu9Tn8CyQQvKNM-GkoRqres3FURxPsMiIEvdAUD0XIhHG8VEKOMBnClx2D1G8LEmIZOyQCjZ2SfCzVU87L+NmOMNo7hxjlgaYbd+kT+6aWCG-XcSrOXAKTinfI6BKg+vVXtNRBd-H8hxq6aUxtfQmCkf6WU9YWhgUqiETEEQAYYBkM5a0yAjUarjMwVgnAeB8EEMIUQ-iQjhtCm1WUEofTjGFFYAw3oQj2p9NRTleUWAAEVMgyHQP4gUIxOLQh8FoX2DLwoJtLI9cFWg63TESU4tCxNU4YFxJaAAqg+Xg-A0ACEIHoryZKEBcnep0NtwQuTSIdT7ClrpQoonmC0XQa1F1qucYG5I8tYBbr1MWvdB7-FckWdCYpD1+RujHTCOqVZSwB3GMiRcwxZgerSf6wod5MhrvpIyFAlQSWfI+TNRCpY2pVhCI+jmwohg8zilRA2Y7fSocRXkAoRR8g4ZEPh-x84DBmGlPjLko8IkDAXatLoi54Sd3hPBZjWq2NZsZkekVsGvTAR8C0ICVHwoTBdKYUKLbkSsQhHJ01KY0723NeCRZnpNkmFCqEMdsaUSrWYd0LkgcTOwo-SurltkUwvis8BUY4EMQ-3cA9G9cJcYjFCmtYIQRhhzEOd55dedjm7xTLAPU5IQ0oIbBYDw4x5wojCj7Kw+lZScV8PCT0pmWlZb1JAENCUDDhOs8CYI-pwSIgabFHGHtMGpdFlwz1IlKRWf8LBOzYJHNCmWl0Nura51uu+vV7lUtpL0DAKcAZAxCP5MQEw0YhS2xoJqhOqCiUh3OmleMCEKWl0jdSSx7V4kCL0As28c1asKoa2qlrSd4J6zdG+h0MEXoTbDZSQirVe8tuBeFSzKiDYfT0UMqYkETFNkg4Mu0aY4xFxQ6ezDk1JzNsfZyUVJHKtDYjDavMKTc6vSdyYtd-2Y6jNDEMutkB2VpLmpI+rKqi0mK+E8AbX0QJWXGCStD41Qbyd4WpkQi6Dt-HaHrMubiHmTJukghuaEXhdzPo8BCFbvPcHZRVy5L7k4affJsICbQSrDBAiHlFkUXRFluk7nReYY7nQwpJwr5pG3leEJcojg7x6Kv+yCBYEEtWuT+gep4UdpupEW-l7msPfP+oCqIYLl0wuUaA9vdYta8xDJei6EYy3SKToy3OlTw98MixTBdKFAWLQbBlTK+RO9gR+NfW4vFFCOfP0Zfz9LWWGBPvjm+w7maExkG8lCCCQUtimLSkRPSl3zokNDZD7n6fVum9z7V0BxbDnBQNOdEBSEXMh8CahO4MfzoG-pNnzM5TLMhd-Yi6cyTrgR6CygoiJ7BAhQhRf5vb7wxyt4a7tANidD6bDwPrzY+wOYNiBCc4hTNiPbvppajZoZ7zFyfYQCAbL6lQUQgiGygFuztDwjdYQjiZQiigZ5vqbyn5+bn7wEMCJzZb7rNbUGIAdBeC6DcRVheiSGYFwjAh6DAgmCKJWDaA+CwFkEHz0AADufAdQuQAAYicD2n2mgD9q0HQVMLyNMDjAguFDSnoOMF7L-KoQApPr5mNt-uQZ2jgCYf2qIarBYZDgwZ6EwZ7l0HeozoqkEBYhPiflPrwY3vwVfgEZspyPZohuxN6HIQgBJmAdIdtA5tCMHkQc9rDqahDOQYvPmAEbNJYdyFyIeHYQMM2qtG2GVDaozhoZUVoXPLlgERBLFtoPfAKFCEMCJs0MMG0IlNuCGIuJ-u4elokV4QfMXktl6A0TYQlP6D4DZkBH3uBMPKqtwQkZ4XASimrsRLUdoI1J0IZBSn4HAuEZIf5C1O4EMJ3GwqUaToruHsirykmOmiaPivUAAEpgAACOmQ1AZQBGSm7eKs+WEw6+OuVe4RChro1mI6iE0a3RUsFxHSXS9IkyOK9Qd4ducJsyKmKOFiEq0wPQNglSwQowwQ0EYE-GcR3xoeZ+SRBJGAnS2Kjya6KRMeIqkWmMf4-IwOdqD0vcGJ0IkObq7Q4wXBOapxpBPK3i7S-JRJPSDygyA6q+tJfg9JY6jJ9hFUWMkIoQDEDSnJJxHhGp+JAJ5yRK1ymKgpgy22u2ZaARFgIw8IxgGmFKDgoQjKoQq0AQ9qjmwIeJeEFxaK7pdyxJ+pZJHGep7yv+CJ3yfIXgtmfeW0Y6l2iAb+Yq7QAo2y7g8IcZ-xWprplySZWKKZmZTyOUbp9uopRYzCroHgi4i4dKesIKtg6egoxSJSbU0wNZGSLpqK7ZNyyZGZpJTyA6RugZ3Q386+A+v4qIQ6r8hsVZvIU59AKK5qpgbcIZ0wqJUKsqa0bQPo7EFiEoKGixJBr2ZqfpIGgBZe3siAhgxizoY+-Ib+xSX+-i9Cam5GmmPo1UjKe+iGypYEVYJgnK2WzAlJf+Ks-yUUmyJp9Bl5saQwDYJgTCa0Y+boRyIa0S8U56NaQIZ2ORrQwwaR3oNewEz5EQQAA */\n  createMachine(\n    {\n      context: {\n        capabilities: {} as StandardPlanInitializationData,\n        sizes: undefined,\n        form: {},\n        creationError: undefined,\n      },\n      tsTypes: {} as import(\"./StandardPlanMachine.typegen\").Typegen0,\n      predictableActionArguments: true,\n      schema: {\n        context: {} as StandardPlanMachineContext,\n        events: {} as\n          | { type: \"fieldInvalid\" }\n          | { type: \"nameChange\"; name: string }\n          | { type: \"providerChange\"; provider: CloudProvider }\n          | { type: \"regionChange\"; region: CloudRegion }\n          | { type: \"sizeChange\"; size: Size }\n          | {\n              type: \"selectSubscription\";\n              subscription: MarketplaceSubscription;\n            }\n          | { type: \"selectPrepaid\" }\n          | { type: \"billingChange\" }\n          | { type: \"nameIsValid\" }\n          | { type: \"nameIsInvalid\" }\n          | { type: \"nameIsTaken\" }\n          | { type: \"submit\" }\n          | { type: \"create\" }\n          | { type: \"createSuccess\" }\n          | { type: \"createError\"; error: CreateKafkaInstanceError },\n        services: {} as {\n          getSizes: {\n            data: StandardSizes;\n          };\n        },\n      },\n      initial: \"verifyAvailability\",\n      id: \"standardPlanMachine\",\n      states: {\n        verifyAvailability: {\n          entry: \"setInitialContext\",\n          always: [\n            {\n              cond: \"isOverQuota\",\n              target: \"overQuota\",\n            },\n            {\n              cond: \"isInstanceUnavailable\",\n              target: \"instanceUnavailable\",\n            },\n            {\n              cond: \"isRegionsUnavailable\",\n              target: \"regionsUnavailable\",\n            },\n            {\n              target: \"configuring\",\n            },\n          ],\n        },\n        overQuota: {\n          tags: \"blocked\",\n        },\n        instanceUnavailable: {\n          tags: \"blocked\",\n        },\n        regionsUnavailable: {\n          tags: \"blocked\",\n        },\n        configuring: {\n          type: \"parallel\",\n          states: {\n            status: {\n              initial: \"unsubmitted\",\n              states: {\n                unsubmitted: {\n                  tags: \"unsubmitted\",\n                },\n                submitted: {\n                  entry: \"triggerSubmit\",\n                  tags: \"submitted\",\n                },\n              },\n              on: {\n                create: {\n                  description:\n                    \"Save is enabled all the time, if it's clicked before the form is completely filled out we should show the validation for all errored fields\",\n                  target: \".submitted\",\n                },\n              },\n            },\n            form: {\n              initial: \"invalid\",\n              states: {\n                invalid: {\n                  tags: \"formInvalid\",\n                },\n                valid: {\n                  entry: \"resetCreationErrorMessage\",\n                  tags: \"creatable\",\n                  on: {\n                    fieldInvalid: {\n                      target: \"invalid\",\n                    },\n                    submit: {\n                      target: \"saving\",\n                    },\n                  },\n                },\n                saving: {\n                  entry: [\"resetCreationErrorMessage\", \"triggerSave\"],\n                  tags: \"formSaving\",\n                  on: {\n                    createSuccess: {\n                      target: \"saved\",\n                    },\n                    createError: {\n                      actions: \"setCreationError\",\n                      target: \"invalid\",\n                    },\n                  },\n                },\n                saved: {\n                  type: \"final\",\n                },\n              },\n              on: {\n                fieldInvalid: {\n                  description:\n                    \"sent by the fields when their value change to an invalid value. This will transition the form to the invalid state, to then eventually transition to the valid state if the field state is marked as done (which means that all fields have a valid value selected)\",\n                  target: \".invalid\",\n                },\n              },\n            },\n            fields: {\n              tags: \"configurable\",\n              type: \"parallel\",\n              states: {\n                name: {\n                  initial: \"validate\",\n                  states: {\n                    empty: {\n                      tags: \"nameEmpty\",\n                    },\n                    invalid: {\n                      entry: \"fieldInvalid\",\n                      tags: \"nameInvalid\",\n                    },\n                    valid: {\n                      tags: \"nameValid\",\n                      type: \"final\",\n                    },\n                    validate: {\n                      always: [\n                        {\n                          cond: \"nameIsEmpty\",\n                          target: \"empty\",\n                        },\n                        {\n                          cond: \"nameIsValid\",\n                          target: \"valid\",\n                        },\n                        {\n                          target: \"invalid\",\n                        },\n                      ],\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    nameChange: {\n                      actions: \"setName\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n                provider: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"providerIsValid\",\n                          target: \"valid\",\n                        },\n                        {\n                          target: \"invalid\",\n                        },\n                      ],\n                    },\n                    invalid: {\n                      entry: \"fieldInvalid\",\n                      tags: \"providerInvalid\",\n                    },\n                    valid: {\n                      tags: \"providerValid\",\n                      type: \"final\",\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    providerChange: {\n                      actions: \"setProvider\",\n                      cond: \"didProviderChange\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n                region: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"regionIsValid\",\n                          target: \"valid\",\n                        },\n                        {\n                          target: \"invalid\",\n                        },\n                      ],\n                    },\n                    invalid: {\n                      entry: \"fieldInvalid\",\n                      tags: \"regionInvalid\",\n                    },\n                    valid: {\n                      tags: \"regionValid\",\n                      type: \"final\",\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    providerChange: {\n                      target: \".validate\",\n                    },\n                    regionChange: {\n                      actions: \"setRegion\",\n                      cond: \"didRegionChange\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n                size: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"noProviderOrRegion\",\n                          target: \"idle\",\n                        },\n                        {\n                          cond: \"noSizes\",\n                          target: \"loading\",\n                        },\n                        {\n                          cond: \"emptySizes\",\n                          target: \"error\",\n                        },\n                        {\n                          cond: \"sizeIsDisabled\",\n                          target: \"disabled\",\n                        },\n                        {\n                          cond: \"billingRequiredButNotSelected\",\n                          target: \"waitingForQuota\",\n                        },\n                        {\n                          cond: \"sizeIsOverQuota\",\n                          target: \"overQuota\",\n                        },\n                        {\n                          target: \"valid\",\n                        },\n                      ],\n                    },\n                    idle: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeIdle\",\n                    },\n                    disabled: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeDisabled\",\n                    },\n                    waitingForQuota: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeWaitingForQuota\",\n                    },\n                    overQuota: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeOverQuota\",\n                    },\n                    valid: {\n                      tags: \"sizeValid\",\n                      type: \"final\",\n                    },\n                    error: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeError\",\n                    },\n                    loading: {\n                      description:\n                        \"Fetch the data required to show the available sizes and limits\",\n                      invoke: {\n                        src: \"getSizes\",\n                        onDone: [\n                          {\n                            actions: \"setSizes\",\n                            target: \"validate\",\n                          },\n                        ],\n                        onError: [\n                          {\n                            target: \"error\",\n                          },\n                        ],\n                      },\n                      tags: \"sizeLoading\",\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    providerChange: {\n                      target: \".validate\",\n                    },\n                    regionChange: {\n                      target: \".validate\",\n                    },\n                    sizeChange: {\n                      actions: \"setSize\",\n                      cond: \"didSizeChange\",\n                      target: \".validate\",\n                    },\n                    billingChange: {\n                      target: \".validate\",\n                    },\n                  },\n                },\n                billing: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"onlyPrepaid\",\n                          target: \"prepaidOnly\",\n                        },\n                        {\n                          cond: \"singleSubscription\",\n                          target: \"singleSubscription\",\n                        },\n                        {\n                          cond: \"onlySubscriptions\",\n                          target: \"onlySubscriptions\",\n                        },\n                        {\n                          description:\n                            \"user has both prepaid and marketplace subscriptions\",\n                          target: \"prepaidAndSubscriptions\",\n                        },\n                      ],\n                    },\n                    prepaidOnly: {\n                      description:\n                        \"The user doesn't need to specify any option about the billing. The API will automatically figure out the right thing to do without giving it any information.\",\n                      tags: [\"noBilling\", \"billingValid\"],\n                      entry: \"setBillingToPrepaid\",\n                      type: \"final\",\n                    },\n                    singleSubscription: {\n                      description:\n                        \"The user doesn't need to specify any option about the billing. The API will automatically figure out the right thing to do without giving it any information.\",\n                      tags: [\"noBilling\", \"billingValid\", \"singleSubscription\"],\n                      entry: \"setBillingToSubscription\",\n                      type: \"final\",\n                    },\n                    onlySubscriptions: {\n                      description:\n                        \"More than one subscription exist. The user needs to select one to procede.\",\n                      initial: \"invalid\",\n                      type: \"final\",\n                      states: {\n                        invalid: {},\n                        valid: {\n                          entry: \"triggerBillingChange\",\n                          tags: \"billingValid\",\n                          type: \"final\",\n                        },\n                      },\n                      on: {\n                        selectSubscription: [\n                          {\n                            actions: \"setBillingToSubscription\",\n                            cond: \"matchesSelectedProviderOrRHMarketplaceAndHasQuota\",\n                            target: \".valid\",\n                          },\n                          {\n                            cond: \"noSelectedProvider\",\n                            target: \".valid\",\n                          },\n                        ],\n                      },\n                    },\n                    prepaidAndSubscriptions: {\n                      description:\n                        \"The user has both prepaid quota and one or more subscription to a marketplace. The user needs to select one to procede.\",\n                      initial: \"empty\",\n                      type: \"final\",\n                      states: {\n                        empty: {},\n                        subscription: {\n                          entry: \"triggerBillingChange\",\n                          tags: \"billingValid\",\n                          type: \"final\",\n                        },\n                        prepaid: {\n                          entry: \"triggerBillingChange\",\n                          tags: \"billingValid\",\n                          type: \"final\",\n                        },\n                      },\n                      on: {\n                        selectSubscription: [\n                          {\n                            actions: \"setBillingToSubscription\",\n                            cond: \"matchesSelectedProviderOrRHMarketplaceAndHasQuota\",\n                            target: \".subscription\",\n                          },\n                          {\n                            cond: \"noSelectedProvider\",\n                            target: \".subscription\",\n                          },\n                        ],\n                        selectPrepaid: {\n                          actions: \"setBillingToPrepaid\",\n                          cond: \"hasPrepaidQuota\",\n                          target: \".prepaid\",\n                        },\n                      },\n                    },\n                  },\n                  on: {\n                    providerChange: {\n                      actions: \"unsetSubscription\",\n                      description:\n                        \"If a new provider is selected, deselect any previously selected billing option.\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n              },\n              onDone: {\n                target: \"#standardPlanMachine.configuring.form.valid\",\n              },\n            },\n          },\n          onDone: {\n            target: \"saved\",\n          },\n        },\n        saved: {\n          type: \"final\",\n        },\n      },\n    },\n    {\n      actions: {\n        setInitialContext: assign((context) => {\n          return {\n            form: {\n              ...(context.capabilities.defaultProvider\n                ? onProviderChange(\n                    context.capabilities.availableProviders,\n                    context.capabilities.defaultProvider\n                  )\n                : {}),\n            },\n          };\n        }),\n        fieldInvalid: send(\"fieldInvalid\"),\n        setName: assign((context, { name }) => {\n          if (context.creationError === \"name-taken\") {\n            return {\n              form: { ...context.form, name },\n              creationError: undefined,\n            };\n          }\n          return { form: { ...context.form, name } };\n        }),\n        setProvider: assign((context, { provider }) => {\n          return {\n            form: {\n              ...context.form,\n              ...onProviderChange(\n                context.capabilities.availableProviders,\n                provider\n              ),\n            },\n            sizes: undefined,\n          };\n        }),\n        setRegion: assign((context, { region }) => {\n          if (context.creationError === \"region-unavailable\") {\n            return {\n              form: { ...context.form, region },\n              sizes: undefined,\n              creationError: undefined,\n            };\n          }\n          return {\n            form: {\n              ...context.form,\n              region,\n            },\n            sizes: undefined,\n          };\n        }),\n        setSize: assign((context, { size }) => ({\n          form: {\n            ...context.form,\n            size,\n          },\n        })),\n        setSizes: assign((context, event) => {\n          const sizes = event.data;\n          const smallestSize = sizes.sort((a, b) => a.quota - b.quota)[0];\n          return {\n            sizes,\n            form: {\n              ...context.form,\n              size: smallestSize,\n            },\n          };\n        }),\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        resetCreationErrorMessage: assign((_context) => ({\n          creationError: undefined,\n        })),\n        setCreationError: assign((_context, { error }) => {\n          return {\n            creationError: error,\n          };\n        }),\n        triggerSave: sendParent((context) => {\n          const form = context.form as Required<typeof context.form> &\n            Pick<typeof context.form, \"billing\">;\n          const data: CreateKafkaFormData = {\n            plan: \"standard\",\n            name: form.name,\n            provider: form.provider,\n            region: form.region,\n            sizeId: form.size.id,\n            billing: form.billing,\n          };\n          return {\n            type: \"save\",\n            data,\n          };\n        }),\n        triggerSubmit: send(\"submit\"),\n        triggerBillingChange: send(\"billingChange\"),\n        setBillingToPrepaid: assign((context) => {\n          const form = { ...context.form };\n          form.billing = \"prepaid\";\n          return { form };\n        }),\n        setBillingToSubscription: assign((context, event) => {\n          const form = { ...context.form };\n          if (event.type === \"selectSubscription\") {\n            form.billing = event.subscription;\n          } else {\n            // single subscription, take it from the context\n            const ms = context.capabilities.marketplaceSubscriptions[0];\n            form.billing = {\n              marketplace: ms.marketplace,\n              subscription: ms.subscriptions[0],\n            };\n          }\n          return { form };\n        }),\n        unsetSubscription: assign((context) => {\n          const form = { ...context.form };\n          form.billing = undefined;\n          return { form };\n        }),\n      },\n      guards: {\n        isOverQuota: ({ capabilities }) =>\n          capabilities === undefined ||\n          capabilities.instanceAvailability === \"out-of-quota\",\n        isInstanceUnavailable: ({ capabilities }) =>\n          capabilities === undefined ||\n          capabilities.instanceAvailability === \"instance-unavailable\",\n        isRegionsUnavailable: ({ capabilities }) =>\n          capabilities === undefined ||\n          capabilities.instanceAvailability === \"regions-unavailable\",\n        nameIsEmpty: ({ form }) =>\n          form.name === undefined || form.name.length === 0,\n        nameIsValid: ({ form }) =>\n          /^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(form.name || \"\"),\n        providerIsValid: ({ form, capabilities }) => {\n          const selectedProviderInfo = capabilities?.availableProviders.find(\n            (p) => p.id === form.provider\n          );\n          return (\n            // must have loaded a list of providers\n            (capabilities?.availableProviders || []).length > 0 &&\n            // must have selected a provider\n            selectedProviderInfo !== undefined\n          );\n        },\n        regionIsValid: ({ form, capabilities }) => {\n          const selectedProviderInfo = capabilities?.availableProviders.find(\n            (p) => p.id === form.provider\n          );\n          return (\n            // must have selected a region\n            form.region !== undefined &&\n            // the region must be included in the capabilities for the provider\n            selectedProviderInfo?.regions.find((r) => r.id === form.region) !==\n              undefined\n          );\n        },\n        noProviderOrRegion: ({ form }) =>\n          form.provider === undefined || form.region === undefined,\n        noSizes: ({ sizes }) => sizes === undefined,\n        emptySizes: ({ sizes }) => sizes !== undefined && sizes.length === 0,\n        sizeIsDisabled: ({ form, capabilities }) => {\n          if (capabilities === undefined) return true;\n          return form.size?.isDisabled === true;\n        },\n        billingRequiredButNotSelected: ({ form }, _, meta) => {\n          if (meta.state.hasTag(\"noBilling\")) {\n            return false;\n          }\n          return form.billing === undefined;\n        },\n        sizeIsOverQuota: ({ form, capabilities }) => {\n          if (capabilities === undefined || !form.size) return true;\n          const availableQuota =\n            form.billing === \"prepaid\" || form.billing === undefined\n              ? capabilities.remainingPrepaidQuota\n              : capabilities.remainingMarketplaceQuota;\n          if (!availableQuota) return true;\n          return form.size.quota > availableQuota;\n        },\n        didProviderChange: (context, event) =>\n          context.form.provider !== event.provider,\n        didRegionChange: (context, event) =>\n          context.form.region !== event.region,\n        didSizeChange: (context, event) =>\n          context.form.size?.id !== event.size.id,\n        onlyPrepaid: (context) =>\n          context.capabilities.marketplaceSubscriptions.length === 0,\n        singleSubscription: (context) =>\n          context.capabilities.remainingPrepaidQuota === undefined &&\n          context.capabilities.marketplaceSubscriptions.flatMap(\n            (m) => m.subscriptions\n          ).length === 1,\n        onlySubscriptions: (context) =>\n          context.capabilities.remainingPrepaidQuota === undefined &&\n          context.capabilities.marketplaceSubscriptions.length > 0,\n        matchesSelectedProviderOrRHMarketplaceAndHasQuota: (\n          { form, capabilities },\n          { subscription }\n        ) =>\n          capabilities.remainingMarketplaceQuota !== undefined &&\n          capabilities.remainingMarketplaceQuota > 0 &&\n          (subscription.marketplace === \"rhm\" ||\n            form.provider === subscription.marketplace),\n        hasPrepaidQuota: (context) =>\n          context.capabilities.remainingPrepaidQuota !== undefined &&\n          context.capabilities.remainingPrepaidQuota > 0,\n        noSelectedProvider: ({ form }) => form.provider === undefined,\n      },\n    }\n  );\n","import { CloudProvider, CloudRegion } from \"ui-models/src/models/kafka\";\nimport { assign, createMachine, send, sendParent } from \"xstate\";\nimport {\n  CreateKafkaFormData,\n  CreateKafkaInstanceError,\n  TrialPlanInitializationData,\n  TrialSizes,\n} from \"../types\";\nimport { onProviderChange } from \"./shared\";\n\nexport type TrialPlanMachineContext = {\n  // initial data coming from the APIs\n  capabilities: TrialPlanInitializationData;\n\n  // what the user is selecting\n  form: {\n    name?: string;\n    provider?: CloudProvider;\n    region?: CloudRegion;\n  };\n\n  // based on the form.provider and form.region selection\n  sizes: TrialSizes | undefined;\n\n  creationError: CreateKafkaInstanceError | undefined;\n};\n\nexport const TrialPlanMachine =\n  /** @xstate-layout N4IgpgJg5mDOIC5QBUBOBLAhgGwArcwDsBZTAYwAt1CwA6ANzAwDMBPAQXs3QICMf0AF1YBiRKAAOAe1hD0UwuJAAPRACYAbAA4AnLQ0AGNQBYArBo0BmHQHYNNywBoQrRDoO1bARjWmv54y8DY18AX1DnNCw8AhJyKhpaMgVmdCgAVwxCKFpYQUxBdNgRMlQwArAlaVlBeUUkFUQgtWdXBFNLY1o7LRDTG1NTLVNjG3DIjBx8IlJKajpkwlSMrJzmKVQAWwYcdAgRVLBsCABJQi5sPaqZOQUlVQQvLRs9NR1TI1Mdey0tNS1Wk1nqZaJodIEbEYTAZ7OMQFEprFZgkFik0plqGsNtsLnsSmUKtcanV7kCXqD3p9vjZfv9AQg1AYhrQDF4fH9jJ0aVo4QiYjN4vMkmiVpjaOstrlMPRMfjyoIwABldJkMhweANaq3eqgB5qSxqGwsgwmgzPHRBGxeemMrQeCwfAY6NT6s2mXmTflxOaJRbLDHZcXYqUy7JyioAUVQqA2RO1pIZBqNppN5st1pcTR04O6gX+9hMefdEXhnum3pRwqW6NWQa2B3QR1O512EDjtTuDQe-i+tD+Jpdxm0NhdpnpXlGXTNnIt-RCnOLE2i5eRQr9NbFh2OsFohEwmzouIgFTEmpuHZ1jQQxmG3VHfjUE7Zb3HGlGoK8Vo0-ksli0Vh0D1lyRQVfRFAM1kbbdd33MADmxZVeE2IR2xJLsmgNccbECWgvAsGwBkhBwb0sIDEQFH1UWrUVAy3CAdz3A8REYsAAGEKCIGBUM7XUMJaTNHg0QZQU5Axf0MYxRmwsivVXMDqIg8UoPo2gJBjGUICYHZLmPBVT0kc80N49o3lBQxgnBLkmQBATH20Wghy8WxnS0IJLA0GSV1Aqj-VrOidzUqQNKYeCtkQ5DBG4y9u0w2zLCePs33cxkmW0IdPJAyiq18zdlIC9S9hCwLgtQdjOMqM9iR4q8vFito7JBd4XhpGF-FGDKKMrdcaMgpsdzKKA6m0vYTyihNTEfY0TH-aFzGCccni6G8DGzf9WSE9KSz5Lysu6xT-NoAa6lCzZwpQyr43Qx46qaN4vFoawR1HT8Jv6DqKzXcC-Lyw6wEGhQRGKwrSo47IKoMqror48cTEsByOhItlLD8P93rknyN1on6joBnHCDKsGxqu2r+LaIJ3FoEYRytYYkZCNHvOyzHeug2QAC9D1bUaLovBNnjh2xnn-A1hgmmz6rtLRugMZrhhvJzF1LYDOs+hTvr63J0A52hsCkTAIFlCAFDoah6CkABrOhtsyrqvtyjX2boXX9cxBBTakMgCjqABtAwAF0ieM4x3k8O0jCc2qNDum0Bg0bpKXihxvmsYwGd2u2sYdrWnb1g2wyYGNUFUghBAlbZrZV+Scsz1ns513PXfdz2L19gOeaMq9g8asPHwtZKLRjs0+xRv5DHJzQ09ttX7drjmTrOyL2+qmLSfUC0uhMDRsysbRNH8SfVerlmVMdwGCs0kHysDmqboQSxgnuvD9THq1szCLayxtw-maUrO57xgmXEl5Q2uqvO+Zo9BBCsJCSwI5rA8g-srD6Vcf7+REEbRIeQKi0ArsgjGPVf7bmvt2QI90-BCx0PFWBXcbQPweoMLeidHyfAPignq6Dja5HyAqHBn9K74IgsQ9Q2g9CGBMOYACdgHBYU5KHay2FkbOhdOEEshApCaQ1CgPheCGBMHQGwTg3A+ACGEEI68YC8J6AtBHew35-wWDUKwugghPQAFVYCQDMW8ewuE+hsjZIMXwr4rFsgtLYp4Fgo5ONoC46Iri9xcB4JgXg2BwYgC1LzK6IQbR-j7FoJMYkhIRxpNEvGsB4nSiMck1JZjskCSCB4cEMtOQiNGDLLw0S9q1iwYUHc6RCCwHSEhIQCo2zAITM0ekQ4QTNSfhCbM9NEHkR0V0sUPSii5CGRFUZXj8mUwaayP4eFkb9HpNoOGkIVodBePYMSitcHoyZgQ9Zmj0mGWXogGk9I-weD+EMbMZpWTiVTks2SjNVm0WDKbVsXjg5xxlv+Zyj4CIWMRaCBhgwmQjD+KRUFO0p5HzrDiGF4ziaDD0P2KEQ5nijloStRKMIvjDmGMjTpGcsSSlgNKTEXiTRGleiaCaFprF0qlhNBWLomTHI8nir+bD9rBi5YwMZENLrGRMN8FkNIt4vGRSOWh2F9Ao1qu8Do+SZVLmWY8iFHLNhmJ-CCSlg5hy0vqX+SBtV2TPz-G8Nl08a4qRYrQfpggpAqgoJ40lxl-BqFBLoWBFhYEwn1E4epLwPVYr+K5dN9ztHWvZYQwNsFaBgE2BIUxUarwjilkJAYmh7DIxTVhTQuF+gcjsJQ38YxZX8KeftH6QboU6XtbfJysCWQdGnE1CaMs-WEoOkGo89rDUumZdmfof48Ljn-FLM0Tw7JOQsHO1BA7i1HkJJWh4nRY0WgGHhXQxhpzGGbXHfwNITAdt-LA49BCF2wXtWacc5hY3iPBEK5ovQf39o1kDC+wbCChvDZG1VmTo2Gusj4OcDghh2ByXYPse6wl3u-N2y1YL07+uPvlIKwNhq6TSRkjuV7-zww+P4NkQ4CKpvqi6e6IRmm6EZOu0jSsrXgoLQdWDWkh1XEvU0Do3RhzBzZEYb4ZgbSSRmS8MwbH77KJ7SsiTP0pNFyXXJhAd7KYOA5OSnQdowEukmvx7CgmVpNSg+raCJmAPi3UIC0O2gLK6HYx5meKk8bwcQ5QZDbzIYTK3p4N4nRAgfHzDCccQ5XjYW0AreKPxQsBv6n9Ia56FRmNgVLJy2E-DOiZPFHQMNx0zhHBxoSD6CtUd+v9QgtAZMqti2qmqwd9DWGpCjF0sCxxuuG50Fa35nQ-mkgZ-NlHC1Fe63RsxDgPB4Q+H+ecjIXz1P1EaGctigXDBEw88Tq2Dp4x8+OQVVnzK0yTO5Dra3Nba1Kwx95ID7CiPyXYL4wdDTfBtH3EbFlvxfsZLisj+Lv6-p+o7XrEAanmY4yCMehoTCHqEjaX4lXQeb38NvD7B1UdmZQ0x9QCnfCuXih8QYQQOgQ5HLhC0JohLaHwrmpBK350o7rgXWM5mLC7u-GCTkkltBTfqvYI0yMALzmnVdvNN2hd-xzi7bII6HP2C6GlTk+S-k+Ap8LjmD3bL-O6J6gYwRpn72W5rk9fUzG9HpJQ2NElqsvUCPD0T5GCXMzMSMb5Mth5Dn1N8Wm2holKpi4xj5DJ7OeEKbobT2ExJYXHd8XeIwRG2HVwL7y9rfOPAQeEIAA */\n  createMachine(\n    {\n      context: {\n        capabilities: {} as TrialPlanInitializationData,\n        sizes: undefined,\n        form: {},\n        creationError: undefined,\n      },\n      tsTypes: {} as import(\"./TrialPlanMachine.typegen\").Typegen0,\n      predictableActionArguments: true,\n      schema: {\n        context: {} as TrialPlanMachineContext,\n        events: {} as\n          | { type: \"fieldInvalid\" }\n          | { type: \"nameChange\"; name: string }\n          | { type: \"providerChange\"; provider: CloudProvider }\n          | { type: \"regionChange\"; region: CloudRegion }\n          | { type: \"nameIsValid\" }\n          | { type: \"nameIsInvalid\" }\n          | { type: \"nameIsTaken\" }\n          | { type: \"submit\" }\n          | { type: \"create\" }\n          | { type: \"createSuccess\" }\n          | { type: \"createError\"; error: CreateKafkaInstanceError },\n        services: {} as {\n          getSizes: {\n            data: TrialSizes;\n          };\n        },\n      },\n      initial: \"verifyAvailability\",\n      id: \"TrialPlanMachine\",\n      states: {\n        verifyAvailability: {\n          entry: \"setInitialContext\",\n          always: [\n            {\n              cond: \"isTrialUsed\",\n              target: \"trialUsed\",\n            },\n            {\n              cond: \"isTrialUnavailable\",\n              target: \"trialUnavailable\",\n            },\n            {\n              target: \"configuring\",\n            },\n          ],\n        },\n        trialUsed: {\n          tags: \"blocked\",\n        },\n        trialUnavailable: {\n          tags: \"blocked\",\n        },\n        regionsUnavailable: {\n          tags: \"blocked\",\n        },\n        configuring: {\n          type: \"parallel\",\n          states: {\n            status: {\n              initial: \"unsubmitted\",\n              states: {\n                unsubmitted: {\n                  tags: \"unsubmitted\",\n                },\n                submitted: {\n                  entry: \"triggerSubmit\",\n                  tags: \"submitted\",\n                },\n              },\n              on: {\n                create: {\n                  description:\n                    \"Save is enabled all the time, if it's clicked before the form is completely filled out we should show the validation for all errored fields\",\n                  target: \".submitted\",\n                },\n              },\n            },\n            form: {\n              initial: \"invalid\",\n              states: {\n                invalid: {\n                  tags: \"formInvalid\",\n                },\n                valid: {\n                  entry: \"resetCreationErrorMessage\",\n                  on: {\n                    fieldInvalid: {\n                      target: \"invalid\",\n                    },\n                    submit: {\n                      target: \"saving\",\n                    },\n                  },\n                },\n                saving: {\n                  entry: [\"resetCreationErrorMessage\", \"triggerSave\"],\n                  tags: \"formSaving\",\n                  on: {\n                    createSuccess: {\n                      target: \"saved\",\n                    },\n                    createError: {\n                      actions: \"setCreationError\",\n                      target: \"invalid\",\n                    },\n                  },\n                },\n                saved: {\n                  type: \"final\",\n                },\n              },\n              on: {\n                fieldInvalid: {\n                  description:\n                    \"sent by the fields when their value change to an invalid value. This will transition the form to the invalid state, to then eventually transition to the valid state if the field state is marked as done (which means that all fields have a valid value selected)\",\n                  target: \".invalid\",\n                },\n              },\n            },\n            fields: {\n              tags: \"configurable\",\n              type: \"parallel\",\n              states: {\n                name: {\n                  initial: \"validate\",\n                  states: {\n                    empty: {\n                      tags: \"nameEmpty\",\n                    },\n                    invalid: {\n                      entry: \"fieldInvalid\",\n                      tags: \"nameInvalid\",\n                    },\n                    valid: {\n                      tags: \"nameValid\",\n                      type: \"final\",\n                    },\n                    validate: {\n                      always: [\n                        {\n                          cond: \"nameIsEmpty\",\n                          target: \"empty\",\n                        },\n                        {\n                          cond: \"nameIsValid\",\n                          target: \"valid\",\n                        },\n                        {\n                          target: \"invalid\",\n                        },\n                      ],\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    nameChange: {\n                      actions: \"setName\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n                provider: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"providerIsValid\",\n                          target: \"valid\",\n                        },\n                        {\n                          target: \"invalid\",\n                        },\n                      ],\n                    },\n                    invalid: {\n                      entry: \"fieldInvalid\",\n                      tags: \"providerInvalid\",\n                    },\n                    valid: {\n                      tags: \"providerValid\",\n                      type: \"final\",\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    providerChange: {\n                      actions: \"setProvider\",\n                      cond: \"didProviderChange\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n                region: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"regionIsValid\",\n                          target: \"valid\",\n                        },\n                        {\n                          target: \"invalid\",\n                        },\n                      ],\n                    },\n                    invalid: {\n                      entry: \"fieldInvalid\",\n                      tags: \"regionInvalid\",\n                    },\n                    valid: {\n                      tags: \"regionValid\",\n                      type: \"final\",\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    providerChange: {\n                      target: \".validate\",\n                    },\n                    regionChange: {\n                      actions: \"setRegion\",\n                      cond: \"didRegionChange\",\n                      target: \".validate\",\n                    },\n                  },\n                },\n                size: {\n                  initial: \"validate\",\n                  states: {\n                    validate: {\n                      always: [\n                        {\n                          cond: \"noProviderAndRegion\",\n                          target: \"idle\",\n                        },\n                        {\n                          cond: \"noSizes\",\n                          target: \"loading\",\n                        },\n                        {\n                          cond: \"emptySizes\",\n                          target: \"error\",\n                        },\n                        {\n                          target: \"valid\",\n                        },\n                      ],\n                    },\n                    idle: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeIdle\",\n                    },\n                    valid: {\n                      tags: \"sizeValid\",\n                      type: \"final\",\n                    },\n                    error: {\n                      entry: \"fieldInvalid\",\n                      tags: \"sizeError\",\n                    },\n                    loading: {\n                      description:\n                        \"Fetch the data required to show the available sizes and limits\",\n                      invoke: {\n                        src: \"getSizes\",\n                        onDone: [\n                          {\n                            actions: \"setSizes\",\n                            target: \"validate\",\n                          },\n                        ],\n                        onError: [\n                          {\n                            target: \"error\",\n                          },\n                        ],\n                      },\n                      tags: \"sizeLoading\",\n                    },\n                  },\n                  on: {\n                    create: {\n                      target: \".validate\",\n                    },\n                    providerChange: {\n                      target: \".validate\",\n                    },\n                    regionChange: {\n                      target: \".validate\",\n                    },\n                  },\n                },\n              },\n              onDone: {\n                target: \"#TrialPlanMachine.configuring.form.valid\",\n              },\n            },\n          },\n          onDone: {\n            target: \"saved\",\n          },\n        },\n        saved: {\n          type: \"final\",\n        },\n      },\n    },\n    {\n      actions: {\n        setInitialContext: assign((context) => {\n          return {\n            form: {\n              ...(context.capabilities.defaultProvider\n                ? onProviderChange(\n                    context.capabilities.availableProviders,\n                    context.capabilities.defaultProvider\n                  )\n                : {}),\n            },\n          };\n        }),\n        fieldInvalid: send(\"fieldInvalid\"),\n        setName: assign((context, { name }) => {\n          if (context.creationError === \"name-taken\") {\n            return {\n              form: { ...context.form, name },\n              creationError: undefined,\n            };\n          }\n          return { form: { ...context.form, name } };\n        }),\n        setProvider: assign((context, { provider }) => {\n          return {\n            form: {\n              ...context.form,\n              ...onProviderChange(\n                context.capabilities.availableProviders,\n                provider\n              ),\n            },\n            sizes: undefined,\n          };\n        }),\n        setRegion: assign((context, { region }) => {\n          if (context.creationError === \"region-unavailable\") {\n            return {\n              form: { ...context.form, region },\n              sizes: undefined,\n              creationError: undefined,\n            };\n          }\n          return {\n            form: {\n              ...context.form,\n              region,\n            },\n            sizes: undefined,\n          };\n        }),\n        setSizes: assign((_context, event) => {\n          const sizes = event.data;\n          return {\n            sizes,\n          };\n        }),\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        resetCreationErrorMessage: assign((_context) => ({\n          creationError: undefined,\n        })),\n        setCreationError: assign((_context, { error }) => ({\n          creationError: error,\n        })),\n        triggerSave: sendParent((context) => {\n          const form = context.form as Required<typeof context.form>;\n          const data: CreateKafkaFormData = {\n            plan: \"developer\",\n            name: form.name,\n            provider: form.provider,\n            region: form.region,\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            sizeId: context.sizes!.trial.id,\n            billing: undefined,\n          };\n          return {\n            type: \"save\",\n            data,\n          };\n        }),\n        triggerSubmit: send(\"submit\"),\n      },\n      guards: {\n        isTrialUsed: ({ capabilities }) =>\n          capabilities === undefined ||\n          capabilities.instanceAvailability === \"used\",\n        isTrialUnavailable: ({ capabilities }) =>\n          capabilities === undefined ||\n          capabilities.instanceAvailability === \"unavailable\",\n        nameIsEmpty: ({ form }) =>\n          form.name === undefined || form.name.length === 0,\n        nameIsValid: ({ form }) =>\n          /^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(form.name || \"\"),\n        providerIsValid: ({ form, capabilities }) => {\n          const selectedProviderInfo = capabilities?.availableProviders.find(\n            (p) => p.id === form.provider\n          );\n          return (\n            // must have loaded a list of providers\n            (capabilities?.availableProviders || []).length > 0 &&\n            // must have selected a provider\n            selectedProviderInfo !== undefined\n          );\n        },\n        regionIsValid: ({ form, capabilities }) => {\n          const selectedProviderInfo = capabilities?.availableProviders.find(\n            (p) => p.id === form.provider\n          );\n          return (\n            // must have selected a region\n            form.region !== undefined &&\n            // the region must be included in the capabilities for the provider\n            selectedProviderInfo?.regions.find((r) => r.id === form.region) !==\n              undefined\n          );\n        },\n        noProviderAndRegion: ({ form }) =>\n          form.provider === undefined || form.region === undefined,\n        noSizes: ({ sizes }) => sizes === undefined,\n        emptySizes: ({ sizes }) =>\n          sizes !== undefined && sizes.standard.length === 0,\n        didProviderChange: (context, event) =>\n          context.form.provider !== event.provider,\n        didRegionChange: (context, event) =>\n          context.form.region !== event.region,\n      },\n    }\n  );\n","import type { CloudProvider, CloudRegion } from \"ui-models/src/models/kafka\";\nimport { assign, createMachine, EventFrom, forwardTo, send } from \"xstate\";\nimport type {\n  CloudProvidersInfo,\n  CreateKafkaFormData,\n  CreateKafkaInitializationData,\n  CreateKafkaInstanceError,\n  StandardPlanInitializationData,\n  StandardSizes,\n  TrialPlanInitializationData,\n  TrialSizes,\n} from \"../types\";\nimport {\n  StandardPlanMachine,\n  StandardPlanMachineContext,\n} from \"./StandardPlanMachine\";\nimport { TrialPlanMachine, TrialPlanMachineContext } from \"./TrialPlanMachine\";\n\ntype Quota =\n  | Pick<\n      StandardPlanInitializationData,\n      | \"plan\"\n      | \"remainingPrepaidQuota\"\n      | \"marketplaceSubscriptions\"\n      | \"remainingMarketplaceQuota\"\n      | \"instanceAvailability\"\n    >\n  | Pick<TrialPlanInitializationData, \"plan\" | \"instanceAvailability\">;\n\nexport type CreateKafkaInstanceMachineContext = {\n  quota: Quota | undefined;\n  providers: CloudProvidersInfo | undefined;\n  defaultProvider: CloudProvider | undefined;\n  capabilities: CreateKafkaInitializationData | undefined;\n};\n\nconst CreateKafkaInstanceMachine =\n  /** @xstate-layout N4IgpgJg5mDOIC5QGMBOYCGAXMBpDAZgNYYCSAdrFhucmAHQA2A9hhAJblT0COArs2r1kACzDIinKAAIqNCBlQRp-QRgDEYVKmap6AB0bYCugLbD02PIRIU5tBizZTeAoaPGSus6uQVKVNwwETgA3ZmRsdmZyAG0ABgBdRFB9Zlh2LGjyFJAAD0QAFniAJnp4gGYAdkKATgAOeqr4qvrCgFYAGhAAT0QANir++n769tqq2sKARhKKjsKAX0XutEwcfGIySl86JlYOLlc1YTEJKR95RWVVanV7fxug6QxQjHYjACNGMFy0jKyMVyBQQxTKlRqDSaLTaXV6iHG8XoVXahX6UyqJVqJX6-WWq0sGxs23seych24twwp08Fwe10CanUzD4WGkzAIlz8DKpf3SmWywKKpXK1TqjWarQ63T6CHa8UK9Hqcw6JUK6palXxIDWVk2th2NDJBxcVJp5289ICVPU5GYXMejOoLzeHww31+SBA-wFQK9ILBoshEph0vhoPaw2hFRKasKbQa0yWKx1hOsWzsu0cJqOZqtEHUfIBgv9iCTU2RkZj03RYsjMoGyvo0yG40KJSq0wq02m9W1uqJGcNDn2zlzQXoEDAoTALH0WkLXp9gJypYQ5cVKP61drNXr4faFSRJVmdUmasjvf7af1JKzo4px3cZy8MinM7nWhd7y+H0yPU0bRdAMIwsBMVBzAHdMDVJbMx0pCcPAtN9p1nZh51Qb83U+P8sB6EJyHCSIVwSZIl35FchQQWpanaeh4y7JN5gqbFZgbOU1WRE96m3Bp+lRKoKmvdZoLvI04MfM0kNfaR3zQjCsN-Rh-3UOTP0wvhYEgItfVXUAQRouiGO7QpmNYkp2NMqolXqWZcSPCpRn6NFhL1YlM3Eh9TUQl8LjU9Cv1eH93VwgD-IUoLsJ+HTKLXQz6NskyzJPCzwwqdppnoWj4niaZ2kPepaiTaZXMHGD73JFwCDALBRAufQdFCdgp1QWB1Aa5gmpa2AXj8aR0CgbIesir5ovI4s-X0staNqegjzGcZ+hKHjeyqdj2jGcplu4moFSqKpStEjyR0qo5qtqkR6sa5qtDarQdD0QxjDMCwRNvY7jXg+hzrq7wOq626CKIqIYlImKSym9cMRsiY0RmaYFXiOFZUKfa5rqRy5mmWp4kGdpDve4dPsfH7Lr+67uvainbvZTCBqG6Q+HIEb3TG1IKIh-Jpsjeh2k7XHOw7QqWnY0Z6mbapakGNVqgR-GUygwnYK8rhVJiBg5BwV63KHZXTqgcHJq5hASlROj+lKCp6kqdUVvYq3Mr3ds0UaPLZgJ9yiY13xHSe8h6Gan57leT12YmvTjaxbd6NM+NDIVdLCkskUFmxyZt2cwYPd1+982kP36FgV4pHUKCAGU+GQOhYHgcbdKoxOjKR0p6nmYXlvt1Fyn6Lt1W7E9Jkc7Pys8vOC6LprVaggBRIDUENiOQSjioY7b+PTNRe2a152NbLy03M7y4exJHcKvwLwOwGDmcF6orFWl5i2Nt7toEYqUWpayrt5SW+z4ls4+H0GBn0wuPYuU80wVyrnAWuYd65rkbvRBUtQ6x9zaKLeMO8WhDB7PEKEtRAFe0nKhdS+cjD+wniXGec9b5rnvuLSMSNErxhmJUUWCMsrKmWngsEuJ5YpjtFOWBqY3qez1jmBCJxpJ0h9jyIItDIYI1SrKSM4tW6dmVB0TsaISoKxvGIiqEinzUnzAo42zRxYojmD3FEtk+bTFFkMZskYcS9mfiwwh4ivpmhAWYkEswGg2RwSxJosxSjrU4tjAePcEY8SKp4wx3ifK0m8CAxSIVlJ4T8QMfic1lrFVaMqeYDjwztjojxHhsYOxW1ssmAkoic6eX1sY7JCBWjsQ7LNKWjRKiLRxmieW9SdYjxOkY0mV1Oo3Vaq0msCoY7FCGOlWMsxkYIkxMiHh7RYyMPjEJPRDSRnExcJYCAso4GxUhrGQY5QMpjCSpedaExkRND5jorEFQ9lDLKifI5XBWmb3DC2TKlRGLVCxBeDoCTR49CoGAUwjNmaulGqHb0HMjYgkciiLK+UUFWRxt2VZbT1mt1GK0Fo-EOx4n2cMn53srgBAvhANmqLw53yaIqfi4xsQdnyu2d+aVqjONbmna2OJuxQpHGPchhdwEGzrhc42MZBXYwmD3CE-F+j21jCMZy8Ytxdlom0CVewpU0FacteUIwcXcpRKiOY7FsYrzBdbeMhUWJt2NcAkhAVQHSsvuaxos19rzUxelFsyiBjdhGC2UYLY4k9l0V8o6RC0lgMnnK85nMMVVPKJo2GbiirsOsrMd1uU1SWzqSImlQDiEfh9WQs18qs2IGWrk4N-9Q0ZUxJZJoSolWVBylYwqnrhDMFMIYGqKLlzNoQNUf+SomFoP2p2Ht1lcZ5Roj2IW4rqXfKAa0o87EaI3JyhtQS2Ntyo2WMsIAA */\n  createMachine(\n    {\n      context: {\n        providers: undefined,\n        defaultProvider: undefined,\n        quota: undefined,\n        capabilities: undefined,\n      },\n      predictableActionArguments: true,\n      tsTypes: {} as import(\"./CreateKafkaInstanceMachine.typegen\").Typegen0,\n      schema: {\n        context: {} as CreateKafkaInstanceMachineContext,\n        events: {} as\n          | {\n              type: \"standard quota available\";\n              quota: Pick<\n                StandardPlanInitializationData,\n                | \"remainingPrepaidQuota\"\n                | \"remainingMarketplaceQuota\"\n                | \"marketplaceSubscriptions\"\n              >;\n            }\n          | {\n              type: \"out of standard quota\";\n              quota: Pick<\n                StandardPlanInitializationData,\n                \"marketplaceSubscriptions\"\n              >;\n            }\n          | {\n              type: \"no standard quota available\";\n              hasTrialQuota: boolean;\n            }\n          | {\n              type: \"trial available\";\n              capabilities: TrialPlanInitializationData;\n            }\n          | { type: \"trial used\" }\n          | { type: \"developer available\" }\n          | { type: \"developer used\" }\n          | { type: \"developer unavailable\" }\n          | {\n              type: \"providers and regions available\";\n              providers: CloudProvidersInfo;\n              defaultProvider: CloudProvider | undefined;\n            }\n          | { type: \"providers or regions unavailable\" }\n          | { type: \"save\"; data: CreateKafkaFormData }\n          | { type: \"createSuccess\" }\n          | { type: \"createError\"; error: CreateKafkaInstanceError },\n        services: {} as {\n          checkStandardQuota: {\n            data: never;\n          };\n          checkDeveloperAvailability: {\n            data: never;\n          };\n          fetchProvidersWithRegions: {\n            data: never;\n          };\n          standardPlan: {\n            data: StandardPlanMachineContext;\n          };\n          trialPlan: {\n            data: TrialPlanMachineContext;\n          };\n        },\n      },\n      id: \"createKafkaInstance\",\n      initial: \"loading\",\n      states: {\n        loading: {\n          description: \"Fetch the data required to drive the creation flow\",\n          tags: \"loading\",\n          initial: \"quota\",\n          states: {\n            quota: {\n              initial: \"checking standard quota\",\n              states: {\n                \"checking standard quota\": {\n                  invoke: {\n                    src: \"checkStandardQuota\",\n                    onError: [\n                      {\n                        actions: \"setStandardUnavailable\",\n                        target: \"standard\",\n                      },\n                    ],\n                  },\n                  on: {\n                    \"standard quota available\": {\n                      actions: \"setStandardAvailable\",\n                      target: \"standard\",\n                    },\n                    \"out of standard quota\": {\n                      actions: \"setStandardOutOfQuota\",\n                      target: \"standard\",\n                    },\n                    \"no standard quota available\": {\n                      target: \"checking developer availability\",\n                    },\n                  },\n                },\n                standard: {\n                  type: \"final\",\n                  always: {\n                    target: \"#createKafkaInstance.loading.fetching providers\",\n                  },\n                },\n                developer: {\n                  type: \"final\",\n                  always: {\n                    target: \"#createKafkaInstance.loading.fetching providers\",\n                  },\n                },\n                \"checking developer availability\": {\n                  invoke: {\n                    src: \"checkDeveloperAvailability\",\n                    onError: [\n                      {\n                        actions: \"setDeveloperUnavailable\",\n                        target: \"developer\",\n                      },\n                    ],\n                  },\n                  on: {\n                    \"developer used\": {\n                      actions: \"setDeveloperUsed\",\n                      target: \"developer\",\n                    },\n                    \"developer available\": {\n                      actions: \"setDeveloperAvailable\",\n                      target: \"developer\",\n                    },\n                    \"developer unavailable\": {\n                      actions: \"setDeveloperUnavailable\",\n                      target: \"developer\",\n                    },\n                  },\n                },\n              },\n            },\n            \"fetching providers\": {\n              invoke: {\n                src: \"fetchProvidersWithRegions\",\n                onError: [\n                  {\n                    actions: \"setProvidersOrRegionsUnavailable\",\n                    target: \"ready\",\n                  },\n                ],\n              },\n              on: {\n                \"providers and regions available\": {\n                  actions: \"setProviders\",\n                  target: \"ready\",\n                },\n                \"providers or regions unavailable\": {\n                  actions: \"setProvidersOrRegionsUnavailable\",\n                  target: \"ready\",\n                },\n              },\n            },\n            ready: {\n              type: \"final\",\n              entry: \"setCapabilities\",\n            },\n          },\n          onDone: [\n            {\n              cond: \"standard plan\",\n              target: \"standard plan\",\n            },\n            {\n              cond: \"developer plan\",\n              target: \"developer plan\",\n            },\n            {\n              target: \"system unavailable\",\n            },\n          ],\n        },\n        \"system unavailable\": {\n          tags: \"systemUnavailable\",\n          type: \"final\",\n        },\n        \"standard plan\": {\n          invoke: {\n            src: \"standardPlan\",\n            id: \"standardPlanService\",\n          },\n          tags: \"standardPlan\",\n          initial: \"idle\",\n          states: {\n            idle: {\n              on: {\n                save: {\n                  target: \"saving\",\n                },\n              },\n            },\n            saving: {\n              invoke: {\n                src: \"createInstance\",\n              },\n              tags: \"saving\",\n              on: {\n                createSuccess: {\n                  target: \"#createKafkaInstance.complete\",\n                },\n                createError: {\n                  actions: \"notifyCreateErrorToStandardPlan\",\n                  target: \"idle\",\n                },\n              },\n            },\n          },\n        },\n        \"developer plan\": {\n          invoke: {\n            src: \"trialPlan\",\n            id: \"trialPlanService\",\n          },\n          tags: \"trialPlan\",\n          initial: \"idle\",\n          states: {\n            idle: {\n              on: {\n                save: {\n                  target: \"saving\",\n                },\n              },\n            },\n            saving: {\n              invoke: {\n                src: \"createInstance\",\n              },\n              tags: \"saving\",\n              on: {\n                createSuccess: {\n                  target: \"#createKafkaInstance.complete\",\n                },\n                createError: {\n                  actions: \"notifyCreateErrorToTrialPlan\",\n                  target: \"idle\",\n                },\n              },\n            },\n          },\n        },\n        complete: {\n          type: \"final\",\n        },\n      },\n    },\n    {\n      actions: {\n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        setDeveloperAvailable: assign((_) => ({\n          quota: {\n            plan: \"developer\" as const,\n            instanceAvailability: \"available\" as const,\n          },\n        })),\n        setDeveloperUnavailable: assign((_) => ({\n          quota: {\n            plan: \"developer\" as const,\n            instanceAvailability: \"unavailable\" as const,\n          },\n        })),\n        setDeveloperUsed: assign((_) => ({\n          quota: {\n            plan: \"developer\" as const,\n            instanceAvailability: \"used\" as const,\n          },\n        })),\n        setStandardAvailable: assign((_, event) => ({\n          quota: {\n            plan: \"standard\" as const,\n            instanceAvailability: \"available\" as const,\n            remainingPrepaidQuota: event.quota.remainingPrepaidQuota,\n            marketplaceSubscriptions: event.quota.marketplaceSubscriptions,\n            remainingMarketplaceQuota: event.quota.remainingMarketplaceQuota,\n          },\n        })),\n        setStandardOutOfQuota: assign((_, event) => ({\n          quota: {\n            plan: \"standard\" as const,\n            instanceAvailability: \"out-of-quota\" as const,\n            marketplaceSubscriptions: event.quota.marketplaceSubscriptions,\n            remainingMarketplaceQuota: 0,\n            remainingPrepaidQuota: 0,\n          },\n        })),\n        setStandardUnavailable: assign((_) => ({\n          quota: {\n            plan: \"standard\" as const,\n            instanceAvailability: \"instance-unavailable\" as const,\n            marketplaceSubscriptions: [],\n            remainingMarketplaceQuota: 0,\n            remainingPrepaidQuota: 0,\n          },\n        })),\n        setProviders: assign((_, event) => {\n          return {\n            providers: event.providers,\n            defaultProvider: event.defaultProvider,\n          };\n        }),\n        setProvidersOrRegionsUnavailable: assign((context) => {\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          const quota = context.quota!;\n          if (quota.plan === \"standard\") {\n            quota.instanceAvailability = \"regions-unavailable\";\n          } else {\n            quota.instanceAvailability = \"unavailable\";\n          }\n          return {\n            providers: [],\n            quota,\n          };\n        }),\n        setCapabilities: assign((context) => {\n          const { providers, defaultProvider, quota } = context;\n          if (!providers || !quota) {\n            throw new Error(\"unexpected condition, no providers or quota\");\n          }\n          if (quota.plan === \"standard\") {\n            const capabilities: StandardPlanInitializationData = {\n              plan: \"standard\",\n              availableProviders: providers,\n              defaultProvider,\n              instanceAvailability: quota.instanceAvailability,\n              marketplaceSubscriptions: quota.marketplaceSubscriptions,\n              remainingMarketplaceQuota: quota.remainingMarketplaceQuota,\n              remainingPrepaidQuota: quota.remainingPrepaidQuota,\n            };\n            return { capabilities };\n          } else {\n            const capabilities: TrialPlanInitializationData = {\n              plan: \"developer\",\n              availableProviders: providers,\n              defaultProvider,\n              instanceAvailability: quota.instanceAvailability,\n            };\n            return { capabilities };\n          }\n        }),\n        notifyCreateErrorToStandardPlan: forwardTo(\"standardPlanService\"),\n        notifyCreateErrorToTrialPlan: send(\n          (_, event) => {\n            return { type: \"createError\", error: event.error };\n          },\n          { to: \"trialPlanService\" }\n        ),\n        /* eslint-enable @typescript-eslint/no-unused-vars */\n      },\n      guards: {\n        \"standard plan\": (context) => context.quota?.plan === \"standard\",\n        \"developer plan\": (context) => context.quota?.plan === \"developer\",\n      },\n    }\n  );\n\ntype EventTypes = Pick<\n  EventFrom<typeof CreateKafkaInstanceMachine>,\n  \"type\"\n>[\"type\"];\n\ntype EventOptions<E extends EventTypes> = Omit<\n  EventFrom<typeof CreateKafkaInstanceMachine, E>,\n  \"type\"\n>;\n\nexport type CreateKafkaInstanceServices = {\n  checkStandardQuota: (events: {\n    onOutOfQuota: (p: EventOptions<\"out of standard quota\">) => void;\n    onQuotaAvailable: (p: EventOptions<\"standard quota available\">) => void;\n    onNoQuotaAvailable: (\n      p: EventOptions<\"no standard quota available\">\n    ) => void;\n  }) => void;\n  checkDeveloperAvailability: (events: {\n    onUsed: () => void;\n    onAvailable: () => void;\n    onUnavailable: () => void;\n  }) => void;\n  fetchProvidersWithRegions: (\n    plan: \"standard\" | \"developer\",\n    events: {\n      onAvailable: (p: EventOptions<\"providers and regions available\">) => void;\n      onUnavailable: () => void;\n    }\n  ) => void;\n  getStandardSizes: (\n    provider: CloudProvider,\n    region: CloudRegion\n  ) => Promise<StandardSizes>;\n  getTrialSizes: (\n    provider: CloudProvider,\n    region: CloudRegion\n  ) => Promise<TrialSizes>;\n  onCreate: (\n    data: CreateKafkaFormData,\n    onSuccess: () => void,\n    onError: (error: CreateKafkaInstanceError) => void\n  ) => void;\n};\n\nexport function makeCreateKafkaInstanceMachine({\n  checkStandardQuota: checkStandardQuotaCb,\n  checkDeveloperAvailability: checkDeveloperAvailabilityCb,\n  fetchProvidersWithRegions: fetchProvidersWithRegionsCb,\n  getStandardSizes: getStandardSizesCb,\n  getTrialSizes: getTrialSizesCb,\n  onCreate,\n}: CreateKafkaInstanceServices) {\n  return CreateKafkaInstanceMachine.withConfig({\n    services: {\n      checkStandardQuota: () => {\n        return (send) =>\n          checkStandardQuotaCb({\n            onNoQuotaAvailable: ({ hasTrialQuota }) => {\n              send({ type: \"no standard quota available\", hasTrialQuota });\n            },\n            onOutOfQuota: ({ quota }) => {\n              send({ type: \"out of standard quota\", quota });\n            },\n            onQuotaAvailable: ({ quota }) => {\n              send({ type: \"standard quota available\", quota });\n            },\n          });\n      },\n      checkDeveloperAvailability: () => {\n        return (send) => {\n          checkDeveloperAvailabilityCb({\n            onAvailable: () => send(\"developer available\"),\n            onUsed: () => send(\"developer used\"),\n            onUnavailable: () => send(\"developer unavailable\"),\n          });\n        };\n      },\n      fetchProvidersWithRegions: (context) => {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const instanceType = context.quota!.plan;\n        return (send) => {\n          fetchProvidersWithRegionsCb(instanceType, {\n            onAvailable: ({ providers, defaultProvider }) =>\n              send({\n                type: \"providers and regions available\",\n                providers,\n                defaultProvider,\n              }),\n            onUnavailable: () => send(\"providers or regions unavailable\"),\n          });\n        };\n      },\n      createInstance: (_context, event) => {\n        const form = event.data;\n\n        return (send) => {\n          function onSuccess() {\n            send(\"createSuccess\");\n          }\n\n          function onError(error: CreateKafkaInstanceError) {\n            send({ type: \"createError\", error });\n          }\n\n          onCreate(\n            {\n              plan: form.plan,\n              name: form.name,\n              provider: form.provider,\n              region: form.region,\n              sizeId: form.sizeId,\n              billing: form.billing,\n            },\n            onSuccess,\n            onError\n          );\n        };\n      },\n      standardPlan: (context) => {\n        return StandardPlanMachine.withContext({\n          capabilities: context.capabilities as StandardPlanInitializationData,\n          sizes: undefined,\n          form: {},\n          creationError: undefined,\n        }).withConfig({\n          services: {\n            getSizes: (context) => {\n              const form = context.form as Required<typeof context.form>;\n              return getStandardSizesCb(form.provider, form.region);\n            },\n          },\n        });\n      },\n      trialPlan: (context) => {\n        return TrialPlanMachine.withContext({\n          capabilities: context.capabilities as TrialPlanInitializationData,\n          sizes: undefined,\n          form: {},\n          creationError: undefined,\n        }).withConfig({\n          services: {\n            getSizes: (context) => {\n              const form = context.form as Required<typeof context.form>;\n              return getTrialSizesCb(form.provider, form.region);\n            },\n          },\n        });\n      },\n    },\n  });\n}\n","import { useInterpret } from \"@xstate/react\";\nimport type { FunctionComponent } from \"react\";\nimport { createContext } from \"react\";\nimport type { ActorRefFrom } from \"xstate\";\nimport type { CreateKafkaInstanceServices } from \"./CreateKafkaInstanceMachine\";\nimport { makeCreateKafkaInstanceMachine } from \"./CreateKafkaInstanceMachine\";\n\nexport const CreateKafkaInstanceContext = createContext<{\n  service: ActorRefFrom<ReturnType<typeof makeCreateKafkaInstanceMachine>>;\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n}>(null!);\n\nexport const CreateKafkaInstanceProvider: FunctionComponent<\n  CreateKafkaInstanceServices\n> = ({\n  onCreate,\n  checkStandardQuota,\n  checkDeveloperAvailability,\n  fetchProvidersWithRegions,\n  getStandardSizes,\n  getTrialSizes,\n  children,\n}) => {\n  const service = useInterpret(\n    () =>\n      makeCreateKafkaInstanceMachine({\n        checkStandardQuota,\n        checkDeveloperAvailability,\n        fetchProvidersWithRegions,\n        getStandardSizes,\n        getTrialSizes,\n        onCreate,\n      }),\n    { devTools: true }\n  );\n  return (\n    <CreateKafkaInstanceContext.Provider value={{ service }}>\n      {children}\n    </CreateKafkaInstanceContext.Provider>\n  );\n};\n","export const LogoAWS = new URL(\"./Logo-AWS.svg\", import.meta.url)\n  .href;\nexport const LogoAzure = new URL(\n  \"./Logo-Azure.svg\",\n  import.meta.url\n).href;\nexport const LogoGCP = new URL(\"./Logo-GCP.svg\", import.meta.url)\n  .href;\nexport const LogoRedhat = new URL(\n  \"./Logo-Redhat.svg\",\n  import.meta.url\n).href;","import type { FunctionComponent } from \"react\";\nimport { LogoAWS } from \"./images\";\n\nexport const AWSLogo: FunctionComponent = () => {\n  return (\n    <>\n      <img src={LogoAWS} alt={\"\"} style={{ height: \"60px\" }} />\n    </>\n  );\n};\n","import type { FunctionComponent } from \"react\";\nimport { LogoAzure } from \"./images\";\n\nexport const AzureLogo: FunctionComponent = () => {\n  return (\n    <>\n      <img src={LogoAzure} alt={\"\"} style={{ height: \"60px\" }} />\n    </>\n  );\n};\n","import type { FunctionComponent } from \"react\";\nimport { LogoGCP } from \"./images\";\n\nexport const GCPLogo: FunctionComponent = () => {\n  return (\n    <>\n      <img src={LogoGCP} alt={\"\"} style={{ height: \"60px\" }} />\n    </>\n  );\n};\n","import type { SelectProps } from \"@patternfly/react-core\";\nimport {\n  Flex,\n  FlexItem,\n  FormSelect,\n  FormSelectOption,\n  Gallery,\n  GalleryItem,\n  HelperText,\n  HelperTextItem,\n  Tile,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport type { MarketPlace } from \"ui-models/src/models/kafka\";\nimport { AWSLogo, AzureLogo, GCPLogo, RedhatLogo } from \"../../Logos\";\n\nexport type BillingTilesProps = {\n  value: \"prepaid\" | string | undefined;\n  hasPrepaid: boolean;\n  subscriptions: {\n    marketplace: MarketPlace;\n    subscription: string;\n    isDisabled: boolean;\n  }[];\n  isPrepaidOverQuota: boolean;\n  prepaidQuota: number;\n  isMarketplaceOverQuota: boolean;\n  marketplaceQuota: number;\n  onPrepaid: () => void;\n  onSubscription: (marketplace: MarketPlace, subscription: string) => void;\n  validated?: SelectProps[\"validated\"];\n};\nexport const BillingTiles: VoidFunctionComponent<BillingTilesProps> = ({\n  value,\n  hasPrepaid,\n  subscriptions,\n  isPrepaidOverQuota,\n  prepaidQuota,\n  isMarketplaceOverQuota,\n  marketplaceQuota,\n  onPrepaid,\n  onSubscription,\n  validated,\n}) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n  const marketplaces: { [key in MarketPlace]: string } = {\n    aws: t(\"billing.marketplace_aws\"),\n    azure: t(\"billing.marketplace_azure\"),\n    gcp: t(\"billing.marketplace_gcp\"),\n    rhm: t(\"billing.marketplace_rh\"),\n  };\n  return (\n    <>\n      <Flex\n        role=\"listbox\"\n        aria-label={t(\"select_billing\")}\n        direction={{ default: \"column\", md: \"row\" }}\n      >\n        {hasPrepaid && (\n          <Flex\n            flex={{ default: \"flex_1\" }}\n            direction={{ default: \"column\" }}\n            spaceItems={{ default: \"spaceItemsSm\" }}\n          >\n            <span className=\"pf-c-form__label\">\n              <span className=\"pf-c-form__label-text\">\n                {t(\"billing.prepaid\")}\n              </span>\n            </span>\n            <FlexItem flex={{ default: \"flex_1\" }}>\n              <Tile\n                className={\"pf-u-w-100\"}\n                title={t(\"billing.prepaid_option\")}\n                icon={tiles[\"rhm\"]}\n                isDisabled={isPrepaidOverQuota}\n                isStacked={true}\n                isSelected={value === \"prepaid\"}\n                onClick={onPrepaid}\n              >\n                &nbsp;\n              </Tile>\n            </FlexItem>\n            {isPrepaidOverQuota && prepaidQuota > 0 && (\n              <HelperText className={\"pf-c-form__helper-text\"}>\n                <HelperTextItem variant={\"error\"}>\n                  {t(\"billing.prepaid_out_of_quota\")}\n                </HelperTextItem>\n              </HelperText>\n            )}\n            {isPrepaidOverQuota && prepaidQuota === 0 && (\n              <HelperText className={\"pf-c-form__helper-text\"}>\n                <HelperTextItem variant={\"error\"}>\n                  {t(\"billing.prepaid_out_of_quota\")}\n                </HelperTextItem>\n              </HelperText>\n            )}\n          </Flex>\n        )}\n        {subscriptions.length > 0 && (\n          <Flex\n            flex={{ default: \"flex_1\" }}\n            direction={{ default: \"column\" }}\n            spaceItems={{ default: \"spaceItemsSm\" }}\n          >\n            {hasPrepaid && (\n              <span className=\"pf-c-form__label\">\n                <span className=\"pf-c-form__label-text\">\n                  {t(\"billing.marketplace\")}\n                </span>\n              </span>\n            )}\n            <Gallery hasGutter={true}>\n              {subscriptions.map(\n                ({ marketplace, subscription, isDisabled }) => (\n                  <GalleryItem key={`tile-${subscription}`}>\n                    <Tile\n                      className={\"pf-u-w-100\"}\n                      title={marketplaces[marketplace]}\n                      icon={tiles[marketplace]}\n                      isStacked={true}\n                      isSelected={value === subscription}\n                      isDisabled={isDisabled || isMarketplaceOverQuota}\n                      onClick={() => onSubscription(marketplace, subscription)}\n                    >\n                      {subscription}\n                    </Tile>\n                  </GalleryItem>\n                )\n              )}\n            </Gallery>\n            {isMarketplaceOverQuota && marketplaceQuota > 0 && (\n              <HelperText className={\"pf-c-form__helper-text\"}>\n                <HelperTextItem variant={\"error\"}>\n                  {t(\"billing.marketplace_out_of_quota\")}\n                </HelperTextItem>\n              </HelperText>\n            )}\n            {isMarketplaceOverQuota && marketplaceQuota === 0 && (\n              <HelperText className={\"pf-c-form__helper-text\"}>\n                <HelperTextItem variant={\"error\"}>\n                  {t(\"billing.marketplace_out_of_quota\")}\n                </HelperTextItem>\n              </HelperText>\n            )}\n          </Flex>\n        )}\n      </Flex>\n      <FormSelect\n        className={\"pf-u-display-none\"}\n        value={value}\n        id=\"form-billing-option\"\n        name=\"billing\"\n        validated={validated}\n        onChange={(value) => {\n          if (value === \"prepaid\") {\n            onPrepaid();\n          } else {\n            const s = subscriptions.find((s) => s.marketplace === value);\n            if (s) {\n              onSubscription(s.marketplace, s.subscription);\n            }\n          }\n        }}\n      >\n        {[\n          <FormSelectOption\n            value=\"\"\n            key=\"placeholder\"\n            label={t(\"select_billing\")}\n          />,\n          hasPrepaid ? (\n            <FormSelectOption\n              key={\"prepaid\"}\n              value={\"prepaid\"}\n              label={`prepaid`}\n            />\n          ) : null,\n          subscriptions.map(({ marketplace, subscription, isDisabled }) => {\n            return (\n              <FormSelectOption\n                key={`select-option-${subscription}`}\n                value={subscription}\n                label={`${marketplace} - ${subscription}`}\n                isDisabled={isDisabled}\n              />\n            );\n          }),\n        ]}\n      </FormSelect>\n    </>\n  );\n};\n\nconst tiles: { [id in MarketPlace]: JSX.Element } = {\n  aws: <AWSLogo />,\n  gcp: <GCPLogo />,\n  azure: <AzureLogo />,\n  rhm: <RedhatLogo />,\n};\n","import type { FunctionComponent } from \"react\";\nimport { LogoRedhat } from \"./images\";\n\nexport const RedhatLogo: FunctionComponent = () => {\n  return (\n    <>\n      <img src={LogoRedhat} alt={\"\"} style={{ height: \"60px\" }} />\n    </>\n  );\n};\n","import type { SelectProps } from \"@patternfly/react-core\";\nimport {\n  Flex,\n  FlexItem,\n  FormSelect,\n  FormSelectOption,\n  Skeleton,\n  Tile,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport type { CloudProvider } from \"ui-models/src/models/kafka\";\nimport { AWSLogo, AzureLogo, GCPLogo } from \"../../Logos\";\nimport type { CloudProviderInfo } from \"../types\";\n\nexport type CloudProvidersTilesProps = {\n  providers: (CloudProviderInfo & { isDisabled?: boolean })[];\n  value: CloudProvider | undefined;\n  onChange: (provider: CloudProvider) => void;\n  isDisabled: boolean;\n  validated?: SelectProps[\"validated\"];\n};\nexport const CloudProvidersTiles: VoidFunctionComponent<\n  CloudProvidersTilesProps\n> = ({ providers, value, onChange, isDisabled, validated }) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n  return (\n    <>\n      {providers.length === 0 && (\n        <Skeleton\n          className=\"pf-m-text-4xl\"\n          screenreaderText=\"Loading contents\"\n        />\n      )}\n      <div role=\"listbox\" aria-label={t(\"select_cloud_provider\")}>\n        <Flex\n          justifyContent={{ default: \"justifyContentSpaceBetween\" }}\n          spacer={{ default: \"spacerNone\" }}\n          spaceItems={{ default: \"spaceItemsXs\" }}\n        >\n          {providers.map(\n            ({ id, displayName, isDisabled: providerDisabled }) => (\n              <FlexItem grow={{ default: \"grow\" }} key={id}>\n                <Tile\n                  className={\"pf-u-w-100\"}\n                  title={displayName}\n                  icon={tiles[id]}\n                  isStacked={true}\n                  isSelected={value === id}\n                  isDisabled={providerDisabled || isDisabled}\n                  onClick={() => onChange(id)}\n                >\n                  {(providerDisabled || isDisabled) &&\n                    t(\"billing.provider_incompatible_with_current_billing\")}\n                  &nbsp;\n                </Tile>\n              </FlexItem>\n            )\n          )}\n        </Flex>\n      </div>\n      <FormSelect\n        className={\"pf-u-display-none\"}\n        value={value}\n        id=\"form-cloud-provider-option\"\n        name=\"cloud-provider\"\n        isDisabled={isDisabled}\n        validated={validated}\n        onChange={(value) => onChange(value as CloudProvider)}\n      >\n        {[\n          <FormSelectOption\n            value=\"\"\n            key=\"placeholder\"\n            label={t(\"select_cloud_provider\")}\n          />,\n          providers.map(({ id, displayName }, index) => {\n            return (\n              <FormSelectOption key={index} value={id} label={displayName} />\n            );\n          }),\n        ]}\n      </FormSelect>\n    </>\n  );\n};\n\nconst tiles: { [id in CloudProvider]: JSX.Element } = {\n  aws: <AWSLogo />,\n  gcp: <GCPLogo />,\n  azure: <AzureLogo />,\n};\n","import { Flex, FlexItem, Form } from \"@patternfly/react-core\";\nimport type { FormEvent, VoidFunctionComponent } from \"react\";\nimport { useCallback } from \"react\";\nimport type { CloudProvider, MarketPlace } from \"ui-models/src/models/kafka\";\nimport type {\n  FieldInstanceNameProps,\n  FieldSizeProps,\n  InstanceInfoProps,\n} from \"./components\";\nimport {\n  FieldAZ,\n  FieldBillingTiles,\n  FieldCloudProvider,\n  FieldCloudRegion,\n  FieldInstanceName,\n  FieldSize,\n  FormAlerts,\n  InstanceInfo,\n  InstanceInfoSkeleton,\n  ModalAlertsStandardPlan,\n} from \"./components\";\nimport { useStandardPlanMachine } from \"./machines\";\n\nexport type StandardInstanceFormProps = {\n  formId: string;\n  onClickContactUs: () => void;\n  onLearnHowToAddStreamingUnits: () => void;\n  onLearnMoreAboutSizes: () => void;\n  onClickQuickStart: () => void;\n  subscriptionOptionsHref: string;\n};\n\nexport const StandardInstanceForm: VoidFunctionComponent<\n  StandardInstanceFormProps\n> = ({\n  formId,\n  onClickContactUs,\n  onLearnHowToAddStreamingUnits,\n  onLearnMoreAboutSizes,\n  onClickQuickStart,\n  subscriptionOptionsHref,\n}) => {\n  const {\n    isBillingSelectionRequired,\n    isBillingSingleMarketplace,\n    capabilities,\n    selectedSize,\n    billingType,\n    error,\n    onCreate,\n  } = useStandardPlanMachine();\n\n  const onSubmit = useCallback(\n    (event: FormEvent<HTMLFormElement>) => {\n      event.preventDefault();\n      onCreate();\n    },\n    [onCreate]\n  );\n\n  const instanceInfoBilling: InstanceInfoProps[\"billing\"] = (() => {\n    if (!isBillingSelectionRequired) {\n      if (isBillingSingleMarketplace === false) {\n        return {\n          value: \"prepaid\",\n          subscriptionOptionsHref,\n          type: billingType,\n        };\n      } else {\n        return {\n          value: isBillingSingleMarketplace,\n          subscriptionOptionsHref,\n          type: billingType,\n        };\n      }\n    }\n    return undefined;\n  })();\n\n  return (\n    <>\n      <ModalAlertsStandardPlan\n        instanceAvailability={capabilities.instanceAvailability}\n        onClickContactUs={onClickContactUs}\n      />\n\n      <Flex\n        direction={{ default: \"column\", lg: \"row\" }}\n        alignItems={{ lg: \"alignItemsFlexStart\" }}\n      >\n        <FlexItem flex={{ default: \"flex_2\" }}>\n          <FormAlerts error={error} onClickContactUS={onClickContactUs} />\n          <Form onSubmit={onSubmit} id={formId}>\n            <ConnectedFieldInstanceName />\n            <ConnectedFieldCloudProvider />\n            <ConnectedFieldCloudRegion />\n            <ConnectedFieldAZ />\n            <ConnectedFieldSize\n              onLearnHowToAddStreamingUnits={onLearnHowToAddStreamingUnits}\n              onLearnMoreAboutSizes={onLearnMoreAboutSizes}\n            />\n            {isBillingSelectionRequired && (\n              <ConnectedBillingTiles\n                subscriptionOptionsHref={subscriptionOptionsHref}\n              />\n            )}\n          </Form>\n        </FlexItem>\n        <FlexItem\n          flex={{ default: \"flex_1\" }}\n          className=\"mas--CreateKafkaInstance__sidebar\"\n        >\n          {selectedSize === undefined ? (\n            <InstanceInfoSkeleton\n              isTrial={false}\n              onClickQuickStart={onClickQuickStart}\n            />\n          ) : (\n            <InstanceInfo\n              isTrial={false}\n              trialDurationInHours={undefined}\n              ingress={selectedSize.ingress}\n              egress={selectedSize.egress}\n              storage={selectedSize.storage}\n              maxPartitions={selectedSize.maxPartitions}\n              connections={selectedSize.connections}\n              connectionRate={selectedSize.connectionRate}\n              messageSize={selectedSize.messageSize}\n              onClickQuickStart={onClickQuickStart}\n              streamingUnits={selectedSize.displayName}\n              billing={instanceInfoBilling}\n            />\n          )}\n        </FlexItem>\n      </Flex>\n    </>\n  );\n};\n\nexport const ConnectedFieldInstanceName: VoidFunctionComponent = () => {\n  const {\n    form,\n    isNameTaken,\n    isNameInvalid,\n    isNameEmpty,\n    isNameError,\n    isFormEnabled,\n    setName,\n  } = useStandardPlanMachine();\n\n  const validity: FieldInstanceNameProps[\"validity\"] = (() => {\n    if (isNameTaken) {\n      return \"taken\";\n    } else if (isNameInvalid) {\n      return \"invalid\";\n    } else if (isNameEmpty && isNameError) {\n      return \"required\";\n    }\n    return \"valid\";\n  })();\n\n  return (\n    <FieldInstanceName\n      value={form.name || \"\"}\n      validity={validity}\n      isDisabled={!isFormEnabled}\n      onChange={setName}\n    />\n  );\n};\n\nexport const ConnectedFieldCloudProvider: VoidFunctionComponent = () => {\n  const {\n    form,\n    capabilities,\n    isProviderError,\n    isFormEnabled,\n    isBillingSingleMarketplace,\n    setProvider,\n  } = useStandardPlanMachine();\n\n  const providers =\n    isBillingSingleMarketplace &&\n    isBillingSingleMarketplace.marketplace !== \"rhm\"\n      ? capabilities.availableProviders.map((p) => ({\n          ...p,\n          isDisabled: p.id !== isBillingSingleMarketplace.marketplace,\n        }))\n      : capabilities.availableProviders;\n\n  return (\n    <FieldCloudProvider\n      isValid={!isProviderError}\n      providers={providers}\n      value={form.provider}\n      isDisabled={!isFormEnabled}\n      onChange={setProvider}\n    />\n  );\n};\n\nexport const ConnectedFieldCloudRegion: VoidFunctionComponent = () => {\n  const {\n    form,\n    selectedProvider,\n    selectedSize,\n    isRegionError,\n    isFormEnabled,\n    capabilities,\n    error,\n    setRegion,\n  } = useStandardPlanMachine();\n\n  return (\n    <FieldCloudRegion\n      validity={\n        isRegionError\n          ? \"required\"\n          : error === \"region-unavailable\" ||\n            capabilities.instanceAvailability === \"regions-unavailable\"\n          ? \"region-unavailable\"\n          : \"valid\"\n      }\n      regions={selectedProvider?.regions}\n      value={form.region}\n      isDisabled={!isFormEnabled}\n      isSizeUnavailable={selectedSize?.isDisabled || false}\n      onChange={setRegion}\n    />\n  );\n};\n\nexport const ConnectedFieldAZ: VoidFunctionComponent = () => {\n  const { isFormEnabled } = useStandardPlanMachine();\n\n  return (\n    <FieldAZ\n      validity={\"valid\"}\n      options={\"multi\"}\n      value={\"multi\"}\n      isDisabled={!isFormEnabled}\n      onChange={() => false} // AZ is defined by the backend, we just visualize the value here\n    />\n  );\n};\n\nexport const ConnectedFieldSize: VoidFunctionComponent<\n  Pick<\n    FieldSizeProps,\n    \"onLearnHowToAddStreamingUnits\" | \"onLearnMoreAboutSizes\"\n  >\n> = ({ onLearnHowToAddStreamingUnits, onLearnMoreAboutSizes }) => {\n  const {\n    form,\n    sizes,\n    isSizeOverQuota,\n    isSizeDisabled,\n    isSizeError,\n    isSizeLoadingError,\n    isBillingSelectionRequired,\n    isFormEnabled,\n    isLoadingSizes,\n    isLoading,\n    setSize,\n    remainingQuota,\n  } = useStandardPlanMachine();\n\n  return (\n    <FieldSize\n      value={form.size?.quota}\n      sizes={sizes}\n      remainingQuota={isBillingSelectionRequired ? undefined : remainingQuota}\n      isDisabled={!isFormEnabled || sizes === undefined}\n      isLoading={isLoading || isLoadingSizes}\n      isError={isSizeError}\n      isLoadingError={isSizeLoadingError}\n      validity={\n        isSizeOverQuota ? \"out-of-quota\" : isSizeDisabled ? \"required\" : \"valid\"\n      }\n      onChange={setSize}\n      onLearnHowToAddStreamingUnits={onLearnHowToAddStreamingUnits}\n      onLearnMoreAboutSizes={onLearnMoreAboutSizes}\n    />\n  );\n};\n\nfunction isMarketplaceDisabled(\n  marketplace: MarketPlace,\n  selectedProvider: CloudProvider | undefined\n) {\n  if (marketplace === \"rhm\") {\n    return false;\n  } else if (selectedProvider) {\n    return marketplace !== selectedProvider;\n  }\n  return false;\n}\n\nexport const ConnectedBillingTiles: VoidFunctionComponent<{\n  subscriptionOptionsHref: string;\n}> = ({ subscriptionOptionsHref }) => {\n  const {\n    form,\n    capabilities,\n    selectedBilling,\n    billingType,\n    isBillingPrepaidAvailable,\n    isSizeOverQuota,\n    isBillingError,\n    isBillingPrepaidOverQuota,\n    isBillingMarketplaceOverQuota,\n    setBillingPrepaid,\n    setBillingSubscription,\n  } = useStandardPlanMachine();\n\n  return (\n    <FieldBillingTiles\n      value={\n        selectedBilling === \"prepaid\"\n          ? \"prepaid\"\n          : selectedBilling?.subscription\n      }\n      hasPrepaid={isBillingPrepaidAvailable}\n      subscriptions={capabilities.marketplaceSubscriptions.flatMap((mq) =>\n        mq.subscriptions.map((subscription) => ({\n          marketplace: mq.marketplace,\n          subscription,\n          isDisabled: isMarketplaceDisabled(mq.marketplace, form.provider),\n        }))\n      )}\n      isPrepaidOverQuota={isBillingPrepaidOverQuota}\n      prepaidQuota={capabilities.remainingPrepaidQuota || 0} // we can default to 0 here just to make TS happy, we will have the info here\n      isMarketplaceOverQuota={isBillingMarketplaceOverQuota}\n      marketplaceQuota={capabilities.remainingMarketplaceQuota || 0} // we can default to 0 here just to make TS happy, we will have the info here\n      onPrepaid={setBillingPrepaid}\n      onSubscription={setBillingSubscription}\n      isValid={!isSizeOverQuota && !isBillingError}\n      billingType={billingType}\n      subscriptionOptionsHref={subscriptionOptionsHref}\n    />\n  );\n};\n","import { DropdownGroup } from \"@patternfly/react-core\";\nimport { ActionsColumn } from \"@patternfly/react-table\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\n\nexport type KafkaInstanceActionsProps = {\n  onDetails: () => void;\n  onConnection: () => void;\n  canOpenConnection: boolean;\n  canChangeOwner: boolean;\n  onChangeOwner: () => void;\n  canDelete: boolean;\n  onDelete: () => void;\n};\n\nexport const KafkaInstanceActions: VoidFunctionComponent<\n  KafkaInstanceActionsProps\n> = ({\n  onDetails,\n  onConnection,\n  canOpenConnection,\n  canChangeOwner,\n  onChangeOwner,\n  canDelete,\n  onDelete,\n}) => {\n  const { t } = useTranslation(\"kafka\");\n  return (\n    <ActionsColumn\n      rowData={hackZIndex}\n      items={[\n        {\n          customChild: (\n            <DropdownGroup\n              label={t(\"table.actions.view-instance-information\")}\n            />\n          ),\n        },\n        {\n          title: t(\"table.actions.details\"),\n          onClick: onDetails,\n        },\n        {\n          title: t(\"table.actions.connection\"),\n          ...(!canOpenConnection\n            ? {\n                isDisabled: true,\n                tooltipProps: {\n                  position: \"left\",\n                  content: t(\"kafka:no_permission_to_see_connections\"),\n                },\n                tooltip: true,\n                style: {\n                  pointerEvents: \"auto\",\n                  cursor: \"default\",\n                },\n              }\n            : {\n                onClick: onConnection,\n              }),\n        },\n        {\n          isSeparator: true,\n        },\n        {\n          title: t(\"table.actions.change-owner\"),\n          ...(!canChangeOwner\n            ? {\n                isDisabled: true,\n                tooltipProps: {\n                  position: \"left\",\n                  content: t(\"kafka:no_permission_to_change_owner\"),\n                },\n                tooltip: true,\n                style: {\n                  pointerEvents: \"auto\",\n                  cursor: \"default\",\n                },\n              }\n            : {\n                onClick: onChangeOwner,\n              }),\n        },\n        {\n          title: t(\"table.actions.delete\"),\n          ...(!canDelete\n            ? {\n                isDisabled: true,\n                tooltipProps: {\n                  position: \"left\",\n                  content: t(\"kafka:no_permission_to_delete_kafka\"),\n                },\n                tooltip: true,\n                style: {\n                  pointerEvents: \"auto\",\n                  cursor: \"default\",\n                },\n              }\n            : {\n                onClick: onDelete,\n              }),\n        },\n      ]}\n    />\n  );\n};\n\nconst hackZIndex = {\n  actionProps: {\n    style: { zIndex: 9999 },\n  },\n};\n","import {\n  Breadcrumb,\n  BreadcrumbItem,\n  Level,\n  LevelItem,\n  Nav,\n  NavItem,\n  NavList,\n  PageSection,\n  PageSectionVariants,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport type { KafkaInstanceActionsProps } from \"./KafkaInstanceActions\";\nimport { KafkaInstanceActions } from \"./KafkaInstanceActions\";\n\ntype Sections =\n  | \"dashboard\"\n  | \"topics\"\n  | \"consumer\"\n  | \"permissions\"\n  | \"settings\";\n\nexport type DataPlaneHeaderProps = {\n  instancesHref: string;\n  instanceName: string;\n  activeSection: Sections;\n  sectionsHref: { [key in Sections]: string };\n} & KafkaInstanceActionsProps;\n\nexport const DataPlaneHeader: VoidFunctionComponent<DataPlaneHeaderProps> = ({\n  instancesHref,\n  instanceName,\n  activeSection,\n  sectionsHref,\n  ...actionsProps\n}) => {\n  const { t } = useTranslation(\"kafka\");\n\n  return (\n    <>\n      <section className=\"pf-c-page__main-breadcrumb\">\n        <Breadcrumb ouiaId={\"breadcrumb\"}>\n          <BreadcrumbItem\n            render={() => (\n              <Link to={instancesHref}>{t(\"common:kafka_instance\")}</Link>\n            )}\n          />\n          <BreadcrumbItem isActive={true}>{instanceName}</BreadcrumbItem>\n        </Breadcrumb>\n      </section>\n      <PageSection variant={PageSectionVariants.light}>\n        <Level>\n          <LevelItem>\n            <TextContent>\n              <Text component=\"h1\">{instanceName}</Text>\n            </TextContent>\n          </LevelItem>\n          <LevelItem>\n            <KafkaInstanceActions {...actionsProps} />\n          </LevelItem>\n        </Level>\n      </PageSection>\n      <PageSection\n        variant={PageSectionVariants.light}\n        padding={{ default: \"noPadding\" }}\n        className=\"pf-c-page__main-tabs\"\n        hasShadowBottom={true}\n      >\n        <Nav\n          variant=\"tertiary\"\n          data-testid=\"pageKafka-tabProperties\"\n          className=\"pf-u-px-sm-on-xl\"\n        >\n          <NavList>\n            <NavItem\n              style={{ borderTop: 0 }}\n              data-testid=\"pageKafka-tabDashboard\"\n              id=\"dashboard-tab-section\"\n              aria-label={t(\"dataPlaneNavigation.dashboard\")}\n              ouiaId={\"tab-Dashboard\"}\n              isActive={activeSection === \"dashboard\"}\n            >\n              <Link to={sectionsHref[\"dashboard\"]}>\n                {t(\"dataPlaneNavigation.dashboard\")}\n              </Link>\n            </NavItem>\n            <NavItem\n              style={{ borderTop: 0 }}\n              data-testid=\"pageKafka-tabTopics\"\n              id=\"topics-tab-section\"\n              aria-label={t(\"dataPlaneNavigation.topics\")}\n              ouiaId={\"tab-Topics\"}\n              isActive={activeSection === \"topics\"}\n            >\n              <Link to={sectionsHref[\"topics\"]}>\n                {t(\"dataPlaneNavigation.topics\")}\n              </Link>\n            </NavItem>\n            <NavItem\n              style={{ borderTop: 0 }}\n              data-testid=\"pageKafka-tabConsumers\"\n              id=\"consumer-groups-tab-section\"\n              aria-label={t(\"dataPlaneNavigation.consumer_groups\")}\n              ouiaId={\"tab-Consumers\"}\n              isActive={activeSection === \"consumer\"}\n            >\n              <Link to={sectionsHref[\"consumer\"]}>\n                {t(\"dataPlaneNavigation.consumer_groups\")}\n              </Link>\n            </NavItem>\n            <NavItem\n              style={{ borderTop: 0 }}\n              data-testid=\"pageKafka-tabPermissions\"\n              id=\"permissions-tab-section\"\n              aria-label={t(\"dataPlaneNavigation.permissions\")}\n              ouiaId={\"tab-Permissions\"}\n              isActive={activeSection === \"permissions\"}\n            >\n              <Link to={sectionsHref[\"permissions\"]}>\n                {t(\"dataPlaneNavigation.permissions\")}\n              </Link>\n            </NavItem>\n            <NavItem\n              style={{ borderTop: 0 }}\n              data-testid=\"pageKafka-tabSettings\"\n              id=\"settings-tab-section\"\n              aria-label={t(\"dataPlaneNavigation.settings\")}\n              ouiaId={\"tab-Settings\"}\n              isActive={activeSection === \"settings\"}\n            >\n              <Link to={sectionsHref[\"settings\"]}>\n                {t(\"dataPlaneNavigation.settings\")}\n              </Link>\n            </NavItem>\n          </NavList>\n        </Nav>\n      </PageSection>\n    </>\n  );\n};\n","import {\n  Breadcrumb,\n  BreadcrumbItem,\n  Level,\n  LevelItem,\n  Nav,\n  NavItem,\n  NavList,\n  PageSection,\n  PageSectionVariants,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport type { KafkaInstanceActionsProps } from \"./KafkaInstanceActions\";\nimport { KafkaInstanceActions } from \"./KafkaInstanceActions\";\n\ntype Sections = \"consumer\" | \"messages\" | \"properties\" | \"schemas\";\n\nexport type DataPlaneTopicHeaderProps = {\n  instancesHref: string;\n  instanceName: string;\n  instanceDetailHref: string;\n  instanceTopicsHref: string;\n  topicName: string;\n  activeSection: Sections;\n  tabsHref: { [key in Sections]: string };\n} & KafkaInstanceActionsProps;\n\nexport const DataPlaneTopicHeader: VoidFunctionComponent<\n  DataPlaneTopicHeaderProps\n> = ({\n  instancesHref,\n  instanceName,\n  instanceDetailHref,\n  instanceTopicsHref,\n  topicName,\n  activeSection,\n  tabsHref,\n  ...actionsProps\n}) => {\n  const { t } = useTranslation(\"kafka\");\n\n  return (\n    <>\n      <section className=\"pf-c-page__main-breadcrumb\">\n        <Breadcrumb ouiaId={\"breadcrumb\"}>\n          <BreadcrumbItem\n            render={() => (\n              <Link to={instancesHref}>{t(\"common:kafka_instance\")}</Link>\n            )}\n          />\n          <BreadcrumbItem\n            render={() => <Link to={instanceDetailHref}>{instanceName}</Link>}\n          />\n          <BreadcrumbItem\n            render={() => (\n              <Link to={instanceTopicsHref}>\n                {t(\"dataPlaneNavigation.topics\")}\n              </Link>\n            )}\n          />\n          <BreadcrumbItem isActive={true}>{topicName}</BreadcrumbItem>\n        </Breadcrumb>\n      </section>\n      <PageSection variant={PageSectionVariants.light}>\n        <Level>\n          <LevelItem>\n            <TextContent>\n              <Text component=\"h1\">{topicName}</Text>\n            </TextContent>\n          </LevelItem>\n          <LevelItem>\n            <KafkaInstanceActions {...actionsProps} />\n          </LevelItem>\n        </Level>\n      </PageSection>\n      <PageSection\n        variant={PageSectionVariants.light}\n        padding={{ default: \"noPadding\" }}\n        className=\"pf-c-page__main-tabs\"\n        hasShadowBottom={true}\n      >\n        <Nav variant=\"tertiary\" className=\"pf-u-px-sm-on-xl\">\n          <NavList>\n            <NavItem\n              style={{ borderTop: 0 }}\n              aria-label={t(\"dataPlaneTopicNavigation.consumer_groups\")}\n              ouiaId={\"tab-Dashboard\"}\n              isActive={activeSection === \"consumer\"}\n            >\n              <Link to={tabsHref[\"consumer\"]}>\n                {t(\"dataPlaneTopicNavigation.consumer_groups\")}\n              </Link>\n            </NavItem>\n            <NavItem\n              style={{ borderTop: 0 }}\n              aria-label={t(\"dataPlaneTopicNavigation.messages\")}\n              ouiaId={\"tab-Topics\"}\n              isActive={activeSection === \"messages\"}\n            >\n              <Link to={tabsHref[\"messages\"]}>\n                {t(\"dataPlaneTopicNavigation.messages\")}\n              </Link>\n            </NavItem>\n            <NavItem\n              style={{ borderTop: 0 }}\n              aria-label={t(\"dataPlaneTopicNavigation.properties\")}\n              ouiaId={\"tab-Permissions\"}\n              isActive={activeSection === \"properties\"}\n            >\n              <Link to={tabsHref[\"properties\"]}>\n                {t(\"dataPlaneTopicNavigation.properties\")}\n              </Link>\n            </NavItem>\n            <NavItem\n              style={{ borderTop: 0 }}\n              aria-label={t(\"dataPlaneTopicNavigation.schemas\")}\n              ouiaId={\"tab-Settings\"}\n              isActive={activeSection === \"schemas\"}\n            >\n              <Link to={tabsHref[\"schemas\"]}>\n                {t(\"dataPlaneTopicNavigation.schemas\")}\n              </Link>\n            </NavItem>\n          </NavList>\n        </Nav>\n      </PageSection>\n    </>\n  );\n};\n","import type { DeleteModalProps } from \"@rhoas/app-services-ui-components\";\nimport {\n  DeleteModal,\n  Trans,\n  useTranslation,\n} from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\n\nexport type DeleteKafkaInstanceProps = {\n  instanceName: string | undefined;\n} & Omit<\n  DeleteModalProps,\n  \"title\" | \"variant\" | \"confirmationValue\" | \"children\"\n>;\n\nexport const DeleteKafkaInstance: VoidFunctionComponent<\n  DeleteKafkaInstanceProps\n> = ({ instanceName, ...props }) => {\n  const { t } = useTranslation(\"kafka\");\n\n  return (\n    <DeleteModal\n      {...props}\n      variant={\"destructive\"}\n      title={t(\"delete_instance_title\")}\n      confirmationValue={instanceName}\n    >\n      <Trans\n        ns={\"kafka\"}\n        i18nKey={\"delete_instance_message\"}\n        components={[<strong />]}\n        values={{\n          instanceName,\n        }}\n      />\n    </DeleteModal>\n  );\n};\n","import type { I18nProviderProps } from \"@rhoas/app-services-ui-components\";\nimport { I18nProvider as UiComponentsI18nProvider } from \"@rhoas/app-services-ui-components\";\nimport type { FunctionComponent } from \"react\";\n\nexport const I18nProvider: FunctionComponent<\n  Omit<I18nProviderProps, \"resources\">\n> = ({ lng, debug, children }) => {\n  return (\n    <UiComponentsI18nProvider\n      lng={lng}\n      resources={{\n        en: {\n          common: () =>\n            import(\"@rhoas/app-services-ui-components/locales/en/common.json\"),\n          \"create-kafka-instance\": () =>\n            import(\"locales/en/create-kafka-instance.json\"),\n          kafka: () => import(\"locales/en/kafka.json\"),\n          \"kafkaoverview-v3\": () => import(\"locales/en/kafkaoverview-v3.json\"),\n          metrics: () => import(\"locales/en/metrics.json\"),\n          topic: () => import(\"locales/en/topic.json\"),\n          \"manage-kafka-permissions\": () =>\n            import(\"locales/en/manage-kafka-permissions.json\"),\n          \"create-topic\": () => import(\"locales/en/create-topic.json\"),\n          \"message-browser\": () => import(\"locales/en/message-browser.json\"),\n          \"connection-tab\": () => import(\"locales/en/connection-tab.json\"),\n          \"connection-tab-p1\": () =>\n            import(\"locales/en/connection-tab-p1.json\"),\n        },\n        it: {\n          common: () => Promise.resolve({ delete: \"Elimina\" }),\n        },\n      }}\n      debug={debug}\n    >\n      {children}\n    </UiComponentsI18nProvider>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport type {\n  CloudProvider,\n  KafkaField,\n  SimplifiedStatus,\n  Status,\n} from \"ui-models/src/models/kafka\";\n\nexport function useKafkaLabels() {\n  const { t } = useTranslation(\"kafka\");\n\n  const statuses: { [status in Status]: string } = {\n    ready: t(\"statuses.ready\"),\n    degraded: t(\"statuses.degraded\"),\n    accepted: t(\"statuses.accepted\"),\n    provisioning: t(\"statuses.provisioning\"),\n    preparing: t(\"statuses.preparing\"),\n    deprovision: t(\"statuses.deprovision\"),\n    deleting: t(\"statuses.deleting\"),\n    suspended: t(\"statuses.suspended\"),\n    suspending: t(\"statuses.suspending\"),\n    resuming: t(\"statuses.resuming\"),\n  };\n  const statusesSimplified: { [status in SimplifiedStatus]: string } = {\n    creating: t(\"statusesSimplified.creating\"),\n    ready: t(\"statusesSimplified.ready\"),\n    degraded: t(\"statusesSimplified.degraded\"),\n    deleting: t(\"statusesSimplified.deleting\"),\n    suspended: t(\"statusesSimplified.suspended\"),\n    suspending: t(\"statusesSimplified.suspending\"),\n    resuming: t(\"statusesSimplified.resuming\"),\n  };\n  const providers: { [provider in CloudProvider]: string } = {\n    aws: t(\"common:cloudProviders.aws\"),\n    gcp: t(\"common:cloudProviders.gcp\"),\n    azure: t(\"common:cloudProviders.azure\"),\n  };\n  const providerRegions: {\n    [provider in CloudProvider]: { [region: string]: string };\n  } = {\n    aws: {},\n    gcp: {},\n    azure: {},\n  };\n  const fields: {\n    [field in KafkaField]: string;\n  } = {\n    id: t(\"fields.id\"),\n    name: t(\"fields.name\"),\n    createdAt: t(\"fields.createdAt\"),\n    updatedAt: t(\"fields.updatedAt\"),\n    expiryDate: t(\"fields.expiryDate\"),\n    owner: t(\"fields.owner\"),\n    provider: t(\"fields.provider\"),\n    region: t(\"fields.region\"),\n    status: t(\"fields.status\"),\n    plan: t(\"fields.plan\"),\n    size: t(\"fields.size\"),\n    ingress: t(\"fields.ingress\"),\n    egress: t(\"fields.egress\"),\n    storage: t(\"fields.storage\"),\n    maxPartitions: t(\"fields.maxPartitions\"),\n    connections: t(\"fields.connections\"),\n    connectionRate: t(\"fields.connectionRate\"),\n    messageSize: t(\"fields.messageSize\"),\n    billing: t(\"fields.billing\"),\n    adminUrl: t(\"fields.adminUrl\"),\n    bootstrapUrl: t(\"fields.bootstrapUrl\"),\n    version: t(\"fields.version\"),\n  };\n  return {\n    fields,\n    statuses,\n    statusesSimplified,\n    providers,\n    providerRegions,\n  };\n}\n","import { useTranslation } from \"react-i18next\";\nimport type { TopicField } from \"ui-models/src/models/topic\";\n\nexport function useTopicLabels() {\n  const { t } = useTranslation(\"topic\");\n\n  const fields: {\n    [field in TopicField]: string;\n  } = {\n    name: t(\"fields.name\"),\n    partitions: t(\"fields.partitions\"),\n    \"cleanup.policy\": t(\"fields.cleanup_policy\"),\n    \"delete.retention.ms\": t(\"fields.delete_retention_ms\"),\n    \"max.compaction.lag.ms\": t(\"fields.max_compaction_lag_ms\"),\n    \"max.message.bytes\": t(\"fields.max_message_bytes\"),\n    \"message.downconversion.enable\": t(\"fields.message_downconversion_enable\"),\n    \"message.timestamp.difference.max.ms\": t(\n      \"fields.message_timestamp_difference_max_ms\"\n    ),\n    \"message.timestamp.type\": t(\"fields.message_timestamp_type\"),\n    \"min.compaction.lag.ms\": t(\"fields.min_compaction_lag_ms\"),\n    \"retention.bytes\": t(\"fields.retention_bytes\"),\n    \"retention.ms\": t(\"fields.retention_ms\"),\n    \"segment.bytes\": t(\"fields.segment_bytes\"),\n    \"segment.ms\": t(\"fields.segment_ms\"),\n    \"compression.type\": t(\"fields.compression_type\"),\n    \"file.delete.delay.ms\": t(\"fields.file_delete_delay_ms\"),\n    \"flush.messages\": t(\"fields.flush_messages\"),\n    \"flush.ms\": t(\"fields.flush_ms\"),\n    \"follower.replication.throttled.replicas\": t(\n      \"fields.follower_replication_throttled_replicas\"\n    ),\n    \"index.interval.bytes\": t(\"fields.index_interval_bytes\"),\n    \"leader.replication.throttled.replicas\": t(\n      \"fields.leader_replication_throttled_replicas\"\n    ),\n    \"message.format.version\": t(\"fields.message_format_version\"),\n    \"min.cleanable.dirty.ratio\": t(\"fields.min_cleanable_dirty_ratio\"),\n    \"min.insync.replicas\": t(\"fields.min_insync_replicas\"),\n    \"segment.index.bytes\": t(\"fields.segment_index_bytes\"),\n    \"segment.jitter.ms\": t(\"fields.segment_jitter_ms\"),\n    \"unclean.leader.election.enable\": t(\n      \"fields.unclean_leader_election_enable\"\n    ),\n    preallocate: t(\"fields.preallocate\"),\n  };\n  return {\n    fields,\n  };\n}\n","import { Alert } from \"@patternfly/react-core\";\nimport { differenceInHours } from \"date-fns\";\nimport type { FunctionComponent } from \"react\";\nimport { Trans } from \"@rhoas/app-services-ui-components\";\nimport { FormatDate } from \"@rhoas/app-services-ui-components\";\n\ntype DetailsTabAlertProps = {\n  expiryDate: Date;\n};\n\nexport const DetailsTabAlert: FunctionComponent<DetailsTabAlertProps> = ({\n  expiryDate,\n}) => {\n  const hoursLeft = expiryDate ? differenceInHours(expiryDate, Date.now()) : 0;\n  return (\n    <Alert\n      variant={\n        hoursLeft > 24\n          ? \"info\"\n          : hoursLeft < 24 && hoursLeft > 5\n          ? \"warning\"\n          : \"danger\"\n      }\n      title={\n        <Trans\n          i18nKey=\"kafka:will_expire\"\n          components={{\n            time: <FormatDate date={expiryDate} format=\"expiration\" />,\n          }}\n        />\n      }\n      aria-live=\"polite\"\n      isInline\n      className=\"pf-u-mb-lg\"\n    />\n  );\n};\n","import {\n  Skeleton,\n  TextContent,\n  TextList,\n  TextListItem,\n  TextListItemVariants,\n  TextListVariants,\n} from \"@patternfly/react-core\";\nimport { FormatDate, useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { ReactChild, VoidFunctionComponent } from \"react\";\nimport type { MarketplaceSubscription, Plan } from \"ui-models/src/models/kafka\";\nimport type { Bytes } from \"../../../../../ui-models/src/types\";\nimport { DetailsTabAlert } from \"./DetailsTabAlert\";\n\n/**\n * All fields marked as accepting undefined will show a skeleton loader until the value is available.\n * This is to support fetching the data from different APIs.\n */\nexport type KafkaDetailsTabProps = {\n  id: string;\n  createdAt: Date;\n  updatedAt: Date;\n  expiryDate: Date | undefined;\n  owner: string;\n  provider: string;\n  region: string;\n  instanceType: Plan;\n  size: string | undefined;\n  ingress: number | undefined;\n  egress: number | undefined;\n  storage: Bytes | undefined;\n  maxPartitions: number | undefined;\n  connections: number | undefined;\n  connectionRate: number | undefined;\n  messageSize: Bytes | undefined;\n  billing: \"prepaid\" | MarketplaceSubscription | undefined;\n  kafkaVersion: string;\n};\n\nexport const KafkaDetailsTab: VoidFunctionComponent<KafkaDetailsTabProps> = ({\n  id,\n  createdAt,\n  updatedAt,\n  owner,\n  provider,\n  region,\n  expiryDate,\n  instanceType,\n  size,\n  ingress,\n  egress,\n  storage,\n  maxPartitions,\n  connections,\n  connectionRate,\n  messageSize,\n  billing,\n  kafkaVersion,\n}) => {\n  const { t } = useTranslation(\"kafka\");\n\n  const renderTextListItem = (title: string, value: ReactChild | undefined) => (\n    <>\n      <TextListItem component={TextListItemVariants.dt}>{title}</TextListItem>\n      {value ? (\n        <TextListItem component={TextListItemVariants.dd}>{value}</TextListItem>\n      ) : (\n        <Skeleton\n          width=\"50%\"\n          screenreaderText={t(\"common:skeleton_loader_screenreader_text\", {\n            contentName: title,\n          })}\n        />\n      )}\n    </>\n  );\n  return (\n    <div className=\"mas--details__drawer--tab-content\">\n      {instanceType !== \"standard\" && expiryDate && (\n        <DetailsTabAlert expiryDate={expiryDate} />\n      )}\n      <TextContent>\n        <TextList component={TextListVariants.dl}>\n          {instanceType === \"standard\" &&\n            renderTextListItem(\n              t(\"common:size\"),\n              size\n                ? t(\"create-kafka-instance:streaming_size_value\", {\n                    value: size,\n                  })\n                : undefined\n            )}\n          {renderTextListItem(\n            t(\"ingress\"),\n            ingress\n              ? t(\"create-kafka-instance:ingress_value\", {\n                  value: ingress,\n                })\n              : undefined\n          )}\n          {renderTextListItem(\n            t(\"egress\"),\n            egress\n              ? t(\"create-kafka-instance:egress_value\", {\n                  value: egress,\n                })\n              : undefined\n          )}\n          {renderTextListItem(\n            t(\"storage\"),\n            storage?.value\n              ? t(\"create-kafka-instance:storage_value\", {\n                  value: storage.value,\n                })\n              : undefined\n          )}\n          {renderTextListItem(\n            t(\"partitions\"),\n            maxPartitions\n              ? t(\"create-kafka-instance:partitions_value\", {\n                  value: maxPartitions,\n                })\n              : undefined\n          )}\n          {renderTextListItem(\n            t(\"client_connections\"),\n            connections\n              ? t(\"create-kafka-instance:client_connections_value\", {\n                  value: connections,\n                })\n              : undefined\n          )}\n          {renderTextListItem(\n            t(\"connection_rate\"),\n            connectionRate\n              ? t(\"create-kafka-instance:connection_rate_value\", {\n                  value: connectionRate,\n                })\n              : undefined\n          )}\n          {renderTextListItem(\n            t(\"message_size\"),\n            messageSize?.value\n              ? t(\"create-kafka-instance:message_size_value\", {\n                  value: messageSize.value,\n                })\n              : undefined\n          )}\n\n          {renderTextListItem(t(\"common:id\"), id)}\n          {renderTextListItem(t(\"common:kafka_version\"), kafkaVersion)}\n          {renderTextListItem(t(\"common:owner\"), owner)}\n          {renderTextListItem(\n            t(\"common:time_created\"),\n            <FormatDate date={createdAt} format={\"long\"} />\n          )}\n          {renderTextListItem(\n            t(\"common:time_updated\"),\n            <FormatDate date={updatedAt} format={\"long\"} />\n          )}\n          {renderTextListItem(t(\"common:cloud_provider\"), provider)}\n          {renderTextListItem(t(\"common:region\"), region)}\n          {renderTextListItem(\n            t(\"create-kafka-instance:billing.field_label\"),\n            (() => {\n              if (billing === undefined) {\n                return undefined;\n              } else if (billing === \"prepaid\") {\n                return t(\"create-kafka-instance:billing.prepaid_option\");\n              } else {\n                switch (billing.marketplace) {\n                  case \"aws\":\n                    return (\n                      <>\n                        {t(\"create-kafka-instance:billing.marketplace_aws\")}\n                        <br />\n                        {billing.subscription}\n                      </>\n                    );\n                  case \"azure\":\n                    return (\n                      <>\n                        {t(\"create-kafka-instance:billing.marketplace_azure\")}\n                        <br />\n                        {billing.subscription}\n                      </>\n                    );\n                  case \"gcp\":\n                    return (\n                      <>\n                        {t(\"create-kafka-instance:billing.marketplace_gcp\")}\n                        <br />\n                        {billing.subscription}\n                      </>\n                    );\n                  case \"rhm\":\n                    return (\n                      <>\n                        {t(\"create-kafka-instance:billing.marketplace_rh\")}\n                        <br />\n                        {billing.subscription}\n                      </>\n                    );\n                }\n              }\n            })()\n          )}\n        </TextList>\n      </TextContent>\n    </div>\n  );\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  TitleSizes,\n} from \"@patternfly/react-core\";\nimport { ExclamationTriangleIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const SuspendedConnection: VoidFunctionComponent = () => {\n  const { t } = useTranslation(\"kafka\");\n  return (\n    <EmptyState variant={EmptyStateVariant.small}>\n      <EmptyStateIcon icon={ExclamationTriangleIcon} color={\"#f0ab00\"} />\n      <Title headingLevel={\"h1\"} size={TitleSizes.lg}>\n        {t(\"suspend_empty_state_title\")}\n      </Title>\n      <EmptyStateBody>{t(\"suspend_empty_state_body\")}</EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import {\n  Button,\n  ButtonVariant,\n  ClipboardCopy,\n  ExpandableSection,\n  Label,\n  Popover,\n  Skeleton,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { HelpIcon } from \"@patternfly/react-icons\";\nimport {\n  ExternalLink,\n  Trans,\n  useTranslation,\n} from \"@rhoas/app-services-ui-components\";\nimport type { FunctionComponent } from \"react\";\nimport { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { SuspendedConnection } from \"./SuspendedConnection\";\n\nexport type KafkaConnectionTabP2Props = {\n  isKafkaSuspended?: boolean;\n  isKafkaPending?: boolean;\n  externalServer?: string;\n  tokenEndPointUrl: string;\n  linkToServiceAccount: string;\n  linkToAccessTab: string;\n  adminAPIUrl: string | undefined;\n  showCreateServiceAccountModal: () => void;\n  kafkaFleetManagerUrl: string;\n};\n\nexport const KafkaConnectionTabP2: FunctionComponent<\n  KafkaConnectionTabP2Props\n> = ({\n  isKafkaSuspended,\n  isKafkaPending,\n  externalServer,\n  tokenEndPointUrl,\n  linkToServiceAccount,\n  linkToAccessTab,\n  adminAPIUrl,\n  kafkaFleetManagerUrl,\n  showCreateServiceAccountModal,\n}) => {\n  const { t } = useTranslation();\n\n  const [isExpanded, setIsExpanded] = useState<boolean>(false);\n\n  const onChangeExpandedSection = () => {\n    setIsExpanded(!isExpanded);\n  };\n\n  return isKafkaSuspended ? (\n    <SuspendedConnection />\n  ) : (\n    <div className=\"mas--details__drawer--tab-content\">\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.small}>\n          {t(\"connection-tab:drawer_resource_tab_body_description_1\")}\n        </Text>\n        <Text component={TextVariants.h3} className=\"pf-u-mt-xl\">\n          {t(\"connection-tab:bootstrap_server\")}\n        </Text>\n        <Text component={TextVariants.small}>\n          {t(\"connection-tab:bootstrap_server_description\")}\n        </Text>\n        {isKafkaPending ? (\n          <Skeleton fontSize=\"2xl\" />\n        ) : (\n          <ClipboardCopy\n            data-testid=\"drawerStreams-copyBootstrapURL\"\n            textAriaLabel={t(\"connection-tab:bootstrap_server\")}\n            isReadOnly\n          >\n            {externalServer}\n          </ClipboardCopy>\n        )}\n      </TextContent>\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.h3} className=\"pf-u-mt-xl\">\n          {t(\"connection-tab:service_accounts_small\")}\n        </Text>\n        <Text component={TextVariants.small}>\n          {\n            <Trans\n              i18nKey={\n                \"connection-tab:create_service_account_to_generate_credentials\"\n              }\n              components={{\n                value: (\n                  <Link\n                    to={linkToServiceAccount}\n                    data-testid=\"tableStreams-linkKafka\"\n                  ></Link>\n                ),\n              }}\n            />\n          }\n        </Text>\n      </TextContent>\n      <Button\n        variant={ButtonVariant.secondary}\n        isInline\n        onClick={showCreateServiceAccountModal}\n        data-testid=\"drawerStreams-buttonCreateServiceAccount\"\n      >\n        {t(\"connection-tab:create_service_account\")}\n      </Button>\n      <TextContent className=\"pf-u-pt-sm\">\n        <Text component={TextVariants.small}>\n          {\n            <Trans\n              i18nKey={\"connection-tab:current_instance\"}\n              components={{\n                value: <Link to={linkToAccessTab}></Link>,\n              }}\n            />\n          }\n        </Text>\n      </TextContent>\n      <TextContent className=\"pf-u-pb-sm\">\n        <ExpandableSection\n          toggleContent={\n            <div className=\"pf-c-content\">\n              <Text component={TextVariants.h3} className={\"pf-c-content\"}>\n                {t(\"connection-tab:rest_api_header\")}\n              </Text>\n            </div>\n          }\n          isExpanded={isExpanded}\n          onToggle={onChangeExpandedSection}\n          className=\"pf-u-mt-lg\"\n        >\n          <TextContent className=\"pf-u-pb-sm\">\n            <Text component={TextVariants.small}>\n              {t(\"connection-tab:rest_api_description\")}\n            </Text>\n          </TextContent>\n          <TextContent>\n            <strong>\n              {t(\"connection-tab:kafka_instance_url_label\")}\n              <Popover\n                headerContent={\n                  <div>\n                    {t(\"connection-tab:kafka_instance_url_popover_label\")}\n                  </div>\n                }\n                bodyContent={\n                  <TextContent>\n                    <p>{t(\"connection-tab:kafka_instance_url_popover_body\")}</p>\n                    <p>\n                      <Trans\n                        ns={\"connection-tab\"}\n                        i18nKey={\"popover_helper_text\"}\n                        components={[\n                          <Button\n                            isInline\n                            variant={ButtonVariant.link}\n                            component=\"a\"\n                            href=\"https://console.redhat.com/docs/api/kafkainstance?github-owner=redhat-developer&github-repo=app-services-sdk-core&github-content=kafka-admin-rest.yaml%3Fref%3Ddoc-portal&readonly=true\"\n                          />,\n                          <ExternalLink\n                            testId={\"customerPortal-link\"}\n                            href=\"https://access.redhat.com/documentation/en-us/red_hat_openshift_application_services/1/guide/2409253a-45ee-470e-bdc9-5db4bfcf9d0f\"\n                            className={\"pf-u-ml-xs\"}\n                          />,\n                        ]}\n                      />\n                    </p>\n                  </TextContent>\n                }\n              >\n                <Button\n                  variant={ButtonVariant.plain}\n                  aria-label={t(\n                    \"connection-tab:kafka_instance_url_button_aria_label\"\n                  )}\n                >\n                  <HelpIcon />\n                </Button>\n              </Popover>\n            </strong>\n            {adminAPIUrl ? (\n              <ClipboardCopy\n                textAriaLabel={t(\"connection-tab:kafka_instance_url_label\")}\n                isReadOnly\n              >\n                {adminAPIUrl}\n              </ClipboardCopy>\n            ) : (\n              <Skeleton fontSize=\"2xl\" />\n            )}\n            <TextContent className=\"pf-u-pt-sm\">\n              <Text component={TextVariants.small}>\n                {t(\"connection-tab:kafka_instance_url_description\")}\n              </Text>\n            </TextContent>\n          </TextContent>\n          <TextContent className=\"pf-u-mt-md\">\n            <strong>\n              {t(\"connection-tab:kafka_management_url\")}\n              <Popover\n                headerContent={\n                  <div>\n                    {t(\"connection-tab:kafka_management_popover_header\")}\n                  </div>\n                }\n                bodyContent={\n                  <TextContent>\n                    <p>{t(\"connection-tab:kafka_management_popover_body\")}</p>\n                    <p>\n                      <Trans\n                        ns={\"connection-tab\"}\n                        i18nKey={\"popover_helper_text\"}\n                        components={[\n                          <Button\n                            isInline\n                            variant={ButtonVariant.link}\n                            component=\"a\"\n                            href=\"https://console.redhat.com/docs/api/kafkamgmt?github-owner=redhat-developer&github-repo=app-services-sdk-core&github-content=kas-fleet-manager.yaml%3Fref%3Ddoc-portal\"\n                          />,\n                          <ExternalLink\n                            testId={\"customerPortal-link\"}\n                            href=\"https://access.redhat.com/documentation/en-us/red_hat_openshift_application_services/1/guide/2409253a-45ee-470e-bdc9-5db4bfcf9d0f\"\n                            className={\"pf-u-ml-xs\"}\n                          />,\n                        ]}\n                      />\n                    </p>\n                  </TextContent>\n                }\n              >\n                <Button\n                  variant={ButtonVariant.plain}\n                  aria-label={t(\n                    \"connection-tab:kafka_management_button_aria_label\"\n                  )}\n                >\n                  <HelpIcon />\n                </Button>\n              </Popover>\n            </strong>\n            {isKafkaPending ? (\n              <Skeleton fontSize=\"2xl\" />\n            ) : (\n              <ClipboardCopy\n                textAriaLabel={t(\"connection-tab:kafka_management_url\")}\n                isReadOnly\n              >\n                {kafkaFleetManagerUrl}\n              </ClipboardCopy>\n            )}\n            <TextContent className=\"pf-u-pt-sm\">\n              <Text component={TextVariants.small}>\n                {t(\"connection-tab:kafka_management_description\")}\n              </Text>\n            </TextContent>\n          </TextContent>\n        </ExpandableSection>\n      </TextContent>\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.h3} className=\"pf-u-mt-xl\">\n          {t(\"connection-tab:authentication_method\")}\n        </Text>\n        <Text component={TextVariants.h4} className=\"pf-u-mt-md\">\n          {t(\"connection-tab:sasl_oauthbearer\")}{\" \"}\n          <Label color=\"green\">{t(\"connection-tab:recommended\")}</Label>\n          <Popover\n            aria-label={t(\"connection-tab:sasl_oauthbearer\")}\n            bodyContent={\n              <div>{t(\"connection-tab:sasl_oauthbearer_popover_content\")}</div>\n            }\n          >\n            <Button\n              variant={ButtonVariant.plain}\n              aria-label={t(\"connection-tab:more_info_about_sasl_oauthbearer\")}\n            >\n              <HelpIcon />\n            </Button>\n          </Popover>\n        </Text>\n        <Text component={TextVariants.small}>\n          {t(\"connection-tab:sasl_oauthbearer_description\")}\n        </Text>\n        <strong>{t(\"connection-tab:token_endpoint_url\")}</strong>\n        {isKafkaPending ? (\n          <Skeleton fontSize=\"2xl\" />\n        ) : (\n          <ClipboardCopy\n            textAriaLabel={t(\"connection-tab:token_endpoint_url\")}\n            isReadOnly\n          >\n            {tokenEndPointUrl}\n          </ClipboardCopy>\n        )}\n      </TextContent>\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.h4} className=\"pf-u-mt-md\">\n          {t(\"connection-tab:sasl_plain\")}\n        </Text>\n        <Text component={TextVariants.small}>\n          {t(\"connection-tab:sasl_plain_description\")}\n        </Text>\n      </TextContent>\n    </div>\n  );\n};\n","import {\n  ClipboardCopyButton,\n  CodeBlock,\n  CodeBlockAction,\n  CodeBlockCode,\n  ExpandableSection,\n  ExpandableSectionToggle,\n} from \"@patternfly/react-core\";\nimport { useEffect, useState } from \"react\";\nimport type { VoidFunctionComponent } from \"react\";\n\nexport type ClientType = \"java\" | \"python\" | \"quarkus\" | \"springboot\";\n\nexport type SampleCodeSnippetProps = {\n  expandableCode?: string;\n  codeBlockCode: string;\n  codeSnippet?: ClientType;\n};\n\nexport const SampleCodeSnippet: VoidFunctionComponent<\n  SampleCodeSnippetProps\n> = ({ expandableCode, codeBlockCode, codeSnippet }) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  const [copied, setCopied] = useState<boolean>(false);\n\n  useEffect(() => {\n    setIsExpanded(false);\n  }, [codeSnippet]);\n\n  const clipboardCopyFunc = (_event: any, text: string) => {\n    navigator.clipboard\n      .writeText(text.toString())\n      .then(() => {\n        setCopied(true);\n      })\n      .catch(() => {\n        setCopied(false);\n      });\n  };\n\n  const onToggle = (isExpanded: boolean) => {\n    setIsExpanded(isExpanded);\n  };\n\n  const copyCode = expandableCode\n    ? codeBlockCode + \"\\n\" + expandableCode\n    : codeBlockCode;\n\n  const actions = (\n    <CodeBlockAction>\n      <ClipboardCopyButton\n        id=\"basic-copy-button\"\n        textId=\"code-content\"\n        aria-label=\"Copy to clipboard\"\n        exitDelay={600}\n        maxWidth=\"110px\"\n        variant=\"plain\"\n        onClick={(e) => clipboardCopyFunc(e, copyCode)}\n      >\n        {copied ? \"Successfully copied to clipboard!\" : \"Copy to clipboard\"}\n      </ClipboardCopyButton>\n    </CodeBlockAction>\n  );\n\n  return (\n    <CodeBlock actions={actions}>\n      <CodeBlockCode id=\"code-content\">\n        {codeBlockCode}\n\n        <ExpandableSection\n          isExpanded={isExpanded}\n          isDetached\n          contentId=\"code-block-expand\"\n        >\n          {expandableCode}\n        </ExpandableSection>\n      </CodeBlockCode>\n      {expandableCode ? (\n        <ExpandableSectionToggle\n          isExpanded={isExpanded}\n          onToggle={onToggle}\n          contentId=\"code-block-expand\"\n          direction=\"up\"\n        >\n          {isExpanded ? \"Show Less\" : \"Show More\"}\n        </ExpandableSectionToggle>\n      ) : null}\n    </CodeBlock>\n  );\n};\n","export const javaConfigCodeBlock = (\n  kafkaBootstrapUrl: string,\n  tokenEndpointUrl: string\n) => {\n  return `package org.example;\nimport org.apache.kafka.clients.producer.ProducerConfig;  \nimport java.util.Properties;\n    \npublic class KafkaConfig {\n    \n    static Properties properties() {\n    \n        String kafkaHost = \"${kafkaBootstrapUrl}\";\n        String rhoasClientID = \"<client_id>\";\n        String rhoasClientSecret = \"<client_secret>\";\n        String rhoasOauthTokenUrl = \"${tokenEndpointUrl}\";`;\n};\n\nexport const javaConfigExpandabledBlock = `\n        var properties= new Properties();\n\n        properties.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaHost);\n        properties.setProperty(\"security.protocol\", \"SASL_SSL\");\n        properties.setProperty(\"sasl.mechanism\", \"OAUTHBEARER\");\n\n        properties.setProperty(\"sasl.jaas.config\", \"org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required clientId=\\\\\"\" + rhoasClientID + \"\\\\\" clientSecret=\\\\\"\" + rhoasClientSecret + \"\\\\\" oauth.token.endpoint.uri=\\\\\"\" + rhoasOauthTokenUrl + \"\\\\\";\");\n\n        properties.setProperty(\"sasl.login.callback.handler.class\", \"org.apache.kafka.common.security.oauthbearer.secured.OAuthBearerLoginCallbackHandler\");\n        properties.setProperty(\"sasl.oauthbearer.token.endpoint.url\", rhoasOauthTokenUrl);\n        properties.setProperty(\"sasl.oauthbearer.scope.claim.name\", \"api.iam.service_accounts\");\n\n        return properties;\n    }\n}`;\n\nexport const javaProducerCodeBlock = `package org.example;\n \nimport org.apache.kafka.clients.producer.ProducerConfig;\nimport org.apache.kafka.clients.producer.ProducerRecord;\nimport org.apache.kafka.clients.producer.KafkaProducer;\nimport org.apache.kafka.common.serialization.StringSerializer;\n \npublic class ProducerExample {\n \n   public static void main(String[] args) {`;\n\nexport const javaProducerExpandableBlock = `\n   //Creating producer properties\n   var properties= KafkaConfig.properties();\n   properties.setProperty(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n   properties.setProperty(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n\n   KafkaProducer<String,String> producer= new KafkaProducer<String,String>(properties);\n\n   producer.send(new ProducerRecord<>(<\"topic\">, \"Test Message\"));\n   producer.flush();\n   producer.close();\n  }\n}`;\n\nexport const javaConsumerCodeBlock = `package org.example;\n \nimport java.util.Arrays;\n\nimport org.apache.kafka.clients.consumer.ConsumerConfig;\nimport org.apache.kafka.clients.consumer.KafkaConsumer;\nimport org.apache.kafka.common.serialization.StringDeserializer;\nimport org.apache.kafka.clients.consumer.ConsumerRecord;\nimport org.apache.kafka.clients.consumer.ConsumerRecords;\nimport java.time.Duration;`;\n\nexport const javaConsumerExpandableBlock = `\npublic class ConsumerExample {\n\n    public static void main(String[] args) {\n\n        var properties= KafkaConfig.properties();\n\n        properties.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n        properties.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n        properties.setProperty(ConsumerConfig.GROUP_ID_CONFIG,\"test_group_2\");\n        properties.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n\n        KafkaConsumer<String,String> consumer = new KafkaConsumer<String,String>(properties);\n\n        //Subscribing\n        consumer.subscribe(Arrays.asList(\"<topic>\"));\n\n        //polling\n        while(true){\n            ConsumerRecords<String,String> records=consumer.poll(Duration.ofMillis(100));\n            for(ConsumerRecord<String,String> record: records) {\n                System.out.println(\"Key: \"+ record.key() + \", Value:\" +record.value());\n                System.out.println(\"Partition:\" + record.partition()+\",Offset:\"+record.offset());\n            }\n        }\n    }\n}`;\n\nexport const pythonConfigCodeBlock = (tokenEndpointUrl: string) => {\n  return `import time\nimport requests\n    \ndef _get_token(config):\n    payload = {\"grant_type\": \"client_credentials\", \"scope\": \"api.iam.service_accounts\"}\n    resp = requests.post(\n        \"${tokenEndpointUrl}\",\n        auth=(\n            <client_id>,\n            <client_secret>,\n        ),\n        data=payload,\n    )`;\n};\n\nexport const pythonConfigExpandabledBlock = (kafkaBootstrapUrl: string) => {\n  return `\n    token = resp.json()\n    return token[\"access_token\"], time.time() + float(token[\"expires_in\"])\n    \n    common_config = {\n    'bootstrap.servers': \"${kafkaBootstrapUrl}\",\n    'security.protocol': 'SASL_SSL',\n    'sasl.mechanisms': 'OAUTHBEARER',\n    'oauth_cb': _get_token,\n    }\n    \n    topic=<topic>`;\n};\n\nexport const pythonProducer = `from confluent_kafka import Producer\n \nproducer = Producer(common_config)\n \nproducer.produce(topic=<topic>, value=b\"Sample Message\")\nproducer.flush()`;\n\nexport const pythonConsumerCodeBlock = `from confluent_kafka import Consumer\n \nconsumer_config = {\n    \"group.id\": \"test-group\",\n    'session.timeout.ms': 6000,\n    'auto.offset.reset': 'earliest',\n}\n\nconsumer = Consumer({ **consumer_config, **common_config })\n\nconsumer.subscribe([<topic>])`;\n\nexport const pythonConsumerExpandableBlock = `while True:\ntry:\n    msg = consumer.poll(1.0)\n    if msg is None:\n        continue\n\n    print(msg.value())\nexcept KeyboardInterrupt:\n    break\n\nconsumer.close()`;\n\nexport const quarkusConfigCodeBlock = `# Quarkus config\nquarkus.ssl.native=true\n\n# Configure the Kafka sink (we write to it)\nmp.messaging.outgoing.generated-price.connector=smallrye-kafka\nmp.messaging.outgoing.generated-price.topic=<topic>\nmp.messaging.outgoing.generated-price.value.serializer=org.apache.kafka.common.serialization.IntegerSerializer\n\n# Configure the Kafka source (we read from it)\nmp.messaging.incoming.prices.connector=smallrye-kafka\nmp.messaging.incoming.prices.topic=<topic>\nmp.messaging.incoming.prices.value.deserializer=org.apache.kafka.common.serialization.IntegerDeserializer`;\n\nexport const quarkusConfigExpandableBlock = (\n  kafkaBootstrapUrl: string,\n  tokenEndpointUrl: string\n) => {\n  return `\n# Configure docker config\nquarkus.container-image.builder=jib\nquarkus.kubernetes.deployment-target=kubernetes\nquarkus.container-image.build=false\nquarkus.container-image.push=false\n    \n## dev profile using user defined environment variables that uses SASL/OAUTHBEARER\n## ./mvnw quarkus:dev\n## ./mvnw package -Dquarkus.profile=dev\n    \n%dev.kafka.bootstrap.servers=\\${\"${kafkaBootstrapUrl}\"}\n%dev.kafka.security.protocol=SASL_SSL\n    \n%dev.kafka.sasl.mechanism=OAUTHBEARER\n%dev.kafka.sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\\\n    oauth.client.id=\"\\${<client_id>}\" \\\\\n    oauth.client.secret=\"\\${<client_secret>}\" \\\\\n    oauth.token.endpoint.uri=\"\\${\"${tokenEndpointUrl}\"}\" ;\n%dev.kafka.sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler`;\n};\n\nexport const quarkusProducerCodeBlock = `package org.acme.kafka;\nimport java.time.Duration;\nimport java.util.Random;\n\nimport javax.enterprise.context.ApplicationScoped;\n\nimport io.smallrye.mutiny.Multi;\nimport org.eclipse.microprofile.reactive.messaging.Outgoing;`;\n\nexport const quarkusProducerExpandableBlock = `\n/**\n* A bean producing random prices every 5 seconds.\n* The prices are written to a Kafka topic (prices). The Kafka configuration is specified in the application configuration.\n*/\n@ApplicationScoped\npublic class PriceGenerator {\n\n   private Random random = new Random();\n\n   @Outgoing(\"generated-price\")\n   public Multi<Integer> generate() {\n       return Multi.createFrom().ticks().every(Duration.ofSeconds(5))\n               .onOverflow().drop()\n               .map(tick -> random.nextInt(100));\n   }\n\n}`;\n\nexport const quarkusConsumerCodeBlock = `package org.acme.kafka;\nimport javax.enterprise.context.ApplicationScoped;\n\nimport org.eclipse.microprofile.reactive.messaging.Acknowledgment;\nimport org.eclipse.microprofile.reactive.messaging.Incoming;\nimport org.eclipse.microprofile.reactive.messaging.Outgoing;\n\nimport io.smallrye.reactive.messaging.annotations.Broadcast;\n\n/**\n * A bean consuming data from the \"prices\" Kafka topic and applying some conversion.\n * The result is pushed to the \"my-data-stream\" stream which is an in-memory stream.\n */\n@ApplicationScoped`;\n\nexport const quarkusConsumerExpandableBlock = `public class PriceConverter {\n\n    private static final double CONVERSION_RATE = 0.88;\n\n    // Consume from the \\`prices\\` channel and produce to the \\`my-data-stream\\` channel\n    @Incoming(\"prices\")\n    @Outgoing(\"my-data-stream\")\n    // Send to all subscribers\n    @Broadcast\n    // Acknowledge the messages before calling this method.\n    @Acknowledgment(Acknowledgment.Strategy.PRE_PROCESSING)\n    public double process(int priceInUsd) {\n        return priceInUsd * CONVERSION_RATE;\n    }\n\n}`;\n\nexport const springBootConfigCodeBlock = (\n  kafkaBootstrapUrl: string,\n  tokenEndpointUrl: string\n) => {\n  return `package com.example.kafkaconfig;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class KafkaConfig {\n\n   public static Map<String, Object> Config() {\n\n       Map<String, Object> config = new HashMap<>();\n\n       String kafkaHost = \"${kafkaBootstrapUrl}\";\n       String rhoasClientID = \"<client_id>\";\n       String rhoasClientSecret = \"<client_secret>\";\n       String rhoasOauthTokenUrl = \"${tokenEndpointUrl}\";`;\n};\n\nexport const springBootConfigExpandableBlock = `\n    config.put(\"bootstrap.servers\", kafkaHost);\n\n    config.put(\"security.protocol\", \"SASL_SSL\");\n    config.put(\"sasl.mechanism\", \"OAUTHBEARER\");\n\n    config.put(\"sasl.jaas.config\", \"org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required clientId=\\\\\"\" + rhoasClientID + \"\\\\\" clientSecret=\\\\\"\" + rhoasClientSecret + \"\\\\\" oauth.token.endpoint.uri=\\\\\"\" + rhoasOauthTokenUrl + \"\\\\\";\");\n    config.put(\"sasl.login.callback.handler.class\", \"org.apache.kafka.common.security.oauthbearer.secured.OAuthBearerLoginCallbackHandler\");\n    config.put(\"sasl.oauthbearer.token.endpoint.url\", rhoasOauthTokenUrl);\n    config.put(\"sasl.oauthbearer.scope.claim.name\", \"api.iam.service_accounts\");\n\n    return config;\n   }\n}`;\n\nexport const springBootProducerCodeBlock = `package com.example.kafkademo;\nimport org.apache.kafka.clients.producer.ProducerConfig;\nimport org.apache.kafka.common.serialization.StringSerializer;\nimport org.springframework.boot.ApplicationRunner;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.kafka.core.DefaultKafkaProducerFactory;\nimport org.springframework.kafka.core.KafkaTemplate;\nimport org.springframework.kafka.core.ProducerFactory;\nimport com.example.kafkaconfig.KafkaConfig;\n\nimport java.util.Map;`;\n\nexport const springBootProducerExpandableBlock = `\n@SpringBootApplication\npublic class KafkaProducerExample {\n\n  public static void main(String[] args) throws Exception {\n    SpringApplication.run(KafkaProducerExample.class, args);\n  }\n\n  @Bean\n  public ProducerFactory<String, String> producerFactory() {\n    Map<String, Object> config = KafkaConfig.Config();\n\n    config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n    config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n\n    return new DefaultKafkaProducerFactory<String, String>(config);\n  }\n\n  @Bean\n  public KafkaTemplate<String, String> kafkaTemplate() {\n    return new KafkaTemplate<>(producerFactory());\n  }\n\n  @Bean\n  public ApplicationRunner runner(KafkaTemplate<String, String> template) {\n    return args -> {\n      template.send(<\"topic\">, \"Test Message\");\n    };\n  }\n\n}`;\n\nexport const springBootListenerCodeBlock = `package com.example.kafkaconsumer.listener;\n\nimport com.example.kafkaconfig.KafkaConfig;\nimport org.apache.kafka.clients.consumer.ConsumerConfig;\nimport org.apache.kafka.common.serialization.StringDeserializer;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.kafka.annotation.KafkaListener;\nimport org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;\nimport org.springframework.kafka.core.ConsumerFactory;\nimport org.springframework.kafka.core.DefaultKafkaConsumerFactory;\nimport org.springframework.stereotype.Component;\n\nimport java.util.Map;`;\n\nexport const springBootListenerExpandableBlock = `@Component\npublic class Listener {\n\n    @KafkaListener(topics = <\"topic\">,\n            containerFactory = \"concurrentKafkaListenerContainerFactory\",\n            groupId = \"test_group\")\n\n    // Method\n    public void consume(String message)\n    {\n        // Print statement\n        System.out.println(message);\n    }\n}`;\n\nexport const springBootConsumerConfigCodeBlock = `package com.example.kafkaconsumer.config;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport com.example.kafkaconfig.KafkaConfig;\nimport org.apache.kafka.clients.consumer.ConsumerConfig;\nimport org.apache.kafka.common.serialization.StringDeserializer;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.kafka.annotation.EnableKafka;\nimport org.springframework.kafka.core.ConsumerFactory;\nimport org.springframework.kafka.core.DefaultKafkaConsumerFactory;\nimport org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;`;\n\nexport const springBootConsumerConfigExpandableBlock = `// Annotations\n@EnableKafka\n@Configuration\n\npublic class KafkaConsumerConfig {\n\n    @Bean\n    public ConsumerFactory<String, String> consumerFactory() {\n        Map<String, Object> config = KafkaConfig.Config();\n\n        config.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n        config.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n\n        return new DefaultKafkaConsumerFactory<>(config);\n    }\n\n    @Bean\n    public ConcurrentKafkaListenerContainerFactory concurrentKafkaListenerContainerFactory() {\n        ConcurrentKafkaListenerContainerFactory<\n                String, String> factory\n                = new ConcurrentKafkaListenerContainerFactory<>();\n        factory.setConsumerFactory(consumerFactory());\n        return factory;\n    }\n}`;\n\nexport const springBootConsumerExampleCodeBlock = `\npackage com.example.kafkaconsumer;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;`;\n\nexport const springBootConsumerExampleExpandableBlock = `\n@SpringBootApplication\npublic class KafkaConsumerExample {\n\n    public static void main(String[] args) {\n        SpringApplication.run(KafkaConsumerExample.class, args);\n    }\n\n}`;\n","import {\n  TextContent,\n  TextVariants,\n  Text,\n  ToggleGroup,\n  ToggleGroupItem,\n} from \"@patternfly/react-core\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useState } from \"react\";\nimport { SampleCodeSnippet } from \"./SampleCodeSnippet\";\nimport {\n  javaConfigCodeBlock,\n  javaConfigExpandabledBlock,\n  javaConsumerCodeBlock,\n  javaConsumerExpandableBlock,\n  javaProducerCodeBlock,\n  javaProducerExpandableBlock,\n  pythonConfigCodeBlock,\n  pythonConfigExpandabledBlock,\n  pythonConsumerCodeBlock,\n  pythonConsumerExpandableBlock,\n  pythonProducer,\n  quarkusConfigCodeBlock,\n  quarkusConfigExpandableBlock,\n  quarkusConsumerCodeBlock,\n  quarkusConsumerExpandableBlock,\n  quarkusProducerCodeBlock,\n  quarkusProducerExpandableBlock,\n  springBootConfigCodeBlock,\n  springBootConfigExpandableBlock,\n  springBootConsumerConfigCodeBlock,\n  springBootConsumerConfigExpandableBlock,\n  springBootConsumerExampleCodeBlock,\n  springBootConsumerExampleExpandableBlock,\n  springBootListenerCodeBlock,\n  springBootListenerExpandableBlock,\n  springBootProducerCodeBlock,\n  springBootProducerExpandableBlock,\n} from \"./CodeSnippets\";\n\nexport type ClientType = \"java\" | \"python\" | \"quarkus\" | \"springboot\";\n\nexport type KafkaSampleCodeProps = {\n  kafkaBootstrapUrl: string;\n  tokenEndpointUrl: string;\n};\n\nexport const KafkaSampleCode: VoidFunctionComponent<KafkaSampleCodeProps> = ({\n  kafkaBootstrapUrl,\n  tokenEndpointUrl,\n}) => {\n  const { t } = useTranslation(\"kafka\");\n\n  const [clientSelect, setClientSelect] = useState<ClientType>(\"java\");\n\n  return (\n    <div className=\"mas--details__drawer--tab-content\">\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.small}>\n          {t(\"sample_code.code_snippet_description_1\")}\n        </Text>\n        <Text component={TextVariants.small}>\n          {t(\"sample_code.code_snippet_description_2\")}\n        </Text>\n        <ToggleGroup>\n          <ToggleGroupItem\n            text={t(\"sample_code.clients.java\")}\n            value=\"java\"\n            buttonId=\"java\"\n            isSelected={clientSelect === \"java\"}\n            onChange={() => setClientSelect(\"java\")}\n          />\n          <ToggleGroupItem\n            text={t(\"sample_code.clients.python\")}\n            value=\"python\"\n            buttonId=\"python\"\n            isSelected={clientSelect === \"python\"}\n            onChange={() => setClientSelect(\"python\")}\n          />\n          <ToggleGroupItem\n            text={t(\"sample_code.clients.quarkus\")}\n            value=\"quarkus\"\n            buttonId=\"quarkus\"\n            isSelected={clientSelect === \"quarkus\"}\n            onChange={() => setClientSelect(\"quarkus\")}\n          />\n          <ToggleGroupItem\n            text={t(\"sample_code.clients.spring_boot\")}\n            value=\"springboot\"\n            buttonId=\"springboot\"\n            isSelected={clientSelect === \"springboot\"}\n            onChange={() => setClientSelect(\"springboot\")}\n          />\n        </ToggleGroup>\n        <Text component={TextVariants.h3} className=\"pf-u-mt-xl\">\n          {t(\"sample_code.sample_configuration_code\")}\n        </Text>\n        <Text component={TextVariants.small}>\n          {t(\"sample_code.sample_configuration_code_description\")}\n        </Text>\n        <Text component={TextVariants.small}>\n          {t(\"sample_code.bracket_text\")}\n        </Text>\n        {(() => {\n          switch (clientSelect) {\n            case \"java\":\n              return (\n                <SampleCodeSnippet\n                  codeBlockCode={javaConfigCodeBlock(\n                    kafkaBootstrapUrl,\n                    tokenEndpointUrl\n                  )}\n                  expandableCode={javaConfigExpandabledBlock}\n                  codeSnippet={clientSelect}\n                />\n              );\n            case \"python\":\n              return (\n                <SampleCodeSnippet\n                  codeBlockCode={pythonConfigCodeBlock(tokenEndpointUrl)}\n                  expandableCode={pythonConfigExpandabledBlock(\n                    kafkaBootstrapUrl\n                  )}\n                  codeSnippet={clientSelect}\n                />\n              );\n            case \"quarkus\":\n              return (\n                <SampleCodeSnippet\n                  codeBlockCode={quarkusConfigCodeBlock}\n                  expandableCode={quarkusConfigExpandableBlock(\n                    kafkaBootstrapUrl,\n                    tokenEndpointUrl\n                  )}\n                  codeSnippet={clientSelect}\n                />\n              );\n            case \"springboot\":\n              return (\n                <SampleCodeSnippet\n                  codeBlockCode={springBootConfigCodeBlock(\n                    kafkaBootstrapUrl,\n                    tokenEndpointUrl\n                  )}\n                  expandableCode={springBootConfigExpandableBlock}\n                  codeSnippet={clientSelect}\n                />\n              );\n            default:\n              return null;\n          }\n        })()}\n        <Text component={TextVariants.h3} className=\"pf-u-mt-xl\">\n          {t(\"sample_code.sample_producer_code\")}\n        </Text>\n        {clientSelect === \"quarkus\" ? (\n          <>\n            <Text component={TextVariants.small}>\n              {t(\"sample_code.sample_producer_code_quarkus_description\")}\n            </Text>\n            <SampleCodeSnippet\n              codeBlockCode={quarkusProducerCodeBlock}\n              expandableCode={quarkusProducerExpandableBlock}\n              codeSnippet={clientSelect}\n            />\n          </>\n        ) : (\n          <>\n            <Text component={TextVariants.small}>\n              <Trans\n                ns={\"kafka\"}\n                i18nKey={\"sample_code.sample_producer_code_description\"}\n                values={{\n                  client_type: clientSelect,\n                }}\n              />\n            </Text>\n            <Text component={TextVariants.small}>\n              {t(\"sample_code.bracket_text\")}\n            </Text>\n            {(() => {\n              switch (clientSelect) {\n                case \"java\":\n                  return (\n                    <SampleCodeSnippet\n                      codeBlockCode={javaProducerCodeBlock}\n                      expandableCode={javaProducerExpandableBlock}\n                      codeSnippet={clientSelect}\n                    />\n                  );\n                case \"python\":\n                  return <SampleCodeSnippet codeBlockCode={pythonProducer} />;\n                case \"springboot\":\n                  return (\n                    <SampleCodeSnippet\n                      codeBlockCode={springBootProducerCodeBlock}\n                      expandableCode={springBootProducerExpandableBlock}\n                      codeSnippet={clientSelect}\n                    />\n                  );\n                default:\n                  return null;\n              }\n            })()}\n          </>\n        )}\n\n        <Text component={TextVariants.h3} className=\"pf-u-mt-xl\">\n          {t(\"sample_code.sample_consumer_code\")}\n        </Text>\n        {clientSelect === \"springboot\" ? (\n          <>\n            <Text component={TextVariants.small}>\n              {t(\"sample_code.spring_boot_sample_consumer_code_description\")}\n            </Text>\n            <Text component={TextVariants.h4} className=\"pf-u-mt-xl\">\n              {t(\"sample_code.spring_boot_consumer_configuration\")}\n            </Text>\n            <Text component={TextVariants.small}>\n              {t(\"sample_code.spring_boot_consumer_configuration_description\")}\n            </Text>\n            <SampleCodeSnippet\n              codeBlockCode={springBootConsumerConfigCodeBlock}\n              expandableCode={springBootConsumerConfigExpandableBlock}\n              codeSnippet={clientSelect}\n            />\n            <Text component={TextVariants.h4} className=\"pf-u-mt-xl\">\n              {t(\"sample_code.spring_boot_listener\")}\n            </Text>\n            <Text component={TextVariants.small}>\n              {t(\"sample_code.spring_boot_listener_description\")}\n            </Text>\n            <SampleCodeSnippet\n              codeBlockCode={springBootListenerCodeBlock}\n              expandableCode={springBootListenerExpandableBlock}\n              codeSnippet={clientSelect}\n            />\n            <Text component={TextVariants.h4} className=\"pf-u-mt-xl\">\n              {t(\"sample_code.spring_boot_consumer\")}\n            </Text>\n            <Text component={TextVariants.small}>\n              {t(\"sample_code.spring_boot_consumer_description\")}\n            </Text>\n            <SampleCodeSnippet\n              codeBlockCode={springBootConsumerExampleCodeBlock}\n              expandableCode={springBootConsumerExampleExpandableBlock}\n              codeSnippet={clientSelect}\n            />\n          </>\n        ) : (\n          <>\n            <Text component={TextVariants.small}>\n              <Trans\n                ns={\"kafka\"}\n                i18nKey={\"sample_code.sample_consumer_code_description\"}\n                values={{\n                  client_type: clientSelect,\n                }}\n              />\n            </Text>\n            {(() => {\n              switch (clientSelect) {\n                case \"java\":\n                  return (\n                    <SampleCodeSnippet\n                      codeBlockCode={javaConsumerCodeBlock}\n                      expandableCode={javaConsumerExpandableBlock}\n                      codeSnippet={clientSelect}\n                    />\n                  );\n                case \"python\":\n                  return (\n                    <SampleCodeSnippet\n                      codeBlockCode={pythonConsumerCodeBlock}\n                      expandableCode={pythonConsumerExpandableBlock}\n                      codeSnippet={clientSelect}\n                    />\n                  );\n                case \"quarkus\":\n                  return (\n                    <SampleCodeSnippet\n                      codeBlockCode={quarkusConsumerCodeBlock}\n                      expandableCode={quarkusConsumerExpandableBlock}\n                      codeSnippet={clientSelect}\n                    />\n                  );\n                default:\n                  return null;\n              }\n            })()}\n          </>\n        )}\n      </TextContent>\n    </div>\n  );\n};\n","import type { TabsProps } from \"@patternfly/react-core\";\nimport {\n  Drawer,\n  DrawerActions,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerContentBody,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerPanelContent,\n  Tab,\n  Tabs,\n  TabTitleText,\n  Text,\n  TextContent,\n  TextVariants,\n  Title,\n  TitleSizes,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { parseISO } from \"date-fns\";\nimport type { FunctionComponent, VoidFunctionComponent } from \"react\";\nimport { useCallback, useMemo } from \"react\";\nimport type { Kafka } from \"ui-models/src/models/kafka\";\nimport { CreatingStatuses } from \"ui-models/src/models/kafka\";\nimport { useKafkaLabels } from \"../../hooks\";\nimport {\n  KafkaConnectionTabP2,\n  KafkaDetailsTab,\n  KafkaSampleCode,\n} from \"./components\";\n\nexport type KafkaInstanceDrawerProps = {\n  instance?: Kafka;\n  isExpanded: boolean;\n  activeTab: KafkaInstanceDrawerTab;\n  onTabChange: (tab: KafkaInstanceDrawerTab) => void;\n\n  onClose: () => void;\n};\n\nexport const KafkaInstanceDrawer: FunctionComponent<\n  KafkaInstanceDrawerProps\n> = ({ instance, activeTab, isExpanded, onTabChange, onClose, children }) => {\n  const content = useMemo(() => {\n    return (\n      <DrawerPanelContent>\n        {instance ? (\n          <KafkaInstanceDrawerPanel\n            instance={instance}\n            activeTab={activeTab}\n            onTabChange={onTabChange}\n            onClose={onClose}\n          />\n        ) : null}\n      </DrawerPanelContent>\n    );\n  }, [activeTab, instance, onClose, onTabChange]);\n  return (\n    <Drawer isExpanded={isExpanded} isInline={true}>\n      <DrawerContent panelContent={content}>\n        <DrawerContentBody\n          className={\"pf-u-display-flex pf-u-flex-direction-column\"}\n        >\n          {children}\n        </DrawerContentBody>\n      </DrawerContent>\n    </Drawer>\n  );\n};\n\nexport type KafkaInstanceDrawerTab = \"details\" | \"connections\";\n\nexport const KafkaInstanceDrawerPanel: VoidFunctionComponent<\n  Required<Omit<KafkaInstanceDrawerProps, \"isExpanded\">> & {\n    activeTab: KafkaInstanceDrawerTab;\n  }\n> = ({ instance, activeTab, onTabChange, onClose }) => {\n  const { t } = useTranslation([\"kafka\"]);\n  const labels = useKafkaLabels();\n\n  const handleSelect: TabsProps[\"onSelect\"] = useCallback(\n    (_, tab) => {\n      const t = tab as KafkaInstanceDrawerTab;\n      onTabChange(t);\n    },\n    [onTabChange]\n  );\n\n  const isKafkaPending = CreatingStatuses.includes(instance.status);\n\n  return (\n    <>\n      <DrawerHead>\n        <TextContent>\n          <Text component={TextVariants.small} className={\"pf-u-mb-0\"}>\n            {t(\"common:name\")}\n          </Text>\n          <Title\n            headingLevel={\"h1\"}\n            size={TitleSizes[\"xl\"]}\n            className={\"pf-u-mt-0\"}\n          >\n            {instance.name}\n          </Title>\n        </TextContent>\n        <DrawerActions>\n          <DrawerCloseButton onClick={onClose} />\n        </DrawerActions>\n      </DrawerHead>\n      <DrawerPanelBody>\n        <Tabs activeKey={activeTab} onSelect={handleSelect}>\n          <Tab\n            eventKey={\"details\"}\n            title={<TabTitleText>{t(\"drawer-tabs.details\")}</TabTitleText>}\n          >\n            <div className={\"pf-u-pt-md pf-u-pb-md\"}>\n              <KafkaDetailsTab\n                id={instance.id}\n                owner={instance.owner}\n                createdAt={parseISO(instance.createdAt)}\n                updatedAt={parseISO(instance.updatedAt)}\n                expiryDate={\n                  instance.expiryDate\n                    ? parseISO(instance.expiryDate)\n                    : undefined\n                }\n                size={instance.size}\n                ingress={instance.ingress}\n                egress={instance.egress}\n                storage={instance.storage}\n                maxPartitions={instance.maxPartitions}\n                connections={instance.connections}\n                connectionRate={instance.connectionRate}\n                messageSize={instance.messageSize}\n                provider={\n                  labels.providers[instance.provider] || instance.provider\n                }\n                region={\n                  labels.providerRegions[instance.provider][instance.region] ||\n                  instance.region\n                }\n                instanceType={instance.plan}\n                billing={instance.billing}\n                kafkaVersion={instance.version}\n              />\n            </div>\n          </Tab>\n          <Tab\n            eventKey={\"connections\"}\n            title={<TabTitleText>{t(\"drawer-tabs.connections\")}</TabTitleText>}\n            data-testid=\"drawerStreams-tabConnect\"\n          >\n            <div className={\"pf-u-pt-md pf-u-pb-md\"}>\n              <KafkaConnectionTabP2\n                isKafkaPending={isKafkaPending}\n                externalServer={getExternalServer(instance.bootstrapUrl)}\n                tokenEndPointUrl={\"TODO\"}\n                linkToServiceAccount={\"service-accounts\"}\n                linkToAccessTab={`TODO/acls`}\n                adminAPIUrl={getAdminServerUrl(instance.adminUrl)}\n                showCreateServiceAccountModal={() => {\n                  /* TODO */\n                }}\n                kafkaFleetManagerUrl={\n                  \"https://api.openshift.com/api/kafkas_mgmt/v1/openapi\"\n                }\n              />\n            </div>\n          </Tab>\n          <Tab\n            eventKey={\"samplecode\"}\n            title={<TabTitleText>{t(\"drawer-tabs.sample-code\")}</TabTitleText>}\n          >\n            <div className={\"pf-u-pt-md pf-u-pb-md\"}>\n              <KafkaSampleCode\n                kafkaBootstrapUrl={getExternalServer(instance.bootstrapUrl)!}\n                tokenEndpointUrl={\"TODO\"}\n              />\n            </div>\n          </Tab>\n        </Tabs>\n      </DrawerPanelBody>\n    </>\n  );\n};\n\nconst getExternalServer = (bootstrapUrl: string | undefined) => {\n  if (!bootstrapUrl) {\n    return undefined;\n  }\n  return bootstrapUrl?.endsWith(\":443\") ? bootstrapUrl : `${bootstrapUrl}:443`;\n};\n\nconst getAdminServerUrl = (adminUrl: string | undefined) => {\n  return adminUrl ? `${adminUrl}/openapi` : undefined;\n};\n","import {\n  Alert,\n  Button,\n  Flex,\n  FlexItem,\n  HelperText,\n  HelperTextItem,\n  Spinner,\n  Split,\n  SplitItem,\n} from \"@patternfly/react-core\";\nimport {\n  CheckCircleIcon,\n  ExclamationTriangleIcon,\n} from \"@patternfly/react-icons\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { forwardRef } from \"react\";\nimport type { Status } from \"ui-models/src/models/kafka\";\nimport {\n  CreatingStatuses,\n  DegradedStatuses,\n  DeletingStatuses,\n  ReadyStatuses,\n  ResumingStatuses,\n  SuspendedStatuses,\n  SuspendingStatuses,\n} from \"ui-models/src/models/kafka\";\nimport \"./StatusLabel.css\";\n\ntype StatusLabelProps = {\n  value: Status;\n  showWarning?: boolean;\n  showError?: boolean;\n  withPopover?: boolean;\n};\n\n/**\n *<strong> Introduction </strong>\n *These are the various statuses that can show in the Kafka instances table under the \"Status\" header.\n */\nexport const StatusLabel = forwardRef<HTMLButtonElement, StatusLabelProps>(\n  (\n    { value, showWarning = false, showError = false, withPopover = false },\n    ref\n  ) => {\n    const { t } = useTranslation(\"kafka\");\n\n    const buttonVariant = withPopover ? \"link\" : \"plain\";\n\n    switch (true) {\n      case ReadyStatuses.includes(value):\n        return (\n          <div>\n            <Split hasGutter className=\"mas-c-status\">\n              <SplitItem>\n                <CheckCircleIcon className=\"mas-m-ready\" />\n              </SplitItem>\n              <SplitItem>{t(\"statuses.ready\")}</SplitItem>\n            </Split>\n          </div>\n        );\n\n      case CreatingStatuses.includes(value):\n        switch (true) {\n          case showWarning:\n            return (\n              <div>\n                <Split hasGutter className=\"mas-c-status\">\n                  <SplitItem>\n                    <Spinner size=\"md\" />\n                  </SplitItem>\n                  <SplitItem>\n                    <Button ref={ref} variant={buttonVariant} isInline>\n                      {t(\"statuses.creating\")}\n                    </Button>\n                  </SplitItem>\n                </Split>\n                <Alert\n                  variant=\"warning\"\n                  isInline\n                  isPlain\n                  title=\"This is taking longer than expected.\"\n                />\n              </div>\n            );\n          case showError:\n            return (\n              <div>\n                <Split hasGutter className=\"mas-c-status\">\n                  <SplitItem>\n                    <Spinner size=\"md\" />\n                  </SplitItem>\n                  <SplitItem>\n                    <Button ref={ref} variant={buttonVariant} isInline>\n                      {t(\"statuses.creating\")}\n                    </Button>\n                  </SplitItem>\n                </Split>\n                <Alert\n                  variant=\"danger\"\n                  isInline\n                  isPlain\n                  title={t(\"status_warning_or_error_title\")}\n                />\n              </div>\n            );\n          default:\n            return (\n              <div>\n                <Split hasGutter className=\"mas-c-status\">\n                  <SplitItem>\n                    <Spinner size=\"md\" />\n                  </SplitItem>\n                  <SplitItem>\n                    <Button ref={ref} variant={buttonVariant} isInline>\n                      {t(\"statuses.creating\")}\n                    </Button>\n                    <Flex>\n                      <FlexItem>\n                        <HelperText>\n                          <HelperTextItem variant=\"indeterminate\">\n                            {t(\"status_created_shortly_help\")}\n                          </HelperTextItem>\n                        </HelperText>\n                      </FlexItem>\n                    </Flex>\n                  </SplitItem>\n                </Split>\n              </div>\n            );\n        }\n\n      case DegradedStatuses.includes(value):\n        return (\n          <div>\n            <Split hasGutter className=\"mas-c-status\">\n              <SplitItem>\n                <ExclamationTriangleIcon className=\"mas-m-degraded\" />\n              </SplitItem>\n              <SplitItem>{t(\"statuses.degraded\")}</SplitItem>\n            </Split>\n          </div>\n        );\n\n      case SuspendingStatuses.includes(value):\n        return (\n          <div>\n            <p className=\"mas-m-deleting\"> {t(\"statuses.suspending\")}</p>\n          </div>\n        );\n      case SuspendedStatuses.includes(value):\n        return (\n          <div>\n            <Split hasGutter className=\"mas-c-status\">\n              <SplitItem>\n                <ExclamationTriangleIcon className=\"mas-m-degraded\" />\n              </SplitItem>\n              <SplitItem>\n                <Button ref={ref} variant={buttonVariant} isInline>\n                  {t(\"statuses.suspended\")}\n                </Button>\n              </SplitItem>\n            </Split>\n          </div>\n        );\n      case ResumingStatuses.includes(value):\n        return (\n          <div>\n            <Split hasGutter className=\"mas-c-status\">\n              <SplitItem>\n                <Spinner size=\"md\" />\n              </SplitItem>\n              <SplitItem>{t(\"statuses.resuming\")}</SplitItem>\n            </Split>\n          </div>\n        );\n      case DeletingStatuses.includes(value):\n        return (\n          <div>\n            <p className=\"mas-m-deleting\"> {t(\"statuses.deleting\")}</p>\n          </div>\n        );\n      default:\n        return null;\n    }\n  }\n);\n","export type KafkaStatus =\n  | \"ready\"\n  | \"degraded\"\n  | \"accepted\"\n  | \"provisioning\"\n  | \"preparing\"\n  | \"deprovision\"\n  | \"deleting\"\n  | \"suspended\"\n  | \"suspending\"\n  | \"resuming\";\n\nexport type PopoverStatus =\n  | \"pending\"\n  | \"provisioning\"\n  | \"preparing\"\n  | \"ready\"\n  | \"suspended\";\n\nexport const PopoverStatusOrder: PopoverStatus[] = [\n  \"pending\",\n  \"preparing\",\n  \"provisioning\",\n];\n\nexport const KafkaToPopoverMapping: {\n  [status in KafkaStatus]: PopoverStatus | null;\n} = {\n  ready: null,\n  degraded: null,\n  accepted: \"pending\",\n  provisioning: \"provisioning\",\n  preparing: \"preparing\",\n  deprovision: null,\n  deleting: null,\n  suspended: \"suspended\",\n  suspending: null,\n  resuming: null,\n};\n","import { ProgressStep, ProgressStepper } from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { PopoverStatus } from \"../types\";\nimport { PopoverStatusOrder } from \"../types\";\n\ntype StatusProgressStepperProps = {\n  currentStatus: PopoverStatus;\n};\n\nexport const StatusProgressStepper: VoidFunctionComponent<\n  StatusProgressStepperProps\n> = ({ currentStatus }) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n\n  const currentStep = PopoverStatusOrder.findIndex((s) => s === currentStatus);\n\n  const getVariant = (index: number) =>\n    (currentStep === index && \"info\") ||\n    (currentStep > index && \"success\") ||\n    \"default\";\n\n  return (\n    <ProgressStepper isVertical={true}>\n      <ProgressStep\n        id={\"pending\"}\n        titleId={\"pending\"}\n        isCurrent={currentStatus === \"pending\"}\n        description={t(\"kafka_status_popover.pending.description\")}\n        aria-label={t(\"kafka_status_popover.pending.description\")}\n        variant={getVariant(0)}\n      >\n        {t(\"kafka_status_popover.pending.title\")}\n      </ProgressStep>\n\n      <ProgressStep\n        id={\"provisioning\"}\n        titleId={\"provisioning\"}\n        isCurrent={currentStatus === \"provisioning\"}\n        description={t(\"kafka_status_popover.provisioning.description\")}\n        aria-label={t(\"kafka_status_popover.provisioning.description\")}\n        variant={getVariant(1)}\n      >\n        {t(\"kafka_status_popover.provisioning.title\")}\n      </ProgressStep>\n      <ProgressStep\n        id={\"preparing\"}\n        titleId={\"preparing\"}\n        isCurrent={currentStatus === \"preparing\"}\n        description={t(\"kafka_status_popover.preparing.description\")}\n        aria-label={t(\"kafka_status_popover.preparing.description\")}\n        variant={getVariant(2)}\n      >\n        {t(\"kafka_status_popover.preparing.title\")}\n      </ProgressStep>\n    </ProgressStepper>\n  );\n};\n","import {\n  Alert,\n  Button,\n  ButtonVariant,\n  Stack,\n  StackItem,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { Trans, useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { PopoverStatus } from \"../types\";\nimport { PopoverStatusOrder } from \"../types\";\nimport { StatusProgressStepper } from \"./StatusProgressStepper\";\n\nexport type StatusPopoverContentProps = {\n  currentStatus: PopoverStatus;\n  showWarning?: boolean;\n  showError?: boolean;\n  onClickConnectionTabLink: () => void;\n  onClickSupportLink: () => void;\n};\n\nexport const StatusPopoverContent: VoidFunctionComponent<\n  StatusPopoverContentProps\n> = ({\n  currentStatus,\n  showWarning = false,\n  showError = false,\n  onClickConnectionTabLink,\n  onClickSupportLink,\n}) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n\n  const currentStep = PopoverStatusOrder.findIndex((s) => s === currentStatus);\n\n  return (\n    <div>\n      <Stack hasGutter>\n        <StackItem>\n          {showWarning && (\n            <Alert\n              variant=\"warning\"\n              isInline\n              isPlain\n              title={t(\"kafka_status_popover.warning_or_error_title\")}\n            >\n              <TextContent>\n                <Text component={TextVariants.small}>\n                  <Trans\n                    ns={[\"create-kafka-instance\"]}\n                    i18nKey=\"kafka_status_popover.header_content_with_warning\"\n                    components={[\n                      <Button\n                        key=\"btn-connetcion-tab\"\n                        variant={ButtonVariant.link}\n                        onClick={onClickConnectionTabLink}\n                        isInline\n                      />,\n                    ]}\n                  />\n                </Text>\n              </TextContent>\n            </Alert>\n          )}\n          {showError && (\n            <Alert\n              variant=\"danger\"\n              isInline\n              isPlain\n              title={t(\"kafka_status_popover.warning_or_error_title\")}\n            >\n              <TextContent>\n                <Text component={TextVariants.small}>\n                  <Trans\n                    ns={[\"create-kafka-instance\"]}\n                    i18nKey=\"kafka_status_popover.header_content_with_error\"\n                    components={[\n                      <Button\n                        key=\"btn-connetcion-tab\"\n                        variant={ButtonVariant.link}\n                        onClick={onClickConnectionTabLink}\n                        isInline\n                      />,\n                      <Button\n                        key=\"btn-support-case\"\n                        variant={ButtonVariant.link}\n                        onClick={onClickSupportLink}\n                        isInline\n                      />,\n                    ]}\n                  />\n                </Text>\n              </TextContent>\n            </Alert>\n          )}\n          {!showError && !showWarning && (\n            <TextContent>\n              <Text component={TextVariants.small}>\n                <Trans\n                  ns={[\"create-kafka-instance\"]}\n                  i18nKey=\"kafka_status_popover.header_content\"\n                  components={[\n                    <Button\n                      key=\"btn-connetcion-tab\"\n                      variant={ButtonVariant.link}\n                      onClick={onClickConnectionTabLink}\n                      isInline\n                    />,\n                  ]}\n                />\n              </Text>\n            </TextContent>\n          )}\n        </StackItem>\n        <StackItem>\n          {t(\"common:progress_stepper_current_step\", {\n            currentStep,\n            total: PopoverStatusOrder.length,\n          })}\n        </StackItem>\n        <StackItem>\n          <StatusProgressStepper currentStatus={currentStatus} />\n        </StackItem>\n      </Stack>\n    </div>\n  );\n};\n","import type { PopoverProps } from \"@patternfly/react-core\";\nimport { Popover } from \"@patternfly/react-core\";\nimport type { RefObject, VoidFunctionComponent } from \"react\";\nimport { useCallback, useState } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { PopoverStatus } from \"../types\";\nimport type { StatusPopoverContentProps } from \"./StatusPopoverContent\";\nimport { StatusPopoverContent } from \"./StatusPopoverContent\";\n\nexport type StatusPopoverProps = {\n  status: PopoverStatus;\n  initialOpen?: boolean;\n  showWarning?: boolean;\n  showError?: boolean;\n  children?: PopoverProps[\"children\"];\n  onClickConnectionTabLink: StatusPopoverContentProps[\"onClickConnectionTabLink\"];\n  onClickSupportLink: StatusPopoverContentProps[\"onClickSupportLink\"];\n  reference?: RefObject<HTMLButtonElement>;\n};\n\n/**\n * ## Introduction\n *\n * This is a popover that can be reached from the Kafka Instance table while the status of the instance in question is “Creating”.\n * A Kafka instance usually takes a few minutes to create. The purpose of this popover is to give the user some insights into\n * the creation process of their instance while they wait for it to be available to use.\n *\n * - The text at the top explains that the instance will be ready shortly & suggests that the user creates a service account while they wait.\n *  (Provides a link to the “Connections tab\" where this is done).\n *\n * - The steps shown in the progress stepper are statuses that show in the api. They have been grouped together under the one overall\n * “Creating status” in the table.There is some descriptive text accompanying each step too. When these steps are complete the instance will be ready for use\n *\n * - The popover is only available while instance creation is in progress.\n * - After creation is complete the table displays the ready status and the popover is no longer available.\n *\n */\nexport const StatusPopover: VoidFunctionComponent<StatusPopoverProps> = ({\n  initialOpen = false,\n  status,\n  showWarning = false,\n  showError = false,\n  onClickConnectionTabLink,\n  onClickSupportLink,\n  reference,\n  children,\n}) => {\n  const { t } = useTranslation(\"create-kafka-instance\");\n\n  const [isVisible, setIsVisible] = useState(initialOpen);\n  const onClose = () => setIsVisible(false);\n\n  const handleClickConnectionTabLink = useCallback(() => {\n    onClose();\n    onClickConnectionTabLink();\n  }, [onClickConnectionTabLink]);\n\n  const handleClickSupportLink = useCallback(() => {\n    onClose();\n    onClickSupportLink();\n  }, [onClickSupportLink]);\n\n  return (\n    <Popover\n      headerContent={t(\"kafka_status_popover.title\")}\n      bodyContent={\n        <StatusPopoverContent\n          currentStatus={status}\n          showWarning={showWarning}\n          showError={showError}\n          onClickConnectionTabLink={handleClickConnectionTabLink}\n          onClickSupportLink={handleClickSupportLink}\n        />\n      }\n      isVisible={isVisible}\n      shouldOpen={() => setIsVisible(true)}\n      shouldClose={() => setIsVisible(false)}\n      position={\"right\"}\n      enableFlip={true}\n      reference={reference}\n    >\n      {children}\n    </Popover>\n  );\n};\n","import type { PopoverProps } from \"@patternfly/react-core\";\nimport { Popover, TextContent } from \"@patternfly/react-core\";\nimport { ExclamationTriangleIcon } from \"@patternfly/react-icons\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { RefObject, VoidFunctionComponent } from \"react\";\n\nexport type SuspendedPopoverProps = {\n  children?: PopoverProps[\"children\"];\n  reference?: RefObject<HTMLButtonElement>;\n};\n\nexport const SuspendedPopover: VoidFunctionComponent<SuspendedPopoverProps> = ({\n  children,\n  reference,\n}) => {\n  const { t } = useTranslation(\"kafka\");\n  return (\n    <Popover\n      alertSeverityVariant={\"warning\"}\n      headerIcon={<ExclamationTriangleIcon />}\n      headerContent={t(\"suspend_popover_title\")}\n      bodyContent={\n        <TextContent>\n          <p>{t(\"suspend_popover_body_1\")}</p>\n        </TextContent>\n      }\n      position={\"right\"}\n      reference={reference}\n    >\n      {children}\n    </Popover>\n  );\n};\n","import { useInterval } from \"@rhoas/app-services-ui-components\";\nimport { differenceInMinutes } from \"date-fns\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback, useRef, useState } from \"react\";\nimport type { Status } from \"ui-models/src/models/kafka\";\nimport type { StatusPopoverProps } from \"./components\";\nimport { StatusLabel, StatusPopover, SuspendedPopover } from \"./components\";\nimport { KafkaToPopoverMapping } from \"./types\";\n\nexport type KafkaInstanceStatusProps = {\n  status: Status;\n  createdAt: Date;\n  warningAfterMinutes?: number;\n  errorAfterMinutes?: number;\n} & Pick<StatusPopoverProps, \"onClickConnectionTabLink\" | \"onClickSupportLink\">;\n\n/**\n * A component to show the status of a Kafka instance combining the\n * `StatusPopover` with the `StatusLabel`, with automatic handling of which\n * statuses should have a companion popover.\n */\nexport const KafkaInstanceStatus: VoidFunctionComponent<\n  KafkaInstanceStatusProps\n> = ({\n  status,\n  createdAt,\n  warningAfterMinutes = 15,\n  errorAfterMinutes = 30,\n  onClickConnectionTabLink,\n  onClickSupportLink,\n}) => {\n  const popoverStatus = KafkaToPopoverMapping[status];\n  const [alert, setAlert] = useState<\"warning\" | \"error\" | false>(false);\n  const labelRef = useRef<HTMLButtonElement>(null);\n\n  const checkCreatedAt = useCallback(() => {\n    const elapsed = differenceInMinutes(new Date(), createdAt);\n    if (elapsed > errorAfterMinutes) {\n      setAlert(\"error\");\n    } else if (elapsed > warningAfterMinutes) {\n      setAlert(\"warning\");\n    } else {\n      setAlert(false);\n    }\n  }, [createdAt, errorAfterMinutes, warningAfterMinutes]);\n\n  useInterval(checkCreatedAt, 5000);\n  const showWarning = alert === \"warning\";\n  const showError = alert === \"error\";\n  return (\n    <>\n      {popoverStatus === \"suspended\" ? (\n        <SuspendedPopover reference={labelRef} />\n      ) : (\n        popoverStatus && (\n          <StatusPopover\n            status={popoverStatus}\n            showWarning={showWarning}\n            showError={showError}\n            onClickConnectionTabLink={onClickConnectionTabLink}\n            onClickSupportLink={onClickSupportLink}\n            reference={labelRef}\n          />\n        )\n      )}\n      <StatusLabel\n        value={status}\n        showWarning={showWarning}\n        showError={showError}\n        withPopover={popoverStatus !== undefined}\n        ref={labelRef}\n      />\n    </>\n  );\n};\n","import {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { PlusCircleIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { Trans, useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport type EmptyStateNoInstancesProps = {\n  onCreate: () => void;\n  onQuickstartGuide: () => void;\n};\n\nexport const EmptyStateNoInstances: VoidFunctionComponent<\n  EmptyStateNoInstancesProps\n> = ({ onCreate, onQuickstartGuide }) => {\n  const { t } = useTranslation(\"kafka\");\n  return (\n    <EmptyState variant={EmptyStateVariant.xs}>\n      <EmptyStateIcon icon={PlusCircleIcon} />\n      <Title headingLevel=\"h2\" size=\"lg\">\n        {t(\"empty_state_no_instances_title\")}\n      </Title>\n      <EmptyStateBody>\n        <Trans\n          ns={\"kafka\"}\n          i18nKey={\"empty_state_no_instances_body\"}\n          components={[<a onClick={onQuickstartGuide} />]}\n        />\n      </EmptyStateBody>\n      <Button ouiaId=\"button-create\" variant=\"primary\" onClick={onCreate}>\n        {t(\"empty_state_no_instances_create_instance\")}\n      </Button>\n    </EmptyState>\n  );\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { SearchIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { Trans, useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport type EmptyStateNoResultsProps = {\n  onClearAllFilters: () => void;\n};\n\nexport const EmptyStateNoResults: VoidFunctionComponent<\n  EmptyStateNoResultsProps\n> = ({ onClearAllFilters }) => {\n  const { t } = useTranslation(\"kafka\");\n  return (\n    <EmptyState variant={EmptyStateVariant.xs}>\n      <EmptyStateIcon icon={SearchIcon} />\n      <Title headingLevel=\"h2\" size=\"lg\">\n        {t(\"empty_state_no_results_found_title\")}\n      </Title>\n      <EmptyStateBody>\n        <Trans\n          ns={\"kafka\"}\n          i18nKey={\"empty_state_no_results_found_body\"}\n          components={[<a onClick={onClearAllFilters} />]}\n        />\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import { Button, PageSection, Stack, StackItem } from \"@patternfly/react-core\";\nimport type { TableViewProps } from \"@rhoas/app-services-ui-components\";\nimport {\n  FormatDate,\n  TableView,\n  Trans,\n  useTranslation,\n} from \"@rhoas/app-services-ui-components\";\nimport { parseISO } from \"date-fns\";\nimport { Link } from \"react-router-dom\";\nimport type { Kafka, SimplifiedStatus } from \"ui-models/src/models/kafka\";\nimport { DeletingStatuses } from \"ui-models/src/models/kafka\";\nimport { useKafkaLabels } from \"../../hooks\";\nimport { KafkaInstanceActions } from \"../KafkaInstanceActions\";\nimport { KafkaInstanceStatus } from \"../KafkaInstanceStatus\";\nimport type {\n  EmptyStateNoInstancesProps,\n  EmptyStateNoResultsProps,\n} from \"./components\";\nimport { EmptyStateNoInstances, EmptyStateNoResults } from \"./components\";\n\nconst Columns = [\n  \"name\",\n  \"owner\",\n  \"createdAt\",\n  \"provider\",\n  \"region\",\n  \"status\",\n] as const;\n\nexport type KafkaInstancesProps<T extends Kafka = Kafka> = {\n  instances: Array<T> | undefined | null;\n  getUrlForInstance: (row: T) => string;\n  names: string[];\n  owners: string[];\n  statuses: string[];\n  onCreate: () => void;\n  onSearchName: (value: string) => void;\n  onRemoveNameChip: (value: string) => void;\n  onRemoveNameChips: () => void;\n  onSearchOwner: (value: string) => void;\n  onRemoveOwnerChip: (value: string) => void;\n  onRemoveOwnerChips: () => void;\n  onSearchStatus: (value: SimplifiedStatus) => void;\n  onRemoveStatusChip: (value: SimplifiedStatus) => void;\n  onRemoveStatusChips: () => void;\n  onDetails: (row: T) => void;\n  onConnection: (row: T) => void;\n  canChangeOwner: (row: T) => boolean;\n  onChangeOwner: (row: T) => void;\n  canDelete: (row: T) => boolean;\n  onDelete: (row: T) => void;\n  onClickConnectionTabLink: (row: T) => void;\n  onClickSupportLink: () => void;\n  onInstanceLinkClick: (row: T) => void;\n  canHaveInstanceLink: (row: T) => boolean;\n  canOpenConnection: (row: T) => boolean;\n} & Pick<\n  TableViewProps<T, typeof Columns[number]>,\n  | \"itemCount\"\n  | \"page\"\n  | \"perPage\"\n  | \"onPageChange\"\n  | \"isRowSelected\"\n  | \"isColumnSortable\"\n  | \"onClearAllFilters\"\n> &\n  EmptyStateNoInstancesProps &\n  EmptyStateNoResultsProps;\n\nexport const KafkaInstances = <T extends Kafka>({\n  instances,\n  itemCount,\n  page,\n  perPage,\n  names,\n  owners,\n  statuses,\n  getUrlForInstance,\n  isRowSelected,\n  isColumnSortable,\n  onPageChange,\n  onDetails,\n  onConnection,\n  canChangeOwner,\n  onChangeOwner,\n  canDelete,\n  onDelete,\n  onCreate,\n  onQuickstartGuide,\n  onClickConnectionTabLink,\n  onClickSupportLink,\n  onInstanceLinkClick,\n  onSearchName,\n  onRemoveNameChip,\n  onRemoveNameChips,\n  onSearchOwner,\n  onRemoveOwnerChip,\n  onRemoveOwnerChips,\n  onSearchStatus,\n  onRemoveStatusChip,\n  onRemoveStatusChips,\n  onClearAllFilters,\n\n  canHaveInstanceLink,\n  canOpenConnection,\n}: KafkaInstancesProps<T>) => {\n  const { t } = useTranslation(\"kafka\");\n  const labels = useKafkaLabels();\n  const breakpoint = \"lg\";\n\n  const isFiltered =\n    names.length > 0 || owners.length > 0 || statuses.length > 0;\n\n  return (\n    <PageSection isFilled={true}>\n      <TableView\n        data={instances}\n        columns={Columns}\n        renderHeader={({ column, Th, key }) => (\n          <Th key={key}>{labels.fields[column]}</Th>\n        )}\n        renderCell={({ column, row, Td, key }) => {\n          const timeCreatedDate = parseISO(row.createdAt);\n          const instanceLinkEnable = canHaveInstanceLink(row);\n          return (\n            <Td key={key} dataLabel={labels.fields[column]}>\n              {(() => {\n                switch (column) {\n                  case \"name\":\n                    return (\n                      <Button\n                        variant=\"link\"\n                        component={(props) => (\n                          <Link to={getUrlForInstance(row)} {...props}>\n                            {row.name}\n                          </Link>\n                        )}\n                        isInline={true}\n                        isAriaDisabled={!instanceLinkEnable}\n                        isDisabled={!instanceLinkEnable}\n                        onClick={() => onInstanceLinkClick(row)}\n                      />\n                    );\n                  case \"provider\":\n                    return labels.providers[row.provider];\n                  case \"createdAt\":\n                    return (\n                      <Stack>\n                        <StackItem>\n                          <FormatDate\n                            date={timeCreatedDate}\n                            format={\"distanceToNowWithAgo\"}\n                          />\n                        </StackItem>\n                        {row.expiryDate && (\n                          <StackItem>\n                            <Trans\n                              i18nKey=\"will_expire_short\"\n                              ns={[\"kafka\"]}\n                              components={{\n                                time: (\n                                  <FormatDate\n                                    date={parseISO(row.expiryDate)}\n                                    format=\"expiration\"\n                                  />\n                                ),\n                              }}\n                            />\n                          </StackItem>\n                        )}\n                      </Stack>\n                    );\n                  case \"status\":\n                    return (\n                      <KafkaInstanceStatus\n                        status={row[\"status\"]}\n                        createdAt={timeCreatedDate}\n                        onClickConnectionTabLink={() =>\n                          onClickConnectionTabLink(row)\n                        }\n                        onClickSupportLink={onClickSupportLink}\n                      />\n                    );\n                  default:\n                    return row[column];\n                }\n              })()}\n            </Td>\n          );\n        }}\n        renderActions={({ row }) => {\n          const changeOwnerEnabled = canChangeOwner(row);\n          const deleteEnabled = canDelete(row);\n          const openConnectionEnabled = canOpenConnection(row);\n          return (\n            <KafkaInstanceActions\n              onDetails={() => onDetails(row)}\n              onConnection={() => onConnection(row)}\n              canOpenConnection={openConnectionEnabled}\n              canChangeOwner={changeOwnerEnabled}\n              onChangeOwner={() => onChangeOwner(row)}\n              canDelete={deleteEnabled}\n              onDelete={() => onDelete(row)}\n            />\n          );\n        }}\n        onRowClick={({ row }) => onDetails(row)}\n        isColumnSortable={isColumnSortable}\n        isRowSelected={isRowSelected}\n        isRowDeleted={({ row }) => DeletingStatuses.includes(row[\"status\"])}\n        toolbarBreakpoint={breakpoint}\n        filters={{\n          [labels.fields.name]: {\n            type: \"search\",\n            chips: names,\n            onSearch: onSearchName,\n            onRemoveChip: onRemoveNameChip,\n            onRemoveGroup: onRemoveNameChips,\n            validate: (value) => /^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(value),\n            errorMessage: t(\"kafka:input_field_invalid_message\"),\n          },\n          [labels.fields.owner]: {\n            type: \"search\",\n            chips: owners,\n            onSearch: onSearchOwner,\n            onRemoveChip: onRemoveOwnerChip,\n            onRemoveGroup: onRemoveOwnerChips,\n            validate: (value: string) => !/[\"$^<>|+%/;:,\\s*=~#()]/.test(value),\n            errorMessage: t(\"kafka:input_field_invalid_message\"),\n          },\n          [labels.fields.status]: {\n            type: \"checkbox\",\n            chips: statuses,\n            options: labels.statusesSimplified,\n            onToggle: onSearchStatus,\n            onRemoveChip: onRemoveStatusChip,\n            onRemoveGroup: onRemoveStatusChips,\n          },\n        }}\n        actions={[\n          {\n            label: t(\"create_instance\"),\n            onClick: onCreate,\n            isPrimary: true,\n          },\n        ]}\n        itemCount={itemCount}\n        page={page}\n        perPage={perPage}\n        onPageChange={onPageChange}\n        onClearAllFilters={onClearAllFilters}\n        ariaLabel={t(\"table.title\")}\n        isFiltered={isFiltered}\n        emptyStateNoData={\n          <EmptyStateNoInstances\n            onCreate={onCreate}\n            onQuickstartGuide={onQuickstartGuide}\n          />\n        }\n        emptyStateNoResults={\n          <EmptyStateNoResults onClearAllFilters={onClearAllFilters} />\n        }\n      />\n    </PageSection>\n  );\n};\n","import type { DatePickerProps, TimePickerProps } from \"@patternfly/react-core\";\nimport { DatePicker, InputGroup, TimePicker } from \"@patternfly/react-core\";\nimport { formatISO, parseISO, setHours, setMinutes } from \"date-fns\";\nimport { formatInTimeZone } from \"date-fns-tz\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useState } from \"react\";\nimport type { DateIsoString } from \"../../../../../ui-models/src/types\";\n\nexport type DateTimePickerProps = {\n  isDisabled: boolean;\n  value: DateIsoString | undefined;\n  onChange: (value: DateIsoString) => void;\n};\nexport const DateTimePicker: VoidFunctionComponent<DateTimePickerProps> = ({\n  isDisabled,\n  value,\n  onChange,\n}) => {\n  const [timeSelected, setIsTimeSelected] = useState(false);\n  const date = value ? parseISO(value) : undefined;\n\n  const onSelectCalendar: DatePickerProps[\"onChange\"] = (_, newDate) => {\n    if (newDate) {\n      onChange(formatISO(newDate) as DateIsoString);\n    }\n  };\n\n  const onSelectTime: TimePickerProps[\"onChange\"] = (\n    time,\n    hour,\n    minute,\n    __,\n    isValid\n  ) => {\n    if (\n      isValid &&\n      date &&\n      hour != undefined &&\n      hour > 0 &&\n      (time.includes(\"AM\") || time.includes(\"PM\"))\n    ) {\n      let newDate = date;\n      if (hour !== undefined) {\n        newDate = setHours(newDate, hour);\n      }\n      if (minute !== undefined) {\n        newDate = setMinutes(newDate, minute);\n      }\n\n      onChange(formatISO(newDate) as DateIsoString);\n      setIsTimeSelected(true);\n    }\n  };\n\n  return (\n    <InputGroup>\n      <DatePicker\n        isDisabled={isDisabled}\n        value={date ? formatInTimeZone(date, \"UTC\", \"yyyy-MM-dd\") : undefined}\n        onChange={onSelectCalendar}\n      />\n      <TimePicker\n        isDisabled={!date || isDisabled}\n        time={timeSelected ? date : undefined}\n        onChange={onSelectTime}\n      />\n    </InputGroup>\n  );\n};\n","import {\n  Dropdown,\n  DropdownItem,\n  DropdownPosition,\n  DropdownSeparator,\n  DropdownToggle,\n  InputGroup,\n  TextInput,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useState } from \"react\";\nimport type { DateIsoString } from \"../../../../../ui-models/src/types\";\nimport { DateTimePicker } from \"./DateTimePicker\";\n\ntype Category = \"offset\" | \"timestamp\" | \"epoch\" | \"latest\";\nexport type FilterGroupProps = {\n  isDisabled: boolean;\n  offset: number | undefined;\n  epoch: number | undefined;\n  timestamp: DateIsoString | undefined;\n  onOffsetChange: (value: number | undefined) => void;\n  onTimestampChange: (value: DateIsoString | undefined) => void;\n  onEpochChange: (value: number | undefined) => void;\n  onLatest: () => void;\n};\nexport const FilterGroup: VoidFunctionComponent<FilterGroupProps> = ({\n  isDisabled,\n  offset,\n  epoch,\n  timestamp,\n  onOffsetChange,\n  onTimestampChange,\n  onEpochChange,\n  onLatest,\n}) => {\n  const { t } = useTranslation(\"message-browser\");\n  const [currentCategory, setCurrentCategory] = useState<Category>(\"latest\");\n  const [isOpen, setIsOpen] = useState(false);\n  const labels: { [key in Category]: string } = {\n    offset: t(\"filter.offset\"),\n    timestamp: t(\"filter.timestamp\"),\n    epoch: t(\"filter.epoch\"),\n    latest: t(\"filter.latest\"),\n  };\n  return (\n    <ToolbarItem>\n      <InputGroup>\n        <Dropdown\n          data-testid={\"filter-group-dropdown\"}\n          toggle={\n            <DropdownToggle\n              onToggle={setIsOpen}\n              isDisabled={isDisabled}\n              data-testid={\"filter-group\"}\n            >\n              {labels[currentCategory]}\n            </DropdownToggle>\n          }\n          position={DropdownPosition.left}\n          isOpen={isOpen}\n          onSelect={() => setIsOpen(false)}\n          dropdownItems={[\n            <DropdownItem\n              key=\"offset\"\n              value=\"offset\"\n              autoFocus={currentCategory === \"offset\"}\n              onClick={() => setCurrentCategory(\"offset\")}\n            >\n              {labels[\"offset\"]}\n            </DropdownItem>,\n            <DropdownItem\n              key=\"timestamp\"\n              value=\"timestamp\"\n              autoFocus={currentCategory === \"timestamp\"}\n              onClick={() => setCurrentCategory(\"timestamp\")}\n            >\n              {labels[\"timestamp\"]}\n            </DropdownItem>,\n            <DropdownItem\n              key=\"epoch\"\n              value=\"epoch\"\n              autoFocus={currentCategory === \"epoch\"}\n              onClick={() => setCurrentCategory(\"epoch\")}\n            >\n              {labels[\"epoch\"]}\n            </DropdownItem>,\n            <DropdownSeparator key={\"divider\"} />,\n            <DropdownItem\n              key=\"latest\"\n              value=\"latest\"\n              autoFocus={currentCategory === \"latest\"}\n              onClick={() => {\n                setCurrentCategory(\"latest\");\n                onLatest();\n              }}\n            >\n              {labels[\"latest\"]}\n            </DropdownItem>,\n          ]}\n        />\n        {currentCategory === \"offset\" && (\n          <TextInput\n            isDisabled={isDisabled}\n            type={\"number\"}\n            aria-label={t(\"filter.offset_aria_label\")}\n            placeholder={t(\"filter.offset_placeholder\")}\n            onChange={(value) => {\n              if (value !== \"\") {\n                const newOffset = parseInt(value, 10);\n                if (Number.isInteger(newOffset)) {\n                  onOffsetChange(newOffset);\n                }\n              } else {\n                onOffsetChange(undefined);\n              }\n            }}\n            value={offset === undefined ? \"\" : offset}\n          />\n        )}\n        {currentCategory === \"timestamp\" && (\n          <DateTimePicker\n            isDisabled={isDisabled}\n            value={timestamp}\n            onChange={onTimestampChange}\n          />\n        )}\n        {currentCategory === \"epoch\" && (\n          <TextInput\n            isDisabled={isDisabled}\n            type={\"number\"}\n            aria-label={t(\"filter.epoch_aria_label\")}\n            placeholder={t(\"filter.epoch_placeholder\")}\n            className=\"pf-u-flex-basis-auto pf-u-flex-grow-0 pf-u-w-initial\"\n            size={t(\"filter.epoch_placeholder\").length}\n            onChange={(value) => {\n              if (value !== \"\" && Number(value) >= 0)\n                onEpochChange(Number(value));\n              else onEpochChange(undefined);\n            }}\n            value={epoch == undefined ? \"\" : epoch}\n          />\n        )}\n      </InputGroup>\n    </ToolbarItem>\n  );\n};\n","import {\n  InputGroup,\n  InputGroupText,\n  Select,\n  SelectOption,\n} from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport type LimitSelectorProps = {\n  value: number;\n  isDisabled: boolean;\n  onChange: (value: number) => void;\n};\nexport const LimitSelector: VoidFunctionComponent<LimitSelectorProps> = ({\n  value,\n  isDisabled,\n  onChange,\n}) => {\n  const { t } = useTranslation(\"message-browser\");\n  const [isOpen, setIsOpen] = useState(false);\n  const toggleOpen = (isOpen: boolean) => setIsOpen(isOpen);\n  const titleId = \"limit-selector\";\n\n  return (\n    <InputGroup>\n      <InputGroupText className=\"pf-c-content\">\n        {t(\"limit_label\")}\n      </InputGroupText>\n      <div>\n        <span id={titleId} hidden>\n          Select a state\n        </span>\n\n        <Select\n          aria-label={t(\"per_page_aria_label\")}\n          onToggle={toggleOpen}\n          selections={value !== undefined ? [t(\"limit\", { value })] : undefined}\n          isOpen={isOpen}\n          isDisabled={isDisabled}\n          onSelect={() => setIsOpen(false)}\n          data-testid={\"limit-selector\"}\n        >\n          {[10, 20, 50].map((value, idx) => (\n            <SelectOption\n              key={idx}\n              value={t(\"limit\", { value })}\n              onClick={() => onChange(value)}\n            />\n          ))}\n        </Select>\n      </div>\n    </InputGroup>\n  );\n};\n","import type { Message } from \"ui-models/src/models/message\";\n\nexport function isSameMessage(m1: Message, m2: Message) {\n  return JSON.stringify(m1) === JSON.stringify(m2);\n}\n\nexport function beautifyUnknownValue(value: string): string {\n  try {\n    return JSON.stringify(JSON.parse(value), null, 2);\n  } catch (e) {\n    // noop\n  }\n  return value;\n}\n\nexport function truncate(value: string, length: number): [string, boolean] {\n  const shouldTruncate = value.length > length;\n  return [\n    shouldTruncate ? `${value.substring(0, length)}...` : value,\n    shouldTruncate,\n  ];\n}\n","export enum RetentionTimeUnits {\n  MILLISECOND = \"milliseconds\",\n  SECOND = \"seconds\",\n  MINUTE = \"minutes\",\n  HOUR = \"hours\",\n  DAY = \"days\",\n  WEEK = \"weeks\",\n  CUSTOM = \"custom\",\n  UNLIMITED = \"unlimited\",\n}\n\nexport enum RetentionSizeUnits {\n  BYTE = \"bytes\",\n  KIBIBYTE = \"kibibytes\",\n  MEBIBYTE = \"mebibytes\",\n  GIBIBYTE = \"gibibytes\",\n  TEBIBYTE = \"tebibytes\",\n  CUSTOM = \"custom\",\n  UNLIMITED = \"unlimited\",\n}\n\nexport const unitsToBytes = {\n  [RetentionSizeUnits.BYTE]: BigInt(\"1\"),\n  [RetentionSizeUnits.KIBIBYTE]: BigInt(\"1024\"),\n  [RetentionSizeUnits.MEBIBYTE]: BigInt(\"1048576\"),\n  [RetentionSizeUnits.GIBIBYTE]: BigInt(\"1073741824\"),\n  [RetentionSizeUnits.TEBIBYTE]: BigInt(\"1099511600000\"),\n};\n\nexport const unitsToMilliSecond = {\n  [RetentionTimeUnits.MILLISECOND]: BigInt(\"1\"),\n  [RetentionTimeUnits.SECOND]: BigInt(\"1000\"),\n  [RetentionTimeUnits.MINUTE]: BigInt(\"60000\"),\n  [RetentionTimeUnits.HOUR]: BigInt(\"3600000\"),\n  [RetentionTimeUnits.DAY]: BigInt(\"86400000\"),\n};\n\ntype ConversionUnit = {\n  value: bigint;\n  unit: string;\n};\n\nexport const millisecondsToTime = (value: bigint): ConversionUnit => {\n  if (value) {\n    if (value % unitsToMilliSecond.days == BigInt(0))\n      return { value: value / unitsToMilliSecond.days, unit: \"days\" };\n    if (value % unitsToMilliSecond.hours == BigInt(0))\n      return { value: value / unitsToMilliSecond.hours, unit: \"hours\" };\n    if (value % unitsToMilliSecond.minutes == BigInt(0))\n      return { value: value / unitsToMilliSecond.minutes, unit: \"minutes\" };\n    if (value % unitsToMilliSecond.seconds == BigInt(0))\n      return { value: value / unitsToMilliSecond.seconds, unit: \"seconds\" };\n  }\n\n  return { value, unit: \"milliseconds\" };\n};\n\nexport const formattedRetentionTime = (time: bigint): string => {\n  const { unit, value } = millisecondsToTime(time);\n  return Number(value) === -1 ? \"Unlimited\" : `${time} ms (${value} ${unit})`;\n};\n\nexport const formattedRetentionSize = (size: bigint): string => {\n  const { unit, value } = bytesToMemorySize(size);\n  return Number(value) === -1\n    ? \"Unlimited\"\n    : `${size} bytes (${value} ${unit})`;\n};\n\nexport const bytesToMemorySize = (value: bigint): ConversionUnit => {\n  if (value) {\n    if (value % unitsToBytes.tebibytes == BigInt(0))\n      return { value: value / unitsToBytes.tebibytes, unit: \"tebibytes\" };\n    if (value % unitsToBytes.gibibytes == BigInt(0))\n      return { value: value / unitsToBytes.gibibytes, unit: \"gibibytes\" };\n    if (value % unitsToBytes.mebibytes == BigInt(0))\n      return { value: value / unitsToBytes.mebibytes, unit: \"mebibytes\" };\n    if (value % unitsToBytes.kibibytes == BigInt(0))\n      return { value: value / unitsToBytes.kibibytes, unit: \"kibibytes\" };\n  }\n\n  return { value, unit: \"bytes\" };\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport type NoDataCellProps = {\n  columnLabel: string;\n};\nexport const NoDataCell: VoidFunctionComponent<NoDataCellProps> = ({\n  columnLabel,\n}) => {\n  const { t } = useTranslation(\"common\");\n  return (\n    <span className=\"pf-u-color-400\">\n      {t(\"table_cell_no_data\", { column: columnLabel })}\n    </span>\n  );\n};\n","import {\n  ClipboardCopy,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  DrawerActions,\n  DrawerCloseButton,\n  DrawerContentBody,\n  DrawerHead,\n  DrawerPanelContent,\n  Flex,\n  FlexItem,\n  Tab,\n  Tabs,\n  TabTitleText,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { FormatDate, useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { parseISO } from \"date-fns\";\nimport type { VoidFunctionComponent } from \"react\";\nimport type { Message } from \"ui-models/src/models/message\";\nimport { beautifyUnknownValue } from \"../utils\";\nimport { NoDataCell } from \"./NoDataCell\";\n\nexport type MessageDetailsProps = {\n  onClose: () => void;\n  defaultTab: MessageDetailsBodyProps[\"defaultTab\"];\n  message: Message | undefined;\n};\nexport const MessageDetails: VoidFunctionComponent<MessageDetailsProps> = ({\n  onClose,\n  defaultTab,\n  message,\n}) => {\n  const { t } = useTranslation(\"message-browser\");\n\n  return (\n    <DrawerPanelContent isResizable={true} minSize={\"400px\"}>\n      <DrawerHead>\n        <TextContent>\n          <Text component={TextVariants.h2}>{t(\"message\")}</Text>\n        </TextContent>\n        <DrawerActions>\n          <DrawerCloseButton onClick={onClose} />\n        </DrawerActions>\n      </DrawerHead>\n      <DrawerContentBody>\n        {message && (\n          <MessageDetailsBody\n            defaultTab={defaultTab}\n            messageKey={message.key}\n            {...message}\n          />\n        )}\n      </DrawerContentBody>\n    </DrawerPanelContent>\n  );\n};\n\nexport type MessageDetailsBodyProps = {\n  defaultTab: \"value\" | \"headers\";\n  messageKey: Message[\"key\"];\n} & Omit<Message, \"key\">;\n\nexport const MessageDetailsBody: VoidFunctionComponent<\n  MessageDetailsBodyProps\n> = ({ defaultTab, ...message }) => {\n  const { t } = useTranslation(\"message-browser\");\n\n  return (\n    <Flex direction={{ default: \"column\" }} data-testid={\"message-details\"}>\n      <FlexItem>\n        <DescriptionList isHorizontal isCompact>\n          <DescriptionListGroup>\n            <DescriptionListTerm>{t(\"field.partition\")}</DescriptionListTerm>\n            <DescriptionListDescription>\n              {message.partition}\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>{t(\"field.offset\")}</DescriptionListTerm>\n            <DescriptionListDescription>\n              {message.offset}\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>{t(\"field.timestamp\")}</DescriptionListTerm>\n            <DescriptionListDescription>\n              {message.timestamp ? (\n                <FormatDate\n                  date={parseISO(message.timestamp)}\n                  format={\"longWithMilliseconds\"}\n                />\n              ) : (\n                <NoDataCell columnLabel={t(\"field.timestamp\")} />\n              )}\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>{t(\"field.epoch\")}</DescriptionListTerm>\n            <DescriptionListDescription>\n              {message.timestamp ? (\n                <FormatDate\n                  date={parseISO(message.timestamp)}\n                  format={\"epoch\"}\n                />\n              ) : (\n                <NoDataCell columnLabel={t(\"field.epoch\")} />\n              )}\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>{t(\"field.key\")}</DescriptionListTerm>\n            <DescriptionListDescription>\n              {message.messageKey ? (\n                message.messageKey\n              ) : (\n                <NoDataCell columnLabel={t(\"field.key\")} />\n              )}\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n        </DescriptionList>\n      </FlexItem>\n      <FlexItem>\n        {/* set key to be a random number to force redraw the tabs in order to change the active tab from the outside */}\n        <Tabs defaultActiveKey={defaultTab} key={Math.random()}>\n          <Tab\n            eventKey={\"value\"}\n            title={<TabTitleText>{t(\"field.value\")}</TabTitleText>}\n          >\n            <ClipboardCopy isCode={true} isExpanded={true} isReadOnly={true}>\n              {beautifyUnknownValue(message.value || \"\")}\n            </ClipboardCopy>\n          </Tab>\n          <Tab\n            eventKey={\"headers\"}\n            title={<TabTitleText>{t(\"field.headers\")}</TabTitleText>}\n          >\n            <ClipboardCopy isCode={true} isExpanded={true} isReadOnly={true}>\n              {beautifyUnknownValue(JSON.stringify(message.headers) || \"\")}\n            </ClipboardCopy>\n          </Tab>\n        </Tabs>\n      </FlexItem>\n    </Flex>\n  );\n};\n","import {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { CubesIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const NoDataEmptyState: VoidFunctionComponent<{\n  onRefresh: () => void;\n}> = ({ onRefresh }) => {\n  const { t } = useTranslation(\"message-browser\");\n  return (\n    <EmptyState variant={EmptyStateVariant.large}>\n      <EmptyStateIcon icon={CubesIcon} />\n      <Title headingLevel=\"h4\" size=\"lg\">\n        {t(\"no_data_title\")}\n      </Title>\n      <EmptyStateBody>{t(\"no_data_body\")}</EmptyStateBody>\n      <Button onClick={onRefresh}>{t(\"no_data_refresh\")}</Button>\n    </EmptyState>\n  );\n};\n","import {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { SearchIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const NoResultsEmptyState: VoidFunctionComponent<{\n  onReset: () => void;\n}> = ({ onReset }) => {\n  const { t } = useTranslation(\"message-browser\");\n  return (\n    <EmptyState variant={EmptyStateVariant.large}>\n      <EmptyStateIcon icon={SearchIcon} />\n      <Title headingLevel=\"h4\" size=\"lg\">\n        {t(\"no_results_title\")}\n      </Title>\n      <EmptyStateBody>{t(\"no_results_body\")}</EmptyStateBody>\n      <Button variant={\"link\"} onClick={onReset}>\n        {t(\"no_results_reset\")}\n      </Button>\n    </EmptyState>\n  );\n};\n","import { Text, TextContent } from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const OffsetRange: VoidFunctionComponent<{\n  min: number;\n  max: number;\n}> = ({ min, max }) => {\n  const { t } = useTranslation(\"message-browser\");\n  return (\n    <TextContent className=\"pf-u-font-size\">\n      <Text>\n        {t(\"offset\")} <span className=\"custom-text\">{min}</span> -{\" \"}\n        <span className=\"custom-text\">{max}</span>\n      </Text>\n    </TextContent>\n  );\n};\n","import type { SelectProps } from \"@patternfly/react-core\";\nimport {\n  InputGroup,\n  InputGroupText,\n  InputGroupTextVariant,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useCallback, useMemo, useState } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nconst MAX_OPTIONS = 20;\n\nexport type PartitionSelectorProps = {\n  value: number | undefined;\n  partitions: number | undefined;\n  isDisabled: boolean;\n  onChange: (value: number | undefined) => void;\n};\nexport const PartitionSelector: VoidFunctionComponent<\n  PartitionSelectorProps\n> = ({ value, partitions, isDisabled, onChange }) => {\n  const { t } = useTranslation(\"message-browser\");\n  const [isOpen, setIsOpen] = useState(false);\n  const toggleOpen = (isOpen: boolean) => setIsOpen(isOpen);\n  const titleId = \"partition-selector\";\n\n  const handleChange = useCallback(\n    (value: string) => {\n      if (value !== \"\") {\n        const valueAsNum = parseInt(value, 10);\n        if (Number.isInteger(valueAsNum)) {\n          onChange(valueAsNum);\n        }\n      }\n      setIsOpen(false);\n    },\n    [onChange]\n  );\n\n  const allPartitions = useMemo(() => {\n    return new Array(partitions).fill(0).map((_, index) => index.toString());\n  }, [partitions]);\n\n  const makeOptions = useCallback(\n    (values: string[]) => {\n      const options = values\n        .slice(0, MAX_OPTIONS)\n        .map((v) => <SelectOption key={v} value={v} />);\n      const hiddenOptionsCount = values.length - options.length;\n      return hiddenOptionsCount\n        ? [\n            ...options,\n            <SelectOption\n              key={\"more-info\"}\n              isDisabled={true}\n              description={t(\"partitions_hidden\", {\n                count: hiddenOptionsCount,\n              })}\n            />,\n          ]\n        : options;\n    },\n    [t]\n  );\n\n  const options = useMemo(() => {\n    return makeOptions(allPartitions);\n  }, [allPartitions, makeOptions]);\n\n  const handleFilter: SelectProps[\"onFilter\"] = useCallback(\n    (_, filter: string) => {\n      if (filter !== \"\") {\n        return makeOptions(\n          allPartitions.filter((partition) => partition.includes(filter))\n        );\n      }\n      return options;\n    },\n    [allPartitions, makeOptions, options]\n  );\n\n  return (\n    <InputGroup>\n      <InputGroupText className=\"pf-c-content\">\n        {t(\"field.partition\")}\n      </InputGroupText>\n      <div>\n        <span id={titleId} hidden>\n          {t(\"select_partition_aria_label\")}\n        </span>\n        <Select\n          variant={SelectVariant.typeahead}\n          typeAheadAriaLabel={t(\"select_partition_typeahead\")}\n          onToggle={toggleOpen}\n          onSelect={(_, value) => handleChange(value as string)}\n          selections={value !== undefined ? [`${value}`] : undefined}\n          isOpen={isOpen}\n          aria-labelledby={titleId}\n          maxHeight={200}\n          width={150}\n          onFilter={handleFilter}\n          isInputValuePersisted={false}\n          isDisabled={isDisabled}\n          placeholderText={t(\"partition_placeholder\")}\n          onClear={() => onChange(undefined)}\n          data-testid={\"partition-selector\"}\n        >\n          {options}\n        </Select>\n      </div>\n      <InputGroupText\n        id={`${titleId}-input`}\n        variant={InputGroupTextVariant.plain}\n        className=\"pf-c-content\"\n      >\n        {t(\"select_partition_of_count\", { partitions })}\n      </InputGroupText>\n    </InputGroup>\n  );\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { truncate } from \"../utils\";\nimport { Flex, FlexItem } from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nconst PREVIEW_LENGTH = 170;\n\nexport type UnknownValuePreviewProps = {\n  value: string;\n  truncateAt?: number;\n  onClick?: () => void;\n};\nexport const UnknownValuePreview: VoidFunctionComponent<\n  UnknownValuePreviewProps\n> = ({ value, truncateAt = PREVIEW_LENGTH, onClick }) => {\n  const { t } = useTranslation(\"message-browser\");\n  const [preview, truncated] = truncate(value, truncateAt);\n  return (\n    <Flex\n      direction={{ default: \"column\" }}\n      spaceItems={{ default: \"spaceItemsXs\" }}\n    >\n      <FlexItem>{preview}</FlexItem>\n      {truncated && (\n        <FlexItem>\n          <a\n            onClick={\n              onClick\n                ? (e) => {\n                    e.stopPropagation();\n                    onClick();\n                  }\n                : undefined\n            }\n          >\n            {t(\"show_more\")}\n          </a>\n        </FlexItem>\n      )}\n    </Flex>\n  );\n};\n","import type { Message } from \"ui-models/src/models/message\";\nimport { assign, createMachine } from \"xstate\";\nimport type { DateIsoString } from \"../../../../ui-models/src/types\";\nimport { isSameMessage } from \"./utils\";\n\nexport type MessageApiResponse = {\n  lastUpdated: Date;\n  messages: Message[];\n  partitions: number;\n  offsetMin: number;\n  offsetMax: number;\n\n  filter: {\n    partition: number | undefined;\n    offset: number | undefined;\n    timestamp: DateIsoString | undefined;\n    limit: number | undefined;\n    epoch: number | undefined;\n  };\n};\n\nexport const MessageBrowserMachine = createMachine(\n  {\n    id: \"message-browser\",\n    predictableActionArguments: true,\n    tsTypes: {} as import(\"./MessageBrowserMachine.typegen\").Typegen0,\n    schema: {\n      context: {} as {\n        // response\n        response: MessageApiResponse | undefined;\n\n        limit: number;\n        // optional input\n        partition: number | undefined;\n        offset: number | undefined;\n        epoch: number | undefined;\n        timestamp: DateIsoString | undefined;\n        selectedMessage: Message | undefined;\n      },\n      events: {} as\n        | {\n            type: \"fetchSuccess\";\n            messages: Message[];\n            partitions: number;\n            offsetMin: number;\n            offsetMax: number;\n          }\n        | { type: \"fetchFail\" }\n        | { type: \"refresh\" }\n        | { type: \"setPartition\"; value: number | undefined }\n        | { type: \"setOffset\"; value: number | undefined }\n        | { type: \"setTimestamp\"; value: DateIsoString | undefined }\n        | { type: \"setEpoch\"; value: number | undefined }\n        | { type: \"setLatest\" }\n        | { type: \"setLimit\"; value: number }\n        | { type: \"selectMessage\"; message: Message }\n        | { type: \"deselectMessage\" },\n    },\n    initial: \"initialLoading\",\n    context: {\n      // response\n      response: undefined,\n\n      limit: 10,\n      // optional input\n      partition: undefined,\n      offset: undefined,\n      timestamp: undefined,\n      selectedMessage: undefined,\n      epoch: undefined,\n    },\n    states: {\n      initialLoading: {\n        invoke: {\n          src: \"api\",\n        },\n        on: {\n          fetchSuccess: {\n            actions: \"setMessages\",\n            target: \"verifyMessages\",\n          },\n          fetchFail: \"error\",\n        },\n      },\n      verifyMessages: {\n        always: [{ cond: \"noMessages\", target: \"noData\" }, { target: \"ready\" }],\n      },\n      noData: {\n        on: {\n          refresh: \"initialLoading\",\n        },\n      },\n      error: {\n        on: {\n          refresh: \"initialLoading\",\n        },\n      },\n      ready: {\n        initial: \"pristine\",\n        states: {\n          pristine: {},\n          dirty: {\n            tags: \"dirty\",\n          },\n          shouldSearch: {\n            always: [\n              {\n                cond: \"areFiltersChanged\",\n                target: \"dirty\",\n              },\n              { target: \"pristine\" },\n            ],\n          },\n        },\n        always: [\n          {\n            cond: \"selectedMessageNotAvailable\",\n            actions: \"deselectMessage\",\n          },\n        ],\n        on: {\n          refresh: \"refreshing\",\n          setPartition: {\n            target: \".shouldSearch\",\n            actions: \"setPartition\",\n          },\n          setEpoch: {\n            actions: \"setEpoch\",\n            target: \".shouldSearch\",\n          },\n          setTimestamp: {\n            target: \".shouldSearch\",\n            actions: \"setTimestamp\",\n          },\n          setOffset: {\n            target: \".shouldSearch\",\n            actions: \"setOffset\",\n          },\n          setLatest: {\n            target: \".shouldSearch\",\n            actions: \"setLatest\",\n          },\n          setLimit: {\n            target: \".shouldSearch\",\n            actions: \"setLimit\",\n          },\n          selectMessage: {\n            actions: \"selectMessage\",\n          },\n          deselectMessage: {\n            actions: \"deselectMessage\",\n          },\n        },\n      },\n      refreshing: {\n        invoke: {\n          src: \"api\",\n        },\n        on: {\n          fetchSuccess: {\n            actions: \"setMessages\",\n            target: \"ready\",\n          },\n          fetchFail: {\n            target: \"ready\",\n          },\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      setMessages: assign(\n        (context, { messages, partitions, offsetMin, offsetMax }) => ({\n          response: {\n            lastUpdated: new Date(),\n            messages,\n            partitions,\n            offsetMin,\n            offsetMax,\n            filter: {\n              partition: context.partition,\n              timestamp: context.timestamp,\n              offset: context.offset,\n              limit: context.limit,\n              epoch: context.epoch,\n            },\n          },\n        })\n      ),\n      setPartition: assign((_, { value }) => ({ partition: value })),\n      setEpoch: assign((_, { value }) => ({\n        epoch: value,\n      })),\n      setTimestamp: assign((_, { value }) => ({\n        timestamp: value,\n      })),\n      setOffset: assign((_, { value }) => ({\n        offset: value,\n      })),\n      setLimit: assign((_, { value }) => ({\n        limit: value,\n      })),\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      setLatest: assign((_) => ({\n        timestamp: undefined,\n        offset: undefined,\n      })),\n      selectMessage: assign((_, { message }) => ({ selectedMessage: message })),\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      deselectMessage: assign((_) => ({ selectedMessage: undefined })),\n    },\n    guards: {\n      noMessages: ({ response }) =>\n        response === undefined || response.messages.length === 0,\n      selectedMessageNotAvailable: ({ response, selectedMessage }) =>\n        selectedMessage !== undefined &&\n        response?.messages.find((m) => isSameMessage(m, selectedMessage)) ===\n          undefined,\n      areFiltersChanged: (context) =>\n        context.response?.filter.limit !== context.limit ||\n        context.response?.filter.offset !== context.offset ||\n        context.response?.filter.partition !== context.partition ||\n        context.response?.filter.timestamp !== context.timestamp ||\n        context.response?.filter.epoch !== context.epoch,\n    },\n  }\n);\n","import {\n  Button,\n  Drawer,\n  DrawerContent,\n  PageSection,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n} from \"@patternfly/react-core\";\nimport { FilterIcon, SearchIcon } from \"@patternfly/react-icons\";\nimport type { BaseCellProps } from \"@patternfly/react-table\";\nimport {\n  InnerScrollContainer,\n  OuterScrollContainer,\n} from \"@patternfly/react-table\";\nimport {\n  FormatDate,\n  Loading,\n  RefreshButton,\n  ResponsiveTable,\n  useTranslation,\n} from \"@rhoas/app-services-ui-components\";\nimport { useMachine } from \"@xstate/react\";\nimport { parseISO } from \"date-fns\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useMemo, useState } from \"react\";\nimport type { Message } from \"ui-models/src/models/message\";\nimport type { DateIsoString } from \"../../../../ui-models/src/types\";\nimport type { MessageDetailsProps } from \"./components\";\nimport {\n  FilterGroup,\n  LimitSelector,\n  MessageDetails,\n  NoDataCell,\n  NoDataEmptyState,\n  NoResultsEmptyState,\n  OffsetRange,\n  PartitionSelector,\n  UnknownValuePreview,\n} from \"./components\";\nimport \"./KafkaMessageBrowser.css\";\nimport type { MessageApiResponse } from \"./MessageBrowserMachine\";\nimport { MessageBrowserMachine } from \"./MessageBrowserMachine\";\nimport { beautifyUnknownValue, isSameMessage } from \"./utils\";\n\nconst columns = [\n  \"partition\",\n  \"offset\",\n  \"timestamp\",\n  \"key\",\n  \"headers\",\n  \"value\",\n] as const;\n\nconst columnWidths: BaseCellProps[\"width\"][] = [10, 10, 15, 10, undefined, 30];\n\nexport type KafkaMessageBrowserProps = {\n  getMessages: (props: {\n    partition?: number;\n    offset?: number;\n    timestamp?: DateIsoString;\n    limit: number;\n  }) => Promise<{ messages: Message[]; partitions: number }>;\n};\nexport const KafkaMessageBrowser: VoidFunctionComponent<\n  KafkaMessageBrowserProps\n> = ({ getMessages }) => {\n  const [state, send] = useMachine(() => MessageBrowserMachine, {\n    devTools: true,\n    services: {\n      api: (context) => {\n        return (send) => {\n          getMessages({\n            partition: context.partition,\n            offset: context.offset,\n            timestamp: context.timestamp,\n            limit: context.limit,\n          })\n            .then(({ messages, partitions }) =>\n              send({\n                type: \"fetchSuccess\",\n                messages,\n                partitions,\n                offsetMin: context.offset || 0,\n                offsetMax: messages.reduce(\n                  (max, m) => Math.max(max, m.offset || 0),\n                  0\n                ),\n              })\n            )\n            .catch(() => send({ type: \"fetchFail\" }));\n        };\n      },\n    },\n  });\n\n  return (\n    <KafkaMessageBrowserConnected\n      isFirstLoad={state.matches(\"initialLoading\")}\n      isNoData={state.matches(\"noData\") || state.matches(\"error\")}\n      isRefreshing={state.matches(\"refreshing\")}\n      requiresSearch={state.hasTag(\"dirty\")}\n      selectedMessage={state.context.selectedMessage}\n      response={state.context.response}\n      lastUpdated={state.context.response?.lastUpdated}\n      partition={state.context.partition}\n      limit={state.context.limit}\n      filterOffset={state.context.offset}\n      filterEpoch={state.context.epoch}\n      filterTimestamp={state.context.timestamp}\n      setPartition={(value: number | undefined) =>\n        send({ type: \"setPartition\", value })\n      }\n      setOffset={(value: number | undefined) =>\n        send({ type: \"setOffset\", value })\n      }\n      setTimestamp={(value: DateIsoString | undefined) =>\n        send({ type: \"setTimestamp\", value })\n      }\n      setEpoch={(value: number | undefined) =>\n        send({ type: \"setEpoch\", value })\n      }\n      setLatest={() => send({ type: \"setLatest\" })}\n      setLimit={(value: number) => send({ type: \"setLimit\", value })}\n      refresh={() => send({ type: \"refresh\" })}\n      selectMessage={(message: Message) =>\n        send({ type: \"selectMessage\", message })\n      }\n      deselectMessage={() => send({ type: \"deselectMessage\" })}\n    />\n  );\n};\n\nexport type KafkaMessageBrowserConnectedProps = {\n  isFirstLoad: boolean;\n  isNoData: boolean;\n  isRefreshing: boolean;\n  requiresSearch: boolean;\n  selectedMessage: Message | undefined;\n  lastUpdated: Date | undefined;\n  response: MessageApiResponse | undefined;\n  partition: number | undefined;\n  limit: number;\n  filterOffset: number | undefined;\n  filterEpoch: number | undefined;\n  filterTimestamp: DateIsoString | undefined;\n  setPartition: (value: number | undefined) => void;\n  setOffset: (value: number | undefined) => void;\n  setTimestamp: (value: DateIsoString | undefined) => void;\n  setEpoch: (value: number | undefined) => void;\n  setLatest: () => void;\n  setLimit: (value: number) => void;\n  refresh: () => void;\n  selectMessage: (message: Message) => void;\n  deselectMessage: () => void;\n};\nexport const KafkaMessageBrowserConnected: VoidFunctionComponent<\n  KafkaMessageBrowserConnectedProps\n> = ({\n  isFirstLoad,\n  isNoData,\n  isRefreshing,\n  requiresSearch,\n  selectedMessage,\n  response,\n  partition,\n  limit,\n  filterOffset,\n  filterEpoch,\n  filterTimestamp,\n  setPartition,\n  setOffset,\n  setTimestamp,\n  setEpoch,\n  setLatest,\n  setLimit,\n  refresh,\n  selectMessage,\n  deselectMessage,\n}) => {\n  const { t } = useTranslation(\"message-browser\");\n  const [defaultTab, setDefaultTab] =\n    useState<MessageDetailsProps[\"defaultTab\"]>(\"value\");\n\n  const columnLabels: { [key in typeof columns[number]]: string } = useMemo(\n    () =>\n      ({\n        partition: t(\"field.partition\"),\n        offset: t(\"field.offset\"),\n        timestamp: t(\"field.timestamp\"),\n        key: t(\"field.key\"),\n        value: t(\"field.value\"),\n        headers: t(\"field.headers\"),\n      } as const),\n    [t]\n  );\n\n  switch (true) {\n    case isFirstLoad:\n      return <Loading />;\n    case isNoData:\n      return <NoDataEmptyState onRefresh={refresh} />;\n    default:\n      return (\n        <PageSection\n          isFilled={true}\n          hasOverflowScroll={true}\n          aria-label={\"TODO\"}\n        >\n          <Drawer isInline={true} isExpanded={selectedMessage !== undefined}>\n            <DrawerContent\n              panelContent={\n                <MessageDetails\n                  message={selectedMessage}\n                  defaultTab={defaultTab}\n                  onClose={deselectMessage}\n                />\n              }\n            >\n              <OuterScrollContainer>\n                <Toolbar\n                  className={\"mas-KafkaMessageBrowser-Toolbar\"}\n                  data-testid={\"message-browser-toolbar\"}\n                >\n                  <ToolbarContent>\n                    <ToolbarToggleGroup\n                      toggleIcon={<FilterIcon />}\n                      breakpoint=\"2xl\"\n                    >\n                      <ToolbarGroup variant=\"filter-group\">\n                        <ToolbarItem>\n                          <PartitionSelector\n                            value={partition}\n                            partitions={response?.partitions || 0}\n                            onChange={setPartition}\n                            isDisabled={isRefreshing}\n                          />\n                        </ToolbarItem>\n                      </ToolbarGroup>\n                      <ToolbarGroup variant=\"filter-group\">\n                        <FilterGroup\n                          isDisabled={isRefreshing}\n                          offset={filterOffset}\n                          epoch={filterEpoch}\n                          timestamp={filterTimestamp}\n                          onOffsetChange={setOffset}\n                          onTimestampChange={setTimestamp}\n                          onEpochChange={setEpoch}\n                          onLatest={setLatest}\n                        />\n                      </ToolbarGroup>\n                      <ToolbarGroup>\n                        <LimitSelector\n                          value={limit}\n                          onChange={setLimit}\n                          isDisabled={isRefreshing}\n                        />\n                      </ToolbarGroup>\n                    </ToolbarToggleGroup>\n                    <ToolbarGroup>\n                      <ToolbarItem>\n                        <Button\n                          variant={\"plain\"}\n                          isDisabled={!requiresSearch || isRefreshing}\n                          aria-label={t(\"common:search_button_label\")}\n                          onClick={refresh}\n                        >\n                          <SearchIcon />\n                        </Button>\n                      </ToolbarItem>\n                      <ToolbarItem>\n                        <RefreshButton\n                          onClick={refresh}\n                          isRefreshing={isRefreshing}\n                          isDisabled={requiresSearch}\n                        />\n                      </ToolbarItem>\n                    </ToolbarGroup>\n                    <ToolbarGroup alignment={{ default: \"alignRight\" }}>\n                      {response?.filter.partition !== undefined &&\n                        response?.messages.length > 0 && (\n                          <OffsetRange\n                            min={response?.offsetMin || 0}\n                            max={response?.offsetMax || 0}\n                          />\n                        )}\n                    </ToolbarGroup>\n                  </ToolbarContent>\n                </Toolbar>\n                <InnerScrollContainer>\n                  <ResponsiveTable\n                    ariaLabel={t(\"table_aria_label\")}\n                    columns={columns}\n                    data={response?.messages}\n                    expectedLength={response?.messages?.length}\n                    renderHeader={({ column, Th, key }) => (\n                      <Th key={key}>{columnLabels[column]}</Th>\n                    )}\n                    renderCell={({ column, row, colIndex, Td, key }) => (\n                      <Td\n                        key={key}\n                        dataLabel={columnLabels[column]}\n                        width={columnWidths[colIndex]}\n                      >\n                        {(() => {\n                          const empty = (\n                            <NoDataCell columnLabel={columnLabels[column]} />\n                          );\n                          switch (column) {\n                            case \"partition\":\n                              return row.partition;\n                            case \"offset\":\n                              return row.offset;\n                            case \"timestamp\":\n                              return row.timestamp ? (\n                                <FormatDate\n                                  date={parseISO(row.timestamp)}\n                                  format={\"longWithMilliseconds\"}\n                                />\n                              ) : (\n                                empty\n                              );\n                            case \"key\":\n                              return row.key ? (\n                                <UnknownValuePreview\n                                  value={row.key}\n                                  truncateAt={40}\n                                />\n                              ) : (\n                                empty\n                              );\n                            case \"headers\":\n                              return Object.keys(row.headers).length > 0 ? (\n                                <UnknownValuePreview\n                                  value={beautifyUnknownValue(\n                                    JSON.stringify(row.headers)\n                                  )}\n                                  onClick={() => {\n                                    setDefaultTab(\"headers\");\n                                    selectMessage(row);\n                                  }}\n                                />\n                              ) : (\n                                empty\n                              );\n                            case \"value\":\n                              return row.value ? (\n                                <UnknownValuePreview\n                                  value={beautifyUnknownValue(row.value || \"\")}\n                                  onClick={() => {\n                                    setDefaultTab(\"value\");\n                                    selectMessage(row);\n                                  }}\n                                />\n                              ) : (\n                                empty\n                              );\n                          }\n                        })()}\n                      </Td>\n                    )}\n                    isRowSelected={({ row }) =>\n                      selectedMessage !== undefined &&\n                      isSameMessage(row, selectedMessage)\n                    }\n                    onRowClick={({ row }) => {\n                      setDefaultTab(\"value\");\n                      selectMessage(row);\n                    }}\n                  >\n                    <NoResultsEmptyState\n                      onReset={() => {\n                        setLatest();\n                        setPartition(undefined);\n                        refresh();\n                      }}\n                    />\n                  </ResponsiveTable>\n                </InnerScrollContainer>\n              </OuterScrollContainer>\n            </DrawerContent>\n          </Drawer>\n        </PageSection>\n      );\n  }\n};\n","import {\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface CapacityTable {\n  name: string;\n  firstStreamingUnit: string;\n  secondStreamingUnit: string;\n}\n\nexport const KafkaInstanceCapacityTable: FunctionComponent = () => {\n  const { t } = useTranslation(\"kafkaoverview-v2\");\n\n  const capacityTable: CapacityTable[] = [\n    {\n      name: \"Ingress (MB/second)\",\n      firstStreamingUnit: \"up to 50\",\n      secondStreamingUnit: \"up to 100\",\n    },\n    {\n      name: \"Egress (MB/second)\",\n      firstStreamingUnit: \"up to 100\",\n      secondStreamingUnit: \"up to 200\",\n    },\n    {\n      name: \"Storage* (GB)\",\n      firstStreamingUnit: \"up to 1000\",\n      secondStreamingUnit: \"up to 2000\",\n    },\n    {\n      name: \"Topic partitions\",\n      firstStreamingUnit: \"up to 1500\",\n      secondStreamingUnit: \"up to 3000\",\n    },\n    {\n      name: \"Client connections\",\n      firstStreamingUnit: \"up to 3000\",\n      secondStreamingUnit: \"up to 6000\",\n    },\n    {\n      name: \"Connection rate (connections/second)\",\n      firstStreamingUnit: \"up to 100\",\n      secondStreamingUnit: \"up to 200\",\n    },\n    {\n      name: \"Message size (MB)\",\n      firstStreamingUnit: \"up to 1\",\n      secondStreamingUnit: \"up to 1\",\n    },\n  ];\n\n  const columnNames = {\n    name: \"\",\n    firstStreamingUnit: t(\"firstStreamingUnit\"),\n    secondStreamingUnit: t(\"secondStreamingUnit\"),\n  };\n\n  return (\n    <TableComposable>\n      <Thead>\n        <Tr>\n          <Th>{columnNames.name}</Th>\n          <Th>{columnNames.firstStreamingUnit}</Th>\n          <Th>{columnNames.secondStreamingUnit}</Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        {capacityTable.map((table) => {\n          return (\n            <Tr key={table.name}>\n              <Td dataLabel={columnNames.name}>{table.name}</Td>\n              <Td dataLabel={columnNames.firstStreamingUnit}>\n                {table.firstStreamingUnit}\n              </Td>\n              <Td dataLabel={columnNames.secondStreamingUnit}>\n                {table.secondStreamingUnit}\n              </Td>\n            </Tr>\n          );\n        })}\n      </Tbody>\n    </TableComposable>\n  );\n};\n","import {\n  Bullseye,\n  Card,\n  PageSection,\n  PageSectionVariants,\n  Stack,\n  StackItem,\n  Text,\n  TextVariants,\n  Title,\n} from \"@patternfly/react-core\";\nimport classNames from \"classnames\";\nimport type {\n  CSSProperties,\n  FunctionComponent,\n  ReactNode,\n  VoidFunctionComponent,\n} from \"react\";\nimport \"./MarketingPage.css\";\n\nexport type MarketingPageHeroProps = {\n  title: string;\n  tagLine: string;\n  description: string;\n  description2?: string;\n  heroImage: string;\n  heroImageSize: number;\n  heroImageCanRepeat?: boolean;\n  heroImagePositionY?: number;\n  cta?: ReactNode;\n  variant?: \"light\" | \"dark\";\n};\n\nexport const MarketingPageHero: VoidFunctionComponent<\n  MarketingPageHeroProps\n> = ({\n  title,\n  tagLine,\n  description,\n  description2,\n  heroImage,\n  heroImageSize,\n  heroImageCanRepeat = true,\n  heroImagePositionY = 0,\n  cta,\n  variant = \"light\",\n}) => {\n  const style = {\n    \"--appsrv-marketing--banner--before--BackgroundImage\": `url(${heroImage})`,\n    \"--appsrv-marketing--banner--before--BackgroundSize\": `${heroImageSize}px`,\n    \"--appsrv-marketing--banner--before--BackgroundRepeat\": heroImageCanRepeat\n      ? \"repeat\"\n      : \"no-repeat\",\n    \"--appsrv-marketing--banner--before--BackgroundPositionY\": `${heroImagePositionY}px`,\n  } as CSSProperties;\n  return (\n    <PageSection\n      className={classNames(\"appsrv-marketing--banner\", {\n        \"pf-u-background-color-dark-100\": variant === \"dark\",\n        \"pf-u-background-color-100\": variant === \"light\",\n      })}\n      variant={\n        variant === \"dark\"\n          ? PageSectionVariants.dark\n          : PageSectionVariants.light\n      }\n      style={style}\n    >\n      <Stack hasGutter>\n        <Title headingLevel=\"h1\" size=\"2xl\">\n          {title}\n        </Title>\n        <Text\n          className={`appsrv-marketing--banner__tagline ${\n            variant === \"dark\" ? \"\" : \"pf-u-color-200\"\n          }`}\n        >\n          {tagLine}\n        </Text>\n        <Text component={TextVariants.p}>{description}</Text>\n        {description2 && (\n          <Text component={TextVariants.p} className=\"pf-u-mt-md\">\n            {description2}\n          </Text>\n        )}\n        {cta && <StackItem>{cta}</StackItem>}\n      </Stack>\n    </PageSection>\n  );\n};\n\nexport const MarketingPageBanner: FunctionComponent = ({ children }) => {\n  return (\n    <PageSection\n      variant={PageSectionVariants.light}\n      className=\"appsrv-marketing--page-section--marketing pf-u-background-color-100\"\n    >\n      <Bullseye>\n        <Text\n          component={TextVariants.p}\n          className=\"appsrv-marketing--banner--text-only\"\n        >\n          {children}\n        </Text>\n      </Bullseye>\n    </PageSection>\n  );\n};\n\nexport type MarketingPageSectionProps = {\n  className?: string;\n};\n\nexport const MarketingPageSection: FunctionComponent<\n  MarketingPageSectionProps & {\n    variant?: \"dark\" | \"light\" | \"default\";\n  }\n> = ({\n  className = \"appsrv-marketing--page-section--marketing\",\n  variant = \"default\",\n  children,\n}) => (\n  <PageSection\n    isWidthLimited\n    className={classNames(className, {\n      \"pf-u-background-color-dark-100\": variant === \"dark\",\n      \"pf-u-background-color-100\": variant === \"light\",\n    })}\n    variant={\n      variant === \"dark\"\n        ? PageSectionVariants.dark\n        : variant === \"light\"\n        ? PageSectionVariants.light\n        : PageSectionVariants.default\n    }\n  >\n    {children}\n  </PageSection>\n);\n\nexport const MarketingPageVideoCard: VoidFunctionComponent<{\n  src: string;\n  title: string;\n}> = ({ src, title }) => (\n  <Card className=\"appsrv-marketing--video\">\n    <div className=\"appsrv-marketing--video__wrapper\">\n      <iframe\n        src={src}\n        title={title}\n        frameBorder=\"0\"\n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n        allowFullScreen\n      ></iframe>\n    </div>\n  </Card>\n);\n","import {\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n  CardHeaderMain,\n  CardTitle,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Divider,\n  Flex,\n  FlexItem,\n  Grid,\n  Split,\n  SplitItem,\n  Stack,\n  Text,\n  TextContent,\n  TextVariants,\n  Title,\n} from \"@patternfly/react-core\";\nimport {\n  AppSpeedKeyArt,\n  ExternalLink,\n} from \"@rhoas/app-services-ui-components\";\nimport type { FunctionComponent } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { KafkaInstanceCapacityTable } from \"./KafkaInstanceCapacityTable\";\nimport { LogoAWS, LogoAzure, LogoGCP } from \"./Logos/images\";\nimport { MarketingPageHero, MarketingPageSection } from \"./MarketingPage\";\n\nexport const KafkaPageV3: FunctionComponent = () => {\n  const { t } = useTranslation([\"kafkaoverview-v3\"]);\n  return (\n    <>\n      <MarketingPageHero\n        title={t(\"heroTitle\")}\n        tagLine={t(\"heroTagline\")}\n        description={t(\"heroDescription\")}\n        heroImage={AppSpeedKeyArt}\n        heroImageSize={478}\n        heroImageCanRepeat={false}\n        heroImagePositionY={-99}\n      />\n      <MarketingPageSection>\n        <Grid hasGutter lg={6}>\n          <Card\n            ouiaId=\"card-overview-purchase-now\"\n            aria-label={t(\"kafkaoverview:purchaseCardTitle\")}\n          >\n            <CardHeader>\n              <CardHeaderMain>\n                <CardTitle>\n                  <Title headingLevel=\"h2\">\n                    <Trans\n                      ns={\"kafkaoverview-v3\"}\n                      i18nKey={\"purchaseCardTitle\"}\n                    >\n                      <span className=\"pf-u-color-200 pf-u-font-size-sm\"></span>\n                    </Trans>\n                  </Title>\n                </CardTitle>\n              </CardHeaderMain>\n            </CardHeader>\n            <CardBody>{t(\"purchaseCardMainText\")}</CardBody>\n            <CardFooter>\n              <Flex spaceItems={{ default: \"spaceItems2xl\" }}>\n                <FlexItem>\n                  <ExternalLink\n                    href={\n                      \"https://marketplace.redhat.com/en-us/products/red-hat-openshift-streams-for-apache-kafka\"\n                    }\n                    testId={\"cardPurchase-buttonRH\"}\n                    className={\"pf-u-ml-md \"}\n                  >\n                    <Trans\n                      ns={\"kafkaoverview-v3\"}\n                      i18nKey={\"purchaseCardCallToActionButtonRedHat\"}\n                      components={{\n                        bold: <strong />,\n                        size: <span className=\"pf-u-font-size-lg\" />,\n                      }}\n                    />\n                  </ExternalLink>\n                </FlexItem>\n\n                <FlexItem>\n                  <ExternalLink\n                    href={\n                      \"https://aws.amazon.com/marketplace/pp/prodview-3xohcoyuwkumc\"\n                    }\n                    testId={\"cardPurchase-buttonAWS\"}\n                    className={\"pf-u-ml-md\"}\n                  >\n                    <Trans\n                      ns={\"kafkaoverview-v3\"}\n                      i18nKey={\"purchaseCardCallToActionButtonAWS\"}\n                      components={{\n                        bold: <strong />,\n                        size: <span className=\"pf-u-font-size-lg\" />,\n                      }}\n                    />\n                  </ExternalLink>\n                </FlexItem>\n              </Flex>\n            </CardFooter>\n          </Card>\n          <Card\n            ouiaId=\"card-overview-contact-sales\"\n            aria-label={t(\"kafkaoverview:contactSalesCardTitle\")}\n          >\n            <CardHeader>\n              <CardTitle>\n                <Title headingLevel=\"h2\">\n                  <Trans\n                    ns={\"kafkaoverview-v3\"}\n                    i18nKey={\"contactSalesCardTitle\"}\n                  >\n                    <span className=\"pf-u-color-200 pf-u-font-size-sm\"></span>\n                  </Trans>\n                </Title>\n              </CardTitle>\n            </CardHeader>\n            <CardBody>{t(\"contactSalesCardMainText\")}</CardBody>\n            <CardFooter>\n              <ExternalLink\n                href={\n                  \"https://www.redhat.com/en/technologies/cloud-computing/openshift/openshift-streams-for-apache-kafka#contact-us\"\n                }\n                testId={\"cardContactSales-buttonCTA\"}\n                className={\"pf-u-ml-md\"}\n              >\n                <Trans\n                  ns={\"kafkaoverview-v3\"}\n                  i18nKey={\"contactSalesCardCallToActionButton\"}\n                  components={{\n                    bold: <strong />,\n                    size: <span className=\"pf-u-font-size-lg\" />,\n                  }}\n                />\n              </ExternalLink>\n            </CardFooter>\n          </Card>\n        </Grid>\n      </MarketingPageSection>\n      <MarketingPageSection\n        className={\"kafka-overview--page-section--marketing\"}\n      >\n        <Card>\n          <CardTitle>\n            <Title headingLevel=\"h2\">{t(\"pricingModalTitle\")}</Title>\n          </CardTitle>\n          <CardBody>\n            <Flex spaceItems={{ default: \"spaceItemsXl\" }}>\n              <Flex\n                alignSelf={{ default: \"alignSelfCenter\" }}\n                justifyContent={{ default: \"justifyContentCenter\" }}\n                flex={{ default: \"flex_1\" }}\n              >\n                <FlexItem>\n                  <DescriptionList isHorizontal>\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>\n                        {t(\"steamingUnit\")}\n                      </DescriptionListTerm>\n                      <DescriptionListDescription>\n                        {t(\"streamingUnit_price\")}\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>\n                        {t(\"dataTransfer\")}\n                      </DescriptionListTerm>\n                      <DescriptionListDescription>\n                        {t(\"dataTransfer_price\")}\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                    <DescriptionListGroup>\n                      <DescriptionListTerm>{t(\"storage\")}</DescriptionListTerm>\n                      <DescriptionListDescription>\n                        {t(\"storage_price\")}\n                      </DescriptionListDescription>\n                    </DescriptionListGroup>\n                  </DescriptionList>\n                </FlexItem>\n              </Flex>\n              <Divider isVertical />\n              <FlexItem flex={{ default: \"flex_1\" }}>\n                <TextContent>\n                  <Text component={TextVariants.p}>\n                    <Trans\n                      ns={\"kafkaoverview-v3\"}\n                      i18nKey={\"streamingUnitText\"}\n                      components={{ bold: <strong /> }}\n                    />\n                  </Text>\n                </TextContent>\n              </FlexItem>\n            </Flex>\n          </CardBody>\n        </Card>\n      </MarketingPageSection>\n      <MarketingPageSection\n        className={\"kafka-overview--page-section--marketing\"}\n      >\n        <Card>\n          <CardTitle>\n            <Title headingLevel=\"h2\">{t(\"kafkaInstanceCapacityTitle\")}</Title>\n          </CardTitle>\n          <CardBody>\n            <Stack hasGutter>\n              <Text component={TextVariants.p}>\n                {t(\"kafkaInstanceCapacityDescription\")}\n              </Text>\n              <KafkaInstanceCapacityTable />\n            </Stack>\n          </CardBody>\n          <CardFooter>\n            <TextContent className={\"pf-u-font-size-sm\"}>\n              <Trans\n                ns={\"kafkaoverview-v3\"}\n                i18nKey={\"kafkaInstanceCapacityfooter\"}\n                components={[\n                  <ExternalLink\n                    href={\"https://access.redhat.com/support\"}\n                    testId={\"SupportLink\"}\n                    className={\"pf-u-ml-xs\"}\n                  />,\n                  <ExternalLink\n                    href={\n                      \"https://access.redhat.com/documentation/en-us/red_hat_openshift_streams_for_apache_kafka/1/guide/aced8e5e-8229-4cb2-82f9-87a8caa24bb3\"\n                    }\n                    testId={\"MonitoringDiskSpaceLink\"}\n                    className={\"pf-u-ml-xs\"}\n                  />,\n                ]}\n              />\n            </TextContent>\n          </CardFooter>\n        </Card>\n      </MarketingPageSection>\n      <MarketingPageSection\n        className={\"kafka-overview--page-section--marketing\"}\n      >\n        <Card>\n          <CardTitle>\n            <Title headingLevel=\"h2\">{t(\"cloudProvidersTitle\")}</Title>\n          </CardTitle>\n          <CardBody>\n            <Flex\n              spaceItems={{ default: \"spaceItemsXl\" }}\n              direction={{ default: \"column\", xl: \"row\" }}\n            >\n              <Flex\n                justifyContent={{ default: \"justifyContentCenter\" }}\n                flex={{ default: \"flex_1\" }}\n              >\n                <FlexItem>\n                  <Split hasGutter>\n                    <SplitItem>\n                      <img src={LogoAWS} alt={\"\"} style={{ height: \"60px\" }} />\n                    </SplitItem>\n                    <SplitItem>\n                      <Title headingLevel=\"h2\" className={\"pf-u-pt-sm\"}>\n                        {t(\"awsWebServiceTitle\")}\n                      </Title>\n                    </SplitItem>\n                  </Split>\n                </FlexItem>\n              </Flex>\n              <Divider\n                orientation={{ default: \"horizontal\", xl: \"vertical\" }}\n              />\n              <Flex\n                justifyContent={{ default: \"justifyContentCenter\" }}\n                flex={{ default: \"flex_1\" }}\n              >\n                <FlexItem>\n                  <Split hasGutter>\n                    <SplitItem>\n                      <img src={LogoGCP} alt={\"\"} style={{ height: \"60px\" }} />\n                    </SplitItem>\n                    <SplitItem>\n                      <Title headingLevel=\"h2\" className={\"pf-u-pt-sm\"}>\n                        {t(\"googleCloudProviderTitle\")}\n                      </Title>\n                      <Text\n                        component={TextVariants.p}\n                        className={\"pf-u-color-200\"}\n                      >\n                        {t(\"googleCloudProviderDescription\")}\n                      </Text>\n                    </SplitItem>\n                  </Split>\n                </FlexItem>\n              </Flex>\n              <Divider\n                orientation={{ default: \"horizontal\", xl: \"vertical\" }}\n              />\n              <Flex\n                justifyContent={{ default: \"justifyContentCenter\" }}\n                flex={{ default: \"flex_1\" }}\n              >\n                <FlexItem>\n                  <Split hasGutter>\n                    <SplitItem>\n                      <img\n                        src={LogoAzure}\n                        alt={\"\"}\n                        style={{ height: \"60px\" }}\n                      />\n                    </SplitItem>\n                    <SplitItem>\n                      <Title headingLevel=\"h2\" className={\"pf-u-pt-sm\"}>\n                        {t(\"microsoftAzureTitle\")}\n                      </Title>\n                      <Text\n                        component={TextVariants.p}\n                        className={\"pf-u-color-200\"}\n                      >\n                        {t(\"microsoftAzureDescription\")}\n                      </Text>\n                    </SplitItem>\n                  </Split>\n                </FlexItem>\n              </Flex>\n            </Flex>\n          </CardBody>\n        </Card>\n      </MarketingPageSection>\n    </>\n  );\n};\n","import {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { PlusCircleIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nexport type EmptyStateNoTopicProps = {\n  onCreateTopic: () => void;\n};\n\nexport const EmptyStateNoTopic: VoidFunctionComponent<\n  EmptyStateNoTopicProps\n> = ({ onCreateTopic }) => {\n  const { t } = useTranslation(\"topic\");\n\n  return (\n    <EmptyState\n      data-ouia-page-id=\"emptyStateTopics\"\n      variant={EmptyStateVariant.large}\n    >\n      <EmptyStateIcon icon={PlusCircleIcon} />\n      <Title headingLevel=\"h2\" size=\"lg\">\n        {t(\"empty_topics_title\")}\n      </Title>\n      <EmptyStateBody>{t(\"empty_topics_body\")}</EmptyStateBody>\n      <Button\n        data-testid=\"actionCreateTopic\"\n        ouiaId=\"button-create\"\n        variant=\"primary\"\n        onClick={onCreateTopic}\n      >\n        {t(\"create_topic\")}\n      </Button>\n    </EmptyState>\n  );\n};\n","import type { ResourceOperationValue } from \"./components/ResourceOperation\";\nimport type { ResourcePermissionValue } from \"./components/ResourcePermission\";\nimport type { ResourcePrefixRuleValue } from \"./components/ResourcePrefixRule\";\nimport type { ResourceTypeValue } from \"./components/ResourceType\";\n\nexport type AclOperation =\n  | \"ALL\"\n  | \"READ\"\n  | \"WRITE\"\n  | \"CREATE\"\n  | \"DELETE\"\n  | \"ALTER\"\n  | \"DESCRIBE\"\n  | \"DESCRIBE_CONFIGS\"\n  | \"ALTER_CONFIGS\";\n\nexport type AclResourceType =\n  | \"GROUP\"\n  | \"TOPIC\"\n  | \"CLUSTER\"\n  | \"TRANSACTIONAL_ID\";\n\nexport type AclPatternType = \"LITERAL\" | \"PREFIXED\";\n\nexport type AclPermissionType = \"ALLOW\" | \"DENY\";\n\nexport interface AclBinding {\n  /**\n   *\n   * @type {AclResourceType}\n   * @memberof AclBinding\n   */\n  resourceType: AclResourceType;\n  /**\n   *\n   * @type {string}\n   * @memberof AclBinding\n   */\n  resourceName: string;\n  /**\n   *\n   * @type {AclPatternType}\n   * @memberof AclBinding\n   */\n  patternType: AclPatternType;\n  /**\n   * Identifies the user or service account to which an ACL entry is bound. The literal prefix value of `User:` is required. May be used to specify all users with value `User:*`.\n   * @type {string}\n   * @memberof AclBinding\n   */\n  principal: string;\n  /**\n   *\n   * @type {AclOperation}\n   * @memberof AclBinding\n   */\n  operation: AclOperation;\n  /**\n   *\n   * @type {AclPermissionType}\n   * @memberof AclBinding\n   */\n  permission: AclPermissionType;\n}\nexport enum PrincipalType {\n  UserAccount = \"USER_ACCOUNT\",\n  ServiceAccount = \"SERVICE_ACCOUNT\",\n}\n\nexport type Account = {\n  id: string;\n  principalType: PrincipalType;\n  displayName: string;\n};\n\ntype ManualAcl = {\n  resourceType: ResourceTypeValue | undefined;\n  resourcePrefix: ResourcePrefixRuleValue;\n  resourceName: string | undefined;\n  resourcePermission: ResourcePermissionValue;\n  resourceOperation: ResourceOperationValue | undefined;\n};\n\ntype ProduceTopicTemplate = {\n  prefixRuleValue: ResourcePrefixRuleValue;\n  resourceNameValue: string | undefined;\n};\n\ntype ConsumeTopicTemplate = {\n  consumerResourceName: string | undefined;\n  consumerResourcePrefixRule: ResourcePrefixRuleValue;\n  topicResourceName: string | undefined;\n  topicResourcePrefixRule: ResourcePrefixRuleValue;\n};\n\ntype ManageAccessTemplate = {\n  instanceName: string;\n};\nexport type AddAclType =\n  | ({ type: \"manual\" } & ManualAcl)\n  | ({ type: \"consume-topic\" } & ConsumeTopicTemplate)\n  | ({ type: \"produce-topic\" } & ProduceTopicTemplate)\n  | ({ type: \"manage-access\" } & ManageAccessTemplate);\n\nexport const createEmptyManualAcl = (): AddAclType => {\n  return {\n    type: \"manual\",\n    resourceName: undefined,\n    resourceType: undefined,\n    resourceOperation: undefined,\n    resourcePrefix: \"Is\",\n    resourcePermission: \"allow\",\n  };\n};\nexport const createEmptyProduceTopicAcl = (): AddAclType => {\n  return {\n    type: \"produce-topic\",\n    prefixRuleValue: \"Is\",\n    resourceNameValue: undefined,\n  };\n};\nexport const createEmptyConsumeTopicAcl = (): AddAclType => {\n  return {\n    type: \"consume-topic\",\n    consumerResourceName: undefined,\n    consumerResourcePrefixRule: \"Is\",\n    topicResourceName: undefined,\n    topicResourcePrefixRule: \"Is\",\n  };\n};\nexport const createEmptyManageAccessAcl = (kafkaName: string): AddAclType => {\n  return {\n    type: \"manage-access\",\n    instanceName: kafkaName,\n  };\n};\n","import { Button, PageSection } from \"@patternfly/react-core\";\nimport { TableVariant } from \"@patternfly/react-table\";\nimport type { TableViewProps } from \"@rhoas/app-services-ui-components\";\nimport {\n  EmptyStateNoResults,\n  TableView,\n} from \"@rhoas/app-services-ui-components\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport type { Topic, TopicField } from \"ui-models/src/models/topic\";\nimport { useTopicLabels } from \"../../hooks\";\nimport type { EmptyStateNoTopicProps } from \"./components\";\nimport { EmptyStateNoTopic } from \"./components\";\nimport { formattedRetentionSize, formattedRetentionTime } from \"./types\";\n\ntype SubUnion<T, U extends T> = U;\n\nconst Columns: SubUnion<\n  TopicField,\n  \"name\" | \"partitions\" | \"retention.ms\" | \"retention.bytes\"\n>[] = [\"name\", \"partitions\", \"retention.ms\", \"retention.bytes\"];\n\nexport type KafkaTopicsProps<T extends Topic> = {\n  topics: Array<T> | undefined;\n  getUrlFortopic: (row: T) => string;\n  onDelete: (row: T) => void;\n  onEdit: (row: T) => void;\n  topicName: string[];\n  onSearchTopic: (value: string) => void;\n  onRemoveTopicChip: (value: string) => void;\n  onRemoveTopicChips: () => void;\n  onTopicLinkClick: (row: T) => void;\n} & Pick<\n  TableViewProps<T, typeof Columns[number]>,\n  | \"itemCount\"\n  | \"page\"\n  | \"perPage\"\n  | \"onPageChange\"\n  | \"isRowSelected\"\n  | \"isColumnSortable\"\n  | \"onClearAllFilters\"\n> &\n  EmptyStateNoTopicProps;\n\nexport const KafkaTopics = <T extends Topic>({\n  topics,\n  onDelete,\n  onEdit,\n  isColumnSortable,\n  itemCount,\n  onSearchTopic,\n  topicName,\n  onClearAllFilters,\n  onCreateTopic,\n  page,\n  perPage,\n  onPageChange,\n  onRemoveTopicChip,\n  onRemoveTopicChips,\n  getUrlFortopic,\n  onTopicLinkClick,\n}: KafkaTopicsProps<T>) => {\n  const { t } = useTranslation(\"topic\");\n\n  const labels = useTopicLabels();\n\n  const isFiltered = topicName.length > 0;\n  return (\n    <PageSection isFilled={true} hasOverflowScroll={true} aria-label={\"TODO\"}>\n      <TableView\n        variant={TableVariant.compact}\n        tableOuiaId={\"card-table\"}\n        ariaLabel={t(\"topic_list_table\")}\n        data={topics}\n        columns={Columns}\n        renderHeader={({ column, Th, key }) => (\n          <Th key={key}>{labels.fields[column]}</Th>\n        )}\n        renderCell={({ column, row, Td, key }) => {\n          return (\n            <Td key={key} dataLabel={labels.fields[column]}>\n              {(() => {\n                switch (column) {\n                  case \"name\":\n                    return (\n                      <Button\n                        variant=\"link\"\n                        component={(props) => (\n                          <Link\n                            to={getUrlFortopic(row)}\n                            {...props}\n                            data-testid=\"tableTopics-linkTopic\"\n                            data-ouia-component-id=\"table-link\"\n                          >\n                            {row.name}\n                          </Link>\n                        )}\n                        onClick={() => onTopicLinkClick(row)}\n                        isInline\n                      />\n                    );\n                  case \"partitions\":\n                    return row.partitions.length;\n                  case \"retention.ms\":\n                    return formattedRetentionTime(row[\"retention.ms\"].value);\n                  case \"retention.bytes\":\n                    return formattedRetentionSize(row[\"retention.bytes\"].value);\n                }\n              })()}\n            </Td>\n          );\n        }}\n        renderActions={({ row, ActionsColumn }) => (\n          <ActionsColumn\n            items={[\n              {\n                title: t(\"table.actions.edit\"),\n                onClick: () => onEdit(row),\n              },\n              {\n                title: t(\"table.actions.delete\"),\n                onClick: () => onDelete(row),\n              },\n            ]}\n          />\n        )}\n        isColumnSortable={isColumnSortable}\n        filters={{\n          [labels.fields.name]: {\n            type: \"search\",\n            chips: topicName,\n            onSearch: onSearchTopic,\n            onRemoveChip: onRemoveTopicChip,\n            onRemoveGroup: onRemoveTopicChips,\n            validate: (value: string) => !/[\"$^<>|+%/;:,\\s*=~#()]/.test(value),\n            errorMessage: t(\"input_field_invalid_message\"),\n          },\n        }}\n        actions={[\n          {\n            label: t(\"create_topic\"),\n            onClick: onCreateTopic,\n            isPrimary: true,\n          },\n        ]}\n        itemCount={itemCount}\n        page={page}\n        onPageChange={onPageChange}\n        perPage={perPage}\n        isFiltered={isFiltered}\n        onClearAllFilters={onClearAllFilters}\n        emptyStateNoData={<EmptyStateNoTopic onCreateTopic={onCreateTopic} />}\n        emptyStateNoResults={<EmptyStateNoResults />}\n      />\n    </PageSection>\n  );\n};\n","import type { CardKafkaInstanceMetricsLimits } from \"./components\";\n\nexport type TimeSeriesMetrics = { [timestamp: string]: number };\nexport type PartitionBytesMetric = { [partition: string]: TimeSeriesMetrics };\n\nexport enum DurationOptions {\n  Last5minutes = 5,\n  Last15minutes = 15,\n  Last30minutes = 30,\n  Last1hour = 60,\n  Last3hours = 3 * 60,\n  Last6hours = 6 * 60,\n  Last12hours = 12 * 60,\n  Last24hours = 24 * 60,\n  Last2days = 2 * 24 * 60,\n  Last7days = 7 * 24 * 60,\n}\n\nexport type GetTopicsMetricsResponse = {\n  kafkaTopics: string[];\n  metricsTopics: string[];\n  bytesOutgoing: TimeSeriesMetrics;\n  bytesIncoming: TimeSeriesMetrics;\n  bytesPerPartition: PartitionBytesMetric;\n  incomingMessageRate: TimeSeriesMetrics;\n};\n\nexport type GetKafkaInstanceMetricsResponse = {\n  usedDiskSpaceMetrics: TimeSeriesMetrics;\n  clientConnectionsMetrics: TimeSeriesMetrics;\n  connectionAttemptRateMetrics: TimeSeriesMetrics;\n} & CardKafkaInstanceMetricsLimits;\n\nexport type GetMetricsKpiResponse = {\n  topics: number;\n  topicPartitions: number;\n  consumerGroups: number;\n  topicPartitionsLimit: number;\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateVariant,\n  PageSection,\n} from \"@patternfly/react-core\";\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\n\nexport const EmptyStateInitialLoading: VoidFunctionComponent = () => {\n  return (\n    <PageSection isFilled={true}>\n      <EmptyState variant={EmptyStateVariant.xs}>\n        <EmptyStateBody data-chromatic=\"ignore\">\n          <AppServicesLoading />\n        </EmptyStateBody>\n      </EmptyState>\n    </PageSection>\n  );\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  PageSection,\n  Title,\n} from \"@patternfly/react-core\";\nimport { TachometerAltIcon } from \"@patternfly/react-icons\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { FunctionComponent } from \"react\";\n\nexport const EmptyStateMetricsUnavailable: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <PageSection isFilled={true}>\n      <EmptyState variant={EmptyStateVariant.xs}>\n        <EmptyStateIcon icon={TachometerAltIcon} />\n        <Title headingLevel=\"h3\" size=\"lg\">\n          {t(\"metrics:empty_state_no_data_title\")}\n        </Title>\n        <EmptyStateBody>{t(\"metrics:empty_state_no_data_body\")}</EmptyStateBody>\n      </EmptyState>\n    </PageSection>\n  );\n};\n","import { Grid, GridItem, PageSection } from \"@patternfly/react-core\";\nimport type { FunctionComponent, ReactElement } from \"react\";\n\ntype MetricsLayoutProps = {\n  metricsLagAlert: ReactElement;\n  topicsKpi: ReactElement;\n  topicPartitionsKpi: ReactElement;\n  consumerGroupKpi: ReactElement;\n  diskSpaceMetrics: ReactElement;\n  topicMetrics: ReactElement;\n};\nexport const MetricsLayout: FunctionComponent<MetricsLayoutProps> = ({\n  metricsLagAlert,\n  topicsKpi,\n  topicPartitionsKpi,\n  consumerGroupKpi,\n  diskSpaceMetrics,\n  topicMetrics,\n}) => {\n  return (\n    <PageSection\n      hasOverflowScroll={true}\n      aria-label={\"TODO\"}\n      padding={{ default: \"noPadding\" }}\n      className={\n        \"pf-u-px-lg-on-xl pf-u-pt-sm-on-xl pf-u-pb-lg-on-xl pf-u-px-md pf-u-pb-md\"\n      }\n    >\n      <Grid hasGutter>\n        <GridItem>{metricsLagAlert}</GridItem>\n        <GridItem sm={4}>{topicsKpi}</GridItem>\n        <GridItem sm={4}>{topicPartitionsKpi}</GridItem>\n        <GridItem sm={4}>{consumerGroupKpi}</GridItem>\n        <GridItem lg={6}>{diskSpaceMetrics}</GridItem>\n        <GridItem lg={6}>{topicMetrics}</GridItem>\n      </Grid>\n    </PageSection>\n  );\n};\n","import { CardBody, Bullseye, Spinner } from \"@patternfly/react-core\";\nimport type { FunctionComponent } from \"react\";\n\nexport const CardBodyLoading: FunctionComponent = () => (\n  <CardBody>\n    <Bullseye>\n      <Spinner isSVG data-chromatic=\"ignore\" />\n    </Bullseye>\n  </CardBody>\n);\n","import { DurationOptions } from \"./types\";\n\nexport const timeIntervalsMapping = {\n  [DurationOptions.Last5minutes]: {\n    interval: 1 * 60,\n    ticks: 6,\n    showDate: false,\n  },\n  [DurationOptions.Last15minutes]: {\n    interval: 3 * 60,\n    ticks: 6,\n    showDate: false,\n  },\n  [DurationOptions.Last30minutes]: {\n    interval: 5 * 60,\n    ticks: 7,\n    showDate: false,\n  },\n  [DurationOptions.Last1hour]: { interval: 10 * 60, ticks: 6, showDate: false },\n  [DurationOptions.Last3hours]: {\n    interval: 30 * 60,\n    ticks: 7,\n    showDate: false,\n  },\n  [DurationOptions.Last6hours]: {\n    interval: 1 * 60 * 60,\n    ticks: 7,\n    showDate: false,\n  },\n  [DurationOptions.Last12hours]: {\n    interval: 2 * 60 * 60,\n    ticks: 7,\n    showDate: false,\n  },\n  [DurationOptions.Last24hours]: {\n    interval: 4 * 60 * 60,\n    ticks: 7,\n    showDate: true,\n  },\n  [DurationOptions.Last2days]: {\n    interval: 8 * 60 * 60,\n    ticks: 7,\n    showDate: true,\n  },\n  [DurationOptions.Last7days]: {\n    interval: 24 * 60 * 60,\n    ticks: 8,\n    showDate: true,\n  },\n} as const;\n\nexport const chartHeight = 350;\nexport const chartPadding = {\n  bottom: 110, // Adjusted to accomodate legend\n  left: 120,\n  right: 40,\n  top: 10,\n};\n","import { Flex, FlexItem, Skeleton } from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { chartHeight, chartPadding } from \"../consts\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const ChartSkeletonLoader: VoidFunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <Flex direction={{ default: \"column\" }} data-chromatic=\"ignore\">\n      <FlexItem>\n        <Skeleton\n          height={`${chartHeight - chartPadding.bottom}px`}\n          screenreaderText={t(\"common:skeleton_loader_screenreader_text\")}\n        />\n      </FlexItem>\n      <FlexItem>\n        <Skeleton height={`${chartPadding.bottom / 2 - 12.5}px`} width=\"20%\" />\n      </FlexItem>\n      <FlexItem>\n        <Skeleton height={`${chartPadding.bottom / 2 - 12.5}px`} width=\"40%\" />\n      </FlexItem>\n    </Flex>\n  );\n};\n","import type { RefObject } from \"react\";\nimport { useEffect, useLayoutEffect, useRef, useState } from \"react\";\n\nexport function useChartWidth(): [RefObject<HTMLDivElement>, number] {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [width, setWidth] = useState<number>(0);\n\n  const handleResize = () =>\n    containerRef.current && setWidth(containerRef.current.clientWidth);\n\n  useLayoutEffect(() => {\n    handleResize();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n  return [containerRef, width];\n}\n","import byteSize from \"byte-size\";\nimport { fromUnixTime, sub } from \"date-fns\";\nimport { formatInTimeZone } from \"date-fns-tz\";\nimport { timeIntervalsMapping } from \"../consts\";\nimport type { DurationOptions } from \"../types\";\n\nexport function formatBytes(bytes: number): string {\n  return byteSize(bytes, { units: \"iec\" }).toString();\n}\n\nexport const shouldShowDate = (timeDuration: DurationOptions): boolean => {\n  return timeIntervalsMapping[timeDuration].showDate;\n};\n\nexport const dateToChartValue = (\n  timestamp: number,\n  { showDate }: { showDate: boolean } = { showDate: false }\n): string => {\n  const date = fromUnixTime(timestamp / 1000);\n  return formatInTimeZone(date, \"utc\", showDate ? \"HH:mm'\\n'MMM dd\" : \"HH:mm\");\n};\n\nexport function timestampsToTicks(\n  timestamps: string[],\n  duration: DurationOptions\n): number[] {\n  const allTimestamps = [...timestamps];\n  allTimestamps.sort();\n  const mostRecentTs =\n    parseInt(allTimestamps[allTimestamps.length - 1]) || Date.now();\n  return new Array(\n    Math.max(timeIntervalsMapping[duration].ticks, allTimestamps.length)\n  )\n    .fill(mostRecentTs)\n    .map((d: number, index) =>\n      sub(new Date(d), {\n        seconds: timeIntervalsMapping[duration].interval * index,\n      }).getTime()\n    );\n}\n","import type { ChartVoronoiContainerProps } from \"@patternfly/react-charts\";\nimport {\n  Chart,\n  ChartArea,\n  ChartAxis,\n  ChartGroup,\n  ChartLegend,\n  ChartThemeColor,\n  ChartThreshold,\n  ChartVoronoiContainer,\n} from \"@patternfly/react-charts\";\nimport {\n  chart_color_black_500,\n  chart_color_blue_300,\n} from \"@patternfly/react-tokens\";\nimport type { ReactElement, VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { chartHeight, chartPadding } from \"../consts\";\nimport type { DurationOptions, TimeSeriesMetrics } from \"../types\";\nimport { ChartSkeletonLoader } from \"./ChartSkeletonLoader\";\nimport { useChartWidth } from \"./useChartWidth\";\nimport { dateToChartValue, shouldShowDate, timestampsToTicks } from \"./utils\";\n\ntype ChartData = {\n  areaColor: string;\n  softLimitColor: string;\n  area: BrokerChartData[];\n  softLimit: BrokerChartData[];\n};\n\ntype BrokerChartData = {\n  name: string;\n  x: number;\n  y: number;\n};\n\ntype LegendData = {\n  name: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n};\n\ntype ChartLinearWithOptionalLimitProps = {\n  metrics: TimeSeriesMetrics;\n  duration: DurationOptions;\n  chartName: string;\n  xLabel?: string;\n  yLabel?: string;\n  usageLimit?: number;\n  formatValue?: (d: number) => string;\n  isLoading: boolean;\n  emptyState: ReactElement;\n};\n\nexport const ChartLinearWithOptionalLimit: VoidFunctionComponent<\n  ChartLinearWithOptionalLimitProps\n> = ({\n  metrics,\n  duration,\n  chartName,\n  xLabel,\n  yLabel,\n  usageLimit,\n  formatValue = (d) => `${d}`,\n  isLoading,\n  emptyState,\n}) => {\n  const { t } = useTranslation();\n  const [containerRef, width] = useChartWidth();\n\n  const itemsPerRow = width && width > 650 ? 6 : 3;\n\n  const { chartData, legendData, tickValues } = getChartData(\n    metrics,\n    duration,\n    chartName,\n    t(\"metrics:limit\"),\n    usageLimit\n  );\n\n  const hasMetrics = Object.keys(metrics).length > 0;\n  const showDate = shouldShowDate(duration);\n\n  switch (true) {\n    case isLoading:\n      return <ChartSkeletonLoader />;\n    case !hasMetrics:\n      return emptyState;\n    default: {\n      const labels: ChartVoronoiContainerProps[\"labels\"] = ({ datum }) =>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/restrict-template-expressions,@typescript-eslint/no-unsafe-argument\n        `${datum.name}: ${formatValue(datum.y)}`;\n      return (\n        <div ref={containerRef}>\n          <Chart\n            ariaTitle={chartName}\n            containerComponent={\n              <ChartVoronoiContainer labels={labels} constrainToVisibleArea />\n            }\n            legendPosition=\"bottom-left\"\n            legendComponent={\n              <ChartLegend\n                orientation={\"horizontal\"}\n                data={legendData}\n                itemsPerRow={itemsPerRow}\n              />\n            }\n            height={chartHeight}\n            padding={chartPadding}\n            themeColor={ChartThemeColor.multiUnordered}\n            width={width}\n            legendAllowWrap={true}\n          >\n            <ChartAxis\n              label={\"\\n\" + (xLabel || t(\"metrics:axis-label-time\") || \"\")}\n              tickValues={tickValues}\n              tickFormat={(d: number) =>\n                dateToChartValue(d, {\n                  showDate,\n                })\n              }\n            />\n            <ChartAxis\n              label={\"\\n\\n\\n\\n\\n\" + (yLabel || chartName)}\n              dependentAxis\n              tickFormat={formatValue}\n            />\n            <ChartGroup>\n              {chartData.map((value, index) => (\n                <ChartArea\n                  key={`chart-area-${index}`}\n                  data={value.area}\n                  style={{\n                    data: {\n                      // TODO: check if this is needed\n                      // stroke: value.color,\n                    },\n                  }}\n                />\n              ))}\n            </ChartGroup>\n            <ChartThreshold\n              key={`chart-softlimit`}\n              data={chartData[0].softLimit}\n              style={{\n                data: {\n                  stroke: chartData[0].softLimitColor,\n                },\n              }}\n            />\n          </Chart>\n        </div>\n      );\n    }\n  }\n};\n\nfunction getChartData(\n  metrics: TimeSeriesMetrics,\n  duration: number,\n  lineLabel: string,\n  limitLabel: string,\n  usageLimit?: number\n): {\n  legendData: Array<LegendData>;\n  chartData: Array<ChartData>;\n  tickValues: number[];\n} {\n  const legendData = [\n    usageLimit\n      ? {\n          name: limitLabel,\n          symbol: { fill: chart_color_black_500.value, type: \"threshold\" },\n        }\n      : undefined,\n    { name: lineLabel, symbol: { fill: chart_color_blue_300.value } },\n  ].filter((d) => !!d) as Array<LegendData>;\n\n  const areaColor = chart_color_blue_300.value;\n  const softLimitColor = chart_color_black_500.value;\n  const chartData: Array<ChartData> = [];\n  const area: Array<BrokerChartData> = [];\n  const softLimit: Array<BrokerChartData> = [];\n\n  Object.entries(metrics).map(([timestamp, bytes]) => {\n    area.push({ name: lineLabel, x: parseInt(timestamp, 10), y: bytes });\n  });\n  chartData.push({ areaColor, softLimitColor, area, softLimit });\n\n  const tickValues = timestampsToTicks(Object.keys(metrics), duration);\n\n  if (usageLimit) {\n    tickValues.forEach((timestamp) =>\n      softLimit.push({\n        name: limitLabel,\n        x: timestamp,\n        y: usageLimit,\n      })\n    );\n  }\n\n  return {\n    legendData,\n    chartData,\n    tickValues,\n  };\n}\n","import type { ChartVoronoiContainerProps } from \"@patternfly/react-charts\";\nimport {\n  Chart,\n  ChartArea,\n  ChartAxis,\n  ChartGroup,\n  ChartLegend,\n  ChartThemeColor,\n  ChartVoronoiContainer,\n} from \"@patternfly/react-charts\";\nimport {\n  chart_color_blue_300,\n  chart_color_cyan_300,\n} from \"@patternfly/react-tokens\";\nimport type { FunctionComponent, ReactElement } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { chartHeight, chartPadding } from \"../consts\";\nimport type { PartitionBytesMetric } from \"../types\";\nimport { ChartSkeletonLoader } from \"./ChartSkeletonLoader\";\nimport { useChartWidth } from \"./useChartWidth\";\nimport {\n  dateToChartValue,\n  formatBytes,\n  shouldShowDate,\n  timestampsToTicks,\n} from \"./utils\";\n\nconst colors = [chart_color_cyan_300.value, chart_color_blue_300.value];\n\ntype ChartData = {\n  color: string;\n  area: PartitionChartData[];\n};\n\ntype PartitionChartData = {\n  name: string;\n  x: number;\n  y: number;\n};\n\ntype LegendData = {\n  name: string;\n};\n\nexport type ChartLogSizePerPartitionProps = {\n  partitions: PartitionBytesMetric;\n  topic: string | undefined;\n  duration: number;\n  isLoading: boolean;\n  emptyState: ReactElement;\n};\nexport const ChartLogSizePerPartition: FunctionComponent<\n  ChartLogSizePerPartitionProps\n> = ({ partitions, topic, duration, isLoading, emptyState }) => {\n  const { t } = useTranslation();\n  const [containerRef, width] = useChartWidth();\n\n  const itemsPerRow = width && width > 650 ? 6 : 3;\n\n  const { chartData, legendData, tickValues } = getChartData(\n    partitions,\n    topic,\n    duration\n  );\n\n  const hasMetrics = Object.keys(partitions).length > 0;\n\n  const showDate = shouldShowDate(duration);\n\n  return (\n    <div ref={containerRef}>\n      {(() => {\n        switch (true) {\n          case isLoading:\n            return <ChartSkeletonLoader />;\n          case !hasMetrics:\n            return emptyState;\n          default: {\n            const labels: ChartVoronoiContainerProps[\"labels\"] = ({ datum }) =>\n              // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/restrict-template-expressions,@typescript-eslint/no-unsafe-argument\n              `${datum.name}: ${formatBytes(datum.y)}`;\n\n            return (\n              <Chart\n                ariaTitle={t(\"metrics:log_size_per_partition\")}\n                containerComponent={\n                  <ChartVoronoiContainer\n                    labels={labels}\n                    constrainToVisibleArea\n                  />\n                }\n                legendPosition=\"bottom-left\"\n                legendComponent={\n                  <ChartLegend data={legendData} itemsPerRow={itemsPerRow} />\n                }\n                height={chartHeight}\n                padding={chartPadding}\n                themeColor={ChartThemeColor.multiOrdered}\n                width={width}\n                legendAllowWrap={true}\n              >\n                <ChartAxis\n                  label={\"\\n\" + t(\"metrics:axis-label-time\")}\n                  tickValues={tickValues}\n                  tickFormat={(d: number) =>\n                    dateToChartValue(d, {\n                      showDate,\n                    })\n                  }\n                />\n                <ChartAxis\n                  label={\"\\n\\n\\n\\n\\n\" + t(\"metrics:axis-label-bytes\")}\n                  dependentAxis\n                  tickFormat={formatBytes}\n                />\n                <ChartGroup>\n                  {chartData.map((value, index) => (\n                    <ChartArea key={`chart-area-${index}`} data={value.area} />\n                  ))}\n                </ChartGroup>\n              </Chart>\n            );\n          }\n        }\n      })()}\n    </div>\n  );\n};\n\nexport function getChartData(\n  partitions: PartitionBytesMetric,\n  topic: string | undefined,\n  duration: number\n): {\n  legendData: Array<LegendData>;\n  chartData: Array<ChartData>;\n  tickValues: number[];\n} {\n  const legendData: Array<LegendData> = [];\n  const chartData: Array<ChartData> = [];\n  Object.entries(partitions).map(([partition, dataMap], index) => {\n    const name = topic ? `${topic}: ${partition}` : partition;\n    const color = colors[index];\n    legendData.push({\n      name,\n    });\n    const area: Array<PartitionChartData> = [];\n\n    Object.entries(dataMap).map(([timestamp, value]) => {\n      area.push({ name, x: parseInt(timestamp, 10), y: value });\n    });\n    chartData.push({ color, area });\n  });\n\n  const allTimestamps = Array.from(\n    new Set(Object.values(partitions).flatMap((m) => Object.keys(m)))\n  );\n  const tickValues = timestampsToTicks(allTimestamps, duration);\n\n  return {\n    legendData,\n    chartData,\n    tickValues,\n  };\n}\n","import { Popover } from \"@patternfly/react-core\";\nimport { OutlinedQuestionCircleIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\ntype ChartPopoverProps = {\n  title: string;\n  description: string;\n};\n\nexport const ChartPopover: VoidFunctionComponent<ChartPopoverProps> = ({\n  title,\n  description,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <Popover\n      aria-label={title}\n      headerContent={<div>{title}</div>}\n      bodyContent={<div>{description}</div>}\n    >\n      <OutlinedQuestionCircleIcon\n        aria-label={t(\"metrics:chart-popover-icon-screenreader-text\", {\n          title,\n        })}\n      />\n    </Popover>\n  );\n};\n","import type { ChartVoronoiContainerProps } from \"@patternfly/react-charts\";\nimport {\n  Chart,\n  ChartAxis,\n  ChartGroup,\n  ChartLegend,\n  ChartLine,\n  ChartThemeColor,\n  ChartVoronoiContainer,\n} from \"@patternfly/react-charts\";\nimport {\n  chart_color_blue_300,\n  chart_color_green_300,\n} from \"@patternfly/react-tokens\";\nimport type { FunctionComponent, ReactElement } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { chartHeight, chartPadding, timeIntervalsMapping } from \"../consts\";\nimport type { TimeSeriesMetrics } from \"../types\";\nimport { ChartSkeletonLoader } from \"./ChartSkeletonLoader\";\nimport { useChartWidth } from \"./useChartWidth\";\nimport {\n  dateToChartValue,\n  formatBytes,\n  shouldShowDate,\n  timestampsToTicks,\n} from \"./utils\";\n\ntype ChartData = {\n  color: string;\n  line: TopicChartData[];\n};\n\ntype TopicChartData = {\n  name: string;\n  x: number;\n  y: number;\n};\n\ntype LegendData = {\n  name: string;\n  symbol: {\n    fill: string;\n    type?: string;\n  };\n};\n\ntype ChartTotalBytesProps = {\n  incomingTopicsData: TimeSeriesMetrics;\n  outgoingTopicsData: TimeSeriesMetrics;\n  selectedTopic: string | undefined;\n  duration: number;\n  isLoading: boolean;\n  emptyState: ReactElement;\n};\nexport const ChartTotalBytes: FunctionComponent<ChartTotalBytesProps> = ({\n  incomingTopicsData,\n  outgoingTopicsData,\n  selectedTopic,\n  duration,\n  isLoading,\n  emptyState,\n}) => {\n  const { t } = useTranslation();\n  const [containerRef, width] = useChartWidth();\n\n  const itemsPerRow = width && width > 650 ? 6 : 3;\n\n  const { chartData, legendData, tickValues } = getBytesChartData(\n    incomingTopicsData,\n    outgoingTopicsData,\n    duration,\n    selectedTopic\n      ? t(\"metrics:incoming_bytes\", {\n          topic: selectedTopic,\n        })\n      : t(\"metrics:incoming_bytes_all_topics\"),\n    selectedTopic\n      ? t(\"metrics:outgoing_bytes\", {\n          topic: selectedTopic,\n        })\n      : t(\"metrics:outgoing_bytes_all_topics\")\n  );\n\n  const hasMetrics =\n    Object.keys(incomingTopicsData).length > 0 ||\n    Object.keys(outgoingTopicsData).length > 0;\n\n  const showDate = shouldShowDate(duration);\n\n  switch (true) {\n    case isLoading:\n      return <ChartSkeletonLoader />;\n    case !hasMetrics:\n      return emptyState;\n    default: {\n      const labels: ChartVoronoiContainerProps[\"labels\"] =\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/restrict-template-expressions,@typescript-eslint/no-unsafe-argument\n        ({ datum }) => `${datum.name}: ${formatBytes(datum.y)}`;\n      return (\n        <div ref={containerRef}>\n          <Chart\n            ariaTitle={t(\"metrics:total_bytes\")}\n            containerComponent={\n              <ChartVoronoiContainer labels={labels} constrainToVisibleArea />\n            }\n            legendAllowWrap={true}\n            legendPosition=\"bottom-left\"\n            legendComponent={\n              <ChartLegend data={legendData} itemsPerRow={itemsPerRow} />\n            }\n            height={chartHeight}\n            padding={chartPadding}\n            themeColor={ChartThemeColor.multiUnordered}\n            width={width}\n          >\n            <ChartAxis\n              label={\"\\n\" + t(\"metrics:axis-label-time\")}\n              tickValues={tickValues}\n              tickCount={timeIntervalsMapping[duration].ticks}\n              tickFormat={(d: number) =>\n                dateToChartValue(d, {\n                  showDate,\n                })\n              }\n            />\n            <ChartAxis\n              label={\"\\n\\n\\n\\n\\n\" + t(\"metrics:axis-label-bytes\")}\n              dependentAxis\n              tickFormat={formatBytes}\n            />\n            <ChartGroup>\n              {chartData.map((value, index) => (\n                <ChartLine\n                  key={`chart-line-${index}`}\n                  data={value.line}\n                  style={{\n                    data: {\n                      stroke: value.color,\n                    },\n                  }}\n                />\n              ))}\n            </ChartGroup>\n          </Chart>\n        </div>\n      );\n    }\n  }\n};\n\nexport function getBytesChartData(\n  incomingTopic: TimeSeriesMetrics,\n  outgoingTopic: TimeSeriesMetrics,\n  duration: number,\n  incomingTopicName: string,\n  outgoingTopicName: string\n): {\n  legendData: Array<LegendData>;\n  chartData: Array<ChartData>;\n  tickValues: number[];\n} {\n  const legendData: Array<LegendData> = [];\n  const chartData: Array<ChartData> = [];\n\n  const incomingLine = metricsToLine(incomingTopic, incomingTopicName);\n  if (incomingLine.length > 0) {\n    const color = chart_color_blue_300.value;\n    chartData.push({ color, line: incomingLine });\n    legendData.push({\n      name: incomingTopicName,\n      symbol: {\n        fill: color,\n      },\n    });\n  }\n\n  const outgoingLine = metricsToLine(outgoingTopic, outgoingTopicName);\n  if (outgoingLine.length > 0) {\n    const color = chart_color_green_300.value;\n    chartData.push({ color, line: outgoingLine });\n    legendData.push({\n      name: outgoingTopicName,\n      symbol: {\n        fill: color,\n      },\n    });\n  }\n  const allTimestamps = Array.from(\n    new Set([...Object.keys(incomingTopic), ...Object.keys(outgoingTopic)])\n  );\n  const tickValues = timestampsToTicks(allTimestamps, duration);\n\n  return {\n    legendData,\n    chartData,\n    tickValues,\n  };\n}\n\nexport function metricsToLine(\n  metrics: TimeSeriesMetrics,\n  name: string\n): Array<TopicChartData> {\n  const line: Array<TopicChartData> = [];\n\n  Object.entries(metrics).map(([timestamp, bytes]) => {\n    line.push({ name, x: parseInt(timestamp, 10), y: bytes });\n  });\n  return line;\n}\n","import {\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { ExclamationTriangleIcon } from \"@patternfly/react-icons\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const EmptyStateNoMetricsData: FunctionComponent = () => {\n  const { t } = useTranslation([\"metrics\"]);\n  return (\n    <EmptyState variant={EmptyStateVariant.xs}>\n      <EmptyStateIcon\n        icon={ExclamationTriangleIcon}\n        color=\"var(--pf-global--warning-color--100)\"\n      />\n      <Title headingLevel=\"h3\" size=\"md\">\n        {t(\"metric_not_available\")}\n      </Title>\n    </EmptyState>\n  );\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { SearchIcon } from \"@patternfly/react-icons\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport const EmptyStateNoMetricsDataForSelection: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState variant={EmptyStateVariant.xs}>\n      <EmptyStateIcon icon={SearchIcon} />\n      <Title headingLevel=\"h3\" size=\"lg\">\n        {t(\"metrics:empty_state_no_metrics_data_title\")}\n      </Title>\n      <EmptyStateBody>\n        {t(\"metrics:empty_state_no_metrics_data_body\")}\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { WrenchIcon } from \"@patternfly/react-icons\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\ntype EmptyStateNoTopicsProps = {\n  onCreateTopic?: () => void;\n};\nexport const EmptyStateNoTopics: FunctionComponent<EmptyStateNoTopicsProps> = ({\n  onCreateTopic,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState variant={EmptyStateVariant.xs}>\n      <EmptyStateIcon icon={WrenchIcon} />\n      <Title headingLevel=\"h3\" size=\"lg\">\n        {t(\"metrics:empty_state_no_topics_title\")}\n      </Title>\n      <EmptyStateBody>{t(\"metrics:empty_state_no_topics_body\")}</EmptyStateBody>\n      {onCreateTopic && (\n        <Button\n          ouiaId=\"button-create\"\n          variant=\"primary\"\n          onClick={onCreateTopic}\n        >\n          {t(\"metrics:empty_state_no_topics_create_topic\")}\n        </Button>\n      )}\n    </EmptyState>\n  );\n};\n","import {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport { FilterIcon } from \"@patternfly/react-icons\";\nimport { Trans, useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\n\nexport const EmptyStateNoTopicSelected: VoidFunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState variant={EmptyStateVariant.xs}>\n      <EmptyStateIcon icon={FilterIcon} />\n      <Title headingLevel=\"h3\" size=\"lg\">\n        {t(\"metrics:empty_state_no_filter_title\")}\n      </Title>\n      <EmptyStateBody>\n        <Trans\n          ns={\"metrics\"}\n          i18nKey={\"empty_state_no_filter_body\"}\n          components={{ bold: <strong /> }}\n        />\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { useState } from \"react\";\nimport type { SelectProps } from \"@patternfly/react-core\";\nimport {\n  ToolbarItem,\n  Select,\n  SelectVariant,\n  SelectGroup,\n  SelectOption,\n} from \"@patternfly/react-core\";\nimport { DurationOptions } from \"../types\";\n\nexport const DurationOptionsMap = {\n  [DurationOptions.Last5minutes]: \"Last 5 minutes\",\n  [DurationOptions.Last15minutes]: \"Last 15 minutes\",\n  [DurationOptions.Last30minutes]: \"Last 30 minutes\",\n  [DurationOptions.Last1hour]: \"Last 1 hour\",\n  [DurationOptions.Last3hours]: \"Last 3 hours\",\n  [DurationOptions.Last6hours]: \"Last 6 hours\",\n  [DurationOptions.Last12hours]: \"Last 12 hours\",\n  [DurationOptions.Last24hours]: \"Last 24 hours\",\n  [DurationOptions.Last2days]: \"Last 2 days\",\n  [DurationOptions.Last7days]: \"Last 7 days\",\n} as const;\n\ntype FilterByTimeProps = {\n  duration: DurationOptions;\n  onDurationChange: (value: DurationOptions) => void;\n  keyText: string;\n  ariaLabel: string;\n  disableToolbar: boolean;\n};\n\nexport const FilterByTime: VoidFunctionComponent<FilterByTimeProps> = ({\n  duration,\n  keyText,\n  ariaLabel,\n  disableToolbar,\n  onDurationChange,\n}) => {\n  const [isTimeSelectOpen, setIsTimeSelectOpen] = useState<boolean>(false);\n\n  const onTimeToggle = (isTimeSelectOpen: boolean) => {\n    setIsTimeSelectOpen(isTimeSelectOpen);\n  };\n\n  const onTimeSelect: SelectProps[\"onSelect\"] = (_, selection) => {\n    const mapping = Object.entries(DurationOptionsMap).find(\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      ([_, value]) => value === selection\n    );\n    if (mapping) {\n      onDurationChange(parseInt(mapping[0], 10) as DurationOptions);\n    }\n    setIsTimeSelectOpen(false);\n  };\n\n  const timeOptions = (keyText: string) => [\n    <SelectGroup label=\"Relative time ranges\" key={`${keyText}-group`}>\n      {Object.values(DurationOptionsMap).map((label, idx) => (\n        <SelectOption key={`${keyText}-${idx}`} value={label} />\n      ))}\n    </SelectGroup>,\n  ];\n  const ariaId = `filter-by-time-${Date.now()}`;\n  return (\n    <ToolbarItem>\n      <label hidden id={ariaId}>\n        {ariaLabel}\n      </label>\n      <Select\n        variant={SelectVariant.single}\n        aria-labelledby={ariaId}\n        onToggle={onTimeToggle}\n        onSelect={onTimeSelect}\n        selections={DurationOptionsMap[duration]}\n        isOpen={isTimeSelectOpen}\n        isDisabled={disableToolbar}\n      >\n        {timeOptions(keyText)}\n      </Select>\n    </ToolbarItem>\n  );\n};\n","import type { SelectProps } from \"@patternfly/react-core\";\nimport {\n  Select,\n  SelectGroup,\n  SelectOption,\n  SelectVariant,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { FilterIcon } from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport \"./FilterByTopic.css\";\n\nconst widths = {\n  default: \"150px\",\n  sm: \"150px\",\n  md: \"150px\",\n  lg: \"200px\",\n  xl: \"200px\",\n  \"2xl\": \"200px\",\n};\n\ntype FilterByTopicProps = {\n  selectedTopic: string | undefined;\n  topicList: string[];\n  disableToolbar: boolean;\n  ariaLabel: string;\n  onSetSelectedTopic: (value: string | undefined) => void;\n};\n\nexport const FilterByTopic: VoidFunctionComponent<FilterByTopicProps> = ({\n  selectedTopic,\n  topicList = [],\n  disableToolbar,\n  ariaLabel,\n  onSetSelectedTopic,\n}) => {\n  const { t } = useTranslation();\n  const [isTopicSelectOpen, setIsTopicSelectOpen] = useState<boolean>(false);\n  const [selectKey, setSelectKey] = useState(Math.random());\n\n  useEffect(() => setSelectKey(Math.random()), [topicList]);\n\n  const allTopicsLabel = t(\"metrics:all_topics\");\n\n  const onTopicToggle = (isTopicSelectOpen: boolean) => {\n    setIsTopicSelectOpen(isTopicSelectOpen);\n  };\n\n  const onTopicSelect: SelectProps[\"onSelect\"] = (_, selection) => {\n    selection !== allTopicsLabel\n      ? onSetSelectedTopic(selection as string)\n      : onSetSelectedTopic(undefined);\n    setIsTopicSelectOpen(false);\n  };\n\n  const onTopicFilter = (_: unknown, textInput: string) => {\n    const filteredTopics =\n      topicList.filter((topic) => topic.indexOf(textInput) != -1) || [];\n    return topicOptions(filteredTopics);\n  };\n\n  const topicOptions = (topicList: string[]) => [\n    <SelectOption key={\"topic-filter-0\"} value={allTopicsLabel} />,\n    <SelectGroup label=\"Filter by topic\" key=\"topic-filter-group\">\n      {topicList.map((topic, index) => (\n        <SelectOption\n          key={`topic-filter-${index + 1}`}\n          value={topic}\n          title={topic}\n        />\n      ))}\n    </SelectGroup>,\n  ];\n\n  const isDisabled = disableToolbar || topicList.length === 0;\n  const ariaId = `filter-by-topic-${Date.now()}`;\n\n  return (\n    <ToolbarItem widths={widths}>\n      <label hidden id={ariaId}>\n        {ariaLabel}\n      </label>\n      <Select\n        key={selectKey}\n        variant={SelectVariant.single}\n        onToggle={onTopicToggle}\n        onSelect={onTopicSelect}\n        selections={selectedTopic || allTopicsLabel}\n        isOpen={isTopicSelectOpen}\n        placeholderText={\n          <>\n            <FilterIcon /> {allTopicsLabel}\n          </>\n        }\n        aria-labelledby={ariaId}\n        onFilter={onTopicFilter}\n        isGrouped\n        hasInlineFilter\n        isDisabled={isDisabled}\n        position=\"left\"\n        className={\"appserv-metrics-filterbytopic\"}\n      >\n        {topicOptions(topicList)}\n      </Select>\n    </ToolbarItem>\n  );\n};\n","import { ToolbarItem } from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { FormatDate, RefreshButton } from \"@rhoas/app-services-ui-components\";\n\nexport type ToolbarRefreshProps = {\n  isRefreshing: boolean;\n  lastUpdated: Date | undefined;\n  ariaLabel: string;\n  onRefresh: () => void;\n};\n\nexport const ToolbarRefresh: VoidFunctionComponent<ToolbarRefreshProps> = ({\n  isRefreshing,\n  lastUpdated = new Date(),\n  ariaLabel,\n  onRefresh,\n}) => {\n  const { t } = useTranslation([\"metrics\"]);\n\n  return (\n    <>\n      <ToolbarItem>\n        <RefreshButton\n          ariaLabel={ariaLabel}\n          onClick={onRefresh}\n          isRefreshing={isRefreshing}\n        />\n      </ToolbarItem>\n      <ToolbarItem\n        alignment={{ default: \"alignRight\" }}\n        style={{ color: \"var(--pf-global--Color--200)\" }}\n      >\n        <div className=\"pf-u-font-size-xs\">\n          {isRefreshing ? (\n            t(\"metrics:refreshing\")\n          ) : (\n            <>\n              {t(\"metrics:last-refresh\")}\n              <br />\n              <FormatDate date={lastUpdated} format=\"distanceToNow\" />\n              {t(\"metrics:last-refresh-distance\")}\n            </>\n          )}\n        </div>\n      </ToolbarItem>\n    </>\n  );\n};\n","import {\n  CardHeader,\n  CardTitle,\n  Divider,\n  Toolbar,\n  ToolbarContent,\n} from \"@patternfly/react-core\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { DurationOptions } from \"../types\";\nimport { FilterByTime } from \"./FilterByTime\";\nimport { FilterByTopic } from \"./FilterByTopic\";\nimport type { ToolbarRefreshProps } from \"./ToolbarRefresh\";\nimport { ToolbarRefresh } from \"./ToolbarRefresh\";\n\ntype ToolbarTopicsMetricsProps = {\n  title: string;\n  selectedTopic: string | undefined;\n  topicList: string[];\n  duration: DurationOptions;\n  isDisabled: boolean;\n  onSetTimeDuration: (value: DurationOptions) => void;\n  onSetSelectedTopic: (value: string | undefined) => void;\n} & Omit<ToolbarRefreshProps, \"ariaLabel\">;\nexport const ToolbarTopicsMetrics: FunctionComponent<\n  ToolbarTopicsMetricsProps\n> = ({\n  title,\n  selectedTopic,\n  topicList,\n  duration,\n  isDisabled,\n  isRefreshing,\n  lastUpdated,\n  onSetTimeDuration,\n  onRefresh,\n  onSetSelectedTopic,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <CardHeader>\n        <CardTitle component=\"h2\">{title}</CardTitle>\n      </CardHeader>\n      <Divider />\n      <Toolbar>\n        <ToolbarContent>\n          <FilterByTopic\n            ariaLabel={t(\"metrics:topics_filter_by_topic\")}\n            selectedTopic={selectedTopic}\n            onSetSelectedTopic={onSetSelectedTopic}\n            topicList={topicList}\n            disableToolbar={isDisabled}\n          />\n          <FilterByTime\n            ariaLabel={t(\"metrics:topics_filter_by_time\")}\n            duration={duration}\n            onDurationChange={onSetTimeDuration}\n            disableToolbar={isDisabled}\n            keyText={\"topic-metrics-time-filter\"}\n          />\n          <ToolbarRefresh\n            isRefreshing={isRefreshing}\n            lastUpdated={lastUpdated}\n            onRefresh={onRefresh}\n            ariaLabel={t(\"metrics:topics_refresh\")}\n          />\n        </ToolbarContent>\n      </Toolbar>\n      <Divider />\n    </>\n  );\n};\n","import { Card, CardBody, CardTitle, Divider } from \"@patternfly/react-core\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type {\n  DurationOptions,\n  PartitionBytesMetric,\n  TimeSeriesMetrics,\n} from \"../types\";\nimport { CardBodyLoading } from \"./CardBodyLoading\";\nimport { ChartLinearWithOptionalLimit } from \"./ChartLinearWithOptionalLimit\";\nimport { ChartLogSizePerPartition } from \"./ChartLogSizePerPartition\";\nimport { ChartPopover } from \"./ChartPopover\";\nimport { ChartTotalBytes } from \"./ChartTotalBytes\";\nimport { EmptyStateNoMetricsData } from \"./EmptyStateNoMetricsData\";\nimport { EmptyStateNoMetricsDataForSelection } from \"./EmptyStateNoMetricsDataForSelection\";\nimport { EmptyStateNoTopics } from \"./EmptyStateNoTopics\";\nimport { EmptyStateNoTopicSelected } from \"./EmptyStateNoTopicSelected\";\nimport type { ToolbarRefreshProps } from \"./ToolbarRefresh\";\nimport { ToolbarTopicsMetrics } from \"./ToolbarTopicsMetrics\";\n\ntype CardTopicsMetricsProps = {\n  topics: string[];\n  incomingTopicsData: TimeSeriesMetrics;\n  outgoingTopicsData: TimeSeriesMetrics;\n  partitions: PartitionBytesMetric;\n  incomingMessageRate: TimeSeriesMetrics;\n  duration: DurationOptions;\n  backendUnavailable: boolean;\n  isInitialLoading: boolean;\n  isLoading: boolean;\n  isJustCreated: boolean;\n  selectedTopic: string | undefined;\n  onCreateTopic: () => void;\n  onSelectedTopic: (topic: string | undefined) => void;\n  onDurationChange: (duration: DurationOptions) => void;\n} & Omit<ToolbarRefreshProps, \"ariaLabel\">;\n\nexport const CardTopicsMetrics: FunctionComponent<CardTopicsMetricsProps> = ({\n  topics,\n  incomingTopicsData,\n  outgoingTopicsData,\n  incomingMessageRate,\n  selectedTopic,\n  duration,\n  partitions,\n  backendUnavailable,\n  isInitialLoading,\n  isLoading,\n  isRefreshing,\n  isJustCreated,\n  lastUpdated,\n  onCreateTopic,\n  onRefresh,\n  onSelectedTopic,\n  onDurationChange,\n}) => {\n  const { t } = useTranslation();\n  const noTopics = topics.length === 0;\n  const selectedTopicNotInList =\n    selectedTopic !== undefined &&\n    topics.find((t) => t === selectedTopic) === undefined;\n  const chartEmptyState = selectedTopicNotInList ? (\n    <EmptyStateNoMetricsDataForSelection />\n  ) : (\n    <EmptyStateNoMetricsData />\n  );\n  return (\n    <Card data-testid={\"metrics-topics\"}>\n      <ToolbarTopicsMetrics\n        title={t(\"metrics:topic_metrics\")}\n        duration={duration}\n        onSetTimeDuration={onDurationChange}\n        isDisabled={\n          backendUnavailable || isJustCreated || noTopics || isLoading\n        }\n        isRefreshing={isRefreshing}\n        selectedTopic={selectedTopic}\n        onSetSelectedTopic={onSelectedTopic}\n        onRefresh={onRefresh}\n        topicList={topics}\n        lastUpdated={lastUpdated}\n      />\n      {(() => {\n        switch (true) {\n          case isInitialLoading:\n            return <CardBodyLoading />;\n\n          case backendUnavailable:\n            return (\n              <CardBody>\n                <EmptyStateNoMetricsData />\n              </CardBody>\n            );\n\n          case isJustCreated && !noTopics:\n            return (\n              <CardBody>\n                <EmptyStateNoTopics />\n              </CardBody>\n            );\n\n          case isJustCreated && noTopics:\n            return (\n              <CardBody>\n                <EmptyStateNoTopics onCreateTopic={onCreateTopic} />\n              </CardBody>\n            );\n\n          case selectedTopic !== undefined:\n            return (\n              <>\n                <TotalBytesTitle />\n                <CardBody>\n                  <ChartTotalBytes\n                    incomingTopicsData={incomingTopicsData}\n                    outgoingTopicsData={outgoingTopicsData}\n                    selectedTopic={selectedTopic}\n                    duration={duration}\n                    isLoading={isLoading}\n                    emptyState={chartEmptyState}\n                  />\n                </CardBody>\n                <Divider />\n                <IncomingMessageRate />\n                <CardBody>\n                  <ChartLinearWithOptionalLimit\n                    chartName={t(\"metrics:topic_incoming_message_rate\")}\n                    yLabel={t(\"metrics:topic_incoming_message_rate_y_axis\")}\n                    metrics={incomingMessageRate}\n                    duration={duration}\n                    isLoading={isLoading}\n                    emptyState={chartEmptyState}\n                  />\n                </CardBody>\n                <Divider />\n                <PartitionSizeTitle />\n                <CardBody>\n                  <ChartLogSizePerPartition\n                    partitions={partitions}\n                    topic={selectedTopic}\n                    duration={duration}\n                    isLoading={isLoading}\n                    emptyState={chartEmptyState}\n                  />\n                </CardBody>\n              </>\n            );\n\n          default:\n            return (\n              <>\n                <TotalBytesTitle />\n                <CardBody>\n                  <ChartTotalBytes\n                    incomingTopicsData={incomingTopicsData}\n                    outgoingTopicsData={outgoingTopicsData}\n                    selectedTopic={selectedTopic}\n                    duration={duration}\n                    isLoading={isLoading}\n                    emptyState={chartEmptyState}\n                  />\n                </CardBody>\n                <Divider />\n                <IncomingMessageRate />\n                <CardBody>\n                  <ChartLinearWithOptionalLimit\n                    chartName={t(\"metrics:topic_incoming_message_rate\")}\n                    yLabel={t(\"metrics:topic_incoming_message_rate_y_axis\")}\n                    metrics={incomingMessageRate}\n                    duration={duration}\n                    isLoading={isLoading}\n                    emptyState={chartEmptyState}\n                  />\n                </CardBody>\n                <Divider />\n                <PartitionSizeTitle />\n                <CardBody>\n                  <EmptyStateNoTopicSelected />\n                </CardBody>\n              </>\n            );\n        }\n      })()}\n    </Card>\n  );\n};\n\nconst TotalBytesTitle: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <CardTitle component=\"h3\">\n      {t(\"metrics:total_bytes\")}{\" \"}\n      <ChartPopover\n        title={t(\"metrics:total_bytes_popover_header\")}\n        description={t(\"metrics:topic_metrics_help_text\")}\n      />\n    </CardTitle>\n  );\n};\n\nconst PartitionSizeTitle: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <CardTitle component=\"h3\">\n      {t(\"metrics:topic_partition_size\")}{\" \"}\n      <ChartPopover\n        title={t(\"metrics:topic_partition_size_popover_header\")}\n        description={t(\"metrics:topic_partition_size_help_text\")}\n      />\n    </CardTitle>\n  );\n};\n\nconst IncomingMessageRate: FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <CardTitle component=\"h3\">\n      {t(\"metrics:topic_incoming_message_rate\")}{\" \"}\n      <ChartPopover\n        title={t(\"metrics:topic_incoming_message_rate_popover_header\")}\n        description={t(\"metrics:topic_incoming_message_rate_help_text\")}\n      />\n    </CardTitle>\n  );\n};\n","import type { FunctionComponent } from \"react\";\nimport {\n  CardHeader,\n  CardTitle,\n  Divider,\n  Toolbar,\n  ToolbarContent,\n} from \"@patternfly/react-core\";\nimport { FilterByTime } from \"./FilterByTime\";\nimport type { DurationOptions } from \"../types\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { ToolbarRefreshProps } from \"./ToolbarRefresh\";\nimport { ToolbarRefresh } from \"./ToolbarRefresh\";\n\ntype ToolbarKafkaInstanceMetricProps = {\n  title: string;\n  isDisabled: boolean;\n  duration: DurationOptions;\n  onSetTimeDuration: (value: DurationOptions) => void;\n} & Omit<ToolbarRefreshProps, \"ariaLabel\">;\nexport const ToolbarKafkaInstanceMetric: FunctionComponent<\n  ToolbarKafkaInstanceMetricProps\n> = ({\n  title,\n  isDisabled,\n  isRefreshing,\n  lastUpdated,\n  duration,\n  onSetTimeDuration,\n  onRefresh,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <CardHeader>\n        <CardTitle component=\"h2\">{title}</CardTitle>\n      </CardHeader>\n      <Divider />\n      <Toolbar>\n        <ToolbarContent>\n          <FilterByTime\n            ariaLabel={t(\"metrics:kafka_instance_filter_by_time\")}\n            duration={duration}\n            onDurationChange={onSetTimeDuration}\n            keyText={\"kafka-metrics-time-filter\"}\n            disableToolbar={isDisabled}\n          />\n          <ToolbarRefresh\n            isRefreshing={isRefreshing}\n            lastUpdated={lastUpdated}\n            onRefresh={onRefresh}\n            ariaLabel={t(\"metrics:kafka_instance_refresh\")}\n          />\n        </ToolbarContent>\n      </Toolbar>\n      <Divider />\n    </>\n  );\n};\n","import { Card, CardBody, CardTitle, Divider } from \"@patternfly/react-core\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { DurationOptions, TimeSeriesMetrics } from \"../types\";\nimport { CardBodyLoading } from \"./CardBodyLoading\";\nimport { ChartPopover } from \"./ChartPopover\";\nimport { ChartLinearWithOptionalLimit } from \"./ChartLinearWithOptionalLimit\";\nimport { EmptyStateMetricsUnavailable } from \"./EmptyStateMetricsUnavailable\";\nimport { ToolbarKafkaInstanceMetric } from \"./ToolbarKafkaInstanceMetric\";\nimport { formatBytes } from \"./utils\";\nimport { EmptyStateNoMetricsData } from \"./EmptyStateNoMetricsData\";\nimport type { ToolbarRefreshProps } from \"./ToolbarRefresh\";\n\nexport type CardKafkaInstanceMetricsLimits = {\n  diskSpaceLimit: number;\n  connectionsLimit: number;\n  connectionRateLimit: number;\n};\n\nexport type CardKafkaInstanceMetricsProps = {\n  usedDiskMetrics: TimeSeriesMetrics;\n  clientConnectionsMetrics: TimeSeriesMetrics;\n  connectionAttemptRateMetrics: TimeSeriesMetrics;\n  duration: DurationOptions;\n  lastUpdated: Date | undefined;\n  backendUnavailable: boolean;\n  isInitialLoading: boolean;\n  isLoading: boolean;\n  isJustCreated: boolean;\n  onDurationChange: (duration: DurationOptions) => void;\n} & Omit<ToolbarRefreshProps, \"ariaLabel\"> &\n  CardKafkaInstanceMetricsLimits;\n\ntype ChartTitleProps = {\n  title: string;\n  helperText: string;\n};\n\nexport const CardKafkaInstanceMetrics: FunctionComponent<\n  CardKafkaInstanceMetricsProps\n> = ({\n  usedDiskMetrics,\n  clientConnectionsMetrics,\n  connectionAttemptRateMetrics,\n  duration,\n  lastUpdated,\n  backendUnavailable,\n  isInitialLoading,\n  isLoading,\n  isRefreshing,\n  isJustCreated,\n  diskSpaceLimit,\n  connectionsLimit,\n  connectionRateLimit,\n  onRefresh,\n  onDurationChange,\n}) => {\n  const { t } = useTranslation(\"metrics\");\n\n  return (\n    <Card data-testid={\"metrics-kafka-instance\"}>\n      <ToolbarKafkaInstanceMetric\n        title={t(\"kafka_instance_metrics\")}\n        duration={duration}\n        lastUpdated={lastUpdated}\n        onSetTimeDuration={onDurationChange}\n        isDisabled={backendUnavailable || isJustCreated || isLoading}\n        isRefreshing={isRefreshing}\n        onRefresh={onRefresh}\n      />\n      {(() => {\n        switch (true) {\n          case isInitialLoading:\n            return <CardBodyLoading />;\n\n          case backendUnavailable:\n            return (\n              <CardBody>\n                <EmptyStateNoMetricsData />\n              </CardBody>\n            );\n\n          case isJustCreated:\n            return (\n              <CardBody>\n                <EmptyStateMetricsUnavailable />\n              </CardBody>\n            );\n\n          default:\n            return (\n              <>\n                <ChartTitle\n                  title={t(\"used_disk_space\")}\n                  helperText={t(\"used_disk_space_help_text\")}\n                />\n                <CardBody>\n                  <ChartLinearWithOptionalLimit\n                    chartName={t(\"used_disk_space\")}\n                    yLabel={t(\"axis-label-bytes\")}\n                    metrics={usedDiskMetrics}\n                    duration={duration}\n                    formatValue={formatBytes}\n                    usageLimit={diskSpaceLimit}\n                    isLoading={isLoading}\n                    emptyState={<EmptyStateNoMetricsData />}\n                  />\n                </CardBody>\n                <Divider />\n                <ChartTitle\n                  title={t(\"client_connections\")}\n                  helperText={t(\"client_connections_helper_text\")}\n                />\n                <CardBody>\n                  <ChartLinearWithOptionalLimit\n                    chartName={t(\"client_connections\")}\n                    yLabel={t(\"client_connections_y_axis\")}\n                    metrics={clientConnectionsMetrics}\n                    duration={duration}\n                    usageLimit={connectionsLimit}\n                    isLoading={isLoading}\n                    emptyState={<EmptyStateNoMetricsData />}\n                  />\n                </CardBody>\n                <Divider />\n                <ChartTitle\n                  title={t(\"connection_attempt_rate\")}\n                  helperText={t(\"connection_attempt_rate_help_text\")}\n                />\n                <CardBody>\n                  <ChartLinearWithOptionalLimit\n                    chartName={t(\"connection_attempt_rate\")}\n                    yLabel={t(\"connection_attempt_rate_yaxis\")}\n                    metrics={connectionAttemptRateMetrics}\n                    duration={duration}\n                    usageLimit={connectionRateLimit}\n                    isLoading={isLoading}\n                    emptyState={<EmptyStateNoMetricsData />}\n                  />\n                </CardBody>\n              </>\n            );\n        }\n      })()}\n    </Card>\n  );\n};\n\nexport const ChartTitle: FunctionComponent<ChartTitleProps> = ({\n  title,\n  helperText,\n}) => {\n  return (\n    <CardTitle component=\"h3\">\n      {title} <ChartPopover title={title} description={helperText} />\n    </CardTitle>\n  );\n};\n","import {\n  Bullseye,\n  Card,\n  CardBody,\n  CardTitle,\n  Skeleton,\n  Title,\n} from \"@patternfly/react-core\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { ChartPopover } from \"./ChartPopover\";\nimport { EmptyStateNoMetricsData } from \"./EmptyStateNoMetricsData\";\n\ntype CardKpiProps = {\n  metric: string | number | undefined;\n  name: string;\n  popover: string;\n  isLoading: boolean;\n};\n\nexport const CardKpi: VoidFunctionComponent<CardKpiProps> = ({\n  metric,\n  name,\n  popover,\n  isLoading,\n}) => {\n  return (\n    <Card isFullHeight data-testid={name}>\n      <CardTitle component=\"h3\">\n        {name} <ChartPopover title={name} description={popover} />\n      </CardTitle>\n      <CardBody>\n        {!isLoading &&\n          (metric === undefined ? (\n            <Bullseye>\n              <EmptyStateNoMetricsData />\n            </Bullseye>\n          ) : (\n            <Title\n              headingLevel=\"h3\"\n              size=\"4xl\"\n              aria-valuetext={`${metric} ${name}`}\n            >\n              {metric}\n            </Title>\n          ))}\n        {isLoading && <Skeleton width=\"50px\" shape=\"square\" />}\n      </CardBody>\n    </Card>\n  );\n};\n","import type { VoidFunctionComponent } from \"react\";\nimport { Alert, AlertActionCloseButton } from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\n\nexport type MetricsLagAlertProps = {\n  isClosed: boolean;\n  onClickClose: () => void;\n};\n\nexport const MetricsLagAlert: VoidFunctionComponent<MetricsLagAlertProps> = ({\n  isClosed,\n  onClickClose,\n}) => {\n  const { t } = useTranslation(\"metrics\");\n\n  if (!isClosed) {\n    return (\n      <Alert\n        isInline\n        variant=\"info\"\n        title={t(\"metrics_lag_title\")}\n        actionClose={<AlertActionCloseButton onClose={onClickClose} />}\n      >\n        <p>{t(\"metrics_lag_description\")}</p>\n      </Alert>\n    );\n  } else {\n    return <> </>;\n  }\n};\n","import {\n  Alert,\n  AlertVariant,\n  Bullseye,\n  Card,\n  CardBody,\n  CardFooter,\n  CardTitle,\n  Skeleton,\n  Text,\n  TextContent,\n  Title,\n} from \"@patternfly/react-core\";\nimport {\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n} from \"@patternfly/react-icons\";\nimport type { VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { ChartPopover } from \"./ChartPopover\";\nimport { EmptyStateNoMetricsData } from \"./EmptyStateNoMetricsData\";\n\ntype PartitionCardProps = {\n  metric: number | undefined;\n  isLoading: boolean;\n  topicPartitionsLimit: number | undefined;\n};\n\nexport const PartitionCard: VoidFunctionComponent<PartitionCardProps> = ({\n  metric,\n  isLoading,\n  topicPartitionsLimit = 0,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <Card\n      isFullHeight\n      data-testid={t(\"metrics:metric_kpi_topicPartitions_name\")}\n    >\n      <CardTitle component=\"h3\">\n        {t(\"metrics:metric_kpi_topicPartitions_name\")}{\" \"}\n        <ChartPopover\n          title={t(\"metrics:metric_kpi_topicPartitions_name\")}\n          description={t(\"metrics:metric_kpi_topicPartitions_description\")}\n        />\n      </CardTitle>\n      <CardBody>\n        {!isLoading &&\n          (metric === undefined ? (\n            <Bullseye>\n              <EmptyStateNoMetricsData />\n            </Bullseye>\n          ) : (\n            <>\n              <Title\n                headingLevel=\"h3\"\n                size=\"4xl\"\n                aria-valuetext={`${metric} ${t(\n                  \"metrics:metric_kpi_topicPartitions_name\"\n                )}`}\n              >\n                {metric}{\" \"}\n                {(() => {\n                  if (metric >= topicPartitionsLimit) {\n                    return (\n                      <ExclamationCircleIcon color=\"var(--pf-global--danger-color--100)\" />\n                    );\n                  } else if (metric >= topicPartitionsLimit * 0.95) {\n                    return (\n                      <ExclamationTriangleIcon color=\"var(--pf-global--warning-color--100)\" />\n                    );\n                  } else {\n                    return \"\";\n                  }\n                })()}\n              </Title>\n              <TextContent>\n                <Text>\n                  {t(\"metrics:partition_limit\", {\n                    topic: topicPartitionsLimit,\n                  })}\n                </Text>\n              </TextContent>\n            </>\n          ))}\n        {isLoading && <Skeleton width=\"50px\" shape=\"square\" />}\n      </CardBody>\n      {(() => {\n        if (metric && metric >= topicPartitionsLimit) {\n          return (\n            <CardFooter>\n              <Alert\n                isExpandable\n                isInline\n                variant={AlertVariant.danger}\n                title={t(\"metrics:partition_limit_reached_title\")}\n              >\n                <p>{t(\"metrics:partition_limit_reached_description_1\")}</p>\n                <p>{t(\"metrics:partition_limit_reached_description_2\")}</p>\n              </Alert>\n            </CardFooter>\n          );\n        } else if (metric && metric >= topicPartitionsLimit * 0.95) {\n          return (\n            <CardFooter>\n              <Alert\n                role={\"alert\"}\n                isExpandable\n                isInline\n                variant={AlertVariant.warning}\n                title={t(\"metrics:partition_limit_approaching_title\")}\n              >\n                <p>\n                  {t(\"metrics:partition_limit_approaching_description_1\", {\n                    limit: topicPartitionsLimit,\n                  })}\n                </p>\n                <p>{t(\"metrics:partition_limit_approaching_description_2\")}</p>\n              </Alert>\n            </CardFooter>\n          );\n        } else {\n          return \" \";\n        }\n      })()}\n    </Card>\n  );\n};\n","import { assign, createMachine } from \"xstate\";\nimport type {\n  GetKafkaInstanceMetricsResponse,\n  TimeSeriesMetrics,\n} from \"../types\";\nimport { DurationOptions } from \"../types\";\n\nconst MAX_RETRIES = 3;\n\nconst apiState = {\n  initial: \"loading\",\n  states: {\n    loading: {\n      invoke: {\n        src: \"api\",\n      },\n      on: {\n        fetchFail: {\n          actions: \"incrementRetries\",\n          target: \"failure\",\n        },\n      },\n    },\n    failure: {\n      after: {\n        1000: [\n          { cond: \"canRetryFetching\", target: \"loading\" },\n          { target: \"#kafkaInstanceMetrics.criticalFail\" },\n        ],\n      },\n    },\n  },\n};\n\nexport type KafkaInstanceMetricsMachineContext = {\n  lastUpdated: Date | undefined;\n\n  // from the UI elements\n  duration: DurationOptions;\n\n  // from the api\n  usedDiskSpaceMetrics: TimeSeriesMetrics;\n  clientConnectionsMetrics: TimeSeriesMetrics;\n  connectionAttemptRateMetrics: TimeSeriesMetrics;\n  diskSpaceLimit: number | undefined;\n  connectionsLimit: number | undefined;\n  connectionRateLimit: number | undefined;\n  // how many time did we try a fetch (that combines more api)\n  fetchFailures: number;\n};\n\nexport const KafkaInstanceMetricsMachine = createMachine(\n  {\n    predictableActionArguments: true,\n    tsTypes: {} as import(\"./KafkaInstanceMetricsMachine.typegen\").Typegen0,\n    schema: {\n      context: {} as KafkaInstanceMetricsMachineContext,\n      events: {} as\n        | ({ type: \"fetchSuccess\" } & GetKafkaInstanceMetricsResponse)\n        | { type: \"fetchFail\" }\n        // to refresh the data\n        | { type: \"refresh\" }\n        // from the UI elements\n        | { type: \"selectTopic\"; topic: string | undefined }\n        | { type: \"selectDuration\"; duration: DurationOptions },\n    },\n    id: \"kafkaInstanceMetrics\",\n    context: {\n      lastUpdated: undefined,\n      duration: DurationOptions.Last1hour,\n      usedDiskSpaceMetrics: {},\n      clientConnectionsMetrics: {},\n      connectionAttemptRateMetrics: {},\n      diskSpaceLimit: undefined,\n      connectionsLimit: undefined,\n      connectionRateLimit: undefined,\n      fetchFailures: 0,\n    },\n    initial: \"initialLoading\",\n    states: {\n      initialLoading: {\n        ...apiState,\n        tags: \"initialLoading\",\n        entry: \"setFetchTimestamp\",\n        on: {\n          fetchSuccess: [\n            {\n              cond: \"isJustCreated\",\n              actions: \"setMetrics\",\n              target: \"#kafkaInstanceMetrics.withResponse\",\n            },\n            { actions: \"setMetrics\", target: \"justCreated\" },\n          ],\n        },\n      },\n      callApi: {\n        ...apiState,\n        tags: \"loading\",\n        entry: \"setFetchTimestamp\",\n        on: {\n          fetchSuccess: {\n            actions: \"setMetrics\",\n            target: \"#kafkaInstanceMetrics.withResponse\",\n          },\n        },\n      },\n      criticalFail: {\n        tags: \"failed\",\n        on: {\n          refresh: {\n            actions: \"resetRetries\",\n            target: \"callApi\",\n          },\n        },\n      },\n      justCreated: {\n        tags: \"justCreated\",\n        on: {\n          refresh: {\n            target: \"initialLoading\",\n          },\n        },\n      },\n      withResponse: {\n        tags: \"withResponse\",\n        on: {\n          refresh: {\n            target: \"refreshing\",\n          },\n          selectDuration: {\n            actions: \"setDuration\",\n            target: \"callApi\",\n          },\n        },\n      },\n      refreshing: {\n        tags: \"refreshing\",\n        entry: \"setFetchTimestamp\",\n        invoke: {\n          src: \"api\",\n        },\n        on: {\n          fetchSuccess: {\n            actions: \"setMetrics\",\n            target: \"withResponse\",\n          },\n          fetchFail: {\n            // 👀 we silently ignore this happened and go back to the right\n            // state depending on the previous data\n            target: \"withResponse\",\n          },\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      setFetchTimestamp: assign({\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        lastUpdated: (_context) => new Date(),\n      }),\n      setMetrics: assign((_, event) => {\n        const {\n          usedDiskSpaceMetrics,\n          clientConnectionsMetrics,\n          connectionAttemptRateMetrics,\n          diskSpaceLimit,\n          connectionsLimit,\n          connectionRateLimit,\n        } = event;\n        return {\n          usedDiskSpaceMetrics,\n          clientConnectionsMetrics,\n          connectionAttemptRateMetrics,\n          diskSpaceLimit: diskSpaceLimit * 1024 ** 3, // convert it to GiB\n          connectionsLimit,\n          connectionRateLimit,\n        };\n      }),\n      incrementRetries: assign({\n        fetchFailures: (context) => context.fetchFailures + 1,\n      }),\n      resetRetries: assign({\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        fetchFailures: (_context) => 0,\n      }),\n      setDuration: assign((_context, event) => ({\n        duration: event.duration,\n        usedDiskSpaceMetrics: {},\n        clientConnectionsMetrics: {},\n        connectionAttemptRateMetrics: {},\n      })),\n    },\n    guards: {\n      canRetryFetching: (context) => context.fetchFailures < MAX_RETRIES,\n      isJustCreated: (_, event) => {\n        if (event.type === \"fetchSuccess\") {\n          return (\n            Object.keys(event.clientConnectionsMetrics).length > 0 ||\n            Object.keys(event.connectionAttemptRateMetrics).length > 0 ||\n            Object.keys(event.usedDiskSpaceMetrics).length > 0\n          );\n        }\n        return false;\n      },\n    },\n  }\n);\n\nexport type KafkaInstanceMetricsMachineType =\n  typeof KafkaInstanceMetricsMachine;\n","import { assign, createMachine } from \"xstate\";\nimport type {\n  GetTopicsMetricsResponse,\n  PartitionBytesMetric,\n  TimeSeriesMetrics,\n} from \"../types\";\nimport { DurationOptions } from \"../types\";\n\nconst MAX_RETRIES = 3;\n\nconst apiState = {\n  initial: \"loading\",\n  states: {\n    loading: {\n      invoke: {\n        src: \"api\",\n      },\n      on: {\n        fetchFail: {\n          actions: \"incrementRetries\",\n          target: \"failure\",\n        },\n      },\n    },\n    failure: {\n      after: {\n        1000: [\n          { cond: \"canRetryFetching\", target: \"loading\" },\n          { target: \"#topicsMetrics.criticalFail\" },\n        ],\n      },\n    },\n  },\n};\n\nexport type TopicsMetricsMachineContext = {\n  lastUpdated: Date | undefined;\n\n  // from the UI elements\n  selectedTopic: string | undefined;\n  duration: DurationOptions;\n\n  // from the api\n  kafkaTopics: string[];\n  metricsTopics: string[];\n  bytesOutgoing: TimeSeriesMetrics;\n  bytesIncoming: TimeSeriesMetrics;\n  bytesPerPartition: PartitionBytesMetric;\n  incomingMessageRate: TimeSeriesMetrics;\n\n  // how many time did we try a fetch (that combines more api)\n  fetchFailures: number;\n};\n\nexport const TopicsMetricsMachine = createMachine(\n  {\n    tsTypes: {} as import(\"./TopicsMetricsMachine.typegen\").Typegen0,\n    predictableActionArguments: true,\n    schema: {\n      context: {} as TopicsMetricsMachineContext,\n      events: {} as  // called when a new kafka id has been specified\n        | ({ type: \"fetchSuccess\" } & GetTopicsMetricsResponse)\n        | { type: \"fetchFail\" }\n\n        // to refresh the data\n        | { type: \"refresh\" }\n\n        // from the UI elements\n        | { type: \"selectTopic\"; topic: string | undefined }\n        | { type: \"selectDuration\"; duration: DurationOptions },\n    },\n    id: \"topicsMetrics\",\n    context: {\n      lastUpdated: undefined,\n\n      // from the UI elements\n      selectedTopic: undefined,\n      duration: DurationOptions.Last1hour,\n\n      // from the api\n      kafkaTopics: [],\n      metricsTopics: [],\n      bytesOutgoing: {},\n      bytesIncoming: {},\n      bytesPerPartition: {},\n      incomingMessageRate: {},\n\n      // how many time did we try a fetch (that combines more api)\n      fetchFailures: 0,\n    },\n    initial: \"initialLoading\",\n    states: {\n      initialLoading: {\n        ...apiState,\n        tags: \"initialLoading\",\n        entry: \"setFetchTimestamp\",\n        on: {\n          fetchSuccess: [\n            {\n              cond: \"isJustCreated\",\n              actions: \"setMetrics\",\n              target: \"#topicsMetrics.withResponse\",\n            },\n            { actions: \"setMetrics\", target: \"justCreated\" },\n          ],\n        },\n      },\n      callApi: {\n        ...apiState,\n        tags: \"loading\",\n        entry: \"setFetchTimestamp\",\n        on: {\n          fetchSuccess: {\n            actions: \"setMetrics\",\n            target: \"#topicsMetrics.withResponse\",\n          },\n        },\n      },\n      criticalFail: {\n        tags: \"failed\",\n        on: {\n          refresh: {\n            actions: \"resetRetries\",\n            target: \"callApi\",\n          },\n        },\n      },\n      justCreated: {\n        tags: \"justCreated\",\n        on: {\n          refresh: {\n            target: \"initialLoading\",\n          },\n        },\n      },\n      withResponse: {\n        tags: \"withResponse\",\n        initial: \"idle\",\n        states: {\n          idle: {},\n          refreshing: {\n            tags: \"refreshing\",\n            entry: \"setFetchTimestamp\",\n            invoke: {\n              src: \"api\",\n            },\n            on: {\n              fetchSuccess: {\n                actions: \"setMetrics\",\n                target: \"#topicsMetrics.withResponse\",\n              },\n              fetchFail: {\n                // 👀 we silently ignore this happened\n                target: \"#topicsMetrics.withResponse\",\n              },\n            },\n          },\n        },\n        on: {\n          refresh: {\n            target: \"#topicsMetrics.withResponse.refreshing\",\n          },\n          selectTopic: {\n            actions: \"setTopic\",\n            target: \"callApi\",\n          },\n          selectDuration: {\n            actions: \"setDuration\",\n            target: \"callApi\",\n          },\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      setFetchTimestamp: assign({\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        lastUpdated: (_context) => new Date(),\n      }),\n      setMetrics: assign((_context, event) => {\n        const {\n          kafkaTopics,\n          metricsTopics,\n          bytesPerPartition,\n          bytesIncoming,\n          bytesOutgoing,\n          incomingMessageRate,\n        } = event;\n        return {\n          kafkaTopics,\n          metricsTopics,\n          bytesPerPartition,\n          bytesIncoming,\n          bytesOutgoing,\n          incomingMessageRate,\n        };\n      }),\n      incrementRetries: assign({\n        fetchFailures: (context) => context.fetchFailures + 1,\n      }),\n      resetRetries: assign({\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        fetchFailures: (_context) => 0,\n      }),\n      setTopic: assign({\n        selectedTopic: (_context, event) => event.topic,\n      }),\n      setDuration: assign({\n        duration: (_, event) => event.duration,\n      }),\n    },\n    guards: {\n      canRetryFetching: (context) => context.fetchFailures < MAX_RETRIES,\n      isJustCreated: (_, event) => {\n        if (event.type === \"fetchSuccess\") {\n          return (\n            Object.keys(event.bytesIncoming).length > 0 ||\n            Object.keys(event.bytesOutgoing).length > 0 ||\n            Object.keys(event.bytesPerPartition).length > 0 ||\n            Object.keys(event.incomingMessageRate).length > 0\n          );\n        }\n        return false;\n      },\n    },\n  }\n);\n\nexport type TopicsMetricsMachineType = typeof TopicsMetricsMachine;\n","import { assign, createMachine } from \"xstate\";\nimport type { GetMetricsKpiResponse } from \"../types\";\n\nconst MAX_RETRIES = 3;\n\nconst apiState = {\n  initial: \"loading\",\n  states: {\n    loading: {\n      invoke: {\n        src: \"api\",\n      },\n      on: {\n        fetchFail: {\n          actions: \"incrementRetries\",\n          target: \"failure\",\n        },\n      },\n    },\n    failure: {\n      after: {\n        1000: [\n          { cond: \"canRetryFetching\", target: \"loading\" },\n          { target: \"#kpis.criticalFail\" },\n        ],\n      },\n    },\n  },\n};\n\nexport type MetricsKpiMachineContext = {\n  // from the api\n  topics: number | undefined;\n  topicPartitions: number | undefined;\n  consumerGroups: number | undefined;\n  topicPartitionsLimit: number | undefined;\n\n  // how many time did we try a fetch (that combines more api)\n  fetchFailures: number;\n};\n\nexport const MetricsKpiMachine = createMachine(\n  {\n    tsTypes: {} as import(\"./MetricsKpiMachine.typegen\").Typegen0,\n    predictableActionArguments: true,\n    schema: {\n      context: {} as MetricsKpiMachineContext,\n      events: {} as\n        | { type: \"fetch\" }\n        | ({ type: \"fetchSuccess\" } & GetMetricsKpiResponse)\n        | { type: \"fetchFail\" }\n        | { type: \"refresh\" },\n    },\n    id: \"kpis\",\n    context: {\n      topics: undefined,\n      topicPartitions: undefined,\n      consumerGroups: undefined,\n      topicPartitionsLimit: undefined,\n      fetchFailures: 0,\n    },\n    initial: \"initialLoading\",\n    states: {\n      initialLoading: {\n        ...apiState,\n        tags: \"initialLoading\",\n        on: {\n          fetchSuccess: [\n            {\n              cond: \"isJustCreated\",\n              actions: \"setMetrics\",\n              target: \"#kpis.withResponse\",\n            },\n            { actions: \"setMetrics\", target: \"justCreated\" },\n          ],\n        },\n      },\n      callApi: {\n        ...apiState,\n        tags: \"loading\",\n        on: {\n          fetchSuccess: {\n            actions: \"setMetrics\",\n            target: \"#kpis.withResponse\",\n          },\n        },\n      },\n      criticalFail: {\n        tags: \"failed\",\n        on: {\n          refresh: {\n            actions: \"resetRetries\",\n            target: \"callApi\",\n          },\n        },\n      },\n      justCreated: {\n        tags: \"justCreated\",\n        on: {\n          refresh: {\n            target: \"initialLoading\",\n          },\n        },\n      },\n      withResponse: {\n        tags: \"withResponse\",\n        initial: \"idle\",\n        states: {\n          idle: {},\n          refreshing: {\n            tags: \"refreshing\",\n            invoke: {\n              src: \"api\",\n            },\n            on: {\n              fetchSuccess: {\n                actions: \"setMetrics\",\n                target: \"#kpis.withResponse\",\n              },\n              fetchFail: {\n                // 👀 we silently ignore this happened\n                target: \"#kpis.withResponse\",\n              },\n            },\n          },\n        },\n        on: {\n          refresh: {\n            target: \"#kpis.withResponse.refreshing\",\n          },\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      setMetrics: assign((_, event) => {\n        const {\n          topics,\n          topicPartitions,\n          consumerGroups,\n          topicPartitionsLimit,\n        } = event;\n        return {\n          topics,\n          topicPartitions,\n          consumerGroups,\n          topicPartitionsLimit,\n        };\n      }),\n\n      incrementRetries: assign({\n        fetchFailures: (context) => context.fetchFailures + 1,\n      }),\n\n      resetRetries: assign({\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        fetchFailures: (_context) => 0,\n      }),\n    },\n    guards: {\n      canRetryFetching: (context) => context.fetchFailures < MAX_RETRIES,\n      isJustCreated: (_, event) => {\n        if (event.type === \"fetchSuccess\") {\n          return (\n            event.topics !== undefined ||\n            event.topicPartitions !== undefined ||\n            event.consumerGroups !== undefined ||\n            event.topicPartitionsLimit !== undefined\n          );\n        }\n        return false;\n      },\n    },\n  }\n);\n\nexport type MetricsKpiMachineType = typeof MetricsKpiMachine;\n","import { useInterpret } from \"@xstate/react\";\nimport type { FunctionComponent } from \"react\";\nimport { createContext } from \"react\";\nimport type { ActorRefFrom } from \"xstate\";\nimport { timeIntervalsMapping } from \"./consts\";\nimport type { KafkaInstanceMetricsMachineType } from \"./machines\";\nimport { KafkaInstanceMetricsMachine } from \"./machines\";\nimport type { DurationOptions, GetKafkaInstanceMetricsResponse } from \"./types\";\n\nexport const KafkaInstanceMetricsContext = createContext<{\n  service: ActorRefFrom<KafkaInstanceMetricsMachineType>;\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n}>(null!);\n\nexport type KafkaInstanceMetricsProviderProps = {\n  getKafkaInstanceMetrics: (options: {\n    duration: DurationOptions;\n    interval: number;\n  }) => Promise<GetKafkaInstanceMetricsResponse>;\n};\nexport const KafkaInstanceMetricsProvider: FunctionComponent<\n  KafkaInstanceMetricsProviderProps\n> = ({ children, getKafkaInstanceMetrics }) => {\n  const service = useInterpret(\n    () =>\n      KafkaInstanceMetricsMachine.withConfig({\n        services: {\n          api: (context) => {\n            return (callback) => {\n              getKafkaInstanceMetrics({\n                duration: context.duration,\n                interval: timeIntervalsMapping[context.duration].interval,\n              })\n                .then((results) =>\n                  callback({ type: \"fetchSuccess\", ...results })\n                )\n                .catch((e) => {\n                  console.error(\"Failed fetching data\", e);\n                  callback(\"fetchFail\");\n                });\n            };\n          },\n        },\n      }),\n    {\n      devTools: true,\n    }\n  );\n  return (\n    <KafkaInstanceMetricsContext.Provider\n      value={{\n        service,\n      }}\n    >\n      {children}\n    </KafkaInstanceMetricsContext.Provider>\n  );\n};\n","import { useInterpret } from \"@xstate/react\";\nimport type { FunctionComponent } from \"react\";\nimport { createContext } from \"react\";\nimport type { ActorRefFrom } from \"xstate\";\nimport type { MetricsKpiMachineType } from \"./machines\";\nimport { MetricsKpiMachine } from \"./machines\";\nimport type { GetMetricsKpiResponse } from \"./types\";\n\nexport const MetricsKpiContext = createContext<{\n  service: ActorRefFrom<MetricsKpiMachineType>;\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n}>(null!);\n\nexport type MetricsKpiProviderProps = {\n  getMetricsKpi: () => Promise<GetMetricsKpiResponse>;\n};\nexport const MetricsKpiProvider: FunctionComponent<MetricsKpiProviderProps> = ({\n  children,\n  getMetricsKpi,\n}) => {\n  const service = useInterpret(\n    () =>\n      MetricsKpiMachine.withConfig({\n        services: {\n          api: () => {\n            return (callback) => {\n              getMetricsKpi()\n                .then((results) =>\n                  callback({ type: \"fetchSuccess\", ...results })\n                )\n                .catch((e) => {\n                  console.error(\"Failed fetching data\", e);\n                  callback(\"fetchFail\");\n                });\n            };\n          },\n        },\n      }),\n    {\n      devTools: true,\n    }\n  );\n  return (\n    <MetricsKpiContext.Provider\n      value={{\n        service,\n      }}\n    >\n      {children}\n    </MetricsKpiContext.Provider>\n  );\n};\n","import { useInterpret } from \"@xstate/react\";\nimport type { FunctionComponent } from \"react\";\nimport { createContext } from \"react\";\nimport type { ActorRefFrom } from \"xstate\";\nimport { timeIntervalsMapping } from \"./consts\";\nimport type { TopicsMetricsMachineType } from \"./machines\";\nimport { TopicsMetricsMachine } from \"./machines\";\nimport type { DurationOptions, GetTopicsMetricsResponse } from \"./types\";\n\nexport const TopicsMetricsContext = createContext<{\n  service: ActorRefFrom<TopicsMetricsMachineType>;\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n}>(null!);\n\nexport type TopicsMetricsProviderProps = {\n  getTopicsMetrics: (options: {\n    duration: DurationOptions;\n    interval: number;\n    selectedTopic: string | undefined;\n  }) => Promise<GetTopicsMetricsResponse>;\n};\nexport const TopicsMetricsProvider: FunctionComponent<\n  TopicsMetricsProviderProps\n> = ({ children, getTopicsMetrics }) => {\n  const service = useInterpret(\n    () =>\n      TopicsMetricsMachine.withConfig({\n        services: {\n          api: (context) => {\n            return (callback) => {\n              getTopicsMetrics({\n                selectedTopic: context.selectedTopic,\n                duration: context.duration,\n                interval: timeIntervalsMapping[context.duration].interval,\n              })\n                .then((results) =>\n                  callback({ type: \"fetchSuccess\", ...results })\n                )\n                .catch((e) => {\n                  console.error(\"Failed fetching data\", e);\n                  callback(\"fetchFail\");\n                });\n            };\n          },\n        },\n      }),\n    {\n      devTools: true,\n    }\n  );\n  return (\n    <TopicsMetricsContext.Provider\n      value={{\n        service,\n      }}\n    >\n      {children}\n    </TopicsMetricsContext.Provider>\n  );\n};\n","import { useSelector } from \"@xstate/react\";\nimport { useCallback, useContext } from \"react\";\nimport { KafkaInstanceMetricsContext } from \"./KafkaInstanceMetricsProvider\";\nimport type { KafkaInstanceMetricsMachineContext } from \"./machines\";\nimport type { DurationOptions } from \"./types\";\n\ntype SeletorReturn = KafkaInstanceMetricsMachineContext & {\n  isInitialLoading: boolean;\n  isRefreshing: boolean;\n  isLoading: boolean;\n  isFailed: boolean;\n  isJustCreated: boolean;\n};\n\nexport function useKafkaInstanceMetrics() {\n  const { service } = useContext(KafkaInstanceMetricsContext);\n\n  const {\n    usedDiskSpaceMetrics,\n    clientConnectionsMetrics,\n    connectionAttemptRateMetrics,\n    diskSpaceLimit,\n    connectionsLimit,\n    connectionRateLimit,\n    duration,\n    lastUpdated,\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n  } = useSelector<typeof service, SeletorReturn>(\n    service,\n    useCallback(\n      (state) => ({\n        ...state.context,\n        isInitialLoading: state.hasTag(\"initialLoading\"),\n        isRefreshing: state.hasTag(\"refreshing\"),\n        isLoading: state.hasTag(\"loading\"),\n        isFailed: state.hasTag(\"failed\"),\n        isJustCreated: state.hasTag(\"justCreated\"),\n      }),\n      []\n    )\n  );\n\n  const onDurationChange = useCallback(\n    (duration: DurationOptions) =>\n      service.send({ type: \"selectDuration\", duration }),\n    [service]\n  );\n\n  const onRefresh = useCallback(() => service.send(\"refresh\"), [service]);\n\n  return {\n    usedDiskSpaceMetrics,\n    clientConnectionsMetrics,\n    connectionAttemptRateMetrics,\n    diskSpaceLimit,\n    connectionsLimit,\n    connectionRateLimit,\n    lastUpdated,\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n    duration,\n    onDurationChange,\n    onRefresh,\n  };\n}\n","import { useSelector } from \"@xstate/react\";\nimport { useCallback, useContext, useMemo } from \"react\";\nimport type { TopicsMetricsMachineContext } from \"./machines\";\nimport { TopicsMetricsContext } from \"./TopicsMetricsProvider\";\nimport type { DurationOptions } from \"./types\";\n\ntype SelectorReturn = TopicsMetricsMachineContext & {\n  isInitialLoading: boolean;\n  isRefreshing: boolean;\n  isLoading: boolean;\n  isFailed: boolean;\n  isJustCreated: boolean;\n};\n\nexport function useTopicsMetrics() {\n  const { service } = useContext(TopicsMetricsContext);\n\n  const {\n    selectedTopic,\n    duration,\n    kafkaTopics,\n    metricsTopics,\n    bytesIncoming,\n    bytesOutgoing,\n    bytesPerPartition,\n    incomingMessageRate,\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n    lastUpdated,\n  } = useSelector<typeof service, SelectorReturn>(\n    service,\n    useCallback(\n      (state) => ({\n        ...state.context,\n        isInitialLoading: state.hasTag(\"initialLoading\"),\n        isRefreshing: state.hasTag(\"refreshing\"),\n        isLoading: state.hasTag(\"loading\"),\n        isFailed: state.hasTag(\"failed\"),\n        isJustCreated: state.hasTag(\"justCreated\"),\n      }),\n      []\n    )\n  );\n\n  const onTopicChange = useCallback(\n    (topic: string | undefined) => service.send({ type: \"selectTopic\", topic }),\n    [service]\n  );\n\n  const onDurationChange = useCallback(\n    (duration: DurationOptions) =>\n      service.send({ type: \"selectDuration\", duration }),\n    [service]\n  );\n\n  const onRefresh = useCallback(() => service.send(\"refresh\"), [service]);\n\n  const mergedTopics = useMemo((): string[] => {\n    const topics = Array.from(\n      new Set<string>([...kafkaTopics, ...metricsTopics])\n    );\n    topics.sort((a, b) => a.localeCompare(b));\n    return topics;\n  }, [kafkaTopics, metricsTopics]);\n\n  return {\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n    lastUpdated,\n    topics: mergedTopics,\n    selectedTopic,\n    duration,\n    bytesIncoming,\n    bytesOutgoing,\n    bytesPerPartition,\n    incomingMessageRate,\n    onTopicChange,\n    onDurationChange,\n    onRefresh,\n  };\n}\n","import { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { VoidFunctionComponent } from \"react\";\nimport {\n  CardKafkaInstanceMetrics,\n  CardTopicsMetrics,\n  EmptyStateInitialLoading,\n  EmptyStateMetricsUnavailable,\n  MetricsLayout,\n} from \"./components\";\nimport { CardKpi } from \"./components/CardKpi\";\nimport { MetricsLagAlert } from \"./components/MetricsLagAlert\";\nimport { PartitionCard } from \"./components/PartitionCard\";\nimport type { KafkaInstanceMetricsProviderProps } from \"./KafkaInstanceMetricsProvider\";\nimport { KafkaInstanceMetricsProvider } from \"./KafkaInstanceMetricsProvider\";\nimport type { MetricsKpiProviderProps } from \"./MetricsKpiProvider\";\nimport { MetricsKpiProvider } from \"./MetricsKpiProvider\";\nimport type { TopicsMetricsProviderProps } from \"./TopicsMetricsProvider\";\nimport { TopicsMetricsProvider } from \"./TopicsMetricsProvider\";\nimport { useKafkaInstanceMetrics } from \"./useKafkaInstanceMetrics\";\nimport { useMetricsKpi } from \"./useMetricsKpi\";\nimport { useTopicsMetrics } from \"./useTopicsMetrics\";\n\nexport type MetricsProps = {\n  onCreateTopic: () => void;\n  onAlertClose: () => void;\n  hasUserAlreadyClosedAlert: boolean;\n} & KafkaInstanceMetricsProviderProps &\n  TopicsMetricsProviderProps &\n  MetricsKpiProviderProps;\n\nexport const Metrics: VoidFunctionComponent<MetricsProps> = ({\n  getKafkaInstanceMetrics,\n  getTopicsMetrics,\n  getMetricsKpi,\n  onCreateTopic,\n  onAlertClose,\n  hasUserAlreadyClosedAlert,\n}) => {\n  return (\n    <TopicsMetricsProvider getTopicsMetrics={getTopicsMetrics}>\n      <KafkaInstanceMetricsProvider\n        getKafkaInstanceMetrics={getKafkaInstanceMetrics}\n      >\n        <MetricsKpiProvider getMetricsKpi={getMetricsKpi}>\n          <ConnectedMetrics\n            onCreateTopic={onCreateTopic}\n            onClickClose={onAlertClose}\n            isClosed={hasUserAlreadyClosedAlert}\n          />\n        </MetricsKpiProvider>\n      </KafkaInstanceMetricsProvider>\n    </TopicsMetricsProvider>\n  );\n};\n\ntype ConnectedMetricsProps = {\n  onCreateTopic: () => void;\n  onClickClose: () => void;\n  isClosed: boolean;\n};\nconst ConnectedMetrics: VoidFunctionComponent<ConnectedMetricsProps> = ({\n  onCreateTopic,\n  onClickClose,\n  isClosed,\n}) => {\n  const { t } = useTranslation();\n  const kafkaInstanceMetrics = useKafkaInstanceMetrics();\n  const topicsMetrics = useTopicsMetrics();\n  const metricsKpi = useMetricsKpi();\n\n  switch (true) {\n    case kafkaInstanceMetrics.isInitialLoading ||\n      topicsMetrics.isInitialLoading ||\n      metricsKpi.isInitialLoading:\n      return <EmptyStateInitialLoading />;\n    case kafkaInstanceMetrics.isFailed &&\n      topicsMetrics.isFailed &&\n      topicsMetrics.isFailed:\n    case kafkaInstanceMetrics.isJustCreated &&\n      topicsMetrics.isJustCreated &&\n      metricsKpi.isJustCreated:\n      return <EmptyStateMetricsUnavailable />;\n    default:\n      return (\n        <MetricsLayout\n          metricsLagAlert={\n            <MetricsLagAlert onClickClose={onClickClose} isClosed={isClosed} />\n          }\n          topicsKpi={\n            <CardKpi\n              metric={metricsKpi.topics}\n              isLoading={metricsKpi.isInitialLoading || metricsKpi.isLoading}\n              name={t(\"metrics:metric_kpi_topics_name\")}\n              popover={t(\"metrics:metric_kpi_topics_description\")}\n            />\n          }\n          topicPartitionsKpi={\n            <PartitionCard\n              metric={metricsKpi.topicPartitions}\n              isLoading={metricsKpi.isInitialLoading || metricsKpi.isLoading}\n              topicPartitionsLimit={metricsKpi.topicPartitionsLimit}\n            />\n          }\n          consumerGroupKpi={\n            <CardKpi\n              metric={metricsKpi.consumerGroups}\n              isLoading={metricsKpi.isInitialLoading || metricsKpi.isLoading}\n              name={t(\"metrics:metric_kpi_consumerGroup_name\")}\n              popover={t(\"metrics:metric_kpi_consumerGroup_description\")}\n            />\n          }\n          diskSpaceMetrics={<ConnectedKafkaInstanceMetrics />}\n          topicMetrics={\n            <ConnectedTopicsMetrics onCreateTopic={onCreateTopic} />\n          }\n        />\n      );\n  }\n};\n\nconst ConnectedKafkaInstanceMetrics: VoidFunctionComponent = () => {\n  const {\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n    duration,\n    lastUpdated,\n    usedDiskSpaceMetrics,\n    clientConnectionsMetrics,\n    connectionAttemptRateMetrics,\n    diskSpaceLimit,\n    connectionsLimit,\n    connectionRateLimit,\n    onDurationChange,\n    onRefresh,\n  } = useKafkaInstanceMetrics();\n\n  return (\n    <CardKafkaInstanceMetrics\n      usedDiskMetrics={usedDiskSpaceMetrics}\n      clientConnectionsMetrics={clientConnectionsMetrics}\n      connectionAttemptRateMetrics={connectionAttemptRateMetrics}\n      duration={duration}\n      backendUnavailable={isFailed}\n      isInitialLoading={isInitialLoading}\n      isLoading={isLoading}\n      isRefreshing={isRefreshing}\n      isJustCreated={isJustCreated}\n      lastUpdated={lastUpdated}\n      onRefresh={onRefresh}\n      onDurationChange={onDurationChange}\n      diskSpaceLimit={diskSpaceLimit || 0}\n      connectionsLimit={connectionsLimit || 0}\n      connectionRateLimit={connectionRateLimit || 0}\n    />\n  );\n};\n\ntype ConnectedTopicsMetricsProps = {\n  onCreateTopic: () => void;\n};\nconst ConnectedTopicsMetrics: VoidFunctionComponent<\n  ConnectedTopicsMetricsProps\n> = ({ onCreateTopic }) => {\n  const {\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n    lastUpdated,\n    selectedTopic,\n    duration,\n    topics,\n    bytesIncoming,\n    bytesOutgoing,\n    bytesPerPartition,\n    incomingMessageRate,\n    onDurationChange,\n    onTopicChange,\n    onRefresh,\n  } = useTopicsMetrics();\n\n  return (\n    <CardTopicsMetrics\n      backendUnavailable={isFailed}\n      topics={topics}\n      incomingTopicsData={bytesIncoming}\n      outgoingTopicsData={bytesOutgoing}\n      partitions={bytesPerPartition}\n      incomingMessageRate={incomingMessageRate}\n      duration={duration}\n      isInitialLoading={isInitialLoading}\n      isLoading={isLoading}\n      isRefreshing={isRefreshing}\n      isJustCreated={isJustCreated}\n      lastUpdated={lastUpdated}\n      selectedTopic={selectedTopic}\n      onRefresh={onRefresh}\n      onSelectedTopic={onTopicChange}\n      onDurationChange={onDurationChange}\n      onCreateTopic={onCreateTopic}\n    />\n  );\n};\n","import { useSelector } from \"@xstate/react\";\nimport { useCallback, useContext } from \"react\";\nimport type { MetricsKpiMachineContext } from \"./machines\";\nimport { MetricsKpiContext } from \"./MetricsKpiProvider\";\n\ntype SelectorReturn = MetricsKpiMachineContext & {\n  isInitialLoading: boolean;\n  isRefreshing: boolean;\n  isLoading: boolean;\n  isFailed: boolean;\n  isJustCreated: boolean;\n};\n\nexport function useMetricsKpi() {\n  const { service } = useContext(MetricsKpiContext);\n\n  const {\n    topics,\n    topicPartitions,\n    topicPartitionsLimit,\n    consumerGroups,\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n  } = useSelector<typeof service, SelectorReturn>(\n    service,\n    useCallback(\n      (state) => ({\n        ...state.context,\n        isInitialLoading: state.hasTag(\"initialLoading\"),\n        isRefreshing: state.hasTag(\"refreshing\"),\n        isLoading: state.hasTag(\"loading\"),\n        isFailed: state.hasTag(\"failed\"),\n        isJustCreated: state.hasTag(\"justCreated\"),\n      }),\n      []\n    )\n  );\n\n  const onRefresh = useCallback(() => service.send(\"refresh\"), [service]);\n\n  return {\n    isInitialLoading,\n    isLoading,\n    isRefreshing,\n    isFailed,\n    isJustCreated,\n    topics,\n    topicPartitions,\n    consumerGroups,\n    topicPartitionsLimit,\n    onRefresh,\n  };\n}\n","import {\n  Button,\n  Card,\n  CardBody,\n  Flex,\n  FlexItem,\n  Modal,\n  ModalVariant,\n  PageSection,\n  Spinner,\n  Stack,\n  StackItem,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type { FunctionComponent } from \"react\";\nimport { useState } from \"react\";\nimport \"./Settings.css\";\nimport type { SettingsStatus } from \"./types\";\n\nexport type SettingsProps = {\n  onSubmitReAuthentication: (\n    reauthenticationEnabled: boolean\n  ) => Promise<boolean>;\n  reauthenticationEnabled: boolean;\n};\n\nexport const Settings: FunctionComponent<SettingsProps> = ({\n  onSubmitReAuthentication,\n  reauthenticationEnabled,\n}) => {\n  const { t } = useTranslation(\"kafka\");\n  //states\n  const [connectionStatus, setConnectionStatus] = useState<SettingsStatus>(\n    reauthenticationEnabled ? \"On\" : \"Off\"\n  );\n  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n\n  const onClose = () => {\n    setIsModalOpen(false);\n  };\n\n  const onChangeSwitch = (checked: boolean) => {\n    if (connectionStatus === \"On\") {\n      setIsModalOpen(true);\n    } else {\n      handleReAuthentication(checked);\n    }\n  };\n\n  const handleReAuthentication = (reAuthValue: boolean) => {\n    setConnectionStatus(reAuthValue ? \"TurningOn\" : \"TurningOff\");\n\n    onSubmitReAuthentication(reAuthValue)\n      .then((reauthentication) => {\n        setConnectionStatus(reauthentication ? \"On\" : \"Off\");\n\n        // TODO: send notification\n        // addAlert({\n        //   variant: \"success\",\n        //   title: t(\"settings.success_alert\", {\n        //     status: reauthentication ? \"on\" : \"off\",\n        //   }),\n        // });\n      })\n      .catch(() => {\n        setConnectionStatus(!reAuthValue ? \"On\" : \"Off\");\n\n        // TODO: send notification\n        // addAlert({\n        //   variant: \"danger\",\n        //   title: t(\"settings.error_alert_title\"),\n        //   description: t(\"settings.error_alert_title_description\"),\n        // });\n      });\n  };\n\n  const onTurnOff = () => {\n    setIsModalOpen(false);\n    handleReAuthentication(false);\n  };\n\n  return (\n    <PageSection isFilled={true} hasOverflowScroll={true} aria-label={\"TODO\"}>\n      <Stack hasGutter>\n        <StackItem>\n          <Card>\n            <CardBody>{t(\"settings.kafka_instance_settings_label\")}</CardBody>\n          </Card>\n        </StackItem>\n        <StackItem>\n          <Card className={\"mas--settings__card\"}>\n            <CardBody>\n              <Flex flexWrap={{ default: \"nowrap\" }}>\n                <FlexItem grow={{ default: \"grow\" }}>\n                  <Flex>\n                    <FlexItem\n                      component={\"span\"}\n                      spacer={{ default: \"spacerSm\" }}\n                    >\n                      <strong>\n                        {t(\"settings.connection_re_authentication_label\")}\n                        {\":\"}\n                      </strong>\n                    </FlexItem>\n                    <FlexItem>\n                      {(() => {\n                        switch (connectionStatus) {\n                          case \"On\":\n                            return t(\n                              \"settings.Connection_re_authentication_states.on\"\n                            );\n                          case \"TurningOff\":\n                            return (\n                              <>\n                                <Spinner\n                                  size=\"md\"\n                                  aria-valuetext={t(\n                                    \"settings.Connection_re_authentication_states.turning_off\"\n                                  )}\n                                  aria-label={t(\n                                    \"settings.connection_re_authentication_label\"\n                                  )}\n                                />{\" \"}\n                                {t(\n                                  \"settings.Connection_re_authentication_states.turning_off\"\n                                )}\n                              </>\n                            );\n                          case \"Off\":\n                            return t(\n                              \"settings.Connection_re_authentication_states.off\"\n                            );\n                          case \"TurningOn\":\n                            return (\n                              <>\n                                <Spinner\n                                  size=\"md\"\n                                  aria-valuetext={\n                                    \"settings.Connection_re_authentication_states.turning_on\"\n                                  }\n                                  aria-label={t(\n                                    \"settings.connection_re_authentication_label\"\n                                  )}\n                                />{\" \"}\n                                {t(\n                                  \"settings.Connection_re_authentication_states.turning_on\"\n                                )}\n                              </>\n                            );\n                          default:\n                            return null;\n                        }\n                      })()}\n                    </FlexItem>\n                  </Flex>\n                </FlexItem>\n                <FlexItem>\n                  <Switch\n                    id=\"Connection-re-authentication-switch\"\n                    aria-label={t(\n                      \"settings.connection_re_authentication_label\"\n                    )}\n                    isChecked={\n                      connectionStatus === \"On\" ||\n                      connectionStatus === \"TurningOff\"\n                    }\n                    isDisabled={\n                      connectionStatus === \"TurningOff\" ||\n                      connectionStatus === \"TurningOn\"\n                    }\n                    onChange={onChangeSwitch}\n                  />\n                </FlexItem>\n                <Modal\n                  variant={ModalVariant.small}\n                  isOpen={isModalOpen}\n                  title={t(\"settings.warning_title\")}\n                  titleIconVariant={\"warning\"}\n                  actions={[\n                    <Button\n                      key={\"confirm\"}\n                      variant=\"primary\"\n                      onClick={onTurnOff}\n                    >\n                      {t(\"settings.turn_off_button_label\")}\n                    </Button>,\n                    <Button key={\"cancel\"} variant=\"link\" onClick={onClose}>\n                      {t(\"common:cancel\")}\n                    </Button>,\n                  ]}\n                  onClose={onClose}\n                >\n                  {t(\"settings.warning_description\")}\n                </Modal>\n              </Flex>\n            </CardBody>\n          </Card>\n        </StackItem>\n      </Stack>\n    </PageSection>\n  );\n};\n","export type SelectOptions = {\n  key: string;\n  value: string;\n  isPlaceholder?: boolean;\n  isDisabled?: boolean;\n};\n\nexport const retentionTimeSelectOptions: SelectOptions[] = [\n  { key: \"days\", value: \"days\", isPlaceholder: true },\n  { key: \"hours\", value: \"hours\" },\n  { key: \"minutes\", value: \"minutes\" },\n  { key: \"seconds\", value: \"seconds\" },\n  { key: \"milliseconds\", value: \"milliseconds\" },\n];\n\nexport const retentionSizeSelectOptions: SelectOptions[] = [\n  { key: \"bytes\", value: \"bytes\", isPlaceholder: true },\n  { key: \"kibibytes\", value: \"kibibytes\" },\n  { key: \"mebibytes\", value: \"mebibytes\" },\n  { key: \"gibibytes\", value: \"gibibytes\" },\n  { key: \"tebibytes\", value: \"tebibytes\" },\n];\n\nexport type IDropdownOption = {\n  value?: string;\n  label?: string;\n  key?: string;\n  isDisabled?: boolean;\n};\n","import { FormGroup, Popover, TextInput } from \"@patternfly/react-core\";\nimport { HelpIcon } from \"@patternfly/react-icons\";\nimport type { FunctionComponent } from \"react\";\n\nexport interface TextWithLabelPopoverProps {\n  fieldId: string;\n  fieldLabel: string;\n  fieldValue?: string;\n  popoverHeader: string;\n  popoverBody: string;\n  btnAriaLabel: string;\n  showUnlimited?: boolean;\n}\n\nexport const TextWithLabelPopover: FunctionComponent<\n  TextWithLabelPopoverProps\n> = ({\n  fieldId,\n  fieldLabel,\n  btnAriaLabel,\n  fieldValue,\n  popoverBody,\n  popoverHeader,\n  showUnlimited,\n}) => {\n  let displayText = \"-\";\n\n  if (\n    showUnlimited === true &&\n    fieldValue !== undefined &&\n    parseInt(fieldValue) < 0\n  ) {\n    displayText = \"Unlimited\"; // TODO i18n\n  } else if (fieldValue) {\n    displayText = fieldValue;\n  }\n\n  return (\n    <FormGroup\n      fieldId={fieldId}\n      label={fieldLabel}\n      className=\"kafka-ui-form-group--readonly\"\n      labelIcon={\n        <Popover\n          headerContent={<div>{popoverHeader}</div>}\n          bodyContent={<div>{popoverBody}</div>}\n        >\n          <button\n            aria-label={btnAriaLabel}\n            onClick={(event) => event.preventDefault()}\n            className=\"pf-c-form__group-label-help\"\n          >\n            <HelpIcon noVerticalAlign />\n          </button>\n        </Popover>\n      }\n    >\n      <TextInput\n        readOnlyVariant={\"plain\"}\n        type=\"text\"\n        id={fieldId}\n        name={fieldId}\n        value={displayText}\n      />\n    </FormGroup>\n  );\n};\n","import {\n  FormSection,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport convert from \"convert\";\nimport type React from \"react\";\nimport { TextWithLabelPopover } from \"./TextWithLabelPopover\";\n\ntype CleanupProps = {\n  defaultLogSegmentSize: bigint;\n  defaultSegmentTime: bigint;\n  defaultSegmentJitterTime: bigint;\n  defaultFileDeleteDelay: bigint;\n};\n\nconst Cleanup: React.FC<CleanupProps> = ({\n  defaultFileDeleteDelay,\n  defaultLogSegmentSize,\n  defaultSegmentJitterTime,\n  defaultSegmentTime,\n}) => {\n  const { t } = useTranslation([\"create-topic\", \"common\"]);\n\n  return (\n    <FormSection title={t(\"cleanup\")} id=\"cleanup\" titleElement={\"h2\"}>\n      <TextContent>\n        <Text component={TextVariants.p} className=\"section-info\">\n          {t(\"cleanup_section_info\")}\n        </Text>\n      </TextContent>\n\n      <TextWithLabelPopover\n        fieldId=\"log-segment-size\"\n        btnAriaLabel={t(\"log_segment_size\")}\n        fieldLabel={t(\"log_segment_size\")}\n        fieldValue={t(\"bytes_to_gibibyte\", {\n          bytes: defaultLogSegmentSize,\n          gibibyte: convert(Number(defaultLogSegmentSize), \"bytes\").to(\n            \"gibibytes\"\n          ),\n        })}\n        popoverBody={t(\"log_segment_size\")}\n        popoverHeader={t(\"log_segment_size_description\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"segement-time\"\n        btnAriaLabel={t(\"segement_time\")}\n        fieldLabel={t(\"segement_time\")}\n        fieldValue={t(\"milliseconds_to_days\", {\n          milliseconds: defaultSegmentTime,\n          days: convert(Number(defaultSegmentTime), \"milliseconds\").to(\"days\"),\n        })}\n        popoverBody={t(\"segement_time_description\")}\n        popoverHeader={t(\"segement_time\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"segment-jitter-time\"\n        btnAriaLabel={t(\"segment_jitter_time\")}\n        fieldLabel={t(\"segment_jitter_time\")}\n        fieldValue={t(\"milliseconds_time\", { value: defaultSegmentJitterTime })}\n        popoverBody={t(\"segment_jitter_time_description\")}\n        popoverHeader={t(\"segment_jitter_time\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"file-delete-delay\"\n        btnAriaLabel={t(\"file_delete_delay\")}\n        fieldLabel={t(\"file_delete_delay\")}\n        fieldValue={t(\"milliseconds_to_minute\", {\n          milliseconds: defaultFileDeleteDelay,\n          minute: convert(Number(defaultFileDeleteDelay), \"milliseconds\").to(\n            \"minutes\"\n          ),\n        })}\n        popoverBody={t(\"file_delete_delay_description\")}\n        popoverHeader={t(\"file_delete_delay\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"preallocate-log-segment-files\"\n        btnAriaLabel={t(\"preallocate_log_segment_files\")}\n        fieldLabel={t(\"preallocate_log_segment_files\")}\n        fieldValue={t(\"common:disabled\")}\n        popoverBody={t(\"preallocate_log_segment_files_description\")}\n        popoverHeader={t(\"preallocate_log_segment_files\")}\n      />\n    </FormSection>\n  );\n};\n\nexport { Cleanup };\n","import type { NumberInputProps, SelectProps } from \"@patternfly/react-core\";\nimport {\n  Flex,\n  FlexItem,\n  NumberInput,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport type React from \"react\";\nimport type { Topic } from \"ui-models/src/models/topic\";\nimport { RetentionTimeUnits } from \"../../KafkaTopics/types\";\nimport type { SelectOptions } from \"./types\";\n\nexport type CustomRetentionMessageProps = NumberInputProps &\n  SelectProps & {\n    id?: string;\n    selectOptions: SelectOptions[];\n    topicData: Topic;\n    setTopicData: (data: Topic) => void;\n  };\n\nconst CustomRetentionMessage: React.FC<CustomRetentionMessageProps> = ({\n  onToggle,\n  isOpen,\n  selectOptions,\n  topicData,\n  setTopicData,\n}) => {\n  const onSelect: SelectProps[\"onSelect\"] = (event, value) => {\n    // setTopicData({\n    //   ...topicData,\n    //   customRetentionTimeUnit: value as RetentionTimeUnits,\n    // });\n\n    //}\n\n    onToggle(false, event);\n  };\n\n  const handleTouchSpin = (operator: string) => {\n    if (operator === \"+\") {\n      // setTopicData({\n      //   ...topicData,\n      //   retentionTime: topicData.retentionTime + 1,\n      // });\n    } else if (operator === \"-\") {\n      // setTopicData({\n      //   ...topicData,\n      //   retentionTime: topicData.retentionTime - 1,\n      // });\n    }\n  };\n\n  const onChangeTouchSpin = (event: React.FormEvent<HTMLInputElement>) => {\n    // setTopicData({\n    //   ...topicData,\n    //   retentionTime: Number(event.currentTarget.value),\n    // });\n  };\n\n  return (\n    <div className=\"kafka-ui--radio__parameters\">\n      <Flex>\n        <FlexItem>\n          <NumberInput\n            onMinus={() => handleTouchSpin(\"-\")}\n            onPlus={() => handleTouchSpin(\"+\")}\n            value={\n              Number(\n                topicData[\"retention.ms\"].value\n              ) /* TODO precision loss from BigInt to Number, handle this as a string */\n            }\n            onChange={(event) => onChangeTouchSpin(event)}\n            min={0}\n          />\n        </FlexItem>\n        <FlexItem>\n          <Select\n            variant={SelectVariant.single}\n            aria-label=\"Select Input\"\n            onToggle={onToggle}\n            onSelect={onSelect}\n            selections={RetentionTimeUnits.MILLISECOND /* TODO */}\n            isOpen={isOpen}\n          >\n            {selectOptions?.map((s) => (\n              <SelectOption\n                key={s.key}\n                value={s.value}\n                isPlaceholder={s.isPlaceholder}\n              />\n            ))}\n          </Select>\n        </FlexItem>\n      </Flex>\n    </div>\n  );\n};\n\nexport { CustomRetentionMessage };\n","import type { NumberInputProps, SelectProps } from \"@patternfly/react-core\";\nimport {\n  Flex,\n  FlexItem,\n  NumberInput,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport type React from \"react\";\nimport type { Topic } from \"ui-models/src/models/topic\";\nimport { RetentionSizeUnits } from \"../../KafkaTopics/types\";\nimport type { SelectOptions } from \"./types\";\n\nexport type CustomRetentionSizeProps = NumberInputProps &\n  SelectProps & {\n    id?: string;\n    selectOptions: SelectOptions[];\n    topicData: Topic;\n    setTopicData: (data: Topic) => void;\n  };\n\nconst CustomRetentionSize: React.FC<CustomRetentionSizeProps> = ({\n  onToggle,\n  isOpen,\n  selectOptions,\n  topicData,\n  setTopicData,\n}) => {\n  const onSelect: SelectProps[\"onSelect\"] = (event, value) => {\n    // setTopicData({\n    //   ...topicData,\n    //   customRetentionSizeUnit: value as RetentionSizeUnits,\n    // });\n\n    //}\n\n    onToggle(false, event);\n  };\n\n  const handleTouchSpin = (operator: string) => {\n    if (operator === \"+\") {\n      // setTopicData({\n      //   ...topicData,\n      //   retentionBytes: topicData.retentionBytes + 1,\n      // });\n    } else if (operator === \"-\") {\n      // setTopicData({\n      //   ...topicData,\n      //   retentionBytes: topicData.retentionBytes - 1,\n      // });\n    }\n  };\n\n  const onChangeTouchSpin = (event: React.FormEvent<HTMLInputElement>) => {\n    // setTopicData({\n    //   ...topicData,\n    //   retentionBytes: Number(event.currentTarget.value),\n    // });\n  };\n\n  return (\n    <div className=\"kafka-ui--radio__parameters\">\n      <Flex>\n        <FlexItem>\n          <NumberInput\n            onMinus={() => handleTouchSpin(\"-\")}\n            onPlus={() => handleTouchSpin(\"+\")}\n            value={\n              Number(\n                topicData[\"retention.bytes\"].value\n              ) /* TODO precision loss from BigInt to Number */\n            }\n            onChange={(event) => onChangeTouchSpin(event)}\n            min={0}\n          />\n        </FlexItem>\n        <FlexItem>\n          <Select\n            variant={SelectVariant.single}\n            aria-label=\"Select Input\"\n            onToggle={onToggle}\n            onSelect={onSelect}\n            selections={RetentionSizeUnits.BYTE /* TODO */}\n            isOpen={isOpen}\n          >\n            {selectOptions?.map((s) => (\n              <SelectOption\n                key={s.key}\n                value={s.value}\n                isPlaceholder={s.isPlaceholder}\n              />\n            ))}\n          </Select>\n        </FlexItem>\n      </Flex>\n    </div>\n  );\n};\n\nexport { CustomRetentionSize };\n","import type { NumberInputProps } from \"@patternfly/react-core\";\nimport {\n  FormSection,\n  NumberInput,\n  Radio,\n  Stack,\n  Text,\n  TextContent,\n  TextInput,\n  TextVariants,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport {\n  FormGroupWithPopover,\n  useTranslation,\n} from \"@rhoas/app-services-ui-components\";\nimport type { FunctionComponent } from \"react\";\nimport { useCallback, useState } from \"react\";\nimport type { Topic } from \"ui-models/src/models/topic\";\nimport {\n  RetentionSizeUnits,\n  RetentionTimeUnits,\n} from \"../../KafkaTopics/types\";\nimport { CustomRetentionMessage } from \"./CustomRetentionMessage\";\nimport { CustomRetentionSize } from \"./CustomRetentionSize\";\nimport { TextWithLabelPopover } from \"./TextWithLabelPopover\";\nimport {\n  retentionSizeSelectOptions,\n  retentionTimeSelectOptions,\n} from \"./types\";\nimport { useValidateTopic } from \"./useValidateTopic\";\n\nexport type CoreConfigurationProps = {\n  isCreate?: boolean;\n  topicData: Topic;\n  setTopicData: (data: Topic) => void;\n  checkTopicName: (value: string) => Promise<boolean>;\n  //initialPartition: number | undefined;\n  invalidText: string;\n  setInvalidText: (message: string) => void;\n  setTopicValidated: (error: ValidatedOptions) => void;\n  topicValidated: ValidatedOptions;\n  setWarning: (isWarning: boolean) => void;\n  warning: boolean;\n  availablePartitionLimit: number;\n};\n\nconst CoreConfiguration: FunctionComponent<CoreConfigurationProps> = ({\n  isCreate,\n  topicData,\n  setTopicData,\n  invalidText,\n  setInvalidText,\n  setTopicValidated,\n  topicValidated,\n  availablePartitionLimit,\n}) => {\n  const { t } = useTranslation([\"create-topic\"]);\n  const { validateName } = useValidateTopic();\n  const [retentionSizeUnit, setRetentionSizeUnit] =\n    useState<RetentionSizeUnits>(RetentionSizeUnits.BYTE);\n  const [retentionTimeUnit, setRetentionTimeUnit] =\n    useState<RetentionTimeUnits>(RetentionTimeUnits.MILLISECOND);\n  const [isRetentionTimeSelectOpen, setIsRetentionTimeSelectOpen] =\n    useState<boolean>();\n  const [isRetentionSizeSelectOpen, setIsRetentionSizeSelectOpen] =\n    useState<boolean>();\n\n  const validationCheck = useCallback(\n    (value: string) => {\n      const errorMessage = validateName(value);\n      if (errorMessage) {\n        setInvalidText(errorMessage);\n        setTopicValidated(ValidatedOptions.error);\n      } else {\n        setTopicValidated(ValidatedOptions.default);\n      }\n    },\n    [setInvalidText, setTopicValidated, validateName]\n  );\n\n  const handleRetentionMessageSize = (value: string) => {\n    switch (value) {\n      case RetentionSizeUnits.CUSTOM:\n        setRetentionSizeUnit(RetentionSizeUnits.CUSTOM);\n        break;\n      case RetentionTimeUnits.UNLIMITED:\n        setRetentionSizeUnit(RetentionSizeUnits.UNLIMITED);\n    }\n  };\n\n  const onRetentionTimeToggle = (isOpen: boolean) => {\n    setIsRetentionTimeSelectOpen(isOpen);\n  };\n\n  const onRetentionSizeToggle = (isOpen: boolean) => {\n    setIsRetentionSizeSelectOpen(isOpen);\n  };\n\n  const handleRetentionMessageTime = (value: string) => {\n    switch (value) {\n      case RetentionTimeUnits.CUSTOM:\n        setRetentionTimeUnit(RetentionTimeUnits.CUSTOM);\n        break;\n      case RetentionTimeUnits.UNLIMITED:\n        setRetentionTimeUnit(RetentionTimeUnits.UNLIMITED);\n    }\n  };\n\n  const handleTextInputChange = (value: string) => {\n    validationCheck(value);\n    setTopicData({ ...topicData, name: value });\n  };\n\n  const onPartitionsChange: NumberInputProps[\"onChange\"] = (event) => {\n    // setTopicData({\n    //   ...topicData,\n    //   partitions.length: Number((event.target as HTMLInputElement).value),\n    // });\n  };\n  const handleOnPlus = () => {\n    // setTopicData({\n    //   ...topicData,\n    //   partitions.length: topicData.partitions.length + 1,\n    // });\n  };\n\n  const handleOnMinus = () => {\n    // setTopicData({\n    //   ...topicData,\n    //   partitions.length: topicData.partitions.length - 1,\n    // });\n  };\n\n  const retentionTimeInput = (\n    <CustomRetentionMessage\n      toggleId=\"core-config-retention-dropdowntoggle\"\n      name=\"retention-ms\"\n      topicData={topicData}\n      setTopicData={setTopicData}\n      onToggle={onRetentionTimeToggle}\n      isOpen={isRetentionTimeSelectOpen}\n      selectOptions={retentionTimeSelectOptions}\n    />\n  );\n\n  const retentionSizeInput = (\n    <CustomRetentionSize\n      toggleId=\"core-config-retention-size-dropdowntoggle\"\n      name=\"retention-bytes\"\n      topicData={topicData}\n      setTopicData={setTopicData}\n      onToggle={onRetentionSizeToggle}\n      isOpen={isRetentionSizeSelectOpen}\n      selectOptions={retentionSizeSelectOptions}\n    />\n  );\n\n  return (\n    <FormSection\n      title={t(\"core_configuration\")}\n      id=\"core-configuration\"\n      titleElement={\"h2\"}\n    >\n      <TextContent>\n        <Text component={TextVariants.p} className=\"section-info\">\n          {t(\"core_config_info\")}\n        </Text>\n      </TextContent>\n      {isCreate ? (\n        <FormGroupWithPopover\n          labelHead={t(\"topic_name\")}\n          fieldId=\"create-topic-name\"\n          fieldLabel={t(\"topic_name\")}\n          labelBody={t(\"topic_name_description\")}\n          buttonAriaLabel=\"More info for topic name field\"\n          helperTextInvalid={invalidText}\n          validated={topicValidated}\n          isRequired={true}\n          helperText={t(\"topic_name_helper_text\")}\n        >\n          <TextInput\n            isRequired\n            type=\"text\"\n            id=\"create-topic-name\"\n            name=\"name\"\n            value={topicData.name}\n            onChange={handleTextInputChange}\n            label={t(\"topic_name\")}\n            placeholder={t(\"enter_name\")}\n            validated={topicValidated}\n          />\n        </FormGroupWithPopover>\n      ) : (\n        <TextWithLabelPopover\n          fieldId=\"topic-name\"\n          btnAriaLabel=\"topic detail name\"\n          fieldLabel=\"Name\"\n          fieldValue={topicData.name}\n          popoverBody={t(\"topic_name_description\")}\n          popoverHeader={t(\"topic_name\")}\n        />\n      )}\n\n      <FormGroupWithPopover\n        fieldId=\"create-topic-partitions\"\n        fieldLabel=\"Partitions\"\n        labelHead={t(\"partitions\")}\n        labelBody={t(\"partitions_description\")}\n        buttonAriaLabel=\"More info for partitions field\"\n        helperText={\n          topicData.partitions.length >= availablePartitionLimit\n            ? t(\"partitions_warning\")\n            : t(\"partition_helper_text\")\n        }\n        validated={\n          topicData.partitions.length >= availablePartitionLimit\n            ? \"warning\"\n            : \"default\"\n        }\n      >\n        <NumberInput\n          id=\"create-topic-partitions\"\n          inputName=\"num-partitions\"\n          onChange={onPartitionsChange}\n          data-testid={t(\"partitions\")}\n          onPlus={handleOnPlus}\n          onMinus={handleOnMinus}\n          value={topicData.partitions.length}\n          plusBtnProps={{ name: \"num-partitions\" }}\n          minusBtnProps={{ name: \"num-partitions\" }}\n          min={0}\n        />\n      </FormGroupWithPopover>\n\n      <TextWithLabelPopover\n        fieldId=\"replicas\"\n        btnAriaLabel={t(\"replicas\")}\n        fieldLabel={t(\"replicas\")}\n        fieldValue={\"3\" /* TODO */}\n        popoverBody={t(\"replicas_description\")}\n        popoverHeader={t(\"replicas\")}\n      />\n      <TextWithLabelPopover\n        fieldId=\"min-insync-replicas\"\n        btnAriaLabel=\"topic detail min-in-sync replica\"\n        fieldLabel=\"Minimum in-sync replicas\"\n        fieldValue={topicData[\"min.insync.replicas\"].toString()}\n        popoverBody={t(\"min_insync_replicas_description\")}\n        popoverHeader={t(\"min_insync_replicas\")}\n      />\n      <FormGroupWithPopover\n        fieldId=\"retention\"\n        fieldLabel=\"Retention time\"\n        labelHead={t(\"retention_time\")}\n        labelBody={t(\"retention_time_description\")}\n        buttonAriaLabel=\"More info for retention time field\"\n      >\n        <Stack hasGutter>\n          <Radio\n            isChecked={\n              retentionTimeUnit === RetentionTimeUnits.DAY ||\n              retentionTimeUnit === RetentionTimeUnits.WEEK ||\n              retentionTimeUnit === RetentionTimeUnits.CUSTOM\n            }\n            name=\"custom-retention-time\"\n            onChange={() =>\n              handleRetentionMessageTime(RetentionTimeUnits.CUSTOM)\n            }\n            label={retentionTimeInput}\n            className=\"kafka-ui--radio-label__number-input\"\n            aria-label=\"custom duration\"\n            id=\"custom-retention-time\"\n            value={RetentionTimeUnits.CUSTOM}\n          />\n          <Radio\n            isChecked={retentionTimeUnit === RetentionTimeUnits.UNLIMITED}\n            name=\"unlimited-retention-time\"\n            onChange={() =>\n              handleRetentionMessageTime(RetentionTimeUnits.UNLIMITED)\n            }\n            label=\"Unlimited time\"\n            aria-label=\"Unlimited\"\n            id=\"unlimited-retention-time\"\n            value={RetentionTimeUnits.UNLIMITED}\n          />\n        </Stack>\n      </FormGroupWithPopover>\n      <FormGroupWithPopover\n        fieldId=\"retention-size\"\n        fieldLabel=\"Retention size\"\n        labelHead={t(\"retention_size\")}\n        labelBody={t(\"retention_size_description\")}\n        buttonAriaLabel=\"More info for retention size field\"\n      >\n        <Stack hasGutter>\n          <Radio\n            isChecked={retentionSizeUnit === RetentionSizeUnits.CUSTOM}\n            name=\"custom-retention-size\"\n            onChange={() =>\n              handleRetentionMessageSize(RetentionSizeUnits.CUSTOM)\n            }\n            label={retentionSizeInput}\n            className=\"kafka-ui--radio-label__number-input\"\n            aria-label=\"custom size\"\n            id=\"custom-retention-size\"\n            value={RetentionSizeUnits.CUSTOM}\n          />\n          <Radio\n            isChecked={retentionSizeUnit === RetentionSizeUnits.UNLIMITED}\n            name=\"unlimited-retention-size\"\n            onChange={() =>\n              handleRetentionMessageSize(RetentionSizeUnits.UNLIMITED)\n            }\n            label=\"Unlimited size\"\n            aria-label=\"Unlimited\"\n            id=\"unlimited-retention-size\"\n            value={RetentionSizeUnits.UNLIMITED}\n          />\n        </Stack>\n      </FormGroupWithPopover>\n    </FormSection>\n  );\n};\n\nexport { CoreConfiguration };\n","import { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport { useCallback } from \"react\";\n\nexport const useValidateTopic = (): {\n  validateName: (name: string) => string | undefined;\n} => {\n  const { t } = useTranslation([\"create-topic\"]);\n\n  return {\n    validateName: useCallback(\n      (name) => {\n        const legalNameChars = new RegExp(\"^[a-zA-Z0-9._-]+$\");\n        if (name.length && !legalNameChars.test(name)) {\n          return t(\"topic_name_helper_text\");\n        } else if (name.length > 249) {\n          return t(\"cannot_exceed_characters\");\n        } else if (name === \".\" || name === \"..\") {\n          return t(\"invalid_name_with_dot\");\n        }\n        return undefined;\n      },\n      [t]\n    ),\n  };\n};\n","import {\n  FormSection,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type React from \"react\";\nimport { TextWithLabelPopover } from \"./TextWithLabelPopover\";\n\ntype FlushProps = {\n  defaultFlushIntervalMessages: bigint;\n  defaultFlushIntervalTime: bigint;\n};\n\nconst Flush: React.FC<FlushProps> = ({\n  defaultFlushIntervalMessages,\n  defaultFlushIntervalTime,\n}) => {\n  const { t } = useTranslation([\"create-topic\"]);\n\n  return (\n    <FormSection title={t(\"flush\")} id=\"flush\" titleElement={\"h2\"}>\n      <TextContent>\n        <Text component={TextVariants.p} className=\"section-info\">\n          {t(\"flush_section_info\")}\n        </Text>\n      </TextContent>\n\n      <TextWithLabelPopover\n        fieldId=\"flush-interval-messages\"\n        btnAriaLabel={t(\"flush_interval_messages\")}\n        fieldLabel={t(\"flush_interval_messages\")}\n        fieldValue={t(\"messages_time\", {\n          value: defaultFlushIntervalMessages,\n        })}\n        popoverBody={t(\"flush_interval_messages_description\")}\n        popoverHeader={t(\"flush_interval_messages\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"flush-interval-time\"\n        btnAriaLabel={t(\"flush_interval_time\")}\n        fieldLabel={t(\"flush_interval_time\")}\n        fieldValue={t(\"milliseconds_time\", { value: defaultFlushIntervalTime })}\n        popoverBody={t(\"flush_interval_time_description\")}\n        popoverHeader={t(\"flush_interval_time\")}\n      />\n    </FormSection>\n  );\n};\n\nexport { Flush };\n","import {\n  FormSection,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport {\n  DropdownWithToggle,\n  FormGroupWithPopover,\n  useTranslation,\n} from \"@rhoas/app-services-ui-components\";\nimport convert from \"convert\";\nimport type React from \"react\";\nimport type { Topic } from \"ui-models/src/models/topic\";\nimport { TextWithLabelPopover } from \"./TextWithLabelPopover\";\nimport type { IDropdownOption } from \"./types\";\n\nexport type LogProps = {\n  topicData: Topic;\n  setTopicData: (data: Topic) => void;\n  defaultDeleteRetentionTime: bigint;\n  defaultMinCleanbleRatio: number;\n  defaultMinimumCompactionLagTime: bigint;\n};\n\nconst Log: React.FC<LogProps> = ({\n  topicData,\n  setTopicData,\n  defaultDeleteRetentionTime,\n  defaultMinCleanbleRatio,\n  defaultMinimumCompactionLagTime,\n}) => {\n  const { t } = useTranslation([\"create-topic\", \"common\"]);\n\n  const cleanupPolicyOptions: IDropdownOption[] = [\n    {\n      key: \"compact\",\n      value: \"compact\",\n      label: t(\"compact\"),\n      isDisabled: false,\n    },\n    {\n      key: \"delete\",\n      value: \"delete\",\n      label: t(\"common:delete\"),\n      isDisabled: false,\n    },\n    {\n      key: \"compact-delete\",\n      value: \"compact,delete\",\n      label: `${t(\"compact\")},${t(\"common:delete\")}`,\n      isDisabled: false,\n    },\n  ];\n\n  const onSelectOption = (value: string) => {\n    // setTopicData({ ...topicData, cleanupPolicy: value });\n  };\n\n  return (\n    <FormSection title={t(\"log\")} id=\"log\" titleElement={\"h2\"}>\n      <TextContent>\n        <Text component={TextVariants.p}>{t(\"log_section_info\")}</Text>\n        <Text component={TextVariants.small}>{t(\"log_section_info_note\")}</Text>\n      </TextContent>\n\n      <FormGroupWithPopover\n        fieldId=\"cleanup-policy\"\n        fieldLabel={t(\"cleanup_policy\")}\n        labelHead={t(\"cleanup_policy\")}\n        labelBody={t(\"cleanup_policy_description\")}\n        buttonAriaLabel={t(\"cleanup_policy\")}\n      >\n        <DropdownWithToggle\n          id=\"log-section-policy-type-dropdown\"\n          toggleId=\"log-section-policy-type-dropdowntoggle\"\n          ariaLabel={t(\"select_policy\")}\n          onSelectOption={onSelectOption}\n          items={cleanupPolicyOptions}\n          name=\"cleanup-policy\"\n          value={topicData[\"cleanup.policy\"]}\n          isLabelAndValueNotSame={true}\n        />\n      </FormGroupWithPopover>\n\n      <TextWithLabelPopover\n        fieldId=\"delete-retention-time\"\n        btnAriaLabel={t(\"delete_retention_time\")}\n        fieldLabel={t(\"delete_retention_time\")}\n        fieldValue={t(\"milliseconds_time_to_day\", {\n          value: defaultDeleteRetentionTime,\n          days: convert(Number(defaultDeleteRetentionTime), \"milliseconds\").to(\n            \"days\"\n          ),\n        })}\n        popoverBody={t(\"delete_retention_time_description\")}\n        popoverHeader={t(\"delete_retention_time\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"min-cleanable-ratio\"\n        btnAriaLabel={t(\"min_cleanable_ratio\")}\n        fieldLabel={t(\"min_cleanable_ratio\")}\n        fieldValue={String(defaultMinCleanbleRatio)}\n        popoverBody={t(\"min_cleanable_ratio_description\")}\n        popoverHeader={t(\"min_cleanable_ratio\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"min-compaction-lag-time-description\"\n        btnAriaLabel={t(\"min_compaction_lag_time\")}\n        fieldLabel={t(\"min_compaction_lag_time\")}\n        fieldValue={t(\"milliseconds_time\", {\n          value: defaultMinimumCompactionLagTime,\n        })}\n        popoverBody={t(\"min_compaction_lag_time_description\")}\n        popoverHeader={t(\"min_compaction_lag_time\")}\n      />\n    </FormSection>\n  );\n};\n\nexport { Log };\n","import {\n  FormSection,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type React from \"react\";\nimport { TextWithLabelPopover } from \"./TextWithLabelPopover\";\n\ntype MessageProps = {\n  defaultMaximumMessageBytes: bigint;\n  defaultMessageTimestampType: string;\n  defaultMaxMessageTimestampDiff: bigint;\n};\n\nconst Message: React.FC<MessageProps> = ({\n  defaultMaximumMessageBytes,\n  defaultMessageTimestampType,\n  defaultMaxMessageTimestampDiff,\n}) => {\n  const { t } = useTranslation([\"create-topic\"]);\n\n  return (\n    <FormSection title={t(\"messages\")} id=\"messages\" titleElement={\"h2\"}>\n      <TextContent>\n        <Text component={TextVariants.p} className=\"section-info\">\n          {t(\"message_section_info\")}\n        </Text>\n      </TextContent>\n\n      <TextWithLabelPopover\n        fieldId=\"max-message-size\"\n        btnAriaLabel={t(\"max_message_size\")}\n        fieldLabel={t(\"max_message_size\")}\n        fieldValue={t(\"bytes_size\", { value: defaultMaximumMessageBytes })}\n        popoverBody={t(\"max_message_size_description\")}\n        popoverHeader={t(\"max_message_size\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"message-timestamp-type\"\n        btnAriaLabel={t(\"message_timestamp_type\")}\n        fieldLabel={t(\"message_timestamp_type\")}\n        fieldValue={String(defaultMessageTimestampType)}\n        popoverBody={t(\"message_timestamp_type_description\")}\n        popoverHeader={t(\"message_timestamp_type\")}\n      />\n      <TextWithLabelPopover\n        fieldId=\"max-message-timestamp-diff\"\n        btnAriaLabel={t(\"max_message_timestamp_diff\")}\n        fieldLabel={t(\"max_message_timestamp_diff\")}\n        fieldValue={t(\"milliseconds_time\", {\n          value: defaultMaxMessageTimestampDiff,\n        })}\n        popoverBody={t(\"max_message_timestamp_diff_description\")}\n        popoverHeader={t(\"max_message_timestamp_diff\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"compression-type\"\n        btnAriaLabel={t(\"compression_type\")}\n        fieldLabel={t(\"compression_type\")}\n        fieldValue={\"Producer\"}\n        popoverBody={t(\"compression_type_description\")}\n        popoverHeader={t(\"compression_type\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"message-format\"\n        btnAriaLabel={t(\"message_format\")}\n        fieldLabel={t(\"message_format\")}\n        fieldValue={\"2.7-IV2\"}\n        popoverBody={t(\"message_format_description\")}\n        popoverHeader={t(\"message_format\")}\n      />\n    </FormSection>\n  );\n};\n\nexport { Message };\n","import {\n  FormSection,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type React from \"react\";\nimport { TextWithLabelPopover } from \"./TextWithLabelPopover\";\n\nconst Replication: React.FC = () => {\n  const { t } = useTranslation([\"create-topic\", \"common\"]);\n\n  return (\n    <FormSection title={t(\"replication\")} id=\"replication\" titleElement={\"h2\"}>\n      <TextContent>\n        <Text component={TextVariants.p}>\n          {t(\"replication_section_info\")}\n          <Text component={TextVariants.small}>\n            {t(\"replication_section_info_note\")}\n          </Text>\n        </Text>\n      </TextContent>\n\n      <TextWithLabelPopover\n        fieldId=\"unclean-leader-election\"\n        btnAriaLabel={t(\"unclean_leader_election\")}\n        fieldLabel={t(\"unclean_leader_election\")}\n        fieldValue={t(\"common:disabled\")}\n        popoverBody={t(\"unclean_leader_election_description\")}\n        popoverHeader={t(\"unclean_leader_election\")}\n      />\n    </FormSection>\n  );\n};\n\nexport { Replication };\n","import {\n  FormSection,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport convert from \"convert\";\nimport type React from \"react\";\nimport { TextWithLabelPopover } from \"./TextWithLabelPopover\";\n\ntype TopicAdavanceIndexProps = {\n  defaultIndexIntervalSize: bigint;\n  defaultSegmentIndexSize: bigint;\n};\n\nconst TopicAdvanceIndex: React.FC<TopicAdavanceIndexProps> = ({\n  defaultIndexIntervalSize,\n  defaultSegmentIndexSize,\n}) => {\n  const { t } = useTranslation([\"create-topic\"]);\n\n  return (\n    <FormSection title={t(\"index\")} id=\"index\" titleElement={\"h2\"}>\n      <TextContent>\n        <Text component={TextVariants.p} className=\"section-info\">\n          {t(\"index_section_info\")}\n        </Text>\n      </TextContent>\n\n      <TextWithLabelPopover\n        fieldId=\"index-interval-size\"\n        btnAriaLabel={t(\"index_interval_size\")}\n        fieldLabel={t(\"index_interval_size\")}\n        fieldValue={t(\"bytes_to_kibibytes\", {\n          bytes: defaultIndexIntervalSize,\n          kibibytes: convert(Number(defaultIndexIntervalSize), \"bytes\").to(\n            \"kibibytes\"\n          ),\n        })}\n        popoverBody={t(\"index_interval_size_description\")}\n        popoverHeader={t(\"index_interval_size\")}\n      />\n\n      <TextWithLabelPopover\n        fieldId=\"segment-index-size\"\n        btnAriaLabel={t(\"segment_index_size\")}\n        fieldLabel={t(\"segment_index_size\")}\n        fieldValue={t(\"bytes_to_mebibytes\", {\n          bytes: defaultSegmentIndexSize,\n          mebibytes: convert(Number(defaultIndexIntervalSize), \"bytes\").to(\n            \"mebibytes\"\n          ),\n        })}\n        popoverBody={t(\"segment_index_size_description\")}\n        popoverHeader={t(\"segment_index_size\")}\n      />\n    </FormSection>\n  );\n};\n\nexport { TopicAdvanceIndex };\n","import { JumpLinks, JumpLinksItem, SidebarPanel } from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type React from \"react\";\n\nexport type TopicAdvanceJumpLinksProps = {\n  canHaveDelete?: boolean;\n};\nconst TopicAdvanceJumpLinks: React.FC<TopicAdvanceJumpLinksProps> = ({\n  canHaveDelete,\n}) => {\n  const { t } = useTranslation([\"create-topic\"]);\n\n  return (\n    <SidebarPanel variant=\"sticky\">\n      <JumpLinks\n        isVertical\n        label={t(\"jump_to_section\")}\n        scrollableSelector=\".topic-properties\"\n        style={{ position: \"sticky\" }}\n        // offset={-164} // for header\n      >\n        <JumpLinksItem key={0} href=\"#core-configuration\">\n          {t(\"core_configuration\")}\n        </JumpLinksItem>\n        <JumpLinksItem key={1} href=\"#messages\">\n          {t(\"messages\")}\n        </JumpLinksItem>\n        <JumpLinksItem key={2} href=\"#log\">\n          {t(\"log\")}\n        </JumpLinksItem>\n        <JumpLinksItem key={3} href=\"#replication\">\n          {t(\"replication\")}\n        </JumpLinksItem>\n        <JumpLinksItem key={4} href=\"#cleanup\">\n          {t(\"cleanup\")}\n        </JumpLinksItem>\n        <JumpLinksItem key={5} href=\"#index\">\n          {t(\"index\")}\n        </JumpLinksItem>\n        <JumpLinksItem key={6} href=\"#flush\">\n          {t(\"flush\")}\n        </JumpLinksItem>\n        {canHaveDelete ? (\n          <JumpLinksItem key={7} href=\"#delete\">\n            {t(\"delete\")}\n          </JumpLinksItem>\n        ) : (\n          <></>\n        )}\n      </JumpLinks>\n    </SidebarPanel>\n  );\n};\n\nexport { TopicAdvanceJumpLinks };\n","import {\n  ActionGroup,\n  Button,\n  Divider,\n  Form,\n  PageGroup,\n  PageSection,\n  Sidebar,\n  SidebarContent,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"@rhoas/app-services-ui-components\";\nimport type React from \"react\";\nimport { useState } from \"react\";\nimport type { Topic } from \"ui-models/src/models/topic\";\nimport { Cleanup } from \"./Cleanup\";\nimport { CoreConfiguration } from \"./CoreConfiguration\";\nimport { Flush } from \"./Flush\";\nimport { Log } from \"./Log\";\nimport { Message } from \"./Message\";\nimport { Replication } from \"./Replication\";\nimport { TopicAdvanceIndex } from \"./TopicAdvanceIndex\";\nimport { TopicAdvanceJumpLinks } from \"./TopicAdvanceJumpLinks\";\n\nexport type TopicAdvancePageProps = {\n  isCreate: boolean;\n  onConfirm: () => void;\n  handleCancel?: () => void;\n  topicData: Topic;\n  setTopicData: (val: Topic) => void;\n  checkTopicName: (value: string) => Promise<boolean>;\n  availablePartitionLimit: number;\n};\n\nexport const TopicAdvancePage: React.FunctionComponent<\n  TopicAdvancePageProps\n> = ({\n  isCreate,\n  onConfirm,\n  handleCancel,\n  topicData,\n  setTopicData,\n  checkTopicName,\n  availablePartitionLimit,\n}) => {\n  const { t } = useTranslation([\"create-topic\", \"common\"]);\n  const actionText = isCreate ? t(\"create_topic\") : t(\"common:save\");\n\n  //states\n\n  const [topicValidated, setTopicValidated] = useState<ValidatedOptions>(\n    ValidatedOptions.default\n  );\n  const [invalidText, setInvalidText] = useState(\"\");\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [warning, setWarning] = useState<boolean>(false);\n  const onValidateTopic = () => {\n    if (topicData?.name.length < 1) {\n      setInvalidText(t(\"common:required\"));\n      setTopicValidated(ValidatedOptions.error);\n    } else {\n      setIsLoading(true);\n\n      checkTopicName(topicData?.name)\n        .then((value) =>\n          value == false\n            ? (setInvalidText(t(\"already_exists\", { name: topicData?.name })),\n              setTopicValidated(ValidatedOptions.error))\n            : onConfirm()\n        )\n        .finally(() => setIsLoading(false));\n    }\n  };\n\n  return (\n    <PageSection padding={{ default: \"noPadding\" }}>\n      <Sidebar hasGutter>\n        <TopicAdvanceJumpLinks />\n        <SidebarContent>\n          <PageGroup\n            hasOverflowScroll={true}\n            id=\"topic-detail-view\"\n            aria-label={\"TODO\"}\n          >\n            <PageSection padding={{ default: \"noPadding\" }}>\n              <Form>\n                <CoreConfiguration\n                  isCreate={isCreate}\n                  topicData={topicData}\n                  setTopicData={setTopicData}\n                  checkTopicName={checkTopicName}\n                  availablePartitionLimit={availablePartitionLimit}\n                  invalidText={invalidText}\n                  setInvalidText={setInvalidText}\n                  setTopicValidated={setTopicValidated}\n                  topicValidated={topicValidated}\n                  setWarning={setWarning}\n                  warning={warning}\n                />\n                <Message\n                  defaultMaximumMessageBytes={\n                    topicData[\"max.message.bytes\"].value\n                  }\n                  defaultMessageTimestampType={\n                    topicData[\"message.timestamp.type\"]\n                  }\n                  defaultMaxMessageTimestampDiff={\n                    topicData[\"message.timestamp.difference.max.ms\"].value\n                  }\n                />\n                <Log\n                  topicData={topicData}\n                  setTopicData={setTopicData}\n                  defaultDeleteRetentionTime={topicData[\"retention.ms\"].value}\n                  defaultMinCleanbleRatio={\n                    topicData[\"min.cleanable.dirty.ratio\"]\n                  }\n                  defaultMinimumCompactionLagTime={\n                    topicData[\"min.compaction.lag.ms\"].value\n                  }\n                />\n                <Replication />\n                <Cleanup\n                  defaultLogSegmentSize={topicData[\"segment.bytes\"].value}\n                  defaultSegmentTime={topicData[\"segment.ms\"].value}\n                  defaultSegmentJitterTime={\n                    topicData[\"segment.jitter.ms\"].value\n                  }\n                  defaultFileDeleteDelay={\n                    topicData[\"file.delete.delay.ms\"].value\n                  }\n                />\n                <TopicAdvanceIndex\n                  defaultIndexIntervalSize={\n                    topicData[\"index.interval.bytes\"].value\n                  }\n                  defaultSegmentIndexSize={\n                    topicData[\"segment.index.bytes\"].value\n                  }\n                />\n                <Flush\n                  defaultFlushIntervalMessages={\n                    topicData[\"flush.messages\"].value\n                  }\n                  defaultFlushIntervalTime={topicData[\"flush.ms\"].value}\n                />\n              </Form>\n\n              <ActionGroup className=\"kafka-ui--sticky-footer\">\n                <Divider className=\"kafka-ui--divider--FlexShrink\" />\n                <Button\n                  isLoading={isLoading}\n                  onClick={onValidateTopic}\n                  variant=\"primary\"\n                  data-testid={\n                    isCreate\n                      ? \"topicAdvanceCreate-actionCreate\"\n                      : \"tabProperties-actionSave\"\n                  }\n                  isDisabled={topicValidated !== \"default\"}\n                >\n                  {actionText}\n                </Button>\n                <Button\n                  onClick={handleCancel}\n                  variant=\"link\"\n                  data-testid={\n                    isCreate\n                      ? \"topicAdvanceCreate-actionCancel\"\n                      : \"tabProperties-actionCancel\"\n                  }\n                >\n                  {t(\"common:cancel\")}\n                </Button>\n              </ActionGroup>\n            </PageSection>\n          </PageGroup>\n        </SidebarContent>\n      </Sidebar>\n    </PageSection>\n  );\n};\n","import { PageSection } from \"@patternfly/react-core\";\nimport type { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport type { Topic } from \"ui-models/src/models/topic\";\nimport { TopicAdvancePage } from \"../components/TopicAdvancePage\";\n\nexport type EditTopicPropertiesProps = {\n  topic: Topic;\n  onCancel: () => void;\n};\n\nexport const EditTopicProperties: FunctionComponent<\n  EditTopicPropertiesProps\n> = ({ topic }) => {\n  const { t } = useTranslation([\"create-topic\"]);\n  return (\n    <PageSection\n      variant={\"light\"}\n      className={\"topic-properties\"}\n      hasOverflowScroll={true}\n      aria-label={\"TODO\"}\n    >\n      <TopicAdvancePage\n        isCreate={false}\n        onConfirm={() => {}}\n        handleCancel={() => {}}\n        topicData={topic}\n        setTopicData={() => {}}\n        checkTopicName={() => Promise.resolve(true)}\n        availablePartitionLimit={3}\n      />\n    </PageSection>\n  );\n};\n","import {\n  Button,\n  Divider,\n  Form,\n  FormSection,\n  PageGroup,\n  PageSection,\n  Sidebar,\n  SidebarContent,\n  Split,\n  SplitItem,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport type React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport type { Topic } from \"ui-models/src/models/topic\";\nimport {\n  formattedRetentionSize,\n  formattedRetentionTime,\n} from \"../../KafkaTopics/types\";\nimport { TextWithLabelPopover } from \"../components\";\nimport { Cleanup } from \"../components/Cleanup\";\nimport { Flush } from \"../components/Flush\";\nimport { Message } from \"../components/Message\";\nimport { Replication } from \"../components/Replication\";\nimport { TopicAdvanceIndex } from \"../components/TopicAdvanceIndex\";\nimport { TopicAdvanceJumpLinks } from \"../components/TopicAdvanceJumpLinks\";\n\nexport type TopicViewDetailProps = {\n  topic: Topic;\n  deleteTopicHref: string;\n  updateTopicHref: string;\n};\n\nexport const TopicProperties: React.FunctionComponent<TopicViewDetailProps> = ({\n  topic,\n  deleteTopicHref,\n  updateTopicHref,\n}) => {\n  const { t } = useTranslation([\"create-topic\"]);\n  return (\n    <PageSection\n      variant={\"light\"}\n      className={\"topic-properties\"}\n      hasOverflowScroll={true}\n      aria-label={\"TODO\"}\n    >\n      <Sidebar hasGutter>\n        <TopicAdvanceJumpLinks canHaveDelete={true} />\n        <SidebarContent>\n          <PageGroup\n            hasOverflowScroll={true}\n            aria-label={\"TODO\"}\n            id=\"topic-detail-view\"\n            className={\"pf-u-mb-4xl\"}\n          >\n            <PageSection padding={{ default: \"noPadding\" }}>\n              <Split>\n                <SplitItem isFilled>\n                  <Form id=\"topic-form\">\n                    <FormSection\n                      title={t(\"core_configuration\")}\n                      id=\"core-configuration\"\n                      titleElement={\"h2\"}\n                    >\n                      <TextContent>\n                        <Text\n                          component={TextVariants.p}\n                          className=\"section-info\"\n                        >\n                          {t(\"core_config_info\")}\n                        </Text>\n                      </TextContent>\n\n                      <TextWithLabelPopover\n                        fieldId=\"topic-name\"\n                        btnAriaLabel={t(\"name\")}\n                        fieldLabel={t(\"topic_name\")}\n                        fieldValue={topic.name}\n                        popoverBody={t(\"topic_name_description\")}\n                        popoverHeader={t(\"topic_name\")}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId=\"partitions\"\n                        btnAriaLabel={t(\"partitions\")}\n                        fieldLabel={t(\"partitions\")}\n                        fieldValue={topic.partitions.length.toString()}\n                        popoverBody={t(\"partitions_description\")}\n                        popoverHeader={t(\"partitions\")}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId=\"replicas\"\n                        btnAriaLabel={t(\"replicas\")}\n                        fieldLabel={t(\"replicas\")}\n                        fieldValue={\n                          \"TODO\" /* TODO this is a config from the Kafka instance itself, should we be showing it? */\n                        }\n                        popoverBody={t(\"replicas_description\")}\n                        popoverHeader={t(\"replicas\")}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId=\"min-insync-replicas\"\n                        btnAriaLabel={t(\"min_insync_replicas\")}\n                        fieldLabel={t(\"min_insync_replicas\")}\n                        fieldValue={topic[\"min.insync.replicas\"].toString()}\n                        popoverBody={t(\"min_insync_replicas_description\")}\n                        popoverHeader={t(\"min_insync_replicas\")}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId=\"retention-time\"\n                        btnAriaLabel={t(\"retention_time\")}\n                        fieldLabel={t(\"retention_time\")}\n                        fieldValue={formattedRetentionTime(\n                          topic[\"retention.ms\"].value\n                        )}\n                        popoverBody={t(\"retention_time_description\")}\n                        popoverHeader={t(\"retention_time\")}\n                        showUnlimited={true}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId=\"retention-size\"\n                        btnAriaLabel={t(\"retention_size\")}\n                        fieldLabel={t(\"retention_size\")}\n                        fieldValue={formattedRetentionSize(\n                          topic[\"retention.bytes\"].value\n                        )}\n                        popoverHeader={t(\"retention_size\")}\n                        popoverBody={t(\"retention_size_description\")}\n                        showUnlimited={true}\n                      />\n                    </FormSection>\n                    <Message\n                      defaultMaximumMessageBytes={\n                        topic[\"max.message.bytes\"].value\n                      }\n                      defaultMessageTimestampType={\n                        topic[\"message.timestamp.type\"]\n                      }\n                      defaultMaxMessageTimestampDiff={\n                        topic[\"message.timestamp.difference.max.ms\"].value\n                      }\n                    />\n                    <FormSection title={t(\"log\")} id=\"log\" titleElement={\"h2\"}>\n                      <TextContent>\n                        <Text component={TextVariants.p}>\n                          {t(\"log_section_info\")}\n                          <Text\n                            component={TextVariants.small}\n                            className=\"section-info-note\"\n                          >\n                            {t(\"log_section_info_note\")}\n                          </Text>\n                        </Text>\n                      </TextContent>\n\n                      <TextWithLabelPopover\n                        fieldId=\"cleanup-policy\"\n                        btnAriaLabel={t(\"cleanup_policy\")}\n                        fieldLabel={t(\"cleanup_policy\")}\n                        fieldValue={topic[\"cleanup.policy\"]}\n                        popoverBody={t(\"cleanup_policy_description\")}\n                        popoverHeader={t(\"cleanup_policy\")}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId=\"delete-retention-time\"\n                        btnAriaLabel={t(\"delete_retention_time\")}\n                        fieldLabel={t(\"delete_retention_time\")}\n                        fieldValue={topic[\n                          \"delete.retention.ms\"\n                        ].value.toString()}\n                        popoverBody={t(\"delete_retention_time_description\")}\n                        popoverHeader={t(\"delete_retention_time\")}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId=\"min-cleanable-ratio\"\n                        btnAriaLabel={t(\"min_cleanable_ratio\")}\n                        fieldLabel={t(\"min_cleanable_ratio\")}\n                        fieldValue={topic[\n                          \"min.cleanable.dirty.ratio\"\n                        ].toString()}\n                        popoverBody={t(\"min_cleanable_ratio_description\")}\n                        popoverHeader={t(\"min_cleanable_ratio\")}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId=\"min-compaction-lag-time\"\n                        btnAriaLabel={t(\"min_compaction_lag_time\")}\n                        fieldLabel={t(\"min_compaction_lag_time\")}\n                        fieldValue={topic[\n                          \"min.compaction.lag.ms\"\n                        ].value.toString()}\n                        popoverBody={t(\"min_compaction_lag_time_description\")}\n                        popoverHeader={t(\"min_compaction_lag_time\")}\n                      />\n                    </FormSection>\n                    <Replication />\n                    <Cleanup\n                      defaultLogSegmentSize={topic[\"segment.bytes\"].value}\n                      defaultSegmentTime={topic[\"segment.ms\"].value}\n                      defaultSegmentJitterTime={\n                        topic[\"segment.jitter.ms\"].value\n                      }\n                      defaultFileDeleteDelay={\n                        topic[\"file.delete.delay.ms\"].value\n                      }\n                    />\n                    <TopicAdvanceIndex\n                      defaultIndexIntervalSize={\n                        topic[\"index.interval.bytes\"].value\n                      }\n                      defaultSegmentIndexSize={\n                        topic[\"segment.index.bytes\"].value\n                      }\n                    />\n                    <Flush\n                      defaultFlushIntervalMessages={\n                        topic[\"flush.messages\"].value\n                      }\n                      defaultFlushIntervalTime={topic[\"flush.ms\"].value}\n                    />\n                  </Form>\n\n                  <Divider className=\"pf-u-mt-2xl pf-u-mb-2xl\" />\n\n                  <TextContent>\n                    <Text component={TextVariants.h2} id=\"delete\">\n                      {t(\"delete_topic_irreversible\")}\n                    </Text>\n                    <Text component={TextVariants.p} className=\"section-info\">\n                      {t(\"delete_topic_info\")}\n                    </Text>\n                    <Button\n                      variant=\"danger\"\n                      data-testid=\"tabProperties-actionDelete\"\n                      component={(props) => (\n                        <Link {...props} to={deleteTopicHref}>\n                          {t(\"delete_topic\")}\n                        </Link>\n                      )}\n                    />\n                  </TextContent>\n                </SplitItem>\n                <SplitItem>\n                  <Button\n                    variant=\"primary\"\n                    data-testid=\"tabProperties-actionEdit\"\n                    component={(props) => (\n                      <Link {...props} to={updateTopicHref}>\n                        {t(\"edit_props\")}\n                      </Link>\n                    )}\n                  />\n                </SplitItem>\n              </Split>\n            </PageSection>\n          </PageGroup>\n        </SidebarContent>\n      </Sidebar>\n    </PageSection>\n  );\n};\n","import type { SelectProps } from \"@patternfly/react-core\";\nimport { Select, SelectOption, SelectVariant } from \"@patternfly/react-core\";\nimport type { FC } from \"react\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport type { OwnerAccount } from \"./types\";\n\nexport type SelectOwnerProps = {\n  isDisabled: boolean;\n  accounts: OwnerAccount[];\n  owner: string | undefined;\n  onChangeOwner: (owner: string | undefined) => void;\n};\n\nexport const SelectOwner: FC<SelectOwnerProps> = ({\n  isDisabled,\n  accounts,\n  owner,\n  onChangeOwner,\n}) => {\n  const { t } = useTranslation(\"kafka\");\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  const onToggle = (isExpanded: boolean) => {\n    setIsOpen(isExpanded);\n  };\n\n  const onSelect: SelectProps[\"onSelect\"] = (_, owner) => {\n    onChangeOwner(owner as string);\n    setIsOpen(false);\n  };\n\n  function selectOptions(filter = \"\") {\n    const filterRegExp = new RegExp(filter, \"i\");\n    const filteredAccounts =\n      filter !== \"\"\n        ? accounts.filter(\n            (account) =>\n              filterRegExp.test(account.displayName) ||\n              filterRegExp.test(account.id)\n          )\n        : accounts;\n    return filteredAccounts.map((account) => (\n      <SelectOption\n        key={account.id}\n        value={account.id}\n        description={account.displayName}\n      >\n        {account.id}\n      </SelectOption>\n    ));\n  }\n\n  return (\n    <Select\n      id=\"change-permission-owner-select\"\n      variant={SelectVariant.typeahead}\n      onToggle={onToggle}\n      isDisabled={isDisabled}\n      isOpen={isOpen}\n      placeholderText={t(\"select_user_account\")}\n      isCreatable={true}\n      createText={t(\"change_owner_create_text\")}\n      menuAppendTo=\"parent\"\n      maxHeight={400}\n      selections={owner}\n      onSelect={onSelect}\n      onFilter={(_, value) => selectOptions(value)}\n    >\n      {selectOptions()}\n    </Select>\n  );\n};\n","import {\n  Alert,\n  AlertVariant,\n  Button,\n  Form,\n  FormGroup,\n  Modal,\n  Skeleton,\n} from \"@patternfly/react-core\";\nimport type { FunctionComponent } from \"react\";\nimport { useCallback, useRef, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { SelectOwner } from \"./SelectOwner\";\nimport type { ChangeOwnerErrorMessage, OwnerAccount } from \"./types\";\n\nexport type ChangeKafkaOwnerProps = {\n  currentOwner: string;\n  accounts: OwnerAccount[] | undefined;\n  savingState: \"idle\" | \"saving\" | ChangeOwnerErrorMessage;\n  onConfirm: (newOwner: string) => void;\n  onCancel: () => void;\n};\n\nexport const ChangeKafkaOwner: FunctionComponent<ChangeKafkaOwnerProps> = ({\n  currentOwner,\n  accounts,\n  savingState,\n  onConfirm,\n  onCancel,\n}) => {\n  const { t } = useTranslation([\"kafka\", \"common\"]);\n  const [account, setAccount] = useState<string | undefined>();\n  const submittedAccount = useRef<string>();\n\n  const isSaving = savingState === \"saving\";\n\n  const onConfirmOwner = useCallback(() => {\n    if (account) {\n      submittedAccount.current = account;\n      onConfirm(account);\n    }\n  }, [onConfirm, account]);\n\n  const renderAlert = () => {\n    switch (savingState) {\n      case \"invalid-user\":\n        return (\n          <Alert\n            variant={AlertVariant.danger}\n            aria-live=\"polite\"\n            isInline\n            title={t(\"new_owner_does_not_exist_title\")}\n          >\n            {t(\"new_owner_does_not_exist_message\", {\n              newOwner: submittedAccount.current,\n            })}\n          </Alert>\n        );\n      case \"unknown-error\":\n        return (\n          <Alert\n            variant={AlertVariant.danger}\n            aria-live=\"polite\"\n            isInline\n            title={t(\"can_not_change_owner_title\")}\n          >\n            {t(\"owner_transfer_failed_message\", {\n              name: currentOwner,\n            })}\n          </Alert>\n        );\n    }\n  };\n  return (\n    <Modal\n      id=\"change-owner-modal\"\n      title={t(\"change-owner-title\")}\n      isOpen={true}\n      onClose={onCancel}\n      variant={\"medium\"}\n      position=\"top\"\n      actions={[\n        <Button\n          id=\"confirm-button\"\n          key=\"changeowner\"\n          variant=\"primary\"\n          isDisabled={isSaving}\n          onClick={onConfirmOwner}\n        >\n          {t(\"change-owner-button\")}\n        </Button>,\n        <Button\n          id=\"cancel-button\"\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={onCancel}\n          isDisabled={isSaving}\n        >\n          {t(\"common:cancel\")}\n        </Button>,\n      ]}\n    >\n      <Form onSubmit={(e) => e?.preventDefault()}>\n        {renderAlert()}\n        <FormGroup fieldId=\"Current-owner-name\" label={t(\"current_owner\")}>\n          {currentOwner}\n        </FormGroup>\n        <FormGroup fieldId=\"New-owner-name\" label={t(\"new_owner\")}>\n          {accounts ? (\n            <SelectOwner\n              isDisabled={isSaving}\n              accounts={accounts}\n              owner={account}\n              onChangeOwner={setAccount}\n            />\n          ) : (\n            <Skeleton width={\"100%\"} />\n          )}\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n};\n"],"names":["ControlPlaneRouteRoot","NewInstanceSegment","ControlPlaneSpecialSegments","ControlPlaneRoutePath","ControlPlaneNewInstancePath","ControlPlaneDeleteInstancePath","ControlPlaneChangeOwnerPath","DrawerContext","createContext","DrawerProvider","children","match","useRouteMatch","Error","selectedInstance","params","id","includes","undefined","section","instance","useState","isExact","isExpanded","setIsExpanded","activeTab","setActiveTab","onClose","useRef","toggleExpanded","useCallback","newValue","prev","current","useEffect","value","useMemo","Provider","onTabChange","useDrawer","context","useContext","RedirectOnGateError","redirectUrl","key","useLocation","ErrorBoundary","resetKeys","fallbackRender","RedirectAndResetError","reset","Redirect","to","KafkaInstancesRoute","getUrlForInstance","history","useHistory","setActiveQuickStart","QuickStartContext","replace","labels","usePaginationSearchParams","page","perPage","setPagination","setPaginationQuery","resetPaginationQuery","namesChips","useURLSearchParamsChips","ownersChips","statusesChips","useSortableSearchParams","fields","isColumnSortable","sort","sortDirection","data","name","chips","owner","status","direction","onClearAllFilters","clearChained","openDrawer","tab","onDetailsClick","onConnectionsClick","onCreate","push","onDelete","onChangeOwner","onQuickstartGuide","instances","itemCount","count","names","owners","statuses","onPageChange","onSearchName","add","onRemoveNameChip","remove","onRemoveNameChips","clear","onSearchOwner","onRemoveOwnerChip","onRemoveOwnerChips","onSearchStatus","toggle","onRemoveStatusChip","onRemoveStatusChips","isRowSelected","onDetails","onConnection","onClickConnectionTabLink","onClickSupportLink","onInstanceLinkClick","canHaveInstanceLink","canOpenConnection","canChangeOwner","canDelete","CreateKafkaInstanceRoute","instancesHref","callbacks","auth","useChrome","getUsername","getUser","username","identity","user","Promise","reject","checkDeveloperAvailabilityQuery","standardQuotaQuery","providersWithRegionsQuery","getProvidersInfo","getProviderRegionsSizes","checkDeveloperAvailability","onAvailable","onUsed","onUnavailable","checkStandardQuota","onQuotaAvailable","onNoQuotaAvailable","onOutOfQuota","hasTrialQuota","remainingPrepaidQuota","remainingMarketplaceQuota","marketplaceSubscriptions","quota","fetchProvidersWithRegions","plan","providers","getStandardSizes","provider","region","providersInfo","providerInfo","find","p","getTrialSizes","standardSizes","length","displayName","trialSizes","standard","trial","useCreateKafkaCallbacks","createKafkaInstance","qsContext","onClickKafkaOverview","onClickQuickStart","onSuccess","onError","mutateAsync","onCancel","CreateKafkaInstance","isModalOpen","onClickContactUs","onLearnHowToAddStreamingUnits","onLearnMoreAboutSizes","subscriptionOptionsHref","document","location","href","appendTo","getElementById","body","useControlPlaneGate","DeleteKafkaInstanceRoute","isDeleting","instanceName","ChangeOwnerRoute","accounts","updateInstance","onConfirm","newOwner","mutate","updates","savingState","isLoading","isError","error","type","currentOwner","map","a","ControlPlaneRoutes","Route","path","exact","DataPlaneRoutePath","DataPlaneTopicRoutePath","useDataPlaneGate","DataPlaneHeaderConnected","activeSection","url","sectionsHref","dashboard","topics","consumer","permissions","settings","AclsRoute","PageSection","TopicsRoute","topicChips","adminUrl","filter","topicName","getUrlFortopic","row","onEdit","onSearchTopic","onCreateTopic","onRemoveTopicChip","onRemoveTopicChips","onTopicLinkClick","SettingsRoute","onSubmitReAuthentication","reauthenticationEnabled","reauthentication_enabled","request","DashboardRoute","hasUserAlreadyClosedAlert","setHasUserAlreadyClosedAlert","onAlertClose","queryInstance","queryKpisMetrics","queryInstanceMetrics","queryTopicMetrics","queryTopics","getMetricsKpi","kpis","topicPartitionsLimit","maxPartitions","getKafkaInstanceMetrics","interval","duration","all","metrics","diskSpaceLimit","max_data_retention_size","bytes","connectionsLimit","connections","connectionRateLimit","connectionRate","getTopicsMetrics","selectedTopic","kafkaTopics","t","ConsumerGroupsRoute","consumerName","groupId","consumers","groups","onSearchConsumer","onRemoveConsumerChip","onRemoveConsumerChips","onViewPartition","onViewResetOffset","useTopicGate","topic","DataPlaneTopicHeaderConnected","instanceDetailsHref","instanceTopicsHref","tabsHref","messages","properties","schemas","instanceDetailHref","TopicConsumerGroupsRoute","TopicMessagesGroupsRoute","kafkaTopicMessagesFetchQuery","getMessages","partitions","TopicPropertiesRoute","deleteTopicHref","updateTopicHref","TopicSchemasRoute","chrome","processor2","entry","e","basename","srs","getToken","AuthContext","ConfigContext","apiBasePath","I18nProvider","lng","resources","en","common","srsTemporaryFixMe","debug","ScalprumComponent","appName","module","scope","ErrorComponent","processor","renderSchema","registry","version","registryId","DeleteKafkaTopic","props","useTranslation","DeleteModal","variant","title","confirmationValue","Trans","ns","i18nKey","components","values","TopicDeleteRoute","topicHref","instanceId","TopicEditPropertiesRoute","DataPlaneRoutes","Switch","render","from","InvalidObject","OverviewRoute","Routes","memo","updateDocumentTitle","on","register","notifications","unregister","event","console","dir","navId","basePath","getPath","QuickstartLoader","loaded","setLoaded","quickStarts","AssetsContext","showDrafts","onLoad","qs","set","init","errorDescriptionKey","middleware","stateMapping","DEAD","EMPTY","STABLE","UNKNOWN","COMPLETING_REBALANCE","PREPARING_REBALANCE","fetchKafkaKpis","getMetricsByInstantQuery","topicPartitions","consumerGroups","items","forEach","metric","fetchKafkaMetrics","getMetricsByRangeQuery","response","safeMetrics","m","persistentvolumeclaim","usedDiskSpaceMetrics","connectionAttemptRateMetrics","clientConnectionsMetrics","addAggregatedValuesTo","timestamp","valuesToQuery","field","comparison","v","trim","join","uiColumnMapping","createdAt","fetchKafkas","dataMapper","getKafkas","search","flatMap","s","Boolean","q","filtersToSearch","toString","res","rawInstances","total","apiSizeToComponentSize","isDisabled","apiSize","display_name","quota_consumed","ingress","ingress_throughput_per_sec","egress","egress_throughput_per_sec","storage","Math","round","total_max_connections","max_connection_attempts_per_sec","max_partitions","messageSize","max_message_size","maturity_status","trialDurationHours","lifespan_seconds","fetchProviderRegions","getCloudProviderRegions","instanceType","enabled","capacity","some","c","instance_type","r","max_capacity_reached","available_sizes","resourceName","isStandardQuota","related_resources","billing_model","isMarketplaceQuota","developerDefaults","BigInt","preallocate","standardDefaults","topicTransformerFactory","d","JSON","stringify","cm","Object","fromEntries","config","configValueToMilliseconds","configValueToBytes","configValueToBoolean","configValueToNumber","defaultIfEmpty","defaultIfError","parseInt","parse","fetchTopics","getTopics","fetchTopicsMetrics","filteredMetrics","Array","Set","bytesIncoming","bytesOutgoing","bytesPerPartition","incomingMessageRate","partition","addAggregatedTotalBytesTo","metricsTopics","fetchUserAccounts","getUserAccounts","fullObject","first_name","last_name","email","isOrgAdmin","is_org_admin","ReactQueryDevtoolsProduction","lazy","then","default","ReactQueryDevtools","ApiContext","ApiProvider","showDevTools","QueryClientProvider","client","initialIsOpen","Suspense","fallback","useApiConfiguration","masQueries","_root","organization","entity","userAccounts","available","subentity","developerAvailability","standardAvailability","kafkaQueries","list","details","topicMessages","kpi","providerQueries","limits","developer","accessToken","kafkasFleet","DefaultApi","Configuration","token","PrincipalApi","account","AppServicesApi","TopicsApi","GroupsApi","records","RecordsApi","useConsumerGroups","refetchInterval","useQuery","queryKey","queryFn","api","getConsumerGroups","state","activeConsumers","laggingPartitions","unassignedPartitions","fetchConsumerGroups","args","kafkaRequestToKafkaInstanceEnhanched","developerPlanInstanceLimits","standardPlanInstanceLimits","enhancedInstance","billing","created_at","Date","toISOString","expiryDate","expires_at","cloud_provider","size","accepted","preparing","provisioning","ready","failed","deprovision","deleting","updatedAt","updated_at","bootstrapUrl","bootstrap_server_host","admin_api_server_url","marketplaceForBilling","ms","subscriptions","billing_cloud_account_id","marketplace","subscription","warn","thisInstanceLimits","l","size_id","APIErrorCodes","useKafkaInstanceTransformer","getStandardQuotaQuery","useStandardQuotaFetchQuery","useProvidersWithRegionsFetchQuery","useProviderRegionSizesFetchQuery","standardQuota","standardPlanLimitsQuery","developerPlanLimitsQuery","standardPlanLimits","developerPlanLimits","useKafka","suspense","getKafkaById","useKafkas","queryClient","i","setQueryData","useTopic","getTopic","fetchTopic","useTopics","useUserAccounts","listPrincipals","useDeveloperInstanceAvailabilityFetchQuery","fetchQuery","staleTime","Infinity","k","useKafkaFetchQuery","useKafkaKpisFetchQuery","useKafkaMetricsFetchQuery","useTopicsMetricsFetchQuery","useTopicsFetchQuery","useMessagesFetchQuery","consumeRecords","offset","limit","headers","fetchMessages","kms","regions","regionInfo","availableSizes","sizes","instance_types","bind","fetchProviderRegionSizes","getInstanceTypesByCloudProviderAndRegion","getCloudProviders","allProviders","firstProvider","defaultProvider","skipCache","ams","fetchOrganization","apiAccountsMgmtV1CurrentAccountGet","apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet","organizationId","quotaResponse","statusText","standardQuotas","resource_name","product","prepaidQuota","marketplaceQuotas","allowed","consumed","reduce","agg","unaggregatedSubscriptions","cloud_accounts","subscriptionMarketplaces","cloud_provider_id","cloud_account_id","useCreateKafkaMutation","useMutation","kafkaRequest","sizeId","createKafka","isServiceApiError","code","DUPLICATE_INSTANCE_NAME","INTERNAL_CAPACITY_ERROR","INSUFFICIENT_QUOTA","invalidateQueries","UNAUTHORIZED_USER","TRIAL_USED","FAILED_TO_CHECK_QUOTA","OWNER_DOES_NOT_EXIST","useDeleteKafkaMutation","deleteKafkaById","message","useDeleteTopicMutation","deleteTopic","_","useUpdateKafkaMutation","updateKafkaById","getErrorCode","reason","AxiosError","KafkaInstancesSortableColumns","KafkaTopicsSortableColumns","TopicOrderKey","KafkaConsumerGroupSortableColumns","ConsumerGroupOrderKey","METRICS_LAG_ALERT","isReactQueryDevToolsEanbled","localStorage","getItem","metricsIsLagAlertsDismissed","metricsDismissLagAlerts","setItem","CreatingStatuses","ReadyStatuses","DegradedStatuses","SuspendingStatuses","SuspendedStatuses","DeletingStatuses","ResumingStatuses","SimplifiedStatuses","creating","degraded","suspended","resuming","suspending","ConsumerGroupEmptyState","EmptyState","EmptyStateVariant","EmptyStateIcon","icon","CubesIcon","Title","headingLevel","TitleSizes","EmptyStateBody","Columns","ConsumerGroups","isFiltered","isFilled","hasOverflowScroll","TableView","TableVariant","tableOuiaId","ariaLabel","columns","renderHeader","column","Th","info","popover","popoverProps","headerContent","renderCell","Td","dataLabel","renderActions","ActionsColumn","onClick","filters","onSearch","onRemoveChip","onRemoveGroup","validate","test","errorMessage","emptyStateNoData","emptyStateNoResults","EmptyStateNoResults","ControlPlaneHeader","PageSectionVariants","hasShadowBottom","stickyOnBreakpoint","Level","LevelItem","TextContent","Text","component","onProviderChange","selectedProvider","defaultRegion","capabilities","form","creationError","tsTypes","predictableActionArguments","schema","events","services","initial","states","verifyAvailability","always","cond","target","overQuota","tags","instanceUnavailable","regionsUnavailable","configuring","unsubmitted","submitted","create","description","invalid","valid","fieldInvalid","submit","saving","createSuccess","createError","actions","saved","empty","nameChange","providerChange","regionChange","idle","disabled","waitingForQuota","loading","invoke","src","onDone","sizeChange","billingChange","prepaidOnly","singleSubscription","onlySubscriptions","selectSubscription","prepaidAndSubscriptions","prepaid","selectPrepaid","setInitialContext","availableProviders","setName","setProvider","setRegion","setSize","setSizes","smallestSize","b","resetCreationErrorMessage","_context","setCreationError","triggerSave","triggerSubmit","triggerBillingChange","setBillingToPrepaid","setBillingToSubscription","unsetSubscription","guards","isOverQuota","instanceAvailability","isInstanceUnavailable","isRegionsUnavailable","nameIsEmpty","nameIsValid","providerIsValid","selectedProviderInfo","regionIsValid","noProviderOrRegion","noSizes","emptySizes","sizeIsDisabled","billingRequiredButNotSelected","meta","hasTag","sizeIsOverQuota","availableQuota","didProviderChange","didRegionChange","didSizeChange","onlyPrepaid","matchesSelectedProviderOrRHMarketplaceAndHasQuota","hasPrepaidQuota","noSelectedProvider","trialUsed","trialUnavailable","isTrialUsed","isTrialUnavailable","noProviderAndRegion","save","complete","setDeveloperAvailable","setDeveloperUnavailable","setDeveloperUsed","setStandardAvailable","setStandardOutOfQuota","setStandardUnavailable","setProviders","setProvidersOrRegionsUnavailable","setCapabilities","notifyCreateErrorToStandardPlan","notifyCreateErrorToTrialPlan","LogoAWS","URL","LogoAzure","LogoGCP","LogoRedhat","AWSLogo","alt","style","height","AzureLogo","GCPLogo","KafkaInstanceActions","rowData","hackZIndex","customChild","DropdownGroup","label","tooltipProps","position","content","tooltip","pointerEvents","cursor","isSeparator","actionProps","zIndex","DataPlaneHeader","actionsProps","className","Breadcrumb","ouiaId","BreadcrumbItem","Link","isActive","padding","Nav","NavList","NavItem","borderTop","DataPlaneTopicHeader","DeleteKafkaInstance","kafka","it","resolve","delete","useKafkaLabels","statusesSimplified","aws","gcp","azure","providerRegions","useTopicLabels","DetailsTabAlert","hoursLeft","differenceInHours","now","Alert","time","FormatDate","date","format","isInline","KafkaDetailsTab","kafkaVersion","renderTextListItem","TextListItem","TextListItemVariants","Skeleton","width","screenreaderText","contentName","TextList","TextListVariants","SuspendedConnection","ExclamationTriangleIcon","color","KafkaConnectionTabP2","isKafkaSuspended","isKafkaPending","externalServer","tokenEndPointUrl","linkToServiceAccount","linkToAccessTab","adminAPIUrl","kafkaFleetManagerUrl","showCreateServiceAccountModal","TextVariants","fontSize","ClipboardCopy","textAriaLabel","isReadOnly","Button","ButtonVariant","ExpandableSection","toggleContent","onToggle","Popover","bodyContent","testId","HelpIcon","Label","SampleCodeSnippet","expandableCode","codeBlockCode","codeSnippet","copied","setCopied","copyCode","CodeBlockAction","ClipboardCopyButton","textId","exitDelay","maxWidth","text","navigator","clipboard","writeText","catch","CodeBlock","CodeBlockCode","isDetached","contentId","ExpandableSectionToggle","javaConfigCodeBlock","kafkaBootstrapUrl","tokenEndpointUrl","pythonConfigCodeBlock","pythonConfigExpandabledBlock","quarkusConfigExpandableBlock","springBootConfigCodeBlock","KafkaSampleCode","clientSelect","setClientSelect","ToggleGroup","ToggleGroupItem","buttonId","isSelected","onChange","client_type","KafkaInstanceDrawer","DrawerPanelContent","KafkaInstanceDrawerPanel","Drawer","DrawerContent","panelContent","DrawerContentBody","handleSelect","DrawerHead","DrawerActions","DrawerCloseButton","DrawerPanelBody","Tabs","activeKey","onSelect","Tab","eventKey","TabTitleText","parseISO","getExternalServer","getAdminServerUrl","endsWith","StatusLabel","forwardRef","ref","showWarning","showError","withPopover","buttonVariant","Split","hasGutter","SplitItem","CheckCircleIcon","Spinner","isPlain","Flex","FlexItem","HelperText","HelperTextItem","PopoverStatusOrder","KafkaToPopoverMapping","StatusProgressStepper","currentStatus","currentStep","findIndex","getVariant","index","ProgressStepper","isVertical","ProgressStep","titleId","isCurrent","StatusPopoverContent","Stack","StackItem","StatusPopover","initialOpen","reference","isVisible","setIsVisible","handleClickConnectionTabLink","handleClickSupportLink","shouldOpen","shouldClose","enableFlip","SuspendedPopover","alertSeverityVariant","headerIcon","KafkaInstanceStatus","warningAfterMinutes","errorAfterMinutes","popoverStatus","alert","setAlert","labelRef","checkCreatedAt","elapsed","differenceInMinutes","useInterval","EmptyStateNoInstances","PlusCircleIcon","SearchIcon","KafkaInstances","timeCreatedDate","instanceLinkEnable","isAriaDisabled","changeOwnerEnabled","deleteEnabled","openConnectionEnabled","onRowClick","isRowDeleted","toolbarBreakpoint","options","isPrimary","DateTimePicker","timeSelected","setIsTimeSelected","InputGroup","DatePicker","formatInTimeZone","newDate","formatISO","TimePicker","hour","minute","__","isValid","setHours","setMinutes","FilterGroup","epoch","onOffsetChange","onTimestampChange","onEpochChange","onLatest","currentCategory","setCurrentCategory","isOpen","setIsOpen","latest","ToolbarItem","Dropdown","DropdownToggle","DropdownPosition","dropdownItems","DropdownItem","autoFocus","DropdownSeparator","TextInput","placeholder","newOffset","Number","isInteger","LimitSelector","InputGroupText","hidden","Select","selections","idx","SelectOption","isSameMessage","m1","m2","beautifyUnknownValue","RetentionSizeUnits","RetentionTimeUnits","NoDataCell","columnLabel","MessageDetails","defaultTab","isResizable","minSize","MessageDetailsBody","messageKey","DescriptionList","isHorizontal","isCompact","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","defaultActiveKey","isCode","random","NoDataEmptyState","onRefresh","NoResultsEmptyState","onReset","OffsetRange","min","max","PartitionSelector","handleChange","valueAsNum","allPartitions","fill","makeOptions","slice","hiddenOptionsCount","handleFilter","SelectVariant","typeAheadAriaLabel","maxHeight","onFilter","isInputValuePersisted","placeholderText","onClear","InputGroupTextVariant","UnknownValuePreview","truncateAt","shouldTruncate","substring","truncate","preview","truncated","spaceItems","stopPropagation","MessageBrowserMachine","selectedMessage","initialLoading","fetchSuccess","fetchFail","verifyMessages","noData","refresh","pristine","dirty","shouldSearch","setPartition","setEpoch","setTimestamp","setOffset","setLatest","setLimit","selectMessage","deselectMessage","refreshing","setMessages","offsetMin","offsetMax","lastUpdated","noMessages","selectedMessageNotAvailable","areFiltersChanged","columnWidths","KafkaMessageBrowser","useMachine","devTools","send","KafkaMessageBrowserConnected","isFirstLoad","matches","isNoData","isRefreshing","requiresSearch","filterOffset","filterEpoch","filterTimestamp","setDefaultTab","columnLabels","Loading","OuterScrollContainer","Toolbar","ToolbarContent","ToolbarToggleGroup","toggleIcon","FilterIcon","breakpoint","ToolbarGroup","RefreshButton","alignment","InnerScrollContainer","ResponsiveTable","expectedLength","colIndex","keys","KafkaInstanceCapacityTable","columnNames","firstStreamingUnit","secondStreamingUnit","TableComposable","Thead","Tr","Tbody","table","MarketingPageHero","tagLine","description2","heroImage","heroImageSize","heroImageCanRepeat","heroImagePositionY","cta","MarketingPageSection","isWidthLimited","KafkaPageV3","Grid","lg","Card","CardHeader","CardHeaderMain","CardTitle","CardBody","CardFooter","bold","alignSelf","justifyContent","flex","Divider","xl","orientation","EmptyStateNoTopic","PrincipalType","unitsToBytes","BYTE","KIBIBYTE","MEBIBYTE","GIBIBYTE","TEBIBYTE","unitsToMilliSecond","MILLISECOND","SECOND","MINUTE","HOUR","DAY","formattedRetentionTime","days","unit","hours","minutes","seconds","millisecondsToTime","formattedRetentionSize","bytesToMemorySize","tebibytes","gibibytes","mebibytes","kibibytes","KafkaTopics","DurationOptions","EmptyStateInitialLoading","EmptyStateMetricsUnavailable","TachometerAltIcon","MetricsLayout","metricsLagAlert","topicsKpi","topicPartitionsKpi","consumerGroupKpi","diskSpaceMetrics","topicMetrics","GridItem","sm","CardBodyLoading","Bullseye","isSVG","timeIntervalsMapping","Last5minutes","ticks","showDate","Last15minutes","Last30minutes","Last1hour","Last3hours","Last6hours","Last12hours","Last24hours","Last2days","Last7days","chartHeight","chartPadding","bottom","left","right","top","ChartSkeletonLoader","useChartWidth","containerRef","setWidth","handleResize","clientWidth","useLayoutEffect","window","addEventListener","removeEventListener","formatBytes","units","shouldShowDate","timeDuration","dateToChartValue","fromUnixTime","timestampsToTicks","timestamps","allTimestamps","mostRecentTs","sub","getTime","ChartLinearWithOptionalLimit","chartName","xLabel","yLabel","usageLimit","formatValue","emptyState","itemsPerRow","lineLabel","limitLabel","legendData","symbol","chart_color_black_500","chart_color_blue_300","areaColor","softLimitColor","chartData","area","softLimit","entries","x","y","tickValues","getChartData","hasMetrics","Chart","ariaTitle","containerComponent","ChartVoronoiContainer","datum","constrainToVisibleArea","legendPosition","legendComponent","ChartLegend","themeColor","ChartTheme","legendAllowWrap","ChartAxis","C","tickFormat","dependentAxis","ChartGroup","ChartArea","ChartThreshold","stroke","colors","chart_color_cyan_300","ChartLogSizePerPartition","dataMap","ChartPopover","OutlinedQuestionCircleIcon","ChartTotalBytes","incomingTopicsData","outgoingTopicsData","incomingTopic","outgoingTopic","incomingTopicName","outgoingTopicName","incomingLine","metricsToLine","line","outgoingLine","chart_color_green_300","getBytesChartData","tickCount","ChartLine","EmptyStateNoMetricsData","EmptyStateNoMetricsDataForSelection","EmptyStateNoTopics","WrenchIcon","EmptyStateNoTopicSelected","DurationOptionsMap","FilterByTime","keyText","disableToolbar","onDurationChange","isTimeSelectOpen","setIsTimeSelectOpen","ariaId","selection","mapping","SelectGroup","timeOptions","widths","md","FilterByTopic","topicList","onSetSelectedTopic","isTopicSelectOpen","setIsTopicSelectOpen","selectKey","setSelectKey","allTopicsLabel","topicOptions","textInput","filteredTopics","indexOf","isGrouped","hasInlineFilter","ToolbarRefresh","ToolbarTopicsMetrics","onSetTimeDuration","CardTopicsMetrics","backendUnavailable","isInitialLoading","isJustCreated","onSelectedTopic","noTopics","selectedTopicNotInList","chartEmptyState","TotalBytesTitle","IncomingMessageRate","PartitionSizeTitle","ToolbarKafkaInstanceMetric","CardKafkaInstanceMetrics","usedDiskMetrics","ChartTitle","helperText","CardKpi","isFullHeight","shape","MetricsLagAlert","isClosed","onClickClose","actionClose","AlertActionCloseButton","PartitionCard","ExclamationCircleIcon","isExpandable","AlertVariant","role","apiState","failure","after","KafkaInstanceMetricsMachine","fetchFailures","callApi","criticalFail","justCreated","withResponse","selectDuration","setFetchTimestamp","setMetrics","incrementRetries","resetRetries","setDuration","canRetryFetching","TopicsMetricsMachine","selectTopic","setTopic","MetricsKpiMachine","KafkaInstanceMetricsContext","KafkaInstanceMetricsProvider","service","callback","results","MetricsKpiContext","MetricsKpiProvider","TopicsMetricsContext","TopicsMetricsProvider","useKafkaInstanceMetrics","isFailed","useTopicsMetrics","onTopicChange","localeCompare","Metrics","ConnectedMetrics","kafkaInstanceMetrics","topicsMetrics","metricsKpi","useMetricsKpi","ConnectedKafkaInstanceMetrics","ConnectedTopicsMetrics","Settings","connectionStatus","setConnectionStatus","setIsModalOpen","handleReAuthentication","reAuthValue","reauthentication","flexWrap","grow","spacer","isChecked","checked","Modal","ModalVariant","titleIconVariant","retentionTimeSelectOptions","isPlaceholder","retentionSizeSelectOptions","fieldId","fieldLabel","btnAriaLabel","fieldValue","popoverBody","popoverHeader","displayText","FormGroup","labelIcon","preventDefault","noVerticalAlign","readOnlyVariant","Cleanup","defaultFileDeleteDelay","defaultLogSegmentSize","defaultSegmentJitterTime","defaultSegmentTime","FormSection","titleElement","gibibyte","milliseconds","CustomRetentionMessage","selectOptions","topicData","NumberInput","onMinus","onPlus","CustomRetentionSize","CoreConfiguration","isCreate","setTopicData","invalidText","setInvalidText","setTopicValidated","topicValidated","availablePartitionLimit","validateName","legalNameChars","RegExp","retentionSizeUnit","setRetentionSizeUnit","retentionTimeUnit","setRetentionTimeUnit","isRetentionTimeSelectOpen","setIsRetentionTimeSelectOpen","isRetentionSizeSelectOpen","setIsRetentionSizeSelectOpen","validationCheck","ValidatedOptions","handleRetentionMessageSize","handleRetentionMessageTime","retentionTimeInput","toggleId","retentionSizeInput","labelHead","labelBody","buttonAriaLabel","helperTextInvalid","validated","isRequired","inputName","plusBtnProps","minusBtnProps","Radio","Flush","defaultFlushIntervalMessages","defaultFlushIntervalTime","Log","defaultDeleteRetentionTime","defaultMinCleanbleRatio","defaultMinimumCompactionLagTime","cleanupPolicyOptions","DropdownWithToggle","onSelectOption","isLabelAndValueNotSame","String","Message","defaultMaximumMessageBytes","defaultMessageTimestampType","defaultMaxMessageTimestampDiff","Replication","TopicAdvanceIndex","defaultIndexIntervalSize","defaultSegmentIndexSize","TopicAdvanceJumpLinks","canHaveDelete","SidebarPanel","JumpLinks","scrollableSelector","JumpLinksItem","handleCancel","checkTopicName","actionText","setIsLoading","warning","setWarning","Sidebar","SidebarContent","PageGroup","Form","ActionGroup","finally","EditTopicProperties","TopicProperties","showUnlimited","SelectOwner","filterRegExp","isCreatable","createText","menuAppendTo","ChangeKafkaOwner","setAccount","submittedAccount","isSaving","onConfirmOwner","onSubmit","renderAlert"],"sourceRoot":""}